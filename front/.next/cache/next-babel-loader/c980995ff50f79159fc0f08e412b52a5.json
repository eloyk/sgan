{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\sgan\\\\front\\\\src\\\\modules\\\\slick\\\\dots.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport { clamp } from \"./utils/innerSliderUtils\";\n\nconst getDotCount = spec => {\n  let dots;\n\n  if (spec.infinite) {\n    dots = Math.ceil(spec.slideCount / spec.slidesToScroll);\n  } else {\n    dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1;\n  }\n\n  return dots;\n};\n\nexport class Dots extends React.PureComponent {\n  clickHandler(options, e) {\n    // In Autoplay the focus stays on clicked button even after transition\n    // to next slide. That only goes away by click somewhere outside\n    e.preventDefault();\n    this.props.clickHandler(options);\n  }\n\n  render() {\n    const {\n      onMouseEnter,\n      onMouseOver,\n      onMouseLeave,\n      infinite,\n      slidesToScroll,\n      slidesToShow,\n      slideCount,\n      currentSlide\n    } = this.props;\n    let dotCount = getDotCount({\n      slideCount,\n      slidesToScroll,\n      slidesToShow,\n      infinite\n    });\n    const mouseEvents = {\n      onMouseEnter,\n      onMouseOver,\n      onMouseLeave\n    };\n    let dots = [];\n\n    for (let i = 0; i < dotCount; i++) {\n      let _rightBound = (i + 1) * slidesToScroll - 1;\n\n      let rightBound = infinite ? _rightBound : clamp(_rightBound, 0, slideCount - 1);\n\n      let _leftBound = rightBound - (slidesToScroll - 1);\n\n      let leftBound = infinite ? _leftBound : clamp(_leftBound, 0, slideCount - 1);\n      let className = classnames({\n        \"slick-active\": infinite ? currentSlide >= leftBound && currentSlide <= rightBound : currentSlide === leftBound\n      });\n      let dotOptions = {\n        message: \"dots\",\n        index: i,\n        slidesToScroll,\n        currentSlide\n      };\n      let onClick = this.clickHandler.bind(this, dotOptions);\n      dots = dots.concat(__jsx(\"li\", {\n        key: i,\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.cloneElement(this.props.customPaging(i), {\n        onClick\n      })));\n    }\n\n    return /*#__PURE__*/React.cloneElement(this.props.appendDots(dots), _objectSpread({\n      className: this.props.dotsClass\n    }, mouseEvents));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/sgan/front/src/modules/slick/dots.jsx"],"names":["React","classnames","clamp","getDotCount","spec","dots","infinite","Math","ceil","slideCount","slidesToScroll","slidesToShow","Dots","PureComponent","clickHandler","options","e","preventDefault","props","render","onMouseEnter","onMouseOver","onMouseLeave","currentSlide","dotCount","mouseEvents","i","_rightBound","rightBound","_leftBound","leftBound","className","dotOptions","message","index","onClick","bind","concat","cloneElement","customPaging","appendDots","dotsClass"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport classnames from \"classnames\"\nimport { clamp } from \"./utils/innerSliderUtils\"\n\nconst getDotCount = spec => {\n  let dots\n\n  if (spec.infinite) {\n    dots = Math.ceil(spec.slideCount / spec.slidesToScroll)\n  } else {\n    dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1\n  }\n\n  return dots\n}\n\nexport class Dots extends React.PureComponent {\n  clickHandler(options, e) {\n    // In Autoplay the focus stays on clicked button even after transition\n    // to next slide. That only goes away by click somewhere outside\n    e.preventDefault()\n    this.props.clickHandler(options)\n  }\n  render() {\n    const {\n      onMouseEnter,\n      onMouseOver,\n      onMouseLeave,\n      infinite,\n      slidesToScroll,\n      slidesToShow,\n      slideCount,\n      currentSlide\n    } = this.props\n    let dotCount = getDotCount({\n      slideCount,\n      slidesToScroll,\n      slidesToShow,\n      infinite\n    })\n\n    const mouseEvents = { onMouseEnter, onMouseOver, onMouseLeave }\n    let dots = []\n    for (let i = 0; i < dotCount; i++) {\n      let _rightBound = (i + 1) * slidesToScroll - 1\n      let rightBound = infinite ? _rightBound : clamp(_rightBound, 0, slideCount - 1)\n      let _leftBound = rightBound - (slidesToScroll - 1)\n      let leftBound = infinite ? _leftBound : clamp(_leftBound, 0, slideCount - 1)\n\n      let className = classnames({\n        \"slick-active\": infinite\n          ? currentSlide >= leftBound && currentSlide <= rightBound\n          : currentSlide === leftBound\n      })\n\n      let dotOptions = {\n        message: \"dots\",\n        index: i,\n        slidesToScroll,\n        currentSlide\n      }\n\n      let onClick = this.clickHandler.bind(this, dotOptions)\n      dots = dots.concat(\n        <li key={i} className={className}>\n          {React.cloneElement(this.props.customPaging(i), { onClick })}\n        </li>\n      )\n    }\n\n    return React.cloneElement(this.props.appendDots(dots), {\n      className: this.props.dotsClass,\n      ...mouseEvents\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}