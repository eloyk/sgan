{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Container, Row, Col, Form, Label, Input, Button, Portlet } from \"@panely/components\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport withLayout from \"components/layout/withLayout\";\nimport withAuth from \"components/firebase/firebaseWithAuth\";\nimport Head from \"next/head\";\n\nvar FormBasePage = /*#__PURE__*/function (_React$Component) {\n  _inherits(FormBasePage, _React$Component);\n\n  var _super = _createSuper(FormBasePage);\n\n  function FormBasePage() {\n    _classCallCheck(this, FormBasePage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FormBasePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set header title\n      this.props.pageChangeHeaderTitle(\"Base Form\"); // Set breadcrumb data\n\n      this.props.breadcrumbChange([{\n        text: \"Dashboard\",\n        link: \"/\"\n      }, {\n        text: \"Form\"\n      }, {\n        text: \"Base\",\n        link: \"/form/base\"\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Base Form | Panely\")), __jsx(Container, {\n        fluid: true\n      }, __jsx(Row, null, __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Base\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Use \", __jsx(\"code\", null, \"Input\"), \" component to make the most forms. Included are styles for general appearance, focus state, sizing, and more.\"), __jsx(\"hr\", null), __jsx(Form.Group, null, __jsx(Label, {\n        \"for\": \"emailBase\"\n      }, \"Email address\"), __jsx(Input, {\n        type: \"email\",\n        id: \"emailBase\",\n        placeholder: \"name@example.com\"\n      })), __jsx(Form.Group, null, __jsx(Label, {\n        \"for\": \"selectBase\"\n      }, \"Example select\"), __jsx(Input, {\n        type: \"select\",\n        id: \"selectBase\"\n      }, __jsx(\"option\", null, \"1\"), __jsx(\"option\", null, \"2\"), __jsx(\"option\", null, \"3\"), __jsx(\"option\", null, \"4\"), __jsx(\"option\", null, \"5\"))), __jsx(Form.Group, null, __jsx(Label, {\n        \"for\": \"multipleSelectBase\"\n      }, \"Example multiple select\"), __jsx(Input, {\n        type: \"select\",\n        id: \"multipleSelectBase\",\n        multiple: true\n      }, __jsx(\"option\", null, \"1\"), __jsx(\"option\", null, \"2\"), __jsx(\"option\", null, \"3\"), __jsx(\"option\", null, \"4\"), __jsx(\"option\", null, \"5\"))), __jsx(Form.Group, null, __jsx(Label, {\n        \"for\": \"textareaBase\"\n      }, \"Example textarea\"), __jsx(Input, {\n        type: \"textarea\",\n        id: \"textareaBase\",\n        rows: \"3\"\n      })), __jsx(Form.Group, null, __jsx(Label, {\n        \"for\": \"fileBase\"\n      }, \"Example file input\"), __jsx(Input, {\n        type: \"file\",\n        id: \"fileBase\"\n      })), __jsx(Form.Group, {\n        className: \"mb-0\"\n      }, __jsx(Label, {\n        \"for\": \"rangeBase\"\n      }, \"Example range input\"), __jsx(Input, {\n        type: \"range\",\n        id: \"rangeBase\"\n      })))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Readonly\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add the \", __jsx(\"code\", null, \"readOnly\"), \" boolean property on an input to prevent modification of the input\\u2019s value. Read-only inputs appear darker (just like disabled inputs), but retain the standard cursor.\"), __jsx(\"hr\", null), __jsx(Form.Group, {\n        className: \"mb-0\"\n      }, __jsx(Input, {\n        type: \"text\",\n        placeholder: \"Readonly input here...\",\n        readOnly: true\n      })))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Readonly plain text\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"If you want to have \", __jsx(\"code\", null, \"<Input readOnly>\"), \" elements in your form styled as plain text, add the \", __jsx(\"code\", null, \"plainText\"), \" property to remove the default form field styling and preserve the correct margin and padding.\"), __jsx(\"hr\", null), __jsx(Form.Group, {\n        className: \"mb-0\"\n      }, __jsx(Input, {\n        type: \"text\",\n        defaultValue: \"email@example.com\",\n        readOnly: true,\n        plainText: true\n      })))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Disabled state\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add the \", __jsx(\"code\", null, \"disabled\"), \" boolean property on an input to prevent user interactions and make it appear darker.\"), __jsx(\"hr\", null), __jsx(Form.Group, {\n        className: \"mb-0\"\n      }, __jsx(Label, {\n        \"for\": \"disabledTextInput\"\n      }, \"Disabled input\"), __jsx(Input, {\n        type: \"text\",\n        id: \"disabledTextInput\",\n        placeholder: \"Disabled input\",\n        disabled: true\n      }))))), __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Sizing\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Set heights using \", __jsx(\"code\", null, \"size\"), \" property with \", __jsx(\"code\", null, \"sm|lg\"), \" values.\"), __jsx(\"hr\", null), __jsx(Form.Group, null, __jsx(Input, {\n        type: \"text\",\n        size: \"lg\",\n        placeholder: \"Large input\"\n      })), __jsx(Form.Group, null, __jsx(Input, {\n        type: \"text\",\n        placeholder: \"Default input\"\n      })), __jsx(Form.Group, null, __jsx(Input, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Small input\"\n      })), __jsx(Form.Group, null, __jsx(Input, {\n        type: \"select\",\n        size: \"lg\"\n      }, __jsx(\"option\", null, \"Large select\"))), __jsx(Form.Group, null, __jsx(Input, {\n        type: \"select\"\n      }, __jsx(\"option\", null, \"Default select\"))), __jsx(Form.Group, {\n        className: \"mb-0\"\n      }, __jsx(Input, {\n        type: \"select\",\n        size: \"sm\"\n      }, __jsx(\"option\", null, \"Small select\"))))), __jsx(Portlet, null, __jsx(Portlet.Header, null, __jsx(Portlet.Title, null, \"Checkbox and Radio\")), __jsx(Portlet.Body, null, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Default\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with \", __jsx(\"code\", null, \"<Form.Group check>\"), \".\"), __jsx(\"hr\", null), __jsx(Form.Group, {\n        check: true\n      }, __jsx(Input, {\n        type: \"checkbox\",\n        defaultValue: \"check1\",\n        id: \"checkboxBase1\"\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"checkboxBase1\"\n      }, \"Default checkbox\")), __jsx(Form.Group, {\n        check: true\n      }, __jsx(Input, {\n        type: \"checkbox\",\n        defaultValue: \"check2\",\n        id: \"checkboxBase2\",\n        disabled: true\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"checkboxBase2\"\n      }, \"Disabled checkbox\")), __jsx(Form.Group, {\n        check: true\n      }, __jsx(Input, {\n        type: \"radio\",\n        defaultValue: \"option1\",\n        id: \"radioBase1\"\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"radioBase1\"\n      }, \"Default radio\")), __jsx(Form.Group, {\n        check: true\n      }, __jsx(Input, {\n        type: \"radio\",\n        defaultValue: \"option2\",\n        id: \"radioBase2\"\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"radioBase2\"\n      }, \"Second default radio\")), __jsx(Form.Group, {\n        check: true,\n        className: \"mb-0\"\n      }, __jsx(Input, {\n        type: \"radio\",\n        defaultValue: \"option3\",\n        id: \"radioBase3\"\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"radioBase3\"\n      }, \"Disabled radio\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Without labels\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add \", __jsx(\"code\", null, \".position-static\"), \" to inputs within \", __jsx(\"code\", null, \"<Form.Group check>\"), \" that don\\u2019t have any label text. Remember to still provide some form of label for assistive technologies.\"), __jsx(\"hr\", null), __jsx(Form.Group, {\n        check: true\n      }, __jsx(Input, {\n        type: \"checkbox\",\n        className: \"position-static\",\n        defaultValue: \"check1\",\n        id: \"checkboxBlank\"\n      })), __jsx(Form.Group, {\n        check: true\n      }, __jsx(Input, {\n        type: \"radio\",\n        className: \"position-static\",\n        name: \"blankRadio\",\n        defaultValue: \"option1\",\n        id: \"RadioBlank1\"\n      })), __jsx(Form.Group, {\n        check: true,\n        className: \"mb-0\"\n      }, __jsx(Input, {\n        type: \"radio\",\n        className: \"position-static\",\n        name: \"blankRadio\",\n        defaultValue: \"option2\",\n        id: \"RadioBlank2\"\n      })))), __jsx(Portlet, {\n        className: \"mb-0\"\n      }, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Inline\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Group checkboxes or radios on the same horizontal row by adding \", __jsx(\"code\", null, \"inline\"), \" property to any \", __jsx(\"code\", null, \"<Form.Group check>\"), \".\"), __jsx(\"hr\", null), __jsx(Form.Group, {\n        check: true,\n        inline: true\n      }, __jsx(Input, {\n        type: \"checkbox\",\n        defaultValue: \"option1\",\n        id: \"checkboxInline1\"\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"checkboxInline1\"\n      }, \"1\")), __jsx(Form.Group, {\n        check: true,\n        inline: true\n      }, __jsx(Input, {\n        type: \"checkbox\",\n        defaultValue: \"option2\",\n        id: \"checkboxInline2\"\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"checkboxInline2\"\n      }, \"2\")), __jsx(Form.Group, {\n        check: true,\n        inline: true,\n        className: \"mb-0\"\n      }, __jsx(Input, {\n        type: \"checkbox\",\n        defaultValue: \"option3\",\n        id: \"checkboxInline3\",\n        disabled: true\n      }), __jsx(Label, {\n        check: true,\n        \"for\": \"checkboxInline3\"\n      }, \"3 (disabled)\"))))))))));\n    }\n  }]);\n\n  return FormBasePage;\n}(React.Component);\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle: pageChangeHeaderTitle,\n    breadcrumbChange: breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withAuth(withLayout(FormBasePage)));","map":null,"metadata":{},"sourceType":"module"}