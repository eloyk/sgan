{"ast":null,"code":"// import { useState, useEffect, useContext, createContext } from \"react\"\n// import { firebaseClient } from \"./firebaseClient\"\n// import nookies from \"nookies\"\n// // Set authentication context\n// const AuthContext = createContext({\n//   user: null\n// })\n// export function AuthProvider({ children }) {\n//   const [user, setUser] = useState(null)\n//   useEffect(() => {\n//     // Set Cookie when firebase authentication token is changed\n//     return firebaseClient.auth().onIdTokenChanged(async user => {\n//       const cookieExpireIn = 30 * 24 * 60 * 60\n//       // Check whether user has logged in\n//       if (!user) {\n//         setUser(null)\n//         // Remove token from cookie\n//         nookies.set(null, \"token\", \"\", {\n//           maxAge: cookieExpireIn\n//         })\n//       } else {\n//         const token = await user.getIdToken()\n//         setUser(user)\n//         // Store token to cookie\n//         nookies.set(null, \"token\", token, {\n//           maxAge: cookieExpireIn\n//         })\n//       }\n//     })\n//   }, [])\n//   // Force refresh the token every 10 minutes\n//   useEffect(() => {\n//     const handle = setInterval(async () => {\n//       const user = firebaseClient.auth().currentUser\n//       if (user) await user.getIdToken(true)\n//     }, 10 * 60 * 1000)\n//     return () => clearInterval(handle)\n//   }, [])\n//   return <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>\n// }\n// export const useAuth = () => {\n//   return useContext(AuthContext)\n// }","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/components/firebase/firebaseAuth.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA","sourcesContent":["// import { useState, useEffect, useContext, createContext } from \"react\"\n// import { firebaseClient } from \"./firebaseClient\"\n// import nookies from \"nookies\"\n\n// // Set authentication context\n// const AuthContext = createContext({\n//   user: null\n// })\n\n// export function AuthProvider({ children }) {\n//   const [user, setUser] = useState(null)\n\n//   useEffect(() => {\n//     // Set Cookie when firebase authentication token is changed\n//     return firebaseClient.auth().onIdTokenChanged(async user => {\n//       const cookieExpireIn = 30 * 24 * 60 * 60\n\n//       // Check whether user has logged in\n//       if (!user) {\n//         setUser(null)\n\n//         // Remove token from cookie\n//         nookies.set(null, \"token\", \"\", {\n//           maxAge: cookieExpireIn\n//         })\n//       } else {\n//         const token = await user.getIdToken()\n//         setUser(user)\n\n//         // Store token to cookie\n//         nookies.set(null, \"token\", token, {\n//           maxAge: cookieExpireIn\n//         })\n//       }\n//     })\n//   }, [])\n\n//   // Force refresh the token every 10 minutes\n//   useEffect(() => {\n//     const handle = setInterval(async () => {\n//       const user = firebaseClient.auth().currentUser\n\n//       if (user) await user.getIdToken(true)\n//     }, 10 * 60 * 1000)\n\n//     return () => clearInterval(handle)\n//   }, [])\n\n//   return <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>\n// }\n\n// export const useAuth = () => {\n//   return useContext(AuthContext)\n// }\n"]},"metadata":{},"sourceType":"script"}