{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { Reference } from \"react-popper\";\nimport { DropdownContext } from \"./DropdownContext\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport Button from \"./Button\";\nconst defaultProps = {\n  \"aria-haspopup\": true,\n  variant: \"primary\"\n};\n\nclass DropdownToggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e) {\n    if (this.props.disabled || this.context.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.nav && !this.props.tag) {\n      e.preventDefault();\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    this.context.toggle(e);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      className,\n      cssModule,\n      innerRef,\n      disabled,\n      children,\n      onClick,\n      variant,\n      active,\n      caret,\n      split,\n      tag,\n      nav\n    } = _this$props,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"cssModule\", \"innerRef\", \"disabled\", \"children\", \"onClick\", \"variant\", \"active\", \"caret\", \"split\", \"tag\", \"nav\"]);\n\n    const ariaLabel = attributes[\"aria-label\"] || \"Toggle Dropdown\";\n    const classes = mapToCssModules(classNames({\n      \"dropdown-toggle\": caret || split,\n      \"dropdown-toggle-split\": split,\n      \"nav-link\": nav,\n      active: active\n    }, className), cssModule);\n    let Tag;\n\n    if (nav && !tag) {\n      Tag = \"a\";\n      attributes.href = \"#\";\n    } else if (!tag) {\n      Tag = Button;\n      attributes.variant = variant;\n      attributes.cssModule = cssModule;\n    } else {\n      Tag = tag;\n    }\n\n    return __jsx(Reference, {\n      innerRef: innerRef\n    }, ({\n      ref\n    }) => __jsx(Tag, _extends({}, attributes, {\n      [typeof Tag === \"string\" ? \"ref\" : \"innerRef\"]: ref,\n      className: classes,\n      onClick: this.onClick\n    }), typeof children !== \"undefined\" ? children : __jsx(\"span\", {\n      className: \"sr-only\"\n    }, ariaLabel)));\n  }\n\n}\n\nDropdownToggle.defaultProps = defaultProps;\nDropdownToggle.contextType = DropdownContext;\nexport default DropdownToggle;","map":null,"metadata":{},"sourceType":"module"}