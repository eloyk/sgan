{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\template\\\\src\\\\modules\\\\slick\\\\inner-slider.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport initialState from \"./initial-state\";\nimport debounce from \"lodash.debounce\";\nimport classnames from \"classnames\";\nimport { getOnDemandLazySlides, extractObject, initializedState, getHeight, canGoNext, slideHandler, changeSlide, keyHandler, swipeStart, swipeMove, swipeEnd, getPreClones, getPostClones, getTrackLeft, getTrackCSS } from \"./utils/innerSliderUtils\";\nimport { Track } from \"./track\";\nimport { Dots } from \"./dots\";\nimport { PrevArrow, NextArrow } from \"./arrows\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nexport class InnerSlider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"listRefHandler\", ref => this.list = ref);\n\n    _defineProperty(this, \"trackRefHandler\", ref => this.track = ref);\n\n    _defineProperty(this, \"adaptHeight\", () => {\n      if (this.props.adaptiveHeight && this.list) {\n        const elem = this.list.querySelector(`[data-index=\"${this.state.currentSlide}\"]`);\n        this.list.style.height = getHeight(elem) + \"px\";\n      }\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.props.onInit && this.props.onInit();\n\n      if (this.props.lazyLoad) {\n        let slidesToLoad = getOnDemandLazySlides(_objectSpread(_objectSpread({}, this.props), this.state));\n\n        if (slidesToLoad.length > 0) {\n          this.setState(prevState => ({\n            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n          }));\n\n          if (this.props.onLazyLoad) {\n            this.props.onLazyLoad(slidesToLoad);\n          }\n        }\n      }\n\n      let spec = _objectSpread({\n        listRef: this.list,\n        trackRef: this.track\n      }, this.props);\n\n      this.updateState(spec, true, () => {\n        this.adaptHeight();\n        this.props.autoplay && this.autoPlay(\"update\");\n      });\n\n      if (this.props.lazyLoad === \"progressive\") {\n        this.lazyLoadTimer = setInterval(this.progressiveLazyLoad, 1000);\n      }\n\n      this.ro = new ResizeObserver(() => {\n        if (this.state.animating) {\n          this.onWindowResized(false); // don't set trackStyle hence don't break animation\n\n          this.callbackTimers.push(setTimeout(() => this.onWindowResized(), this.props.speed));\n        } else {\n          this.onWindowResized();\n        }\n      });\n      this.ro.observe(this.list);\n      Array.prototype.forEach.call(document.querySelectorAll(\".slick-slide\"), slide => {\n        slide.onfocus = this.props.pauseOnFocus ? this.onSlideFocus : null;\n        slide.onblur = this.props.pauseOnFocus ? this.onSlideBlur : null;\n      });\n\n      if (window.addEventListener) {\n        window.addEventListener(\"resize\", this.onWindowResized);\n      } else {\n        window.attachEvent(\"onresize\", this.onWindowResized);\n      }\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      if (this.animationEndCallback) {\n        clearTimeout(this.animationEndCallback);\n      }\n\n      if (this.lazyLoadTimer) {\n        clearInterval(this.lazyLoadTimer);\n      }\n\n      if (this.callbackTimers.length) {\n        this.callbackTimers.forEach(timer => clearTimeout(timer));\n        this.callbackTimers = [];\n      }\n\n      if (window.addEventListener) {\n        window.removeEventListener(\"resize\", this.onWindowResized);\n      } else {\n        window.detachEvent(\"onresize\", this.onWindowResized);\n      }\n\n      if (this.autoplayTimer) {\n        clearInterval(this.autoplayTimer);\n      }\n\n      this.ro.disconnect();\n    });\n\n    _defineProperty(this, \"componentDidUpdate\", prevProps => {\n      this.checkImagesLoad();\n      this.props.onReInit && this.props.onReInit();\n\n      if (this.props.lazyLoad) {\n        let slidesToLoad = getOnDemandLazySlides(_objectSpread(_objectSpread({}, this.props), this.state));\n\n        if (slidesToLoad.length > 0) {\n          this.setState(prevState => ({\n            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n          }));\n\n          if (this.props.onLazyLoad) {\n            this.props.onLazyLoad(slidesToLoad);\n          }\n        }\n      } // if (this.props.onLazyLoad) {\n      //   this.props.onLazyLoad([leftMostSlide])\n      // }\n\n\n      this.adaptHeight();\n\n      let spec = _objectSpread(_objectSpread({\n        listRef: this.list,\n        trackRef: this.track\n      }, this.props), this.state);\n\n      const setTrackStyle = this.didPropsChange(prevProps);\n      setTrackStyle && this.updateState(spec, setTrackStyle, () => {\n        if (this.state.currentSlide >= React.Children.count(this.props.children)) {\n          this.changeSlide({\n            message: \"index\",\n            index: React.Children.count(this.props.children) - this.props.slidesToShow,\n            currentSlide: this.state.currentSlide\n          });\n        }\n\n        if (this.props.autoplay) {\n          this.autoPlay(\"update\");\n        } else {\n          this.pause(\"paused\");\n        }\n      });\n    });\n\n    _defineProperty(this, \"onWindowResized\", setTrackStyle => {\n      if (this.debouncedResize) this.debouncedResize.cancel();\n      this.debouncedResize = debounce(() => this.resizeWindow(setTrackStyle), 50);\n      this.debouncedResize();\n    });\n\n    _defineProperty(this, \"resizeWindow\", (setTrackStyle = true) => {\n      const isTrackMounted = Boolean(this.track && this.track.node); // prevent warning: setting state on unmounted component (server side rendering)\n\n      if (!isTrackMounted) return;\n\n      let spec = _objectSpread(_objectSpread({\n        listRef: this.list,\n        trackRef: this.track\n      }, this.props), this.state);\n\n      this.updateState(spec, setTrackStyle, () => {\n        if (this.props.autoplay) this.autoPlay(\"update\");else this.pause(\"paused\");\n      }); // animating state should be cleared while resizing, otherwise autoplay stops working\n\n      this.setState({\n        animating: false\n      });\n      clearTimeout(this.animationEndCallback);\n      delete this.animationEndCallback;\n    });\n\n    _defineProperty(this, \"updateState\", (spec, setTrackStyle, callback) => {\n      let updatedState = initializedState(spec);\n      spec = _objectSpread(_objectSpread(_objectSpread({}, spec), updatedState), {}, {\n        slideIndex: updatedState.currentSlide\n      });\n      let targetLeft = getTrackLeft(spec);\n      spec = _objectSpread(_objectSpread({}, spec), {}, {\n        left: targetLeft\n      });\n      let trackStyle = getTrackCSS(spec);\n\n      if (setTrackStyle || React.Children.count(this.props.children) !== React.Children.count(spec.children)) {\n        updatedState[\"trackStyle\"] = trackStyle;\n      }\n\n      this.setState(updatedState, callback);\n    });\n\n    _defineProperty(this, \"ssrInit\", () => {\n      if (this.props.variableWidth) {\n        let trackWidth = 0,\n            trackLeft = 0;\n        let childrenWidths = [];\n        let preClones = getPreClones(_objectSpread(_objectSpread(_objectSpread({}, this.props), this.state), {}, {\n          slideCount: this.props.children.length\n        }));\n        let postClones = getPostClones(_objectSpread(_objectSpread(_objectSpread({}, this.props), this.state), {}, {\n          slideCount: this.props.children.length\n        }));\n        this.props.children.forEach(child => {\n          childrenWidths.push(child.props.style.width);\n          trackWidth += child.props.style.width;\n        });\n\n        for (let i = 0; i < preClones; i++) {\n          trackLeft += childrenWidths[childrenWidths.length - 1 - i];\n          trackWidth += childrenWidths[childrenWidths.length - 1 - i];\n        }\n\n        for (let i = 0; i < postClones; i++) {\n          trackWidth += childrenWidths[i];\n        }\n\n        for (let i = 0; i < this.state.currentSlide; i++) {\n          trackLeft += childrenWidths[i];\n        }\n\n        let trackStyle = {\n          width: trackWidth + \"px\",\n          left: -trackLeft + \"px\"\n        };\n\n        if (this.props.centerMode) {\n          let currentWidth = `${childrenWidths[this.state.currentSlide]}px`;\n          trackStyle.left = `calc(${trackStyle.left} + (100% - ${currentWidth}) / 2 ) `;\n        }\n\n        return {\n          trackStyle\n        };\n      }\n\n      let childrenCount = React.Children.count(this.props.children);\n\n      const spec = _objectSpread(_objectSpread(_objectSpread({}, this.props), this.state), {}, {\n        slideCount: childrenCount\n      });\n\n      let slideCount = getPreClones(spec) + getPostClones(spec) + childrenCount;\n      let trackWidth = 100 / this.props.slidesToShow * slideCount;\n      let slideWidth = 100 / slideCount;\n      let trackLeft = -slideWidth * (getPreClones(spec) + this.state.currentSlide) * trackWidth / 100;\n\n      if (this.props.centerMode) {\n        trackLeft += (100 - slideWidth * trackWidth / 100) / 2;\n      }\n\n      let trackStyle = {\n        width: trackWidth + \"%\",\n        left: trackLeft + \"%\"\n      };\n      return {\n        slideWidth: slideWidth + \"%\",\n        trackStyle: trackStyle\n      };\n    });\n\n    _defineProperty(this, \"checkImagesLoad\", () => {\n      let images = this.list.querySelectorAll(\".slick-slide img\");\n      let imagesCount = images.length,\n          loadedCount = 0;\n      Array.prototype.forEach.call(images, image => {\n        const handler = () => ++loadedCount && loadedCount >= imagesCount && this.onWindowResized();\n\n        if (!image.onclick) {\n          image.onclick = () => image.parentNode.focus();\n        } else {\n          const prevClickHandler = image.onclick;\n\n          image.onclick = () => {\n            prevClickHandler();\n            image.parentNode.focus();\n          };\n        }\n\n        if (!image.onload) {\n          if (this.props.lazyLoad) {\n            image.onload = () => {\n              this.adaptHeight();\n              this.callbackTimers.push(setTimeout(this.onWindowResized, this.props.speed));\n            };\n          } else {\n            image.onload = handler;\n\n            image.onerror = () => {\n              handler();\n              this.props.onLazyLoadError && this.props.onLazyLoadError();\n            };\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"progressiveLazyLoad\", () => {\n      let slidesToLoad = [];\n\n      const spec = _objectSpread(_objectSpread({}, this.props), this.state);\n\n      for (let index = this.state.currentSlide; index < this.state.slideCount + getPostClones(spec); index++) {\n        if (this.state.lazyLoadedList.indexOf(index) < 0) {\n          slidesToLoad.push(index);\n          break;\n        }\n      }\n\n      for (let index = this.state.currentSlide - 1; index >= -getPreClones(spec); index--) {\n        if (this.state.lazyLoadedList.indexOf(index) < 0) {\n          slidesToLoad.push(index);\n          break;\n        }\n      }\n\n      if (slidesToLoad.length > 0) {\n        this.setState(state => ({\n          lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)\n        }));\n\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad(slidesToLoad);\n        }\n      } else {\n        if (this.lazyLoadTimer) {\n          clearInterval(this.lazyLoadTimer);\n          delete this.lazyLoadTimer;\n        }\n      }\n    });\n\n    _defineProperty(this, \"slideHandler\", (index, dontAnimate = false) => {\n      const {\n        asNavFor,\n        beforeChange,\n        onLazyLoad,\n        speed,\n        afterChange\n      } = this.props; // capture currentslide before state is updated\n\n      const currentSlide = this.state.currentSlide;\n      let {\n        state,\n        nextState\n      } = slideHandler(_objectSpread(_objectSpread(_objectSpread({\n        index\n      }, this.props), this.state), {}, {\n        trackRef: this.track,\n        useCSS: this.props.useCSS && !dontAnimate\n      }));\n      if (!state) return;\n      beforeChange && beforeChange(currentSlide, state.currentSlide);\n      let slidesToLoad = state.lazyLoadedList.filter(value => this.state.lazyLoadedList.indexOf(value) < 0);\n      onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad);\n\n      if (!this.props.waitForAnimate && this.animationEndCallback) {\n        clearTimeout(this.animationEndCallback);\n        afterChange && afterChange(currentSlide);\n        delete this.animationEndCallback;\n      }\n\n      this.setState(state, () => {\n        // asNavForIndex check is to avoid recursive calls of slideHandler in waitForAnimate=false mode\n        if (asNavFor && this.asNavForIndex !== index) {\n          this.asNavForIndex = index;\n          asNavFor.innerSlider.slideHandler(index);\n        }\n\n        if (!nextState) return;\n        this.animationEndCallback = setTimeout(() => {\n          const {\n            animating\n          } = nextState,\n                firstBatch = _objectWithoutProperties(nextState, [\"animating\"]);\n\n          this.setState(firstBatch, () => {\n            this.callbackTimers.push(setTimeout(() => this.setState({\n              animating\n            }), 10));\n            afterChange && afterChange(state.currentSlide);\n            delete this.animationEndCallback;\n          });\n        }, speed);\n      });\n    });\n\n    _defineProperty(this, \"changeSlide\", (options, dontAnimate = false) => {\n      const spec = _objectSpread(_objectSpread({}, this.props), this.state);\n\n      let targetSlide = changeSlide(spec, options);\n      if (targetSlide !== 0 && !targetSlide) return;\n\n      if (dontAnimate === true) {\n        this.slideHandler(targetSlide, dontAnimate);\n      } else {\n        this.slideHandler(targetSlide);\n      }\n\n      this.props.autoplay && this.autoPlay(\"update\");\n\n      if (this.props.focusOnSelect) {\n        const nodes = this.list.querySelectorAll(\".slick-current\");\n        nodes[0] && nodes[0].focus();\n      }\n    });\n\n    _defineProperty(this, \"clickHandler\", e => {\n      if (this.clickable === false) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      this.clickable = true;\n    });\n\n    _defineProperty(this, \"keyHandler\", e => {\n      let dir = keyHandler(e, this.props.accessibility, this.props.rtl);\n      dir !== \"\" && this.changeSlide({\n        message: dir\n      });\n    });\n\n    _defineProperty(this, \"selectHandler\", options => {\n      this.changeSlide(options);\n    });\n\n    _defineProperty(this, \"disableBodyScroll\", () => {\n      const preventDefault = e => {\n        e = e || window.event;\n        if (e.preventDefault) e.preventDefault();\n        e.returnValue = false;\n      };\n\n      window.ontouchmove = preventDefault;\n    });\n\n    _defineProperty(this, \"enableBodyScroll\", () => {\n      window.ontouchmove = null;\n    });\n\n    _defineProperty(this, \"swipeStart\", e => {\n      if (this.props.verticalSwiping) {\n        this.disableBodyScroll();\n      }\n\n      let state = swipeStart(e, this.props.swipe, this.props.draggable);\n      state !== \"\" && this.setState(state);\n    });\n\n    _defineProperty(this, \"swipeMove\", e => {\n      let state = swipeMove(e, _objectSpread(_objectSpread(_objectSpread({}, this.props), this.state), {}, {\n        trackRef: this.track,\n        listRef: this.list,\n        slideIndex: this.state.currentSlide\n      }));\n      if (!state) return;\n\n      if (state[\"swiping\"]) {\n        this.clickable = false;\n      }\n\n      this.setState(state);\n    });\n\n    _defineProperty(this, \"swipeEnd\", e => {\n      let state = swipeEnd(e, _objectSpread(_objectSpread(_objectSpread({}, this.props), this.state), {}, {\n        trackRef: this.track,\n        listRef: this.list,\n        slideIndex: this.state.currentSlide\n      }));\n      if (!state) return;\n      let triggerSlideHandler = state[\"triggerSlideHandler\"];\n      delete state[\"triggerSlideHandler\"];\n      this.setState(state);\n      if (triggerSlideHandler === undefined) return;\n      this.slideHandler(triggerSlideHandler);\n\n      if (this.props.verticalSwiping) {\n        this.enableBodyScroll();\n      }\n    });\n\n    _defineProperty(this, \"touchEnd\", e => {\n      this.swipeEnd(e);\n      this.clickable = true;\n    });\n\n    _defineProperty(this, \"slickPrev\", () => {\n      // this and fellow methods are wrapped in setTimeout\n      // to make sure initialize setState has happened before\n      // any of such methods are called\n      this.callbackTimers.push(setTimeout(() => this.changeSlide({\n        message: \"previous\"\n      }), 0));\n    });\n\n    _defineProperty(this, \"slickNext\", () => {\n      this.callbackTimers.push(setTimeout(() => this.changeSlide({\n        message: \"next\"\n      }), 0));\n    });\n\n    _defineProperty(this, \"slickGoTo\", (slide, dontAnimate = false) => {\n      slide = Number(slide);\n      if (isNaN(slide)) return \"\";\n      this.callbackTimers.push(setTimeout(() => this.changeSlide({\n        message: \"index\",\n        index: slide,\n        currentSlide: this.state.currentSlide\n      }, dontAnimate), 0));\n    });\n\n    _defineProperty(this, \"play\", () => {\n      var nextIndex;\n\n      if (this.props.rtl) {\n        nextIndex = this.state.currentSlide - this.props.slidesToScroll;\n      } else {\n        if (canGoNext(_objectSpread(_objectSpread({}, this.props), this.state))) {\n          nextIndex = this.state.currentSlide + this.props.slidesToScroll;\n        } else {\n          return false;\n        }\n      }\n\n      this.slideHandler(nextIndex);\n    });\n\n    _defineProperty(this, \"autoPlay\", playType => {\n      if (this.autoplayTimer) {\n        clearInterval(this.autoplayTimer);\n      }\n\n      const autoplaying = this.state.autoplaying;\n\n      if (playType === \"update\") {\n        if (autoplaying === \"hovered\" || autoplaying === \"focused\" || autoplaying === \"paused\") {\n          return;\n        }\n      } else if (playType === \"leave\") {\n        if (autoplaying === \"paused\" || autoplaying === \"focused\") {\n          return;\n        }\n      } else if (playType === \"blur\") {\n        if (autoplaying === \"paused\" || autoplaying === \"hovered\") {\n          return;\n        }\n      }\n\n      this.autoplayTimer = setInterval(this.play, this.props.autoplaySpeed + 50);\n      this.setState({\n        autoplaying: \"playing\"\n      });\n    });\n\n    _defineProperty(this, \"pause\", pauseType => {\n      if (this.autoplayTimer) {\n        clearInterval(this.autoplayTimer);\n        this.autoplayTimer = null;\n      }\n\n      const autoplaying = this.state.autoplaying;\n\n      if (pauseType === \"paused\") {\n        this.setState({\n          autoplaying: \"paused\"\n        });\n      } else if (pauseType === \"focused\") {\n        if (autoplaying === \"hovered\" || autoplaying === \"playing\") {\n          this.setState({\n            autoplaying: \"focused\"\n          });\n        }\n      } else {\n        // pauseType  is 'hovered'\n        if (autoplaying === \"playing\") {\n          this.setState({\n            autoplaying: \"hovered\"\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"onDotsOver\", () => this.props.autoplay && this.pause(\"hovered\"));\n\n    _defineProperty(this, \"onDotsLeave\", () => this.props.autoplay && this.state.autoplaying === \"hovered\" && this.autoPlay(\"leave\"));\n\n    _defineProperty(this, \"onTrackOver\", () => this.props.autoplay && this.pause(\"hovered\"));\n\n    _defineProperty(this, \"onTrackLeave\", () => this.props.autoplay && this.state.autoplaying === \"hovered\" && this.autoPlay(\"leave\"));\n\n    _defineProperty(this, \"onSlideFocus\", () => this.props.autoplay && this.pause(\"focused\"));\n\n    _defineProperty(this, \"onSlideBlur\", () => this.props.autoplay && this.state.autoplaying === \"focused\" && this.autoPlay(\"blur\"));\n\n    _defineProperty(this, \"render\", () => {\n      var className = classnames(\"slick-slider\", \"carousel\", this.props.className, {\n        \"carousel-center\": this.props.centerMode,\n        \"slick-vertical\": this.props.vertical,\n        \"slick-initialized\": true\n      });\n\n      let spec = _objectSpread(_objectSpread({}, this.props), this.state);\n\n      let trackProps = extractObject(spec, [\"fade\", \"cssEase\", \"speed\", \"infinite\", \"centerMode\", \"focusOnSelect\", \"currentSlide\", \"lazyLoad\", \"lazyLoadedList\", \"rtl\", \"slideWidth\", \"slideHeight\", \"listHeight\", \"vertical\", \"slidesToShow\", \"slidesToScroll\", \"slideCount\", \"trackStyle\", \"variableWidth\", \"unslick\", \"centerPadding\", \"targetSlide\", \"useCSS\"]);\n      const {\n        pauseOnHover\n      } = this.props;\n      trackProps = _objectSpread(_objectSpread({}, trackProps), {}, {\n        onMouseEnter: pauseOnHover ? this.onTrackOver : null,\n        onMouseLeave: pauseOnHover ? this.onTrackLeave : null,\n        onMouseOver: pauseOnHover ? this.onTrackOver : null,\n        focusOnSelect: this.props.focusOnSelect && this.clickable ? this.selectHandler : null\n      });\n      var dots;\n\n      if (this.props.dots === true && this.state.slideCount >= this.props.slidesToShow) {\n        let dotProps = extractObject(spec, [\"dotsClass\", \"slideCount\", \"slidesToShow\", \"currentSlide\", \"slidesToScroll\", \"clickHandler\", \"children\", \"customPaging\", \"infinite\", \"appendDots\"]);\n        const {\n          pauseOnDotsHover\n        } = this.props;\n        dotProps = _objectSpread(_objectSpread({}, dotProps), {}, {\n          clickHandler: this.changeSlide,\n          onMouseEnter: pauseOnDotsHover ? this.onDotsLeave : null,\n          onMouseOver: pauseOnDotsHover ? this.onDotsOver : null,\n          onMouseLeave: pauseOnDotsHover ? this.onDotsLeave : null\n        });\n        dots = __jsx(Dots, _extends({}, dotProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 14\n          }\n        }));\n      }\n\n      var prevArrow, nextArrow;\n      let arrowProps = extractObject(spec, [\"infinite\", \"centerMode\", \"currentSlide\", \"slideCount\", \"slidesToShow\", \"prevArrow\", \"nextArrow\"]);\n      arrowProps.clickHandler = this.changeSlide;\n\n      if (this.props.arrows) {\n        prevArrow = __jsx(PrevArrow, _extends({}, arrowProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 19\n          }\n        }));\n        nextArrow = __jsx(NextArrow, _extends({}, arrowProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 19\n          }\n        }));\n      }\n\n      var verticalHeightStyle = null;\n\n      if (this.props.vertical) {\n        verticalHeightStyle = {\n          height: this.state.listHeight\n        };\n      }\n\n      var centerPaddingStyle = null;\n\n      if (this.props.vertical === false) {\n        if (this.props.centerMode === true) {\n          centerPaddingStyle = {\n            padding: \"0px \" + this.props.centerPadding\n          };\n        }\n      } else {\n        if (this.props.centerMode === true) {\n          centerPaddingStyle = {\n            padding: this.props.centerPadding + \" 0px\"\n          };\n        }\n      }\n\n      const listStyle = _objectSpread(_objectSpread({}, verticalHeightStyle), centerPaddingStyle);\n\n      const touchMove = this.props.touchMove;\n      let listProps = {\n        className: \"slick-list\",\n        style: listStyle,\n        onClick: this.clickHandler,\n        onMouseDown: touchMove ? this.swipeStart : null,\n        onMouseMove: this.state.dragging && touchMove ? this.swipeMove : null,\n        onMouseUp: touchMove ? this.swipeEnd : null,\n        onMouseLeave: this.state.dragging && touchMove ? this.swipeEnd : null,\n        onTouchStart: touchMove ? this.swipeStart : null,\n        onTouchMove: this.state.dragging && touchMove ? this.swipeMove : null,\n        onTouchEnd: touchMove ? this.touchEnd : null,\n        onTouchCancel: this.state.dragging && touchMove ? this.swipeEnd : null,\n        onKeyDown: this.props.accessibility ? this.keyHandler : null\n      };\n      let innerSliderProps = {\n        className: className,\n        dir: \"ltr\",\n        style: this.props.style\n      };\n\n      if (this.props.unslick) {\n        listProps = {\n          className: \"slick-list\"\n        };\n        innerSliderProps = {\n          className\n        };\n      }\n\n      return __jsx(\"div\", _extends({}, innerSliderProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 7\n        }\n      }), !this.props.unslick ? prevArrow : \"\", __jsx(\"div\", _extends({\n        ref: this.listRefHandler\n      }, listProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 9\n        }\n      }), __jsx(Track, _extends({\n        ref: this.trackRefHandler\n      }, trackProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 11\n        }\n      }), this.props.children)), !this.props.unslick ? nextArrow : \"\", !this.props.unslick ? dots : \"\");\n    });\n\n    this.list = null;\n    this.track = null;\n    this.state = _objectSpread(_objectSpread({}, initialState), {}, {\n      currentSlide: this.props.initialSlide,\n      slideCount: React.Children.count(this.props.children)\n    });\n    this.callbackTimers = [];\n    this.clickable = true;\n    this.debouncedResize = null;\n    const ssrState = this.ssrInit();\n    this.state = _objectSpread(_objectSpread({}, this.state), ssrState);\n  }\n\n  didPropsChange(prevProps) {\n    let setTrackStyle = false;\n\n    for (let key of Object.keys(this.props)) {\n      if (!prevProps.hasOwnProperty(key)) {\n        setTrackStyle = true;\n        break;\n      }\n\n      if (typeof prevProps[key] === \"object\" || typeof prevProps[key] === \"function\") {\n        continue;\n      }\n\n      if (prevProps[key] !== this.props[key]) {\n        setTrackStyle = true;\n        break;\n      }\n    }\n\n    return setTrackStyle || React.Children.count(this.props.children) !== React.Children.count(prevProps.children);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/modules/slick/inner-slider.jsx"],"names":["React","initialState","debounce","classnames","getOnDemandLazySlides","extractObject","initializedState","getHeight","canGoNext","slideHandler","changeSlide","keyHandler","swipeStart","swipeMove","swipeEnd","getPreClones","getPostClones","getTrackLeft","getTrackCSS","Track","Dots","PrevArrow","NextArrow","ResizeObserver","InnerSlider","Component","constructor","props","ref","list","track","adaptiveHeight","elem","querySelector","state","currentSlide","style","height","onInit","lazyLoad","slidesToLoad","length","setState","prevState","lazyLoadedList","concat","onLazyLoad","spec","listRef","trackRef","updateState","adaptHeight","autoplay","autoPlay","lazyLoadTimer","setInterval","progressiveLazyLoad","ro","animating","onWindowResized","callbackTimers","push","setTimeout","speed","observe","Array","prototype","forEach","call","document","querySelectorAll","slide","onfocus","pauseOnFocus","onSlideFocus","onblur","onSlideBlur","window","addEventListener","attachEvent","animationEndCallback","clearTimeout","clearInterval","timer","removeEventListener","detachEvent","autoplayTimer","disconnect","prevProps","checkImagesLoad","onReInit","setTrackStyle","didPropsChange","Children","count","children","message","index","slidesToShow","pause","debouncedResize","cancel","resizeWindow","isTrackMounted","Boolean","node","callback","updatedState","slideIndex","targetLeft","left","trackStyle","variableWidth","trackWidth","trackLeft","childrenWidths","preClones","slideCount","postClones","child","width","i","centerMode","currentWidth","childrenCount","slideWidth","images","imagesCount","loadedCount","image","handler","onclick","parentNode","focus","prevClickHandler","onload","onerror","onLazyLoadError","indexOf","dontAnimate","asNavFor","beforeChange","afterChange","nextState","useCSS","filter","value","waitForAnimate","asNavForIndex","innerSlider","firstBatch","options","targetSlide","focusOnSelect","nodes","e","clickable","stopPropagation","preventDefault","dir","accessibility","rtl","event","returnValue","ontouchmove","verticalSwiping","disableBodyScroll","swipe","draggable","triggerSlideHandler","undefined","enableBodyScroll","Number","isNaN","nextIndex","slidesToScroll","playType","autoplaying","play","autoplaySpeed","pauseType","className","vertical","trackProps","pauseOnHover","onMouseEnter","onTrackOver","onMouseLeave","onTrackLeave","onMouseOver","selectHandler","dots","dotProps","pauseOnDotsHover","clickHandler","onDotsLeave","onDotsOver","prevArrow","nextArrow","arrowProps","arrows","verticalHeightStyle","listHeight","centerPaddingStyle","padding","centerPadding","listStyle","touchMove","listProps","onClick","onMouseDown","onMouseMove","dragging","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","touchEnd","onTouchCancel","onKeyDown","innerSliderProps","unslick","listRefHandler","trackRefHandler","initialSlide","ssrState","ssrInit","key","Object","keys","hasOwnProperty"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport initialState from \"./initial-state\"\nimport debounce from \"lodash.debounce\"\nimport classnames from \"classnames\"\nimport {\n  getOnDemandLazySlides,\n  extractObject,\n  initializedState,\n  getHeight,\n  canGoNext,\n  slideHandler,\n  changeSlide,\n  keyHandler,\n  swipeStart,\n  swipeMove,\n  swipeEnd,\n  getPreClones,\n  getPostClones,\n  getTrackLeft,\n  getTrackCSS\n} from \"./utils/innerSliderUtils\"\n\nimport { Track } from \"./track\"\nimport { Dots } from \"./dots\"\nimport { PrevArrow, NextArrow } from \"./arrows\"\nimport ResizeObserver from \"resize-observer-polyfill\"\n\nexport class InnerSlider extends React.Component {\n  constructor(props) {\n    super(props)\n    this.list = null\n    this.track = null\n    this.state = {\n      ...initialState,\n      currentSlide: this.props.initialSlide,\n      slideCount: React.Children.count(this.props.children)\n    }\n    this.callbackTimers = []\n    this.clickable = true\n    this.debouncedResize = null\n    const ssrState = this.ssrInit()\n    this.state = { ...this.state, ...ssrState }\n  }\n  listRefHandler = ref => (this.list = ref)\n  trackRefHandler = ref => (this.track = ref)\n  adaptHeight = () => {\n    if (this.props.adaptiveHeight && this.list) {\n      const elem = this.list.querySelector(`[data-index=\"${this.state.currentSlide}\"]`)\n      this.list.style.height = getHeight(elem) + \"px\"\n    }\n  }\n  componentDidMount = () => {\n    this.props.onInit && this.props.onInit()\n    if (this.props.lazyLoad) {\n      let slidesToLoad = getOnDemandLazySlides({\n        ...this.props,\n        ...this.state\n      })\n      if (slidesToLoad.length > 0) {\n        this.setState(prevState => ({\n          lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n        }))\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad(slidesToLoad)\n        }\n      }\n    }\n    let spec = { listRef: this.list, trackRef: this.track, ...this.props }\n    this.updateState(spec, true, () => {\n      this.adaptHeight()\n      this.props.autoplay && this.autoPlay(\"update\")\n    })\n    if (this.props.lazyLoad === \"progressive\") {\n      this.lazyLoadTimer = setInterval(this.progressiveLazyLoad, 1000)\n    }\n    this.ro = new ResizeObserver(() => {\n      if (this.state.animating) {\n        this.onWindowResized(false) // don't set trackStyle hence don't break animation\n        this.callbackTimers.push(setTimeout(() => this.onWindowResized(), this.props.speed))\n      } else {\n        this.onWindowResized()\n      }\n    })\n    this.ro.observe(this.list)\n    Array.prototype.forEach.call(document.querySelectorAll(\".slick-slide\"), slide => {\n      slide.onfocus = this.props.pauseOnFocus ? this.onSlideFocus : null\n      slide.onblur = this.props.pauseOnFocus ? this.onSlideBlur : null\n    })\n    if (window.addEventListener) {\n      window.addEventListener(\"resize\", this.onWindowResized)\n    } else {\n      window.attachEvent(\"onresize\", this.onWindowResized)\n    }\n  }\n  componentWillUnmount = () => {\n    if (this.animationEndCallback) {\n      clearTimeout(this.animationEndCallback)\n    }\n    if (this.lazyLoadTimer) {\n      clearInterval(this.lazyLoadTimer)\n    }\n    if (this.callbackTimers.length) {\n      this.callbackTimers.forEach(timer => clearTimeout(timer))\n      this.callbackTimers = []\n    }\n    if (window.addEventListener) {\n      window.removeEventListener(\"resize\", this.onWindowResized)\n    } else {\n      window.detachEvent(\"onresize\", this.onWindowResized)\n    }\n    if (this.autoplayTimer) {\n      clearInterval(this.autoplayTimer)\n    }\n    this.ro.disconnect()\n  }\n\n  didPropsChange(prevProps) {\n    let setTrackStyle = false\n    for (let key of Object.keys(this.props)) {\n      if (!prevProps.hasOwnProperty(key)) {\n        setTrackStyle = true\n        break\n      }\n      if (typeof prevProps[key] === \"object\" || typeof prevProps[key] === \"function\") {\n        continue\n      }\n      if (prevProps[key] !== this.props[key]) {\n        setTrackStyle = true\n        break\n      }\n    }\n    return (\n      setTrackStyle ||\n      React.Children.count(this.props.children) !== React.Children.count(prevProps.children)\n    )\n  }\n\n  componentDidUpdate = prevProps => {\n    this.checkImagesLoad()\n    this.props.onReInit && this.props.onReInit()\n    if (this.props.lazyLoad) {\n      let slidesToLoad = getOnDemandLazySlides({\n        ...this.props,\n        ...this.state\n      })\n      if (slidesToLoad.length > 0) {\n        this.setState(prevState => ({\n          lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n        }))\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad(slidesToLoad)\n        }\n      }\n    }\n    // if (this.props.onLazyLoad) {\n    //   this.props.onLazyLoad([leftMostSlide])\n    // }\n    this.adaptHeight()\n    let spec = {\n      listRef: this.list,\n      trackRef: this.track,\n      ...this.props,\n      ...this.state\n    }\n    const setTrackStyle = this.didPropsChange(prevProps)\n    setTrackStyle &&\n      this.updateState(spec, setTrackStyle, () => {\n        if (this.state.currentSlide >= React.Children.count(this.props.children)) {\n          this.changeSlide({\n            message: \"index\",\n            index: React.Children.count(this.props.children) - this.props.slidesToShow,\n            currentSlide: this.state.currentSlide\n          })\n        }\n        if (this.props.autoplay) {\n          this.autoPlay(\"update\")\n        } else {\n          this.pause(\"paused\")\n        }\n      })\n  }\n  onWindowResized = setTrackStyle => {\n    if (this.debouncedResize) this.debouncedResize.cancel()\n    this.debouncedResize = debounce(() => this.resizeWindow(setTrackStyle), 50)\n    this.debouncedResize()\n  }\n  resizeWindow = (setTrackStyle = true) => {\n    const isTrackMounted = Boolean(this.track && this.track.node)\n    // prevent warning: setting state on unmounted component (server side rendering)\n    if (!isTrackMounted) return\n    let spec = {\n      listRef: this.list,\n      trackRef: this.track,\n      ...this.props,\n      ...this.state\n    }\n    this.updateState(spec, setTrackStyle, () => {\n      if (this.props.autoplay) this.autoPlay(\"update\")\n      else this.pause(\"paused\")\n    })\n    // animating state should be cleared while resizing, otherwise autoplay stops working\n    this.setState({\n      animating: false\n    })\n    clearTimeout(this.animationEndCallback)\n    delete this.animationEndCallback\n  }\n  updateState = (spec, setTrackStyle, callback) => {\n    let updatedState = initializedState(spec)\n    spec = { ...spec, ...updatedState, slideIndex: updatedState.currentSlide }\n    let targetLeft = getTrackLeft(spec)\n    spec = { ...spec, left: targetLeft }\n    let trackStyle = getTrackCSS(spec)\n    if (\n      setTrackStyle ||\n      React.Children.count(this.props.children) !== React.Children.count(spec.children)\n    ) {\n      updatedState[\"trackStyle\"] = trackStyle\n    }\n    this.setState(updatedState, callback)\n  }\n\n  ssrInit = () => {\n    if (this.props.variableWidth) {\n      let trackWidth = 0,\n        trackLeft = 0\n      let childrenWidths = []\n      let preClones = getPreClones({\n        ...this.props,\n        ...this.state,\n        slideCount: this.props.children.length\n      })\n      let postClones = getPostClones({\n        ...this.props,\n        ...this.state,\n        slideCount: this.props.children.length\n      })\n      this.props.children.forEach(child => {\n        childrenWidths.push(child.props.style.width)\n        trackWidth += child.props.style.width\n      })\n      for (let i = 0; i < preClones; i++) {\n        trackLeft += childrenWidths[childrenWidths.length - 1 - i]\n        trackWidth += childrenWidths[childrenWidths.length - 1 - i]\n      }\n      for (let i = 0; i < postClones; i++) {\n        trackWidth += childrenWidths[i]\n      }\n      for (let i = 0; i < this.state.currentSlide; i++) {\n        trackLeft += childrenWidths[i]\n      }\n      let trackStyle = {\n        width: trackWidth + \"px\",\n        left: -trackLeft + \"px\"\n      }\n      if (this.props.centerMode) {\n        let currentWidth = `${childrenWidths[this.state.currentSlide]}px`\n        trackStyle.left = `calc(${trackStyle.left} + (100% - ${currentWidth}) / 2 ) `\n      }\n      return {\n        trackStyle\n      }\n    }\n    let childrenCount = React.Children.count(this.props.children)\n    const spec = { ...this.props, ...this.state, slideCount: childrenCount }\n    let slideCount = getPreClones(spec) + getPostClones(spec) + childrenCount\n    let trackWidth = (100 / this.props.slidesToShow) * slideCount\n    let slideWidth = 100 / slideCount\n    let trackLeft =\n      (-slideWidth * (getPreClones(spec) + this.state.currentSlide) * trackWidth) / 100\n    if (this.props.centerMode) {\n      trackLeft += (100 - (slideWidth * trackWidth) / 100) / 2\n    }\n    let trackStyle = {\n      width: trackWidth + \"%\",\n      left: trackLeft + \"%\"\n    }\n    return {\n      slideWidth: slideWidth + \"%\",\n      trackStyle: trackStyle\n    }\n  }\n  checkImagesLoad = () => {\n    let images = this.list.querySelectorAll(\".slick-slide img\")\n    let imagesCount = images.length,\n      loadedCount = 0\n    Array.prototype.forEach.call(images, image => {\n      const handler = () => ++loadedCount && loadedCount >= imagesCount && this.onWindowResized()\n      if (!image.onclick) {\n        image.onclick = () => image.parentNode.focus()\n      } else {\n        const prevClickHandler = image.onclick\n        image.onclick = () => {\n          prevClickHandler()\n          image.parentNode.focus()\n        }\n      }\n      if (!image.onload) {\n        if (this.props.lazyLoad) {\n          image.onload = () => {\n            this.adaptHeight()\n            this.callbackTimers.push(setTimeout(this.onWindowResized, this.props.speed))\n          }\n        } else {\n          image.onload = handler\n          image.onerror = () => {\n            handler()\n            this.props.onLazyLoadError && this.props.onLazyLoadError()\n          }\n        }\n      }\n    })\n  }\n  progressiveLazyLoad = () => {\n    let slidesToLoad = []\n    const spec = { ...this.props, ...this.state }\n    for (\n      let index = this.state.currentSlide;\n      index < this.state.slideCount + getPostClones(spec);\n      index++\n    ) {\n      if (this.state.lazyLoadedList.indexOf(index) < 0) {\n        slidesToLoad.push(index)\n        break\n      }\n    }\n    for (let index = this.state.currentSlide - 1; index >= -getPreClones(spec); index--) {\n      if (this.state.lazyLoadedList.indexOf(index) < 0) {\n        slidesToLoad.push(index)\n        break\n      }\n    }\n    if (slidesToLoad.length > 0) {\n      this.setState(state => ({\n        lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)\n      }))\n      if (this.props.onLazyLoad) {\n        this.props.onLazyLoad(slidesToLoad)\n      }\n    } else {\n      if (this.lazyLoadTimer) {\n        clearInterval(this.lazyLoadTimer)\n        delete this.lazyLoadTimer\n      }\n    }\n  }\n  slideHandler = (index, dontAnimate = false) => {\n    const { asNavFor, beforeChange, onLazyLoad, speed, afterChange } = this.props\n    // capture currentslide before state is updated\n    const currentSlide = this.state.currentSlide\n    let { state, nextState } = slideHandler({\n      index,\n      ...this.props,\n      ...this.state,\n      trackRef: this.track,\n      useCSS: this.props.useCSS && !dontAnimate\n    })\n    if (!state) return\n    beforeChange && beforeChange(currentSlide, state.currentSlide)\n    let slidesToLoad = state.lazyLoadedList.filter(\n      value => this.state.lazyLoadedList.indexOf(value) < 0\n    )\n    onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad)\n    if (!this.props.waitForAnimate && this.animationEndCallback) {\n      clearTimeout(this.animationEndCallback)\n      afterChange && afterChange(currentSlide)\n      delete this.animationEndCallback\n    }\n    this.setState(state, () => {\n      // asNavForIndex check is to avoid recursive calls of slideHandler in waitForAnimate=false mode\n      if (asNavFor && this.asNavForIndex !== index) {\n        this.asNavForIndex = index\n        asNavFor.innerSlider.slideHandler(index)\n      }\n      if (!nextState) return\n      this.animationEndCallback = setTimeout(() => {\n        const { animating, ...firstBatch } = nextState\n        this.setState(firstBatch, () => {\n          this.callbackTimers.push(setTimeout(() => this.setState({ animating }), 10))\n          afterChange && afterChange(state.currentSlide)\n          delete this.animationEndCallback\n        })\n      }, speed)\n    })\n  }\n  changeSlide = (options, dontAnimate = false) => {\n    const spec = { ...this.props, ...this.state }\n    let targetSlide = changeSlide(spec, options)\n    if (targetSlide !== 0 && !targetSlide) return\n    if (dontAnimate === true) {\n      this.slideHandler(targetSlide, dontAnimate)\n    } else {\n      this.slideHandler(targetSlide)\n    }\n    this.props.autoplay && this.autoPlay(\"update\")\n    if (this.props.focusOnSelect) {\n      const nodes = this.list.querySelectorAll(\".slick-current\")\n      nodes[0] && nodes[0].focus()\n    }\n  }\n  clickHandler = e => {\n    if (this.clickable === false) {\n      e.stopPropagation()\n      e.preventDefault()\n    }\n    this.clickable = true\n  }\n  keyHandler = e => {\n    let dir = keyHandler(e, this.props.accessibility, this.props.rtl)\n    dir !== \"\" && this.changeSlide({ message: dir })\n  }\n  selectHandler = options => {\n    this.changeSlide(options)\n  }\n  disableBodyScroll = () => {\n    const preventDefault = e => {\n      e = e || window.event\n      if (e.preventDefault) e.preventDefault()\n      e.returnValue = false\n    }\n    window.ontouchmove = preventDefault\n  }\n  enableBodyScroll = () => {\n    window.ontouchmove = null\n  }\n  swipeStart = e => {\n    if (this.props.verticalSwiping) {\n      this.disableBodyScroll()\n    }\n    let state = swipeStart(e, this.props.swipe, this.props.draggable)\n    state !== \"\" && this.setState(state)\n  }\n  swipeMove = e => {\n    let state = swipeMove(e, {\n      ...this.props,\n      ...this.state,\n      trackRef: this.track,\n      listRef: this.list,\n      slideIndex: this.state.currentSlide\n    })\n    if (!state) return\n    if (state[\"swiping\"]) {\n      this.clickable = false\n    }\n    this.setState(state)\n  }\n  swipeEnd = e => {\n    let state = swipeEnd(e, {\n      ...this.props,\n      ...this.state,\n      trackRef: this.track,\n      listRef: this.list,\n      slideIndex: this.state.currentSlide\n    })\n    if (!state) return\n    let triggerSlideHandler = state[\"triggerSlideHandler\"]\n    delete state[\"triggerSlideHandler\"]\n    this.setState(state)\n    if (triggerSlideHandler === undefined) return\n    this.slideHandler(triggerSlideHandler)\n    if (this.props.verticalSwiping) {\n      this.enableBodyScroll()\n    }\n  }\n  touchEnd = e => {\n    this.swipeEnd(e)\n    this.clickable = true\n  }\n  slickPrev = () => {\n    // this and fellow methods are wrapped in setTimeout\n    // to make sure initialize setState has happened before\n    // any of such methods are called\n    this.callbackTimers.push(setTimeout(() => this.changeSlide({ message: \"previous\" }), 0))\n  }\n  slickNext = () => {\n    this.callbackTimers.push(setTimeout(() => this.changeSlide({ message: \"next\" }), 0))\n  }\n  slickGoTo = (slide, dontAnimate = false) => {\n    slide = Number(slide)\n    if (isNaN(slide)) return \"\"\n    this.callbackTimers.push(\n      setTimeout(\n        () =>\n          this.changeSlide(\n            {\n              message: \"index\",\n              index: slide,\n              currentSlide: this.state.currentSlide\n            },\n            dontAnimate\n          ),\n        0\n      )\n    )\n  }\n  play = () => {\n    var nextIndex\n    if (this.props.rtl) {\n      nextIndex = this.state.currentSlide - this.props.slidesToScroll\n    } else {\n      if (canGoNext({ ...this.props, ...this.state })) {\n        nextIndex = this.state.currentSlide + this.props.slidesToScroll\n      } else {\n        return false\n      }\n    }\n\n    this.slideHandler(nextIndex)\n  }\n\n  autoPlay = playType => {\n    if (this.autoplayTimer) {\n      clearInterval(this.autoplayTimer)\n    }\n    const autoplaying = this.state.autoplaying\n    if (playType === \"update\") {\n      if (autoplaying === \"hovered\" || autoplaying === \"focused\" || autoplaying === \"paused\") {\n        return\n      }\n    } else if (playType === \"leave\") {\n      if (autoplaying === \"paused\" || autoplaying === \"focused\") {\n        return\n      }\n    } else if (playType === \"blur\") {\n      if (autoplaying === \"paused\" || autoplaying === \"hovered\") {\n        return\n      }\n    }\n    this.autoplayTimer = setInterval(this.play, this.props.autoplaySpeed + 50)\n    this.setState({ autoplaying: \"playing\" })\n  }\n  pause = pauseType => {\n    if (this.autoplayTimer) {\n      clearInterval(this.autoplayTimer)\n      this.autoplayTimer = null\n    }\n    const autoplaying = this.state.autoplaying\n    if (pauseType === \"paused\") {\n      this.setState({ autoplaying: \"paused\" })\n    } else if (pauseType === \"focused\") {\n      if (autoplaying === \"hovered\" || autoplaying === \"playing\") {\n        this.setState({ autoplaying: \"focused\" })\n      }\n    } else {\n      // pauseType  is 'hovered'\n      if (autoplaying === \"playing\") {\n        this.setState({ autoplaying: \"hovered\" })\n      }\n    }\n  }\n  onDotsOver = () => this.props.autoplay && this.pause(\"hovered\")\n  onDotsLeave = () =>\n    this.props.autoplay && this.state.autoplaying === \"hovered\" && this.autoPlay(\"leave\")\n  onTrackOver = () => this.props.autoplay && this.pause(\"hovered\")\n  onTrackLeave = () =>\n    this.props.autoplay && this.state.autoplaying === \"hovered\" && this.autoPlay(\"leave\")\n  onSlideFocus = () => this.props.autoplay && this.pause(\"focused\")\n  onSlideBlur = () =>\n    this.props.autoplay && this.state.autoplaying === \"focused\" && this.autoPlay(\"blur\")\n\n  render = () => {\n    var className = classnames(\"slick-slider\", \"carousel\", this.props.className, {\n      \"carousel-center\": this.props.centerMode,\n      \"slick-vertical\": this.props.vertical,\n      \"slick-initialized\": true\n    })\n    let spec = { ...this.props, ...this.state }\n    let trackProps = extractObject(spec, [\n      \"fade\",\n      \"cssEase\",\n      \"speed\",\n      \"infinite\",\n      \"centerMode\",\n      \"focusOnSelect\",\n      \"currentSlide\",\n      \"lazyLoad\",\n      \"lazyLoadedList\",\n      \"rtl\",\n      \"slideWidth\",\n      \"slideHeight\",\n      \"listHeight\",\n      \"vertical\",\n      \"slidesToShow\",\n      \"slidesToScroll\",\n      \"slideCount\",\n      \"trackStyle\",\n      \"variableWidth\",\n      \"unslick\",\n      \"centerPadding\",\n      \"targetSlide\",\n      \"useCSS\"\n    ])\n    const { pauseOnHover } = this.props\n    trackProps = {\n      ...trackProps,\n      onMouseEnter: pauseOnHover ? this.onTrackOver : null,\n      onMouseLeave: pauseOnHover ? this.onTrackLeave : null,\n      onMouseOver: pauseOnHover ? this.onTrackOver : null,\n      focusOnSelect: this.props.focusOnSelect && this.clickable ? this.selectHandler : null\n    }\n\n    var dots\n    if (this.props.dots === true && this.state.slideCount >= this.props.slidesToShow) {\n      let dotProps = extractObject(spec, [\n        \"dotsClass\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"currentSlide\",\n        \"slidesToScroll\",\n        \"clickHandler\",\n        \"children\",\n        \"customPaging\",\n        \"infinite\",\n        \"appendDots\"\n      ])\n      const { pauseOnDotsHover } = this.props\n      dotProps = {\n        ...dotProps,\n        clickHandler: this.changeSlide,\n        onMouseEnter: pauseOnDotsHover ? this.onDotsLeave : null,\n        onMouseOver: pauseOnDotsHover ? this.onDotsOver : null,\n        onMouseLeave: pauseOnDotsHover ? this.onDotsLeave : null\n      }\n      dots = <Dots {...dotProps} />\n    }\n\n    var prevArrow, nextArrow\n    let arrowProps = extractObject(spec, [\n      \"infinite\",\n      \"centerMode\",\n      \"currentSlide\",\n      \"slideCount\",\n      \"slidesToShow\",\n      \"prevArrow\",\n      \"nextArrow\"\n    ])\n    arrowProps.clickHandler = this.changeSlide\n\n    if (this.props.arrows) {\n      prevArrow = <PrevArrow {...arrowProps} />\n      nextArrow = <NextArrow {...arrowProps} />\n    }\n\n    var verticalHeightStyle = null\n\n    if (this.props.vertical) {\n      verticalHeightStyle = {\n        height: this.state.listHeight\n      }\n    }\n\n    var centerPaddingStyle = null\n\n    if (this.props.vertical === false) {\n      if (this.props.centerMode === true) {\n        centerPaddingStyle = {\n          padding: \"0px \" + this.props.centerPadding\n        }\n      }\n    } else {\n      if (this.props.centerMode === true) {\n        centerPaddingStyle = {\n          padding: this.props.centerPadding + \" 0px\"\n        }\n      }\n    }\n\n    const listStyle = { ...verticalHeightStyle, ...centerPaddingStyle }\n    const touchMove = this.props.touchMove\n    let listProps = {\n      className: \"slick-list\",\n      style: listStyle,\n      onClick: this.clickHandler,\n      onMouseDown: touchMove ? this.swipeStart : null,\n      onMouseMove: this.state.dragging && touchMove ? this.swipeMove : null,\n      onMouseUp: touchMove ? this.swipeEnd : null,\n      onMouseLeave: this.state.dragging && touchMove ? this.swipeEnd : null,\n      onTouchStart: touchMove ? this.swipeStart : null,\n      onTouchMove: this.state.dragging && touchMove ? this.swipeMove : null,\n      onTouchEnd: touchMove ? this.touchEnd : null,\n      onTouchCancel: this.state.dragging && touchMove ? this.swipeEnd : null,\n      onKeyDown: this.props.accessibility ? this.keyHandler : null\n    }\n\n    let innerSliderProps = {\n      className: className,\n      dir: \"ltr\",\n      style: this.props.style\n    }\n\n    if (this.props.unslick) {\n      listProps = { className: \"slick-list\" }\n      innerSliderProps = { className }\n    }\n    return (\n      <div {...innerSliderProps}>\n        {!this.props.unslick ? prevArrow : \"\"}\n        <div ref={this.listRefHandler} {...listProps}>\n          <Track ref={this.trackRefHandler} {...trackProps}>\n            {this.props.children}\n          </Track>\n        </div>\n        {!this.props.unslick ? nextArrow : \"\"}\n        {!this.props.unslick ? dots : \"\"}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}