{"ast":null,"code":"// import { bindActionCreators } from \"redux\"\n// import { firebaseChange } from \"store/actions\"\n// import { connect } from \"react-redux\"\n// import verifyCookie from \"components/firebase/firebaseVerifyCookie\"\n// import Router from \"next/router\"\n// import PAGE from \"config/page.config\"\n// function firebaseWithAuth(AuthComponent) {\n//   class Authentication extends React.Component {\n//     static async getInitialProps(ctx) {\n//       let initialProps = {}\n//       // Get initial properties\n//       if (AuthComponent.getInitialProps) {\n//         initialProps = await AuthComponent.getInitialProps(ctx)\n//       }\n//       // Verify cookie\n//       const result = await verifyCookie(ctx)\n//       // Check cookie is valid or not\n//       if (!result) {\n//         // Redirect to login page\n//         if (ctx.res) {\n//           ctx.res.writeHead(302, { Location: PAGE.loginPagePath })\n//           ctx.res.end()\n//         } else {\n//           Router.push(PAGE.loginPagePath)\n//         }\n//         return {\n//           ...initialProps,\n//           firebase: null\n//         }\n//       }\n//       return {\n//         ...initialProps,\n//         firebase: result\n//       }\n//     }\n//     componentDidMount() {\n//       this.props.firebaseChange(this.props.firebase)\n//     }\n//     render() {\n//       return <AuthComponent {...this.props} />\n//     }\n//   }\n//   function mapDispatchToProps(dispatch) {\n//     return bindActionCreators({ firebaseChange }, dispatch)\n//   }\n//   return connect(null, mapDispatchToProps)(Authentication)\n// }\n// export default firebaseWithAuth","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/components/firebase/firebaseWithAuth.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import { bindActionCreators } from \"redux\"\n// import { firebaseChange } from \"store/actions\"\n// import { connect } from \"react-redux\"\n// import verifyCookie from \"components/firebase/firebaseVerifyCookie\"\n// import Router from \"next/router\"\n// import PAGE from \"config/page.config\"\n\n// function firebaseWithAuth(AuthComponent) {\n//   class Authentication extends React.Component {\n//     static async getInitialProps(ctx) {\n//       let initialProps = {}\n\n//       // Get initial properties\n//       if (AuthComponent.getInitialProps) {\n//         initialProps = await AuthComponent.getInitialProps(ctx)\n//       }\n\n//       // Verify cookie\n//       const result = await verifyCookie(ctx)\n\n//       // Check cookie is valid or not\n//       if (!result) {\n//         // Redirect to login page\n//         if (ctx.res) {\n//           ctx.res.writeHead(302, { Location: PAGE.loginPagePath })\n//           ctx.res.end()\n//         } else {\n//           Router.push(PAGE.loginPagePath)\n//         }\n\n//         return {\n//           ...initialProps,\n//           firebase: null\n//         }\n//       }\n\n//       return {\n//         ...initialProps,\n//         firebase: result\n//       }\n//     }\n\n//     componentDidMount() {\n//       this.props.firebaseChange(this.props.firebase)\n//     }\n\n//     render() {\n//       return <AuthComponent {...this.props} />\n//     }\n//   }\n\n//   function mapDispatchToProps(dispatch) {\n//     return bindActionCreators({ firebaseChange }, dispatch)\n//   }\n\n//   return connect(null, mapDispatchToProps)(Authentication)\n// }\n\n// export default firebaseWithAuth\n"]},"metadata":{},"sourceType":"script"}