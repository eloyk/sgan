{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, refPropType } from \"./utils\";\n\nvar CustomFileInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomFileInput, _React$Component);\n\n  var _super = _createSuper(CustomFileInput);\n\n  function CustomFileInput(props) {\n    var _this;\n\n    _classCallCheck(this, CustomFileInput);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      files: null\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CustomFileInput, [{\n    key: \"onChange\",\n    value: function onChange(e) {\n      var input = e.target;\n      var onChange = this.props.onChange;\n      var files = this.getSelectedFiles(input);\n\n      if (typeof onChange === \"function\") {\n        onChange.apply(void 0, arguments);\n      }\n\n      this.setState({\n        files: files\n      });\n    }\n  }, {\n    key: \"getSelectedFiles\",\n    value: function getSelectedFiles(input) {\n      var multiple = this.props.multiple;\n\n      if (multiple && input.files) {\n        var files = [].slice.call(input.files);\n        return files.map(function (file) {\n          return file.name;\n        }).join(\", \");\n      }\n\n      if (input.value.indexOf(\"fakepath\") !== -1) {\n        var parts = input.value.split(\"\\\\\");\n        return parts[parts.length - 1];\n      }\n\n      return input.value;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          dataBrowse = _this$props.dataBrowse,\n          cssModule = _this$props.cssModule,\n          className = _this$props.className,\n          innerRef = _this$props.innerRef,\n          onChange = _this$props.onChange,\n          children = _this$props.children,\n          invalid = _this$props.invalid,\n          htmlFor = _this$props.htmlFor,\n          hidden = _this$props.hidden,\n          label = _this$props.label,\n          size = _this$props.size,\n          valid = _this$props.valid,\n          type = _this$props.type,\n          attributes = _objectWithoutProperties(_this$props, [\"dataBrowse\", \"cssModule\", \"className\", \"innerRef\", \"onChange\", \"children\", \"invalid\", \"htmlFor\", \"hidden\", \"label\", \"size\", \"valid\", \"type\"]);\n\n      var customClass = mapToCssModules(classNames(className, \"custom-file\"), cssModule);\n      var validationClassNames = mapToCssModules(classNames(invalid && \"is-invalid\", valid && \"is-valid\"), cssModule);\n      var labelHtmlFor = htmlFor || attributes.id;\n      var files = this.state.files;\n      return __jsx(\"div\", {\n        className: customClass,\n        hidden: hidden || false\n      }, __jsx(\"input\", _extends({\n        type: \"file\"\n      }, attributes, {\n        ref: innerRef,\n        \"aria-invalid\": invalid,\n        className: classNames(validationClassNames, mapToCssModules(\"custom-file-input\", cssModule)),\n        onChange: this.onChange\n      })), __jsx(\"label\", {\n        className: mapToCssModules(\"custom-file-label\", cssModule),\n        htmlFor: labelHtmlFor,\n        \"data-browse\": dataBrowse\n      }, files || label || \"Choose file\"), children);\n    }\n  }]);\n\n  return CustomFileInput;\n}(React.Component);\n\nexport default CustomFileInput;","map":null,"metadata":{},"sourceType":"module"}