{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Row, Col, Nav, Badge, Caret, Portlet, Dropdown, Container } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport withLayout from \"components/layout/withLayout\"; //import withAuth from \"components/firebase/firebaseWithAuth\"\n\nimport Head from \"next/head\";\nimport Link from \"next/link\";\n\nvar NavPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(NavPage, _React$Component);\n\n  var _super = _createSuper(NavPage);\n\n  function NavPage() {\n    _classCallCheck(this, NavPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NavPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set header title\n      this.props.pageChangeHeaderTitle(\"Nav\"); // Set breadcrumb data\n\n      this.props.breadcrumbChange([{\n        text: \"Dashboard\",\n        link: \"/\"\n      }, {\n        text: \"Elements\"\n      }, {\n        text: \"Base\"\n      }, {\n        text: \"Nav\",\n        link: \"/elements/base/nav\"\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Navigation | Panely\")), __jsx(Container, {\n        fluid: true\n      }, __jsx(Row, null, __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Basic\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"The base \", __jsx(\"code\", null, \"Nav\"), \" component is built with flexbox and provide a strong foundation for building all types of navigation components. It includes some style overrides (for working with lists), some link padding for larger hit areas, and basic disabled styling.\"), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Default\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"This is basic example for nav components\"), __jsx(Nav, null, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Dropdown.Uncontrolled, {\n        nav: true\n      }, __jsx(Dropdown.Toggle, {\n        nav: true,\n        caret: true\n      }, \"Dropdown\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, null, \"Action\"), __jsx(Dropdown.Item, null, \"Another Action\"), __jsx(Dropdown.Item, null, \"Something else here\"))), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Pill\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Take that same HTML, but add \", __jsx(\"code\", null, \"pills\"), \" property\"), __jsx(Nav, {\n        pills: true\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Dropdown.Uncontrolled, {\n        nav: true\n      }, __jsx(Dropdown.Toggle, {\n        nav: true,\n        caret: true\n      }, \"Dropdown\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, null, \"Action\"), __jsx(Dropdown.Item, null, \"Another Action\"), __jsx(Dropdown.Item, null, \"Something else here\"))), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Tab\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Takes the basic nav from above and adds the \", __jsx(\"code\", null, \"tabs\"), \" property to generate a tabbed interface.\"), __jsx(Nav, {\n        tabs: true\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Dropdown.Uncontrolled, {\n        nav: true\n      }, __jsx(Dropdown.Toggle, {\n        nav: true,\n        caret: true\n      }, \"Dropdown\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, null, \"Action\"), __jsx(Dropdown.Item, null, \"Another Action\"), __jsx(Dropdown.Item, null, \"Something else here\"))), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")))), __jsx(Portlet, {\n        className: \"mb-0\"\n      }, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Line\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Take that same HTML, but use \", __jsx(\"code\", null, \"lines\"), \" property\"), __jsx(Nav, {\n        lines: true\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Dropdown.Uncontrolled, {\n        nav: true\n      }, __jsx(Dropdown.Toggle, {\n        nav: true,\n        caret: true\n      }, \"Dropdown\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, null, \"Action\"), __jsx(Dropdown.Item, null, \"Another Action\"), __jsx(Dropdown.Item, null, \"Something else here\"))), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")))))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Additional elements\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"You can combine other elements such as\", \" \", __jsx(Link, {\n        href: \"/elements/base/badge\"\n      }, \"badge\"), \", icon or caret to separate nav items, we provide \", __jsx(\"code\", null, \"Nav.Addon\"), \" for wrapping those elements.\"), __jsx(Nav, {\n        pills: true,\n        vertical: true\n      }, __jsx(Nav.Item, {\n        href: \"#\"\n      }, __jsx(Nav.Content, null, \"Link\"), __jsx(Nav.Addon, {\n        addonType: \"append\"\n      }, __jsx(Caret, null))), __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, __jsx(Nav.Addon, {\n        addonType: \"prepend\"\n      }, __jsx(Nav.Icon, null, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faArchive\n      }))), __jsx(Nav.Content, null, \"Link\")), __jsx(Nav.Item, {\n        href: \"#\"\n      }, __jsx(Nav.Addon, {\n        addonType: \"prepend\"\n      }, __jsx(Nav.Icon, null, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faCog\n      }))), __jsx(Nav.Content, null, \"Link\"), __jsx(Nav.Addon, {\n        addonType: \"append\"\n      }, __jsx(Caret, null))), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, __jsx(Nav.Addon, {\n        addonType: \"prepend\"\n      }, __jsx(Nav.Icon, null, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faPaperPlane\n      }))), __jsx(Nav.Content, null, \"Link\"), __jsx(Nav.Addon, {\n        addonType: \"append\"\n      }, __jsx(Badge, {\n        pill: true,\n        variant: \"warning\"\n      }, \"2\"))))))), __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Sizing\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add \", __jsx(\"code\", null, \"size\"), \" property and fill it with \", __jsx(\"code\", null, \"lg|sm\"), \" to make navigations are larger or smaller\"), __jsx(Nav, {\n        pills: true,\n        size: \"sm\",\n        className: \"mb-3\"\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")), __jsx(Nav, {\n        pills: true,\n        className: \"mb-3\"\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")), __jsx(Nav, {\n        pills: true,\n        size: \"lg\"\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Vertical\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add \", __jsx(\"code\", null, \"vertical\"), \" property to \", __jsx(\"code\", null, \"Nav\"), \" elements for applying vertical appearance, but this feature is not supported for tabs interface.\"), __jsx(Row, null, __jsx(Col, {\n        sm: \"6\"\n      }, __jsx(Portlet, {\n        className: \"mb-sm-0\"\n      }, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Pill\")), __jsx(Portlet.Body, null, __jsx(Nav, {\n        pills: true,\n        vertical: true\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\"))))), __jsx(Col, {\n        sm: \"6\"\n      }, __jsx(Portlet, {\n        className: \"mb-0\"\n      }, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Line\")), __jsx(Portlet.Body, null, __jsx(Nav, {\n        lines: true,\n        vertical: true\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")))))))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Alignment\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Change the horizontal alignment of your nav with \", __jsx(\"code\", null, \"horizontal\"), \" \", \"property with \", __jsx(\"code\", null, \"start|center|end\"), \". By default, navs are left-aligned, but you can easily change them to center or right aligned.\"), __jsx(Nav, {\n        horizontal: \"start\",\n        className: \"mb-3\"\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")), __jsx(Nav, {\n        horizontal: \"center\",\n        className: \"mb-3\"\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")), __jsx(Nav, {\n        horizontal: \"end\"\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Fill and justify\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Force your \", __jsx(\"code\", null, \"Nav\"), \"'s contents to extend the full available width. To proportionately fill all available space with your \", __jsx(\"code\", null, \"Nav.Item\"), \"s, use\", \" \", __jsx(\"code\", null, \"fill\"), \" property. For equal-width elements, use \", __jsx(\"code\", null, \"justified\"), \" \", \"property. All horizontal space will be occupied by nav links.\"), __jsx(Nav, {\n        pills: true,\n        fill: true,\n        className: \"mb-3\"\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Longer link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\")), __jsx(Nav, {\n        pills: true,\n        justified: true\n      }, __jsx(Nav.Item, {\n        href: \"#\",\n        active: true\n      }, \"Active\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Longer link\"), __jsx(Nav.Item, {\n        href: \"#\"\n      }, \"Link\"), __jsx(Nav.Item, {\n        href: \"#\",\n        disabled: true\n      }, \"Disabled\"))))))));\n    }\n  }]);\n\n  return NavPage;\n}(React.Component);\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle: pageChangeHeaderTitle,\n    breadcrumbChange: breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withLayout(NavPage));","map":null,"metadata":{},"sourceType":"module"}