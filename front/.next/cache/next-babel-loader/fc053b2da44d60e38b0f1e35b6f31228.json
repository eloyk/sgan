{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Tooltip, ButtonGroup } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\n\nfunction HeaderAction() {\n  return __jsx(React.Fragment, null, __jsx(HeaderActionRadio, null), __jsx(HeaderActionFullscreen, {\n    className: \"ml-2\"\n  }));\n}\n\nclass HeaderActionRadio extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Default active button\n      buttonActive: \"today\"\n    });\n\n    _defineProperty(this, \"handleClick\", id => {\n      this.setState({\n        buttonActive: id\n      });\n    });\n  }\n\n  render() {\n    return __jsx(ButtonGroup, this.props, __jsx(Button, {\n      active: this.state.buttonActive === \"today\",\n      onClick: () => this.handleClick(\"today\"),\n      variant: \"flat-primary\"\n    }, \"Today\"), __jsx(Button, {\n      active: this.state.buttonActive === \"week\",\n      onClick: () => this.handleClick(\"week\"),\n      variant: \"flat-primary\"\n    }, \"Week\"), __jsx(Button, {\n      active: this.state.buttonActive === \"month\",\n      onClick: () => this.handleClick(\"month\"),\n      variant: \"flat-primary\"\n    }, \"Month\"));\n  }\n\n}\n\nclass HeaderActionFullscreen extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      fullscreenActive: false\n    });\n\n    _defineProperty(this, \"handleClick\", () => {\n      if (this.state.fullscreenActive) {\n        // Exit from fullscreen mode\n        document.exitFullscreen();\n      } else {\n        // Activating fullscreen mode\n        document.documentElement.requestFullscreen();\n      }\n    });\n  }\n\n  componentDidMount() {\n    const fullscreenClass = \"fullscreen-active\";\n\n    document.onfullscreenchange = () => {\n      // Check whether fullscreen mode is activated\n      if (document.fullscreenElement) {\n        // Set the state and add the class to the body element\n        this.setState({\n          fullscreenActive: true\n        }, () => {\n          document.body.classList.add(fullscreenClass);\n        });\n      } else {\n        // Set the state and remove the class to the body element\n        this.setState({\n          fullscreenActive: false\n        }, () => {\n          document.body.classList.remove(fullscreenClass);\n        });\n      }\n    };\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Button, _extends({\n      icon: true,\n      id: \"fullscreenTrigger\",\n      variant: \"label-info\",\n      onClick: this.handleClick\n    }, this.props), __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faExpand,\n      className: \"fullscreen-icon-expand\"\n    }), __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faCompress,\n      className: \"fullscreen-icon-compress\"\n    })), __jsx(Tooltip.Uncontrolled, {\n      placement: \"left\",\n      target: \"fullscreenTrigger\"\n    }, \"Toggle fullscreen\"));\n  }\n\n}\n\nexport default HeaderAction;","map":null,"metadata":{},"sourceType":"module"}