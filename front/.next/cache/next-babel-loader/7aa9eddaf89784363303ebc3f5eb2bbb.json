{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { useState } from 'react';\nexport default (({\n  url,\n  method,\n  body,\n  onSuccess\n}) => {\n  const {\n    0: errores,\n    1: setErrores\n  } = useState(null);\n\n  const doRequest = async (props = {}) => {\n    try {\n      setErrores(null);\n      const response = await axios[method](url, _objectSpread(_objectSpread({}, body), props));\n\n      if (onSuccess) {\n        onSuccess(response.data);\n      } else {\n        () => Router.push('/');\n      }\n\n      return response.data;\n    } catch (err) {\n      console.log(err.response.data);\n      setErrores(__jsx(\"div\", {\n        className: \"alert alert-danger\"\n      }, __jsx(\"h4\", null, \"Ooops....\"), __jsx(\"ul\", {\n        className: \"my-0\"\n      }, err.response.data.errores.map(err => __jsx(\"li\", {\n        key: err.mensaje\n      }, err.mensaje)))));\n    }\n  };\n\n  return {\n    doRequest,\n    errores\n  };\n});","map":null,"metadata":{},"sourceType":"module"}