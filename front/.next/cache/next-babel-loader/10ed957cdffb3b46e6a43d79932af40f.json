{"ast":null,"code":"import { compose, createStore, applyMiddleware } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from \"./reducers\";\nimport sagas from './sagas'; // Create the saga middleware\n\nvar sagaMiddleware = createSagaMiddleware(); // Create a makeStore function\n\nvar makeStore = function makeStore(context) {\n  var store = createStore(reducers, compose( // Apply Redux Saga as middleware\n  applyMiddleware(sagaMiddleware), // Apply Redux Dev Tools\n  devToolsEnhancer()));\n  debugger; // Run Redux Saga\n\n  sagaMiddleware.run(sagas);\n  return store;\n}; // Export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/sgan/front/src/store/index.jsx"],"names":["compose","createStore","applyMiddleware","createWrapper","devToolsEnhancer","createSagaMiddleware","reducers","sagas","sagaMiddleware","makeStore","context","store","run","wrapper"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;;AACA,IAAMC,cAAc,GAAGH,oBAAoB,EAA3C,C,CAEA;;AACA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAC7B,MAAMC,KAAK,GAAGV,WAAW,CACvBK,QADuB,EAEvBN,OAAO,EACL;AACAE,EAAAA,eAAe,CAACM,cAAD,CAFV,EAGL;AACAJ,EAAAA,gBAAgB,EAJX,CAFgB,CAAzB;AASF,WAV+B,CAW7B;;AACAI,EAAAA,cAAc,CAACI,GAAf,CAAmBL,KAAnB;AACA,SAAOI,KAAP;AACD,CAdD,C,CAgBA;;;AACA,OAAO,IAAME,OAAO,GAAGV,aAAa,CAACM,SAAD,CAA7B","sourcesContent":["import { compose, createStore, applyMiddleware } from \"redux\"\nimport { createWrapper } from \"next-redux-wrapper\"\nimport { devToolsEnhancer } from \"redux-devtools-extension\"\nimport createSagaMiddleware from 'redux-saga'\nimport reducers from \"./reducers\"\nimport sagas from './sagas'\n\n// Create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\n// Create a makeStore function\nconst makeStore = (context) => {\n  const store = createStore(\n    reducers,\n    compose(\n      // Apply Redux Saga as middleware\n      applyMiddleware(sagaMiddleware),\n      // Apply Redux Dev Tools\n      devToolsEnhancer()\n    )\n  )\ndebugger\n  // Run Redux Saga\n  sagaMiddleware.run(sagas)\n  return store\n}\n\n// Export an assembled wrapper\nexport const wrapper = createWrapper(makeStore)\n"]},"metadata":{},"sourceType":"module"}