{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext, createContext } from \"react\";\nimport { firebaseClient } from \"./firebaseClient\";\nimport nookies from \"nookies\"; // Set authentication context\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null\n});\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  useEffect(() => {\n    // Set Cookie when firebase authentication token is changed\n    return firebaseClient.auth().onIdTokenChanged(async user => {\n      const cookieExpireIn = 30 * 24 * 60 * 60; // Check whether user has logged in\n\n      if (!user) {\n        setUser(null); // Remove token from cookie\n\n        nookies.set(null, \"token\", \"\", {\n          maxAge: cookieExpireIn\n        });\n      } else {\n        const token = await user.getIdToken();\n        setUser(user); // Store token to cookie\n\n        nookies.set(null, \"token\", token, {\n          maxAge: cookieExpireIn\n        });\n      }\n    });\n  }, []); // Force refresh the token every 10 minutes\n\n  useEffect(() => {\n    const handle = setInterval(async () => {\n      const user = firebaseClient.auth().currentUser;\n      if (user) await user.getIdToken(true);\n    }, 10 * 60 * 1000);\n    return () => clearInterval(handle);\n  }, []);\n  return __jsx(AuthContext.Provider, {\n    value: {\n      user\n    }\n  }, children);\n}\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};","map":null,"metadata":{},"sourceType":"module"}