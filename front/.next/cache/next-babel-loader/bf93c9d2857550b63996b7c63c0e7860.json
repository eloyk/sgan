{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, refPropType } from \"./utils\";\n\nclass CustomFileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: null\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e) {\n    let input = e.target;\n    let {\n      onChange\n    } = this.props;\n    let files = this.getSelectedFiles(input);\n\n    if (typeof onChange === \"function\") {\n      onChange(...arguments);\n    }\n\n    this.setState({\n      files\n    });\n  }\n\n  getSelectedFiles(input) {\n    let {\n      multiple\n    } = this.props;\n\n    if (multiple && input.files) {\n      let files = [].slice.call(input.files);\n      return files.map(file => file.name).join(\", \");\n    }\n\n    if (input.value.indexOf(\"fakepath\") !== -1) {\n      let parts = input.value.split(\"\\\\\");\n      return parts[parts.length - 1];\n    }\n\n    return input.value;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      dataBrowse,\n      cssModule,\n      className,\n      innerRef,\n      onChange,\n      children,\n      invalid,\n      htmlFor,\n      hidden,\n      label,\n      size,\n      valid,\n      type\n    } = _this$props,\n          attributes = _objectWithoutProperties(_this$props, [\"dataBrowse\", \"cssModule\", \"className\", \"innerRef\", \"onChange\", \"children\", \"invalid\", \"htmlFor\", \"hidden\", \"label\", \"size\", \"valid\", \"type\"]);\n\n    const customClass = mapToCssModules(classNames(className, \"custom-file\"), cssModule);\n    const validationClassNames = mapToCssModules(classNames(invalid && \"is-invalid\", valid && \"is-valid\"), cssModule);\n    const labelHtmlFor = htmlFor || attributes.id;\n    const {\n      files\n    } = this.state;\n    return __jsx(\"div\", {\n      className: customClass,\n      hidden: hidden || false\n    }, __jsx(\"input\", _extends({\n      type: \"file\"\n    }, attributes, {\n      ref: innerRef,\n      \"aria-invalid\": invalid,\n      className: classNames(validationClassNames, mapToCssModules(\"custom-file-input\", cssModule)),\n      onChange: this.onChange\n    })), __jsx(\"label\", {\n      className: mapToCssModules(\"custom-file-label\", cssModule),\n      htmlFor: labelHtmlFor,\n      \"data-browse\": dataBrowse\n    }, files || label || \"Choose file\"), children);\n  }\n\n}\n\nexport default CustomFileInput;","map":null,"metadata":{},"sourceType":"module"}