{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Form, Label, Input, Button, Portlet, Spinner, Container, CustomInput, FloatLabel, Widget12 } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { firebaseClient } from \"components/firebase/firebaseClient\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport * as yup from \"yup\";\nimport verifyCookie from \"components/firebase/firebaseVerifyCookie\";\nimport withLayout from \"components/layout/withLayout\";\nimport swalContent from \"sweetalert2-react-content\";\nimport Router from \"next/router\";\nimport Swal from \"@panely/sweetalert2\";\nimport Link from \"next/link\";\nimport Head from \"next/head\";\nimport PAGE from \"config/page.config\"; // Use SweetAlert React Content library\n\nvar ReactSwal = swalContent(Swal); // Set SweetAlert options\n\nvar swal = ReactSwal.mixin({\n  customClass: {\n    confirmButton: \"btn btn-label-success btn-wide mx-1\",\n    cancelButton: \"btn btn-label-danger btn-wide mx-1\"\n  },\n  buttonsStyling: false\n});\n\nfunction RegisterPage() {\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Register | Panely\")), __jsx(Container, {\n    fluid: true\n  }, __jsx(Row, {\n    noGutters: true,\n    className: \"align-items-center justify-content-center h-100\"\n  }, __jsx(Col, {\n    sm: \"8\",\n    md: \"6\",\n    lg: \"4\"\n  }, __jsx(Portlet, null, __jsx(Portlet.Body, null, __jsx(\"div\", {\n    className: \"text-center mt-2 mb-4\"\n  }, __jsx(Widget12, {\n    display: true,\n    circle: true,\n    variant: \"label-primary\",\n    className: \"mb-4\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faUserAlt\n  }))), __jsx(RegisterForm, null)))))));\n}\n\nfunction RegisterForm() {\n  // Loading state\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1]; // Define Yup schema for form validation\n\n\n  var schema = yup.object().shape({\n    firstName: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your lastname\"),\n    lastName: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your lastname\"),\n    email: yup.string().email(\"Your email is not valid\").required(\"Please enter your email\"),\n    password: yup.string().min(6, \"Please enter at least 6 characters\").required(\"Please provide your password\"),\n    passwordRepeat: yup.string().min(6, \"Please enter at least 6 characters\").oneOf([yup.ref(\"password\")], \"Your password not match\").required(\"Please repeat your password\"),\n    agreement: yup[\"boolean\"]().oneOf([true], \"You must accept the agreement\")\n  });\n\n  var _useForm = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      passwordRepeat: \"\",\n      agreement: false\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors; // Handle form submit event\n\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var firstName, lastName, email, password;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              firstName = _ref.firstName, lastName = _ref.lastName, email = _ref.email, password = _ref.password;\n              // Show loading indicator\n              setLoading(true); // Trying to register user account to firebase\n\n              _context.next = 4;\n              return firebaseClient.auth().createUserWithEmailAndPassword(email, password).then(function () {\n                // Trying to login with the user account that been registered before\n                return firebaseClient.auth().signInWithEmailAndPassword(email, password).then(function () {\n                  var user = firebaseClient.auth().currentUser; // Trying to update user name\n\n                  return user.updateProfile({\n                    displayName: \"\".concat(firstName, \" \").concat(lastName)\n                  }).then(function () {\n                    // Set the user login credential data\n                    var credential = firebaseClient.auth.EmailAuthProvider.credential(user.email, password); // Trying to reauthenticate user account\n\n                    return user.reauthenticateWithCredential(credential).then(function () {\n                      // Redirect to dashboard page\n                      Router.push(Router.query.redirect || PAGE.dashboardPagePath);\n                    })[\"catch\"](function (err) {\n                      // Show the error message if reauthentication is failed\n                      swal.fire({\n                        text: err.message,\n                        icon: \"error\"\n                      });\n                    });\n                  })[\"catch\"](function (err) {\n                    // Show the error message if update user data is failed\n                    swal.fire({\n                      text: err.message,\n                      icon: \"error\"\n                    });\n                  });\n                })[\"catch\"](function (err) {\n                  // Show the error message if login is failed\n                  swal.fire({\n                    text: err.message,\n                    icon: \"error\"\n                  });\n                });\n              })[\"catch\"](function (err) {\n                // Show the error message if register is failed\n                swal.fire({\n                  text: err.message,\n                  icon: \"error\"\n                });\n              });\n\n            case 4:\n              // Hide loading indicator\n              setLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, {\n    size: \"lg\"\n  }, __jsx(Controller, {\n    as: Input,\n    size: \"lg\",\n    type: \"text\",\n    id: \"first-name\",\n    name: \"firstName\",\n    control: control,\n    invalid: Boolean(errors.firstName),\n    placeholder: \"Insert your firstname\"\n  }), __jsx(Label, {\n    \"for\": \"first-name\"\n  }, \"First name\"), errors.firstName && __jsx(Form.Feedback, {\n    children: errors.firstName.message\n  })))), __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, {\n    size: \"lg\"\n  }, __jsx(Controller, {\n    as: Input,\n    size: \"lg\",\n    type: \"text\",\n    id: \"last-name\",\n    name: \"lastName\",\n    control: control,\n    invalid: Boolean(errors.lastName),\n    placeholder: \"Insert your lastname\"\n  }), __jsx(Label, {\n    \"for\": \"last-name\"\n  }, \"last name\"), errors.lastName && __jsx(Form.Feedback, {\n    children: errors.lastName.message\n  }))))), __jsx(Form.Group, null, __jsx(FloatLabel, {\n    size: \"lg\"\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"email\",\n    id: \"email\",\n    name: \"email\",\n    size: \"lg\",\n    control: control,\n    invalid: Boolean(errors.email),\n    placeholder: \"Please insert your email\"\n  }), __jsx(Label, {\n    \"for\": \"email\"\n  }, \"Email\"), errors.email && __jsx(Form.Feedback, {\n    children: errors.email.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, {\n    size: \"lg\"\n  }, __jsx(Controller, {\n    as: Input,\n    size: \"lg\",\n    type: \"password\",\n    id: \"password\",\n    name: \"password\",\n    control: control,\n    invalid: Boolean(errors.password),\n    placeholder: \"Please provide your password\"\n  }), __jsx(Label, {\n    \"for\": \"password\"\n  }, \"Password\"), errors.password && __jsx(Form.Feedback, {\n    children: errors.password.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, {\n    size: \"lg\"\n  }, __jsx(Controller, {\n    as: Input,\n    size: \"lg\",\n    type: \"password\",\n    id: \"passwordRepeat\",\n    name: \"passwordRepeat\",\n    control: control,\n    invalid: Boolean(errors.passwordRepeat),\n    placeholder: \"Repeat your password\"\n  }), __jsx(Label, {\n    \"for\": \"passwordRepeat\"\n  }, \"Confirm password\"), errors.passwordRepeat && __jsx(Form.Feedback, {\n    children: errors.passwordRepeat.message\n  }))), __jsx(\"div\", {\n    className: \"d-flex align-items-center justify-content-between mb-3\"\n  }, __jsx(Form.Group, {\n    className: \"mb-0\"\n  }, __jsx(Controller, {\n    control: control,\n    name: \"agreement\",\n    render: function render(_ref3) {\n      var _onChange = _ref3.onChange,\n          onBlur = _ref3.onBlur,\n          value = _ref3.value,\n          name = _ref3.name,\n          ref = _ref3.ref;\n      return __jsx(CustomInput, {\n        type: \"checkbox\",\n        size: \"lg\",\n        id: \"agreement\",\n        label: \"Accept agreement\",\n        invalid: Boolean(errors.agreement),\n        onBlur: onBlur,\n        onChange: function onChange(e) {\n          return _onChange(e.target.checked);\n        },\n        checked: value,\n        innerRef: ref\n      });\n    }\n  }))), __jsx(\"div\", {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"span\", null, \"Already have an account ? \", __jsx(Link, {\n    href: \"/login\"\n  }, \"Sign In\")), __jsx(Button, {\n    type: \"submit\",\n    variant: \"label-primary\",\n    size: \"lg\",\n    width: \"widest\",\n    disabled: loading\n  }, loading ? __jsx(Spinner, {\n    className: \"mr-2\"\n  }) : null, \" Register\")));\n}\n\nRegisterPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return verifyCookie(ctx);\n\n          case 2:\n            result = _context2.sent;\n\n            // Redirect to dashboard page if the user has logged in\n            if (result) {\n              if (ctx.res) {\n                ctx.res.writeHead(302, {\n                  Location: ctx.query.redirect || PAGE.dashboardPagePath\n                });\n                ctx.res.end();\n              } else {\n                Router.push(Router.query.redirect || PAGE.dashboardPagePath);\n              }\n            }\n\n            return _context2.abrupt(\"return\", {\n              firebase: null\n            });\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexport default withLayout(RegisterPage, \"blank\");","map":null,"metadata":{},"sourceType":"module"}