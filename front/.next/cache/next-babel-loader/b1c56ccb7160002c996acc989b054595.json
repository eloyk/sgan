{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { Transition } from \"react-transition-group\";\nimport { mapToCssModules, omit, pick, findDOMElements, defaultToggleEvents, addMultipleEventListeners, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from \"./utils\";\nconst omitKeys = [\"toggleEvents\", \"defaultOpen\"];\n\nconst defaultProps = _objectSpread(_objectSpread({}, Transition.defaultProps), {}, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: \"div\",\n  timeout: TransitionTimeouts.Collapse\n});\n\nconst transitionStatusToClassHash = {\n  [TransitionStatuses.ENTERING]: \"collapsing\",\n  [TransitionStatuses.ENTERED]: \"collapse show\",\n  [TransitionStatuses.EXITING]: \"collapsing\",\n  [TransitionStatuses.EXITED]: \"collapse\"\n};\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || \"collapse\";\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nclass Collapse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: null\n    };\n    this.onEntering = this.onEntering.bind(this);\n    this.onEntered = this.onEntered.bind(this);\n    this.onExiting = this.onExiting.bind(this);\n    this.onExited = this.onExited.bind(this);\n    this.onExit = this.onExit.bind(this);\n  }\n\n  onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  }\n\n  onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  }\n\n  onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  }\n\n  onExiting(node) {\n    // getting this variable triggers a reflow\n    const _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  }\n\n  onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      tag: Tag,\n      isOpen,\n      className,\n      navbar,\n      cssModule,\n      children,\n      innerRef\n    } = _this$props,\n          otherProps = _objectWithoutProperties(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    const {\n      height\n    } = this.state;\n    const transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    const childProps = omit(otherProps, TransitionPropTypeKeys);\n    return __jsx(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), status => {\n      let collapseClass = getTransitionClass(status);\n      const classes = mapToCssModules(classNames(className, collapseClass, navbar && \"navbar-collapse\"), cssModule);\n      const style = height === null ? null : {\n        height\n      };\n      return __jsx(Tag, _extends({}, childProps, {\n        style: _objectSpread(_objectSpread({}, childProps.style), style),\n        className: classes,\n        ref: this.props.innerRef\n      }), children);\n    });\n  }\n\n}\n\nclass UncontrolledCollapse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.togglers = null;\n    this.removeEventListeners = null;\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: props.defaultOpen || false\n    };\n  }\n\n  componentDidMount() {\n    this.togglers = findDOMElements(this.props.toggler);\n\n    if (this.togglers.length) {\n      this.removeEventListeners = addMultipleEventListeners(this.togglers, this.toggle, this.props.toggleEvents);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.togglers.length && this.removeEventListeners) {\n      this.removeEventListeners();\n    }\n  }\n\n  toggle(e) {\n    this.setState(({\n      isOpen\n    }) => ({\n      isOpen: !isOpen\n    }));\n    e.preventDefault();\n  }\n\n  render() {\n    return __jsx(Collapse, _extends({\n      isOpen: this.state.isOpen\n    }, omit(this.props, omitKeys)));\n  }\n\n}\n\nUncontrolledCollapse.defaultProps = {\n  toggleEvents: defaultToggleEvents\n};\nCollapse.defaultProps = defaultProps;\nCollapse.Uncontrolled = UncontrolledCollapse;\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}