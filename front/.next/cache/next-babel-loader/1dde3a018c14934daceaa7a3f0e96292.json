{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport Portal from \"./Portal\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport AsideHeader from \"./AsideHeader\";\nimport AsideBody from \"./AsideBody\";\nimport AsideTitle from \"./AsideTitle\";\nimport AsideAddon from \"./AsideAddon\";\nconst defaultProps = {\n  desktopMinimized: false,\n  mobileMinimized: true,\n  tag: \"div\"\n};\n\nclass Aside extends React.Component {\n  constructor(props) {\n    super(props);\n    this.breakpoint = 1025;\n    this.transitionDuration = 200;\n    this.state = {\n      desktopMinimized: this.props.desktopMinimized,\n      mobileMinimized: this.props.mobileMinimized,\n      asideHover: false\n    };\n    this.classes = {\n      active: \"aside-active\",\n      desktop: {\n        minimized: \"aside-desktop-minimized\",\n        maximized: \"aside-desktop-maximized\"\n      },\n      mobile: {\n        minimized: \"aside-mobile-minimized\",\n        maximized: \"aside-mobile-maximized\"\n      }\n    };\n    this.backdropClick = this.backdropClick.bind(this);\n    this.toggleMinimizedBodyClass = this.toggleMinimizedBodyClass.bind(this);\n  }\n\n  toggleMinimizedBodyClass(viewport, minimized) {\n    if (minimized) {\n      document.body.classList.add(this.classes[viewport].minimized);\n      document.body.classList.remove(this.classes[viewport].maximized);\n    } else {\n      document.body.classList.remove(this.classes[viewport].minimized);\n      document.body.classList.add(this.classes[viewport].maximized);\n    }\n  }\n\n  backdropClick(e) {\n    let newState = this.state;\n    newState.mobileMinimized = true;\n    this.toggleMinimizedBodyClass(\"mobile\", true);\n    this.setState(newState);\n\n    if (this.props.backdropOnClick) {\n      this.props.backdropOnClick(e);\n    }\n  }\n\n  componentDidMount() {\n    let newState = this.state;\n    document.body.classList.add(this.classes.active);\n    newState.asideHover = this.state.desktopMinimized;\n    this.toggleMinimizedBodyClass(\"desktop\", this.state.desktopMinimized);\n    this.toggleMinimizedBodyClass(\"mobile\", this.state.mobileMinimized);\n    this.setState(newState);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      let newState = this.state;\n\n      if (window.innerWidth >= this.breakpoint) {\n        newState.desktopMinimized = this.props.desktopMinimized;\n        this.toggleMinimizedBodyClass(\"desktop\", this.state.desktopMinimized);\n        this.setState(newState);\n\n        if (this.props.desktopMinimized) {\n          setTimeout(() => {\n            newState.asideHover = true;\n            this.setState(newState);\n          }, this.transitionDuration);\n        } else {\n          newState.asideHover = false;\n          this.setState(newState);\n        }\n      } else {\n        newState.mobileMinimized = this.props.mobileMinimized;\n        this.toggleMinimizedBodyClass(\"mobile\", this.state.mobileMinimized);\n        this.setState(newState);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const removedClasses = [this.classes.active, this.classes.desktop.minimized, this.classes.desktop.maximized, this.classes.mobile.minimized, this.classes.mobile.maximized];\n    removedClasses.forEach(removedClass => {\n      document.body.classList.remove(removedClass);\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      desktopMinimized,\n      mobileMinimized,\n      backdropOnClick,\n      className,\n      cssModule,\n      children,\n      innerRef,\n      tag: Tag\n    } = _this$props,\n          attributes = _objectWithoutProperties(_this$props, [\"desktopMinimized\", \"mobileMinimized\", \"backdropOnClick\", \"className\", \"cssModule\", \"children\", \"innerRef\", \"tag\"]);\n\n    const classes = mapToCssModules(classNames(\"aside\", {\n      \"aside-hover\": this.state.asideHover\n    }, className), cssModule);\n    return __jsx(Tag, _extends({}, attributes, {\n      className: classes,\n      ref: innerRef\n    }), children, !this.state.mobileMinimized ? __jsx(Portal, null, __jsx(\"div\", {\n      id: \"aside-backdrop\",\n      onClick: this.backdropClick\n    })) : null);\n  }\n\n}\n\nAside.defaultProps = defaultProps;\nAside.Header = AsideHeader;\nAside.Body = AsideBody;\nAside.Title = AsideTitle;\nAside.Addon = AsideAddon;\nexport default Aside;","map":null,"metadata":{},"sourceType":"module"}