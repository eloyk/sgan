{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { DropdownContext } from \"./DropdownContext\";\nimport { mapToCssModules, omit, tagPropType } from \"./utils\";\nconst defaultProps = {\n  toggle: true,\n  tag: \"button\"\n};\n\nclass DropdownItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.getTabIndex = this.getTabIndex.bind(this);\n  }\n\n  onClick(e) {\n    if (this.props.disabled || this.props.header || this.props.divider) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    if (this.props.toggle) {\n      this.context.toggle(e);\n    }\n  }\n\n  getTabIndex() {\n    if (this.props.disabled || this.props.header || this.props.divider) {\n      return \"-1\";\n    }\n\n    return \"0\";\n  }\n\n  render() {\n    const tabIndex = this.getTabIndex();\n    const role = tabIndex > -1 ? \"menuitem\" : undefined;\n\n    let _omit = omit(this.props, [\"toggle\"]),\n        {\n      className,\n      cssModule,\n      children,\n      disabled,\n      active,\n      bullet,\n      addon,\n      icon,\n      tag: Tag\n    } = _omit,\n        props = _objectWithoutProperties(_omit, [\"className\", \"cssModule\", \"children\", \"disabled\", \"active\", \"bullet\", \"addon\", \"icon\", \"tag\"]);\n\n    const classes = mapToCssModules(classNames(className, \"dropdown-item\", {\n      disabled,\n      active\n    }), cssModule);\n    const iconClasses = mapToCssModules(classNames(\"dropdown-icon\"), cssModule);\n    const bulletClasses = mapToCssModules(classNames(\"dropdown-bullet\"), cssModule);\n    const contentClasses = mapToCssModules(classNames(\"dropdown-content\"), cssModule);\n    const addonClasses = mapToCssModules(classNames(\"dropdown-addon\"), cssModule);\n\n    if (Tag === \"button\") {\n      if (props.href) {\n        Tag = \"a\";\n      }\n    }\n\n    return __jsx(Tag, _extends({\n      type: Tag === \"button\" && (props.onClick || this.props.toggle) ? \"button\" : undefined\n    }, props, {\n      tabIndex: tabIndex,\n      role: role,\n      className: classes,\n      onClick: this.onClick\n    }), icon ? __jsx(\"span\", {\n      className: iconClasses\n    }, icon) : null, bullet && !icon ? __jsx(\"i\", {\n      className: bulletClasses\n    }) : null, __jsx(\"span\", {\n      className: contentClasses\n    }, children), addon ? __jsx(\"span\", {\n      className: addonClasses\n    }, addon) : null);\n  }\n\n}\n\nDropdownItem.defaultProps = defaultProps;\nDropdownItem.contextType = DropdownContext;\nexport default DropdownItem;","map":null,"metadata":{},"sourceType":"module"}