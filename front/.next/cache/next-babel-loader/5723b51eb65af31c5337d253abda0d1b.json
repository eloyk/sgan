{"ast":null,"code":"import Quill from \"quill\";\nconst QuillMixin = {\n  /**\r\n  Creates an editor on the given element. The editor will\r\n  be passed the configuration, have its events bound,\r\n  */\n  createEditor: function ($el, config) {\n    let editor = new Quill($el, config);\n\n    if (config.tabIndex !== undefined) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n\n    this.hookEditor(editor);\n    return editor;\n  },\n  hookEditor: function (editor) {\n    // Expose the editor on change events via a weaker,\n    // unprivileged proxy object that does not allow\n    // accidentally modifying editor state.\n    let unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n\n    this.handleTextChange = function (delta, oldDelta, source) {\n      if (this.onEditorChangeText) {\n        this.onEditorChangeText(editor.root.innerHTML, delta, source, unprivilegedEditor);\n        this.onEditorChangeSelection(editor.getSelection(), source, unprivilegedEditor);\n      }\n    }.bind(this);\n\n    this.handleSelectionChange = function (range, oldRange, source) {\n      if (this.onEditorChangeSelection) {\n        this.onEditorChangeSelection(range, source, unprivilegedEditor);\n      }\n    }.bind(this);\n\n    editor.on(\"editor-change\", function (eventType, rangeOrDelta, oldRangeOrOldDelta, source) {\n      if (eventType === Quill.events.SELECTION_CHANGE) {\n        this.handleSelectionChange(rangeOrDelta, oldRangeOrOldDelta, source);\n      }\n\n      if (eventType === Quill.events.TEXT_CHANGE) {\n        this.handleTextChange(rangeOrDelta, oldRangeOrOldDelta, source);\n      }\n    }.bind(this));\n  },\n  unhookEditor: function (editor) {\n    editor.off(\"selection-change\");\n    editor.off(\"text-change\");\n  },\n  setEditorReadOnly: function (editor, value) {\n    value ? editor.disable() : editor.enable();\n  },\n\n  /*\r\n  Replace the contents of the editor, but keep\r\n  the previous selection hanging around so that\r\n  the cursor won't move.\r\n  */\n  setEditorContents: function (editor, value) {\n    let sel = editor.getSelection();\n\n    if (typeof value === \"string\") {\n      editor.setContents(editor.clipboard.convert(value));\n    } else {\n      editor.setContents(value);\n    }\n\n    if (sel && editor.hasFocus()) this.setEditorSelection(editor, sel);\n  },\n  setEditorSelection: function (editor, range) {\n    if (range) {\n      // Validate bounds before applying.\n      let length = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length - 1));\n      range.length = Math.max(0, Math.min(range.length, length - 1 - range.index));\n    }\n\n    editor.setSelection(range);\n  },\n  setEditorTabIndex: function (editor, tabIndex) {\n    if (editor.editor && editor.editor.scroll && editor.editor.scroll.domNode) {\n      editor.editor.scroll.domNode.tabIndex = tabIndex;\n    }\n  },\n\n  /*\r\n  Returns an weaker, unprivileged proxy object that only\r\n  exposes read-only accessors found on the editor instance,\r\n  without any state-modificating methods.\r\n  */\n  makeUnprivilegedEditor: function (editor) {\n    let e = editor;\n    return {\n      getLength: function () {\n        return e.getLength.apply(e, arguments);\n      },\n      getText: function () {\n        return e.getText.apply(e, arguments);\n      },\n      getHTML: function () {\n        return e.root.innerHTML;\n      },\n      getContents: function () {\n        return e.getContents.apply(e, arguments);\n      },\n      getSelection: function () {\n        return e.getSelection.apply(e, arguments);\n      },\n      getBounds: function () {\n        return e.getBounds.apply(e, arguments);\n      }\n    };\n  }\n};\nexport default QuillMixin;","map":null,"metadata":{},"sourceType":"module"}