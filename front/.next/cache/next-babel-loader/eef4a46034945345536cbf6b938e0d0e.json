{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, warnOnce, tagPropType, refPropType } from \"./utils\";\nvar defaultProps = {\n  type: \"text\"\n};\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  var _super = _createSuper(Input);\n\n  function Input(props) {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _super.call(this, props);\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"getRef\",\n    value: function getRef(ref) {\n      if (this.props.innerRef) {\n        this.props.innerRef(ref);\n      }\n\n      this.ref = ref;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.ref) {\n        this.ref.focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          cssModule = _this$props.cssModule,\n          plainText = _this$props.plainText,\n          innerRef = _this$props.innerRef,\n          invalid = _this$props.invalid,\n          valid = _this$props.valid,\n          addon = _this$props.addon,\n          size = _this$props.size,\n          type = _this$props.type,\n          tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"cssModule\", \"plainText\", \"innerRef\", \"invalid\", \"valid\", \"addon\", \"size\", \"type\", \"tag\"]);\n\n      var checkInput = [\"radio\", \"checkbox\"].indexOf(type) > -1;\n      var isNotaNumber = new RegExp(\"\\\\D\", \"g\");\n      var fileInput = type === \"file\";\n      var textareaInput = type === \"textarea\";\n      var selectInput = type === \"select\";\n      var rangeInput = type === \"range\";\n      var Tag = tag || (selectInput || textareaInput ? type : \"input\");\n      var formControlClass = \"form-control\";\n\n      if (plainText) {\n        formControlClass = \"\".concat(formControlClass, \"-plaintext\");\n        Tag = tag || \"input\";\n      } else if (fileInput) {\n        formControlClass = \"\".concat(formControlClass, \"-file\");\n      } else if (rangeInput) {\n        formControlClass = \"\".concat(formControlClass, \"-range\");\n      } else if (checkInput) {\n        if (addon) {\n          formControlClass = null;\n        } else {\n          formControlClass = \"form-check-input\";\n        }\n      }\n\n      var classes = mapToCssModules(classNames(formControlClass, size ? \"form-control-\".concat(size) : false, invalid && \"is-invalid\", valid && \"is-valid\", className), cssModule);\n\n      if (Tag === \"input\" || tag && typeof tag === \"function\") {\n        attributes.type = type;\n      }\n\n      if (attributes.children && !(plainText || type === \"select\" || typeof Tag !== \"string\" || Tag === \"select\")) {\n        warnOnce(\"Input with a type of \\\"\".concat(type, \"\\\" cannot have children. Please use \\\"value\\\"/\\\"defaultValue\\\" instead.\"));\n        delete attributes.children;\n      }\n\n      return __jsx(Tag, _extends({}, attributes, {\n        ref: innerRef,\n        className: classes,\n        \"aria-invalid\": invalid\n      }));\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.defaultProps = defaultProps;\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}