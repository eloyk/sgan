{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Aside, Menu } from \"@panely/components\";\nimport { withRouter } from \"next/router\";\nimport SimpleBar from \"simplebar\";\nimport Link from \"next/link\";\nimport MENU from \"config/menu.config\";\n\nclass AsideBodyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setInitialState\", () => {\n      let states = {};\n      let submenuActive = []; // Loop the MENU object tree\n\n      MENU.forEach((menu, index1) => {\n        // Check whether the node has child\n        if (Boolean(menu.child)) {\n          // Add data to states variables\n          states = this.addDataToObject(states, [index1], {\n            active: true,\n            height: \"auto\",\n            hasChild: true\n          }); // Loop the second level child node\n\n          menu.child.forEach((menu, index2) => {\n            // Check whether the node has child\n            if (Boolean(menu.child)) {\n              // Add data to states variables\n              states = this.addDataToObject(states, [index1, index2], {\n                active: true,\n                height: \"auto\",\n                hasChild: true\n              }); // Loop the third level child node\n\n              menu.child.forEach((menu, index3) => {\n                // Add data to states variables\n                states = this.addDataToObject(states, [index1, index2, index3], {\n                  active: menu.link === this.props.router.pathname,\n                  hasChild: false\n                }); // Add data to submenuActive variables\n\n                if (menu.link === this.props.router.pathname) {\n                  submenuActive.push([index1, index2].join(\",\"));\n                  submenuActive.push([index1].join(\",\"));\n                }\n              });\n            } else {\n              // Add data to states variables\n              states = this.addDataToObject(states, [index1, index2], {\n                active: menu.link === this.props.router.pathname,\n                hasChild: false\n              }); // Add data to submenuActive variables\n\n              if (menu.link === this.props.router.pathname) {\n                submenuActive.push([index1].join(\",\"));\n              }\n            }\n          });\n        } else {\n          // Add data to states variables\n          states = this.addDataToObject(states, [index1], {\n            active: menu.link === this.props.router.pathname,\n            hasChild: false\n          });\n        }\n      });\n      return {\n        states,\n        submenuActive\n      };\n    });\n\n    _defineProperty(this, \"handleLinkClick\", (selfRoute, parentRoute) => {\n      let states = this.state; // Check whether the link has child\n\n      if (states[selfRoute].hasChild) {\n        // Toggle active state\n        states[selfRoute].active = !states[selfRoute].active; // Check whether the link has parent\n\n        if (parentRoute.length > 0) {\n          let selfheight = states[selfRoute].height;\n          let parentHeight = states[parentRoute].height; // Adjust the parent elements height\n\n          if (states[selfRoute].active) {\n            states[parentRoute].height = parentHeight + selfheight;\n          } else {\n            states[parentRoute].height = parentHeight - selfheight;\n          }\n        }\n      } else {\n        // Deactivate all links\n        for (const selfRoute in states) {\n          if (!states[selfRoute].hasChild) {\n            states[selfRoute].active = false;\n          }\n        } // Activate clicked link\n\n\n        states[selfRoute].active = true;\n      }\n\n      this.setState(states);\n    });\n\n    _defineProperty(this, \"addDataToObject\", (object, identifier, value) => {\n      return _objectSpread(_objectSpread({}, object), {}, {\n        [identifier]: value\n      });\n    });\n\n    const {\n      states: _states,\n      submenuActive: _submenuActive\n    } = this.setInitialState(); // Set initial data\n\n    this.linkRefs = [];\n    this.submenuRefs = [];\n    this.state = _states;\n    this.submenuActive = _submenuActive;\n    this.bodyRef = React.createRef();\n  }\n\n  componentDidMount() {\n    let states = this.state; // Loop submenu elements to set height and collapse it\n\n    this.submenuRefs.forEach(submenu => {\n      // Get submenu route\n      let selfRoute = submenu.getAttribute(\"data-route\").split(\",\"); // Set element height\n\n      states[selfRoute].height = submenu.offsetHeight; // Check whether submenu elements is active\n\n      if (this.submenuActive.includes(selfRoute.join(\",\"))) {\n        states[selfRoute].active = true;\n      } else {\n        states[selfRoute].active = false;\n      }\n    }); // Loop submenu elements to fix height data\n\n    this.submenuRefs.forEach(submenu => {\n      // Get submenu parent route\n      let parentRoute = submenu.getAttribute(\"data-route\").split(\",\");\n      parentRoute.pop(); // Check whether the submenu has parents\n\n      if (parentRoute.length > 0) {\n        let selfheight = submenu.offsetHeight;\n        let parentHeight = states[parentRoute].height; // Fix the element height\n\n        states[parentRoute].height = parentHeight - selfheight;\n      }\n    });\n    this.setState(states, () => {\n      // Initialize custom scrollbar\n      new SimpleBar(this.bodyRef.current);\n    });\n  }\n\n  render() {\n    return __jsx(Aside.Body, {\n      innerRef: this.bodyRef\n    }, __jsx(Menu, null, MENU.map((menu, index1) => {\n      // Set all variables needed\n      let Icon = menu.icon;\n      let parentRoute = [];\n      let selfRoute = [index1];\n      let hasChild = Boolean(menu.child);\n      let state = this.state[selfRoute]; // Check whether the node is a section\n\n      return menu.section ? __jsx(Menu.Section, {\n        key: index1,\n        children: menu.title\n      }) : __jsx(Menu.Item, {\n        key: index1\n      }, __jsx(AsideBodyMenuLink, {\n        key: index1,\n        \"data-level\": 0,\n        \"data-route\": selfRoute,\n        link: menu.link,\n        icon: Icon ? __jsx(Icon, null) : false,\n        addon: menu.addon,\n        bullet: menu.bullet,\n        active: state.active,\n        hasChild: hasChild,\n        onClick: () => this.handleLinkClick(selfRoute, parentRoute),\n        innerRef: ref => this.linkRefs.push(ref),\n        children: menu.title\n      }), hasChild ? __jsx(Menu.Submenu, {\n        \"data-level\": 0,\n        \"data-route\": selfRoute,\n        active: state.active,\n        height: state.height,\n        innerRef: ref => this.submenuRefs.push(ref)\n      }, menu.child.map((menu, index2) => {\n        // Set all variables needed\n        let Icon = menu.icon;\n        let parentRoute = [index1];\n        let selfRoute = [index1, index2];\n        let hasChild = Boolean(menu.child);\n        let state = this.state[selfRoute];\n        return __jsx(Menu.Item, {\n          key: index2\n        }, __jsx(AsideBodyMenuLink, {\n          key: index2,\n          \"data-route\": selfRoute,\n          \"data-level\": 1,\n          link: menu.link,\n          icon: Icon ? __jsx(Icon, null) : false,\n          addon: menu.addon,\n          bullet: menu.bullet,\n          active: state.active,\n          hasChild: hasChild,\n          onClick: () => this.handleLinkClick(selfRoute, parentRoute),\n          innerRef: ref => this.linkRefs.push(ref),\n          children: menu.title\n        }), hasChild ? __jsx(Menu.Submenu, {\n          \"data-level\": 1,\n          \"data-route\": selfRoute,\n          active: state.active,\n          height: state.height,\n          innerRef: ref => this.submenuRefs.push(ref)\n        }, menu.child.map((menu, index3) => {\n          // Set all variables needed\n          let Icon = menu.icon;\n          let parentRoute = [index1, index2];\n          let selfRoute = [index1, index2, index3];\n          let hasChild = Boolean(menu.child);\n          let state = this.state[selfRoute];\n          return __jsx(Menu.Item, {\n            key: index3\n          }, __jsx(AsideBodyMenuLink, {\n            key: index3,\n            \"data-route\": selfRoute,\n            \"data-level\": 2,\n            link: menu.link,\n            icon: Icon ? __jsx(Icon, null) : false,\n            addon: menu.addon,\n            bullet: menu.bullet,\n            active: state.active,\n            hasChild: hasChild,\n            onClick: () => this.handleLinkClick(selfRoute, parentRoute),\n            innerRef: ref => this.linkRefs.push(ref),\n            children: menu.title\n          }));\n        })) : null);\n      })) : null);\n    })));\n  }\n\n}\n\nfunction AsideBodyMenuLink(props) {\n  const {\n    hasChild,\n    link\n  } = props,\n        attributes = _objectWithoutProperties(props, [\"hasChild\", \"link\"]);\n\n  const MenuLink = React.forwardRef((props, ref) => __jsx(Menu.Link, _extends({}, props, {\n    innerRef: ref\n  })));\n  return hasChild ? __jsx(Menu.Link, _extends({\n    tag: \"button\"\n  }, attributes, {\n    caret: true,\n    toggle: true\n  })) : __jsx(Link, {\n    href: link,\n    passHref: true\n  }, __jsx(MenuLink, attributes));\n}\n\nexport default withRouter(AsideBodyComponent);","map":null,"metadata":{},"sourceType":"module"}