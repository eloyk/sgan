{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport TooltipPopoverWrapper, { propTypes } from \"./TooltipPopoverWrapper\";\nimport classNames from \"classnames\";\nimport { omit } from \"./utils\";\nconst omitKeys = [\"defaultOpen\"];\nconst defaultProps = {\n  placementPrefix: \"bs-popover\",\n  placement: \"right\",\n  trigger: \"click\"\n};\n\nfunction Popover(props) {\n  const HeaderTag = \"h3\";\n  const BodyTag = \"div\";\n  const popperClasses = classNames(\"popover\", \"show\", props.popperClassName);\n  const containerClasses = classNames(\"popover-inner\", props.innerClassName);\n  const headerClasses = classNames(\"popover-header\");\n  const bodyClasses = classNames(\"popover-body\");\n  return __jsx(TooltipPopoverWrapper, _extends({}, props, {\n    popperClassName: popperClasses,\n    innerClassName: containerClasses\n  }), props.title ? __jsx(HeaderTag, {\n    className: headerClasses\n  }, props.title) : null, __jsx(BodyTag, {\n    className: bodyClasses\n  }, props.children));\n}\n\nclass PopoverUncontrolled extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: props.defaultOpen || false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return __jsx(Popover, _extends({\n      isOpen: this.state.isOpen,\n      toggle: this.toggle\n    }, omit(this.props, omitKeys)));\n  }\n\n}\n\nPopover.defaultProps = defaultProps;\nPopover.Uncontrolled = PopoverUncontrolled;\nexport default Popover;","map":null,"metadata":{},"sourceType":"module"}