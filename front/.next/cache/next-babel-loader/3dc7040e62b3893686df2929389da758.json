{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\template\\\\src\\\\components\\\\firebase\\\\firebaseAuth.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext, createContext } from \"react\";\nimport { firebaseClient } from \"./firebaseClient\";\nimport nookies from \"nookies\"; // Set authentication context\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null\n});\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  useEffect(() => {\n    // Set Cookie when firebase authentication token is changed\n    return firebaseClient.auth().onIdTokenChanged(async user => {\n      const cookieExpireIn = 30 * 24 * 60 * 60; // Check whether user has logged in\n\n      if (!user) {\n        setUser(null); // Remove token from cookie\n\n        nookies.set(null, \"token\", \"\", {\n          maxAge: cookieExpireIn\n        });\n      } else {\n        const token = await user.getIdToken();\n        setUser(user); // Store token to cookie\n\n        nookies.set(null, \"token\", token, {\n          maxAge: cookieExpireIn\n        });\n      }\n    });\n  }, []); // Force refresh the token every 10 minutes\n\n  useEffect(() => {\n    const handle = setInterval(async () => {\n      const user = firebaseClient.auth().currentUser;\n      if (user) await user.getIdToken(true);\n    }, 10 * 60 * 1000);\n    return () => clearInterval(handle);\n  }, []);\n  return __jsx(AuthContext.Provider, {\n    value: {\n      user\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/components/firebase/firebaseAuth.jsx"],"names":["useState","useEffect","useContext","createContext","firebaseClient","nookies","AuthContext","user","AuthProvider","children","setUser","auth","onIdTokenChanged","cookieExpireIn","set","maxAge","token","getIdToken","handle","setInterval","currentUser","clearInterval","useAuth"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,aAA1C,QAA+D,OAA/D;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB,C,CAEA;;AACA,MAAMC,WAAW,gBAAGH,aAAa,CAAC;AAChCI,EAAAA,IAAI,EAAE;AAD0B,CAAD,CAAjC;AAIA,OAAO,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM;AAAA,OAACF,IAAD;AAAA,OAAOG;AAAP,MAAkBV,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,WAAOG,cAAc,CAACO,IAAf,GAAsBC,gBAAtB,CAAuC,MAAML,IAAN,IAAc;AAC1D,YAAMM,cAAc,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,EAAtC,CAD0D,CAG1D;;AACA,UAAI,CAACN,IAAL,EAAW;AACTG,QAAAA,OAAO,CAAC,IAAD,CAAP,CADS,CAGT;;AACAL,QAAAA,OAAO,CAACS,GAAR,CAAY,IAAZ,EAAkB,OAAlB,EAA2B,EAA3B,EAA+B;AAC7BC,UAAAA,MAAM,EAAEF;AADqB,SAA/B;AAGD,OAPD,MAOO;AACL,cAAMG,KAAK,GAAG,MAAMT,IAAI,CAACU,UAAL,EAApB;AACAP,QAAAA,OAAO,CAACH,IAAD,CAAP,CAFK,CAIL;;AACAF,QAAAA,OAAO,CAACS,GAAR,CAAY,IAAZ,EAAkB,OAAlB,EAA2BE,KAA3B,EAAkC;AAChCD,UAAAA,MAAM,EAAEF;AADwB,SAAlC;AAGD;AACF,KApBM,CAAP;AAqBD,GAvBQ,EAuBN,EAvBM,CAAT,CAHyC,CA4BzC;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,MAAM,GAAGC,WAAW,CAAC,YAAY;AACrC,YAAMZ,IAAI,GAAGH,cAAc,CAACO,IAAf,GAAsBS,WAAnC;AAEA,UAAIb,IAAJ,EAAU,MAAMA,IAAI,CAACU,UAAL,CAAgB,IAAhB,CAAN;AACX,KAJyB,EAIvB,KAAK,EAAL,GAAU,IAJa,CAA1B;AAMA,WAAO,MAAMI,aAAa,CAACH,MAAD,CAA1B;AACD,GARQ,EAQN,EARM,CAAT;AAUA,SAAO,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEX,MAAAA;AAAF,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCE,QAAxC,CAAP;AACD;AAED,OAAO,MAAMa,OAAO,GAAG,MAAM;AAC3B,SAAOpB,UAAU,CAACI,WAAD,CAAjB;AACD,CAFM","sourcesContent":["import { useState, useEffect, useContext, createContext } from \"react\"\nimport { firebaseClient } from \"./firebaseClient\"\nimport nookies from \"nookies\"\n\n// Set authentication context\nconst AuthContext = createContext({\n  user: null\n})\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    // Set Cookie when firebase authentication token is changed\n    return firebaseClient.auth().onIdTokenChanged(async user => {\n      const cookieExpireIn = 30 * 24 * 60 * 60\n\n      // Check whether user has logged in\n      if (!user) {\n        setUser(null)\n\n        // Remove token from cookie\n        nookies.set(null, \"token\", \"\", {\n          maxAge: cookieExpireIn\n        })\n      } else {\n        const token = await user.getIdToken()\n        setUser(user)\n\n        // Store token to cookie\n        nookies.set(null, \"token\", token, {\n          maxAge: cookieExpireIn\n        })\n      }\n    })\n  }, [])\n\n  // Force refresh the token every 10 minutes\n  useEffect(() => {\n    const handle = setInterval(async () => {\n      const user = firebaseClient.auth().currentUser\n\n      if (user) await user.getIdToken(true)\n    }, 10 * 60 * 1000)\n\n    return () => clearInterval(handle)\n  }, [])\n\n  return <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>\n}\n\nexport const useAuth = () => {\n  return useContext(AuthContext)\n}\n"]},"metadata":{},"sourceType":"module"}