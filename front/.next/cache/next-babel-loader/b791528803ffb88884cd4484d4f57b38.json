{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Row, Col, Portlet, Progress, Container } from \"@panely/components\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport withLayout from \"components/layout/withLayout\"; //import withAuth from \"components/firebase/firebaseWithAuth\"\n\nimport Head from \"next/head\";\n\nvar ProgressPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(ProgressPage, _React$Component);\n\n  var _super = _createSuper(ProgressPage);\n\n  function ProgressPage() {\n    _classCallCheck(this, ProgressPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ProgressPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set header title\n      this.props.pageChangeHeaderTitle(\"Progress\"); // Set breadcrumb data\n\n      this.props.breadcrumbChange([{\n        text: \"Dashboard\",\n        link: \"/\"\n      }, {\n        text: \"Elements\"\n      }, {\n        text: \"Base\"\n      }, {\n        text: \"Progress\",\n        link: \"/elements/base/progress\"\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Progress | Panely\")), __jsx(Container, {\n        fluid: true\n      }, __jsx(Row, null, __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Basic\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, __jsx(\"strong\", null, \"Progress\"), \" components are built with two HTML elements, some CSS to set the width, and a few attributes.\"), __jsx(Progress, {\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        value: 25,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        value: 50,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        value: 75,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        value: 100\n      }))), __jsx(Portlet, null, __jsx(Portlet.Header, null, __jsx(Portlet.Title, null, \"Striped\")), __jsx(Portlet.Body, null, __jsx(Portlet, null, __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add \", __jsx(\"code\", null, \"striped\"), \" property to any \", __jsx(\"code\", null, \"Progress\"), \" component to apply a stripe via CSS gradient over the progress bar\\u2019s background color.\"), __jsx(Progress, {\n        striped: true,\n        variant: \"primary\",\n        value: 20,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        striped: true,\n        variant: \"secondary\",\n        value: 30,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        striped: true,\n        variant: \"info\",\n        value: 40,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        striped: true,\n        variant: \"success\",\n        value: 50,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        striped: true,\n        variant: \"warning\",\n        value: 60,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        striped: true,\n        variant: \"danger\",\n        value: 70,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        striped: true,\n        variant: \"dark\",\n        value: 80\n      }))), __jsx(Portlet, {\n        className: \"mb-0\"\n      }, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Animated\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"The striped gradient can also be animated. Add \", __jsx(\"code\", null, \"animated\"), \" \", \"property to \", __jsx(\"code\", null, \"Progress\"), \" component to animate the stripes via CSS3 animations.\"), __jsx(Progress, {\n        animated: true,\n        variant: \"primary\",\n        value: 20,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        animated: true,\n        variant: \"secondary\",\n        value: 30,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        animated: true,\n        variant: \"info\",\n        value: 40,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        animated: true,\n        variant: \"success\",\n        value: 50,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        animated: true,\n        variant: \"warning\",\n        value: 60,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        animated: true,\n        variant: \"danger\",\n        value: 70,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        animated: true,\n        variant: \"dark\",\n        value: 80\n      })))))), __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Contextual color\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Use \", __jsx(\"code\", null, \"variant\"), \" property to change the appearance of individual progress bars.\"), __jsx(Progress, {\n        variant: \"primary\",\n        value: 20,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        variant: \"secondary\",\n        value: 30,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        variant: \"info\",\n        value: 40,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        variant: \"success\",\n        value: 50,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        variant: \"warning\",\n        value: 60,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        variant: \"danger\",\n        value: 70,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        variant: \"dark\",\n        value: 80\n      }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Label\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add labels to your progress bars by placing text within the\", \" \", __jsx(\"code\", null, \"Progress\"), \" component.\"), __jsx(Progress, {\n        variant: \"primary\",\n        value: 20,\n        className: \"mb-2\"\n      }, \"20%\"), __jsx(Progress, {\n        variant: \"secondary\",\n        value: 30,\n        className: \"mb-2\"\n      }, \"30%\"), __jsx(Progress, {\n        variant: \"info\",\n        value: 40,\n        className: \"mb-2\"\n      }, \"40%\"), __jsx(Progress, {\n        variant: \"success\",\n        value: 50,\n        className: \"mb-2\"\n      }, \"50%\"), __jsx(Progress, {\n        variant: \"warning\",\n        value: 60,\n        className: \"mb-2\"\n      }, \"60%\"), __jsx(Progress, {\n        variant: \"danger\",\n        value: 70,\n        className: \"mb-2\"\n      }, \"70%\"), __jsx(Progress, {\n        variant: \"dark\",\n        value: 80\n      }, \"80%\"))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Height\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Use \", __jsx(\"code\", null, \"size\"), \" property to change progress element height.\"), __jsx(Progress, {\n        size: \"sm\",\n        value: 25,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        size: \"lg\",\n        value: 25,\n        className: \"mb-2\"\n      }), __jsx(\"p\", null, \"Or you can set a height value on the \", __jsx(\"code\", null, \"Progress\"), \".\"), __jsx(Progress, {\n        style: {\n          height: \"2px\"\n        },\n        value: 25,\n        className: \"mb-2\"\n      }), __jsx(Progress, {\n        style: {\n          height: \"10px\"\n        },\n        value: 25\n      }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Multiple\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Include multiple progress bars in a progress component if you need.\"), __jsx(Progress, {\n        multi: true\n      }, __jsx(Progress, {\n        bar: true,\n        value: \"15\"\n      }), __jsx(Progress, {\n        bar: true,\n        variant: \"success\",\n        value: \"30\"\n      }), __jsx(Progress, {\n        bar: true,\n        variant: \"info\",\n        value: \"20\"\n      }))))))));\n    }\n  }]);\n\n  return ProgressPage;\n}(React.Component);\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle: pageChangeHeaderTitle,\n    breadcrumbChange: breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withLayout(ProgressPage));","map":null,"metadata":{},"sourceType":"module"}