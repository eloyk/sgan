{"ast":null,"code":"import TYPES from \"store/types\";\nimport AuthService from \"../../services/auth.service\";\nexport const register = (email, password) => dispatch => {\n  return AuthService.register(email, password).then(response => {\n    dispatch({\n      type: TYPES.REGISTER_SUCCESS,\n      payload: response.data\n    });\n    dispatch({\n      type: TYPES.SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.errores && error.response.errores.mensaje || error.mensaje || error.toString();\n    dispatch({\n      type: TYPES.REGISTER_FAIL\n    });\n    dispatch({\n      type: TYPES.SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/sgan/front/src/store/actions/auth.jsx"],"names":["TYPES","AuthService","register","email","password","dispatch","then","response","type","REGISTER_SUCCESS","payload","data","SET_MESSAGE","message","Promise","resolve","error","errores","mensaje","toString","REGISTER_FAIL","reject","login","username","LOGIN_SUCCESS","user","LOGIN_FAIL","logout","LOGOUT"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;AACzD,SAAOJ,WAAW,CAACC,QAAZ,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCE,IAAtC,CACJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,KAAK,CAACS,gBADL;AAEPC,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,KAAD,CAAR;AAKAN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,KAAK,CAACY,WADL;AAEPF,MAAAA,OAAO,EAAEH,QAAQ,CAACI,IAAT,CAAcE;AAFhB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAbI,EAcJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACT,QAAN,IACCS,KAAK,CAACT,QAAN,CAAeU,OADhB,IAECD,KAAK,CAACT,QAAN,CAAeU,OAAf,CAAuBC,OAFzB,IAGAF,KAAK,CAACE,OAHN,IAIAF,KAAK,CAACG,QAAN,EALF;AAOAd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,KAAK,CAACoB;AADL,KAAD,CAAR;AAIAf,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,KAAK,CAACY,WADL;AAEPF,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACO,MAAR,EAAP;AACD,GAhCI,CAAP;AAkCD,CAnCM;AAqCP,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWnB,QAAX,KAAyBC,QAAD,IAAc;AACzD,SAAOJ,WAAW,CAACqB,KAAZ,CAAkBC,QAAlB,EAA4BnB,QAA5B,EAAsCE,IAAtC,CACJK,IAAD,IAAU;AACRN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEgB,aADC;AAEPd,MAAAA,OAAO,EAAE;AAAEe,QAAAA,IAAI,EAAEd;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOG,OAAO,CAACC,OAAR,EAAP;AACD,GARI,EASJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACT,QAAN,IACCS,KAAK,CAACT,QAAN,CAAeI,IADhB,IAECK,KAAK,CAACT,QAAN,CAAeI,IAAf,CAAoBE,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACG,QAAN,EALF;AAOAd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEkB;AADC,KAAD,CAAR;AAIArB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEI,WADC;AAEPF,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACO,MAAR,EAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMM,MAAM,GAAG,MAAOtB,QAAD,IAAc;AACxCJ,EAAAA,WAAW,CAAC0B,MAAZ;AAEAtB,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEoB;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["import TYPES from \"store/types\"\r\n\r\nimport AuthService from \"../../services/auth.service\";\r\n\r\nexport const register = (email, password) => (dispatch) => {\r\n  return AuthService.register(email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: TYPES.REGISTER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n\r\n      dispatch({\r\n        type: TYPES.SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.errores &&\r\n          error.response.errores.mensaje) ||\r\n        error.mensaje ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: TYPES.REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: TYPES.SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}