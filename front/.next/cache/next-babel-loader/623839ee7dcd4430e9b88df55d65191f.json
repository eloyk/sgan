{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// All components stylesheets\nimport \"styles/core/reboot.scss\";\nimport \"styles/components/index.scss\";\nimport \"styles/quill/core.scss\";\nimport \"styles/quill/snow.scss\";\nimport \"styles/quill/bubble.scss\";\nimport \"styles/apexcharts/index.scss\";\nimport \"styles/simplebar/index.scss\";\nimport \"styles/sortablejs/sortablejs.scss\";\nimport \"styles/sweetalert2/index.scss\";\nimport \"styles/slick-carousel/index.scss\"; //import { AuthProvider } from \"components/firebase/firebaseAuth\"\n\nimport { bindActionCreators } from \"redux\";\nimport { pageChangeTheme } from \"store/actions\";\nimport { wrapper } from \"store\";\nimport { connect } from \"react-redux\";\nimport DefaultLayout from \"components/layout/template/DefaultLayout\";\nimport BlankLayout from \"components/layout/template/BlankLayout\";\nimport ProgressBar from \"@panely/progressbar\";\nimport Router from \"next/router\";\nimport App from \"next/app\";\n\nclass MyApp extends App {\n  componentDidMount() {\n    // Check whether dark mode support is available or not\n    const darkModeActive = window.matchMedia(\"(prefers-color-scheme: dark)\").matches; // Enable/disable dark mode\n\n    this.props.pageChangeTheme(darkModeActive ? \"dark\" : \"light\");\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.theme !== prevProps.theme) {\n      // Toggling theme body class\n      if (this.props.theme === \"dark\") {\n        document.body.classList.remove(\"theme-light\");\n        document.body.classList.add(\"theme-dark\");\n      } else {\n        document.body.classList.remove(\"theme-dark\");\n        document.body.classList.add(\"theme-light\");\n      }\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    let Layout;\n\n    switch (pageProps.layout) {\n      case \"default\":\n        Layout = DefaultLayout;\n        break;\n\n      case \"blank\":\n        Layout = BlankLayout;\n        break;\n\n      default:\n        Layout = BlankLayout;\n    }\n\n    return (//      <AuthProvider>\n      __jsx(Layout, null, __jsx(ProgressBar, null), __jsx(Component, pageProps)) //      </AuthProvider>\n\n    );\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    theme: state.page.theme\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return _objectSpread({}, bindActionCreators({\n    pageChangeTheme\n  }, dispatch));\n}\n\nexport default wrapper.withRedux(connect(mapStateToProps, mapDispatchToProps)(MyApp));","map":null,"metadata":{},"sourceType":"module"}