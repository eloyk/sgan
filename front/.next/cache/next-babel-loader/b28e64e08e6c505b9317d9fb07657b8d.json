{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Router from 'next/router';\n\nvar IndexUnidadMedida = function IndexUnidadMedida(_ref) {\n  var usuarioActual = _ref.usuarioActual,\n      unidadesMedida = _ref.unidadesMedida;\n\n  if (usuarioActual === null) {\n    return function () {\n      return Router.push('/');\n    };\n  }\n\n  var listaUnidadMedida = unidadesMedida.map(function (unidadMedida) {\n    return __jsx(\"tr\", {\n      key: unidadMedida.id\n    }, __jsx(\"td\", null, unidadMedida.descripcion), __jsx(\"td\", null, unidadMedida.literal));\n  });\n  return listaUnidadMedida ? __jsx(\"div\", null, __jsx(\"h2\", null, \"Unidades de medida\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return Router.push('/unidadmedida/crear');\n    },\n    className: \"btn btn-primary\"\n  }, \"crear\"), __jsx(\"table\", {\n    className: \"table\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Unidad de medida\"), __jsx(\"th\", null, \"Literal\"))), __jsx(\"tbody\", null, listaUnidadMedida))) : __jsx(\"h4\", null, \"No hay unidades de medida para mostrar\");\n};\n\nIndexUnidadMedida.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, client, usuarioActual) {\n    var _yield$client$get, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(usuarioActual === null)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return client.get('/api/unidadmedida');\n\n          case 4:\n            _yield$client$get = _context.sent;\n            data = _yield$client$get.data;\n            return _context.abrupt(\"return\", {\n              unidadesMedida: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default IndexUnidadMedida;","map":null,"metadata":{},"sourceType":"module"}