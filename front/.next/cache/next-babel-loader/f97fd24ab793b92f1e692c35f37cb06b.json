{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Form, Label, Input, Button, Portlet, Container, FloatLabel, InputGroup, CustomInput } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport { connect } from \"react-redux\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport * as yup from \"yup\";\nimport withLayout from \"components/layout/withLayout\";\nimport withAuth from \"components/firebase/firebaseWithAuth\";\nimport Head from \"next/head\";\n\nclass FormValidationPage extends React.Component {\n  componentDidMount() {\n    // Set header title\n    this.props.pageChangeHeaderTitle(\"Form Validation\"); // Set breadcrumb data\n\n    this.props.breadcrumbChange([{\n      text: \"Dashboard\",\n      link: \"/\"\n    }, {\n      text: \"Form\"\n    }, {\n      text: \"Validation\",\n      link: \"/form/validation\"\n    }]);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Form Validation | Panely\")), __jsx(Container, {\n      fluid: true\n    }, __jsx(Row, null, __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Validation states\")), __jsx(Portlet.Body, null, __jsx(Form.Group, null, __jsx(Label, {\n      for: \"validationEmail\"\n    }, \"Email address\"), __jsx(Input, {\n      type: \"email\",\n      id: \"validationEmail\",\n      placeholder: \"Please insert your email\",\n      valid: true\n    }), __jsx(Form.Feedback, {\n      valid: true\n    }, \"Valid feedback\"), __jsx(Form.Text, null, \"We'll never share your email with anyone else.\")), __jsx(Form.Group, {\n      className: \"mb-0\"\n    }, __jsx(Label, {\n      for: \"validationPassword\"\n    }, \"Password\"), __jsx(Input, {\n      type: \"password\",\n      id: \"validationPassword\",\n      placeholder: \"Please insert your password\",\n      invalid: true\n    }), __jsx(Form.Feedback, null, \"Invalid feedback\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Custom form\")), __jsx(Portlet.Body, null, __jsx(Form.Group, null, __jsx(Label, {\n      for: \"validationTextarea\"\n    }, \"Textarea\"), __jsx(Input, {\n      type: \"textarea\",\n      id: \"validationTextarea\",\n      placeholder: \"Required example textarea\",\n      required: true,\n      invalid: true\n    }), __jsx(Form.Feedback, null, \"Please enter a message in the textarea.\")), __jsx(Form.Group, null, __jsx(CustomInput, {\n      type: \"checkbox\",\n      id: \"validationCheckbox\",\n      label: \"Check this custom checkbox\",\n      required: true,\n      invalid: true\n    })), __jsx(Form.Group, null, __jsx(CustomInput, {\n      type: \"radio\",\n      id: \"validationRadio1\",\n      name: \"validationRadios\",\n      label: \"Toggle this custom radio\",\n      defaultChecked: true,\n      required: true,\n      valid: true\n    }), __jsx(CustomInput, {\n      type: \"radio\",\n      id: \"validationRadio2\",\n      name: \"validationRadios\",\n      label: \"Or toggle this other custom radio\",\n      required: true,\n      valid: true\n    })), __jsx(Form.Group, null, __jsx(CustomInput, {\n      type: \"switch\",\n      id: \"validationSwitch\",\n      label: \"Toggle this switch element\",\n      invalid: true\n    })), __jsx(Form.Group, null, __jsx(CustomInput, {\n      id: \"validationSelect\",\n      type: \"select\",\n      required: true,\n      valid: true\n    }, __jsx(\"option\", {\n      value: \"\"\n    }, \"Open this select menu\"), __jsx(\"option\", {\n      value: \"1\"\n    }, \"One\"), __jsx(\"option\", {\n      value: \"2\"\n    }, \"Two\"), __jsx(\"option\", {\n      value: \"3\"\n    }, \"Three\")), __jsx(Form.Feedback, {\n      valid: true\n    }, \"Example valid custom select feedback\")), __jsx(Form.Group, null, __jsx(CustomInput, {\n      id: \"validationFile\",\n      type: \"file\",\n      required: true,\n      invalid: true\n    }, __jsx(Form.Feedback, null, \"Example invalid custom file feedback\"))), __jsx(Form.Group, {\n      className: \"mb-0\"\n    }, __jsx(FloatLabel, null, __jsx(Input, {\n      type: \"email\",\n      id: \"validationFloatLabel\",\n      placeholder: \"Email\",\n      defaultValue: \"example@my.com\",\n      valid: true\n    }), __jsx(Label, {\n      for: \"validationFloatLabel\"\n    }, \"Float label\"), __jsx(Form.Feedback, {\n      valid: true\n    }, \"Example valid float label feedback\")))))), __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Input group\")), __jsx(Portlet.Body, null, __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(InputGroup.Addon, {\n      addonType: \"prepend\"\n    }, __jsx(InputGroup.Text, null, \"@\")), __jsx(Input, {\n      type: \"email\",\n      placeholder: \"Email\",\n      valid: true\n    }))), __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(Input, {\n      type: \"text\",\n      placeholder: \"Currency\",\n      invalid: true\n    }), __jsx(InputGroup.Addon, {\n      addonType: \"append\"\n    }, __jsx(InputGroup.Text, null, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faDollarSign\n    }))))), __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(InputGroup.Addon, {\n      addonType: \"prepend\"\n    }, __jsx(InputGroup.Text, null, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faLink\n    }))), __jsx(Input, {\n      type: \"text\",\n      placeholder: \"Link\",\n      valid: true\n    }), __jsx(InputGroup.Addon, {\n      addonType: \"prepend\"\n    }, __jsx(InputGroup.Text, null, \".com\")))), __jsx(Form.Group, {\n      className: \"mb-0\"\n    }, __jsx(InputGroup, {\n      icon: true\n    }, __jsx(InputGroup.Addon, {\n      addonType: \"prepend\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faMapMarkerAlt\n    })), __jsx(Input, {\n      type: \"text\",\n      placeholder: \"Location\",\n      invalid: true\n    }))))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"React Hook Form\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"We use \", __jsx(\"strong\", null, \"React Hook Form\"), \" library to support these features. Performant, flexible and extensible forms with easy-to-use validation. Look more references on\", \" \", __jsx(\"a\", {\n      href: \"https://react-hook-form.com/\",\n      target: \"_blank\"\n    }, \"their pages\")), __jsx(FormValidation, null)))))));\n  }\n\n}\n\nfunction FormValidation() {\n  // Define Yup schema for form validation\n  const schema = yup.object().shape({\n    firstName: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your lastname\"),\n    lastName: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your lastname\"),\n    gender: yup.string().notOneOf([\"default\"], \"Please enter your gender\"),\n    email: yup.string().email(\"Your email is not valid\").required(\"Please enter your email\"),\n    homepage: yup.string().url(\"Your link is not valid\").required(\"Please enter your homepage link\"),\n    password1: yup.string().min(6, \"Please enter at least 6 characters\").required(\"Please provide your password\"),\n    password2: yup.string().min(6, \"Please enter at least 6 characters\").oneOf([yup.ref(\"password1\")], \"Your password not match\").required(\"Please repeat your password\"),\n    agreement: yup.boolean().oneOf([true], \"You must accept the agreement\")\n  });\n  const {\n    control,\n    handleSubmit,\n    errors\n  } = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      gender: \"default\",\n      email: \"\",\n      homepage: \"\",\n      password1: \"\",\n      password2: \"\",\n      agreement: false\n    }\n  }); // Handle form submit event\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"first-name\",\n    name: \"firstName\",\n    control: control,\n    invalid: Boolean(errors.firstName),\n    placeholder: \"Insert your firstname\"\n  }), __jsx(Label, {\n    for: \"first-name\"\n  }, \"First name\"), errors.firstName && __jsx(Form.Feedback, {\n    children: errors.firstName.message\n  })))), __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"last-name\",\n    name: \"lastName\",\n    control: control,\n    invalid: Boolean(errors.lastName),\n    placeholder: \"Insert your lastname\"\n  }), __jsx(Label, {\n    for: \"last-name\"\n  }, \"last name\"), errors.lastName && __jsx(Form.Feedback, {\n    children: errors.lastName.message\n  }))))), __jsx(Form.Group, null, __jsx(Controller, {\n    as: CustomInput,\n    type: \"select\",\n    name: \"gender\",\n    id: \"gender\",\n    control: control,\n    invalid: Boolean(errors.gender)\n  }, __jsx(\"option\", {\n    value: \"default\"\n  }, \"Select your gender\"), __jsx(\"option\", {\n    value: \"male\"\n  }, \"Male\"), __jsx(\"option\", {\n    value: \"female\"\n  }, \"Female\")), errors.gender && __jsx(Form.Feedback, {\n    children: errors.gender.message\n  })), __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(InputGroup.Addon, {\n    addonType: \"prepend\"\n  }, __jsx(InputGroup.Text, null, __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faEnvelope\n  }))), __jsx(Controller, {\n    as: Input,\n    type: \"email\",\n    name: \"email\",\n    control: control,\n    invalid: Boolean(errors.email),\n    placeholder: \"Please enter your email\"\n  }), errors.email && __jsx(Form.Feedback, {\n    children: errors.email.message\n  }))), __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(InputGroup.Addon, {\n    addonType: \"prepend\"\n  }, __jsx(InputGroup.Text, null, \"Homepage\")), __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    name: \"homepage\",\n    control: control,\n    invalid: Boolean(errors.homepage),\n    placeholder: \"https://example.me\"\n  }), errors.homepage && __jsx(Form.Feedback, {\n    children: errors.homepage.message\n  }))), __jsx(Form.Group, null, __jsx(Controller, {\n    as: Input,\n    type: \"password\",\n    name: \"password1\",\n    control: control,\n    invalid: Boolean(errors.password1),\n    placeholder: \"please provide your password\"\n  }), errors.password1 && __jsx(Form.Feedback, {\n    children: errors.password1.message\n  })), __jsx(Form.Group, null, __jsx(Controller, {\n    as: Input,\n    type: \"password\",\n    name: \"password2\",\n    control: control,\n    invalid: Boolean(errors.password2),\n    placeholder: \"Please insert again your password\"\n  }), errors.password2 && __jsx(Form.Feedback, {\n    children: errors.password2.message\n  })), __jsx(Form.Group, null, __jsx(Controller, {\n    control: control,\n    name: \"agreement\",\n    render: ({\n      onChange,\n      onBlur,\n      value,\n      name,\n      ref\n    }) => __jsx(CustomInput, {\n      type: \"checkbox\",\n      size: \"lg\",\n      id: \"agreement\",\n      label: \"Accept agreement\",\n      invalid: Boolean(errors.agreement),\n      onBlur: onBlur,\n      onChange: e => onChange(e.target.checked),\n      checked: value,\n      innerRef: ref\n    })\n  })), __jsx(Button, {\n    type: \"submit\",\n    variant: \"primary\"\n  }, \"Submit\"));\n}\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle,\n    breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withAuth(withLayout(FormValidationPage)));","map":null,"metadata":{},"sourceType":"module"}