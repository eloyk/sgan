{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\template\\\\src\\\\components\\\\layout\\\\part\\\\HeaderAction.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Button, Tooltip, ButtonGroup } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\n\nfunction HeaderAction() {\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(HeaderActionRadio, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }), __jsx(HeaderActionFullscreen, {\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }));\n}\n\n_c = HeaderAction;\n\nvar HeaderActionRadio = /*#__PURE__*/function (_React$Component) {\n  _inherits(HeaderActionRadio, _React$Component);\n\n  var _super = _createSuper(HeaderActionRadio);\n\n  function HeaderActionRadio() {\n    var _this;\n\n    _classCallCheck(this, HeaderActionRadio);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      // Default active button\n      buttonActive: \"today\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (id) {\n      _this.setState({\n        buttonActive: id\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(HeaderActionRadio, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(ButtonGroup, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }), __jsx(Button, {\n        active: this.state.buttonActive === \"today\",\n        onClick: function onClick() {\n          return _this2.handleClick(\"today\");\n        },\n        variant: \"flat-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }, \"Today\"), __jsx(Button, {\n        active: this.state.buttonActive === \"week\",\n        onClick: function onClick() {\n          return _this2.handleClick(\"week\");\n        },\n        variant: \"flat-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, \"Week\"), __jsx(Button, {\n        active: this.state.buttonActive === \"month\",\n        onClick: function onClick() {\n          return _this2.handleClick(\"month\");\n        },\n        variant: \"flat-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }, \"Month\"));\n    }\n  }]);\n\n  return HeaderActionRadio;\n}(React.Component);\n\nvar HeaderActionFullscreen = /*#__PURE__*/function (_React$Component2) {\n  _inherits(HeaderActionFullscreen, _React$Component2);\n\n  var _super2 = _createSuper(HeaderActionFullscreen);\n\n  function HeaderActionFullscreen() {\n    var _this3;\n\n    _classCallCheck(this, HeaderActionFullscreen);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this3 = _super2.call.apply(_super2, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this3), \"state\", {\n      fullscreenActive: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this3), \"handleClick\", function () {\n      if (_this3.state.fullscreenActive) {\n        // Exit from fullscreen mode\n        document.exitFullscreen();\n      } else {\n        // Activating fullscreen mode\n        document.documentElement.requestFullscreen();\n      }\n    });\n\n    return _this3;\n  }\n\n  _createClass(HeaderActionFullscreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      var fullscreenClass = \"fullscreen-active\";\n\n      document.onfullscreenchange = function () {\n        // Check whether fullscreen mode is activated\n        if (document.fullscreenElement) {\n          // Set the state and add the class to the body element\n          _this4.setState({\n            fullscreenActive: true\n          }, function () {\n            document.body.classList.add(fullscreenClass);\n          });\n        } else {\n          // Set the state and remove the class to the body element\n          _this4.setState({\n            fullscreenActive: false\n          }, function () {\n            document.body.classList.remove(fullscreenClass);\n          });\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      }, __jsx(Button, _extends({\n        icon: true,\n        id: \"fullscreenTrigger\",\n        variant: \"label-info\",\n        onClick: this.handleClick\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }), __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faExpand,\n        className: \"fullscreen-icon-expand\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }), __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faCompress,\n        className: \"fullscreen-icon-compress\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      })), __jsx(Tooltip.Uncontrolled, {\n        placement: \"left\",\n        target: \"fullscreenTrigger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, \"Toggle fullscreen\"));\n    }\n  }]);\n\n  return HeaderActionFullscreen;\n}(React.Component);\n\nexport default HeaderAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"HeaderAction\");","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/components/layout/part/HeaderAction.jsx"],"names":["Button","Tooltip","ButtonGroup","FontAwesomeIcon","SolidIcon","HeaderAction","HeaderActionRadio","buttonActive","id","setState","props","state","handleClick","React","Component","HeaderActionFullscreen","fullscreenActive","document","exitFullscreen","documentElement","requestFullscreen","fullscreenClass","onfullscreenchange","fullscreenElement","body","classList","add","remove","faExpand","faCompress"],"mappings":"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","sourcesContent":["import { Button, Tooltip, ButtonGroup } from \"@panely/components\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\"\n\nfunction HeaderAction() {\n  return (\n    <React.Fragment>\n      <HeaderActionRadio />\n      <HeaderActionFullscreen className=\"ml-2\" />\n    </React.Fragment>\n  )\n}\n\nclass HeaderActionRadio extends React.Component {\n  state = {\n    // Default active button\n    buttonActive: \"today\"\n  }\n\n  // Handle click event for each buttons\n  handleClick = id => {\n    this.setState({ buttonActive: id })\n  }\n\n  render() {\n    return (\n      <ButtonGroup {...this.props}>\n        <Button\n          active={this.state.buttonActive === \"today\"}\n          onClick={() => this.handleClick(\"today\")}\n          variant=\"flat-primary\"\n        >\n          Today\n        </Button>\n        <Button\n          active={this.state.buttonActive === \"week\"}\n          onClick={() => this.handleClick(\"week\")}\n          variant=\"flat-primary\"\n        >\n          Week\n        </Button>\n        <Button\n          active={this.state.buttonActive === \"month\"}\n          onClick={() => this.handleClick(\"month\")}\n          variant=\"flat-primary\"\n        >\n          Month\n        </Button>\n      </ButtonGroup>\n    )\n  }\n}\n\nclass HeaderActionFullscreen extends React.Component {\n  state = { fullscreenActive: false }\n\n  // Handle click event\n  handleClick = () => {\n    if (this.state.fullscreenActive) {\n      // Exit from fullscreen mode\n      document.exitFullscreen()\n    } else {\n      // Activating fullscreen mode\n      document.documentElement.requestFullscreen()\n    }\n  }\n\n  componentDidMount() {\n    const fullscreenClass = \"fullscreen-active\"\n\n    document.onfullscreenchange = () => {\n      // Check whether fullscreen mode is activated\n      if (document.fullscreenElement) {\n        // Set the state and add the class to the body element\n        this.setState({ fullscreenActive: true }, () => {\n          document.body.classList.add(fullscreenClass)\n        })\n      } else {\n        // Set the state and remove the class to the body element\n        this.setState({ fullscreenActive: false }, () => {\n          document.body.classList.remove(fullscreenClass)\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Button\n          icon\n          id=\"fullscreenTrigger\"\n          variant=\"label-info\"\n          onClick={this.handleClick}\n          {...this.props}\n        >\n          <FontAwesomeIcon icon={SolidIcon.faExpand} className=\"fullscreen-icon-expand\" />\n          <FontAwesomeIcon icon={SolidIcon.faCompress} className=\"fullscreen-icon-compress\" />\n        </Button>\n        <Tooltip.Uncontrolled placement=\"left\" target=\"fullscreenTrigger\">\n          Toggle fullscreen\n        </Tooltip.Uncontrolled>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default HeaderAction\n"]},"metadata":{},"sourceType":"module"}