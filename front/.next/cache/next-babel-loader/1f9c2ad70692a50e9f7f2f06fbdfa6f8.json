{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Form, Label, Button, Portlet, Container } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport swalContent from \"sweetalert2-react-content\";\nimport withLayout from \"components/layout/withLayout\";\nimport withAuth from \"components/firebase/firebaseWithAuth\";\nimport Head from \"next/head\";\nimport Swal from \"@panely/sweetalert2\"; // Use SweetAlert React Content library\n\nconst ReactSwal = swalContent(Swal); // Set SweetAlert options\n\nconst swal = ReactSwal.mixin({\n  customClass: {\n    confirmButton: \"btn btn-label-success btn-wide mx-1\",\n    cancelButton: \"btn btn-label-danger btn-wide mx-1\"\n  },\n  buttonsStyling: false\n}); // Set SweetAlert toast options\n\nconst toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: toast => {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  }\n});\n\nclass SweetAlertPage extends React.Component {\n  componentDidMount() {\n    // Set header title\n    this.props.pageChangeHeaderTitle(\"Sweet Alert\"); // Set breadcrumb data\n\n    this.props.breadcrumbChange([{\n      text: \"Dashboard\",\n      link: \"/\"\n    }, {\n      text: \"Elements\"\n    }, {\n      text: \"Advanced\"\n    }, {\n      text: \"Sweet Alert\",\n      link: \"/elements/advanced/sweet-alert\"\n    }]);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Sweet Alert | Panely\")), __jsx(Container, {\n      fluid: true\n    }, __jsx(Row, null, __jsx(Col, {\n      xs: \"12\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Sweet Alert\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, __jsx(\"strong\", null, \"Sweet alert\"), \" is a beautiful, responsive, customizable, accessible replacement for javascripts's popup boxes with zero dependencies. Check\", \" \", __jsx(\"a\", {\n      href: \"http://sweetalert2.github.io\",\n      target: \"_blank\"\n    }, \"Sweet Alert's page\"), \" \", \"for more info.\"), __jsx(\"hr\", null), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Basic example\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal1, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Title with a text under\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal2, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"More complex modal\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal3, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Custom HTML description\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal4, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Dialog position\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal5, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Confirm dialog\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal6, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Custom image\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal7, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Auto close timer\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal8, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"AJAX request\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal9, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Chaining modals\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal10, null))), __jsx(Form.Group, {\n      row: true\n    }, __jsx(Label, {\n      sm: \"4\",\n      lg: \"3\",\n      className: \"text-muted text-sm-right\"\n    }, \"Toast\"), __jsx(Col, {\n      sm: \"8\",\n      lg: \"9\"\n    }, __jsx(Swal11, null)))))))));\n  }\n\n}\n\nclass Swal1 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire(\"Any fool can use a computer\");\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal2 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire(\"The Internet?\", \"That thing is still around?\", \"question\");\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal3 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"Something went wrong!\",\n        footer: __jsx(\"a\", {\n          href: \"#\"\n        }, \"Why do I have this issue?\")\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal4 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire({\n        title: __jsx(\"strong\", null, \"HTML \", __jsx(\"u\", null, \"example\")),\n        icon: \"info\",\n        html: __jsx(React.Fragment, null, \"You can use \", __jsx(\"b\", null, \"bold text\"), \", \", __jsx(\"a\", {\n          href: \"https://sweetalert2.github.io/\"\n        }, \"links\"), \" and other HTML tag\"),\n        showCloseButton: true,\n        showCancelButton: true,\n        focusConfirm: false,\n        confirmButtonText: __jsx(React.Fragment, null, __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faThumbsUp\n        }), \" Great!\"),\n        confirmButtonAriaLabel: \"Thumbs up, great!\",\n        cancelButtonText: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faThumbsDown\n        }),\n        cancelButtonAriaLabel: \"Thumbs down\"\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal5 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire({\n        position: \"top-end\",\n        icon: \"success\",\n        title: \"Your work has been saved\",\n        showConfirmButton: false,\n        timer: 1500\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal6 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire({\n        title: \"Are you sure?\",\n        text: \"You won't be able to revert this!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#3085d6\",\n        cancelButtonColor: \"#d33\",\n        confirmButtonText: \"Yes, delete it!\"\n      }).then(result => {\n        if (result.value) {\n          swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\n        }\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal7 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire({\n        title: \"Sweet!\",\n        text: \"Modal with a custom image.\",\n        imageUrl: \"https://unsplash.it/400/200\",\n        imageWidth: 400,\n        imageHeight: 200,\n        imageAlt: \"Custom image\"\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal8 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      let timerInterval;\n      swal.fire({\n        title: \"Auto close alert!\",\n        html: __jsx(React.Fragment, null, \"\\\"I will close in \", __jsx(\"b\", null), \" milliseconds.\\\"\"),\n        timer: 2000,\n        timerProgressBar: true,\n        onBeforeOpen: () => {\n          swal.showLoading();\n          timerInterval = setInterval(() => {\n            const content = swal.getContent();\n\n            if (content) {\n              const b = content.querySelector(\"b\");\n\n              if (b) {\n                b.textContent = swal.getTimerLeft();\n              }\n            }\n          }, 100);\n        },\n        onClose: () => {\n          clearInterval(timerInterval);\n        }\n      }).then(result => {\n        if (result.dismiss === swal.DismissReason.timer) {\n          console.log(\"I was closed by the timer\");\n        }\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal9 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.fire({\n        title: \"Submit your Github username\",\n        input: \"text\",\n        inputAttributes: {\n          autocapitalize: \"off\"\n        },\n        showCancelButton: true,\n        confirmButtonText: \"Look up\",\n        showLoaderOnConfirm: true,\n        preConfirm: login => {\n          return fetch(`https://api.github.com/users/${login}`).then(response => {\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return response.json();\n          }).catch(error => {\n            swal.showValidationMessage(`Request failed: ${error}`);\n          });\n        },\n        allowOutsideClick: () => !swal.isLoading()\n      }).then(result => {\n        if (result.value) {\n          swal.fire({\n            title: `${result.value.login}'s avatar`,\n            imageUrl: result.value.avatar_url\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal10 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      swal.mixin({\n        input: \"text\",\n        confirmButtonText: \"Next &rarr;\",\n        showCancelButton: true,\n        progressSteps: [\"1\", \"2\", \"3\"]\n      }).queue([{\n        title: \"Question 1\",\n        text: \"Chaining swal2 modals is easy\"\n      }, \"Question 2\", \"Question 3\"]).then(result => {\n        if (result.value) {\n          const answers = JSON.stringify(result.value);\n          swal.fire({\n            title: \"All done!\",\n            html: __jsx(React.Fragment, null, \"Your answers: \", __jsx(\"pre\", null, __jsx(\"code\", null, answers))),\n            confirmButtonText: \"Lovely!\"\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nclass Swal11 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      toast.fire({\n        icon: \"success\",\n        title: \"Signed in successfully\"\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Button, {\n      onClick: this.handleClick\n    }, \"Click me\");\n  }\n\n}\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle,\n    breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withAuth(withLayout(SweetAlertPage)));","map":null,"metadata":{},"sourceType":"module"}