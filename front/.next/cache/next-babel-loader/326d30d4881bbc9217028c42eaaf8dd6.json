{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\sgan\\\\front\\\\src\\\\components\\\\layout\\\\part\\\\HeaderAction.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Tooltip, ButtonGroup } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\n\nfunction HeaderAction() {\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(HeaderActionRadio, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }), __jsx(HeaderActionFullscreen, {\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }));\n}\n\nclass HeaderActionRadio extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Default active button\n      buttonActive: \"today\"\n    });\n\n    _defineProperty(this, \"handleClick\", id => {\n      this.setState({\n        buttonActive: id\n      });\n    });\n  }\n\n  render() {\n    return __jsx(ButtonGroup, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }), __jsx(Button, {\n      active: this.state.buttonActive === \"today\",\n      onClick: () => this.handleClick(\"today\"),\n      variant: \"flat-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, \"Today\"), __jsx(Button, {\n      active: this.state.buttonActive === \"week\",\n      onClick: () => this.handleClick(\"week\"),\n      variant: \"flat-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Week\"), __jsx(Button, {\n      active: this.state.buttonActive === \"month\",\n      onClick: () => this.handleClick(\"month\"),\n      variant: \"flat-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \"Month\"));\n  }\n\n}\n\nclass HeaderActionFullscreen extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      fullscreenActive: false\n    });\n\n    _defineProperty(this, \"handleClick\", () => {\n      if (this.state.fullscreenActive) {\n        // Exit from fullscreen mode\n        document.exitFullscreen();\n      } else {\n        // Activating fullscreen mode\n        document.documentElement.requestFullscreen();\n      }\n    });\n  }\n\n  componentDidMount() {\n    const fullscreenClass = \"fullscreen-active\";\n\n    document.onfullscreenchange = () => {\n      // Check whether fullscreen mode is activated\n      if (document.fullscreenElement) {\n        // Set the state and add the class to the body element\n        this.setState({\n          fullscreenActive: true\n        }, () => {\n          document.body.classList.add(fullscreenClass);\n        });\n      } else {\n        // Set the state and remove the class to the body element\n        this.setState({\n          fullscreenActive: false\n        }, () => {\n          document.body.classList.remove(fullscreenClass);\n        });\n      }\n    };\n  }\n\n  render() {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, __jsx(Button, _extends({\n      icon: true,\n      id: \"fullscreenTrigger\",\n      variant: \"label-info\",\n      onClick: this.handleClick\n    }, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }), __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faExpand,\n      className: \"fullscreen-icon-expand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }), __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faCompress,\n      className: \"fullscreen-icon-compress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    })), __jsx(Tooltip.Uncontrolled, {\n      placement: \"left\",\n      target: \"fullscreenTrigger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"Toggle fullscreen\"));\n  }\n\n}\n\nexport default HeaderAction;","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/sgan/front/src/components/layout/part/HeaderAction.jsx"],"names":["Button","Tooltip","ButtonGroup","FontAwesomeIcon","SolidIcon","HeaderAction","HeaderActionRadio","React","Component","buttonActive","id","setState","render","props","state","handleClick","HeaderActionFullscreen","fullscreenActive","document","exitFullscreen","documentElement","requestFullscreen","componentDidMount","fullscreenClass","onfullscreenchange","fullscreenElement","body","classList","add","remove","faExpand","faCompress"],"mappings":"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","sourcesContent":["import { Button, Tooltip, ButtonGroup } from \"@panely/components\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\"\n\nfunction HeaderAction() {\n  return (\n    <React.Fragment>\n      <HeaderActionRadio />\n      <HeaderActionFullscreen className=\"ml-2\" />\n    </React.Fragment>\n  )\n}\n\nclass HeaderActionRadio extends React.Component {\n  state = {\n    // Default active button\n    buttonActive: \"today\"\n  }\n\n  // Handle click event for each buttons\n  handleClick = id => {\n    this.setState({ buttonActive: id })\n  }\n\n  render() {\n    return (\n      <ButtonGroup {...this.props}>\n        <Button\n          active={this.state.buttonActive === \"today\"}\n          onClick={() => this.handleClick(\"today\")}\n          variant=\"flat-primary\"\n        >\n          Today\n        </Button>\n        <Button\n          active={this.state.buttonActive === \"week\"}\n          onClick={() => this.handleClick(\"week\")}\n          variant=\"flat-primary\"\n        >\n          Week\n        </Button>\n        <Button\n          active={this.state.buttonActive === \"month\"}\n          onClick={() => this.handleClick(\"month\")}\n          variant=\"flat-primary\"\n        >\n          Month\n        </Button>\n      </ButtonGroup>\n    )\n  }\n}\n\nclass HeaderActionFullscreen extends React.Component {\n  state = { fullscreenActive: false }\n\n  // Handle click event\n  handleClick = () => {\n    if (this.state.fullscreenActive) {\n      // Exit from fullscreen mode\n      document.exitFullscreen()\n    } else {\n      // Activating fullscreen mode\n      document.documentElement.requestFullscreen()\n    }\n  }\n\n  componentDidMount() {\n    const fullscreenClass = \"fullscreen-active\"\n\n    document.onfullscreenchange = () => {\n      // Check whether fullscreen mode is activated\n      if (document.fullscreenElement) {\n        // Set the state and add the class to the body element\n        this.setState({ fullscreenActive: true }, () => {\n          document.body.classList.add(fullscreenClass)\n        })\n      } else {\n        // Set the state and remove the class to the body element\n        this.setState({ fullscreenActive: false }, () => {\n          document.body.classList.remove(fullscreenClass)\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Button\n          icon\n          id=\"fullscreenTrigger\"\n          variant=\"label-info\"\n          onClick={this.handleClick}\n          {...this.props}\n        >\n          <FontAwesomeIcon icon={SolidIcon.faExpand} className=\"fullscreen-icon-expand\" />\n          <FontAwesomeIcon icon={SolidIcon.faCompress} className=\"fullscreen-icon-compress\" />\n        </Button>\n        <Tooltip.Uncontrolled placement=\"left\" target=\"fullscreenTrigger\">\n          Toggle fullscreen\n        </Tooltip.Uncontrolled>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default HeaderAction\n"]},"metadata":{},"sourceType":"module"}