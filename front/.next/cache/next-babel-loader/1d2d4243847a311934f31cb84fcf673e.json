{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Row, Col, Alert, Portlet, Container } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport withLayout from \"components/layout/withLayout\";\nimport withAuth from \"components/firebase/firebaseWithAuth\";\nimport Head from \"next/head\";\n\nvar AlertPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(AlertPage, _React$Component);\n\n  var _super = _createSuper(AlertPage);\n\n  function AlertPage() {\n    _classCallCheck(this, AlertPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AlertPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set header title\n      this.props.pageChangeHeaderTitle(\"Alert\"); // Set breadcrumb data\n\n      this.props.breadcrumbChange([{\n        text: \"Dashboard\",\n        link: \"/\"\n      }, {\n        text: \"Elements\"\n      }, {\n        text: \"Base\"\n      }, {\n        text: \"Alert\",\n        link: \"/elements/base/alert\"\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Alert | Panely\")), __jsx(Container, {\n        fluid: true\n      }, __jsx(Row, null, __jsx(Col, {\n        xs: \"12\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Basic\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, __jsx(\"strong\", null, \"Alerts\"), \" are available for any length of text, as well as an optional dismiss button. For proper styling, use one of the eight\", \" \", __jsx(\"strong\", null, \"required\"), \" contextual classes\"), __jsx(Row, null, __jsx(Col, {\n        md: \"4\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Solid\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Use \", __jsx(\"code\", null, \"variant\"), \" property to apply contextual colors\"), __jsx(Alert, {\n        variant: \"primary\"\n      }, \"Primary\"), __jsx(Alert, {\n        variant: \"secondary\"\n      }, \"Secondary\"), __jsx(Alert, {\n        variant: \"info\"\n      }, \"Info\"), __jsx(Alert, {\n        variant: \"warning\"\n      }, \"Warning\"), __jsx(Alert, {\n        variant: \"danger\"\n      }, \"Danger\"), __jsx(Alert, {\n        variant: \"success\"\n      }, \"Success\"), __jsx(Alert, {\n        variant: \"dark\"\n      }, \"Dark\"), __jsx(Alert, {\n        variant: \"light\",\n        className: \"mb-0\"\n      }, \"Light\")))), __jsx(Col, {\n        md: \"4\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Solid\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Fill \", __jsx(\"code\", null, \"variant\"), \" property with \", __jsx(\"code\", null, \"outline-(color)\"), \" to apply these variants\"), __jsx(Alert, {\n        variant: \"outline-primary\"\n      }, \"Primary\"), __jsx(Alert, {\n        variant: \"outline-secondary\"\n      }, \"Secondary\"), __jsx(Alert, {\n        variant: \"outline-info\"\n      }, \"Info\"), __jsx(Alert, {\n        variant: \"outline-warning\"\n      }, \"Warning\"), __jsx(Alert, {\n        variant: \"outline-danger\"\n      }, \"Danger\"), __jsx(Alert, {\n        variant: \"outline-success\"\n      }, \"Success\"), __jsx(Alert, {\n        variant: \"outline-dark\"\n      }, \"Dark\"), __jsx(Alert, {\n        variant: \"outline-light\",\n        className: \"mb-0\"\n      }, \"Light\")))), __jsx(Col, {\n        md: \"4\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Solid\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Fill \", __jsx(\"code\", null, \"variant\"), \" property with \", __jsx(\"code\", null, \"label-(color)\"), \" to apply these variants\"), __jsx(Alert, {\n        variant: \"label-primary\"\n      }, \"Primary\"), __jsx(Alert, {\n        variant: \"label-secondary\"\n      }, \"Secondary\"), __jsx(Alert, {\n        variant: \"label-info\"\n      }, \"Info\"), __jsx(Alert, {\n        variant: \"label-warning\"\n      }, \"Warning\"), __jsx(Alert, {\n        variant: \"label-danger\"\n      }, \"Danger\"), __jsx(Alert, {\n        variant: \"label-success\"\n      }, \"Success\"), __jsx(Alert, {\n        variant: \"label-dark\"\n      }, \"Dark\"), __jsx(Alert, {\n        variant: \"label-light\",\n        className: \"mb-0\"\n      }, \"Light\"))))))))), __jsx(Row, null, __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Links\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Use the \", __jsx(\"code\", null, \"Alert.Link\"), \" component to quickly provide matching colored links within any alert.\"), __jsx(Alert, {\n        variant: \"primary\"\n      }, \"A simple alert with \", __jsx(Alert.Link, {\n        href: \"#\"\n      }, \"an example link\"), \". Give it a click if you like.\"), __jsx(Alert, {\n        variant: \"outline-secondary\"\n      }, \"A simple alert with \", __jsx(Alert.Link, {\n        href: \"#\"\n      }, \"an example link\"), \". Give it a click if you like.\"), __jsx(Alert, {\n        variant: \"label-success\",\n        className: \"mb-0\"\n      }, \"A simple alert with \", __jsx(Alert.Link, {\n        href: \"#\"\n      }, \"an example link\"), \". Give it a click if you like.\"))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Additional content\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Alerts can also contain additional HTML elements like headings, paragraphs and dividers.\"), __jsx(Alert, {\n        variant: \"success\"\n      }, __jsx(Alert.Header, null, \"Well done!\"), __jsx(\"p\", {\n        className: \"mb-0\"\n      }, \"Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.\")), __jsx(Alert, {\n        variant: \"outline-success\",\n        className: \"mb-0\"\n      }, __jsx(Alert.Header, null, \"Well done!\"), __jsx(\"p\", null, \"Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.\"), __jsx(\"hr\", null), __jsx(\"p\", {\n        className: \"mb-0\"\n      }, \"Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\"))))), __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Icon\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"If you want to put icon into alert element, you can use \", __jsx(\"code\", null, \"icon\"), \" \", \"property and fill it with your icon.\"), __jsx(Alert, {\n        variant: \"primary\",\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faArchive\n        })\n      }, \"A simple primary alert with \", __jsx(Alert.Link, {\n        href: \"#\"\n      }, \"an example link\"), \". Give it a click if you like.\"), __jsx(Alert, {\n        variant: \"outline-secondary\",\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faWrench\n        })\n      }, \"A simple primary alert with \", __jsx(Alert.Link, {\n        href: \"#\"\n      }, \"an example link\"), \". Give it a click if you like.\"), __jsx(Alert, {\n        variant: \"label-success\",\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faStar\n        })\n      }, \"A simple primary alert with \", __jsx(Alert.Link, {\n        href: \"#\"\n      }, \"an example link\"), \". Give it a click if you like.\"))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Dismissible alert\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"It\\u2019s possible to dismiss any alert inline. For the most basic use-case an uncontrolled component can provide the functionality wanted without the need to manage/control the state of the component. \", __jsx(\"code\", null, \"Alert.Uncontrolled\"), \" does not require \", __jsx(\"code\", null, \"isOpen\"), \" nor \", __jsx(\"code\", null, \"toggle\"), \" props to work.\"), __jsx(AlertControlled, null), __jsx(Alert.Uncontrolled, {\n        fade: true,\n        variant: \"outline-warning\"\n      }, \"Holy guacamole! You should check in on some of those fields below.\"), __jsx(Alert.Uncontrolled, {\n        fade: true,\n        variant: \"label-secondary\",\n        className: \"mb-0\",\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faCog\n        })\n      }, __jsx(Alert.Header, null, \"Well done!\"), __jsx(\"p\", null, \"Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.\"), __jsx(\"hr\", null), __jsx(\"p\", {\n        className: \"mb-0\"\n      }, \"Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\"))))))));\n    }\n  }]);\n\n  return AlertPage;\n}(React.Component); // Controlled Alert example\n\n\nvar AlertControlled = /*#__PURE__*/function (_React$Component2) {\n  _inherits(AlertControlled, _React$Component2);\n\n  var _super2 = _createSuper(AlertControlled);\n\n  function AlertControlled() {\n    var _this;\n\n    _classCallCheck(this, AlertControlled);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super2.call.apply(_super2, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      _this.setState({\n        isOpen: !_this.state.isOpen\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(AlertControlled, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Alert, {\n        isOpen: this.state.isOpen,\n        toggle: this.toggle,\n        variant: \"success\",\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faStar\n        }),\n        fade: true\n      }, \"Holy guacamole! You should check in on some of those fields below.\");\n    }\n  }]);\n\n  return AlertControlled;\n}(React.Component);\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle: pageChangeHeaderTitle,\n    breadcrumbChange: breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withAuth(withLayout(AlertPage)));","map":null,"metadata":{},"sourceType":"module"}