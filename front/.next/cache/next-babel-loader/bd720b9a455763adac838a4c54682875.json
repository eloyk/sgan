{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\template\\\\src\\\\modules\\\\components\\\\DropdownToggle.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { Reference } from \"react-popper\";\nimport { DropdownContext } from \"./DropdownContext\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport Button from \"./Button\";\nconst propTypes = {\n  \"aria-haspopup\": PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: refPropType,\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  onClick: PropTypes.func,\n  variant: PropTypes.string,\n  active: PropTypes.bool,\n  caret: PropTypes.bool,\n  split: PropTypes.bool,\n  tag: tagPropType,\n  nav: PropTypes.bool\n};\nconst defaultProps = {\n  \"aria-haspopup\": true,\n  variant: \"primary\"\n};\n\nclass DropdownToggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e) {\n    if (this.props.disabled || this.context.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.nav && !this.props.tag) {\n      e.preventDefault();\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    this.context.toggle(e);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      className,\n      cssModule,\n      innerRef,\n      disabled,\n      children,\n      onClick,\n      variant,\n      active,\n      caret,\n      split,\n      tag,\n      nav\n    } = _this$props,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"cssModule\", \"innerRef\", \"disabled\", \"children\", \"onClick\", \"variant\", \"active\", \"caret\", \"split\", \"tag\", \"nav\"]);\n\n    const ariaLabel = attributes[\"aria-label\"] || \"Toggle Dropdown\";\n    const classes = mapToCssModules(classNames({\n      \"dropdown-toggle\": caret || split,\n      \"dropdown-toggle-split\": split,\n      \"nav-link\": nav,\n      active: active\n    }, className), cssModule);\n    let Tag;\n\n    if (nav && !tag) {\n      Tag = \"a\";\n      attributes.href = \"#\";\n    } else if (!tag) {\n      Tag = Button;\n      attributes.variant = variant;\n      attributes.cssModule = cssModule;\n    } else {\n      Tag = tag;\n    }\n\n    return __jsx(Reference, {\n      innerRef: innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, ({\n      ref\n    }) => __jsx(Tag, _extends({}, attributes, {\n      [typeof Tag === \"string\" ? \"ref\" : \"innerRef\"]: ref\n    }, {\n      className: classes,\n      onClick: this.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }), typeof children !== \"undefined\" ? children : __jsx(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, ariaLabel)));\n  }\n\n}\n\nDropdownToggle.propTypes = propTypes;\nDropdownToggle.defaultProps = defaultProps;\nDropdownToggle.contextType = DropdownContext;\nexport default DropdownToggle;","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/modules/components/DropdownToggle.jsx"],"names":["React","PropTypes","classNames","Reference","DropdownContext","mapToCssModules","tagPropType","refPropType","Button","propTypes","bool","className","string","cssModule","object","innerRef","disabled","children","node","onClick","func","variant","active","caret","split","tag","nav","defaultProps","DropdownToggle","Component","constructor","props","bind","e","context","preventDefault","toggle","render","attributes","ariaLabel","classes","Tag","href","ref","contextType"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,WAAvC,QAA0D,SAA1D;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,SAAS,GAAG;AAChB,mBAAiBR,SAAS,CAACS,IADX;AAEhBC,EAAAA,SAAS,EAAEV,SAAS,CAACW,MAFL;AAGhBC,EAAAA,SAAS,EAAEZ,SAAS,CAACa,MAHL;AAIhBC,EAAAA,QAAQ,EAAER,WAJM;AAKhBS,EAAAA,QAAQ,EAAEf,SAAS,CAACS,IALJ;AAMhBO,EAAAA,QAAQ,EAAEhB,SAAS,CAACiB,IANJ;AAOhBC,EAAAA,OAAO,EAAElB,SAAS,CAACmB,IAPH;AAQhBC,EAAAA,OAAO,EAAEpB,SAAS,CAACW,MARH;AAShBU,EAAAA,MAAM,EAAErB,SAAS,CAACS,IATF;AAUhBa,EAAAA,KAAK,EAAEtB,SAAS,CAACS,IAVD;AAWhBc,EAAAA,KAAK,EAAEvB,SAAS,CAACS,IAXD;AAYhBe,EAAAA,GAAG,EAAEnB,WAZW;AAahBoB,EAAAA,GAAG,EAAEzB,SAAS,CAACS;AAbC,CAAlB;AAgBA,MAAMiB,YAAY,GAAG;AACnB,mBAAiB,IADE;AAEnBN,EAAAA,OAAO,EAAE;AAFU,CAArB;;AAKA,MAAMO,cAAN,SAA6B5B,KAAK,CAAC6B,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKZ,OAAL,GAAe,KAAKA,OAAL,CAAaa,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDb,EAAAA,OAAO,CAACc,CAAD,EAAI;AACT,QAAI,KAAKF,KAAL,CAAWf,QAAX,IAAuB,KAAKkB,OAAL,CAAalB,QAAxC,EAAkD;AAChDiB,MAAAA,CAAC,CAACE,cAAF;AACA;AACD;;AAED,QAAI,KAAKJ,KAAL,CAAWL,GAAX,IAAkB,CAAC,KAAKK,KAAL,CAAWN,GAAlC,EAAuC;AACrCQ,MAAAA,CAAC,CAACE,cAAF;AACD;;AAED,QAAI,KAAKJ,KAAL,CAAWZ,OAAf,EAAwB;AACtB,WAAKY,KAAL,CAAWZ,OAAX,CAAmBc,CAAnB;AACD;;AAED,SAAKC,OAAL,CAAaE,MAAb,CAAoBH,CAApB;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,wBAcI,KAAKN,KAdT;AAAA,UAAM;AACJpB,MAAAA,SADI;AAEJE,MAAAA,SAFI;AAGJE,MAAAA,QAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,QALI;AAMJE,MAAAA,OANI;AAOJE,MAAAA,OAPI;AAQJC,MAAAA,MARI;AASJC,MAAAA,KATI;AAUJC,MAAAA,KAVI;AAWJC,MAAAA,GAXI;AAYJC,MAAAA;AAZI,KAAN;AAAA,UAaKY,UAbL;;AAgBA,UAAMC,SAAS,GAAGD,UAAU,CAAC,YAAD,CAAV,IAA4B,iBAA9C;AACA,UAAME,OAAO,GAAGnC,eAAe,CAC7BH,UAAU,CACR;AACE,yBAAmBqB,KAAK,IAAIC,KAD9B;AAEE,+BAAyBA,KAF3B;AAGE,kBAAYE,GAHd;AAIEJ,MAAAA,MAAM,EAAEA;AAJV,KADQ,EAORX,SAPQ,CADmB,EAU7BE,SAV6B,CAA/B;AAaA,QAAI4B,GAAJ;;AAEA,QAAIf,GAAG,IAAI,CAACD,GAAZ,EAAiB;AACfgB,MAAAA,GAAG,GAAG,GAAN;AACAH,MAAAA,UAAU,CAACI,IAAX,GAAkB,GAAlB;AACD,KAHD,MAGO,IAAI,CAACjB,GAAL,EAAU;AACfgB,MAAAA,GAAG,GAAGjC,MAAN;AACA8B,MAAAA,UAAU,CAACjB,OAAX,GAAqBA,OAArB;AACAiB,MAAAA,UAAU,CAACzB,SAAX,GAAuBA,SAAvB;AACD,KAJM,MAIA;AACL4B,MAAAA,GAAG,GAAGhB,GAAN;AACD;;AAED,WACE,MAAC,SAAD;AAAW,MAAA,QAAQ,EAAEV,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAE4B,MAAAA;AAAF,KAAD,KACC,MAAC,GAAD,eACML,UADN,EAEM;AAAE,OAAC,OAAOG,GAAP,KAAe,QAAf,GAA0B,KAA1B,GAAkC,UAAnC,GAAgDE;AAAlD,KAFN;AAGE,MAAA,SAAS,EAAEH,OAHb;AAIE,MAAA,OAAO,EAAE,KAAKrB,OAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMG,OAAOF,QAAP,KAAoB,WAApB,GACCA,QADD,GAGC;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2BsB,SAA3B,CATJ,CAFJ,CADF;AAkBD;;AAtF0C;;AAyF7CX,cAAc,CAACnB,SAAf,GAA2BA,SAA3B;AACAmB,cAAc,CAACD,YAAf,GAA8BA,YAA9B;AACAC,cAAc,CAACgB,WAAf,GAA6BxC,eAA7B;AAEA,eAAewB,cAAf","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport classNames from \"classnames\"\nimport { Reference } from \"react-popper\"\nimport { DropdownContext } from \"./DropdownContext\"\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\"\nimport Button from \"./Button\"\n\nconst propTypes = {\n  \"aria-haspopup\": PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: refPropType,\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  onClick: PropTypes.func,\n  variant: PropTypes.string,\n  active: PropTypes.bool,\n  caret: PropTypes.bool,\n  split: PropTypes.bool,\n  tag: tagPropType,\n  nav: PropTypes.bool\n}\n\nconst defaultProps = {\n  \"aria-haspopup\": true,\n  variant: \"primary\"\n}\n\nclass DropdownToggle extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.onClick = this.onClick.bind(this)\n  }\n\n  onClick(e) {\n    if (this.props.disabled || this.context.disabled) {\n      e.preventDefault()\n      return\n    }\n\n    if (this.props.nav && !this.props.tag) {\n      e.preventDefault()\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e)\n    }\n\n    this.context.toggle(e)\n  }\n\n  render() {\n    const {\n      className,\n      cssModule,\n      innerRef,\n      disabled,\n      children,\n      onClick,\n      variant,\n      active,\n      caret,\n      split,\n      tag,\n      nav,\n      ...attributes\n    } = this.props\n\n    const ariaLabel = attributes[\"aria-label\"] || \"Toggle Dropdown\"\n    const classes = mapToCssModules(\n      classNames(\n        {\n          \"dropdown-toggle\": caret || split,\n          \"dropdown-toggle-split\": split,\n          \"nav-link\": nav,\n          active: active\n        },\n        className\n      ),\n      cssModule\n    )\n\n    let Tag\n\n    if (nav && !tag) {\n      Tag = \"a\"\n      attributes.href = \"#\"\n    } else if (!tag) {\n      Tag = Button\n      attributes.variant = variant\n      attributes.cssModule = cssModule\n    } else {\n      Tag = tag\n    }\n\n    return (\n      <Reference innerRef={innerRef}>\n        {({ ref }) => (\n          <Tag\n            {...attributes}\n            {...{ [typeof Tag === \"string\" ? \"ref\" : \"innerRef\"]: ref }}\n            className={classes}\n            onClick={this.onClick}\n          >\n            {typeof children !== \"undefined\" ? (\n              children\n            ) : (\n              <span className=\"sr-only\">{ariaLabel}</span>\n            )}\n          </Tag>\n        )}\n      </Reference>\n    )\n  }\n}\n\nDropdownToggle.propTypes = propTypes\nDropdownToggle.defaultProps = defaultProps\nDropdownToggle.contextType = DropdownContext\n\nexport default DropdownToggle\n"]},"metadata":{},"sourceType":"module"}