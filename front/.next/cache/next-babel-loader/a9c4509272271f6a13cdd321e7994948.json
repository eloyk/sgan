{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Row, Col, Button, Spinner, Portlet, Container } from \"@panely/components\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport withLayout from \"components/layout/withLayout\";\nimport withAuth from \"components/firebase/firebaseWithAuth\";\nimport Head from \"next/head\";\n\nvar SpinnerPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(SpinnerPage, _React$Component);\n\n  var _super = _createSuper(SpinnerPage);\n\n  function SpinnerPage() {\n    _classCallCheck(this, SpinnerPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SpinnerPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set header title\n      this.props.pageChangeHeaderTitle(\"Spinner\"); // Set breadcrumb data\n\n      this.props.breadcrumbChange([{\n        text: \"Dashboard\",\n        link: \"/\"\n      }, {\n        text: \"Elements\"\n      }, {\n        text: \"Base\"\n      }, {\n        text: \"Spinner\",\n        link: \"/elements/base/spinner\"\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Spinner | Panely\")), __jsx(Container, {\n        fluid: true\n      }, __jsx(Row, null, __jsx(Col, {\n        xs: \"12\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Basic\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, __jsx(\"strong\", null, \"Spinners\"), \" can be used to show the loading state in your projects. You can customize the color with text color utilities\"), __jsx(Row, null, __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, {\n        className: \"mb-md-0\"\n      }, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Border spinner\")), __jsx(Portlet.Body, null, __jsx(Spinner, {\n        variant: \"primary\"\n      }), __jsx(Spinner, {\n        variant: \"secondary\"\n      }), __jsx(Spinner, {\n        variant: \"success\"\n      }), __jsx(Spinner, {\n        variant: \"danger\"\n      }), __jsx(Spinner, {\n        variant: \"warning\"\n      }), __jsx(Spinner, {\n        variant: \"info\"\n      }), __jsx(Spinner, {\n        variant: \"light\"\n      }), __jsx(Spinner, {\n        variant: \"dark\"\n      })))), __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, {\n        className: \"mb-0\"\n      }, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Growing spinner\")), __jsx(Portlet.Body, null, __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"primary\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"secondary\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"success\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"danger\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"warning\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"info\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"light\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        variant: \"dark\"\n      }))))))))), __jsx(Row, null, __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Sizing\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Using \", __jsx(\"code\", null, \"size\"), \" property to make a smaller spinner or, use custom CSS or inline styles to change the dimensions as needed.\"), __jsx(Spinner, {\n        size: \"sm\"\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        size: \"sm\"\n      }), __jsx(Spinner, {\n        style: {\n          width: \"3rem\",\n          height: \"3rem\"\n        }\n      }), __jsx(Spinner, {\n        type: \"grow\",\n        style: {\n          width: \"3rem\",\n          height: \"3rem\"\n        }\n      })))), __jsx(Col, {\n        md: \"6\"\n      }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Title, null, \"Buttons\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Use spinners within buttons to indicate an action is currently processing or taking place\"), __jsx(Button, {\n        disabled: true\n      }, __jsx(Spinner, {\n        size: \"sm\"\n      })), \" \", __jsx(Button, {\n        disabled: true\n      }, __jsx(Spinner, {\n        size: \"sm\"\n      }), \" Loading...\"), \" \", __jsx(Button, {\n        disabled: true\n      }, __jsx(Spinner, {\n        type: \"grow\",\n        size: \"sm\"\n      })), \" \", __jsx(Button, {\n        disabled: true\n      }, __jsx(Spinner, {\n        type: \"grow\",\n        size: \"sm\"\n      }), \" Loading...\")))))));\n    }\n  }]);\n\n  return SpinnerPage;\n}(React.Component);\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle: pageChangeHeaderTitle,\n    breadcrumbChange: breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withAuth(withLayout(SpinnerPage)));","map":null,"metadata":{},"sourceType":"module"}