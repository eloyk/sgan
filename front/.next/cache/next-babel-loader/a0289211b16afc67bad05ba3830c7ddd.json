{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { mapToCssModules } from \"./utils\";\nimport Button from \"./Button\";\nvar defaultProps = {\n  defaultValue: false\n};\n\nvar ButtonToggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(ButtonToggle, _React$Component);\n\n  var _super = _createSuper(ButtonToggle);\n\n  function ButtonToggle(props) {\n    var _this;\n\n    _classCallCheck(this, ButtonToggle);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      toggled: props.defaultValue,\n      focus: false\n    };\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ButtonToggle, [{\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n\n      this.setState({\n        focus: false\n      });\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n\n      this.setState({\n        focus: true\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n\n      this.setState(function (_ref) {\n        var toggled = _ref.toggled;\n        return {\n          toggled: !toggled\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          attributes = _objectWithoutProperties(_this$props, [\"className\"]);\n\n      var classes = mapToCssModules(classNames(className, {\n        focus: this.state.focus\n      }), this.props.cssModule);\n      return __jsx(Button, _extends({\n        active: this.state.toggled,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        onClick: this.onClick,\n        className: classes\n      }, attributes));\n    }\n  }]);\n\n  return ButtonToggle;\n}(React.Component);\n\nButtonToggle.defaultProps = defaultProps;\nexport default ButtonToggle;","map":null,"metadata":{},"sourceType":"module"}