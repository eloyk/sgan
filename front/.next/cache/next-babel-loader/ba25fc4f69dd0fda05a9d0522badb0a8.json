{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext, createContext } from \"react\";\nimport { firebaseClient } from \"./firebaseClient\";\nimport nookies from \"nookies\"; // Set authentication context\n\nvar AuthContext = /*#__PURE__*/createContext({\n  user: null\n});\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  useEffect(function () {\n    // Set Cookie when firebase authentication token is changed\n    return firebaseClient.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var cookieExpireIn, token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cookieExpireIn = 30 * 24 * 60 * 60; // Check whether user has logged in\n\n                if (user) {\n                  _context.next = 6;\n                  break;\n                }\n\n                setUser(null); // Remove token from cookie\n\n                nookies.set(null, \"token\", \"\", {\n                  maxAge: cookieExpireIn\n                });\n                _context.next = 11;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return user.getIdToken();\n\n              case 8:\n                token = _context.sent;\n                setUser(user); // Store token to cookie\n\n                nookies.set(null, \"token\", token, {\n                  maxAge: cookieExpireIn\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []); // Force refresh the token every 10 minutes\n\n  useEffect(function () {\n    var handle = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var user;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              user = firebaseClient.auth().currentUser;\n\n              if (!user) {\n                _context2.next = 4;\n                break;\n              }\n\n              _context2.next = 4;\n              return user.getIdToken(true);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })), 10 * 60 * 1000);\n    return function () {\n      return clearInterval(handle);\n    };\n  }, []);\n  return __jsx(AuthContext.Provider, {\n    value: {\n      user: user\n    }\n  }, children);\n}\nexport var useAuth = function useAuth() {\n  return useContext(AuthContext);\n};","map":null,"metadata":{},"sourceType":"module"}