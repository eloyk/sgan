{"ast":null,"code":"// import {\n//   Row,\n//   Col,\n//   Form,\n//   Label,\n//   Input,\n//   Button,\n//   Portlet,\n//   Spinner,\n//   Container,\n//   CustomInput,\n//   FloatLabel,\n//   Widget12\n// } from \"@panely/components\"\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n// import { useForm, Controller } from \"react-hook-form\"\n// import { firebaseClient } from \"components/firebase/firebaseClient\"\n// import { yupResolver } from \"@hookform/resolvers\"\n// import * as SolidIcon from \"@fortawesome/free-solid-svg-icons\"\n// import * as yup from \"yup\"\n// import verifyCookie from \"components/firebase/firebaseVerifyCookie\"\n// import withLayout from \"components/layout/withLayout\"\n// import swalContent from \"sweetalert2-react-content\"\n// import Router from \"next/router\"\n// import Swal from \"@panely/sweetalert2\"\n// import Link from \"next/link\"\n// import Head from \"next/head\"\n// import PAGE from \"config/page.config\"\n// // Use SweetAlert React Content library\n// const ReactSwal = swalContent(Swal)\n// // Set SweetAlert options\n// const swal = ReactSwal.mixin({\n//   customClass: {\n//     confirmButton: \"btn btn-label-success btn-wide mx-1\",\n//     cancelButton: \"btn btn-label-danger btn-wide mx-1\"\n//   },\n//   buttonsStyling: false\n// })\n// function RegisterPage() {\n//   return (\n//     <React.Fragment>\n//       <Head>\n//         <title>Register | Panely</title>\n//       </Head>\n//       <Container fluid>\n//         <Row noGutters className=\"align-items-center justify-content-center h-100\">\n//           <Col sm=\"8\" md=\"6\" lg=\"4\">\n//             {/* BEGIN Portlet */}\n//             <Portlet>\n//               <Portlet.Body>\n//                 <div className=\"text-center mt-2 mb-4\">\n//                   {/* BEGIN Widget */}\n//                   <Widget12 display circle variant=\"label-primary\" className=\"mb-4\">\n//                     <FontAwesomeIcon icon={SolidIcon.faUserAlt} />\n//                   </Widget12>\n//                   {/* END Widget */}\n//                 </div>\n//                 <RegisterForm />\n//               </Portlet.Body>\n//             </Portlet>\n//             {/* END Portlet */}\n//           </Col>\n//         </Row>\n//       </Container>\n//     </React.Fragment>\n//   )\n// }\n// function RegisterForm() {\n//   // Loading state\n//   const [loading, setLoading] = React.useState(false)\n//   // Define Yup schema for form validation\n//   const schema = yup.object().shape({\n//     firstName: yup\n//       .string()\n//       .min(5, \"Please enter at least 5 characters\")\n//       .required(\"Please enter your lastname\"),\n//     lastName: yup\n//       .string()\n//       .min(5, \"Please enter at least 5 characters\")\n//       .required(\"Please enter your lastname\"),\n//     email: yup\n//       .string()\n//       .email(\"Your email is not valid\")\n//       .required(\"Please enter your email\"),\n//     password: yup\n//       .string()\n//       .min(6, \"Please enter at least 6 characters\")\n//       .required(\"Please provide your password\"),\n//     passwordRepeat: yup\n//       .string()\n//       .min(6, \"Please enter at least 6 characters\")\n//       .oneOf([yup.ref(\"password\")], \"Your password not match\")\n//       .required(\"Please repeat your password\"),\n//     agreement: yup\n//       .boolean()\n//       .oneOf([true], \"You must accept the agreement\")\n//   })\n//   const { control, handleSubmit, errors } = useForm({\n//     // Apply Yup as resolver for react-hook-form\n//     resolver: yupResolver(schema),\n//     // Define the default values for all input forms\n//     defaultValues: {\n//       firstName: \"\",\n//       lastName: \"\",\n//       email: \"\",\n//       password: \"\",\n//       passwordRepeat: \"\",\n//       agreement: false,\n//     }\n//   })\n//   // Handle form submit event\n//   const onSubmit = async ({ firstName, lastName, email, password }) => {\n//     // Show loading indicator\n//     setLoading(true)\n//     // Trying to register user account to firebase\n//     await firebaseClient\n//       .auth()\n//       .createUserWithEmailAndPassword(email, password)\n//       .then(() => {\n//         // Trying to login with the user account that been registered before\n//         return firebaseClient\n//           .auth()\n//           .signInWithEmailAndPassword(email, password)\n//           .then(() => {\n//             const user = firebaseClient.auth().currentUser\n//             // Trying to update user name\n//             return user.updateProfile({\n//               displayName: `${firstName} ${lastName}`\n//             }).then(() => {\n//               // Set the user login credential data\n//               const credential = firebaseClient.auth.EmailAuthProvider.credential(\n//                 user.email,\n//                 password\n//               )\n//               // Trying to reauthenticate user account\n//               return user.reauthenticateWithCredential(credential).then(() => {\n//                 // Redirect to dashboard page\n//                 Router.push(Router.query.redirect || PAGE.dashboardPagePath)\n//               }).catch(err => {\n//                 // Show the error message if reauthentication is failed\n//                 swal.fire({ text: err.message, icon: \"error\" })\n//               })\n//             }).catch(err => {\n//               // Show the error message if update user data is failed\n//               swal.fire({ text: err.message, icon: \"error\" })\n//             })\n//           })\n//           .catch(err => {\n//             // Show the error message if login is failed\n//             swal.fire({ text: err.message, icon: \"error\" })\n//           })\n//       })\n//       .catch(err => {\n//         // Show the error message if register is failed\n//         swal.fire({ text: err.message, icon: \"error\" })\n//       })\n//     // Hide loading indicator\n//     setLoading(false)\n//   }\n//   return (\n//     <Form onSubmit={handleSubmit(onSubmit)}>\n//       <Row>\n//         <Col xs=\"6\">\n//           {/* BEGIN Form Group */}\n//           <Form.Group>\n//             <FloatLabel size=\"lg\">\n//               <Controller\n//                 as={Input}\n//                 size=\"lg\"\n//                 type=\"text\"\n//                 id=\"first-name\"\n//                 name=\"firstName\"\n//                 control={control}\n//                 invalid={Boolean(errors.firstName)}\n//                 placeholder=\"Insert your firstname\"\n//               />\n//               <Label for=\"first-name\">First name</Label>\n//               {errors.firstName && <Form.Feedback children={errors.firstName.message} />}\n//             </FloatLabel>\n//           </Form.Group>\n//           {/* END Form Group */}\n//         </Col>\n//         <Col xs=\"6\">\n//           {/* BEGIN Form Group */}\n//           <Form.Group>\n//             <FloatLabel size=\"lg\">\n//               <Controller\n//                 as={Input}\n//                 size=\"lg\"\n//                 type=\"text\"\n//                 id=\"last-name\"\n//                 name=\"lastName\"\n//                 control={control}\n//                 invalid={Boolean(errors.lastName)}\n//                 placeholder=\"Insert your lastname\"\n//               />\n//               <Label for=\"last-name\">last name</Label>\n//               {errors.lastName && <Form.Feedback children={errors.lastName.message} />}\n//             </FloatLabel>\n//           </Form.Group>\n//           {/* END Form Group */}\n//         </Col>\n//       </Row>\n//       {/* BEGIN Form Group */}\n//       <Form.Group>\n//         <FloatLabel size=\"lg\">\n//           <Controller\n//             as={Input}\n//             type=\"email\"\n//             id=\"email\"\n//             name=\"email\"\n//             size=\"lg\"\n//             control={control}\n//             invalid={Boolean(errors.email)}\n//             placeholder=\"Please insert your email\"\n//           />\n//           <Label for=\"email\">Email</Label>\n//           {errors.email && <Form.Feedback children={errors.email.message} />}\n//         </FloatLabel>\n//       </Form.Group>\n//       {/* END Form Group */}\n//       {/* BEGIN Form Group */}\n//       <Form.Group>\n//         <FloatLabel size=\"lg\">\n//           <Controller\n//             as={Input}\n//             size=\"lg\"\n//             type=\"password\"\n//             id=\"password\"\n//             name=\"password\"\n//             control={control}\n//             invalid={Boolean(errors.password)}\n//             placeholder=\"Please provide your password\"\n//           />\n//           <Label for=\"password\">Password</Label>\n//           {errors.password && <Form.Feedback children={errors.password.message} />}\n//         </FloatLabel>\n//       </Form.Group>\n//       {/* END Form Group */}\n//       {/* BEGIN Form Group */}\n//       <Form.Group>\n//         <FloatLabel size=\"lg\">\n//           <Controller\n//             as={Input}\n//             size=\"lg\"\n//             type=\"password\"\n//             id=\"passwordRepeat\"\n//             name=\"passwordRepeat\"\n//             control={control}\n//             invalid={Boolean(errors.passwordRepeat)}\n//             placeholder=\"Repeat your password\"\n//           />\n//           <Label for=\"passwordRepeat\">Confirm password</Label>\n//           {errors.passwordRepeat && <Form.Feedback children={errors.passwordRepeat.message} />}\n//         </FloatLabel>\n//       </Form.Group>\n//       {/* END Form Group */}\n//       <div className=\"d-flex align-items-center justify-content-between mb-3\">\n//         {/* BEGIN Form Group */}\n//         <Form.Group className=\"mb-0\">\n//           <Controller\n//             control={control}\n//             name=\"agreement\"\n//             render={({ onChange, onBlur, value, name, ref }) => (\n//               <CustomInput\n//                 type=\"checkbox\"\n//                 size=\"lg\"\n//                 id=\"agreement\"\n//                 label=\"Accept agreement\"\n//                 invalid={Boolean(errors.agreement)}\n//                 onBlur={onBlur}\n//                 onChange={e => onChange(e.target.checked)}\n//                 checked={value}\n//                 innerRef={ref}\n//               />\n//             )}\n//           />\n//         </Form.Group>\n//         {/* END Form Group */}\n//       </div>\n//       <div className=\"d-flex align-items-center justify-content-between\">\n//         <span>\n//           Already have an account ? <Link href=\"/login\">Sign In</Link>\n//         </span>\n//         <Button type=\"submit\" variant=\"label-primary\" size=\"lg\" width=\"widest\" disabled={loading}>\n//           {loading ? <Spinner className=\"mr-2\" /> : null} Register\n//         </Button>\n//       </div>\n//     </Form>\n//   )\n// }\n// RegisterPage.getInitialProps = async ctx => {\n//   const result = await verifyCookie(ctx)\n//   // Redirect to dashboard page if the user has logged in\n//   if (result) {\n//     if (ctx.res) {\n//       ctx.res.writeHead(302, { Location: ctx.query.redirect || PAGE.dashboardPagePath })\n//       ctx.res.end()\n//     } else {\n//       Router.push(Router.query.redirect || PAGE.dashboardPagePath)\n//     }\n//   }\n//   return { firebase: null }\n// }\n// export default withLayout(RegisterPage, \"blank\")","map":null,"metadata":{},"sourceType":"script"}