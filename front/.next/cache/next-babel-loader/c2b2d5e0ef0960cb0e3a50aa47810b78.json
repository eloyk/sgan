{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, warnOnce, tagPropType, refPropType } from \"./utils\";\nconst defaultProps = {\n  type: \"text\"\n};\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getRef = this.getRef.bind(this);\n    this.focus = this.focus.bind(this);\n  }\n\n  getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  }\n\n  focus() {\n    if (this.ref) {\n      this.ref.focus();\n    }\n  }\n\n  render() {\n    let _this$props = this.props,\n        {\n      className,\n      cssModule,\n      plainText,\n      innerRef,\n      invalid,\n      valid,\n      addon,\n      size,\n      type,\n      tag\n    } = _this$props,\n        attributes = _objectWithoutProperties(_this$props, [\"className\", \"cssModule\", \"plainText\", \"innerRef\", \"invalid\", \"valid\", \"addon\", \"size\", \"type\", \"tag\"]);\n\n    const checkInput = [\"radio\", \"checkbox\"].indexOf(type) > -1;\n    const isNotaNumber = new RegExp(\"\\\\D\", \"g\");\n    const fileInput = type === \"file\";\n    const textareaInput = type === \"textarea\";\n    const selectInput = type === \"select\";\n    const rangeInput = type === \"range\";\n    let Tag = tag || (selectInput || textareaInput ? type : \"input\");\n    let formControlClass = \"form-control\";\n\n    if (plainText) {\n      formControlClass = `${formControlClass}-plaintext`;\n      Tag = tag || \"input\";\n    } else if (fileInput) {\n      formControlClass = `${formControlClass}-file`;\n    } else if (rangeInput) {\n      formControlClass = `${formControlClass}-range`;\n    } else if (checkInput) {\n      if (addon) {\n        formControlClass = null;\n      } else {\n        formControlClass = \"form-check-input\";\n      }\n    }\n\n    const classes = mapToCssModules(classNames(formControlClass, size ? `form-control-${size}` : false, invalid && \"is-invalid\", valid && \"is-valid\", className), cssModule);\n\n    if (Tag === \"input\" || tag && typeof tag === \"function\") {\n      attributes.type = type;\n    }\n\n    if (attributes.children && !(plainText || type === \"select\" || typeof Tag !== \"string\" || Tag === \"select\")) {\n      warnOnce(`Input with a type of \"${type}\" cannot have children. Please use \"value\"/\"defaultValue\" instead.`);\n      delete attributes.children;\n    }\n\n    return __jsx(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      \"aria-invalid\": invalid\n    }));\n  }\n\n}\n\nInput.defaultProps = defaultProps;\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}