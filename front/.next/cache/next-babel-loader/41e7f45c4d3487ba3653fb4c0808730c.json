{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Badge, Button, Avatar, GridNav, Portlet, Dropdown, RichList, Widget13 } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { bindActionCreators } from \"redux\";\nimport { firebaseClient } from \"components/firebase/firebaseClient\";\nimport { firebaseChange } from \"store/actions\";\nimport { connect } from \"react-redux\";\nimport * as RegularIcon from \"@fortawesome/free-regular-svg-icons\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport verifyCookie from \"components/firebase/firebaseVerifyCookie\";\nimport swalContent from \"sweetalert2-react-content\";\nimport SimpleBar from \"simplebar\";\nimport Router from \"next/router\";\nimport Swal from \"@panely/sweetalert2\";\nimport PAGE from \"config/page.config\"; // Use SweetAlert React Content library\n\nconst ReactSwal = swalContent(Swal); // Set SweetAlert options\n\nconst swal = ReactSwal.mixin({\n  customClass: {\n    confirmButton: \"btn btn-label-success btn-wide mx-1\",\n    cancelButton: \"btn btn-label-danger btn-wide mx-1\"\n  },\n  buttonsStyling: false\n});\n\nclass HeaderUser extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      avatar: () => __jsx(Avatar, {\n        variant: \"label-light\",\n        display: true,\n        circle: true\n      }, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faUserAlt\n      })),\n      name: \"Guest\",\n      email: \"No email\",\n      count: 6,\n      navs: [[{\n        icon: () => __jsx(FontAwesomeIcon, {\n          icon: RegularIcon.faAddressCard\n        }),\n        title: \"Profile\"\n      }, {\n        icon: () => __jsx(FontAwesomeIcon, {\n          icon: RegularIcon.faComments\n        }),\n        title: \"Messages\"\n      }, {\n        icon: () => __jsx(FontAwesomeIcon, {\n          icon: RegularIcon.faClone\n        }),\n        title: \"Activities\"\n      }], [{\n        icon: () => __jsx(FontAwesomeIcon, {\n          icon: RegularIcon.faCalendarCheck\n        }),\n        title: \"Tasks\"\n      }, {\n        icon: () => __jsx(FontAwesomeIcon, {\n          icon: RegularIcon.faStickyNote\n        }),\n        title: \"Notes\"\n      }, {\n        icon: () => __jsx(FontAwesomeIcon, {\n          icon: RegularIcon.faBell\n        }),\n        title: \"Notification\"\n      }]]\n    });\n\n    _defineProperty(this, \"handleSignOut\", () => {\n      // Try to signing out\n      firebaseClient.auth().signOut().then(() => {\n        // Redirect to login page and remove firebase data from state management\n        this.props.firebaseChange(null);\n        Router.push(PAGE.loginPagePath);\n      }).catch(err => {\n        // Show error message with SweetAlert\n        swal.fire({\n          text: err.message,\n          icon: \"error\"\n        });\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.firebase !== prevProps.firebase) {\n      // Check whether user has logged in\n      if (this.props.firebase) {\n        const {\n          name,\n          email\n        } = this.props.firebase; // Set the component state\n\n        this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n          name,\n          email\n        }));\n      }\n    }\n  }\n\n  render() {\n    const {\n      avatar: WidgetAvatar,\n      name,\n      email,\n      count,\n      navs\n    } = this.state;\n\n    const _this$props = this.props,\n          {\n      dispatch,\n      firebase,\n      firebaseChange\n    } = _this$props,\n          attributes = _objectWithoutProperties(_this$props, [\"dispatch\", \"firebase\", \"firebaseChange\"]);\n\n    return __jsx(Dropdown.Uncontrolled, attributes, __jsx(Widget13, {\n      dropdown: true,\n      variant: \"flat-primary\"\n    }, __jsx(Widget13.Text, null, \"Hi \", __jsx(\"strong\", null, \"User\")), __jsx(Widget13.Avatar, {\n      variant: \"info\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faUserAlt\n    }))), __jsx(Dropdown.Menu, {\n      wide: true,\n      right: true,\n      animated: true,\n      className: \"overflow-hidden py-0\"\n    }, __jsx(Portlet, {\n      scroll: true,\n      className: \"border-0\"\n    }, __jsx(Portlet.Header, {\n      className: \"bg-primary rounded-0\"\n    }, __jsx(RichList.Item, {\n      className: \"w-100 p-0\"\n    }, __jsx(RichList.Addon, {\n      addonType: \"prepend\"\n    }, __jsx(WidgetAvatar, null)), __jsx(RichList.Content, null, __jsx(RichList.Title, {\n      className: \"text-white\",\n      children: name\n    }), __jsx(RichList.Subtitle, {\n      className: \"text-white\",\n      children: email\n    })), __jsx(RichList.Addon, {\n      addonType: \"append\"\n    }, __jsx(Badge, {\n      variant: \"warning\",\n      shape: \"square\",\n      size: \"lg\",\n      children: count\n    })))), __jsx(Portlet.Body, {\n      className: \"p-0\"\n    }, __jsx(GridNav, {\n      flush: true,\n      action: true,\n      noRounded: true\n    }, navs.map((nav, index) => __jsx(GridNav.Row, {\n      key: index\n    }, nav.map((data, index) => {\n      const {\n        icon: Icon,\n        title\n      } = data;\n      return __jsx(GridNav.Item, {\n        key: index,\n        icon: __jsx(Icon, null),\n        children: title\n      });\n    }))))), __jsx(Portlet.Footer, {\n      bordered: true,\n      className: \"rounded-0\"\n    }, __jsx(Button, {\n      variant: \"label-danger\",\n      onClick: this.handleSignOut\n    }, \"Sign out\")))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    firebase: state.firebase\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    firebaseChange\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderUser);","map":null,"metadata":{},"sourceType":"module"}