{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\template\\\\src\\\\modules\\\\components\\\\Avatar.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport AvatarDisplay from \"./AvatarDisplay\";\nimport AvatarAddon from \"./AvatarAddon\";\nimport AvatarIcon from \"./AvatarIcon\";\nimport AvatarBadge from \"./AvatarBadge\";\nconst propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  innerRef: refPropType,\n  display: PropTypes.bool,\n  variant: PropTypes.string,\n  circle: PropTypes.bool,\n  size: PropTypes.oneOf([\"sm\", \"lg\"]),\n  tag: tagPropType\n};\nconst defaultProps = {\n  tag: \"div\"\n};\n\nconst Avatar = props => {\n  const {\n    className,\n    cssModule,\n    children,\n    innerRef,\n    display,\n    variant,\n    circle,\n    size,\n    tag: Tag\n  } = props,\n        attributes = _objectWithoutProperties(props, [\"className\", \"cssModule\", \"children\", \"innerRef\", \"display\", \"variant\", \"circle\", \"size\", \"tag\"]);\n\n  const classes = mapToCssModules(classNames(\"avatar\", `avatar-${variant}`, {\n    \"avatar-circle\": circle,\n    [`avatar-${size}`]: size\n  }, className), cssModule);\n\n  if (display) {\n    return __jsx(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }), __jsx(AvatarDisplay, {\n      tag: Tag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, children));\n  } else {\n    return __jsx(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }), children);\n  }\n};\n\nAvatar.propTypes = propTypes;\nAvatar.defaultProps = defaultProps;\nAvatar.Display = AvatarDisplay;\nAvatar.Addon = AvatarAddon;\nAvatar.Icon = AvatarIcon;\nAvatar.Badge = AvatarBadge;\nexport default Avatar;","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/modules/components/Avatar.jsx"],"names":["React","PropTypes","classNames","mapToCssModules","tagPropType","refPropType","AvatarDisplay","AvatarAddon","AvatarIcon","AvatarBadge","propTypes","className","string","cssModule","object","children","node","innerRef","display","bool","variant","circle","size","oneOf","tag","defaultProps","Avatar","props","Tag","attributes","classes","Display","Addon","Icon","Badge"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,WAAvC,QAA0D,SAA1D;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAEV,SAAS,CAACW,MADL;AAEhBC,EAAAA,SAAS,EAAEZ,SAAS,CAACa,MAFL;AAGhBC,EAAAA,QAAQ,EAAEd,SAAS,CAACe,IAHJ;AAIhBC,EAAAA,QAAQ,EAAEZ,WAJM;AAKhBa,EAAAA,OAAO,EAAEjB,SAAS,CAACkB,IALH;AAMhBC,EAAAA,OAAO,EAAEnB,SAAS,CAACW,MANH;AAOhBS,EAAAA,MAAM,EAAEpB,SAAS,CAACkB,IAPF;AAQhBG,EAAAA,IAAI,EAAErB,SAAS,CAACsB,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB,CARU;AAShBC,EAAAA,GAAG,EAAEpB;AATW,CAAlB;AAYA,MAAMqB,YAAY,GAAG;AACnBD,EAAAA,GAAG,EAAE;AADc,CAArB;;AAIA,MAAME,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAM;AACJhB,IAAAA,SADI;AAEJE,IAAAA,SAFI;AAGJE,IAAAA,QAHI;AAIJE,IAAAA,QAJI;AAKJC,IAAAA,OALI;AAMJE,IAAAA,OANI;AAOJC,IAAAA,MAPI;AAQJC,IAAAA,IARI;AASJE,IAAAA,GAAG,EAAEI;AATD,MAWFD,KAXJ;AAAA,QAUKE,UAVL,4BAWIF,KAXJ;;AAaA,QAAMG,OAAO,GAAG3B,eAAe,CAC7BD,UAAU,CACR,QADQ,EAEP,UAASkB,OAAQ,EAFV,EAGR;AACE,qBAAiBC,MADnB;AAEE,KAAE,UAASC,IAAK,EAAhB,GAAoBA;AAFtB,GAHQ,EAORX,SAPQ,CADmB,EAU7BE,SAV6B,CAA/B;;AAaA,MAAIK,OAAJ,EAAa;AACX,WACE,MAAC,GAAD,eAASW,UAAT;AAAqB,MAAA,GAAG,EAAEZ,QAA1B;AAAoC,MAAA,SAAS,EAAEa,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,MAAC,aAAD;AAAe,MAAA,GAAG,EAAEF,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0Bb,QAA1B,CADF,CADF;AAKD,GAND,MAMO;AACL,WACE,MAAC,GAAD,eAASc,UAAT;AAAqB,MAAA,GAAG,EAAEZ,QAA1B;AAAoC,MAAA,SAAS,EAAEa,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGf,QADH,CADF;AAKD;AACF,CAxCD;;AA0CAW,MAAM,CAAChB,SAAP,GAAmBA,SAAnB;AACAgB,MAAM,CAACD,YAAP,GAAsBA,YAAtB;AAEAC,MAAM,CAACK,OAAP,GAAiBzB,aAAjB;AACAoB,MAAM,CAACM,KAAP,GAAezB,WAAf;AACAmB,MAAM,CAACO,IAAP,GAAczB,UAAd;AACAkB,MAAM,CAACQ,KAAP,GAAezB,WAAf;AAEA,eAAeiB,MAAf","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport classNames from \"classnames\"\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\"\nimport AvatarDisplay from \"./AvatarDisplay\"\nimport AvatarAddon from \"./AvatarAddon\"\nimport AvatarIcon from \"./AvatarIcon\"\nimport AvatarBadge from \"./AvatarBadge\"\n\nconst propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  innerRef: refPropType,\n  display: PropTypes.bool,\n  variant: PropTypes.string,\n  circle: PropTypes.bool,\n  size: PropTypes.oneOf([\"sm\", \"lg\"]),\n  tag: tagPropType\n}\n\nconst defaultProps = {\n  tag: \"div\"\n}\n\nconst Avatar = props => {\n  const {\n    className,\n    cssModule,\n    children,\n    innerRef,\n    display,\n    variant,\n    circle,\n    size,\n    tag: Tag,\n    ...attributes\n  } = props\n\n  const classes = mapToCssModules(\n    classNames(\n      \"avatar\",\n      `avatar-${variant}`,\n      {\n        \"avatar-circle\": circle,\n        [`avatar-${size}`]: size\n      },\n      className\n    ),\n    cssModule\n  )\n\n  if (display) {\n    return (\n      <Tag {...attributes} ref={innerRef} className={classes}>\n        <AvatarDisplay tag={Tag}>{children}</AvatarDisplay>\n      </Tag>\n    )\n  } else {\n    return (\n      <Tag {...attributes} ref={innerRef} className={classes}>\n        {children}\n      </Tag>\n    )\n  }\n}\n\nAvatar.propTypes = propTypes\nAvatar.defaultProps = defaultProps\n\nAvatar.Display = AvatarDisplay\nAvatar.Addon = AvatarAddon\nAvatar.Icon = AvatarIcon\nAvatar.Badge = AvatarBadge\n\nexport default Avatar\n"]},"metadata":{},"sourceType":"module"}