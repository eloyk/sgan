{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\sgan\\\\front\\\\src\\\\modules\\\\components\\\\ModalHeader.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, tagPropType } from \"./utils\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nconst propTypes = {\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  bordered: PropTypes.bool,\n  wrapTag: tagPropType,\n  toggle: PropTypes.func,\n  close: PropTypes.object,\n  tag: tagPropType\n};\nconst defaultProps = {\n  tag: \"h5\",\n  wrapTag: \"div\",\n  closeAriaLabel: \"Close\"\n};\n\nconst ModalHeader = props => {\n  let closeButton;\n\n  const {\n    closeAriaLabel,\n    cssModule,\n    className,\n    children,\n    bordered,\n    wrapTag: WrapTag,\n    toggle,\n    close,\n    tag: Tag\n  } = props,\n        attributes = _objectWithoutProperties(props, [\"closeAriaLabel\", \"cssModule\", \"className\", \"children\", \"bordered\", \"wrapTag\", \"toggle\", \"close\", \"tag\"]);\n\n  const classes = mapToCssModules(classNames(\"modal-header\", {\n    \"modal-header-bordered\": bordered\n  }, className), cssModule);\n  const closeButtonClasses = mapToCssModules(classNames(\"btn\", \"btn-icon\", \"btn-label-danger\"), cssModule);\n  const titleClasses = mapToCssModules(classNames(\"modal-title\"), cssModule);\n\n  if (!close && toggle) {\n    closeButton = __jsx(\"button\", {\n      type: \"button\",\n      onClick: toggle,\n      className: closeButtonClasses,\n      \"aria-label\": closeAriaLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, __jsx(FontAwesomeIcon, {\n      icon: faTimes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return __jsx(WrapTag, _extends({}, attributes, {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), __jsx(Tag, {\n    className: titleClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, children), close || closeButton);\n};\n\nModalHeader.propTypes = propTypes;\nModalHeader.defaultProps = defaultProps;\nexport default ModalHeader;","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/sgan/front/src/modules/components/ModalHeader.jsx"],"names":["React","PropTypes","classNames","mapToCssModules","tagPropType","faTimes","FontAwesomeIcon","propTypes","closeAriaLabel","string","cssModule","object","className","children","node","bordered","bool","wrapTag","toggle","func","close","tag","defaultProps","ModalHeader","props","closeButton","WrapTag","Tag","attributes","classes","closeButtonClasses","titleClasses"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,SAA7C;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,cAAc,EAAEP,SAAS,CAACQ,MADV;AAEhBC,EAAAA,SAAS,EAAET,SAAS,CAACU,MAFL;AAGhBC,EAAAA,SAAS,EAAEX,SAAS,CAACQ,MAHL;AAIhBI,EAAAA,QAAQ,EAAEZ,SAAS,CAACa,IAJJ;AAKhBC,EAAAA,QAAQ,EAAEd,SAAS,CAACe,IALJ;AAMhBC,EAAAA,OAAO,EAAEb,WANO;AAOhBc,EAAAA,MAAM,EAAEjB,SAAS,CAACkB,IAPF;AAQhBC,EAAAA,KAAK,EAAEnB,SAAS,CAACU,MARD;AAShBU,EAAAA,GAAG,EAAEjB;AATW,CAAlB;AAYA,MAAMkB,YAAY,GAAG;AACnBD,EAAAA,GAAG,EAAE,IADc;AAEnBJ,EAAAA,OAAO,EAAE,KAFU;AAGnBT,EAAAA,cAAc,EAAE;AAHG,CAArB;;AAMA,MAAMe,WAAW,GAAGC,KAAK,IAAI;AAC3B,MAAIC,WAAJ;;AAEA,QAAM;AACJjB,IAAAA,cADI;AAEJE,IAAAA,SAFI;AAGJE,IAAAA,SAHI;AAIJC,IAAAA,QAJI;AAKJE,IAAAA,QALI;AAMJE,IAAAA,OAAO,EAAES,OANL;AAOJR,IAAAA,MAPI;AAQJE,IAAAA,KARI;AASJC,IAAAA,GAAG,EAAEM;AATD,MAWFH,KAXJ;AAAA,QAUKI,UAVL,4BAWIJ,KAXJ;;AAaA,QAAMK,OAAO,GAAG1B,eAAe,CAC7BD,UAAU,CAAC,cAAD,EAAiB;AAAE,6BAAyBa;AAA3B,GAAjB,EAAwDH,SAAxD,CADmB,EAE7BF,SAF6B,CAA/B;AAIA,QAAMoB,kBAAkB,GAAG3B,eAAe,CACxCD,UAAU,CAAC,KAAD,EAAQ,UAAR,EAAoB,kBAApB,CAD8B,EAExCQ,SAFwC,CAA1C;AAIA,QAAMqB,YAAY,GAAG5B,eAAe,CAACD,UAAU,CAAC,aAAD,CAAX,EAA4BQ,SAA5B,CAApC;;AAEA,MAAI,CAACU,KAAD,IAAUF,MAAd,EAAsB;AACpBO,IAAAA,WAAW,GACT;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAEP,MAFX;AAGE,MAAA,SAAS,EAAEY,kBAHb;AAIE,oBAAYtB,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,MAAC,eAAD;AAAiB,MAAA,IAAI,EAAEH,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD;;AAED,SACE,MAAC,OAAD,eAAauB,UAAb;AAAyB,IAAA,SAAS,EAAEC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAEE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BlB,QAA/B,CADF,EAEGO,KAAK,IAAIK,WAFZ,CADF;AAMD,CA7CD;;AA+CAF,WAAW,CAAChB,SAAZ,GAAwBA,SAAxB;AACAgB,WAAW,CAACD,YAAZ,GAA2BA,YAA3B;AAEA,eAAeC,WAAf","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport classNames from \"classnames\"\nimport { mapToCssModules, tagPropType } from \"./utils\"\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nconst propTypes = {\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  bordered: PropTypes.bool,\n  wrapTag: tagPropType,\n  toggle: PropTypes.func,\n  close: PropTypes.object,\n  tag: tagPropType\n}\n\nconst defaultProps = {\n  tag: \"h5\",\n  wrapTag: \"div\",\n  closeAriaLabel: \"Close\"\n}\n\nconst ModalHeader = props => {\n  let closeButton\n\n  const {\n    closeAriaLabel,\n    cssModule,\n    className,\n    children,\n    bordered,\n    wrapTag: WrapTag,\n    toggle,\n    close,\n    tag: Tag,\n    ...attributes\n  } = props\n\n  const classes = mapToCssModules(\n    classNames(\"modal-header\", { \"modal-header-bordered\": bordered }, className),\n    cssModule\n  )\n  const closeButtonClasses = mapToCssModules(\n    classNames(\"btn\", \"btn-icon\", \"btn-label-danger\"),\n    cssModule\n  )\n  const titleClasses = mapToCssModules(classNames(\"modal-title\"), cssModule)\n\n  if (!close && toggle) {\n    closeButton = (\n      <button\n        type=\"button\"\n        onClick={toggle}\n        className={closeButtonClasses}\n        aria-label={closeAriaLabel}\n      >\n        <FontAwesomeIcon icon={faTimes} />\n      </button>\n    )\n  }\n\n  return (\n    <WrapTag {...attributes} className={classes}>\n      <Tag className={titleClasses}>{children}</Tag>\n      {close || closeButton}\n    </WrapTag>\n  )\n}\n\nModalHeader.propTypes = propTypes\nModalHeader.defaultProps = defaultProps\n\nexport default ModalHeader\n"]},"metadata":{},"sourceType":"module"}