{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { bindActionCreators } from \"redux\";\nimport { currentUserChange } from \"store/actions\";\nimport { connect } from \"react-redux\";\nimport verifyCurrentUserPrueba from \"components/firebase/verifyCurrentUserPrueba\";\nimport verifyCurrentUser from \"components/firebase/verifyCurrentUser\";\nimport Router from \"next/router\";\nimport PAGE from \"config/page.config\";\n\nfunction WithAuth(AuthComponent) {\n  class Authentication extends React.Component {\n    static async getInitialProps(ctx) {\n      let initialProps = {}; // Get initial properties\n\n      if (AuthComponent.getInitialProps) {\n        initialProps = await AuthComponent.getInitialProps(ctx);\n      } //const result = await verifyCurrentUserPrueba(ctx)\n      //console.log('Este es el resultado del Iniciar session:' + result)\n      // Verify cookie\n\n\n      const result = await verifyCurrentUser(ctx);\n      console.log('Este es el resultado del Iniciar session:' + result); // Check cookie is valid or not\n\n      if (!result) {\n        // Redirect to login page\n        if (ctx.res) {\n          ctx.res.writeHead(302, {\n            Location: PAGE.loginPagePath\n          });\n          ctx.res.end();\n        } else {\n          Router.push(PAGE.loginPagePath);\n        }\n\n        return _objectSpread(_objectSpread({}, initialProps), {}, {\n          user: null\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, initialProps), {}, {\n        user: result\n      });\n    }\n\n    componentDidMount() {\n      this.props.currentUserChange(this.props.user);\n    }\n\n    render() {\n      return __jsx(AuthComponent, this.props);\n    }\n\n  }\n\n  function mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n      currentUserChange\n    }, dispatch);\n  }\n\n  return connect(null, mapDispatchToProps)(Authentication);\n}\n\nexport default WithAuth;","map":null,"metadata":{},"sourceType":"module"}