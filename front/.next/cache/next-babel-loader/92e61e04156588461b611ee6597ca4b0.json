{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport classNames from \"classnames\";\nimport { Popper as ReactPopper } from \"react-popper\";\nimport { getTarget, targetPropType, mapToCssModules, DOMElement, tagPropType } from \"./utils\";\nimport Fade from \"./Fade\";\n\nfunction noop() {}\n\nconst defaultProps = {\n  boundariesElement: \"scrollParent\",\n  placement: \"auto\",\n  hideArrow: false,\n  isOpen: false,\n  offset: 0,\n  fallbackPlacement: \"flip\",\n  flip: true,\n  container: \"body\",\n  modifiers: {},\n  onClosed: noop,\n  fade: true,\n  transition: _objectSpread({}, Fade.defaultProps)\n};\n\nclass PopperContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setTargetNode = this.setTargetNode.bind(this);\n    this.getTargetNode = this.getTargetNode.bind(this);\n    this.getRef = this.getRef.bind(this);\n    this.onClosed = this.onClosed.bind(this);\n    this.state = {\n      isOpen: props.isOpen\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.isOpen && !state.isOpen) {\n      return {\n        isOpen: props.isOpen\n      };\n    } else return null;\n  }\n\n  componentDidUpdate() {\n    if (this._element && this._element.childNodes && this._element.childNodes[0] && this._element.childNodes[0].focus) {\n      this._element.childNodes[0].focus();\n    }\n  }\n\n  setTargetNode(node) {\n    this.targetNode = typeof node === \"string\" ? getTarget(node) : node;\n  }\n\n  getTargetNode() {\n    return this.targetNode;\n  }\n\n  getContainerNode() {\n    return getTarget(this.props.container);\n  }\n\n  getRef(ref) {\n    this._element = ref;\n  }\n\n  onClosed() {\n    this.props.onClosed();\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  renderChildren() {\n    const _this$props = this.props,\n          {\n      cssModule,\n      children,\n      isOpen,\n      flip,\n      target,\n      offset,\n      fallbackPlacement,\n      placementPrefix,\n      arrowClassName: _arrowClassName,\n      hideArrow,\n      popperClassName: _popperClassName,\n      tag,\n      container,\n      modifiers,\n      boundariesElement,\n      onClosed,\n      fade,\n      transition,\n      placement\n    } = _this$props,\n          attrs = _objectWithoutProperties(_this$props, [\"cssModule\", \"children\", \"isOpen\", \"flip\", \"target\", \"offset\", \"fallbackPlacement\", \"placementPrefix\", \"arrowClassName\", \"hideArrow\", \"popperClassName\", \"tag\", \"container\", \"modifiers\", \"boundariesElement\", \"onClosed\", \"fade\", \"transition\", \"placement\"]);\n\n    const arrowClassName = mapToCssModules(classNames(\"arrow\", _arrowClassName), cssModule);\n    const popperClassName = mapToCssModules(classNames(_popperClassName, placementPrefix ? `${placementPrefix}-auto` : \"\"), this.props.cssModule);\n\n    const extendedModifiers = _objectSpread({\n      offset: {\n        offset\n      },\n      flip: {\n        enabled: flip,\n        behavior: fallbackPlacement\n      },\n      preventOverflow: {\n        boundariesElement\n      }\n    }, modifiers);\n\n    const popperTransition = _objectSpread(_objectSpread(_objectSpread({}, Fade.defaultProps), transition), {}, {\n      baseClass: fade ? transition.baseClass : \"\",\n      timeout: fade ? transition.timeout : 0\n    });\n\n    return __jsx(Fade, _extends({}, popperTransition, attrs, {\n      in: isOpen,\n      onExited: this.onClosed,\n      tag: tag\n    }), __jsx(ReactPopper, {\n      referenceElement: this.targetNode,\n      modifiers: extendedModifiers,\n      placement: placement\n    }, ({\n      ref,\n      style,\n      placement,\n      outOfBoundaries,\n      arrowProps,\n      scheduleUpdate\n    }) => __jsx(\"div\", {\n      ref: ref,\n      style: style,\n      className: popperClassName,\n      \"x-placement\": placement,\n      \"x-out-of-boundaries\": outOfBoundaries ? \"true\" : undefined\n    }, typeof children === \"function\" ? children({\n      scheduleUpdate\n    }) : children, !hideArrow && __jsx(\"span\", {\n      ref: arrowProps.ref,\n      className: arrowClassName,\n      style: arrowProps.style\n    }))));\n  }\n\n  render() {\n    this.setTargetNode(this.props.target);\n\n    if (this.state.isOpen) {\n      return this.props.container === \"inline\" ? this.renderChildren() : /*#__PURE__*/ReactDOM.createPortal(__jsx(\"div\", {\n        ref: this.getRef\n      }, this.renderChildren()), this.getContainerNode());\n    }\n\n    return null;\n  }\n\n}\n\nPopperContent.defaultProps = defaultProps;\nexport default PopperContent;","map":null,"metadata":{},"sourceType":"module"}