{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Aside, Menu } from \"@panely/components\";\nimport { withRouter } from \"next/router\";\nimport SimpleBar from \"simplebar\";\nimport Link from \"next/link\";\nimport MENU from \"config/menu.config\";\n\nvar AsideBodyComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(AsideBodyComponent, _React$Component);\n\n  var _super = _createSuper(AsideBodyComponent);\n\n  function AsideBodyComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AsideBodyComponent);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"setInitialState\", function () {\n      var states = {};\n      var submenuActive = []; // Loop the MENU object tree\n\n      MENU.forEach(function (menu, index1) {\n        // Check whether the node has child\n        if (Boolean(menu.child)) {\n          // Add data to states variables\n          states = _this.addDataToObject(states, [index1], {\n            active: true,\n            height: \"auto\",\n            hasChild: true\n          }); // Loop the second level child node\n\n          menu.child.forEach(function (menu, index2) {\n            // Check whether the node has child\n            if (Boolean(menu.child)) {\n              // Add data to states variables\n              states = _this.addDataToObject(states, [index1, index2], {\n                active: true,\n                height: \"auto\",\n                hasChild: true\n              }); // Loop the third level child node\n\n              menu.child.forEach(function (menu, index3) {\n                // Add data to states variables\n                states = _this.addDataToObject(states, [index1, index2, index3], {\n                  active: menu.link === _this.props.router.pathname,\n                  hasChild: false\n                }); // Add data to submenuActive variables\n\n                if (menu.link === _this.props.router.pathname) {\n                  submenuActive.push([index1, index2].join(\",\"));\n                  submenuActive.push([index1].join(\",\"));\n                }\n              });\n            } else {\n              // Add data to states variables\n              states = _this.addDataToObject(states, [index1, index2], {\n                active: menu.link === _this.props.router.pathname,\n                hasChild: false\n              }); // Add data to submenuActive variables\n\n              if (menu.link === _this.props.router.pathname) {\n                submenuActive.push([index1].join(\",\"));\n              }\n            }\n          });\n        } else {\n          // Add data to states variables\n          states = _this.addDataToObject(states, [index1], {\n            active: menu.link === _this.props.router.pathname,\n            hasChild: false\n          });\n        }\n      });\n      return {\n        states: states,\n        submenuActive: submenuActive\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLinkClick\", function (selfRoute, parentRoute) {\n      var states = _this.state; // Check whether the link has child\n\n      if (states[selfRoute].hasChild) {\n        // Toggle active state\n        states[selfRoute].active = !states[selfRoute].active; // Check whether the link has parent\n\n        if (parentRoute.length > 0) {\n          var selfheight = states[selfRoute].height;\n          var parentHeight = states[parentRoute].height; // Adjust the parent elements height\n\n          if (states[selfRoute].active) {\n            states[parentRoute].height = parentHeight + selfheight;\n          } else {\n            states[parentRoute].height = parentHeight - selfheight;\n          }\n        }\n      } else {\n        // Deactivate all links\n        for (var _selfRoute in states) {\n          if (!states[_selfRoute].hasChild) {\n            states[_selfRoute].active = false;\n          }\n        } // Activate clicked link\n\n\n        states[selfRoute].active = true;\n      }\n\n      _this.setState(states);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addDataToObject\", function (object, identifier, value) {\n      return _objectSpread(_objectSpread({}, object), {}, _defineProperty({}, identifier, value));\n    });\n\n    var _this$setInitialState = _this.setInitialState(),\n        _states = _this$setInitialState.states,\n        _submenuActive = _this$setInitialState.submenuActive; // Set initial data\n\n\n    _this.linkRefs = [];\n    _this.submenuRefs = [];\n    _this.state = _states;\n    _this.submenuActive = _submenuActive;\n    _this.bodyRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(AsideBodyComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var states = this.state; // Loop submenu elements to set height and collapse it\n\n      this.submenuRefs.forEach(function (submenu) {\n        // Get submenu route\n        var selfRoute = submenu.getAttribute(\"data-route\").split(\",\"); // Set element height\n\n        states[selfRoute].height = submenu.offsetHeight; // Check whether submenu elements is active\n\n        if (_this2.submenuActive.includes(selfRoute.join(\",\"))) {\n          states[selfRoute].active = true;\n        } else {\n          states[selfRoute].active = false;\n        }\n      }); // Loop submenu elements to fix height data\n\n      this.submenuRefs.forEach(function (submenu) {\n        // Get submenu parent route\n        var parentRoute = submenu.getAttribute(\"data-route\").split(\",\");\n        parentRoute.pop(); // Check whether the submenu has parents\n\n        if (parentRoute.length > 0) {\n          var selfheight = submenu.offsetHeight;\n          var parentHeight = states[parentRoute].height; // Fix the element height\n\n          states[parentRoute].height = parentHeight - selfheight;\n        }\n      });\n      this.setState(states, function () {\n        // Initialize custom scrollbar\n        new SimpleBar(_this2.bodyRef.current);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(Aside.Body, {\n        innerRef: this.bodyRef\n      }, __jsx(Menu, null, MENU.map(function (menu, index1) {\n        // Set all variables needed\n        var Icon = menu.icon;\n        var parentRoute = [];\n        var selfRoute = [index1];\n        var hasChild = Boolean(menu.child);\n        var state = _this3.state[selfRoute]; // Check whether the node is a section\n\n        return menu.section ? __jsx(Menu.Section, {\n          key: index1,\n          children: menu.title\n        }) : __jsx(Menu.Item, {\n          key: index1\n        }, __jsx(AsideBodyMenuLink, {\n          key: index1,\n          \"data-level\": 0,\n          \"data-route\": selfRoute,\n          link: menu.link,\n          icon: Icon ? __jsx(Icon, null) : false,\n          addon: menu.addon,\n          bullet: menu.bullet,\n          active: state.active,\n          hasChild: hasChild,\n          onClick: function onClick() {\n            return _this3.handleLinkClick(selfRoute, parentRoute);\n          },\n          innerRef: function innerRef(ref) {\n            return _this3.linkRefs.push(ref);\n          },\n          children: menu.title\n        }), hasChild ? __jsx(Menu.Submenu, {\n          \"data-level\": 0,\n          \"data-route\": selfRoute,\n          active: state.active,\n          height: state.height,\n          innerRef: function innerRef(ref) {\n            return _this3.submenuRefs.push(ref);\n          }\n        }, menu.child.map(function (menu, index2) {\n          // Set all variables needed\n          var Icon = menu.icon;\n          var parentRoute = [index1];\n          var selfRoute = [index1, index2];\n          var hasChild = Boolean(menu.child);\n          var state = _this3.state[selfRoute];\n          return __jsx(Menu.Item, {\n            key: index2\n          }, __jsx(AsideBodyMenuLink, {\n            key: index2,\n            \"data-route\": selfRoute,\n            \"data-level\": 1,\n            link: menu.link,\n            icon: Icon ? __jsx(Icon, null) : false,\n            addon: menu.addon,\n            bullet: menu.bullet,\n            active: state.active,\n            hasChild: hasChild,\n            onClick: function onClick() {\n              return _this3.handleLinkClick(selfRoute, parentRoute);\n            },\n            innerRef: function innerRef(ref) {\n              return _this3.linkRefs.push(ref);\n            },\n            children: menu.title\n          }), hasChild ? __jsx(Menu.Submenu, {\n            \"data-level\": 1,\n            \"data-route\": selfRoute,\n            active: state.active,\n            height: state.height,\n            innerRef: function innerRef(ref) {\n              return _this3.submenuRefs.push(ref);\n            }\n          }, menu.child.map(function (menu, index3) {\n            // Set all variables needed\n            var Icon = menu.icon;\n            var parentRoute = [index1, index2];\n            var selfRoute = [index1, index2, index3];\n            var hasChild = Boolean(menu.child);\n            var state = _this3.state[selfRoute];\n            return __jsx(Menu.Item, {\n              key: index3\n            }, __jsx(AsideBodyMenuLink, {\n              key: index3,\n              \"data-route\": selfRoute,\n              \"data-level\": 2,\n              link: menu.link,\n              icon: Icon ? __jsx(Icon, null) : false,\n              addon: menu.addon,\n              bullet: menu.bullet,\n              active: state.active,\n              hasChild: hasChild,\n              onClick: function onClick() {\n                return _this3.handleLinkClick(selfRoute, parentRoute);\n              },\n              innerRef: function innerRef(ref) {\n                return _this3.linkRefs.push(ref);\n              },\n              children: menu.title\n            }));\n          })) : null);\n        })) : null);\n      })));\n    }\n  }]);\n\n  return AsideBodyComponent;\n}(React.Component);\n\nfunction AsideBodyMenuLink(props) {\n  var hasChild = props.hasChild,\n      link = props.link,\n      attributes = _objectWithoutProperties(props, [\"hasChild\", \"link\"]);\n\n  var MenuLink = React.forwardRef(function (props, ref) {\n    return __jsx(Menu.Link, _extends({}, props, {\n      innerRef: ref\n    }));\n  });\n  return hasChild ? __jsx(Menu.Link, _extends({\n    tag: \"button\"\n  }, attributes, {\n    caret: true,\n    toggle: true\n  })) : __jsx(Link, {\n    href: link,\n    passHref: true\n  }, __jsx(MenuLink, attributes));\n}\n\nexport default withRouter(AsideBodyComponent);","map":null,"metadata":{},"sourceType":"module"}