{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { TabContext } from \"./TabContext\";\nimport { mapToCssModules, omit, tagPropType } from \"./utils\";\nimport TabPane from \"./TabPane\";\nconst propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  activeTab: PropTypes.any,\n  tag: tagPropType\n};\nconst defaultProps = {\n  tag: \"div\"\n};\n\nclass Tab extends React.Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.activeTab !== nextProps.activeTab) {\n      return {\n        activeTab: nextProps.activeTab\n      };\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: this.props.activeTab\n    };\n  }\n\n  render() {\n    const {\n      className,\n      cssModule,\n      tag: Tag\n    } = this.props;\n    const attributes = omit(this.props, Object.keys(propTypes));\n    const classes = mapToCssModules(classNames(\"tab-content\", className), cssModule);\n    return __jsx(TabContext.Provider, {\n      value: {\n        activeTabId: this.state.activeTab\n      }\n    }, __jsx(Tag, _extends({}, attributes, {\n      className: classes\n    })));\n  }\n\n}\n\nTab.defaultProps = defaultProps;\nTab.Pane = TabPane;\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}