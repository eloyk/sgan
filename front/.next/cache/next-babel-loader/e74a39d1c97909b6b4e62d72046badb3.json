{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Avatar, Portlet, Dropdown, RichList, Widget11 } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { connect } from \"react-redux\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport Chart from \"@panely/apexcharts\";\n\nvar Widget23Component = /*#__PURE__*/function (_React$Component) {\n  _inherits(Widget23Component, _React$Component);\n\n  var _super = _createSuper(Widget23Component);\n\n  function Widget23Component() {\n    var _this;\n\n    _classCallCheck(this, Widget23Component);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: [{\n        avatar: function avatar() {\n          return __jsx(Avatar, {\n            display: true,\n            variant: \"label-primary\"\n          }, __jsx(FontAwesomeIcon, {\n            icon: SolidIcon.faChartLine\n          }));\n        },\n        title: \"Profit\",\n        subtitle: \"IPO, Margins, Transactions\"\n      }, {\n        avatar: function avatar() {\n          return __jsx(Avatar, {\n            display: true,\n            variant: \"label-success\"\n          }, __jsx(FontAwesomeIcon, {\n            icon: SolidIcon.faChartPie\n          }));\n        },\n        title: \"Revenue\",\n        subtitle: \"Expenses, Loses, Profits\"\n      }]\n    });\n\n    return _this;\n  }\n\n  _createClass(Widget23Component, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Icon, null, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faEuroSign\n      })), __jsx(Portlet.Title, null, \"Profit share\"), __jsx(Portlet.Addon, null, __jsx(Dropdown.Uncontrolled, null, __jsx(Dropdown.Toggle, {\n        caret: true,\n        variant: \"label-primary\"\n      }, \"Export\"), __jsx(Dropdown.Menu, {\n        right: true,\n        animated: true\n      }, __jsx(Dropdown.Item, {\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faPoll\n        })\n      }, \"Report\"), __jsx(Dropdown.Item, {\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faChartPie\n        })\n      }, \"Charts\"), __jsx(Dropdown.Item, {\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faChartLine\n        })\n      }, \"Statistics\"), __jsx(Dropdown.Divider, null), __jsx(Dropdown.Item, {\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faCog\n        })\n      }, \"Customize\"))))), __jsx(Portlet.Body, null, __jsx(RichList, {\n        className: \"flex-sm-row\"\n      }, this.state.data.map(function (data, index) {\n        var WidgetAvatar = data.avatar,\n            title = data.title,\n            subtitle = data.subtitle;\n        return __jsx(RichList.Item, {\n          key: index,\n          className: \"flex-grow-1\"\n        }, __jsx(RichList.Addon, {\n          addonType: \"prepend\"\n        }, __jsx(WidgetAvatar, null)), __jsx(RichList.Content, null, __jsx(RichList.Title, {\n          children: title\n        }), __jsx(RichList.Subtitle, {\n          children: subtitle\n        })));\n      }))), __jsx(Widget23Chart, {\n        theme: this.props.theme\n      }));\n    }\n  }]);\n\n  return Widget23Component;\n}(React.Component);\n\nvar Widget23Chart = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Widget23Chart, _React$Component2);\n\n  var _super2 = _createSuper(Widget23Chart);\n\n  function Widget23Chart() {\n    var _this2;\n\n    _classCallCheck(this, Widget23Chart);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this2), \"currency\", new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 0\n    }));\n\n    _defineProperty(_assertThisInitialized(_this2), \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: _this2.props.theme,\n          palette: \"palette1\"\n        },\n        chart: {\n          sparkline: {\n            enabled: true\n          }\n        },\n        markers: {\n          strokeColors: _this2.props.theme === \"dark\" ? \"#424242\" : \"#fff\"\n        },\n        stroke: {\n          show: false\n        },\n        tooltip: {\n          y: {\n            formatter: function formatter(val) {\n              return _this2.currency.format(val);\n            } // Format chart tooltip value\n\n          }\n        },\n        xaxis: {\n          categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"],\n          crosshairs: {\n            show: false\n          }\n        },\n        responsive: [{\n          breakpoint: 576,\n          options: {\n            chart: {\n              height: 200\n            }\n          }\n        }]\n      },\n      // Chart series data\n      series: [{\n        name: \"Profit\",\n        data: [3100, 8000, 2800, 5100, 2000, 10900, 10000]\n      }, {\n        name: \"Revenue\",\n        data: [4000, 9600, 4600, 13600, 6800, 14600, 11000]\n      }]\n    });\n\n    return _this2;\n  }\n\n  _createClass(Widget23Chart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.theme !== prevProps.theme) {\n        var newState = this.state; // Change chart options\n\n        newState.options.theme = {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        };\n        newState.options.markers.strokeColors = this.props.theme === \"dark\" ? \"#424242\" : \"#fff\";\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          options = _this$state.options,\n          series = _this$state.series;\n      return __jsx(Widget11, {\n        bottom: true\n      }, __jsx(Chart, {\n        type: \"area\",\n        options: options,\n        series: series,\n        height: 300\n      }));\n    }\n  }]);\n\n  return Widget23Chart;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    theme: state.page.theme\n  };\n}\n\nexport default connect(mapStateToProps)(Widget23Component);","map":null,"metadata":{},"sourceType":"module"}