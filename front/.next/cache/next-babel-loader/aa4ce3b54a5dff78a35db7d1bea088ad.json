{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\template\\\\src\\\\modules\\\\slick\\\\slider.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { InnerSlider } from \"./inner-slider\";\nimport json2mq from \"json2mq\";\nimport defaultProps from \"./default-props\";\nimport { canUseDOM } from \"./utils/innerSliderUtils\";\n\nconst enquire = canUseDOM() && require(\"enquire.js\");\n\nexport default class Slider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"innerSliderRefHandler\", ref => this.innerSlider = ref);\n\n    _defineProperty(this, \"slickPrev\", () => this.innerSlider.slickPrev());\n\n    _defineProperty(this, \"slickNext\", () => this.innerSlider.slickNext());\n\n    _defineProperty(this, \"slickGoTo\", (slide, dontAnimate = false) => this.innerSlider.slickGoTo(slide, dontAnimate));\n\n    _defineProperty(this, \"slickPause\", () => this.innerSlider.pause(\"paused\"));\n\n    _defineProperty(this, \"slickPlay\", () => this.innerSlider.autoPlay(\"play\"));\n\n    this.state = {\n      breakpoint: null\n    };\n    this._responsiveMediaHandlers = [];\n  }\n\n  media(query, handler) {\n    // javascript handler for  css media query\n    enquire.register(query, handler);\n\n    this._responsiveMediaHandlers.push({\n      query,\n      handler\n    });\n  } // handles responsive breakpoints\n\n\n  componentDidMount() {\n    // performance monitoring\n    //if (process.env.NODE_ENV !== 'production') {\n    //const { whyDidYouUpdate } = require('why-did-you-update')\n    //whyDidYouUpdate(React)\n    //}\n    if (this.props.responsive) {\n      let breakpoints = this.props.responsive.map(breakpt => breakpt.breakpoint); // sort them in increasing order of their numerical value\n\n      breakpoints.sort((x, y) => x - y);\n      breakpoints.forEach((breakpoint, index) => {\n        // media query for each breakpoint\n        let bQuery;\n\n        if (index === 0) {\n          bQuery = json2mq({\n            minWidth: 0,\n            maxWidth: breakpoint\n          });\n        } else {\n          bQuery = json2mq({\n            minWidth: breakpoints[index - 1] + 1,\n            maxWidth: breakpoint\n          });\n        } // when not using server side rendering\n\n\n        canUseDOM() && this.media(bQuery, () => {\n          this.setState({\n            breakpoint: breakpoint\n          });\n        });\n      }); // Register media query for full screen. Need to support resize from small to large\n      // convert javascript object to media query string\n\n      let query = json2mq({\n        minWidth: breakpoints.slice(-1)[0]\n      });\n      canUseDOM() && this.media(query, () => {\n        this.setState({\n          breakpoint: null\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._responsiveMediaHandlers.forEach(function (obj) {\n      enquire.unregister(obj.query, obj.handler);\n    });\n  }\n\n  render() {\n    var settings;\n    var newProps;\n\n    if (this.state.breakpoint) {\n      newProps = this.props.responsive.filter(resp => resp.breakpoint === this.state.breakpoint);\n      settings = newProps[0].settings === \"unslick\" ? \"unslick\" : _objectSpread(_objectSpread(_objectSpread({}, defaultProps), this.props), newProps[0].settings);\n    } else {\n      settings = _objectSpread(_objectSpread({}, defaultProps), this.props);\n    } // force scrolling by one if centerMode is on\n\n\n    if (settings.centerMode) {\n      if (settings.slidesToScroll > 1 && true) {\n        console.warn(`slidesToScroll should be equal to 1 in centerMode, you are using ${settings.slidesToScroll}`);\n      }\n\n      settings.slidesToScroll = 1;\n    } // force showing one slide and scrolling by one if the fade mode is on\n\n\n    if (settings.fade) {\n      if (settings.slidesToShow > 1 && true) {\n        console.warn(`slidesToShow should be equal to 1 when fade is true, you're using ${settings.slidesToShow}`);\n      }\n\n      if (settings.slidesToScroll > 1 && true) {\n        console.warn(`slidesToScroll should be equal to 1 when fade is true, you're using ${settings.slidesToScroll}`);\n      }\n\n      settings.slidesToShow = 1;\n      settings.slidesToScroll = 1;\n    } // makes sure that children is an array, even when there is only 1 child\n\n\n    let children = React.Children.toArray(this.props.children); // Children may contain false or null, so we should filter them\n    // children may also contain string filled with spaces (in certain cases where we use jsx strings)\n\n    children = children.filter(child => {\n      if (typeof child === \"string\") {\n        return !!child.trim();\n      }\n\n      return !!child;\n    }); // rows and slidesPerRow logic is handled here\n\n    if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {\n      console.warn(`variableWidth is not supported in case of rows > 1 or slidesPerRow > 1`);\n      settings.variableWidth = false;\n    }\n\n    let newChildren = [];\n    let currentWidth = null;\n\n    for (let i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {\n      let newSlide = [];\n\n      for (let j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {\n        let row = [];\n\n        for (let k = j; k < j + settings.slidesPerRow; k += 1) {\n          if (settings.variableWidth && children[k].props.style) {\n            currentWidth = children[k].props.style.width;\n          }\n\n          if (k >= children.length) break;\n          row.push( /*#__PURE__*/React.cloneElement(children[k], {\n            key: 100 * i + 10 * j + k,\n            tabIndex: -1,\n            style: {\n              width: `${100 / settings.slidesPerRow}%`,\n              display: \"inline-block\"\n            }\n          }));\n        }\n\n        newSlide.push(__jsx(\"div\", {\n          key: 10 * i + j,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 23\n          }\n        }, row));\n      }\n\n      if (settings.variableWidth) {\n        newChildren.push(__jsx(\"div\", {\n          key: i,\n          style: {\n            width: currentWidth\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 11\n          }\n        }, newSlide));\n      } else {\n        newChildren.push(__jsx(\"div\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 26\n          }\n        }, newSlide));\n      }\n    }\n\n    if (settings === \"unslick\") {\n      const className = \"regular slider \" + (this.props.className || \"\");\n      return __jsx(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 14\n        }\n      }, children);\n    } else if (newChildren.length <= settings.slidesToShow) {\n      settings.unslick = true;\n    }\n\n    return __jsx(InnerSlider, _extends({\n      style: this.props.style,\n      ref: this.innerSliderRefHandler\n    }, settings, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    }), newChildren);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/template/src/modules/slick/slider.jsx"],"names":["React","InnerSlider","json2mq","defaultProps","canUseDOM","enquire","require","Slider","Component","constructor","props","ref","innerSlider","slickPrev","slickNext","slide","dontAnimate","slickGoTo","pause","autoPlay","state","breakpoint","_responsiveMediaHandlers","media","query","handler","register","push","componentDidMount","responsive","breakpoints","map","breakpt","sort","x","y","forEach","index","bQuery","minWidth","maxWidth","setState","slice","componentWillUnmount","obj","unregister","render","settings","newProps","filter","resp","centerMode","slidesToScroll","console","warn","fade","slidesToShow","children","Children","toArray","child","trim","variableWidth","rows","slidesPerRow","newChildren","currentWidth","i","length","newSlide","j","row","k","style","width","cloneElement","key","tabIndex","display","className","unslick","innerSliderRefHandler"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { InnerSlider } from \"./inner-slider\"\nimport json2mq from \"json2mq\"\nimport defaultProps from \"./default-props\"\nimport { canUseDOM } from \"./utils/innerSliderUtils\"\nconst enquire = canUseDOM() && require(\"enquire.js\")\n\nexport default class Slider extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      breakpoint: null\n    }\n    this._responsiveMediaHandlers = []\n  }\n\n  innerSliderRefHandler = ref => (this.innerSlider = ref)\n\n  media(query, handler) {\n    // javascript handler for  css media query\n    enquire.register(query, handler)\n    this._responsiveMediaHandlers.push({ query, handler })\n  }\n\n  // handles responsive breakpoints\n  componentDidMount() {\n    // performance monitoring\n    //if (process.env.NODE_ENV !== 'production') {\n    //const { whyDidYouUpdate } = require('why-did-you-update')\n    //whyDidYouUpdate(React)\n    //}\n    if (this.props.responsive) {\n      let breakpoints = this.props.responsive.map(breakpt => breakpt.breakpoint)\n      // sort them in increasing order of their numerical value\n      breakpoints.sort((x, y) => x - y)\n\n      breakpoints.forEach((breakpoint, index) => {\n        // media query for each breakpoint\n        let bQuery\n        if (index === 0) {\n          bQuery = json2mq({ minWidth: 0, maxWidth: breakpoint })\n        } else {\n          bQuery = json2mq({\n            minWidth: breakpoints[index - 1] + 1,\n            maxWidth: breakpoint\n          })\n        }\n        // when not using server side rendering\n        canUseDOM() &&\n          this.media(bQuery, () => {\n            this.setState({ breakpoint: breakpoint })\n          })\n      })\n\n      // Register media query for full screen. Need to support resize from small to large\n      // convert javascript object to media query string\n      let query = json2mq({ minWidth: breakpoints.slice(-1)[0] })\n\n      canUseDOM() &&\n        this.media(query, () => {\n          this.setState({ breakpoint: null })\n        })\n    }\n  }\n\n  componentWillUnmount() {\n    this._responsiveMediaHandlers.forEach(function(obj) {\n      enquire.unregister(obj.query, obj.handler)\n    })\n  }\n\n  slickPrev = () => this.innerSlider.slickPrev()\n\n  slickNext = () => this.innerSlider.slickNext()\n\n  slickGoTo = (slide, dontAnimate = false) => this.innerSlider.slickGoTo(slide, dontAnimate)\n\n  slickPause = () => this.innerSlider.pause(\"paused\")\n\n  slickPlay = () => this.innerSlider.autoPlay(\"play\")\n\n  render() {\n    var settings\n    var newProps\n    if (this.state.breakpoint) {\n      newProps = this.props.responsive.filter(resp => resp.breakpoint === this.state.breakpoint)\n      settings =\n        newProps[0].settings === \"unslick\"\n          ? \"unslick\"\n          : { ...defaultProps, ...this.props, ...newProps[0].settings }\n    } else {\n      settings = { ...defaultProps, ...this.props }\n    }\n\n    // force scrolling by one if centerMode is on\n    if (settings.centerMode) {\n      if (settings.slidesToScroll > 1 && process.env.NODE_ENV !== \"production\") {\n        console.warn(\n          `slidesToScroll should be equal to 1 in centerMode, you are using ${settings.slidesToScroll}`\n        )\n      }\n      settings.slidesToScroll = 1\n    }\n    // force showing one slide and scrolling by one if the fade mode is on\n    if (settings.fade) {\n      if (settings.slidesToShow > 1 && process.env.NODE_ENV !== \"production\") {\n        console.warn(\n          `slidesToShow should be equal to 1 when fade is true, you're using ${settings.slidesToShow}`\n        )\n      }\n      if (settings.slidesToScroll > 1 && process.env.NODE_ENV !== \"production\") {\n        console.warn(\n          `slidesToScroll should be equal to 1 when fade is true, you're using ${settings.slidesToScroll}`\n        )\n      }\n      settings.slidesToShow = 1\n      settings.slidesToScroll = 1\n    }\n\n    // makes sure that children is an array, even when there is only 1 child\n    let children = React.Children.toArray(this.props.children)\n\n    // Children may contain false or null, so we should filter them\n    // children may also contain string filled with spaces (in certain cases where we use jsx strings)\n    children = children.filter(child => {\n      if (typeof child === \"string\") {\n        return !!child.trim()\n      }\n      return !!child\n    })\n\n    // rows and slidesPerRow logic is handled here\n    if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {\n      console.warn(`variableWidth is not supported in case of rows > 1 or slidesPerRow > 1`)\n      settings.variableWidth = false\n    }\n    let newChildren = []\n    let currentWidth = null\n    for (let i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {\n      let newSlide = []\n      for (let j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {\n        let row = []\n        for (let k = j; k < j + settings.slidesPerRow; k += 1) {\n          if (settings.variableWidth && children[k].props.style) {\n            currentWidth = children[k].props.style.width\n          }\n          if (k >= children.length) break\n          row.push(\n            React.cloneElement(children[k], {\n              key: 100 * i + 10 * j + k,\n              tabIndex: -1,\n              style: {\n                width: `${100 / settings.slidesPerRow}%`,\n                display: \"inline-block\"\n              }\n            })\n          )\n        }\n        newSlide.push(<div key={10 * i + j}>{row}</div>)\n      }\n      if (settings.variableWidth) {\n        newChildren.push(\n          <div key={i} style={{ width: currentWidth }}>\n            {newSlide}\n          </div>\n        )\n      } else {\n        newChildren.push(<div key={i}>{newSlide}</div>)\n      }\n    }\n\n    if (settings === \"unslick\") {\n      const className = \"regular slider \" + (this.props.className || \"\")\n      return <div className={className}>{children}</div>\n    } else if (newChildren.length <= settings.slidesToShow) {\n      settings.unslick = true\n    }\n    return (\n      <InnerSlider style={this.props.style} ref={this.innerSliderRefHandler} {...settings}>\n        {newChildren}\n      </InnerSlider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}