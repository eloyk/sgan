{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Portal from \"./Portal\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport AsideHeader from \"./AsideHeader\";\nimport AsideBody from \"./AsideBody\";\nimport AsideTitle from \"./AsideTitle\";\nimport AsideAddon from \"./AsideAddon\";\nvar defaultProps = {\n  desktopMinimized: false,\n  mobileMinimized: true,\n  tag: \"div\"\n};\n\nvar Aside = /*#__PURE__*/function (_React$Component) {\n  _inherits(Aside, _React$Component);\n\n  var _super = _createSuper(Aside);\n\n  function Aside(props) {\n    var _this;\n\n    _classCallCheck(this, Aside);\n\n    _this = _super.call(this, props);\n    _this.breakpoint = 1025;\n    _this.transitionDuration = 200;\n    _this.state = {\n      desktopMinimized: _this.props.desktopMinimized,\n      mobileMinimized: _this.props.mobileMinimized,\n      asideHover: false\n    };\n    _this.classes = {\n      active: \"aside-active\",\n      desktop: {\n        minimized: \"aside-desktop-minimized\",\n        maximized: \"aside-desktop-maximized\"\n      },\n      mobile: {\n        minimized: \"aside-mobile-minimized\",\n        maximized: \"aside-mobile-maximized\"\n      }\n    };\n    _this.backdropClick = _this.backdropClick.bind(_assertThisInitialized(_this));\n    _this.toggleMinimizedBodyClass = _this.toggleMinimizedBodyClass.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Aside, [{\n    key: \"toggleMinimizedBodyClass\",\n    value: function toggleMinimizedBodyClass(viewport, minimized) {\n      if (minimized) {\n        document.body.classList.add(this.classes[viewport].minimized);\n        document.body.classList.remove(this.classes[viewport].maximized);\n      } else {\n        document.body.classList.remove(this.classes[viewport].minimized);\n        document.body.classList.add(this.classes[viewport].maximized);\n      }\n    }\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick(e) {\n      var newState = this.state;\n      newState.mobileMinimized = true;\n      this.toggleMinimizedBodyClass(\"mobile\", true);\n      this.setState(newState);\n\n      if (this.props.backdropOnClick) {\n        this.props.backdropOnClick(e);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var newState = this.state;\n      document.body.classList.add(this.classes.active);\n      newState.asideHover = this.state.desktopMinimized;\n      this.toggleMinimizedBodyClass(\"desktop\", this.state.desktopMinimized);\n      this.toggleMinimizedBodyClass(\"mobile\", this.state.mobileMinimized);\n      this.setState(newState);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (this.props !== prevProps) {\n        var newState = this.state;\n\n        if (window.innerWidth >= this.breakpoint) {\n          newState.desktopMinimized = this.props.desktopMinimized;\n          this.toggleMinimizedBodyClass(\"desktop\", this.state.desktopMinimized);\n          this.setState(newState);\n\n          if (this.props.desktopMinimized) {\n            setTimeout(function () {\n              newState.asideHover = true;\n\n              _this2.setState(newState);\n            }, this.transitionDuration);\n          } else {\n            newState.asideHover = false;\n            this.setState(newState);\n          }\n        } else {\n          newState.mobileMinimized = this.props.mobileMinimized;\n          this.toggleMinimizedBodyClass(\"mobile\", this.state.mobileMinimized);\n          this.setState(newState);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var removedClasses = [this.classes.active, this.classes.desktop.minimized, this.classes.desktop.maximized, this.classes.mobile.minimized, this.classes.mobile.maximized];\n      removedClasses.forEach(function (removedClass) {\n        document.body.classList.remove(removedClass);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          desktopMinimized = _this$props.desktopMinimized,\n          mobileMinimized = _this$props.mobileMinimized,\n          backdropOnClick = _this$props.backdropOnClick,\n          className = _this$props.className,\n          cssModule = _this$props.cssModule,\n          children = _this$props.children,\n          innerRef = _this$props.innerRef,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"desktopMinimized\", \"mobileMinimized\", \"backdropOnClick\", \"className\", \"cssModule\", \"children\", \"innerRef\", \"tag\"]);\n\n      var classes = mapToCssModules(classNames(\"aside\", {\n        \"aside-hover\": this.state.asideHover\n      }, className), cssModule);\n      return __jsx(Tag, _extends({}, attributes, {\n        className: classes,\n        ref: innerRef\n      }), children, !this.state.mobileMinimized ? __jsx(Portal, null, __jsx(\"div\", {\n        id: \"aside-backdrop\",\n        onClick: this.backdropClick\n      })) : null);\n    }\n  }]);\n\n  return Aside;\n}(React.Component);\n\nAside.defaultProps = defaultProps;\nAside.Header = AsideHeader;\nAside.Body = AsideBody;\nAside.Title = AsideTitle;\nAside.Addon = AsideAddon;\nexport default Aside;","map":null,"metadata":{},"sourceType":"module"}