{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { Reference } from \"react-popper\";\nimport { DropdownContext } from \"./DropdownContext\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport Button from \"./Button\";\nvar defaultProps = {\n  \"aria-haspopup\": true,\n  variant: \"primary\"\n};\n\nvar DropdownToggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(DropdownToggle, _React$Component);\n\n  var _super = _createSuper(DropdownToggle);\n\n  function DropdownToggle(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownToggle);\n\n    _this = _super.call(this, props);\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DropdownToggle, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled || this.context.disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (this.props.nav && !this.props.tag) {\n        e.preventDefault();\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n\n      this.context.toggle(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          cssModule = _this$props.cssModule,\n          innerRef = _this$props.innerRef,\n          disabled = _this$props.disabled,\n          children = _this$props.children,\n          onClick = _this$props.onClick,\n          variant = _this$props.variant,\n          active = _this$props.active,\n          caret = _this$props.caret,\n          split = _this$props.split,\n          tag = _this$props.tag,\n          nav = _this$props.nav,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"cssModule\", \"innerRef\", \"disabled\", \"children\", \"onClick\", \"variant\", \"active\", \"caret\", \"split\", \"tag\", \"nav\"]);\n\n      var ariaLabel = attributes[\"aria-label\"] || \"Toggle Dropdown\";\n      var classes = mapToCssModules(classNames({\n        \"dropdown-toggle\": caret || split,\n        \"dropdown-toggle-split\": split,\n        \"nav-link\": nav,\n        active: active\n      }, className), cssModule);\n      var Tag;\n\n      if (nav && !tag) {\n        Tag = \"a\";\n        attributes.href = \"#\";\n      } else if (!tag) {\n        Tag = Button;\n        attributes.variant = variant;\n        attributes.cssModule = cssModule;\n      } else {\n        Tag = tag;\n      }\n\n      return __jsx(Reference, {\n        innerRef: innerRef\n      }, function (_ref) {\n        var ref = _ref.ref;\n        return __jsx(Tag, _extends({}, attributes, _defineProperty({}, typeof Tag === \"string\" ? \"ref\" : \"innerRef\", ref), {\n          className: classes,\n          onClick: _this2.onClick\n        }), typeof children !== \"undefined\" ? children : __jsx(\"span\", {\n          className: \"sr-only\"\n        }, ariaLabel));\n      });\n    }\n  }]);\n\n  return DropdownToggle;\n}(React.Component);\n\nDropdownToggle.defaultProps = defaultProps;\nDropdownToggle.contextType = DropdownContext;\nexport default DropdownToggle;","map":null,"metadata":{},"sourceType":"module"}