{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eloy\\\\Desktop\\\\sgan\\\\front\\\\src\\\\modules\\\\slick\\\\track.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport { lazyStartIndex, lazyEndIndex, getPreClones } from \"./utils/innerSliderUtils\"; // given specifications/props for a slide, fetch all the classes that need to be applied to the slide\n\nconst getSlideClasses = spec => {\n  let slickActive, slickCenter, slickCloned;\n  let centerOffset, index;\n\n  if (spec.rtl) {\n    index = spec.slideCount - 1 - spec.index;\n  } else {\n    index = spec.index;\n  }\n\n  slickCloned = index < 0 || index >= spec.slideCount;\n\n  if (spec.centerMode) {\n    centerOffset = Math.floor(spec.slidesToShow / 2);\n    slickCenter = (index - spec.currentSlide) % spec.slideCount === 0;\n\n    if (index > spec.currentSlide - centerOffset - 1 && index <= spec.currentSlide + centerOffset) {\n      slickActive = true;\n    }\n  } else {\n    slickActive = spec.currentSlide <= index && index < spec.currentSlide + spec.slidesToShow;\n  }\n\n  let focusedSlide;\n\n  if (spec.targetSlide < 0) {\n    focusedSlide = spec.targetSlide + spec.slideCount;\n  } else if (spec.targetSlide >= spec.slideCount) {\n    focusedSlide = spec.targetSlide - spec.slideCount;\n  } else {\n    focusedSlide = spec.targetSlide;\n  }\n\n  let slickCurrent = index === focusedSlide;\n  return {\n    \"slick-slide\": true,\n    \"slick-active\": slickActive,\n    \"slick-center\": slickCenter,\n    \"slick-cloned\": slickCloned,\n    \"slick-current\": slickCurrent // dubious in case of RTL\n\n  };\n};\n\nconst getSlideStyle = spec => {\n  let style = {};\n\n  if (spec.variableWidth === undefined || spec.variableWidth === false) {\n    style.width = spec.slideWidth;\n  }\n\n  if (spec.fade) {\n    style.position = \"relative\";\n\n    if (spec.vertical) {\n      style.top = -spec.index * parseInt(spec.slideHeight);\n    } else {\n      style.left = -spec.index * parseInt(spec.slideWidth);\n    }\n\n    style.opacity = spec.currentSlide === spec.index ? 1 : 0;\n\n    if (spec.useCSS) {\n      style.transition = \"opacity \" + spec.speed + \"ms \" + spec.cssEase + \", \" + \"visibility \" + spec.speed + \"ms \" + spec.cssEase;\n    }\n  }\n\n  return style;\n};\n\nconst getKey = (child, fallbackKey) => child.key || fallbackKey;\n\nconst renderSlides = spec => {\n  let key;\n  let slides = [];\n  let preCloneSlides = [];\n  let postCloneSlides = [];\n  let childrenCount = React.Children.count(spec.children);\n  let startIndex = lazyStartIndex(spec);\n  let endIndex = lazyEndIndex(spec);\n  React.Children.forEach(spec.children, (elem, index) => {\n    let child;\n    let childOnClickOptions = {\n      message: \"children\",\n      index: index,\n      slidesToScroll: spec.slidesToScroll,\n      currentSlide: spec.currentSlide\n    }; // in case of lazyLoad, whether or not we want to fetch the slide\n\n    if (!spec.lazyLoad || spec.lazyLoad && spec.lazyLoadedList.indexOf(index) >= 0) {\n      child = elem;\n    } else {\n      child = __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }\n      });\n    }\n\n    let childStyle = getSlideStyle(_objectSpread(_objectSpread({}, spec), {}, {\n      index\n    }));\n    let slideClass = child.props.className || \"\";\n    let slideClasses = getSlideClasses(_objectSpread(_objectSpread({}, spec), {}, {\n      index\n    })); // push a cloned element of the desired slide\n\n    slides.push( /*#__PURE__*/React.cloneElement(child, {\n      key: \"original\" + getKey(child, index),\n      \"data-index\": index,\n      className: classnames(slideClasses, slideClass),\n      tabIndex: \"-1\",\n      \"aria-hidden\": !slideClasses[\"slick-active\"],\n      style: _objectSpread(_objectSpread({\n        outline: \"none\"\n      }, child.props.style || {}), childStyle),\n      onClick: e => {\n        child.props && child.props.onClick && child.props.onClick(e);\n\n        if (spec.focusOnSelect) {\n          spec.focusOnSelect(childOnClickOptions);\n        }\n      }\n    })); // if slide needs to be precloned or postcloned\n\n    if (spec.infinite && spec.fade === false) {\n      let preCloneNo = childrenCount - index;\n\n      if (preCloneNo <= getPreClones(spec) && childrenCount !== spec.slidesToShow) {\n        key = -preCloneNo;\n\n        if (key >= startIndex) {\n          child = elem;\n        }\n\n        slideClasses = getSlideClasses(_objectSpread(_objectSpread({}, spec), {}, {\n          index: key\n        }));\n        preCloneSlides.push( /*#__PURE__*/React.cloneElement(child, {\n          key: \"precloned\" + getKey(child, key),\n          \"data-index\": key,\n          tabIndex: \"-1\",\n          className: classnames(slideClasses, slideClass),\n          \"aria-hidden\": !slideClasses[\"slick-active\"],\n          style: _objectSpread(_objectSpread({}, child.props.style || {}), childStyle),\n          onClick: e => {\n            child.props && child.props.onClick && child.props.onClick(e);\n\n            if (spec.focusOnSelect) {\n              spec.focusOnSelect(childOnClickOptions);\n            }\n          }\n        }));\n      }\n\n      if (childrenCount !== spec.slidesToShow) {\n        key = childrenCount + index;\n\n        if (key < endIndex) {\n          child = elem;\n        }\n\n        slideClasses = getSlideClasses(_objectSpread(_objectSpread({}, spec), {}, {\n          index: key\n        }));\n        postCloneSlides.push( /*#__PURE__*/React.cloneElement(child, {\n          key: \"postcloned\" + getKey(child, key),\n          \"data-index\": key,\n          tabIndex: \"-1\",\n          className: classnames(slideClasses, slideClass),\n          \"aria-hidden\": !slideClasses[\"slick-active\"],\n          style: _objectSpread(_objectSpread({}, child.props.style || {}), childStyle),\n          onClick: e => {\n            child.props && child.props.onClick && child.props.onClick(e);\n\n            if (spec.focusOnSelect) {\n              spec.focusOnSelect(childOnClickOptions);\n            }\n          }\n        }));\n      }\n    }\n  });\n\n  if (spec.rtl) {\n    return preCloneSlides.concat(slides, postCloneSlides).reverse();\n  } else {\n    return preCloneSlides.concat(slides, postCloneSlides);\n  }\n};\n\nexport class Track extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"node\", null);\n\n    _defineProperty(this, \"handleRef\", ref => {\n      this.node = ref;\n    });\n  }\n\n  render() {\n    const slides = renderSlides(this.props);\n    const {\n      onMouseEnter,\n      onMouseOver,\n      onMouseLeave\n    } = this.props;\n    const mouseEvents = {\n      onMouseEnter,\n      onMouseOver,\n      onMouseLeave\n    };\n    return __jsx(\"div\", _extends({\n      ref: this.handleRef,\n      className: \"slick-track\",\n      style: this.props.trackStyle\n    }, mouseEvents, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }\n    }), slides);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/sgan/front/src/modules/slick/track.jsx"],"names":["React","classnames","lazyStartIndex","lazyEndIndex","getPreClones","getSlideClasses","spec","slickActive","slickCenter","slickCloned","centerOffset","index","rtl","slideCount","centerMode","Math","floor","slidesToShow","currentSlide","focusedSlide","targetSlide","slickCurrent","getSlideStyle","style","variableWidth","undefined","width","slideWidth","fade","position","vertical","top","parseInt","slideHeight","left","opacity","useCSS","transition","speed","cssEase","getKey","child","fallbackKey","key","renderSlides","slides","preCloneSlides","postCloneSlides","childrenCount","Children","count","children","startIndex","endIndex","forEach","elem","childOnClickOptions","message","slidesToScroll","lazyLoad","lazyLoadedList","indexOf","childStyle","slideClass","props","className","slideClasses","push","cloneElement","tabIndex","outline","onClick","e","focusOnSelect","infinite","preCloneNo","concat","reverse","Track","PureComponent","ref","node","render","onMouseEnter","onMouseOver","onMouseLeave","mouseEvents","handleRef","trackStyle"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport classnames from \"classnames\"\nimport { lazyStartIndex, lazyEndIndex, getPreClones } from \"./utils/innerSliderUtils\"\n\n// given specifications/props for a slide, fetch all the classes that need to be applied to the slide\nconst getSlideClasses = spec => {\n  let slickActive, slickCenter, slickCloned\n  let centerOffset, index\n\n  if (spec.rtl) {\n    index = spec.slideCount - 1 - spec.index\n  } else {\n    index = spec.index\n  }\n  slickCloned = index < 0 || index >= spec.slideCount\n  if (spec.centerMode) {\n    centerOffset = Math.floor(spec.slidesToShow / 2)\n    slickCenter = (index - spec.currentSlide) % spec.slideCount === 0\n    if (index > spec.currentSlide - centerOffset - 1 && index <= spec.currentSlide + centerOffset) {\n      slickActive = true\n    }\n  } else {\n    slickActive = spec.currentSlide <= index && index < spec.currentSlide + spec.slidesToShow\n  }\n\n  let focusedSlide\n  if (spec.targetSlide < 0) {\n    focusedSlide = spec.targetSlide + spec.slideCount\n  } else if (spec.targetSlide >= spec.slideCount) {\n    focusedSlide = spec.targetSlide - spec.slideCount\n  } else {\n    focusedSlide = spec.targetSlide\n  }\n  let slickCurrent = index === focusedSlide\n  return {\n    \"slick-slide\": true,\n    \"slick-active\": slickActive,\n    \"slick-center\": slickCenter,\n    \"slick-cloned\": slickCloned,\n    \"slick-current\": slickCurrent // dubious in case of RTL\n  }\n}\n\nconst getSlideStyle = spec => {\n  let style = {}\n\n  if (spec.variableWidth === undefined || spec.variableWidth === false) {\n    style.width = spec.slideWidth\n  }\n\n  if (spec.fade) {\n    style.position = \"relative\"\n    if (spec.vertical) {\n      style.top = -spec.index * parseInt(spec.slideHeight)\n    } else {\n      style.left = -spec.index * parseInt(spec.slideWidth)\n    }\n    style.opacity = spec.currentSlide === spec.index ? 1 : 0\n    if (spec.useCSS) {\n      style.transition =\n        \"opacity \" +\n        spec.speed +\n        \"ms \" +\n        spec.cssEase +\n        \", \" +\n        \"visibility \" +\n        spec.speed +\n        \"ms \" +\n        spec.cssEase\n    }\n  }\n\n  return style\n}\n\nconst getKey = (child, fallbackKey) => child.key || fallbackKey\n\nconst renderSlides = spec => {\n  let key\n  let slides = []\n  let preCloneSlides = []\n  let postCloneSlides = []\n  let childrenCount = React.Children.count(spec.children)\n  let startIndex = lazyStartIndex(spec)\n  let endIndex = lazyEndIndex(spec)\n\n  React.Children.forEach(spec.children, (elem, index) => {\n    let child\n    let childOnClickOptions = {\n      message: \"children\",\n      index: index,\n      slidesToScroll: spec.slidesToScroll,\n      currentSlide: spec.currentSlide\n    }\n\n    // in case of lazyLoad, whether or not we want to fetch the slide\n    if (!spec.lazyLoad || (spec.lazyLoad && spec.lazyLoadedList.indexOf(index) >= 0)) {\n      child = elem\n    } else {\n      child = <div />\n    }\n    let childStyle = getSlideStyle({ ...spec, index })\n    let slideClass = child.props.className || \"\"\n    let slideClasses = getSlideClasses({ ...spec, index })\n    // push a cloned element of the desired slide\n    slides.push(\n      React.cloneElement(child, {\n        key: \"original\" + getKey(child, index),\n        \"data-index\": index,\n        className: classnames(slideClasses, slideClass),\n        tabIndex: \"-1\",\n        \"aria-hidden\": !slideClasses[\"slick-active\"],\n        style: { outline: \"none\", ...(child.props.style || {}), ...childStyle },\n        onClick: e => {\n          child.props && child.props.onClick && child.props.onClick(e)\n          if (spec.focusOnSelect) {\n            spec.focusOnSelect(childOnClickOptions)\n          }\n        }\n      })\n    )\n\n    // if slide needs to be precloned or postcloned\n    if (spec.infinite && spec.fade === false) {\n      let preCloneNo = childrenCount - index\n      if (preCloneNo <= getPreClones(spec) && childrenCount !== spec.slidesToShow) {\n        key = -preCloneNo\n        if (key >= startIndex) {\n          child = elem\n        }\n        slideClasses = getSlideClasses({ ...spec, index: key })\n        preCloneSlides.push(\n          React.cloneElement(child, {\n            key: \"precloned\" + getKey(child, key),\n            \"data-index\": key,\n            tabIndex: \"-1\",\n            className: classnames(slideClasses, slideClass),\n            \"aria-hidden\": !slideClasses[\"slick-active\"],\n            style: { ...(child.props.style || {}), ...childStyle },\n            onClick: e => {\n              child.props && child.props.onClick && child.props.onClick(e)\n              if (spec.focusOnSelect) {\n                spec.focusOnSelect(childOnClickOptions)\n              }\n            }\n          })\n        )\n      }\n\n      if (childrenCount !== spec.slidesToShow) {\n        key = childrenCount + index\n        if (key < endIndex) {\n          child = elem\n        }\n        slideClasses = getSlideClasses({ ...spec, index: key })\n        postCloneSlides.push(\n          React.cloneElement(child, {\n            key: \"postcloned\" + getKey(child, key),\n            \"data-index\": key,\n            tabIndex: \"-1\",\n            className: classnames(slideClasses, slideClass),\n            \"aria-hidden\": !slideClasses[\"slick-active\"],\n            style: { ...(child.props.style || {}), ...childStyle },\n            onClick: e => {\n              child.props && child.props.onClick && child.props.onClick(e)\n              if (spec.focusOnSelect) {\n                spec.focusOnSelect(childOnClickOptions)\n              }\n            }\n          })\n        )\n      }\n    }\n  })\n\n  if (spec.rtl) {\n    return preCloneSlides.concat(slides, postCloneSlides).reverse()\n  } else {\n    return preCloneSlides.concat(slides, postCloneSlides)\n  }\n}\n\nexport class Track extends React.PureComponent {\n  node = null\n\n  handleRef = ref => {\n    this.node = ref\n  }\n\n  render() {\n    const slides = renderSlides(this.props)\n    const { onMouseEnter, onMouseOver, onMouseLeave } = this.props\n    const mouseEvents = { onMouseEnter, onMouseOver, onMouseLeave }\n    return (\n      <div\n        ref={this.handleRef}\n        className=\"slick-track\"\n        style={this.props.trackStyle}\n        {...mouseEvents}\n      >\n        {slides}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}