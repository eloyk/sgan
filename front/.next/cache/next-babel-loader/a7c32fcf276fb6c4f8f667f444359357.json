{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Portlet, Container } from \"@panely/components\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport withLayout from \"components/layout/withLayout\"; //import withAuth from \"components/firebase/firebaseWithAuth\"\n\nimport Chart from \"@panely/apexcharts\";\nimport Head from \"next/head\";\n\nclass ApexChartPage extends React.Component {\n  componentDidMount() {\n    // Set header title\n    this.props.pageChangeHeaderTitle(\"Feather\"); // Set breadcrumb data\n\n    this.props.breadcrumbChange([{\n      text: \"Dashboard\",\n      link: \"/\"\n    }, {\n      text: \"Chart\"\n    }, {\n      text: \"Apex chart\",\n      link: \"/chart/apex-chart\"\n    }]);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Apex Chart | Panely\")), __jsx(Container, {\n      fluid: true\n    }, __jsx(Row, null, __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Line chart\")), __jsx(Portlet.Body, null, __jsx(Chart1, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Column chart\")), __jsx(Portlet.Body, null, __jsx(Chart3, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Mix chart\")), __jsx(Portlet.Body, null, __jsx(Chart5, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Candlestick chart\")), __jsx(Portlet.Body, null, __jsx(Chart7, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Bubble chart\")), __jsx(Portlet.Body, null, __jsx(Chart9, {\n      theme: this.props.theme\n    })))), __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Area chart\")), __jsx(Portlet.Body, null, __jsx(Chart2, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Bar chart\")), __jsx(Portlet.Body, null, __jsx(Chart4, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Timeline chart\")), __jsx(Portlet.Body, null, __jsx(Chart6, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Candlestick chart\")), __jsx(Portlet.Body, null, __jsx(Chart8, {\n      theme: this.props.theme\n    }))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Radar chart\")), __jsx(Portlet.Body, null, __jsx(Chart10, {\n      theme: this.props.theme\n    })))))));\n  }\n\n}\n\nclass Chart1 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        chart: {\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: \"straight\"\n        },\n        title: {\n          text: \"Product Trends by Month\",\n          align: \"left\"\n        },\n        grid: {\n          row: {\n            colors: [\"#f3f3f3\", \"transparent\"],\n            opacity: 0.5\n          }\n        },\n        xaxis: {\n          categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"]\n        }\n      },\n      // Chart series data\n      series: [{\n        name: \"Desktops\",\n        data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"line\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart2 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        fill: {\n          type: \"gradient\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: \"smooth\"\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [\"2018-09-19T00:00:00.000Z\", \"2018-09-19T01:30:00.000Z\", \"2018-09-19T02:30:00.000Z\", \"2018-09-19T03:30:00.000Z\", \"2018-09-19T04:30:00.000Z\", \"2018-09-19T05:30:00.000Z\", \"2018-09-19T06:30:00.000Z\"]\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy HH:mm\"\n          }\n        }\n      },\n      // Chart series data\n      series: [{\n        name: \"series1\",\n        data: [31, 40, 28, 51, 42, 109, 100]\n      }, {\n        name: \"series2\",\n        data: [11, 32, 45, 32, 34, 52, 41]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"area\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart3 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: \"55%\",\n            endingShape: \"rounded\"\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: [\"transparent\"]\n        },\n        xaxis: {\n          categories: [\"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\"]\n        },\n        yaxis: {\n          title: {\n            text: \"$ (thousands)\"\n          }\n        },\n        fill: {\n          opacity: 1\n        },\n        tooltip: {\n          y: {\n            formatter: val => `$ ${val} thousands`\n          }\n        }\n      },\n      // Chart series data\n      series: [{\n        name: \"Net Profit\",\n        data: [44, 55, 57, 56, 61, 58, 63, 60, 66]\n      }, {\n        name: \"Revenue\",\n        data: [76, 85, 101, 98, 87, 105, 91, 114, 94]\n      }, {\n        name: \"Free Cash Flow\",\n        data: [35, 41, 36, 26, 45, 48, 52, 53, 41]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"bar\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart4 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          categories: [\"South Korea\", \"Canada\", \"United Kingdom\", \"Netherlands\", \"Italy\", \"France\", \"Japan\", \"United States\", \"China\", \"Germany\"]\n        }\n      },\n      // Chart series data\n      series: [{\n        data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"bar\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart5 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        stroke: {\n          width: [0, 4]\n        },\n        title: {\n          text: \"Traffic Sources\"\n        },\n        dataLabels: {\n          enabled: true,\n          enabledOnSeries: [1]\n        },\n        labels: [\"01 Jan 2001\", \"02 Jan 2001\", \"03 Jan 2001\", \"04 Jan 2001\", \"05 Jan 2001\", \"06 Jan 2001\", \"07 Jan 2001\", \"08 Jan 2001\", \"09 Jan 2001\", \"10 Jan 2001\", \"11 Jan 2001\", \"12 Jan 2001\"],\n        xaxis: {\n          type: \"datetime\"\n        },\n        yaxis: [{\n          title: {\n            text: \"Website Blog\"\n          }\n        }, {\n          opposite: true,\n          title: {\n            text: \"Social Media\"\n          }\n        }]\n      },\n      // Chart series data\n      series: [{\n        name: \"Website Blog\",\n        type: \"column\",\n        data: [440, 505, 414, 671, 227, 413, 201, 352, 752, 320, 257, 160]\n      }, {\n        name: \"Social Media\",\n        type: \"line\",\n        data: [23, 42, 35, 27, 43, 22, 17, 31, 22, 22, 12, 16]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"line\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart6 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true\n          }\n        },\n        xaxis: {\n          type: \"datetime\"\n        }\n      },\n      // Chart series data\n      series: [{\n        data: [{\n          x: \"Code\",\n          y: [new Date(\"2019-03-02\").getTime(), new Date(\"2019-03-04\").getTime()]\n        }, {\n          x: \"Test\",\n          y: [new Date(\"2019-03-04\").getTime(), new Date(\"2019-03-08\").getTime()]\n        }, {\n          x: \"Validation\",\n          y: [new Date(\"2019-03-08\").getTime(), new Date(\"2019-03-12\").getTime()]\n        }, {\n          x: \"Deployment\",\n          y: [new Date(\"2019-03-12\").getTime(), new Date(\"2019-03-18\").getTime()]\n        }]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"rangeBar\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart7 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        title: {\n          text: \"CandleStick Chart\",\n          align: \"left\"\n        },\n        xaxis: {\n          type: \"datetime\"\n        },\n        yaxis: {\n          tooltip: {\n            enabled: true\n          }\n        }\n      },\n      // Chart series data\n      series: [{\n        data: [{\n          x: new Date(1538778600000),\n          y: [6629.81, 6650.5, 6623.04, 6633.33]\n        }, {\n          x: new Date(1538780400000),\n          y: [6632.01, 6643.59, 6620, 6630.11]\n        }, {\n          x: new Date(1538782200000),\n          y: [6630.71, 6648.95, 6623.34, 6635.65]\n        }, {\n          x: new Date(1538784000000),\n          y: [6635.65, 6651, 6629.67, 6638.24]\n        }, {\n          x: new Date(1538785800000),\n          y: [6638.24, 6640, 6620, 6624.47]\n        }, {\n          x: new Date(1538787600000),\n          y: [6624.53, 6636.03, 6621.68, 6624.31]\n        }, {\n          x: new Date(1538789400000),\n          y: [6624.61, 6632.2, 6617, 6626.02]\n        }, {\n          x: new Date(1538791200000),\n          y: [6627, 6627.62, 6584.22, 6603.02]\n        }, {\n          x: new Date(1538793000000),\n          y: [6605, 6608.03, 6598.95, 6604.01]\n        }, {\n          x: new Date(1538794800000),\n          y: [6604.5, 6614.4, 6602.26, 6608.02]\n        }, {\n          x: new Date(1538796600000),\n          y: [6608.02, 6610.68, 6601.99, 6608.91]\n        }, {\n          x: new Date(1538798400000),\n          y: [6608.91, 6618.99, 6608.01, 6612]\n        }, {\n          x: new Date(1538800200000),\n          y: [6612, 6615.13, 6605.09, 6612]\n        }, {\n          x: new Date(1538802000000),\n          y: [6612, 6624.12, 6608.43, 6622.95]\n        }, {\n          x: new Date(1538803800000),\n          y: [6623.91, 6623.91, 6615, 6615.67]\n        }, {\n          x: new Date(1538805600000),\n          y: [6618.69, 6618.74, 6610, 6610.4]\n        }, {\n          x: new Date(1538807400000),\n          y: [6611, 6622.78, 6610.4, 6614.9]\n        }, {\n          x: new Date(1538809200000),\n          y: [6614.9, 6626.2, 6613.33, 6623.45]\n        }, {\n          x: new Date(1538811000000),\n          y: [6623.48, 6627, 6618.38, 6620.35]\n        }, {\n          x: new Date(1538812800000),\n          y: [6619.43, 6620.35, 6610.05, 6615.53]\n        }, {\n          x: new Date(1538814600000),\n          y: [6615.53, 6617.93, 6610, 6615.19]\n        }, {\n          x: new Date(1538816400000),\n          y: [6615.19, 6621.6, 6608.2, 6620]\n        }, {\n          x: new Date(1538818200000),\n          y: [6619.54, 6625.17, 6614.15, 6620]\n        }, {\n          x: new Date(1538820000000),\n          y: [6620.33, 6634.15, 6617.24, 6624.61]\n        }, {\n          x: new Date(1538821800000),\n          y: [6625.95, 6626, 6611.66, 6617.58]\n        }, {\n          x: new Date(1538823600000),\n          y: [6619, 6625.97, 6595.27, 6598.86]\n        }, {\n          x: new Date(1538825400000),\n          y: [6598.86, 6598.88, 6570, 6587.16]\n        }, {\n          x: new Date(1538827200000),\n          y: [6588.86, 6600, 6580, 6593.4]\n        }, {\n          x: new Date(1538829000000),\n          y: [6593.99, 6598.89, 6585, 6587.81]\n        }, {\n          x: new Date(1538830800000),\n          y: [6587.81, 6592.73, 6567.14, 6578]\n        }, {\n          x: new Date(1538832600000),\n          y: [6578.35, 6581.72, 6567.39, 6579]\n        }, {\n          x: new Date(1538834400000),\n          y: [6579.38, 6580.92, 6566.77, 6575.96]\n        }, {\n          x: new Date(1538836200000),\n          y: [6575.96, 6589, 6571.77, 6588.92]\n        }, {\n          x: new Date(1538838000000),\n          y: [6588.92, 6594, 6577.55, 6589.22]\n        }, {\n          x: new Date(1538839800000),\n          y: [6589.3, 6598.89, 6589.1, 6596.08]\n        }, {\n          x: new Date(1538841600000),\n          y: [6597.5, 6600, 6588.39, 6596.25]\n        }, {\n          x: new Date(1538843400000),\n          y: [6598.03, 6600, 6588.73, 6595.97]\n        }, {\n          x: new Date(1538845200000),\n          y: [6595.97, 6602.01, 6588.17, 6602]\n        }, {\n          x: new Date(1538847000000),\n          y: [6602, 6607, 6596.51, 6599.95]\n        }, {\n          x: new Date(1538848800000),\n          y: [6600.63, 6601.21, 6590.39, 6591.02]\n        }, {\n          x: new Date(1538850600000),\n          y: [6591.02, 6603.08, 6591, 6591]\n        }, {\n          x: new Date(1538852400000),\n          y: [6591, 6601.32, 6585, 6592]\n        }, {\n          x: new Date(1538854200000),\n          y: [6593.13, 6596.01, 6590, 6593.34]\n        }, {\n          x: new Date(1538856000000),\n          y: [6593.34, 6604.76, 6582.63, 6593.86]\n        }, {\n          x: new Date(1538857800000),\n          y: [6593.86, 6604.28, 6586.57, 6600.01]\n        }, {\n          x: new Date(1538859600000),\n          y: [6601.81, 6603.21, 6592.78, 6596.25]\n        }, {\n          x: new Date(1538861400000),\n          y: [6596.25, 6604.2, 6590, 6602.99]\n        }, {\n          x: new Date(1538863200000),\n          y: [6602.99, 6606, 6584.99, 6587.81]\n        }, {\n          x: new Date(1538865000000),\n          y: [6587.81, 6595, 6583.27, 6591.96]\n        }, {\n          x: new Date(1538866800000),\n          y: [6591.97, 6596.07, 6585, 6588.39]\n        }, {\n          x: new Date(1538868600000),\n          y: [6587.6, 6598.21, 6587.6, 6594.27]\n        }, {\n          x: new Date(1538870400000),\n          y: [6596.44, 6601, 6590, 6596.55]\n        }, {\n          x: new Date(1538872200000),\n          y: [6598.91, 6605, 6596.61, 6600.02]\n        }, {\n          x: new Date(1538874000000),\n          y: [6600.55, 6605, 6589.14, 6593.01]\n        }, {\n          x: new Date(1538875800000),\n          y: [6593.15, 6605, 6592, 6603.06]\n        }, {\n          x: new Date(1538877600000),\n          y: [6603.07, 6604.5, 6599.09, 6603.89]\n        }, {\n          x: new Date(1538879400000),\n          y: [6604.44, 6604.44, 6600, 6603.5]\n        }, {\n          x: new Date(1538881200000),\n          y: [6603.5, 6603.99, 6597.5, 6603.86]\n        }, {\n          x: new Date(1538883000000),\n          y: [6603.85, 6605, 6600, 6604.07]\n        }, {\n          x: new Date(1538884800000),\n          y: [6604.98, 6606, 6604.07, 6606]\n        }]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"candlestick\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart8 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        labels: [\"Team A\", \"Team B\", \"Team C\", \"Team D\", \"Team E\"],\n        tooltip: {\n          fillSeriesColor: false\n        },\n        responsive: [{\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 200\n            },\n            legend: {\n              position: \"bottom\"\n            }\n          }\n        }]\n      },\n      // Chart series data\n      series: [44, 55, 13, 43, 22]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"pie\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart9 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        chart: {\n          zoom: {\n            enabled: true,\n            type: \"xy\"\n          }\n        },\n        xaxis: {\n          tickAmount: 10,\n          labels: {\n            formatter: val => parseFloat(val).toFixed(1)\n          }\n        },\n        yaxis: {\n          tickAmount: 7\n        }\n      },\n      // Chart series data\n      series: [{\n        name: \"SAMPLE A\",\n        data: [[16.4, 5.4], [21.7, 2], [25.4, 3], [19, 2], [10.9, 1], [13.6, 3.2], [10.9, 7.4], [10.9, 0], [10.9, 8.2], [16.4, 0], [16.4, 1.8], [13.6, 0.3], [13.6, 0], [29.9, 0], [27.1, 2.3], [16.4, 0], [13.6, 3.7], [10.9, 5.2], [16.4, 6.5], [10.9, 0], [24.5, 7.1], [10.9, 0], [8.1, 4.7], [19, 0], [21.7, 1.8], [27.1, 0], [24.5, 0], [27.1, 0], [29.9, 1.5], [27.1, 0.8], [22.1, 2]]\n      }, {\n        name: \"SAMPLE B\",\n        data: [[36.4, 13.4], [1.7, 11], [5.4, 8], [9, 17], [1.9, 4], [3.6, 12.2], [1.9, 14.4], [1.9, 9], [1.9, 13.2], [1.4, 7], [6.4, 8.8], [3.6, 4.3], [1.6, 10], [9.9, 2], [7.1, 15], [1.4, 0], [3.6, 13.7], [1.9, 15.2], [6.4, 16.5], [0.9, 10], [4.5, 17.1], [10.9, 10], [0.1, 14.7], [9, 10], [12.7, 11.8], [2.1, 10], [2.5, 10], [27.1, 10], [2.9, 11.5], [7.1, 10.8], [2.1, 12]]\n      }, {\n        name: \"SAMPLE C\",\n        data: [[21.7, 3], [23.6, 3.5], [24.6, 3], [29.9, 3], [21.7, 20], [23, 2], [10.9, 3], [28, 4], [27.1, 0.3], [16.4, 4], [13.6, 0], [19, 5], [22.4, 3], [24.5, 3], [32.6, 3], [27.1, 4], [29.6, 6], [31.6, 8], [21.6, 5], [20.9, 4], [22.4, 0], [32.6, 10.3], [29.7, 20.8], [24.5, 0.8], [21.4, 0], [21.7, 6.9], [28.6, 7.7], [15.4, 0], [18.1, 0], [33.4, 0], [16.4, 0]]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"scatter\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nclass Chart10 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        },\n        title: {\n          text: \"Basic Radar Chart\"\n        },\n        xaxis: {\n          categories: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"]\n        }\n      },\n      // Chart series data\n      series: [{\n        name: \"Series 1\",\n        data: [80, 50, 30, 40, 100, 20]\n      }]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      let newState = this.state; // Change chart options\n\n      newState.options.theme = {\n        mode: this.props.theme,\n        palette: \"palette1\"\n      };\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return __jsx(Chart, {\n      type: \"radar\",\n      options: options,\n      series: series,\n      height: 350\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    theme: state.page.theme\n  };\n}\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle,\n    breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispathToProps)(withLayout(ApexChartPage));","map":null,"metadata":{},"sourceType":"module"}