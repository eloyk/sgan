{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Portlet, RichList, Container } from \"@panely/components\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport withLayout from \"components/layout/withLayout\"; //import withAuth from \"components/firebase/firebaseWithAuth\"\n\nimport Head from \"next/head\";\n\nclass SortablePage extends React.Component {\n  componentDidMount() {\n    // Set header title\n    this.props.pageChangeHeaderTitle(\"Sortable\"); // Set breadcrumb data\n\n    this.props.breadcrumbChange([{\n      text: \"Dashboard\",\n      link: \"/\"\n    }, {\n      text: \"Elements\"\n    }, {\n      text: \"Advanced\"\n    }, {\n      text: \"Sortable\",\n      link: \"/elements/advanced/sortable\"\n    }]);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Sortable | Panely\")), __jsx(Container, {\n      fluid: true\n    }, __jsx(Row, null, __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Basic\")), __jsx(Portlet.Body, null, __jsx(Sortable1, null))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Shared lists\")), __jsx(Portlet.Body, null, __jsx(Sortable2, null))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Disabled sorting\")), __jsx(Portlet.Body, null, __jsx(Sortable3, null)))), __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Cloning\")), __jsx(Portlet.Body, null, __jsx(Sortable4, null))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Nested\")), __jsx(Portlet.Body, null, __jsx(Sortable5, null)))))));\n  }\n\n}\n\nclass Sortable1 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: [{\n        id: 1,\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\"\n      }, {\n        id: 2,\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\"\n      }, {\n        id: 3,\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\"\n      }]\n    });\n  }\n\n  render() {\n    return __jsx(RichList, {\n      bordered: true\n    }, __jsx(ReactSortable, {\n      list: this.state.data,\n      setList: data => this.setState({\n        data\n      })\n    }, this.state.data.map((data, index) => {\n      const {\n        title,\n        subtitle\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index\n      }, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      })));\n    })));\n  }\n\n}\n\nclass Sortable2 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      list1: [{\n        id: 1,\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\",\n        color: \"success\"\n      }, {\n        id: 2,\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\",\n        color: \"success\"\n      }, {\n        id: 3,\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\",\n        color: \"success\"\n      }],\n      list2: [{\n        id: 1,\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\",\n        color: \"danger\"\n      }, {\n        id: 2,\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\",\n        color: \"danger\"\n      }, {\n        id: 3,\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\",\n        color: \"danger\"\n      }]\n    });\n  }\n\n  render() {\n    return __jsx(Row, null, __jsx(Col, {\n      xs: \"6\"\n    }, __jsx(RichList, {\n      bordered: true\n    }, __jsx(ReactSortable, {\n      group: \"sortable2\",\n      list: this.state.list1,\n      setList: data => this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        list1: data\n      }))\n    }, this.state.list1.map((data, index) => {\n      const {\n        title,\n        subtitle,\n        color\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index\n      }, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        className: `text-${color}`,\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      })));\n    })))), __jsx(Col, {\n      xs: \"6\"\n    }, __jsx(RichList, {\n      bordered: true\n    }, __jsx(ReactSortable, {\n      group: \"sortable2\",\n      list: this.state.list2,\n      setList: data => this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        list2: data\n      }))\n    }, this.state.list2.map((data, index) => {\n      const {\n        title,\n        subtitle,\n        color\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index\n      }, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        className: `text-${color}`,\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      })));\n    })))));\n  }\n\n}\n\nclass Sortable3 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      list1: [{\n        id: 1,\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\",\n        color: \"success\"\n      }, {\n        id: 2,\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\",\n        color: \"success\"\n      }, {\n        id: 3,\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\",\n        color: \"success\"\n      }],\n      list2: [{\n        id: 1,\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\",\n        color: \"danger\"\n      }, {\n        id: 2,\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\",\n        color: \"danger\"\n      }, {\n        id: 3,\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\",\n        color: \"danger\"\n      }]\n    });\n  }\n\n  render() {\n    return __jsx(Row, null, __jsx(Col, {\n      xs: \"6\"\n    }, __jsx(RichList, {\n      bordered: true\n    }, __jsx(ReactSortable, {\n      group: {\n        name: \"sortable3\",\n        pull: \"clone\",\n        put: false\n      },\n      sort: false,\n      list: this.state.list1,\n      setList: data => this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        list1: data\n      }))\n    }, this.state.list1.map((data, index) => {\n      const {\n        title,\n        subtitle,\n        color\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index\n      }, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        className: `text-${color}`,\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      })));\n    })))), __jsx(Col, {\n      xs: \"6\"\n    }, __jsx(RichList, {\n      bordered: true\n    }, __jsx(ReactSortable, {\n      group: \"sortable3\",\n      list: this.state.list2,\n      setList: data => this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        list2: data\n      }))\n    }, this.state.list2.map((data, index) => {\n      const {\n        title,\n        subtitle,\n        color\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index\n      }, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        className: `text-${color}`,\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      })));\n    })))));\n  }\n\n}\n\nclass Sortable4 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      list1: [{\n        id: 1,\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\",\n        color: \"success\"\n      }, {\n        id: 2,\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\",\n        color: \"success\"\n      }, {\n        id: 3,\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\",\n        color: \"success\"\n      }],\n      list2: [{\n        id: 1,\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\",\n        color: \"danger\"\n      }, {\n        id: 2,\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\",\n        color: \"danger\"\n      }, {\n        id: 3,\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\",\n        color: \"danger\"\n      }]\n    });\n  }\n\n  render() {\n    return __jsx(Row, null, __jsx(Col, {\n      xs: \"6\"\n    }, __jsx(RichList, {\n      bordered: true\n    }, __jsx(ReactSortable, {\n      group: {\n        name: \"sortable4\",\n        pull: \"clone\"\n      },\n      list: this.state.list1,\n      setList: data => this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        list1: data\n      }))\n    }, this.state.list1.map((data, index) => {\n      const {\n        title,\n        subtitle,\n        color\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index\n      }, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        className: `text-${color}`,\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      })));\n    })))), __jsx(Col, {\n      xs: \"6\"\n    }, __jsx(RichList, {\n      bordered: true\n    }, __jsx(ReactSortable, {\n      group: {\n        name: \"sortable4\",\n        pull: \"clone\"\n      },\n      list: this.state.list2,\n      setList: data => this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        list2: data\n      }))\n    }, this.state.list2.map((data, index) => {\n      const {\n        title,\n        subtitle,\n        color\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index\n      }, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        className: `text-${color}`,\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      })));\n    })))));\n  }\n\n}\n\nclass Sortable5 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      list: [{\n        id: \"1\",\n        title: \"List 1\",\n        subtitle: \"Cras justo odio\",\n        child: [{\n          id: \"1-1\",\n          title: \"List 1.1\",\n          subtitle: \"Dapibus ac facilisis in\",\n          child: false\n        }, {\n          id: \"1-2\",\n          title: \"List 1.2\",\n          subtitle: \"Morbi leo risus\",\n          child: false\n        }]\n      }, {\n        id: \"2\",\n        title: \"List 2\",\n        subtitle: \"Dapibus ac facilisis in\",\n        child: [{\n          id: \"2-1\",\n          title: \"List 2.1\",\n          subtitle: \"Dapibus ac facilisis in\",\n          child: false\n        }, {\n          id: \"2-2\",\n          title: \"List 2.2\",\n          subtitle: \"Morbi leo risus\",\n          child: [{\n            id: \"2-2-1\",\n            title: \"List 2-2-1\",\n            subtitle: \"Cras justo odio\",\n            child: false\n          }]\n        }]\n      }, {\n        id: \"3\",\n        title: \"List 3\",\n        subtitle: \"Morbi leo risus\",\n        child: false\n      }, {\n        id: \"4\",\n        title: \"List 4\",\n        subtitle: \"Cras justo odio\",\n        child: false\n      }]\n    });\n  }\n\n  render() {\n    return __jsx(RichList, {\n      bordered: true,\n      className: \"sortable\"\n    }, __jsx(ReactSortable, {\n      group: \"sortable5\",\n      invertSwap: true,\n      list: this.state.list,\n      setList: data => this.setState({\n        list: data\n      })\n    }, this.state.list.map((data, index1) => {\n      const {\n        title,\n        subtitle,\n        child\n      } = data;\n      const hasChild = Boolean(child);\n      let listState = this.state.list;\n      return __jsx(\"div\", {\n        className: \"sortable-item\",\n        key: index1\n      }, __jsx(RichList.Item, null, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n        children: title\n      }), __jsx(RichList.Subtitle, {\n        children: subtitle\n      }))), hasChild ? __jsx(RichList, {\n        bordered: true,\n        className: \"sortable\"\n      }, __jsx(ReactSortable, {\n        group: \"sortable5\",\n        invertSwap: true,\n        list: this.state.list[index1].child,\n        setList: data => {\n          listState[index1].child = data;\n          this.setState({\n            list: listState\n          });\n        }\n      }, child.map((data, index2) => {\n        const {\n          title,\n          subtitle,\n          child\n        } = data;\n        const hasChild = Boolean(child);\n        return __jsx(\"div\", {\n          className: \"sortable-item\",\n          key: index2\n        }, __jsx(RichList.Item, null, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n          children: title\n        }), __jsx(RichList.Subtitle, {\n          children: subtitle\n        }))), hasChild ? __jsx(RichList, {\n          bordered: true,\n          className: \"sortable\"\n        }, __jsx(ReactSortable, {\n          group: \"sortable5\",\n          invertSwap: true,\n          list: this.state.list[index1].child[index2].child,\n          setList: data => {\n            listState[index1].child[index2].child = data;\n            this.setState({\n              list: listState\n            });\n          }\n        }, child.map((data, index3) => {\n          const {\n            title,\n            subtitle\n          } = data;\n          return __jsx(\"div\", {\n            className: \"sortable-item\",\n            key: index3\n          }, __jsx(RichList.Item, null, __jsx(RichList.Content, null, __jsx(RichList.Title, {\n            children: title\n          }), __jsx(RichList.Subtitle, {\n            children: subtitle\n          }))));\n        }))) : null);\n      }))) : null);\n    })));\n  }\n\n}\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle,\n    breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withLayout(SortablePage));","map":null,"metadata":{},"sourceType":"module"}