{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { Manager } from \"react-popper\";\nimport classNames from \"classnames\";\nimport { DropdownContext } from \"./DropdownContext\";\nimport { mapToCssModules, omit, keyCodes, tagPropType } from \"./utils\";\nimport DropdownItem from \"./DropdownItem\";\nimport DropdownMenu from \"./DropdownMenu\";\nimport DropdownToggle from \"./DropdownToggle\";\nimport DropdownHeader from \"./DropdownHeader\";\nimport DropdownDivider from \"./DropdownDivider\";\nimport DropdownSubmenu from \"./DropdownSubmenu\";\nimport DropdownSubmenuMenu from \"./DropdownSubmenuMenu\";\nimport DropdownRow from \"./DropdownRow\";\nimport DropdownCol from \"./DropdownCol\";\nconst defaultProps = {\n  setActiveFromChild: false,\n  direction: \"down\",\n  addonType: false,\n  active: false,\n  isOpen: false,\n  a11y: true,\n  nav: false\n};\nconst preventDefaultKeys = [keyCodes.space, keyCodes.enter, keyCodes.up, keyCodes.down, keyCodes.end, keyCodes.home];\nconst omitKeys = [\"defaultOpen\"];\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addEvents = this.addEvents.bind(this);\n    this.handleDocumentClick = this.handleDocumentClick.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.removeEvents = this.removeEvents.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.containerRef = /*#__PURE__*/React.createRef();\n  }\n\n  getContextValue() {\n    return {\n      toggle: this.toggle,\n      isOpen: this.props.isOpen,\n      direction: this.props.direction === \"down\" && this.props.dropup ? \"up\" : this.props.direction,\n      disabled: this.props.disabled\n    };\n  }\n\n  componentDidMount() {\n    this.handleProps();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isOpen !== prevProps.isOpen) {\n      this.handleProps();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeEvents();\n  }\n\n  getContainer() {\n    return this.containerRef.current;\n  }\n\n  getMenuCtrl() {\n    if (this._$menuCtrl) return this._$menuCtrl;\n    this._$menuCtrl = this.getContainer().querySelector(\"[aria-expanded]\");\n    return this._$menuCtrl;\n  }\n\n  getMenuItems() {\n    return [].slice.call(this.getContainer().querySelectorAll('[role=\"menuitem\"]'));\n  }\n\n  addEvents() {\n    [\"click\", \"touchstart\", \"keyup\"].forEach(event => document.addEventListener(event, this.handleDocumentClick, true));\n  }\n\n  removeEvents() {\n    [\"click\", \"touchstart\", \"keyup\"].forEach(event => document.removeEventListener(event, this.handleDocumentClick, true));\n  }\n\n  handleDocumentClick(e) {\n    if (e && (e.which === 3 || e.type === \"keyup\" && e.which !== keyCodes.tab)) return;\n    const container = this.getContainer();\n\n    if (container.contains(e.target) && container !== e.target && (e.type !== \"keyup\" || e.which === keyCodes.tab)) {\n      return;\n    }\n\n    this.toggle(e);\n  }\n\n  handleKeyDown(e) {\n    if (/input|textarea/i.test(e.target.tagName) || keyCodes.tab === e.which && (e.target.getAttribute(\"role\") !== \"menuitem\" || !this.props.a11y)) {\n      return;\n    }\n\n    if (preventDefaultKeys.indexOf(e.which) !== -1 || e.which >= 48 && e.which <= 90) {\n      e.preventDefault();\n    }\n\n    if (this.props.disabled) return;\n\n    if (this.getMenuCtrl() === e.target) {\n      if (!this.props.isOpen && [keyCodes.space, keyCodes.enter, keyCodes.up, keyCodes.down].indexOf(e.which) > -1) {\n        this.toggle(e);\n        setTimeout(() => this.getMenuItems()[0].focus());\n      } else if (this.props.isOpen && e.which === keyCodes.esc) {\n        this.toggle(e);\n      }\n    }\n\n    if (this.props.isOpen && e.target.getAttribute(\"role\") === \"menuitem\") {\n      if ([keyCodes.tab, keyCodes.esc].indexOf(e.which) > -1) {\n        this.toggle(e);\n        this.getMenuCtrl().focus();\n      } else if ([keyCodes.space, keyCodes.enter].indexOf(e.which) > -1) {\n        e.target.click();\n        this.getMenuCtrl().focus();\n      } else if ([keyCodes.down, keyCodes.up].indexOf(e.which) > -1 || [keyCodes.n, keyCodes.p].indexOf(e.which) > -1 && e.ctrlKey) {\n        const $menuitems = this.getMenuItems();\n        let index = $menuitems.indexOf(e.target);\n\n        if (keyCodes.up === e.which || keyCodes.p === e.which && e.ctrlKey) {\n          index = index !== 0 ? index - 1 : $menuitems.length - 1;\n        } else if (keyCodes.down === e.which || keyCodes.n === e.which && e.ctrlKey) {\n          index = index === $menuitems.length - 1 ? 0 : index + 1;\n        }\n\n        $menuitems[index].focus();\n      } else if (keyCodes.end === e.which) {\n        const $menuitems = this.getMenuItems();\n        $menuitems[$menuitems.length - 1].focus();\n      } else if (keyCodes.home === e.which) {\n        const $menuitems = this.getMenuItems();\n        $menuitems[0].focus();\n      } else if (e.which >= 48 && e.which <= 90) {\n        const $menuitems = this.getMenuItems();\n        const charPressed = String.fromCharCode(e.which).toLowerCase();\n\n        for (let i = 0; i < $menuitems.length; i += 1) {\n          const firstLetter = $menuitems[i].textContent && $menuitems[i].textContent[0].toLowerCase();\n\n          if (firstLetter === charPressed) {\n            $menuitems[i].focus();\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  handleProps() {\n    if (this.props.isOpen) {\n      this.addEvents();\n    } else {\n      this.removeEvents();\n    }\n  }\n\n  toggle(e) {\n    if (this.props.disabled) {\n      return e && e.preventDefault();\n    }\n\n    return this.props.toggle(e);\n  }\n\n  render() {\n    const _omit = omit(this.props, [\"toggle\", \"disabled\", \"a11y\"]),\n          {\n      setActiveFromChild,\n      addonType,\n      className,\n      cssModule,\n      direction,\n      active,\n      isOpen,\n      group,\n      size,\n      nav,\n      tag\n    } = _omit,\n          attrs = _objectWithoutProperties(_omit, [\"setActiveFromChild\", \"addonType\", \"className\", \"cssModule\", \"direction\", \"active\", \"isOpen\", \"group\", \"size\", \"nav\", \"tag\"]);\n\n    const Tag = tag || (nav ? \"div\" : \"div\");\n    let subItemIsActive = false;\n\n    if (setActiveFromChild) {\n      React.Children.map(this.props.children[1].props.children, dropdownItem => {\n        if (dropdownItem && dropdownItem.props.active) subItemIsActive = true;\n      });\n    }\n\n    const classes = mapToCssModules(classNames(className, direction !== \"down\" && `drop${direction}`, nav && active ? \"active\" : false, setActiveFromChild && subItemIsActive ? \"active\" : false, {\n      [`input-group-${addonType}`]: addonType,\n      \"btn-group\": group,\n      [`btn-group-${size}`]: !!size,\n      dropdown: !group && !addonType,\n      show: isOpen,\n      \"nav-item\": nav\n    }), cssModule);\n    return __jsx(DropdownContext.Provider, {\n      value: this.getContextValue()\n    }, __jsx(Manager, null, __jsx(Tag, _extends({}, attrs, {\n      [typeof Tag === \"string\" ? \"ref\" : \"innerRef\"]: this.containerRef,\n      onKeyDown: this.handleKeyDown,\n      className: classes\n    }))));\n  }\n\n}\n\nclass DropdownUncontrolled extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: props.defaultOpen || false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle(e) {\n    this.setState({\n      isOpen: !this.state.isOpen\n    }, () => {\n      if (this.props.onToggle) {\n        this.props.onToggle(e, this.state.isOpen);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Dropdown, _extends({\n      isOpen: this.state.isOpen,\n      toggle: this.toggle\n    }, omit(this.props, omitKeys)));\n  }\n\n}\n\nDropdown.defaultProps = defaultProps;\nDropdown.Item = DropdownItem;\nDropdown.Menu = DropdownMenu;\nDropdown.Submenu = DropdownSubmenu;\nDropdown.SubmenuMenu = DropdownSubmenuMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Header = DropdownHeader;\nDropdown.Divider = DropdownDivider;\nDropdown.Row = DropdownRow;\nDropdown.Col = DropdownCol;\nDropdown.Uncontrolled = DropdownUncontrolled;\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}