{"ast":null,"code":"import TYPES from \"store/types\";\nimport AuthService from \"../../services/auth.service\";\nexport var register = function register(email, password) {\n  return function (dispatch) {\n    return AuthService.register(email, password).then(function (response) {\n      dispatch({\n        type: TYPES.REGISTER_SUCCESS,\n        payload: response.data\n      });\n      dispatch({\n        type: TYPES.SET_MESSAGE,\n        payload: response.data.message\n      });\n      return Promise.resolve();\n    }, function (error) {\n      var message = error.response && error.response.errores && error.response.errores.mensaje || error.mensaje || error.toString();\n      dispatch({\n        type: TYPES.REGISTER_FAIL\n      });\n      dispatch({\n        type: TYPES.SET_MESSAGE,\n        payload: message\n      });\n      return Promise.reject();\n    });\n  };\n};\nexport var login = function login(username, password) {\n  return function (dispatch) {\n    return AuthService.login(username, password).then(function (data) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          user: data\n        }\n      });\n      return Promise.resolve();\n    }, function (error) {\n      var message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message\n      });\n      return Promise.reject();\n    });\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    AuthService.logout();\n    dispatch({\n      type: LOGOUT\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Eloy/Desktop/sgan/front/src/store/actions/auth.jsx"],"names":["TYPES","AuthService","register","email","password","dispatch","then","response","type","REGISTER_SUCCESS","payload","data","SET_MESSAGE","message","Promise","resolve","error","errores","mensaje","toString","REGISTER_FAIL","reject","login","username","LOGIN_SUCCESS","user","LOGIN_FAIL","logout","LOGOUT"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,UAACC,QAAD,EAAc;AACzD,WAAOJ,WAAW,CAACC,QAAZ,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCE,IAAtC,CACL,UAACC,QAAD,EAAc;AACZF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAER,KAAK,CAACS,gBADL;AAEPC,QAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,OAAD,CAAR;AAKAN,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAER,KAAK,CAACY,WADL;AAEPF,QAAAA,OAAO,EAAEH,QAAQ,CAACI,IAAT,CAAcE;AAFhB,OAAD,CAAR;AAKA,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD,KAbI,EAcL,UAACC,KAAD,EAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACT,QAAN,IACCS,KAAK,CAACT,QAAN,CAAeU,OADhB,IAECD,KAAK,CAACT,QAAN,CAAeU,OAAf,CAAuBC,OAFzB,IAGAF,KAAK,CAACE,OAHN,IAIAF,KAAK,CAACG,QAAN,EALF;AAOAd,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAER,KAAK,CAACoB;AADL,OAAD,CAAR;AAIAf,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAER,KAAK,CAACY,WADL;AAEPF,QAAAA,OAAO,EAAEG;AAFF,OAAD,CAAR;AAKA,aAAOC,OAAO,CAACO,MAAR,EAAP;AACD,KAhCI,CAAP;AAkCD,GAnCuB;AAAA,CAAjB;AAqCP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAAWnB,QAAX;AAAA,SAAwB,UAACC,QAAD,EAAc;AACzD,WAAOJ,WAAW,CAACqB,KAAZ,CAAkBC,QAAlB,EAA4BnB,QAA5B,EAAsCE,IAAtC,CACL,UAACK,IAAD,EAAU;AACRN,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEgB,aADC;AAEPd,QAAAA,OAAO,EAAE;AAAEe,UAAAA,IAAI,EAAEd;AAAR;AAFF,OAAD,CAAR;AAKA,aAAOG,OAAO,CAACC,OAAR,EAAP;AACD,KARI,EASL,UAACC,KAAD,EAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACT,QAAN,IACCS,KAAK,CAACT,QAAN,CAAeI,IADhB,IAECK,KAAK,CAACT,QAAN,CAAeI,IAAf,CAAoBE,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACG,QAAN,EALF;AAOAd,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEkB;AADC,OAAD,CAAR;AAIArB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEI,WADC;AAEPF,QAAAA,OAAO,EAAEG;AAFF,OAAD,CAAR;AAKA,aAAOC,OAAO,CAACO,MAAR,EAAP;AACD,KA3BI,CAAP;AA6BD,GA9BoB;AAAA,CAAd;AAgCP,OAAO,IAAMM,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,UAACtB,QAAD,EAAc;AACxCJ,IAAAA,WAAW,CAAC0B,MAAZ;AAEAtB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEoB;AADC,KAAD,CAAR;AAGD,GANqB;AAAA,CAAf","sourcesContent":["import TYPES from \"store/types\"\r\n\r\nimport AuthService from \"../../services/auth.service\";\r\n\r\nexport const register = (email, password) => (dispatch) => {\r\n  return AuthService.register(email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: TYPES.REGISTER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n\r\n      dispatch({\r\n        type: TYPES.SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.errores &&\r\n          error.response.errores.mensaje) ||\r\n        error.mensaje ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: TYPES.REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: TYPES.SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}