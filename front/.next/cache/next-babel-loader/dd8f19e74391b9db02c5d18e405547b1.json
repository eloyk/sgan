{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Input, Button, Portlet, Dropdown, Container, InputGroup, ButtonGroup, ButtonToolbar } from \"@panely/components\";\nimport { pageChangeHeaderTitle, breadcrumbChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport withLayout from \"components/layout/withLayout\"; //import withAuth from \"components/firebase/firebaseWithAuth\"\n\nimport Head from \"next/head\";\n\nclass ButtonGroupPage extends React.Component {\n  componentDidMount() {\n    // Set header title\n    this.props.pageChangeHeaderTitle(\"Button Group\"); // Set breadcrumb data\n\n    this.props.breadcrumbChange([{\n      text: \"Dashboard\",\n      link: \"/\"\n    }, {\n      text: \"Elements\"\n    }, {\n      text: \"Base\"\n    }, {\n      text: \"Button Group\",\n      link: \"/elements/base/button-group\"\n    }]);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Button Group | Panely\")), __jsx(Container, {\n      fluid: true\n    }, __jsx(Row, null, __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Basic\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Wrap a series of \", __jsx(\"code\", null, \"Button\"), \" elements in \", __jsx(\"code\", null, \"ButtonGroup\"), \" \", \"element.\"), __jsx(ButtonGroup, null, __jsx(Button, null, \"Left\"), __jsx(Button, null, \"Middle\"), __jsx(Button, null, \"Right\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Sizing\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Instead of applying button sizing properties to every button in a group, just set \", __jsx(\"code\", null, \"variant\"), \" with \", __jsx(\"code\", null, \"sm|lg\"), \" to each\", \" \", __jsx(\"code\", null, \"ButtonGroup\"), \", including each one when nesting multiple groups.\"), __jsx(ButtonGroup, {\n      size: \"lg\",\n      className: \"mb-2\"\n    }, __jsx(Button, null, \"Left\"), __jsx(Button, null, \"Middle\"), __jsx(Button, null, \"Right\")), __jsx(\"br\", null), __jsx(ButtonGroup, {\n      className: \"mb-2\"\n    }, __jsx(Button, null, \"Left\"), __jsx(Button, null, \"Middle\"), __jsx(Button, null, \"Right\")), __jsx(\"br\", null), __jsx(ButtonGroup, {\n      size: \"sm\"\n    }, __jsx(Button, null, \"Left\"), __jsx(Button, null, \"Middle\"), __jsx(Button, null, \"Right\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Split button\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Create split button dropdowns with virtually the same markup as single button dropdowns, but with the addition of \", __jsx(\"code\", null, \"split\"), \" property for proper spacing around the dropdown caret.\"), __jsx(Dropdown.Uncontrolled, {\n      group: true,\n      className: \"mr-2 mb-2\"\n    }, __jsx(Button, null, \"Dropdown\"), __jsx(Dropdown.Toggle, {\n      split: true\n    }), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Another action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Something else here\"), __jsx(Dropdown.Divider, null), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Separated lin\"))), __jsx(Dropdown.Uncontrolled, {\n      group: true,\n      direction: \"up\",\n      className: \"mr-2 mb-2\"\n    }, __jsx(Button, null, \"Dropdown\"), __jsx(Dropdown.Toggle, {\n      split: true\n    }), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Another action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Something else here\"), __jsx(Dropdown.Divider, null), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Separated lin\"))), __jsx(Dropdown.Uncontrolled, {\n      group: true,\n      direction: \"right\",\n      className: \"mr-2 mb-2\"\n    }, __jsx(Button, null, \"Dropright\"), __jsx(Dropdown.Toggle, {\n      split: true\n    }), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Another action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Something else here\"), __jsx(Dropdown.Divider, null), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Separated lin\"))), __jsx(ButtonGroup, {\n      className: \"mb-2\"\n    }, __jsx(Dropdown.Uncontrolled, {\n      group: true,\n      direction: \"left\"\n    }, __jsx(Dropdown.Toggle, {\n      split: true\n    }), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Another action\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Something else here\"), __jsx(Dropdown.Divider, null), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Separated lin\"))), __jsx(Button, null, \"Dropleft\")))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Vertical\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Make a set of buttons appear vertically stacked rather than horizontally\"), __jsx(ButtonGroup, {\n      vertical: true,\n      className: \"mr-2\"\n    }, __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\")), __jsx(ButtonGroup, {\n      vertical: true\n    }, __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\"), __jsx(Dropdown.Uncontrolled, {\n      group: true\n    }, __jsx(Dropdown.Toggle, null, \"Dropdown\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Link\"), __jsx(Dropdown.Item, {\n      href: \"#\"\n    }, \"Link\"))), __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\"), __jsx(Button, null, \"Button\"))))), __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Toolbar\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Combine sets of button groups into button toolbars for more complex components. Use utility classes as needed to space out groups, buttons, and more.\"), __jsx(ButtonToolbar, {\n      className: \"mb-2\"\n    }, __jsx(ButtonGroup, {\n      className: \"mr-2\"\n    }, __jsx(Button, null, \"1\"), __jsx(Button, null, \"2\"), __jsx(Button, null, \"3\"), __jsx(Button, null, \"4\")), __jsx(ButtonGroup, {\n      className: \"mr-2\"\n    }, __jsx(Button, null, \"5\"), __jsx(Button, null, \"6\"), __jsx(Button, null, \"7\")), __jsx(ButtonGroup, null, __jsx(Button, null, \"8\"))), __jsx(ButtonToolbar, null, __jsx(ButtonGroup, {\n      className: \"mr-2 mb-2 mb-sm-0\"\n    }, __jsx(Button, null, \"1\"), __jsx(Button, null, \"2\"), __jsx(Button, null, \"3\"), __jsx(Button, null, \"4\")), __jsx(InputGroup, null, __jsx(InputGroup.Addon, {\n      addonType: \"prepend\"\n    }, __jsx(InputGroup.Text, null, \"@\")), __jsx(Input, {\n      type: \"text\",\n      placeholder: \"Input group example\"\n    }))))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Nesting\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Add \", __jsx(\"code\", null, \"group\"), \" property to the dropdown element when you want dropdown menus mixed with a series of buttons.\"), __jsx(ButtonGroup, null, __jsx(Button, null, \"1\"), __jsx(Button, null, \"2\"), __jsx(Dropdown.Uncontrolled, {\n      group: true\n    }, __jsx(Dropdown.Toggle, {\n      caret: true\n    }, \"Dropdown\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n      href: \"3\"\n    }, \"Link\"), __jsx(Dropdown.Item, {\n      href: \"3\"\n    }, \"Link\")))))), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Radio and Checkbox\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Do more with buttons. Control button states or create groups of butons for more components like toolbars.\"), __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Radio\")), __jsx(Portlet.Body, null, __jsx(ButtonGroupRadio, null))), __jsx(Portlet, {\n      className: \"mb-0\"\n    }, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Checkbox\")), __jsx(Portlet.Body, null, __jsx(ButtonGroupCheckbox, null)))))))));\n  }\n\n} // Radio button group example\n\n\nclass ButtonGroupRadio extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      activeButton: 1\n    });\n\n    _defineProperty(this, \"handleClick\", id => {\n      this.setState({\n        activeButton: id\n      });\n    });\n  }\n\n  render() {\n    const {\n      activeButton\n    } = this.state;\n    return __jsx(ButtonGroup, null, __jsx(Button, {\n      active: activeButton === 1,\n      onClick: ref => this.handleClick(1),\n      variant: \"flat-primary\"\n    }, \"Radio\"), __jsx(Button, {\n      active: activeButton === 2,\n      onClick: ref => this.handleClick(2),\n      variant: \"flat-primary\"\n    }, \"Radio\"), __jsx(Button, {\n      active: activeButton === 3,\n      onClick: ref => this.handleClick(3),\n      variant: \"flat-primary\"\n    }, \"Radio\"));\n  }\n\n} // Checkbox button group example\n\n\nclass ButtonGroupCheckbox extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      1: true,\n      2: false,\n      3: false\n    });\n\n    _defineProperty(this, \"handleClick\", id => {\n      this.setState({\n        [id]: !this.state[id]\n      });\n    });\n  }\n\n  render() {\n    return __jsx(ButtonGroup, null, __jsx(Button, {\n      active: this.state[1],\n      onClick: ref => this.handleClick(1),\n      variant: \"flat-primary\"\n    }, \"Checkbox\"), __jsx(Button, {\n      active: this.state[2],\n      onClick: ref => this.handleClick(2),\n      variant: \"flat-primary\"\n    }, \"Checkbox\"), __jsx(Button, {\n      active: this.state[3],\n      onClick: ref => this.handleClick(3),\n      variant: \"flat-primary\"\n    }, \"Checkbox\"));\n  }\n\n}\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle,\n    breadcrumbChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withLayout(ButtonGroupPage));","map":null,"metadata":{},"sourceType":"module"}