{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport ButtonMarker from \"./ButtonMarker\";\nimport ButtonCounter from \"./ButtonCounter\";\nconst defaultProps = {\n  variant: \"primary\",\n  tag: \"button\"\n};\n\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n  }\n\n  render() {\n    let _this$props = this.props,\n        {\n      \"aria-label\": label,\n      className,\n      cssModule,\n      innerRef,\n      onClick,\n      disabled,\n      variant,\n      height,\n      active,\n      circle,\n      width,\n      block,\n      icon,\n      pill,\n      size,\n      tag: Tag\n    } = _this$props,\n        attributes = _objectWithoutProperties(_this$props, [\"aria-label\", \"className\", \"cssModule\", \"innerRef\", \"onClick\", \"disabled\", \"variant\", \"height\", \"active\", \"circle\", \"width\", \"block\", \"icon\", \"pill\", \"size\", \"tag\"]);\n\n    const classes = mapToCssModules(classNames(\"btn\", `btn-${variant}`, {\n      \"btn-icon\": icon,\n      \"btn-pill\": pill,\n      \"btn-block\": block,\n      \"btn-circle\": circle,\n      [`btn-${size}`]: size,\n      [`btn-${width}`]: width,\n      [`btn-${height}`]: height,\n      active,\n      disabled\n    }, className), cssModule);\n\n    if (attributes.href && Tag === \"button\") {\n      Tag = \"a\";\n    }\n\n    return __jsx(Tag, _extends({\n      type: Tag === \"button\" && attributes.onClick ? \"button\" : undefined\n    }, attributes, {\n      className: classes,\n      ref: innerRef,\n      onClick: this.onClick,\n      \"aria-label\": label\n    }));\n  }\n\n}\n\nButton.defaultProps = defaultProps;\nButton.Marker = ButtonMarker;\nButton.Counter = ButtonCounter;\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}