{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { mapToCssModules, refPropType } from \"./utils\";\nimport CustomFileInput from \"./CustomFileInput\";\n\nconst CustomInput = props => {\n  const {\n    className,\n    cssModule,\n    children,\n    innerRef,\n    htmlFor,\n    invalid,\n    valid,\n    inline,\n    label,\n    size,\n    type\n  } = props,\n        attributes = _objectWithoutProperties(props, [\"className\", \"cssModule\", \"children\", \"innerRef\", \"htmlFor\", \"invalid\", \"valid\", \"inline\", \"label\", \"size\", \"type\"]);\n\n  let sizeClass = false;\n\n  if (size) {\n    if (type === \"checkbox\" || type === \"radio\" || type === \"switch\") {\n      sizeClass = `custom-control-${size}`;\n    } else {\n      sizeClass = `custom-${type}-${size}`;\n    }\n  }\n\n  const customClass = mapToCssModules(classNames(`custom-${type}`, sizeClass, className), cssModule);\n  const validationClassNames = mapToCssModules(classNames(invalid && \"is-invalid\", valid && \"is-valid\"), cssModule);\n  const labelHtmlFor = htmlFor || attributes.id;\n\n  if (type === \"select\") {\n    const {\n      type\n    } = attributes,\n          rest = _objectWithoutProperties(attributes, [\"type\"]);\n\n    return __jsx(\"select\", _extends({}, rest, {\n      type: type,\n      ref: innerRef,\n      className: classNames(validationClassNames, customClass),\n      \"aria-invalid\": invalid\n    }), children);\n  }\n\n  if (type === \"file\") {\n    return __jsx(CustomFileInput, props);\n  }\n\n  if (type !== \"checkbox\" && type !== \"radio\" && type !== \"switch\") {\n    return __jsx(\"input\", _extends({}, attributes, {\n      type: type,\n      ref: innerRef,\n      \"aria-invalid\": invalid,\n      className: classNames(validationClassNames, customClass)\n    }));\n  }\n\n  const wrapperClasses = classNames(customClass, mapToCssModules(classNames(\"custom-control\", {\n    \"custom-control-inline\": inline\n  }), cssModule));\n\n  const {\n    hidden\n  } = attributes,\n        rest = _objectWithoutProperties(attributes, [\"hidden\"]);\n\n  return __jsx(\"div\", {\n    className: wrapperClasses,\n    hidden: hidden || false\n  }, __jsx(\"input\", _extends({}, rest, {\n    type: type === \"switch\" ? \"checkbox\" : type,\n    ref: innerRef,\n    \"aria-invalid\": invalid,\n    className: classNames(validationClassNames, mapToCssModules(\"custom-control-input\", cssModule))\n  })), __jsx(\"label\", {\n    className: mapToCssModules(\"custom-control-label\", cssModule),\n    htmlFor: labelHtmlFor\n  }, label), children);\n};\n\nexport default CustomInput;","map":null,"metadata":{},"sourceType":"module"}