{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { mapToCssModules, tagPropType, refPropType } from \"./utils\";\nimport classNames from \"classnames\";\nimport Fade from \"./Fade\";\nimport AlertLink from \"./AlertLink\";\nimport AlertHeader from \"./AlertHeader\";\nconst defaultProps = {\n  closeClassName: \"btn btn-text-danger btn-icon\",\n  closeAriaLabel: \"Close\",\n  transition: _objectSpread(_objectSpread({}, Fade.defaultProps), {}, {\n    unmountOnExit: true\n  }),\n  variant: \"primary\",\n  isOpen: true,\n  fade: false,\n  tag: \"div\"\n};\n\nconst Alert = props => {\n  const {\n    closeClassName,\n    closeAriaLabel,\n    className,\n    cssModule,\n    transition,\n    innerRef,\n    children,\n    variant,\n    isOpen,\n    toggle,\n    fade,\n    icon,\n    tag: Tag\n  } = props,\n        attributes = _objectWithoutProperties(props, [\"closeClassName\", \"closeAriaLabel\", \"className\", \"cssModule\", \"transition\", \"innerRef\", \"children\", \"variant\", \"isOpen\", \"toggle\", \"fade\", \"icon\", \"tag\"]);\n\n  const classes = mapToCssModules(classNames(\"alert\", `alert-${variant}`, {\n    \"alert-dismissible\": toggle\n  }, className), cssModule);\n  const closeClasses = mapToCssModules(classNames(closeClassName), cssModule);\n  const iconClasses = mapToCssModules(classNames(\"alert-icon\"), cssModule);\n  const contentClasses = mapToCssModules(classNames(\"alert-content\"), cssModule);\n\n  const alertTransition = _objectSpread(_objectSpread(_objectSpread({}, Fade.defaultProps), transition), {}, {\n    baseClass: fade ? transition.baseClass : \"\",\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return __jsx(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), icon ? __jsx(\"div\", {\n    className: iconClasses\n  }, icon) : null, __jsx(\"div\", {\n    className: contentClasses\n  }, children), toggle ? __jsx(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, __jsx(FontAwesomeIcon, {\n    icon: faTimes\n  })) : null);\n};\n\nclass AlertUncontrolled extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return __jsx(Alert, _extends({\n      isOpen: this.state.isOpen,\n      toggle: this.toggle\n    }, this.props));\n  }\n\n}\n\nAlert.defaultProps = defaultProps;\nAlert.Link = AlertLink;\nAlert.Header = AlertHeader;\nAlert.Uncontrolled = AlertUncontrolled;\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}