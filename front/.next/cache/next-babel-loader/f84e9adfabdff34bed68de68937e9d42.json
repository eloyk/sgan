{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport ApexCharts from \"./apexcharts\";\nwindow.ApexCharts = ApexCharts;\n\nvar Charts = /*#__PURE__*/function (_React$Component) {\n  _inherits(Charts, _React$Component);\n\n  var _super = _createSuper(Charts);\n\n  function Charts(props) {\n    var _this;\n\n    _classCallCheck(this, Charts);\n\n    _this = _super.call(this, props);\n\n    if (React.createRef) {\n      _this.chartRef = /*#__PURE__*/React.createRef();\n    } else {\n      _this.setRef = function (el) {\n        return _this.chartRef = el;\n      };\n    }\n\n    _this.chart = null;\n    return _this;\n  }\n\n  _createClass(Charts, [{\n    key: \"render\",\n    value: function render() {\n      var props = _extends({}, this.props);\n\n      return /*#__PURE__*/React.createElement(\"div\", _objectSpread({\n        ref: React.createRef ? this.chartRef : this.setRef\n      }, props));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var current = React.createRef ? this.chartRef.current : this.chartRef;\n      this.chart = new ApexCharts(current, this.getConfig());\n      this.chart.render();\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var _this$props = this.props,\n          type = _this$props.type,\n          height = _this$props.height,\n          width = _this$props.width,\n          series = _this$props.series,\n          options = _this$props.options;\n      var newOptions = {\n        chart: {\n          type: type,\n          height: height,\n          width: width\n        },\n        series: series\n      };\n      return this.extend(options, newOptions);\n    }\n  }, {\n    key: \"isObject\",\n    value: function isObject(item) {\n      return item && typeof item === \"object\" && !Array.isArray(item) && item != null;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(target, source) {\n      var _this2 = this;\n\n      if (typeof Object.assign !== \"function\") {\n        ;\n\n        (function () {\n          Object.assign = function (target) {\n            // We must check against these specific cases.\n            if (target === undefined || target === null) {\n              throw new TypeError(\"Cannot convert undefined or null to object\");\n            }\n\n            var output = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n              var _source = arguments[index];\n\n              if (_source !== undefined && _source !== null) {\n                for (var nextKey in _source) {\n                  if (_source.hasOwnProperty(nextKey)) {\n                    output[nextKey] = _source[nextKey];\n                  }\n                }\n              }\n            }\n\n            return output;\n          };\n        })();\n      }\n\n      var output = Object.assign({}, target);\n\n      if (this.isObject(target) && this.isObject(source)) {\n        Object.keys(source).forEach(function (key) {\n          if (_this2.isObject(source[key])) {\n            if (!(key in target)) {\n              Object.assign(output, _defineProperty({}, key, source[key]));\n            } else {\n              output[key] = _this2.extend(target[key], source[key]);\n            }\n          } else {\n            Object.assign(output, _defineProperty({}, key, source[key]));\n          }\n        });\n      }\n\n      return output;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      console.log(this.chart);\n\n      if (prevProps !== this.props) {\n        this.chart.updateOptions(this.getConfig());\n        this.chart.updateSeries(this.props.series);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.chart && typeof this.chart.destroy === \"function\") this.chart.destroy();\n    }\n  }]);\n\n  return Charts;\n}(React.Component);\n\nCharts.defaultProps = {\n  type: \"line\",\n  width: \"100%\",\n  height: \"auto\"\n};\nexport default Charts;","map":null,"metadata":{},"sourceType":"module"}