{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Row, Col, Button, Portlet } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { connect } from \"react-redux\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport Chart from \"@panely/apexcharts\";\nimport Link from \"next/link\";\n\nvar Widget26Component = /*#__PURE__*/function (_React$Component) {\n  _inherits(Widget26Component, _React$Component);\n\n  var _super = _createSuper(Widget26Component);\n\n  function Widget26Component() {\n    var _this;\n\n    _classCallCheck(this, Widget26Component);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      highlight: \"3,478\",\n      title: \"Sales this month\",\n      link: \"#\",\n      list: [function () {\n        return __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"text-success\"\n        }, __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faCaretUp\n        }), \"+11% more sales\"), \"in comparison to last month\");\n      }, function () {\n        return __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"text-danger\"\n        }, __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faCaretDown\n        }), \"-2% revenue pre sales\"), \"in comparison to last month\");\n      }]\n    });\n\n    return _this;\n  }\n\n  _createClass(Widget26Component, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          highlight = _this$state.highlight,\n          title = _this$state.title,\n          link = _this$state.link,\n          list = _this$state.list;\n      return __jsx(Portlet, null, __jsx(Portlet.Header, {\n        bordered: true\n      }, __jsx(Portlet.Icon, null, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faBoxes\n      })), __jsx(Portlet.Title, null, \"Sales change\")), __jsx(Portlet.Body, null, __jsx(Row, null, __jsx(Col, {\n        md: \"6\",\n        lg: \"5\",\n        className: \"p-5\"\n      }, __jsx(\"h3\", {\n        className: \"display-4\",\n        children: highlight\n      }), __jsx(\"span\", {\n        className: \"text-muted\",\n        children: title\n      }), list.map(function (Data, index) {\n        return __jsx(\"p\", {\n          key: index,\n          className: \"text-level-2 my-3\"\n        }, __jsx(Data, null));\n      }), __jsx(Link, {\n        href: link\n      }, __jsx(Button, {\n        variant: \"label-primary\",\n        width: \"widest\"\n      }, \"View details\"))), __jsx(Col, {\n        md: \"6\",\n        lg: \"7\"\n      }, __jsx(Widget26Chart, {\n        theme: this.props.theme\n      })))));\n    }\n  }]);\n\n  return Widget26Component;\n}(React.Component);\n\nvar Widget26Chart = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Widget26Chart, _React$Component2);\n\n  var _super2 = _createSuper(Widget26Chart);\n\n  function Widget26Chart() {\n    var _this2;\n\n    _classCallCheck(this, Widget26Chart);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this2), \"state\", {\n      // Chart options\n      options: {\n        theme: {\n          mode: _this2.props.theme,\n          palette: \"palette1\"\n        },\n        chart: {\n          toolbar: {\n            show: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          opacity: 0\n        },\n        stroke: {\n          show: true,\n          colors: [\"#2196f3\"],\n          lineCap: \"round\"\n        },\n        markers: {\n          colors: _this2.props.theme === \"dark\" ? \"#424242\" : \"#fff\",\n          strokeWidth: 4,\n          strokeColors: \"#2196f3\"\n        },\n        tooltip: {\n          marker: {\n            show: false\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"\".concat(val, \" Products\");\n            } // Format chart tooltip value\n\n          }\n        },\n        xaxis: {\n          categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"]\n        }\n      },\n      // Chart series data\n      series: [{\n        name: \"Sales\",\n        data: [640, 400, 760, 620, 980, 640]\n      }]\n    });\n\n    return _this2;\n  }\n\n  _createClass(Widget26Chart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.theme !== prevProps.theme) {\n        var newState = this.state; // Change chart options\n\n        newState.options.theme = {\n          mode: this.props.theme,\n          palette: \"palette1\"\n        };\n        newState.options.markers.colors = this.props.theme === \"dark\" ? \"#424242\" : \"#fff\";\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          options = _this$state2.options,\n          series = _this$state2.series;\n      return __jsx(Chart, {\n        type: \"area\",\n        options: options,\n        series: series,\n        height: 300\n      });\n    }\n  }]);\n\n  return Widget26Chart;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    theme: state.page.theme\n  };\n}\n\nexport default connect(mapStateToProps)(Widget26Component);","map":null,"metadata":{},"sourceType":"module"}