{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport ApexCharts from \"./apexcharts\";\nwindow.ApexCharts = ApexCharts;\n\nclass Charts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (React.createRef) {\n      this.chartRef = /*#__PURE__*/React.createRef();\n    } else {\n      this.setRef = el => this.chartRef = el;\n    }\n\n    this.chart = null;\n  }\n\n  render() {\n    const props = Object.assign({}, this.props);\n    return /*#__PURE__*/React.createElement(\"div\", _objectSpread({\n      ref: React.createRef ? this.chartRef : this.setRef\n    }, props));\n  }\n\n  componentDidMount() {\n    const current = React.createRef ? this.chartRef.current : this.chartRef;\n    this.chart = new ApexCharts(current, this.getConfig());\n    this.chart.render();\n  }\n\n  getConfig() {\n    const {\n      type,\n      height,\n      width,\n      series,\n      options\n    } = this.props;\n    const newOptions = {\n      chart: {\n        type,\n        height,\n        width\n      },\n      series\n    };\n    return this.extend(options, newOptions);\n  }\n\n  isObject(item) {\n    return item && typeof item === \"object\" && !Array.isArray(item) && item != null;\n  }\n\n  extend(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      ;\n\n      (function () {\n        Object.assign = function (target) {\n          // We must check against these specific cases.\n          if (target === undefined || target === null) {\n            throw new TypeError(\"Cannot convert undefined or null to object\");\n          }\n\n          let output = Object(target);\n\n          for (let index = 1; index < arguments.length; index++) {\n            let source = arguments[index];\n\n            if (source !== undefined && source !== null) {\n              for (let nextKey in source) {\n                if (source.hasOwnProperty(nextKey)) {\n                  output[nextKey] = source[nextKey];\n                }\n              }\n            }\n          }\n\n          return output;\n        };\n      })();\n    }\n\n    let output = Object.assign({}, target);\n\n    if (this.isObject(target) && this.isObject(source)) {\n      Object.keys(source).forEach(key => {\n        if (this.isObject(source[key])) {\n          if (!(key in target)) {\n            Object.assign(output, {\n              [key]: source[key]\n            });\n          } else {\n            output[key] = this.extend(target[key], source[key]);\n          }\n        } else {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        }\n      });\n    }\n\n    return output;\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.chart);\n\n    if (prevProps !== this.props) {\n      this.chart.updateOptions(this.getConfig());\n      this.chart.updateSeries(this.props.series);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.chart && typeof this.chart.destroy === \"function\") this.chart.destroy();\n  }\n\n}\n\nCharts.defaultProps = {\n  type: \"line\",\n  width: \"100%\",\n  height: \"auto\"\n};\nexport default Charts;","map":null,"metadata":{},"sourceType":"module"}