{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Form, Label, Input, Button, Portlet, Spinner, Container, CustomInput, FloatLabel, Widget12 } from \"@panely/components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useForm, Controller } from \"react-hook-form\"; //import { firebaseClient } from \"components/firebase/firebaseClient\"\n\nimport { yupResolver } from \"@hookform/resolvers\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport * as yup from \"yup\"; //import verifyCookie from \"components/firebase/firebaseVerifyCookie\"\n\nimport verifyCurrentUser from \"components/firebase/verifyCurrentUser\";\nimport withLayout from \"components/layout/withLayout\";\nimport swalContent from \"sweetalert2-react-content\";\nimport Router from \"next/router\";\nimport Swal from \"@panely/sweetalert2\";\nimport Link from \"next/link\";\nimport Head from \"next/head\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PAGE from \"config/page.config\"; //import authMethod from \"../components/firebase/clientAuth\"\n// Use SweetAlert React Content library\n\nconst ReactSwal = swalContent(Swal); // Set SweetAlert options\n\nconst swal = ReactSwal.mixin({\n  customClass: {\n    confirmButton: \"btn btn-label-success btn-wide mx-1\",\n    cancelButton: \"btn btn-label-danger btn-wide mx-1\"\n  },\n  buttonsStyling: false\n});\n\nfunction LoginPage() {\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Login | Panely\")), __jsx(Container, {\n    fluid: true\n  }, __jsx(Row, {\n    noGutters: true,\n    className: \"align-items-center justify-content-center h-100\"\n  }, __jsx(Col, {\n    sm: \"8\",\n    md: \"6\",\n    lg: \"4\"\n  }, __jsx(Portlet, null, __jsx(Portlet.Body, null, __jsx(\"div\", {\n    className: \"text-center mt-2 mb-4\"\n  }, __jsx(Widget12, {\n    display: true,\n    circle: true,\n    variant: \"label-primary\",\n    className: \"mb-4\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faUserAlt\n  }))), __jsx(LoginForm, null)))))));\n}\n\nfunction LoginForm() {\n  // Loading state\n  const [loading, setLoading] = React.useState(false); // Define Yup schema for form validation\n\n  const schema = yup.object().shape({\n    email: yup.string().email(\"Your email is not valid\").required(\"Please enter your email\"),\n    password: yup.string().min(6, \"Please enter at least 6 characters\").required(\"Please provide your password\")\n  });\n  const {\n    control,\n    handleSubmit,\n    errors\n  } = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    }\n  }); // Handle form submit event\n\n  const onSubmit = async ({\n    email,\n    password\n  }) => {\n    // Show loading indicator\n    setLoading(true); // authMethod.login(\n    //   email,\n    //   password,\n    // {\n    //   onSuccess: () => Router.push(Router.query.redirect || PAGE.dashboardPagePath)\n    // })\n    // .then()\n    // .catch(err => {\n    //   // Show the error message if authentication is failed\n    //   swal.fire({ text: err, icon: \"error\" })\n    //   console.log(`Este es el usuario: ${email}, esta la claver de seguridad: ${password}, error: ${err}`)\n    // });\n    // Hide loading indicator\n\n    setLoading(false);\n  };\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, {\n    size: \"lg\"\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"email\",\n    id: \"email\",\n    name: \"email\",\n    size: \"lg\",\n    control: control,\n    invalid: Boolean(errors.email),\n    placeholder: \"Please insert your email\"\n  }), __jsx(Label, {\n    for: \"email\"\n  }, \"Email\"), errors.email && __jsx(Form.Feedback, {\n    children: errors.email.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, {\n    size: \"lg\"\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"password\",\n    id: \"password\",\n    name: \"password\",\n    size: \"lg\",\n    control: control,\n    invalid: Boolean(errors.password),\n    placeholder: \"Please insert your password\"\n  }), __jsx(Label, {\n    for: \"password\"\n  }, \"Password\"), errors.password && __jsx(Form.Feedback, {\n    children: errors.password.message\n  }))), __jsx(\"div\", {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"span\", null, \"Don't have an account ? \", __jsx(Link, {\n    href: \"/register\"\n  }, \"Sign Up\")), __jsx(Button, {\n    type: \"submit\",\n    variant: \"label-primary\",\n    size: \"lg\",\n    width: \"widest\",\n    disabled: loading\n  }, loading ? __jsx(Spinner, {\n    className: \"mr-2\"\n  }) : null, \" Login\")));\n}\n\nLoginPage.getInitialProps = async ctx => {\n  const result = await verifyCurrentUser(ctx); // Redirect to dashboard page if the user has logged in\n\n  if (result) {\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: ctx.query.redirect || PAGE.dashboardPagePath\n      });\n      ctx.res.end();\n    } else {\n      Router.push(Router.query.redirect || PAGE.dashboardPagePath);\n    }\n  }\n\n  return {\n    currentUser: null\n  };\n};\n\nexport default withLayout(LoginPage, \"blank\");","map":null,"metadata":{},"sourceType":"module"}