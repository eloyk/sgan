{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport Fade from \"./Fade\";\nimport Portal from \"./Portal\";\nimport ModalBody from \"./ModalBody\";\nimport ModalHeader from \"./ModalHeader\";\nimport ModalFooter from \"./ModalFooter\";\nimport { getOriginalBodyPadding, conditionallyUpdateScrollbar, setScrollbarWidth, mapToCssModules, omit, focusableElements, TransitionTimeouts, keyCodes, targetPropType, getTarget } from \"./utils\";\n\nfunction noop() {}\n\nvar FadePropTypes = PropTypes.shape(Fade.propTypes);\nvar propTypes = {\n  isOpen: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  centered: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.string,\n  toggle: PropTypes.func,\n  keyboard: PropTypes.bool,\n  role: PropTypes.string,\n  labelledBy: PropTypes.string,\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf([\"static\"])]),\n  onEnter: PropTypes.func,\n  onExit: PropTypes.func,\n  onOpened: PropTypes.func,\n  onClosed: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  external: PropTypes.node,\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  backdropTransition: FadePropTypes,\n  modalTransition: FadePropTypes,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func]),\n  unmountOnClose: PropTypes.bool,\n  returnFocusAfterClose: PropTypes.bool,\n  container: targetPropType\n};\nvar propsToOmit = Object.keys(propTypes);\nvar defaultProps = {\n  isOpen: false,\n  autoFocus: true,\n  centered: false,\n  scrollable: false,\n  role: \"dialog\",\n  backdrop: true,\n  keyboard: true,\n  zIndex: 1220,\n  fade: true,\n  onOpened: noop,\n  onClosed: noop,\n  modalTransition: {\n    timeout: TransitionTimeouts.Modal\n  },\n  backdropTransition: {\n    mountOnEnter: true,\n    timeout: TransitionTimeouts.Fade // uses standard fade transition\n\n  },\n  unmountOnClose: true,\n  returnFocusAfterClose: true,\n  container: \"body\"\n};\n\nvar Modal = /*#__PURE__*/function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal(props) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _super.call(this, props);\n    _this._element = null;\n    _this._originalBodyPadding = null;\n    _this.getFocusableChildren = _this.getFocusableChildren.bind(_assertThisInitialized(_this));\n    _this.handleBackdropClick = _this.handleBackdropClick.bind(_assertThisInitialized(_this));\n    _this.handleBackdropMouseDown = _this.handleBackdropMouseDown.bind(_assertThisInitialized(_this));\n    _this.handleEscape = _this.handleEscape.bind(_assertThisInitialized(_this));\n    _this.handleStaticBackdropAnimation = _this.handleStaticBackdropAnimation.bind(_assertThisInitialized(_this));\n    _this.handleTab = _this.handleTab.bind(_assertThisInitialized(_this));\n    _this.onOpened = _this.onOpened.bind(_assertThisInitialized(_this));\n    _this.onClosed = _this.onClosed.bind(_assertThisInitialized(_this));\n    _this.manageFocusAfterClose = _this.manageFocusAfterClose.bind(_assertThisInitialized(_this));\n    _this.clearBackdropAnimationTimeout = _this.clearBackdropAnimationTimeout.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isOpen: false,\n      showStaticBackdropAnimation: false\n    };\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          autoFocus = _this$props.autoFocus,\n          onEnter = _this$props.onEnter;\n\n      if (isOpen) {\n        this.init();\n        this.setState({\n          isOpen: true\n        });\n\n        if (autoFocus) {\n          this.setFocus();\n        }\n      }\n\n      if (onEnter) {\n        onEnter();\n      }\n\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.isOpen && !prevProps.isOpen) {\n        this.init();\n        this.setState({\n          isOpen: true\n        }); // let render() renders Modal Dialog first\n\n        return;\n      } // now Modal Dialog is rendered and we can refer this._element and this._dialog\n\n\n      if (this.props.autoFocus && this.state.isOpen && !prevState.isOpen) {\n        this.setFocus();\n      }\n\n      if (this._element && prevProps.zIndex !== this.props.zIndex) {\n        this._element.style.zIndex = this.props.zIndex;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearBackdropAnimationTimeout();\n\n      if (this.props.onExit) {\n        this.props.onExit();\n      }\n\n      if (this._element) {\n        this.destroy();\n\n        if (this.props.isOpen || this.state.isOpen) {\n          this.close();\n        }\n      }\n\n      this._isMounted = false;\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(node, isAppearing) {\n      this.props.onOpened()(this.props.modalTransition.onEntered || noop)(node, isAppearing);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(node) {\n      var unmountOnClose = this.props.unmountOnClose; // so all methods get called before it is unmounted\n\n      this.props.onClosed()(this.props.modalTransition.onExited || noop)(node);\n\n      if (unmountOnClose) {\n        this.destroy();\n      }\n\n      this.close();\n\n      if (this._isMounted) {\n        this.setState({\n          isOpen: false\n        });\n      }\n    }\n  }, {\n    key: \"setFocus\",\n    value: function setFocus() {\n      if (this._dialog && this._dialog.parentNode && typeof this._dialog.parentNode.focus === \"function\") {\n        this._dialog.parentNode.focus();\n      }\n    }\n  }, {\n    key: \"getFocusableChildren\",\n    value: function getFocusableChildren() {\n      return this._element.querySelectorAll(focusableElements.join(\", \"));\n    }\n  }, {\n    key: \"getFocusedChild\",\n    value: function getFocusedChild() {\n      var currentFocus;\n      var focusableChildren = this.getFocusableChildren();\n\n      try {\n        currentFocus = document.activeElement;\n      } catch (err) {\n        currentFocus = focusableChildren[0];\n      }\n\n      return currentFocus;\n    } // not mouseUp because scrollbar fires it, shouldn't close when user scrolls\n\n  }, {\n    key: \"handleBackdropClick\",\n    value: function handleBackdropClick(e) {\n      if (e.target === this._mouseDownElement) {\n        e.stopPropagation();\n        var backdrop = this._dialog ? this._dialog.parentNode : null;\n\n        if (backdrop && e.target === backdrop && this.props.backdrop === \"static\") {\n          this.handleStaticBackdropAnimation();\n        }\n\n        if (!this.props.isOpen || this.props.backdrop !== true) return;\n\n        if (backdrop && e.target === backdrop && this.props.toggle) {\n          this.props.toggle(e);\n        }\n      }\n    }\n  }, {\n    key: \"handleTab\",\n    value: function handleTab(e) {\n      if (e.which !== 9) return;\n      var focusableChildren = this.getFocusableChildren();\n      var totalFocusable = focusableChildren.length;\n      if (totalFocusable === 0) return;\n      var currentFocus = this.getFocusedChild();\n      var focusedIndex = 0;\n\n      for (var i = 0; i < totalFocusable; i += 1) {\n        if (focusableChildren[i] === currentFocus) {\n          focusedIndex = i;\n          break;\n        }\n      }\n\n      if (e.shiftKey && focusedIndex === 0) {\n        e.preventDefault();\n        focusableChildren[totalFocusable - 1].focus();\n      } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {\n        e.preventDefault();\n        focusableChildren[0].focus();\n      }\n    }\n  }, {\n    key: \"handleBackdropMouseDown\",\n    value: function handleBackdropMouseDown(e) {\n      this._mouseDownElement = e.target;\n    }\n  }, {\n    key: \"handleEscape\",\n    value: function handleEscape(e) {\n      if (this.props.isOpen && e.keyCode === keyCodes.esc && this.props.toggle) {\n        if (this.props.keyboard) {\n          e.preventDefault();\n          e.stopPropagation();\n          this.props.toggle(e);\n        } else if (this.props.backdrop === \"static\") {\n          e.preventDefault();\n          e.stopPropagation();\n          this.handleStaticBackdropAnimation();\n        }\n      }\n    }\n  }, {\n    key: \"handleStaticBackdropAnimation\",\n    value: function handleStaticBackdropAnimation() {\n      var _this2 = this;\n\n      this.clearBackdropAnimationTimeout();\n      this.setState({\n        showStaticBackdropAnimation: true\n      });\n      this._backdropAnimationTimeout = setTimeout(function () {\n        _this2.setState({\n          showStaticBackdropAnimation: false\n        });\n      }, 100);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      try {\n        this._triggeringElement = document.activeElement;\n      } catch (err) {\n        this._triggeringElement = null;\n      }\n\n      if (!this._element) {\n        this._element = document.createElement(\"div\");\n\n        this._element.setAttribute(\"tabindex\", \"-1\");\n\n        this._element.style.position = \"relative\";\n        this._element.style.zIndex = this.props.zIndex;\n        this._mountContainer = getTarget(this.props.container);\n\n        this._mountContainer.appendChild(this._element);\n      }\n\n      this._originalBodyPadding = getOriginalBodyPadding();\n      conditionallyUpdateScrollbar();\n\n      if (Modal.openCount === 0) {\n        document.body.className = classNames(document.body.className, mapToCssModules(\"modal-open\", this.props.cssModule));\n      }\n\n      Modal.openCount += 1;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._element) {\n        this._mountContainer.removeChild(this._element);\n\n        this._element = null;\n      }\n\n      this.manageFocusAfterClose();\n    }\n  }, {\n    key: \"manageFocusAfterClose\",\n    value: function manageFocusAfterClose() {\n      if (this._triggeringElement) {\n        var returnFocusAfterClose = this.props.returnFocusAfterClose;\n        if (this._triggeringElement.focus && returnFocusAfterClose) this._triggeringElement.focus();\n        this._triggeringElement = null;\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (Modal.openCount <= 1) {\n        var modalOpenClassName = mapToCssModules(\"modal-open\", this.props.cssModule); // Use regex to prevent matching `modal-open` as part of a different class, e.g. `my-modal-opened`\n\n        var modalOpenClassNameRegex = new RegExp(\"(^| )\".concat(modalOpenClassName, \"( |$)\"));\n        document.body.className = document.body.className.replace(modalOpenClassNameRegex, \" \").trim();\n      }\n\n      this.manageFocusAfterClose();\n      Modal.openCount = Math.max(0, Modal.openCount - 1);\n      setScrollbarWidth(this._originalBodyPadding);\n    }\n  }, {\n    key: \"renderModalDialog\",\n    value: function renderModalDialog() {\n      var _classNames,\n          _this3 = this;\n\n      var attributes = omit(this.props, propsToOmit);\n      var dialogBaseClass = \"modal-dialog\";\n      return __jsx(\"div\", _extends({}, attributes, {\n        className: mapToCssModules(classNames(dialogBaseClass, this.props.className, (_classNames = {}, _defineProperty(_classNames, \"modal-\".concat(this.props.size), this.props.size), _defineProperty(_classNames, \"\".concat(dialogBaseClass, \"-centered\"), this.props.centered), _defineProperty(_classNames, \"\".concat(dialogBaseClass, \"-scrollable\"), this.props.scrollable), _classNames)), this.props.cssModule),\n        role: \"document\",\n        ref: function ref(c) {\n          _this3._dialog = c;\n        }\n      }), __jsx(\"div\", {\n        className: mapToCssModules(classNames(\"modal-content\", this.props.contentClassName), this.props.cssModule)\n      }, this.props.children));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var unmountOnClose = this.props.unmountOnClose;\n\n      if (!!this._element && (this.state.isOpen || !unmountOnClose)) {\n        var isModalHidden = !!this._element && !this.state.isOpen && !unmountOnClose;\n        this._element.style.display = isModalHidden ? \"none\" : \"block\";\n        var _this$props2 = this.props,\n            wrapClassName = _this$props2.wrapClassName,\n            modalClassName = _this$props2.modalClassName,\n            backdropClassName = _this$props2.backdropClassName,\n            cssModule = _this$props2.cssModule,\n            isOpen = _this$props2.isOpen,\n            backdrop = _this$props2.backdrop,\n            role = _this$props2.role,\n            labelledBy = _this$props2.labelledBy,\n            external = _this$props2.external,\n            innerRef = _this$props2.innerRef;\n        var modalAttributes = {\n          onClick: this.handleBackdropClick,\n          onMouseDown: this.handleBackdropMouseDown,\n          onKeyUp: this.handleEscape,\n          onKeyDown: this.handleTab,\n          style: {\n            display: \"block\"\n          },\n          \"aria-labelledby\": labelledBy,\n          role: role,\n          tabIndex: \"-1\"\n        };\n        var hasTransition = this.props.fade;\n\n        var modalTransition = _objectSpread(_objectSpread(_objectSpread({}, Fade.defaultProps), this.props.modalTransition), {}, {\n          baseClass: hasTransition ? this.props.modalTransition.baseClass : \"\",\n          timeout: hasTransition ? this.props.modalTransition.timeout : 0\n        });\n\n        var backdropTransition = _objectSpread(_objectSpread(_objectSpread({}, Fade.defaultProps), this.props.backdropTransition), {}, {\n          baseClass: hasTransition ? this.props.backdropTransition.baseClass : \"\",\n          timeout: hasTransition ? this.props.backdropTransition.timeout : 0\n        });\n\n        var Backdrop = backdrop && (hasTransition ? __jsx(Fade, _extends({}, backdropTransition, {\n          \"in\": isOpen && !!backdrop,\n          cssModule: cssModule,\n          className: mapToCssModules(classNames(\"modal-backdrop\", backdropClassName), cssModule)\n        })) : __jsx(\"div\", {\n          className: mapToCssModules(classNames(\"modal-backdrop\", \"show\", backdropClassName), cssModule)\n        }));\n        return __jsx(Portal, {\n          node: this._element\n        }, __jsx(\"div\", {\n          className: mapToCssModules(wrapClassName)\n        }, __jsx(Fade, _extends({}, modalAttributes, modalTransition, {\n          \"in\": isOpen,\n          onEntered: this.onOpened,\n          onExited: this.onClosed,\n          cssModule: cssModule,\n          className: mapToCssModules(classNames(\"modal\", modalClassName, this.state.showStaticBackdropAnimation && \"modal-static\"), cssModule),\n          innerRef: innerRef\n        }), external, this.renderModalDialog()), Backdrop));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"clearBackdropAnimationTimeout\",\n    value: function clearBackdropAnimationTimeout() {\n      if (this._backdropAnimationTimeout) {\n        clearTimeout(this._backdropAnimationTimeout);\n        this._backdropAnimationTimeout = undefined;\n      }\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nModal.defaultProps = defaultProps;\nModal.openCount = 0;\nModal.Body = ModalBody;\nModal.Header = ModalHeader;\nModal.Footer = ModalFooter;\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}