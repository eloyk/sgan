(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[1],{

/***/ "./src/modules/apexcharts/apexcharts.js":
/*!**********************************************!*\
  !*** ./src/modules/apexcharts/apexcharts.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * ApexCharts v3.17.0
 * (c) 2018-2020 Juned Chhipa
 * Released under the MIT License.
 */(function(global,factory){ true?module.exports=factory():undefined;})(this,function(){'use strict';function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _possibleConstructorReturn(self,call){if(call&&(typeof call==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread();}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter);}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance");}/*
   ** Generic functions which are not dependent on ApexCharts
   */var Utils=/*#__PURE__*/function(){function Utils(){_classCallCheck(this,Utils);}_createClass(Utils,[{key:"shadeRGBColor",value:function shadeRGBColor(percent,color){var f=color.split(','),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=parseInt(f[0].slice(4),10),G=parseInt(f[1],10),B=parseInt(f[2],10);return'rgb('+(Math.round((t-R)*p)+R)+','+(Math.round((t-G)*p)+G)+','+(Math.round((t-B)*p)+B)+')';}},{key:"shadeHexColor",value:function shadeHexColor(percent,color){var f=parseInt(color.slice(1),16),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=f>>16,G=f>>8&0x00ff,B=f&0x0000ff;return'#'+(0x1000000+(Math.round((t-R)*p)+R)*0x10000+(Math.round((t-G)*p)+G)*0x100+(Math.round((t-B)*p)+B)).toString(16).slice(1);}// beautiful color shading blending code
// http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors
},{key:"shadeColor",value:function shadeColor(p,color){if(color.length>7)return this.shadeRGBColor(p,color);else return this.shadeHexColor(p,color);}}],[{key:"bind",value:function bind(fn,me){return function(){return fn.apply(me,arguments);};}},{key:"isObject",value:function isObject(item){return item&&_typeof(item)==='object'&&!Array.isArray(item)&&item!=null;}},{key:"listToArray",value:function listToArray(list){var i,array=[];for(i=0;i<list.length;i++){array[i]=list[i];}return array;}// to extend defaults with user options
// credit: http://stackoverflow.com/questions/27936772/deep-object-merging-in-es6-es7#answer-34749873
},{key:"extend",value:function extend(target,source){var _this=this;if(typeof Object.assign!=='function'){(function(){Object.assign=function(target){if(target===undefined||target===null){throw new TypeError('Cannot convert undefined or null to object');}var output=Object(target);for(var index=1;index<arguments.length;index++){var _source=arguments[index];if(_source!==undefined&&_source!==null){for(var nextKey in _source){if(_source.hasOwnProperty(nextKey)){output[nextKey]=_source[nextKey];}}}}return output;};})();}var output=Object.assign({},target);if(this.isObject(target)&&this.isObject(source)){Object.keys(source).forEach(function(key){if(_this.isObject(source[key])){if(!(key in target)){Object.assign(output,_defineProperty({},key,source[key]));}else{output[key]=_this.extend(target[key],source[key]);}}else{Object.assign(output,_defineProperty({},key,source[key]));}});}return output;}},{key:"extendArray",value:function extendArray(arrToExtend,resultArr){var extendedArr=[];arrToExtend.map(function(item){extendedArr.push(Utils.extend(resultArr,item));});arrToExtend=extendedArr;return arrToExtend;}// If month counter exceeds 12, it starts again from 1
},{key:"monthMod",value:function monthMod(month){return month%12;}},{key:"clone",value:function clone(source){if(Object.prototype.toString.call(source)==='[object Array]'){var cloneResult=[];for(var i=0;i<source.length;i++){cloneResult[i]=this.clone(source[i]);}return cloneResult;}else if(_typeof(source)==='object'){var _cloneResult={};for(var prop in source){if(source.hasOwnProperty(prop)){_cloneResult[prop]=this.clone(source[prop]);}}return _cloneResult;}else{return source;}}},{key:"log10",value:function log10(x){return Math.log(x)/Math.LN10;}},{key:"roundToBase10",value:function roundToBase10(x){return Math.pow(10,Math.floor(Math.log10(x)));}},{key:"roundToBase",value:function roundToBase(x,base){return Math.pow(base,Math.floor(Math.log(x)/Math.log(base)));}},{key:"parseNumber",value:function parseNumber(val){if(val===null)return val;return parseFloat(val);}},{key:"randomId",value:function randomId(){return(new Date()%9e6).toString(16);}},{key:"noExponents",value:function noExponents(val){var data=String(val).split(/[eE]/);if(data.length===1)return data[0];var z='',sign=val<0?'-':'',str=data[0].replace('.',''),mag=Number(data[1])+1;if(mag<0){z=sign+'0.';while(mag++){z+='0';}return z+str.replace(/^-/,'');}mag-=str.length;while(mag--){z+='0';}return str+z;}},{key:"getDimensions",value:function getDimensions(el){var computedStyle=getComputedStyle(el);var ret=[];var elementHeight=el.clientHeight;var elementWidth=el.clientWidth;elementHeight-=parseFloat(computedStyle.paddingTop)+parseFloat(computedStyle.paddingBottom);elementWidth-=parseFloat(computedStyle.paddingLeft)+parseFloat(computedStyle.paddingRight);ret.push(elementWidth);ret.push(elementHeight);return ret;}},{key:"getBoundingClientRect",value:function getBoundingClientRect(element){var rect=element.getBoundingClientRect();return{top:rect.top,right:rect.right,bottom:rect.bottom,left:rect.left,width:element.clientWidth,height:element.clientHeight,x:rect.left,y:rect.top};}},{key:"getLargestStringFromArr",value:function getLargestStringFromArr(arr){return arr.reduce(function(a,b){if(Array.isArray(b)){b=b.reduce(function(aa,bb){return aa.length>bb.length?aa:bb;});}return a.length>b.length?a:b;},0);}// http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb#answer-12342275
},{key:"hexToRgba",value:function hexToRgba(){var hex=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'#999999';var opacity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.6;if(hex.substring(0,1)!=='#'){hex='#999999';}var h=hex.replace('#','');h=h.match(new RegExp('(.{'+h.length/3+'})','g'));for(var i=0;i<h.length;i++){h[i]=parseInt(h[i].length===1?h[i]+h[i]:h[i],16);}if(typeof opacity!=='undefined')h.push(opacity);return'rgba('+h.join(',')+')';}},{key:"getOpacityFromRGBA",value:function getOpacityFromRGBA(rgba){rgba=rgba.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);return rgba[3];}},{key:"rgb2hex",value:function rgb2hex(rgb){rgb=rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);return rgb&&rgb.length===4?'#'+('0'+parseInt(rgb[1],10).toString(16)).slice(-2)+('0'+parseInt(rgb[2],10).toString(16)).slice(-2)+('0'+parseInt(rgb[3],10).toString(16)).slice(-2):'';}},{key:"isColorHex",value:function isColorHex(color){return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);}},{key:"polarToCartesian",value:function polarToCartesian(centerX,centerY,radius,angleInDegrees){var angleInRadians=(angleInDegrees-90)*Math.PI/180.0;return{x:centerX+radius*Math.cos(angleInRadians),y:centerY+radius*Math.sin(angleInRadians)};}},{key:"escapeString",value:function escapeString(str){var escapeWith=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'x';var newStr=str.toString().slice();newStr=newStr.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi,escapeWith);return newStr;}},{key:"negToZero",value:function negToZero(val){return val<0?0:val;}},{key:"moveIndexInArray",value:function moveIndexInArray(arr,old_index,new_index){if(new_index>=arr.length){var k=new_index-arr.length+1;while(k--){arr.push(undefined);}}arr.splice(new_index,0,arr.splice(old_index,1)[0]);return arr;}},{key:"extractNumber",value:function extractNumber(s){return parseFloat(s.replace(/[^\d.]*/g,''));}},{key:"findAncestor",value:function findAncestor(el,cls){while((el=el.parentElement)&&!el.classList.contains(cls)){}return el;}},{key:"setELstyles",value:function setELstyles(el,styles){for(var key in styles){if(styles.hasOwnProperty(key)){el.style.key=styles[key];}}}},{key:"isNumber",value:function isNumber(value){return!isNaN(value)&&parseFloat(Number(value))===value&&!isNaN(parseInt(value,10));}},{key:"isFloat",value:function isFloat(n){return Number(n)===n&&n%1!==0;}},{key:"isSafari",value:function isSafari(){return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);}},{key:"isFirefox",value:function isFirefox(){return navigator.userAgent.toLowerCase().indexOf('firefox')>-1;}},{key:"isIE11",value:function isIE11(){if(window.navigator.userAgent.indexOf('MSIE')!==-1||window.navigator.appVersion.indexOf('Trident/')>-1){return true;}}},{key:"isIE",value:function isIE(){var ua=window.navigator.userAgent;var msie=ua.indexOf('MSIE ');if(msie>0){// IE 10 or older => return version number
return parseInt(ua.substring(msie+5,ua.indexOf('.',msie)),10);}var trident=ua.indexOf('Trident/');if(trident>0){// IE 11 => return version number
var rv=ua.indexOf('rv:');return parseInt(ua.substring(rv+3,ua.indexOf('.',rv)),10);}var edge=ua.indexOf('Edge/');if(edge>0){// Edge (IE 12+) => return version number
return parseInt(ua.substring(edge+5,ua.indexOf('.',edge)),10);}// other browser
return false;}}]);return Utils;}();/**
   * ApexCharts Filters Class for setting hover/active states on the paths.
   *
   * @module Formatters
   **/var Filters=/*#__PURE__*/function(){function Filters(ctx){_classCallCheck(this,Filters);this.ctx=ctx;this.w=ctx.w;}// create a re-usable filter which can be appended other filter effects and applied to multiple elements
_createClass(Filters,[{key:"getDefaultFilter",value:function getDefaultFilter(el,i){var w=this.w;el.unfilter(true);var filter=new window.SVG.Filter();filter.size('120%','180%','-5%','-40%');if(w.config.states.normal.filter!=='none'){this.applyFilter(el,i,w.config.states.normal.filter.type,w.config.states.normal.filter.value);}else{if(w.config.chart.dropShadow.enabled){this.dropShadow(el,w.config.chart.dropShadow,i);}}}},{key:"addNormalFilter",value:function addNormalFilter(el,i){var w=this.w;// revert shadow if it was there
// but, ignore marker as marker don't have dropshadow yet
if(w.config.chart.dropShadow.enabled&&!el.node.classList.contains('apexcharts-marker')){this.dropShadow(el,w.config.chart.dropShadow,i);}}// appends dropShadow to the filter object which can be chained with other filter effects
},{key:"addLightenFilter",value:function addLightenFilter(el,i,attrs){var _this=this;var w=this.w;var intensity=attrs.intensity;if(Utils.isFirefox()){return;}el.unfilter(true);var filter=new window.SVG.Filter();el.filter(function(add){var shadowAttr=w.config.chart.dropShadow;if(shadowAttr.enabled){filter=_this.addShadow(add,i,shadowAttr);}else{filter=add;}filter.componentTransfer({rgb:{type:'linear',slope:1.5,intercept:intensity}});});el.filterer.node.setAttribute('filterUnits','userSpaceOnUse');this._scaleFilterSize(el.filterer.node);}// appends dropShadow to the filter object which can be chained with other filter effects
},{key:"addDarkenFilter",value:function addDarkenFilter(el,i,attrs){var _this2=this;var w=this.w;var intensity=attrs.intensity;if(Utils.isFirefox()){return;}el.unfilter(true);var filter=new window.SVG.Filter();el.filter(function(add){var shadowAttr=w.config.chart.dropShadow;if(shadowAttr.enabled){filter=_this2.addShadow(add,i,shadowAttr);}else{filter=add;}filter.componentTransfer({rgb:{type:'linear',slope:intensity}});});el.filterer.node.setAttribute('filterUnits','userSpaceOnUse');this._scaleFilterSize(el.filterer.node);}},{key:"applyFilter",value:function applyFilter(el,i,filter){var intensity=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0.5;switch(filter){case'none':{this.addNormalFilter(el,i);break;}case'lighten':{this.addLightenFilter(el,i,{intensity:intensity});break;}case'darken':{this.addDarkenFilter(el,i,{intensity:intensity});break;}}}// appends dropShadow to the filter object which can be chained with other filter effects
},{key:"addShadow",value:function addShadow(add,i,attrs){var blur=attrs.blur,top=attrs.top,left=attrs.left,color=attrs.color,opacity=attrs.opacity;var shadowBlur=add.flood(Array.isArray(color)?color[i]:color,opacity).composite(add.sourceAlpha,'in').offset(left,top).gaussianBlur(blur).merge(add.source);return add.blend(add.source,shadowBlur);}// directly adds dropShadow to the element and returns the same element.
// the only way it is different from the addShadow() function is that addShadow is chainable to other filters, while this function discards all filters and add dropShadow
},{key:"dropShadow",value:function dropShadow(el,attrs){var i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var top=attrs.top,left=attrs.left,blur=attrs.blur,color=attrs.color,opacity=attrs.opacity,noUserSpaceOnUse=attrs.noUserSpaceOnUse;var w=this.w;el.unfilter(true);if(Utils.isIE()&&w.config.chart.type==='radialBar'){// in radialbar charts, dropshadow is clipping actual drawing in IE
return el;}color=Array.isArray(color)?color[i]:color;el.filter(function(add){var shadowBlur=null;if(Utils.isSafari()||Utils.isFirefox()||Utils.isIE()){// safari/firefox has some alternative way to use this filter
shadowBlur=add.flood(color,opacity).composite(add.sourceAlpha,'in').offset(left,top).gaussianBlur(blur);}else{shadowBlur=add.flood(color,opacity).composite(add.sourceAlpha,'in').offset(left,top).gaussianBlur(blur).merge(add.source);}add.blend(add.source,shadowBlur);});if(!noUserSpaceOnUse){el.filterer.node.setAttribute('filterUnits','userSpaceOnUse');}this._scaleFilterSize(el.filterer.node);return el;}},{key:"setSelectionFilter",value:function setSelectionFilter(el,realIndex,dataPointIndex){var w=this.w;if(typeof w.globals.selectedDataPoints[realIndex]!=='undefined'){if(w.globals.selectedDataPoints[realIndex].indexOf(dataPointIndex)>-1){el.node.setAttribute('selected',true);var activeFilter=w.config.states.active.filter;if(activeFilter!=='none'){this.applyFilter(el,realIndex,activeFilter.type,activeFilter.value);}}}}},{key:"_scaleFilterSize",value:function _scaleFilterSize(el){var setAttributes=function setAttributes(attrs){for(var key in attrs){if(attrs.hasOwnProperty(key)){el.setAttribute(key,attrs[key]);}}};setAttributes({width:'200%',height:'200%',x:'-50%',y:'-50%'});}}]);return Filters;}();/**
   * ApexCharts Animation Class.
   *
   * @module Animations
   **/var Animations=/*#__PURE__*/function(){function Animations(ctx){_classCallCheck(this,Animations);this.ctx=ctx;this.w=ctx.w;this.setEasingFunctions();}_createClass(Animations,[{key:"setEasingFunctions",value:function setEasingFunctions(){var easing;if(this.w.globals.easing)return;var userDefinedEasing=this.w.config.chart.animations.easing;switch(userDefinedEasing){case'linear':{easing='-';break;}case'easein':{easing='<';break;}case'easeout':{easing='>';break;}case'easeinout':{easing='<>';break;}case'swing':{easing=function easing(pos){var s=1.70158;var ret=(pos-=1)*pos*((s+1)*pos+s)+1;return ret;};break;}case'bounce':{easing=function easing(pos){var ret='';if(pos<1/2.75){ret=7.5625*pos*pos;}else if(pos<2/2.75){ret=7.5625*(pos-=1.5/2.75)*pos+0.75;}else if(pos<2.5/2.75){ret=7.5625*(pos-=2.25/2.75)*pos+0.9375;}else{ret=7.5625*(pos-=2.625/2.75)*pos+0.984375;}return ret;};break;}case'elastic':{easing=function easing(pos){if(pos===!!pos)return pos;return Math.pow(2,-10*pos)*Math.sin((pos-0.075)*(2*Math.PI)/0.3)+1;};break;}default:{easing='<>';}}this.w.globals.easing=easing;}},{key:"animateLine",value:function animateLine(el,from,to,speed){el.attr(from).animate(speed).attr(to);}/*
       ** Animate radius of a circle element
       */},{key:"animateCircleRadius",value:function animateCircleRadius(el,from,to,speed,easing,cb){if(!from)from=0;el.attr({r:from}).animate(speed,easing).attr({r:to}).afterAll(function(){cb();});}/*
       ** Animate radius and position of a circle element
       */},{key:"animateCircle",value:function animateCircle(el,from,to,speed,easing){el.attr({r:from.r,cx:from.cx,cy:from.cy}).animate(speed,easing).attr({r:to.r,cx:to.cx,cy:to.cy});}/*
       ** Animate rect properties
       */},{key:"animateRect",value:function animateRect(el,from,to,speed,fn){el.attr(from).animate(speed).attr(to).afterAll(function(){return fn();});}},{key:"animatePathsGradually",value:function animatePathsGradually(params){var el=params.el,realIndex=params.realIndex,j=params.j,fill=params.fill,pathFrom=params.pathFrom,pathTo=params.pathTo,speed=params.speed,delay=params.delay;var me=this;var w=this.w;var delayFactor=0;if(w.config.chart.animations.animateGradually.enabled){delayFactor=w.config.chart.animations.animateGradually.delay;}if(w.config.chart.animations.dynamicAnimation.enabled&&w.globals.dataChanged&&w.config.chart.type!=='bar'){// disabled due to this bug - https://github.com/apexcharts/vue-apexcharts/issues/75
delayFactor=0;}me.morphSVG(el,realIndex,j,w.config.chart.type==='line'&&!w.globals.comboCharts?'stroke':fill,pathFrom,pathTo,speed,delay*delayFactor);}},{key:"showDelayedElements",value:function showDelayedElements(){this.w.globals.delayedElements.forEach(function(d){var ele=d.el;ele.classList.remove('apexcharts-element-hidden');});}},{key:"animationCompleted",value:function animationCompleted(el){var w=this.w;if(w.globals.animationEnded)return;w.globals.animationEnded=true;if(typeof w.config.chart.events.animationEnd==='function'){w.config.chart.events.animationEnd(this.ctx,{el:el,w:w});}}// SVG.js animation for morphing one path to another
},{key:"morphSVG",value:function morphSVG(el,realIndex,j,fill,pathFrom,pathTo,speed,delay){var _this=this;var w=this.w;if(!pathFrom){pathFrom=el.attr('pathFrom');}if(!pathTo){pathTo=el.attr('pathTo');}var disableAnimationForCorrupPath=function disableAnimationForCorrupPath(path){if(w.config.chart.type==='radar'){// radar chart drops the path to bottom and hence a corrup path looks ugly
// therefore, disable animation for such a case
speed=1;}return"M 0 ".concat(w.globals.gridHeight);};if(!pathFrom||pathFrom.indexOf('undefined')>-1||pathFrom.indexOf('NaN')>-1){pathFrom=disableAnimationForCorrupPath();}if(pathTo.indexOf('undefined')>-1||pathTo.indexOf('NaN')>-1){pathTo=disableAnimationForCorrupPath();}if(!w.globals.shouldAnimate){speed=1;}el.plot(pathFrom).animate(1,w.globals.easing,delay).plot(pathFrom).animate(speed,w.globals.easing,delay).plot(pathTo).afterAll(function(){// a flag to indicate that the original mount function can return true now as animation finished here
if(Utils.isNumber(j)){if(j===w.globals.series[w.globals.maxValsInArrayIndex].length-2&&w.globals.shouldAnimate){_this.animationCompleted(el);}}else if(fill!=='none'&&w.globals.shouldAnimate){if(!w.globals.comboCharts&&realIndex===w.globals.series.length-1||w.globals.comboCharts){_this.animationCompleted(el);}}_this.showDelayedElements();});}}]);return Animations;}();/**
   * ApexCharts Graphics Class for all drawing operations.
   *
   * @module Graphics
   **/var Graphics=/*#__PURE__*/function(){function Graphics(ctx){_classCallCheck(this,Graphics);this.ctx=ctx;this.w=ctx.w;}_createClass(Graphics,[{key:"drawLine",value:function drawLine(x1,y1,x2,y2){var lineColor=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'#757575';var dashArray=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0;var strokeWidth=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var w=this.w;var line=w.globals.dom.Paper.line().attr({x1:x1,y1:y1,x2:x2,y2:y2,stroke:lineColor,'stroke-dasharray':dashArray,'stroke-width':strokeWidth});return line;}},{key:"drawRect",value:function drawRect(){var x1=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var x2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var y2=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var radius=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;var color=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'#fefefe';var opacity=arguments.length>6&&arguments[6]!==undefined?arguments[6]:1;var strokeWidth=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var strokeColor=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var strokeDashArray=arguments.length>9&&arguments[9]!==undefined?arguments[9]:0;var w=this.w;var rect=w.globals.dom.Paper.rect();rect.attr({x:x1,y:y1,width:x2>0?x2:0,height:y2>0?y2:0,rx:radius,ry:radius,fill:color,opacity:opacity,'stroke-width':strokeWidth!==null?strokeWidth:0,stroke:strokeColor!==null?strokeColor:'none','stroke-dasharray':strokeDashArray});return rect;}},{key:"drawPolygon",value:function drawPolygon(polygonString){var stroke=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'#e1e1e1';var fill=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'none';var w=this.w;var polygon=w.globals.dom.Paper.polygon(polygonString).attr({fill:fill,stroke:stroke});return polygon;}},{key:"drawCircle",value:function drawCircle(radius){var attrs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var w=this.w;var c=w.globals.dom.Paper.circle(radius*2);if(attrs!==null){c.attr(attrs);}return c;}},{key:"drawPath",value:function drawPath(_ref){var _ref$d=_ref.d,d=_ref$d===void 0?'':_ref$d,_ref$stroke=_ref.stroke,stroke=_ref$stroke===void 0?'#757575':_ref$stroke,_ref$strokeWidth=_ref.strokeWidth,strokeWidth=_ref$strokeWidth===void 0?1:_ref$strokeWidth,fill=_ref.fill,_ref$fillOpacity=_ref.fillOpacity,fillOpacity=_ref$fillOpacity===void 0?1:_ref$fillOpacity,_ref$strokeOpacity=_ref.strokeOpacity,strokeOpacity=_ref$strokeOpacity===void 0?1:_ref$strokeOpacity,classes=_ref.classes,_ref$strokeLinecap=_ref.strokeLinecap,strokeLinecap=_ref$strokeLinecap===void 0?null:_ref$strokeLinecap,_ref$strokeDashArray=_ref.strokeDashArray,strokeDashArray=_ref$strokeDashArray===void 0?0:_ref$strokeDashArray;var w=this.w;if(strokeLinecap===null){strokeLinecap=w.config.stroke.lineCap;}if(d.indexOf('undefined')>-1||d.indexOf('NaN')>-1){d="M 0 ".concat(w.globals.gridHeight);}var p=w.globals.dom.Paper.path(d).attr({fill:fill,'fill-opacity':fillOpacity,stroke:stroke,'stroke-opacity':strokeOpacity,'stroke-linecap':strokeLinecap,'stroke-width':strokeWidth,'stroke-dasharray':strokeDashArray,"class":classes});return p;}},{key:"group",value:function group(){var attrs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var w=this.w;var g=w.globals.dom.Paper.group();if(attrs!==null){g.attr(attrs);}return g;}},{key:"move",value:function move(x,y){var move=['M',x,y].join(' ');return move;}},{key:"line",value:function line(x,y){var hORv=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var line=null;if(hORv===null){line=['L',x,y].join(' ');}else if(hORv==='H'){line=['H',x].join(' ');}else if(hORv==='V'){line=['V',y].join(' ');}return line;}},{key:"curve",value:function curve(x1,y1,x2,y2,x,y){var curve=['C',x1,y1,x2,y2,x,y].join(' ');return curve;}},{key:"quadraticCurve",value:function quadraticCurve(x1,y1,x,y){var curve=['Q',x1,y1,x,y].join(' ');return curve;}},{key:"arc",value:function arc(rx,ry,axisRotation,largeArcFlag,sweepFlag,x,y){var relative=arguments.length>7&&arguments[7]!==undefined?arguments[7]:false;var coord='A';if(relative)coord='a';var arc=[coord,rx,ry,axisRotation,largeArcFlag,sweepFlag,x,y].join(' ');return arc;}/**
       * @memberof Graphics
       * @param {object}
       *  i = series's index
       *  realIndex = realIndex is series's actual index when it was drawn time. After several redraws, the iterating "i" may change in loops, but realIndex doesn't
       *  pathFrom = existing pathFrom to animateTo
       *  pathTo = new Path to which d attr will be animated from pathFrom to pathTo
       *  stroke = line Color
       *  strokeWidth = width of path Line
       *  fill = it can be gradient, single color, pattern or image
       *  animationDelay = how much to delay when starting animation (in milliseconds)
       *  dataChangeSpeed = for dynamic animations, when data changes
       *  className = class attribute to add
       * @return {object} svg.js path object
       **/},{key:"renderPaths",value:function renderPaths(_ref2){var j=_ref2.j,realIndex=_ref2.realIndex,pathFrom=_ref2.pathFrom,pathTo=_ref2.pathTo,stroke=_ref2.stroke,strokeWidth=_ref2.strokeWidth,strokeLinecap=_ref2.strokeLinecap,fill=_ref2.fill,animationDelay=_ref2.animationDelay,initialSpeed=_ref2.initialSpeed,dataChangeSpeed=_ref2.dataChangeSpeed,className=_ref2.className,_ref2$shouldClipToGri=_ref2.shouldClipToGrid,shouldClipToGrid=_ref2$shouldClipToGri===void 0?true:_ref2$shouldClipToGri,_ref2$bindEventsOnPat=_ref2.bindEventsOnPaths,bindEventsOnPaths=_ref2$bindEventsOnPat===void 0?true:_ref2$bindEventsOnPat,_ref2$drawShadow=_ref2.drawShadow,drawShadow=_ref2$drawShadow===void 0?true:_ref2$drawShadow;var w=this.w;var filters=new Filters(this.ctx);var anim=new Animations(this.ctx);var initialAnim=this.w.config.chart.animations.enabled;var dynamicAnim=initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled;var d;var shouldAnimate=!!(initialAnim&&!w.globals.resized||dynamicAnim&&w.globals.dataChanged&&w.globals.shouldAnimate);if(shouldAnimate){d=pathFrom;}else{d=pathTo;w.globals.animationEnded=true;}var strokeDashArrayOpt=w.config.stroke.dashArray;var strokeDashArray=0;if(Array.isArray(strokeDashArrayOpt)){strokeDashArray=strokeDashArrayOpt[realIndex];}else{strokeDashArray=w.config.stroke.dashArray;}var el=this.drawPath({d:d,stroke:stroke,strokeWidth:strokeWidth,fill:fill,fillOpacity:1,classes:className,strokeLinecap:strokeLinecap,strokeDashArray:strokeDashArray});el.attr('index',realIndex);if(shouldClipToGrid){el.attr({'clip-path':"url(#gridRectMask".concat(w.globals.cuid,")")});}// const defaultFilter = el.filterer
if(w.config.states.normal.filter.type!=='none'){filters.getDefaultFilter(el,realIndex);}else{if(w.config.chart.dropShadow.enabled&&drawShadow){if(!w.config.chart.dropShadow.enabledOnSeries||w.config.chart.dropShadow.enabledOnSeries&&w.config.chart.dropShadow.enabledOnSeries.indexOf(realIndex)!==-1){var shadow=w.config.chart.dropShadow;filters.dropShadow(el,shadow,realIndex);}}}if(bindEventsOnPaths){el.node.addEventListener('mouseenter',this.pathMouseEnter.bind(this,el));el.node.addEventListener('mouseleave',this.pathMouseLeave.bind(this,el));el.node.addEventListener('mousedown',this.pathMouseDown.bind(this,el));}el.attr({pathTo:pathTo,pathFrom:pathFrom});var defaultAnimateOpts={el:el,j:j,realIndex:realIndex,pathFrom:pathFrom,pathTo:pathTo,fill:fill,strokeWidth:strokeWidth,delay:animationDelay};if(initialAnim&&!w.globals.resized&&!w.globals.dataChanged){anim.animatePathsGradually(_objectSpread2({},defaultAnimateOpts,{speed:initialSpeed}));}else{if(w.globals.resized||!w.globals.dataChanged){anim.showDelayedElements();}}if(w.globals.dataChanged&&dynamicAnim&&shouldAnimate){anim.animatePathsGradually(_objectSpread2({},defaultAnimateOpts,{speed:dataChangeSpeed}));}return el;}},{key:"drawPattern",value:function drawPattern(style,width,height){var stroke=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'#757575';var strokeWidth=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;var w=this.w;var p=w.globals.dom.Paper.pattern(width,height,function(add){if(style==='horizontalLines'){add.line(0,0,height,0).stroke({color:stroke,width:strokeWidth+1});}else if(style==='verticalLines'){add.line(0,0,0,width).stroke({color:stroke,width:strokeWidth+1});}else if(style==='slantedLines'){add.line(0,0,width,height).stroke({color:stroke,width:strokeWidth});}else if(style==='squares'){add.rect(width,height).fill('none').stroke({color:stroke,width:strokeWidth});}else if(style==='circles'){add.circle(width).fill('none').stroke({color:stroke,width:strokeWidth});}});return p;}},{key:"drawGradient",value:function drawGradient(style,gfrom,gto,opacityFrom,opacityTo){var size=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var stops=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var colorStops=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var i=arguments.length>8&&arguments[8]!==undefined?arguments[8]:0;var w=this.w;var g;gfrom=Utils.hexToRgba(gfrom,opacityFrom);gto=Utils.hexToRgba(gto,opacityTo);var stop1=0;var stop2=1;var stop3=1;var stop4=null;if(stops!==null){stop1=typeof stops[0]!=='undefined'?stops[0]/100:0;stop2=typeof stops[1]!=='undefined'?stops[1]/100:1;stop3=typeof stops[2]!=='undefined'?stops[2]/100:1;stop4=typeof stops[3]!=='undefined'?stops[3]/100:null;}var radial=!!(w.config.chart.type==='donut'||w.config.chart.type==='pie'||w.config.chart.type==='bubble');if(colorStops===null||colorStops.length===0){g=w.globals.dom.Paper.gradient(radial?'radial':'linear',function(stop){stop.at(stop1,gfrom,opacityFrom);stop.at(stop2,gto,opacityTo);stop.at(stop3,gto,opacityTo);if(stop4!==null){stop.at(stop4,gfrom,opacityFrom);}});}else{g=w.globals.dom.Paper.gradient(radial?'radial':'linear',function(stop){var gradientStops=Array.isArray(colorStops[i])?colorStops[i]:colorStops;gradientStops.forEach(function(s){stop.at(s.offset/100,s.color,s.opacity);});});}if(!radial){if(style==='vertical'){g.from(0,0).to(0,1);}else if(style==='diagonal'){g.from(0,0).to(1,1);}else if(style==='horizontal'){g.from(0,1).to(1,1);}else if(style==='diagonal2'){g.from(1,0).to(0,1);}}else{var offx=w.globals.gridWidth/2;var offy=w.globals.gridHeight/2;if(w.config.chart.type!=='bubble'){g.attr({gradientUnits:'userSpaceOnUse',cx:offx,cy:offy,r:size});}else{g.attr({cx:0.5,cy:0.5,r:0.8,fx:0.2,fy:0.2});}}return g;}},{key:"drawText",value:function drawText(_ref3){var x=_ref3.x,y=_ref3.y,text=_ref3.text,textAnchor=_ref3.textAnchor,fontSize=_ref3.fontSize,fontFamily=_ref3.fontFamily,fontWeight=_ref3.fontWeight,foreColor=_ref3.foreColor,opacity=_ref3.opacity,_ref3$cssClass=_ref3.cssClass,cssClass=_ref3$cssClass===void 0?'':_ref3$cssClass,_ref3$isPlainText=_ref3.isPlainText,isPlainText=_ref3$isPlainText===void 0?true:_ref3$isPlainText;var w=this.w;if(typeof text==='undefined')text='';if(!textAnchor){textAnchor='start';}if(!foreColor||!foreColor.length){foreColor=w.config.chart.foreColor;}fontFamily=fontFamily||w.config.chart.fontFamily;fontWeight=fontWeight||'regular';var elText;if(Array.isArray(text)){elText=w.globals.dom.Paper.text(function(add){for(var i=0;i<text.length;i++){i===0?add.tspan(text[i]):add.tspan(text[i]).newLine();}});}else{elText=isPlainText?w.globals.dom.Paper.plain(text):w.globals.dom.Paper.text(function(add){return add.tspan(text);});}elText.attr({x:x,y:y,'text-anchor':textAnchor,'dominant-baseline':'auto','font-size':fontSize,'font-family':fontFamily,'font-weight':fontWeight,fill:foreColor,"class":'apexcharts-text '+cssClass});elText.node.style.fontFamily=fontFamily;elText.node.style.opacity=opacity;return elText;}},{key:"drawMarker",value:function drawMarker(x,y,opts){x=x||0;var size=opts.pSize||0;var elPoint=null;if(opts.shape==='square'){var radius=opts.pRadius===undefined?size/2:opts.pRadius;if(y===null||!size){size=0;radius=0;}var nSize=size*1.2+radius;var p=this.drawRect(nSize,nSize,nSize,nSize,radius);p.attr({x:x-nSize/2,y:y-nSize/2,cx:x,cy:y,"class":opts["class"]?opts["class"]:'',fill:opts.pointFillColor,'fill-opacity':opts.pointFillOpacity?opts.pointFillOpacity:1,stroke:opts.pointStrokeColor,'stroke-width':opts.pWidth?opts.pWidth:0,'stroke-opacity':opts.pointStrokeOpacity?opts.pointStrokeOpacity:1});elPoint=p;}else if(opts.shape==='circle'||!opts.shape){if(!Utils.isNumber(y)){size=0;y=0;}// let nSize = size - opts.pRadius / 2 < 0 ? 0 : size - opts.pRadius / 2
elPoint=this.drawCircle(size,{cx:x,cy:y,"class":opts["class"]?opts["class"]:'',stroke:opts.pointStrokeColor,fill:opts.pointFillColor,'fill-opacity':opts.pointFillOpacity?opts.pointFillOpacity:1,'stroke-width':opts.pWidth?opts.pWidth:0,'stroke-opacity':opts.pointStrokeOpacity?opts.pointStrokeOpacity:1});}return elPoint;}},{key:"pathMouseEnter",value:function pathMouseEnter(path,e){var w=this.w;var filters=new Filters(this.ctx);var i=parseInt(path.node.getAttribute('index'),10);var j=parseInt(path.node.getAttribute('j'),10);if(typeof w.config.chart.events.dataPointMouseEnter==='function'){w.config.chart.events.dataPointMouseEnter(e,this.ctx,{seriesIndex:i,dataPointIndex:j,w:w});}this.ctx.events.fireEvent('dataPointMouseEnter',[e,this.ctx,{seriesIndex:i,dataPointIndex:j,w:w}]);if(w.config.states.active.filter.type!=='none'){if(path.node.getAttribute('selected')==='true'){return;}}if(w.config.states.hover.filter.type!=='none'){if(w.config.states.active.filter.type!=='none'&&!w.globals.isTouchDevice){var hoverFilter=w.config.states.hover.filter;filters.applyFilter(path,i,hoverFilter.type,hoverFilter.value);}}}},{key:"pathMouseLeave",value:function pathMouseLeave(path,e){var w=this.w;var filters=new Filters(this.ctx);var i=parseInt(path.node.getAttribute('index'),10);var j=parseInt(path.node.getAttribute('j'),10);if(typeof w.config.chart.events.dataPointMouseLeave==='function'){w.config.chart.events.dataPointMouseLeave(e,this.ctx,{seriesIndex:i,dataPointIndex:j,w:w});}this.ctx.events.fireEvent('dataPointMouseLeave',[e,this.ctx,{seriesIndex:i,dataPointIndex:j,w:w}]);if(w.config.states.active.filter.type!=='none'){if(path.node.getAttribute('selected')==='true'){return;}}if(w.config.states.hover.filter.type!=='none'){filters.getDefaultFilter(path,i);}}},{key:"pathMouseDown",value:function pathMouseDown(path,e){var w=this.w;var filters=new Filters(this.ctx);var i=parseInt(path.node.getAttribute('index'),10);var j=parseInt(path.node.getAttribute('j'),10);var selected='false';if(path.node.getAttribute('selected')==='true'){path.node.setAttribute('selected','false');if(w.globals.selectedDataPoints[i].indexOf(j)>-1){var index=w.globals.selectedDataPoints[i].indexOf(j);w.globals.selectedDataPoints[i].splice(index,1);}}else{if(!w.config.states.active.allowMultipleDataPointsSelection&&w.globals.selectedDataPoints.length>0){w.globals.selectedDataPoints=[];var elPaths=w.globals.dom.Paper.select('.apexcharts-series path').members;var elCircles=w.globals.dom.Paper.select('.apexcharts-series circle, .apexcharts-series rect').members;var deSelect=function deSelect(els){Array.prototype.forEach.call(els,function(el){el.node.setAttribute('selected','false');filters.getDefaultFilter(el,i);});};deSelect(elPaths);deSelect(elCircles);}path.node.setAttribute('selected','true');selected='true';if(typeof w.globals.selectedDataPoints[i]==='undefined'){w.globals.selectedDataPoints[i]=[];}w.globals.selectedDataPoints[i].push(j);}if(selected==='true'){var activeFilter=w.config.states.active.filter;if(activeFilter!=='none'){filters.applyFilter(path,i,activeFilter.type,activeFilter.value);}}else{if(w.config.states.active.filter.type!=='none'){filters.getDefaultFilter(path,i);}}if(typeof w.config.chart.events.dataPointSelection==='function'){w.config.chart.events.dataPointSelection(e,this.ctx,{selectedDataPoints:w.globals.selectedDataPoints,seriesIndex:i,dataPointIndex:j,w:w});}if(e){this.ctx.events.fireEvent('dataPointSelection',[e,this.ctx,{selectedDataPoints:w.globals.selectedDataPoints,seriesIndex:i,dataPointIndex:j,w:w}]);}}},{key:"rotateAroundCenter",value:function rotateAroundCenter(el){var coord=el.getBBox();var x=coord.x+coord.width/2;var y=coord.y+coord.height/2;return{x:x,y:y};}},{key:"getTextRects",value:function getTextRects(text,fontSize,fontFamily,transform){var useBBox=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;var w=this.w;var virtualText=this.drawText({x:-200,y:-200,text:text,textAnchor:'start',fontSize:fontSize,fontFamily:fontFamily,foreColor:'#fff',opacity:0});if(transform){virtualText.attr('transform',transform);}w.globals.dom.Paper.add(virtualText);var rect=virtualText.bbox();if(!useBBox){rect=virtualText.node.getBoundingClientRect();}virtualText.remove();return{width:rect.width,height:rect.height};}/**
       * append ... to long text
       * http://stackoverflow.com/questions/9241315/trimming-text-to-a-given-pixel-width-in-svg
       * @memberof Graphics
       **/},{key:"placeTextWithEllipsis",value:function placeTextWithEllipsis(textObj,textString,width){if(typeof textObj.getComputedTextLength!=='function')return;textObj.textContent=textString;if(textString.length>0){// ellipsis is needed
if(textObj.getComputedTextLength()>=width/0.8){for(var x=textString.length-3;x>0;x-=3){if(textObj.getSubStringLength(0,x)<=width/0.8){textObj.textContent=textString.substring(0,x)+'...';return;}}textObj.textContent='.';// can't place at all
}}}}],[{key:"setAttrs",value:function setAttrs(el,attrs){for(var key in attrs){if(attrs.hasOwnProperty(key)){el.setAttribute(key,attrs[key]);}}}}]);return Graphics;}();var Helpers=/*#__PURE__*/function(){function Helpers(annoCtx){_classCallCheck(this,Helpers);this.w=annoCtx.w;this.annoCtx=annoCtx;}_createClass(Helpers,[{key:"setOrientations",value:function setOrientations(anno){var annoIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var w=this.w;if(anno.label.orientation==='vertical'){var i=annoIndex!==null?annoIndex:0;var xAnno=w.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(i,"']"));if(xAnno!==null){var xAnnoCoord=xAnno.getBoundingClientRect();xAnno.setAttribute('x',parseFloat(xAnno.getAttribute('x'))-xAnnoCoord.height+4);if(anno.label.position==='top'){xAnno.setAttribute('y',parseFloat(xAnno.getAttribute('y'))+xAnnoCoord.width);}else{xAnno.setAttribute('y',parseFloat(xAnno.getAttribute('y'))-xAnnoCoord.width);}var annoRotatingCenter=this.annoCtx.graphics.rotateAroundCenter(xAnno);var x=annoRotatingCenter.x;var y=annoRotatingCenter.y;xAnno.setAttribute('transform',"rotate(-90 ".concat(x," ").concat(y,")"));}}}},{key:"addBackgroundToAnno",value:function addBackgroundToAnno(annoEl,anno){var w=this.w;if(!anno.label.text||anno.label.text&&!anno.label.text.trim())return null;var elGridRect=w.globals.dom.baseEl.querySelector('.apexcharts-grid').getBoundingClientRect();var coords=annoEl.getBoundingClientRect();var pleft=anno.label.style.padding.left;var pright=anno.label.style.padding.right;var ptop=anno.label.style.padding.top;var pbottom=anno.label.style.padding.bottom;if(anno.label.orientation==='vertical'){ptop=anno.label.style.padding.left;pbottom=anno.label.style.padding.right;pleft=anno.label.style.padding.top;pright=anno.label.style.padding.bottom;}var x1=coords.left-elGridRect.left-pleft;var y1=coords.top-elGridRect.top-ptop;var elRect=this.annoCtx.graphics.drawRect(x1,y1,coords.width+pleft+pright,coords.height+ptop+pbottom,0,anno.label.style.background,1,anno.label.borderWidth,anno.label.borderColor,0);if(anno.id){elRect.node.classList.add(anno.id);}return elRect;}},{key:"annotationsBackground",value:function annotationsBackground(){var _this=this;var w=this.w;var add=function add(anno,i,type){var annoLabel=w.globals.dom.baseEl.querySelector(".apexcharts-".concat(type,"-annotations .apexcharts-").concat(type,"-annotation-label[rel='").concat(i,"']"));if(annoLabel){var parent=annoLabel.parentNode;var elRect=_this.addBackgroundToAnno(annoLabel,anno);if(elRect){parent.insertBefore(elRect.node,annoLabel);}}};w.config.annotations.xaxis.map(function(anno,i){add(anno,i,'xaxis');});w.config.annotations.yaxis.map(function(anno,i){add(anno,i,'yaxis');});w.config.annotations.points.map(function(anno,i){add(anno,i,'point');});}},{key:"makeAnnotationDraggable",value:function makeAnnotationDraggable(el,annoType,index){var w=this.w;var anno=w.config.annotations[annoType][index];// in the draggable annotations, we will mutate the original config
// object and store the values directly there
el.draggable().on('dragend',function(de){var x=de.target.getAttribute('x');var y=de.target.getAttribute('y');var cx=de.target.getAttribute('cx');var cy=de.target.getAttribute('cy');anno.x=x;anno.y=y;if(cx&&cy){anno.x=cx;anno.y=cy;}});el.node.addEventListener('mousedown',function(e){e.stopPropagation();el.selectize({pointSize:8,rotationPoint:false,pointType:'rect'});el.resize().on('resizedone',function(re){var width=re.target.getAttribute('width');var height=re.target.getAttribute('height');var r=re.target.getAttribute('r');anno.width=width;anno.height=height;if(r){anno.radius=r;}});});}},{key:"getStringX",value:function getStringX(x){var w=this.w;var rX=x;if(w.config.xaxis.convertedCatToNumeric&&w.globals.categoryLabels.length){x=w.globals.categoryLabels.indexOf(x)+1;}var catIndex=w.globals.labels.indexOf(x);var xLabel=w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g text:nth-child('+(catIndex+1)+')');if(xLabel){rX=parseFloat(xLabel.getAttribute('x'));}return rX;}}]);return Helpers;}();var XAnnotations=/*#__PURE__*/function(){function XAnnotations(annoCtx){_classCallCheck(this,XAnnotations);this.w=annoCtx.w;this.annoCtx=annoCtx;this.invertAxis=this.annoCtx.invertAxis;}_createClass(XAnnotations,[{key:"addXaxisAnnotation",value:function addXaxisAnnotation(anno,parent,index){var w=this.w;var min=this.invertAxis?w.globals.minY:w.globals.minX;var max=this.invertAxis?w.globals.maxY:w.globals.maxX;var range=this.invertAxis?w.globals.yRange[0]:w.globals.xRange;var x1=(anno.x-min)/(range/w.globals.gridWidth);if(this.annoCtx.inversedReversedAxis){x1=(max-anno.x)/(range/w.globals.gridWidth);}var text=anno.label.text;if((w.config.xaxis.type==='category'||w.config.xaxis.convertedCatToNumeric)&&!this.invertAxis&&!w.globals.dataFormatXNumeric){x1=this.annoCtx.helpers.getStringX(anno.x);}var strokeDashArray=anno.strokeDashArray;if(!Utils.isNumber(x1))return;if(anno.x2===null||typeof anno.x2==='undefined'){var line=this.annoCtx.graphics.drawLine(x1+anno.offsetX,// x1
0+anno.offsetY,// y1
x1+anno.offsetX,// x2
w.globals.gridHeight+anno.offsetY,// y2
anno.borderColor,// lineColor
strokeDashArray,//dashArray
anno.borderWidth);parent.appendChild(line.node);if(anno.id){line.node.classList.add(anno.id);}}else{var x2=(anno.x2-min)/(range/w.globals.gridWidth);if(this.annoCtx.inversedReversedAxis){x2=(max-anno.x2)/(range/w.globals.gridWidth);}if((w.config.xaxis.type==='category'||w.config.xaxis.convertedCatToNumeric)&&!this.invertAxis&&!w.globals.dataFormatXNumeric){x2=this.annoCtx.helpers.getStringX(anno.x2);}if(x2<x1){var temp=x1;x1=x2;x2=temp;}var rect=this.annoCtx.graphics.drawRect(x1+anno.offsetX,// x1
0+anno.offsetY,// y1
x2-x1,// x2
w.globals.gridHeight+anno.offsetY,// y2
0,// radius
anno.fillColor,// color
anno.opacity,// opacity,
1,// strokeWidth
anno.borderColor,// strokeColor
strokeDashArray// stokeDashArray
);rect.node.classList.add('apexcharts-annotation-rect');rect.attr('clip-path',"url(#gridRectMask".concat(w.globals.cuid,")"));parent.appendChild(rect.node);if(anno.id){rect.node.classList.add(anno.id);}}var textY=anno.label.position==='top'?4:w.globals.gridHeight;var textRects=this.annoCtx.graphics.getTextRects(text,parseFloat(anno.label.style.fontSize));var elText=this.annoCtx.graphics.drawText({x:x1+anno.label.offsetX,y:textY+anno.label.offsetY-(anno.label.orientation==='vertical'?anno.label.position==='top'?textRects.width/2-12:-textRects.width/2:0),text:text,textAnchor:anno.label.textAnchor,fontSize:anno.label.style.fontSize,fontFamily:anno.label.style.fontFamily,fontWeight:anno.label.style.fontWeight,foreColor:anno.label.style.color,cssClass:"apexcharts-xaxis-annotation-label ".concat(anno.label.style.cssClass," ").concat(anno.id?anno.id:'')});elText.attr({rel:index});parent.appendChild(elText.node);// after placing the annotations on svg, set any vertically placed annotations
this.annoCtx.helpers.setOrientations(anno,index);}},{key:"drawXAxisAnnotations",value:function drawXAxisAnnotations(){var _this=this;var w=this.w;var elg=this.annoCtx.graphics.group({"class":'apexcharts-xaxis-annotations'});w.config.annotations.xaxis.map(function(anno,index){_this.addXaxisAnnotation(anno,elg.node,index);});return elg;}}]);return XAnnotations;}();var YAnnotations=/*#__PURE__*/function(){function YAnnotations(annoCtx){_classCallCheck(this,YAnnotations);this.w=annoCtx.w;this.annoCtx=annoCtx;}_createClass(YAnnotations,[{key:"addYaxisAnnotation",value:function addYaxisAnnotation(anno,parent,index){var w=this.w;var strokeDashArray=anno.strokeDashArray;var y1=this._getY1Y2('y1',anno);var y2;var text=anno.label.text;if(anno.y2===null||typeof anno.y2==='undefined'){var line=this.annoCtx.graphics.drawLine(0+anno.offsetX,// x1
y1+anno.offsetY,// y1
w.globals.gridWidth+anno.offsetX,// x2
y1+anno.offsetY,// y2
anno.borderColor,// lineColor
strokeDashArray,// dashArray
anno.borderWidth);parent.appendChild(line.node);if(anno.id){line.node.classList.add(anno.id);}}else{y2=this._getY1Y2('y2',anno);if(y2>y1){var temp=y1;y1=y2;y2=temp;}var rect=this.annoCtx.graphics.drawRect(0+anno.offsetX,// x1
y2+anno.offsetY,// y1
w.globals.gridWidth+anno.offsetX,// x2
y1-y2,// y2
0,// radius
anno.fillColor,// color
anno.opacity,// opacity,
1,// strokeWidth
anno.borderColor,// strokeColor
strokeDashArray// stokeDashArray
);rect.node.classList.add('apexcharts-annotation-rect');rect.attr('clip-path',"url(#gridRectMask".concat(w.globals.cuid,")"));parent.appendChild(rect.node);if(anno.id){rect.node.classList.add(anno.id);}}var textX=anno.label.position==='right'?w.globals.gridWidth:0;var elText=this.annoCtx.graphics.drawText({x:textX+anno.label.offsetX,y:(y2||y1)+anno.label.offsetY-3,text:text,textAnchor:anno.label.textAnchor,fontSize:anno.label.style.fontSize,fontFamily:anno.label.style.fontFamily,fontWeight:anno.label.style.fontWeight,foreColor:anno.label.style.color,cssClass:"apexcharts-yaxis-annotation-label ".concat(anno.label.style.cssClass," ").concat(anno.id?anno.id:'')});elText.attr({rel:index});parent.appendChild(elText.node);}},{key:"_getY1Y2",value:function _getY1Y2(type,anno){var y=type==='y1'?anno.y:anno.y2;var yP;var w=this.w;if(this.annoCtx.invertAxis){var catIndex=w.globals.labels.indexOf(y);if(w.config.xaxis.convertedCatToNumeric){catIndex=w.globals.categoryLabels.indexOf(y);}var xLabel=w.globals.dom.baseEl.querySelector('.apexcharts-yaxis-texts-g text:nth-child('+(catIndex+1)+')');if(xLabel){yP=parseFloat(xLabel.getAttribute('y'));}}else{yP=w.globals.gridHeight-(y-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight);if(w.config.yaxis[anno.yAxisIndex]&&w.config.yaxis[anno.yAxisIndex].reversed){yP=(y-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight);}}return yP;}},{key:"drawYAxisAnnotations",value:function drawYAxisAnnotations(){var _this=this;var w=this.w;var elg=this.annoCtx.graphics.group({"class":'apexcharts-yaxis-annotations'});w.config.annotations.yaxis.map(function(anno,index){_this.addYaxisAnnotation(anno,elg.node,index);});return elg;}}]);return YAnnotations;}();var PointAnnotations=/*#__PURE__*/function(){function PointAnnotations(annoCtx){_classCallCheck(this,PointAnnotations);this.w=annoCtx.w;this.annoCtx=annoCtx;}_createClass(PointAnnotations,[{key:"addPointAnnotation",value:function addPointAnnotation(anno,parent,index){var w=this.w;var x=0;var y=0;var pointY=0;if(this.annoCtx.invertAxis){console.warn('Point annotation is not supported in horizontal bar charts.');}if(typeof anno.x==='string'){var catIndex=w.globals.labels.indexOf(anno.x);if(w.config.xaxis.convertedCatToNumeric){catIndex=w.globals.categoryLabels.indexOf(anno.x);}x=this.annoCtx.helpers.getStringX(anno.x);var annoY=anno.y;if(anno.y===null){annoY=w.globals.series[anno.seriesIndex][catIndex];}y=w.globals.gridHeight-(annoY-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight)-parseFloat(anno.label.style.fontSize)-anno.marker.size;pointY=w.globals.gridHeight-(annoY-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight);if(w.config.yaxis[anno.yAxisIndex]&&w.config.yaxis[anno.yAxisIndex].reversed){y=(annoY-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight)+parseFloat(anno.label.style.fontSize)+anno.marker.size;pointY=(annoY-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight);}}else{x=(anno.x-w.globals.minX)/(w.globals.xRange/w.globals.gridWidth);y=w.globals.gridHeight-(parseFloat(anno.y)-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight)-parseFloat(anno.label.style.fontSize)-anno.marker.size;pointY=w.globals.gridHeight-(anno.y-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight);if(w.config.yaxis[anno.yAxisIndex]&&w.config.yaxis[anno.yAxisIndex].reversed){y=(parseFloat(anno.y)-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight)-parseFloat(anno.label.style.fontSize)-anno.marker.size;pointY=(anno.y-w.globals.minYArr[anno.yAxisIndex])/(w.globals.yRange[anno.yAxisIndex]/w.globals.gridHeight);}}if(!Utils.isNumber(x))return;var optsPoints={pSize:anno.marker.size,pWidth:anno.marker.strokeWidth,pointFillColor:anno.marker.fillColor,pointStrokeColor:anno.marker.strokeColor,shape:anno.marker.shape,pRadius:anno.marker.radius,"class":"apexcharts-point-annotation-marker ".concat(anno.marker.cssClass," ").concat(anno.id?anno.id:'')};var point=this.annoCtx.graphics.drawMarker(x+anno.marker.offsetX,pointY+anno.marker.offsetY,optsPoints);parent.appendChild(point.node);var text=anno.label.text?anno.label.text:'';var elText=this.annoCtx.graphics.drawText({x:x+anno.label.offsetX,y:y+anno.label.offsetY,text:text,textAnchor:anno.label.textAnchor,fontSize:anno.label.style.fontSize,fontFamily:anno.label.style.fontFamily,fontWeight:anno.label.style.fontWeight,foreColor:anno.label.style.color,cssClass:"apexcharts-point-annotation-label ".concat(anno.label.style.cssClass," ").concat(anno.id?anno.id:'')});elText.attr({rel:index});parent.appendChild(elText.node);// TODO: deprecate this as we will use custom
if(anno.customSVG.SVG){var g=this.annoCtx.graphics.group({"class":'apexcharts-point-annotations-custom-svg '+anno.customSVG.cssClass});g.attr({transform:"translate(".concat(x+anno.customSVG.offsetX,", ").concat(y+anno.customSVG.offsetY,")")});g.node.innerHTML=anno.customSVG.SVG;parent.appendChild(g.node);}if(anno.image.path){var imgWidth=anno.image.width?anno.image.width:20;var imgHeight=anno.image.height?anno.image.height:20;this.annoCtx.addImage({x:x+anno.image.offsetX-imgWidth/2,y:y+anno.image.offsetY-imgHeight/2,width:imgWidth,height:imgHeight,path:anno.image.path,appendTo:parent});}}},{key:"drawPointAnnotations",value:function drawPointAnnotations(){var _this=this;var w=this.w;var elg=this.annoCtx.graphics.group({"class":'apexcharts-point-annotations'});w.config.annotations.points.map(function(anno,index){_this.addPointAnnotation(anno,elg.node,index);});return elg;}}]);return PointAnnotations;}();var name="en";var options={months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],toolbar:{exportToSVG:"Download SVG",exportToPNG:"Download PNG",exportToCSV:"Download CSV",menu:"Menu",selection:"Selection",selectionZoom:"Selection Zoom",zoomIn:"Zoom In",zoomOut:"Zoom Out",pan:"Panning",reset:"Reset Zoom"}};var en={name:name,options:options};var Options=/*#__PURE__*/function(){function Options(){_classCallCheck(this,Options);this.yAxis={show:true,showAlways:false,showForNullSeries:true,seriesName:undefined,opposite:false,reversed:false,logarithmic:false,tickAmount:undefined,forceNiceScale:false,max:undefined,min:undefined,floating:false,decimalsInFloat:undefined,labels:{show:true,minWidth:0,maxWidth:160,offsetX:0,offsetY:0,align:undefined,rotate:0,padding:20,style:{colors:[],fontSize:'12px',fontWeight:500,fontFamily:undefined,cssClass:''},formatter:undefined},axisBorder:{show:false,color:'#eeeeee',width:1,offsetX:0,offsetY:0},axisTicks:{show:false,color:'#eeeeee',width:6,offsetX:0,offsetY:0},title:{text:undefined,rotate:90,offsetY:0,offsetX:0,style:{color:undefined,fontSize:'14px',fontWeight:600,fontFamily:undefined,cssClass:''}},tooltip:{enabled:false,offsetX:0},crosshairs:{show:true,position:'front',stroke:{color:'#bdbdbd',width:1,dashArray:0}}};this.pointAnnotation={x:0,y:null,yAxisIndex:0,seriesIndex:0,marker:{size:4,fillColor:'#fff',strokeWidth:2,strokeColor:'#424242',shape:'circle',offsetX:0,offsetY:0,radius:2,cssClass:''},label:{borderColor:'#eeeeee',borderWidth:1,text:undefined,textAnchor:'middle',offsetX:0,offsetY:-15,style:{background:'#fff',color:undefined,fontSize:'12px',fontFamily:undefined,fontWeight:500,cssClass:'',padding:{left:5,right:5,top:2,bottom:2}}},customSVG:{// this will be deprecated in the next major version as it is going to be replaced with a better alternative below
SVG:undefined,cssClass:undefined,offsetX:0,offsetY:0},image:{path:undefined,width:20,height:20,offsetX:0,offsetY:0}};this.yAxisAnnotation={y:0,y2:null,strokeDashArray:1,fillColor:'#eeeeee',borderColor:'#eeeeee',borderWidth:1,opacity:0.3,offsetX:0,offsetY:0,yAxisIndex:0,label:{borderColor:'#eeeeee',borderWidth:1,text:undefined,textAnchor:'end',position:'right',offsetX:0,offsetY:-3,style:{background:'#fff',color:undefined,fontSize:'12px',fontFamily:undefined,fontWeight:500,cssClass:'',padding:{left:5,right:5,top:2,bottom:2}}}};this.xAxisAnnotation={x:0,x2:null,strokeDashArray:1,fillColor:'#eeeeee',borderColor:'#eeeeee',borderWidth:1,opacity:0.3,offsetX:0,offsetY:0,label:{borderColor:'#eeeeee',borderWidth:1,text:undefined,textAnchor:'middle',orientation:'vertical',position:'top',offsetX:0,offsetY:0,style:{background:'#fff',color:undefined,fontSize:'12px',fontFamily:undefined,fontWeight:500,cssClass:'',padding:{left:5,right:5,top:2,bottom:2}}}};this.text={x:0,y:0,text:'',textAnchor:'start',foreColor:undefined,fontSize:'14px',fontFamily:undefined,fontWeight:400,appendTo:'.apexcharts-annotations',backgroundColor:'transparent',borderColor:'#eeeeee',borderRadius:0,borderWidth:0,paddingLeft:4,paddingRight:4,paddingTop:2,paddingBottom:2};this.shape={x:0,y:0,type:'rect',width:'100%',// accepts percentage as well as fixed numbers
height:50,appendTo:'.apexcharts-annotations',backgroundColor:'#fff',opacity:1,borderWidth:0,borderRadius:4,borderColor:'#eeeeee'};}_createClass(Options,[{key:"init",value:function init(){return{annotations:{position:'front',yaxis:[this.yAxisAnnotation],xaxis:[this.xAxisAnnotation],points:[this.pointAnnotation],texts:[],images:[],shapes:[]},chart:{animations:{enabled:true,easing:'easeinout',// linear, easeout, easein, easeinout, swing, bounce, elastic
speed:800,animateGradually:{delay:150,enabled:true},dynamicAnimation:{enabled:true,speed:350}},background:'transparent',locales:[en],defaultLocale:'en',dropShadow:{enabled:false,enabledOnSeries:undefined,top:2,left:2,blur:4,color:'#000',opacity:0.35},events:{animationEnd:undefined,beforeMount:undefined,mounted:undefined,updated:undefined,click:undefined,mouseMove:undefined,legendClick:undefined,markerClick:undefined,selection:undefined,dataPointSelection:undefined,dataPointMouseEnter:undefined,dataPointMouseLeave:undefined,beforeZoom:undefined,zoomed:undefined,scrolled:undefined},foreColor:'#424242',fontFamily:'inherit',height:'auto',parentHeightOffset:15,redrawOnParentResize:true,id:undefined,group:undefined,offsetX:0,offsetY:0,selection:{enabled:false,type:'x',// selectedPoints: undefined, // default datapoints that should be selected automatically
fill:{color:'#9e9e9e',opacity:0.1},stroke:{width:1,color:'#9e9e9e',opacity:0.4,dashArray:3},xaxis:{min:undefined,max:undefined},yaxis:{min:undefined,max:undefined}},sparkline:{enabled:false},brush:{enabled:false,autoScaleYaxis:true,target:undefined},stacked:false,stackType:'normal',toolbar:{show:true,offsetX:0,offsetY:0,tools:{download:true,selection:true,zoom:true,zoomin:true,zoomout:true,pan:true,reset:true,customIcons:[]},autoSelected:'zoom'// accepts -> zoom, pan, selection
},type:'line',width:'100%',zoom:{enabled:true,type:'x',autoScaleYaxis:false,zoomedArea:{fill:{color:'#2196f3',opacity:0.3},stroke:{color:'#2196f3',opacity:0.65,width:1}}}},plotOptions:{bar:{horizontal:false,columnWidth:'70%',// should be in percent 0 - 100
barHeight:'70%',// should be in percent 0 - 100
distributed:false,startingShape:'flat',endingShape:'flat',colors:{ranges:[],backgroundBarColors:[],backgroundBarOpacity:1,backgroundBarRadius:0},dataLabels:{position:'top',// top, center, bottom
maxItems:100,hideOverflowingLabels:true,orientation:'horizontal'// TODO: provide stackedLabels for stacked charts which gives additions of values
}},bubble:{minBubbleRadius:undefined,maxBubbleRadius:undefined},candlestick:{colors:{upward:'#4caf50',downward:'#f44336'},wick:{useFillColor:true}},heatmap:{radius:2,enableShades:true,shadeIntensity:0.5,reverseNegativeShade:false,distributed:false,useFillColorAsStroke:false,colorScale:{inverse:false,ranges:[],min:undefined,max:undefined}},radialBar:{inverseOrder:false,startAngle:0,endAngle:360,offsetX:0,offsetY:0,hollow:{margin:5,size:'50%',background:'transparent',image:undefined,imageWidth:150,imageHeight:150,imageOffsetX:0,imageOffsetY:0,imageClipped:true,position:'front',dropShadow:{enabled:false,top:0,left:0,blur:3,color:'#000',opacity:0.5}},track:{show:true,startAngle:undefined,endAngle:undefined,background:'#f5f5f5',strokeWidth:'97%',opacity:1,margin:5,// margin is in pixels
dropShadow:{enabled:false,top:0,left:0,blur:3,color:'#000',opacity:0.5}},dataLabels:{show:true,name:{show:true,fontSize:'16px',fontFamily:undefined,fontWeight:600,color:undefined,offsetY:0,formatter:function formatter(val){return val;}},value:{show:true,fontSize:'14px',fontFamily:undefined,fontWeight:500,color:undefined,offsetY:16,formatter:function formatter(val){return val+'%';}},total:{show:false,label:'Total',fontSize:'16px',fontWeight:600,fontFamily:undefined,color:undefined,formatter:function formatter(w){return w.globals.seriesTotals.reduce(function(a,b){return a+b;},0)/w.globals.series.length+'%';}}}},pie:{customScale:1,offsetX:0,offsetY:0,expandOnClick:true,dataLabels:{// These are the percentage values which are displayed on slice
offset:0,// offset by which labels will move outside
minAngleToShowLabel:10},donut:{size:'65%',background:'transparent',labels:{// These are the inner labels appearing inside donut
show:false,name:{show:true,fontSize:'16px',fontFamily:undefined,fontWeight:600,color:undefined,offsetY:-10,formatter:function formatter(val){return val;}},value:{show:true,fontSize:'19px',fontFamily:undefined,fontWeight:500,color:undefined,offsetY:10,formatter:function formatter(val){return val;}},total:{show:false,showAlways:false,label:'Total',fontSize:'16px',fontWeight:500,fontFamily:undefined,color:undefined,formatter:function formatter(w){return w.globals.seriesTotals.reduce(function(a,b){return a+b;},0);}}}}},radar:{size:undefined,offsetX:0,offsetY:0,polygons:{// strokeColor: '#e0e0e0', // should be deprecated in the minor version i.e 3.2
strokeColors:'#e0e0e0',connectorColors:'#e0e0e0',fill:{colors:undefined}}}},colors:undefined,dataLabels:{enabled:true,enabledOnSeries:undefined,formatter:function formatter(val){return val!==null?val:'';},textAnchor:'middle',distributed:false,offsetX:0,offsetY:0,style:{fontSize:'12px',fontFamily:undefined,fontWeight:600,colors:undefined},background:{enabled:true,foreColor:'#fff',borderRadius:2,padding:4,opacity:0.9,borderWidth:1,borderColor:'#fff',dropShadow:{enabled:false,top:1,left:1,blur:1,color:'#000',opacity:0.45}},dropShadow:{enabled:false,top:1,left:1,blur:1,color:'#000',opacity:0.45}},fill:{type:'solid',colors:undefined,// array of colors
opacity:0.85,gradient:{shade:'dark',type:'horizontal',shadeIntensity:0.5,gradientToColors:undefined,inverseColors:true,opacityFrom:1,opacityTo:1,stops:[0,50,100],colorStops:[]},image:{src:[],width:undefined,// optional
height:undefined// optional
},pattern:{style:'squares',// String | Array of Strings
width:6,height:6,strokeWidth:2}},grid:{show:true,borderColor:'#eeeeee',strokeDashArray:0,position:'back',xaxis:{lines:{show:false}},yaxis:{lines:{show:true}},row:{colors:undefined,// takes as array which will be repeated on rows
opacity:0.5},column:{colors:undefined,// takes an array which will be repeated on columns
opacity:0.5},padding:{top:0,right:10,bottom:0,left:12}},labels:[],legend:{show:true,showForSingleSeries:false,showForNullSeries:true,showForZeroSeries:true,floating:false,position:'bottom',// whether to position legends in 1 of 4
// direction - top, bottom, left, right
horizontalAlign:'center',// when position top/bottom, you can specify whether to align legends left, right or center
inverseOrder:false,fontSize:'12px',fontFamily:undefined,fontWeight:500,width:undefined,height:undefined,formatter:undefined,tooltipHoverFormatter:undefined,offsetX:-20,offsetY:0,labels:{colors:undefined,useSeriesColors:false},markers:{width:12,height:12,strokeWidth:0,fillColors:undefined,strokeColor:'#fff',radius:12,customHTML:undefined,offsetX:0,offsetY:0,onClick:undefined},itemMargin:{horizontal:5,vertical:0},onItemClick:{toggleDataSeries:true},onItemHover:{highlightDataSeries:true}},markers:{discrete:[],size:0,colors:undefined,//strokeColor: '#fff', // TODO: deprecate in major version 4.0
strokeColors:'#fff',strokeWidth:2,strokeOpacity:0.9,strokeDashArray:0,fillOpacity:1,shape:'circle',radius:2,offsetX:0,offsetY:0,onClick:undefined,onDblClick:undefined,showNullDataPoints:true,hover:{size:undefined,sizeOffset:3}},noData:{text:undefined,align:'center',verticalAlign:'middle',offsetX:0,offsetY:0,style:{color:undefined,fontSize:'14px',fontFamily:undefined}},responsive:[],// breakpoints should follow ascending order 400, then 700, then 1000
series:undefined,states:{normal:{filter:{type:'none',value:0}},hover:{filter:{type:'lighten',value:0.15}},active:{allowMultipleDataPointsSelection:false,filter:{type:'darken',value:0.65}}},title:{text:undefined,align:'left',margin:5,offsetX:0,offsetY:0,floating:false,style:{fontSize:'14px',fontWeight:600,fontFamily:undefined,color:undefined}},subtitle:{text:undefined,align:'left',margin:5,offsetX:0,offsetY:30,floating:false,style:{fontSize:'12px',fontWeight:500,fontFamily:undefined,color:undefined}},stroke:{show:true,curve:'smooth',// "smooth" / "straight" / "stepline"
lineCap:'butt',// round, butt , square
width:2,colors:undefined,// array of colors
dashArray:0// single value or array of values
},tooltip:{enabled:true,enabledOnSeries:undefined,shared:true,followCursor:false,// when disabled, the tooltip will show on top of the series instead of mouse position
intersect:false,// when enabled, tooltip will only show when user directly hovers over point
inverseOrder:false,custom:undefined,fillSeriesColor:false,theme:'light',style:{fontSize:'12px',fontFamily:undefined},onDatasetHover:{highlightDataSeries:false},x:{// x value
show:true,format:'dd MMM',// dd/MM, dd MMM yy, dd MMM yyyy
formatter:undefined// a custom user supplied formatter function
},y:{formatter:undefined,title:{formatter:function formatter(seriesName){return seriesName;}}},z:{formatter:undefined,title:'Size: '},marker:{show:true,fillColors:undefined},items:{display:'flex'},fixed:{enabled:false,position:'topRight',// topRight, topLeft, bottomRight, bottomLeft
offsetX:0,offsetY:0}},xaxis:{type:'category',categories:[],convertedCatToNumeric:false,// internal property which should not be altered outside
offsetX:0,offsetY:0,labels:{show:true,rotate:-45,rotateAlways:false,hideOverlappingLabels:true,trim:false,minHeight:undefined,maxHeight:120,showDuplicates:true,style:{colors:[],fontSize:'12px',fontWeight:500,fontFamily:undefined,cssClass:''},offsetX:0,offsetY:0,format:undefined,formatter:undefined,// custom formatter function which will override format
datetimeUTC:true,datetimeFormatter:{year:'yyyy',month:"MMM 'yy",day:'dd MMM',hour:'HH:mm',minute:'HH:mm:ss'}},axisBorder:{show:true,color:'#eeeeee',width:'100%',height:1,offsetX:0,offsetY:0},axisTicks:{show:true,color:'#eeeeee',height:6,offsetX:0,offsetY:0},tickAmount:undefined,tickPlacement:'on',min:undefined,max:undefined,range:undefined,floating:false,position:'bottom',title:{text:undefined,offsetX:0,offsetY:0,style:{color:undefined,fontSize:'12px',fontWeight:600,fontFamily:undefined,cssClass:''}},crosshairs:{show:true,width:1,// tickWidth/barWidth or an integer
position:'back',opacity:0.9,stroke:{color:'#bdbdbd',width:1,dashArray:3},fill:{type:'solid',// solid, gradient
color:'#e0e0e0',gradient:{colorFrom:'#D8E3F0',colorTo:'#BED1E6',stops:[0,100],opacityFrom:0.4,opacityTo:0.5}},dropShadow:{enabled:false,left:0,top:0,blur:1,opacity:0.4}},tooltip:{enabled:true,offsetY:0,formatter:undefined,style:{fontSize:'12px',fontFamily:undefined}}},yaxis:this.yAxis,theme:{mode:'light',palette:'palette1',// If defined, it will overwrite globals.colors variable
monochrome:{// monochrome allows you to select just 1 color and fill out the rest with light/dark shade (intensity can be selected)
enabled:false,color:'#2196f3',shadeTo:'light',shadeIntensity:0.65}}};}}]);return Options;}();/**
   * ApexCharts Annotations Class for drawing lines/rects on both xaxis and yaxis.
   *
   * @module Annotations
   **/var Annotations=/*#__PURE__*/function(){function Annotations(ctx){_classCallCheck(this,Annotations);this.ctx=ctx;this.w=ctx.w;this.graphics=new Graphics(this.ctx);if(this.w.globals.isBarHorizontal){this.invertAxis=true;}this.helpers=new Helpers(this);this.xAxisAnnotations=new XAnnotations(this);this.yAxisAnnotations=new YAnnotations(this);this.pointsAnnotations=new PointAnnotations(this);if(this.w.globals.isBarHorizontal&&this.w.config.yaxis[0].reversed){this.inversedReversedAxis=true;}this.xDivision=this.w.globals.gridWidth/this.w.globals.dataPoints;}_createClass(Annotations,[{key:"drawAxesAnnotations",value:function drawAxesAnnotations(){var w=this.w;if(w.globals.axisCharts){var yAnnotations=this.yAxisAnnotations.drawYAxisAnnotations();var xAnnotations=this.xAxisAnnotations.drawXAxisAnnotations();var pointAnnotations=this.pointsAnnotations.drawPointAnnotations();var initialAnim=w.config.chart.animations.enabled;var annoArray=[yAnnotations,xAnnotations,pointAnnotations];var annoElArray=[xAnnotations.node,yAnnotations.node,pointAnnotations.node];for(var i=0;i<3;i++){w.globals.dom.elGraphical.add(annoArray[i]);if(initialAnim&&!w.globals.resized&&!w.globals.dataChanged){// fixes apexcharts/apexcharts.js#685
if(w.config.chart.type!=='scatter'&&w.config.chart.type!=='bubble'&&w.globals.dataPoints>1){annoElArray[i].classList.add('apexcharts-element-hidden');}}w.globals.delayedElements.push({el:annoElArray[i],index:0});}// background sizes needs to be calculated after text is drawn, so calling them last
this.helpers.annotationsBackground();}}},{key:"drawShapeAnnos",value:function drawShapeAnnos(){var _this=this;var w=this.w;w.config.annotations.shapes.map(function(s,index){_this.addShape(s,index);});}},{key:"drawImageAnnos",value:function drawImageAnnos(){var _this2=this;var w=this.w;w.config.annotations.images.map(function(s,index){_this2.addImage(s,index);});}},{key:"drawTextAnnos",value:function drawTextAnnos(){var _this3=this;var w=this.w;w.config.annotations.texts.map(function(t,index){_this3.addText(t,index);});}},{key:"addXaxisAnnotation",value:function addXaxisAnnotation(anno,parent,index){this.xAxisAnnotations.addXaxisAnnotation(anno,parent,index);}},{key:"addYaxisAnnotation",value:function addYaxisAnnotation(anno,parent,index){this.yAxisAnnotations.addYaxisAnnotation(anno,parent,index);}},{key:"addPointAnnotation",value:function addPointAnnotation(anno,parent,index){this.pointsAnnotations.addPointAnnotation(anno,parent,index);}},{key:"addText",value:function addText(params,index){var x=params.x,y=params.y,text=params.text,textAnchor=params.textAnchor,foreColor=params.foreColor,fontSize=params.fontSize,fontFamily=params.fontFamily,fontWeight=params.fontWeight,cssClass=params.cssClass,backgroundColor=params.backgroundColor,borderWidth=params.borderWidth,strokeDashArray=params.strokeDashArray,borderRadius=params.borderRadius,borderColor=params.borderColor,_params$appendTo=params.appendTo,appendTo=_params$appendTo===void 0?'.apexcharts-annotations':_params$appendTo,_params$paddingLeft=params.paddingLeft,paddingLeft=_params$paddingLeft===void 0?4:_params$paddingLeft,_params$paddingRight=params.paddingRight,paddingRight=_params$paddingRight===void 0?4:_params$paddingRight,_params$paddingBottom=params.paddingBottom,paddingBottom=_params$paddingBottom===void 0?2:_params$paddingBottom,_params$paddingTop=params.paddingTop,paddingTop=_params$paddingTop===void 0?2:_params$paddingTop;var w=this.w;var elText=this.graphics.drawText({x:x,y:y,text:text,textAnchor:textAnchor||'start',fontSize:fontSize||'12px',fontWeight:fontWeight||'regular',fontFamily:fontFamily||w.config.chart.fontFamily,foreColor:foreColor||w.config.chart.foreColor,cssClass: true?cssClass:undefined});var parent=w.globals.dom.baseEl.querySelector(appendTo);if(parent){parent.appendChild(elText.node);}var textRect=elText.bbox();if(params.draggable){this.helpers.makeAnnotationDraggable(elText,'texts',index);}if(text){var elRect=this.graphics.drawRect(textRect.x-paddingLeft,textRect.y-paddingTop,textRect.width+paddingLeft+paddingRight,textRect.height+paddingBottom+paddingTop,borderRadius,backgroundColor?backgroundColor:'transparent',1,borderWidth,borderColor,strokeDashArray);parent.insertBefore(elRect.node,elText.node);}}},{key:"addShape",value:function addShape(params,index){var opts={type:params.type,x:params.x||0,y:params.y||0,width:params.width||'100%',height:params.height||50,circleRadius:params.radius||25,backgroundColor:params.backgroundColor||'#fff',opacity:params.opacity||1,borderWidth:params.borderWidth||0,borderRadius:params.borderRadius||4,borderColor:params.borderColor||'#eeeeee',appendTo:params.appendTo||'.apexcharts-annotations'};var w=this.w;if(String(opts.width).indexOf('%')>-1){opts.width=parseInt(opts.width,10)*parseInt(w.globals.svgWidth,10)/100;}var elShape=null;if(opts.type==='circle'){elShape=this.graphics.drawCircle(opts.circleRadius,{fill:opts.backgroundColor,stroke:opts.borderColor,'stroke-width':opts.borderWidth,opacity:opts.opacity,cx:opts.x,cy:opts.y});}else{elShape=this.graphics.drawRect(opts.x,opts.y,opts.width,opts.height,opts.borderRadius,opts.backgroundColor,opts.opacity,opts.borderWidth,opts.borderColor);}var parent=w.globals.dom.baseEl.querySelector(opts.appendTo);if(parent){parent.appendChild(elShape.node);}if(params.draggable){this.helpers.makeAnnotationDraggable(elShape,'shapes',index);elShape.node.classList.add('apexcharts-resizable-element');}}},{key:"addImage",value:function addImage(params,index){var w=this.w;var path=params.path,_params$x=params.x,x=_params$x===void 0?0:_params$x,_params$y=params.y,y=_params$y===void 0?0:_params$y,_params$width=params.width,width=_params$width===void 0?20:_params$width,_params$height=params.height,height=_params$height===void 0?20:_params$height,_params$appendTo2=params.appendTo,appendTo=_params$appendTo2===void 0?'.apexcharts-annotations':_params$appendTo2;var img=w.globals.dom.Paper.image(path);img.size(width,height).move(x,y);var parent=w.globals.dom.baseEl.querySelector(appendTo);if(parent){parent.appendChild(img.node);}if(params.draggable){this.helpers.makeAnnotationDraggable(img,'images',index);img.node.classList.add('apexcharts-resizable-element');}}// The addXaxisAnnotation method requires a parent class, and user calling this method externally on the chart instance may not specify parent, hence a different method
},{key:"addXaxisAnnotationExternal",value:function addXaxisAnnotationExternal(params,pushToMemory,context){this.addAnnotationExternal({params:params,pushToMemory:pushToMemory,context:context,type:'xaxis',contextMethod:context.addXaxisAnnotation});return context;}},{key:"addYaxisAnnotationExternal",value:function addYaxisAnnotationExternal(params,pushToMemory,context){this.addAnnotationExternal({params:params,pushToMemory:pushToMemory,context:context,type:'yaxis',contextMethod:context.addYaxisAnnotation});return context;}},{key:"addPointAnnotationExternal",value:function addPointAnnotationExternal(params,pushToMemory,context){if(typeof this.invertAxis==='undefined'){this.invertAxis=context.w.globals.isBarHorizontal;}this.addAnnotationExternal({params:params,pushToMemory:pushToMemory,context:context,type:'point',contextMethod:context.addPointAnnotation});return context;}},{key:"addAnnotationExternal",value:function addAnnotationExternal(_ref){var params=_ref.params,pushToMemory=_ref.pushToMemory,context=_ref.context,type=_ref.type,contextMethod=_ref.contextMethod;var me=context;var w=me.w;var parent=w.globals.dom.baseEl.querySelector(".apexcharts-".concat(type,"-annotations"));var index=parent.childNodes.length+1;var options=new Options();var axesAnno=Object.assign({},type==='xaxis'?options.xAxisAnnotation:type==='yaxis'?options.yAxisAnnotation:options.pointAnnotation);var anno=Utils.extend(axesAnno,params);switch(type){case'xaxis':this.addXaxisAnnotation(anno,parent,index);break;case'yaxis':this.addYaxisAnnotation(anno,parent,index);break;case'point':this.addPointAnnotation(anno,parent,index);break;}// add background
var axesAnnoLabel=w.globals.dom.baseEl.querySelector(".apexcharts-".concat(type,"-annotations .apexcharts-").concat(type,"-annotation-label[rel='").concat(index,"']"));var elRect=this.helpers.addBackgroundToAnno(axesAnnoLabel,anno);if(elRect){parent.insertBefore(elRect.node,axesAnnoLabel);}if(pushToMemory){w.globals.memory.methodsToExec.push({context:me,id:anno.id?anno.id:Utils.randomId(),method:contextMethod,label:'addAnnotation',params:params});}return context;}},{key:"clearAnnotations",value:function clearAnnotations(ctx){var w=ctx.w;var annos=w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations');// annotations added externally should be cleared out too
w.globals.memory.methodsToExec.map(function(m,i){if(m.label==='addText'||m.label==='addAnnotation'){w.globals.memory.methodsToExec.splice(i,1);}});annos=Utils.listToArray(annos);// delete the DOM elements
Array.prototype.forEach.call(annos,function(a){while(a.firstChild){a.removeChild(a.firstChild);}});}},{key:"removeAnnotation",value:function removeAnnotation(ctx,id){var w=ctx.w;var annos=w.globals.dom.baseEl.querySelectorAll(".".concat(id));if(annos){w.globals.memory.methodsToExec.map(function(m,i){if(m.id===id){w.globals.memory.methodsToExec.splice(i,1);}});Array.prototype.forEach.call(annos,function(a){a.parentElement.removeChild(a);});}}}]);return Annotations;}();/**
   * DateTime Class to manipulate datetime values.
   *
   * @module DateTime
   **/var DateTime=/*#__PURE__*/function(){function DateTime(ctx){_classCallCheck(this,DateTime);this.ctx=ctx;this.w=ctx.w;this.months31=[1,3,5,7,8,10,12];this.months30=[2,4,6,9,11];this.daysCntOfYear=[0,31,59,90,120,151,181,212,243,273,304,334];}_createClass(DateTime,[{key:"isValidDate",value:function isValidDate(date){return!isNaN(this.parseDate(date));}},{key:"getTimeStamp",value:function getTimeStamp(dateStr){if(!Date.parse(dateStr)){return dateStr;}var utc=this.w.config.xaxis.labels.datetimeUTC;return!utc?new Date(dateStr).getTime():new Date(new Date(dateStr).toISOString().substr(0,25)).getTime();}},{key:"getDate",value:function getDate(timestamp){var utc=this.w.config.xaxis.labels.datetimeUTC;return utc?new Date(new Date(timestamp).toUTCString()):new Date(timestamp);}},{key:"parseDate",value:function parseDate(dateStr){var parsed=Date.parse(dateStr);if(!isNaN(parsed)){return this.getTimeStamp(dateStr);}var output=Date.parse(dateStr.replace(/-/g,'/').replace(/[a-z]+/gi,' '));output=this.getTimeStamp(output);return output;}// http://stackoverflow.com/questions/14638018/current-time-formatting-with-javascript#answer-14638191
},{key:"formatDate",value:function formatDate(date,format){var locale=this.w.globals.locale;var utc=this.w.config.xaxis.labels.datetimeUTC;var MMMM=['\x00'].concat(_toConsumableArray(locale.months));var MMM=['\x01'].concat(_toConsumableArray(locale.shortMonths));var dddd=['\x02'].concat(_toConsumableArray(locale.days));var ddd=['\x03'].concat(_toConsumableArray(locale.shortDays));function ii(i,len){var s=i+'';len=len||2;while(s.length<len){s='0'+s;}return s;}var y=utc?date.getUTCFullYear():date.getFullYear();format=format.replace(/(^|[^\\])yyyy+/g,'$1'+y);format=format.replace(/(^|[^\\])yy/g,'$1'+y.toString().substr(2,2));format=format.replace(/(^|[^\\])y/g,'$1'+y);var M=(utc?date.getUTCMonth():date.getMonth())+1;format=format.replace(/(^|[^\\])MMMM+/g,'$1'+MMMM[0]);format=format.replace(/(^|[^\\])MMM/g,'$1'+MMM[0]);format=format.replace(/(^|[^\\])MM/g,'$1'+ii(M));format=format.replace(/(^|[^\\])M/g,'$1'+M);var d=utc?date.getUTCDate():date.getDate();format=format.replace(/(^|[^\\])dddd+/g,'$1'+dddd[0]);format=format.replace(/(^|[^\\])ddd/g,'$1'+ddd[0]);format=format.replace(/(^|[^\\])dd/g,'$1'+ii(d));format=format.replace(/(^|[^\\])d/g,'$1'+d);var H=utc?date.getUTCHours():date.getHours();format=format.replace(/(^|[^\\])HH+/g,'$1'+ii(H));format=format.replace(/(^|[^\\])H/g,'$1'+H);var h=H>12?H-12:H===0?12:H;format=format.replace(/(^|[^\\])hh+/g,'$1'+ii(h));format=format.replace(/(^|[^\\])h/g,'$1'+h);var m=utc?date.getUTCMinutes():date.getMinutes();format=format.replace(/(^|[^\\])mm+/g,'$1'+ii(m));format=format.replace(/(^|[^\\])m/g,'$1'+m);var s=utc?date.getUTCSeconds():date.getSeconds();format=format.replace(/(^|[^\\])ss+/g,'$1'+ii(s));format=format.replace(/(^|[^\\])s/g,'$1'+s);var f=utc?date.getUTCMilliseconds():date.getMilliseconds();format=format.replace(/(^|[^\\])fff+/g,'$1'+ii(f,3));f=Math.round(f/10);format=format.replace(/(^|[^\\])ff/g,'$1'+ii(f));f=Math.round(f/10);format=format.replace(/(^|[^\\])f/g,'$1'+f);var T=H<12?'AM':'PM';format=format.replace(/(^|[^\\])TT+/g,'$1'+T);format=format.replace(/(^|[^\\])T/g,'$1'+T.charAt(0));var t=T.toLowerCase();format=format.replace(/(^|[^\\])tt+/g,'$1'+t);format=format.replace(/(^|[^\\])t/g,'$1'+t.charAt(0));var tz=-date.getTimezoneOffset();var K=utc||!tz?'Z':tz>0?'+':'-';if(!utc){tz=Math.abs(tz);var tzHrs=Math.floor(tz/60);var tzMin=tz%60;K+=ii(tzHrs)+':'+ii(tzMin);}format=format.replace(/(^|[^\\])K/g,'$1'+K);var day=(utc?date.getUTCDay():date.getDay())+1;format=format.replace(new RegExp(dddd[0],'g'),dddd[day]);format=format.replace(new RegExp(ddd[0],'g'),ddd[day]);format=format.replace(new RegExp(MMMM[0],'g'),MMMM[M]);format=format.replace(new RegExp(MMM[0],'g'),MMM[M]);format=format.replace(/\\(.)/g,'$1');return format;}},{key:"getTimeUnitsfromTimestamp",value:function getTimeUnitsfromTimestamp(minX,maxX,utc){var w=this.w;if(w.config.xaxis.min!==undefined){minX=w.config.xaxis.min;}if(w.config.xaxis.max!==undefined){maxX=w.config.xaxis.max;}var tsMin=this.getDate(minX);var tsMax=this.getDate(maxX);var minD=this.formatDate(tsMin,'yyyy MM dd HH mm').split(' ');var maxD=this.formatDate(tsMax,'yyyy MM dd HH mm').split(' ');return{minMinute:parseInt(minD[4],10),maxMinute:parseInt(maxD[4],10),minHour:parseInt(minD[3],10),maxHour:parseInt(maxD[3],10),minDate:parseInt(minD[2],10),maxDate:parseInt(maxD[2],10),minMonth:parseInt(minD[1],10)-1,maxMonth:parseInt(maxD[1],10)-1,minYear:parseInt(minD[0],10),maxYear:parseInt(maxD[0],10)};}},{key:"isLeapYear",value:function isLeapYear(year){return year%4===0&&year%100!==0||year%400===0;}},{key:"calculcateLastDaysOfMonth",value:function calculcateLastDaysOfMonth(month,year,subtract){var days=this.determineDaysOfMonths(month,year);// whatever days we get, subtract the number of days asked
return days-subtract;}},{key:"determineDaysOfYear",value:function determineDaysOfYear(year){var days=365;if(this.isLeapYear(year)){days=366;}return days;}},{key:"determineRemainingDaysOfYear",value:function determineRemainingDaysOfYear(year,month,date){var dayOfYear=this.daysCntOfYear[month]+date;if(month>1&&this.isLeapYear())dayOfYear++;return dayOfYear;}},{key:"determineDaysOfMonths",value:function determineDaysOfMonths(month,year){var days=30;month=Utils.monthMod(month);switch(true){case this.months30.indexOf(month)>-1:if(month===2){if(this.isLeapYear(year)){days=29;}else{days=28;}}break;case this.months31.indexOf(month)>-1:days=31;break;default:days=31;break;}return days;}}]);return DateTime;}();/**
   * ApexCharts Default Class for setting default options for all chart types.
   *
   * @module Defaults
   **/var Defaults=/*#__PURE__*/function(){function Defaults(opts){_classCallCheck(this,Defaults);this.opts=opts;}_createClass(Defaults,[{key:"line",value:function line(){return{chart:{animations:{easing:'swing'}},dataLabels:{enabled:false},stroke:{width:5,curve:'straight'},markers:{size:0,hover:{sizeOffset:6}},xaxis:{crosshairs:{width:1}}};}},{key:"sparkline",value:function sparkline(defaults){this.opts.yaxis[0].show=false;this.opts.yaxis[0].title.text='';this.opts.yaxis[0].axisBorder.show=false;this.opts.yaxis[0].axisTicks.show=false;this.opts.yaxis[0].floating=true;var ret={grid:{show:false,padding:{left:0,right:0,top:0,bottom:0}},legend:{show:false},xaxis:{labels:{show:false},tooltip:{enabled:false},axisBorder:{show:false},axisTicks:{show:false}},chart:{toolbar:{show:false},zoom:{enabled:false}},dataLabels:{enabled:false}};return Utils.extend(defaults,ret);}},{key:"bar",value:function bar(){return{chart:{stacked:false,animations:{easing:'swing'}},plotOptions:{bar:{dataLabels:{position:'center'}}},dataLabels:{style:{colors:['#fff']},background:{enabled:false}},stroke:{width:0,lineCap:'square'},fill:{opacity:0.85},legend:{markers:{shape:'square',radius:2,size:8}},tooltip:{shared:false},xaxis:{tooltip:{enabled:false},tickPlacement:'between',crosshairs:{width:'barWidth',position:'back',fill:{type:'solid'},dropShadow:{enabled:false},stroke:{width:0}}}};}},{key:"candlestick",value:function candlestick(){return{stroke:{width:1,colors:['#424242']},fill:{opacity:1},dataLabels:{enabled:false},tooltip:{shared:true,custom:function custom(_ref){var seriesIndex=_ref.seriesIndex,dataPointIndex=_ref.dataPointIndex,w=_ref.w;var o=w.globals.seriesCandleO[seriesIndex][dataPointIndex];var h=w.globals.seriesCandleH[seriesIndex][dataPointIndex];var l=w.globals.seriesCandleL[seriesIndex][dataPointIndex];var c=w.globals.seriesCandleC[seriesIndex][dataPointIndex];return'<div class="apexcharts-tooltip-candlestick">'+'<div>Open: <span class="value">'+o+'</span></div>'+'<div>High: <span class="value">'+h+'</span></div>'+'<div>Low: <span class="value">'+l+'</span></div>'+'<div>Close: <span class="value">'+c+'</span></div>'+'</div>';}},states:{active:{filter:{type:'none'}}},xaxis:{crosshairs:{width:1}}};}},{key:"rangeBar",value:function rangeBar(){return{stroke:{width:0,lineCap:'square'},plotOptions:{bar:{dataLabels:{position:'center'}}},dataLabels:{enabled:false,formatter:function formatter(val,_ref2){var ctx=_ref2.ctx,seriesIndex=_ref2.seriesIndex,dataPointIndex=_ref2.dataPointIndex,w=_ref2.w;var start=w.globals.seriesRangeStart[seriesIndex][dataPointIndex];var end=w.globals.seriesRangeEnd[seriesIndex][dataPointIndex];return end-start;},background:{enabled:false},style:{colors:['#fff']}},tooltip:{shared:false,followCursor:true,custom:function custom(_ref3){var ctx=_ref3.ctx,seriesIndex=_ref3.seriesIndex,dataPointIndex=_ref3.dataPointIndex,y1=_ref3.y1,y2=_ref3.y2,w=_ref3.w;var start=w.globals.seriesRangeStart[seriesIndex][dataPointIndex];var end=w.globals.seriesRangeEnd[seriesIndex][dataPointIndex];var ylabel=w.globals.labels[dataPointIndex];var seriesName=w.config.series[seriesIndex].name;var yLbFormatter=w.config.tooltip.y.formatter;var yLbTitleFormatter=w.config.tooltip.y.title.formatter;var opts={w:w,seriesIndex:seriesIndex,dataPointIndex:dataPointIndex};if(typeof yLbTitleFormatter==='function'){seriesName=yLbTitleFormatter(seriesName,opts);}if(y1&&y2){start=y1;end=y2;if(w.config.series[seriesIndex].data[dataPointIndex].x){ylabel=w.config.series[seriesIndex].data[dataPointIndex].x+':';}if(typeof yLbFormatter==='function'){ylabel=yLbFormatter(ylabel,opts);}}var startVal='';var endVal='';var color=w.globals.colors[seriesIndex];if(w.config.tooltip.x.formatter===undefined){if(w.config.xaxis.type==='datetime'){var datetimeObj=new DateTime(ctx);startVal=datetimeObj.formatDate(datetimeObj.getDate(start),w.config.tooltip.x.format);endVal=datetimeObj.formatDate(datetimeObj.getDate(end),w.config.tooltip.x.format);}else{startVal=start;endVal=end;}}else{startVal=w.config.tooltip.x.formatter(start);endVal=w.config.tooltip.x.formatter(end);}return'<div class="apexcharts-tooltip-rangebar">'+'<div> <span class="series-name" style="color: '+color+'">'+(seriesName?seriesName:'')+'</span></div>'+'<div> <span class="category">'+ylabel+' </span> <span class="value start-value">'+startVal+'</span> <span class="separator">-</span> <span class="value end-value">'+endVal+'</span></div>'+'</div>';}},xaxis:{tickPlacement:'between',tooltip:{enabled:false},crosshairs:{stroke:{width:0}}}};}},{key:"area",value:function area(){return{stroke:{width:4},fill:{type:'solid',gradient:{inverseColors:false,shade:'light',type:'vertical',opacityFrom:0.65,opacityTo:0.5,stops:[0,100,100]}},markers:{size:0,hover:{sizeOffset:6}},tooltip:{followCursor:false}};}},{key:"brush",value:function brush(defaults){var ret={chart:{toolbar:{autoSelected:'selection',show:false},zoom:{enabled:false}},dataLabels:{enabled:false},stroke:{width:1},tooltip:{enabled:false},xaxis:{tooltip:{enabled:false}}};return Utils.extend(defaults,ret);}},{key:"stacked100",value:function stacked100(opts){opts.dataLabels=opts.dataLabels||{};opts.dataLabels.formatter=opts.dataLabels.formatter||undefined;var existingDataLabelFormatter=opts.dataLabels.formatter;opts.yaxis.forEach(function(yaxe,index){opts.yaxis[index].min=0;opts.yaxis[index].max=100;});var isBar=opts.chart.type==='bar';if(isBar){opts.dataLabels.formatter=existingDataLabelFormatter||function(val){if(typeof val==='number'){return val?val.toFixed(0)+'%':val;}return val;};}return opts;}// This function removes the left and right spacing in chart for line/area/scatter if xaxis type = category for those charts by converting xaxis = numeric. Numeric/Datetime xaxis prevents the unnecessary spacing in the left/right of the chart area
},{key:"convertCatToNumeric",value:function convertCatToNumeric(opts){opts.xaxis.convertedCatToNumeric=true;return opts;}},{key:"convertCatToNumericXaxis",value:function convertCatToNumericXaxis(opts,ctx,cats){opts.xaxis.type='numeric';opts.xaxis.labels=opts.xaxis.labels||{};opts.xaxis.labels.formatter=opts.xaxis.labels.formatter||function(val){return Utils.isNumber(val)?Math.floor(val):val;};var defaultFormatter=opts.xaxis.labels.formatter;var labels=opts.xaxis.categories&&opts.xaxis.categories.length?opts.xaxis.categories:opts.labels;if(cats&&cats.length){labels=cats.map(function(c){return c.toString();});}if(labels&&labels.length){opts.xaxis.labels.formatter=function(val){return Utils.isNumber(val)?defaultFormatter(labels[Math.floor(val)-1]):defaultFormatter(val);};}opts.xaxis.categories=[];opts.labels=[];opts.xaxis.tickAmount=opts.xaxis.tickAmount||'dataPoints';return opts;}},{key:"bubble",value:function bubble(){return{dataLabels:{style:{colors:['#fff']}},tooltip:{shared:false,intersect:true},xaxis:{crosshairs:{width:0}},fill:{type:'solid',gradient:{shade:'light',inverse:true,shadeIntensity:0.55,opacityFrom:0.4,opacityTo:0.8}}};}},{key:"scatter",value:function scatter(){return{dataLabels:{enabled:false},tooltip:{shared:false,intersect:true},markers:{size:6,strokeWidth:1,hover:{sizeOffset:2}}};}},{key:"heatmap",value:function heatmap(){return{chart:{stacked:false},fill:{opacity:1},dataLabels:{style:{colors:['#fff']}},stroke:{colors:['#fff']},tooltip:{followCursor:true,marker:{show:false},x:{show:false}},legend:{position:'top',markers:{shape:'square',size:10,offsetY:2}},grid:{padding:{right:20}}};}},{key:"pie",value:function pie(){return{chart:{toolbar:{show:false}},plotOptions:{pie:{donut:{labels:{show:false}}}},dataLabels:{formatter:function formatter(val){return val.toFixed(1)+'%';},style:{colors:['#fff']},dropShadow:{enabled:true}},stroke:{colors:['#fff']},fill:{opacity:1,gradient:{shade:'dark',shadeIntensity:0.35,inverseColors:false,stops:[0,100,100]}},tooltip:{theme:'dark',fillSeriesColor:true},legend:{position:'right'}};}},{key:"donut",value:function donut(){return{chart:{toolbar:{show:false}},dataLabels:{formatter:function formatter(val){return val.toFixed(1)+'%';},style:{colors:['#fff']},dropShadow:{enabled:true}},stroke:{colors:['#fff']},fill:{opacity:1,gradient:{shade:'dark',shadeIntensity:0.4,inverseColors:false,type:'vertical',opacityFrom:1,opacityTo:1,stops:[70,98,100]}},tooltip:{theme:'dark',fillSeriesColor:true},legend:{position:'right'}};}},{key:"radar",value:function radar(){this.opts.yaxis[0].labels.offsetY=this.opts.yaxis[0].labels.offsetY?this.opts.yaxis[0].labels.offsetY:6;return{dataLabels:{enabled:false,style:{fontSize:'12px'}},stroke:{width:2},markers:{size:3,strokeWidth:1,strokeOpacity:1},fill:{opacity:0.2},tooltip:{shared:false,intersect:true,followCursor:true},grid:{show:false},xaxis:{labels:{formatter:function formatter(val){return val;},style:{colors:['#757575'],fontSize:'12px'}},tooltip:{enabled:false},crosshairs:{show:false}}};}},{key:"radialBar",value:function radialBar(){return{chart:{animations:{dynamicAnimation:{enabled:true,speed:800}},toolbar:{show:false}},fill:{gradient:{shade:'dark',shadeIntensity:0.4,inverseColors:false,type:'diagonal2',opacityFrom:1,opacityTo:1,stops:[70,98,100]}},legend:{show:false,position:'right'},tooltip:{enabled:false,fillSeriesColor:true}};}}]);return Defaults;}();/**
   * ApexCharts Config Class for extending user options with pre-defined ApexCharts config.
   *
   * @module Config
   **/var Config=/*#__PURE__*/function(){function Config(opts){_classCallCheck(this,Config);this.opts=opts;}_createClass(Config,[{key:"init",value:function init(_ref){var responsiveOverride=_ref.responsiveOverride;var opts=this.opts;var options=new Options();var defaults=new Defaults(opts);this.chartType=opts.chart.type;if(this.chartType==='histogram'){// technically, a histogram can be drawn by a column chart with no spaces in between
opts.chart.type='bar';opts=Utils.extend({plotOptions:{bar:{columnWidth:'99.99%'}}},opts);}opts=this.extendYAxis(opts);opts=this.extendAnnotations(opts);var config=options.init();var newDefaults={};if(opts&&_typeof(opts)==='object'){var chartDefaults={};var chartTypes=['line','area','bar','candlestick','rangeBar','histogram','bubble','scatter','heatmap','pie','donut','radar','radialBar'];if(chartTypes.indexOf(opts.chart.type)!==-1){chartDefaults=defaults[opts.chart.type]();}else{chartDefaults=defaults.line();}if(opts.chart.brush&&opts.chart.brush.enabled){chartDefaults=defaults.brush(chartDefaults);}if(opts.chart.stacked&&opts.chart.stackType==='100%'){opts=defaults.stacked100(opts);}// If user has specified a dark theme, make the tooltip dark too
this.checkForDarkTheme(window.Apex);// check global window Apex options
this.checkForDarkTheme(opts);// check locally passed options
opts.xaxis=opts.xaxis||window.Apex.xaxis||{};// an important boolean needs to be set here
// otherwise all the charts will have this flag set to true window.Apex.xaxis is set globally
if(!responsiveOverride){opts.xaxis.convertedCatToNumeric=false;}opts=this.checkForCatToNumericXAxis(this.chartType,chartDefaults,opts);if(opts.chart.sparkline&&opts.chart.sparkline.enabled||window.Apex.chart&&window.Apex.chart.sparkline&&window.Apex.chart.sparkline.enabled){chartDefaults=defaults.sparkline(chartDefaults);}newDefaults=Utils.extend(config,chartDefaults);}// config should cascade in this fashion
// default-config < global-apex-variable-config < user-defined-config
// get GLOBALLY defined options and merge with the default config
var mergedWithDefaultConfig=Utils.extend(newDefaults,window.Apex);// get the merged config and extend with user defined config
config=Utils.extend(mergedWithDefaultConfig,opts);// some features are not supported. those mismatches should be handled
config=this.handleUserInputErrors(config);return config;}},{key:"checkForCatToNumericXAxis",value:function checkForCatToNumericXAxis(chartType,chartDefaults,opts){var defaults=new Defaults(opts);var isBarHorizontal=chartType==='bar'&&opts.plotOptions&&opts.plotOptions.bar&&opts.plotOptions.bar.horizontal;var unsupportedZoom=chartType==='pie'||chartType==='donut'||chartType==='radar'||chartType==='radialBar'||chartType==='heatmap';var notNumericXAxis=opts.xaxis.type!=='datetime'&&opts.xaxis.type!=='numeric';var tickPlacement=opts.xaxis.tickPlacement?opts.xaxis.tickPlacement:chartDefaults.xaxis&&chartDefaults.xaxis.tickPlacement;if(!isBarHorizontal&&!unsupportedZoom&&notNumericXAxis&&tickPlacement!=='between'){opts=defaults.convertCatToNumeric(opts);}return opts;}},{key:"extendYAxis",value:function extendYAxis(opts){var options=new Options();if(typeof opts.yaxis==='undefined'||!opts.yaxis||Array.isArray(opts.yaxis)&&opts.yaxis.length===0){opts.yaxis={};}// extend global yaxis config (only if object is provided / not an array)
if(opts.yaxis.constructor!==Array&&window.Apex.yaxis&&window.Apex.yaxis.constructor!==Array){opts.yaxis=Utils.extend(opts.yaxis,window.Apex.yaxis);}// as we can't extend nested object's array with extend, we need to do it first
// user can provide either an array or object in yaxis config
if(opts.yaxis.constructor!==Array){// convert the yaxis to array if user supplied object
opts.yaxis=[Utils.extend(options.yAxis,opts.yaxis)];}else{opts.yaxis=Utils.extendArray(opts.yaxis,options.yAxis);}var isLogY=false;opts.yaxis.forEach(function(y){if(y.logarithmic){isLogY=true;}});// A logarithmic chart works correctly when each series has a corresponding y-axis
// If this is not the case, we manually create yaxis for multi-series log chart
if(isLogY&&opts.series.length!==opts.yaxis.length&&opts.series.length){opts.yaxis=opts.series.map(function(s,i){if(!s.name){opts.series[i].name="series-".concat(i+1);}if(opts.yaxis[i]){opts.yaxis[i].seriesName=opts.series[i].name;return opts.yaxis[i];}else{var newYaxis=Utils.extend(options.yAxis,opts.yaxis[0]);newYaxis.show=false;return newYaxis;}});}if(isLogY&&opts.series.length>1&&opts.series.length!==opts.yaxis.length){console.warn('A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both.');}return opts;}// annotations also accepts array, so we need to extend them manually
},{key:"extendAnnotations",value:function extendAnnotations(opts){if(typeof opts.annotations==='undefined'){opts.annotations={};opts.annotations.yaxis=[];opts.annotations.xaxis=[];opts.annotations.points=[];}opts=this.extendYAxisAnnotations(opts);opts=this.extendXAxisAnnotations(opts);opts=this.extendPointAnnotations(opts);return opts;}},{key:"extendYAxisAnnotations",value:function extendYAxisAnnotations(opts){var options=new Options();opts.annotations.yaxis=Utils.extendArray(typeof opts.annotations.yaxis!=='undefined'?opts.annotations.yaxis:[],options.yAxisAnnotation);return opts;}},{key:"extendXAxisAnnotations",value:function extendXAxisAnnotations(opts){var options=new Options();opts.annotations.xaxis=Utils.extendArray(typeof opts.annotations.xaxis!=='undefined'?opts.annotations.xaxis:[],options.xAxisAnnotation);return opts;}},{key:"extendPointAnnotations",value:function extendPointAnnotations(opts){var options=new Options();opts.annotations.points=Utils.extendArray(typeof opts.annotations.points!=='undefined'?opts.annotations.points:[],options.pointAnnotation);return opts;}},{key:"checkForDarkTheme",value:function checkForDarkTheme(opts){if(opts.theme&&opts.theme.mode==='dark'){if(!opts.tooltip){opts.tooltip={};}if(opts.tooltip.theme!=='light'){opts.tooltip.theme='dark';}if(!opts.chart.foreColor){opts.chart.foreColor='#f6f7f8';}if(!opts.theme.palette){opts.theme.palette='palette4';}}}},{key:"handleUserInputErrors",value:function handleUserInputErrors(opts){var config=opts;// conflicting tooltip option. intersect makes sure to focus on 1 point at a time. Shared cannot be used along with it
if(config.tooltip.shared&&config.tooltip.intersect){throw new Error('tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.');}if((config.chart.type==='bar'||config.chart.type==='rangeBar')&&config.plotOptions.bar.horizontal){// No multiple yaxis for bars
if(config.yaxis.length>1){throw new Error('Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false');}// if yaxis is reversed in horizontal bar chart, you should draw the y-axis on right side
if(config.yaxis[0].reversed){config.yaxis[0].opposite=true;}config.xaxis.tooltip.enabled=false;// no xaxis tooltip for horizontal bar
config.yaxis[0].tooltip.enabled=false;// no xaxis tooltip for horizontal bar
config.chart.zoom.enabled=false;// no zooming for horz bars
}if(config.chart.type==='bar'||config.chart.type==='rangeBar'){if(config.tooltip.shared){if(config.xaxis.crosshairs.width==='barWidth'&&config.series.length>1){console.warn('crosshairs.width = "barWidth" is only supported in single series, not in a multi-series barChart.');config.xaxis.crosshairs.width='tickWidth';}if(config.plotOptions.bar.horizontal){config.states.hover.type='none';config.tooltip.shared=false;}if(!config.tooltip.followCursor){console.warn('followCursor option in shared columns cannot be turned off. Please set %ctooltip.followCursor: true','color: blue;');config.tooltip.followCursor=true;}}}if(config.chart.type==='candlestick'){if(config.yaxis[0].reversed){console.warn('Reversed y-axis in candlestick chart is not supported.');config.yaxis[0].reversed=false;}}if(config.chart.group&&config.yaxis[0].labels.minWidth===0){console.warn('It looks like you have multiple charts in synchronization. You must provide yaxis.labels.minWidth which must be EQUAL for all grouped charts to prevent incorrect behaviour.');}// if user supplied array for stroke width, it will only be applicable to line/area charts, for any other charts, revert back to Number
if(Array.isArray(config.stroke.width)){if(config.chart.type!=='line'&&config.chart.type!=='area'){console.warn('stroke.width option accepts array only for line and area charts. Reverted back to Number');config.stroke.width=config.stroke.width[0];}}return config;}}]);return Config;}();var Globals=/*#__PURE__*/function(){function Globals(){_classCallCheck(this,Globals);}_createClass(Globals,[{key:"initGlobalVars",value:function initGlobalVars(gl){gl.series=[];// the MAIN series array (y values)
gl.seriesCandleO=[];gl.seriesCandleH=[];gl.seriesCandleL=[];gl.seriesCandleC=[];gl.seriesRangeStart=[];gl.seriesRangeEnd=[];gl.seriesRangeBarTimeline=[];gl.seriesPercent=[];gl.seriesX=[];gl.seriesZ=[];gl.seriesNames=[];gl.seriesTotals=[];gl.seriesLog=[];gl.stackedSeriesTotals=[];gl.seriesXvalues=[];// we will need this in tooltip (it's x position)
// when we will have unequal x values, we will need
// some way to get x value depending on mouse pointer
gl.seriesYvalues=[];// we will need this when deciding which series
// user hovered on
gl.labels=[];gl.categoryLabels=[];gl.timescaleLabels=[];gl.noLabelsProvided=false;gl.resizeTimer=null;gl.selectionResizeTimer=null;gl.delayedElements=[];gl.pointsArray=[];gl.dataLabelsRects=[];gl.isXNumeric=false;gl.xaxisLabelsCount=0;gl.skipLastTimelinelabel=false;gl.skipFirstTimelinelabel=false;gl.x2SpaceAvailable=0;gl.isDataXYZ=false;gl.isMultiLineX=false;gl.isMultipleYAxis=false;gl.maxY=-Number.MAX_VALUE;gl.minY=Number.MIN_VALUE;gl.minYArr=[];gl.maxYArr=[];gl.maxX=-Number.MAX_VALUE;gl.minX=Number.MAX_VALUE;gl.initialMaxX=-Number.MAX_VALUE;gl.initialMinX=Number.MAX_VALUE;gl.maxDate=0;gl.minDate=Number.MAX_VALUE;gl.minZ=Number.MAX_VALUE;gl.maxZ=-Number.MAX_VALUE;gl.minXDiff=Number.MAX_VALUE;gl.yAxisScale=[];gl.xAxisScale=null;gl.xAxisTicksPositions=[];gl.yLabelsCoords=[];gl.yTitleCoords=[];gl.barPadForNumericAxis=0;gl.padHorizontal=0;gl.xRange=0;gl.yRange=[];gl.zRange=0;gl.dataPoints=0;gl.xTickAmount=0;}},{key:"globalVars",value:function globalVars(config){return{chartID:null,// chart ID - apexcharts-cuid
cuid:null,// chart ID - random numbers excluding "apexcharts" part
events:{beforeMount:[],mounted:[],updated:[],clicked:[],selection:[],dataPointSelection:[],zoomed:[],scrolled:[]},colors:[],clientX:null,clientY:null,fill:{colors:[]},stroke:{colors:[]},dataLabels:{style:{colors:[]}},radarPolygons:{fill:{colors:[]}},markers:{colors:[],size:config.markers.size,largestSize:0},animationEnded:false,isTouchDevice:'ontouchstart'in window||navigator.msMaxTouchPoints,isDirty:false,// chart has been updated after the initial render. This is different than dataChanged property. isDirty means user manually called some method to update
isExecCalled:false,// whether user updated the chart through the exec method
initialConfig:null,// we will store the first config user has set to go back when user finishes interactions like zooming and come out of it
lastXAxis:[],lastYAxis:[],columnSeries:null,labels:[],// store the text to draw on x axis
// Don't mutate the labels, many things including tooltips depends on it!
timescaleLabels:[],// store the timescaleLabels Labels in another variable
noLabelsProvided:false,// if user didn't provide any categories/labels or x values, fallback to 1,2,3,4...
allSeriesCollapsed:false,collapsedSeries:[],// when user collapses a series, it goes into this array
collapsedSeriesIndices:[],// this stores the index of the collapsedSeries instead of whole object for quick access
ancillaryCollapsedSeries:[],// when user collapses an "alwaysVisible" series, it goes into this array
ancillaryCollapsedSeriesIndices:[],// this stores the index of the ancillaryCollapsedSeries whose y-axis is always visible
risingSeries:[],// when user re-opens a collapsed series, it goes here
dataFormatXNumeric:false,// boolean value to indicate user has passed numeric x values
capturedSeriesIndex:-1,capturedDataPointIndex:-1,selectedDataPoints:[],goldenPadding:35,// this value is used at a lot of places for spacing purpose
invalidLogScale:false,// if a user enabled log scale but the data provided is not valid to generate a log scale, turn on this flag
ignoreYAxisIndexes:[],// when series are being collapsed in multiple y axes, ignore certain index
yAxisSameScaleIndices:[],maxValsInArrayIndex:0,radialSize:0,zoomEnabled:config.chart.toolbar.autoSelected==='zoom'&&config.chart.toolbar.tools.zoom&&config.chart.zoom.enabled,panEnabled:config.chart.toolbar.autoSelected==='pan'&&config.chart.toolbar.tools.pan,selectionEnabled:config.chart.toolbar.autoSelected==='selection'&&config.chart.toolbar.tools.selection,yaxis:null,mousedown:false,lastClientPosition:{},// don't reset this variable this the chart is destroyed. It is used to detect right or left mousemove in panning
visibleXRange:undefined,yValueDecimal:0,// are there floating numbers in the series. If yes, this represent the len of the decimals
total:0,SVGNS:'http://www.w3.org/2000/svg',// svg namespace
svgWidth:0,// the whole svg width
svgHeight:0,// the whole svg height
noData:false,// whether there is any data to display or not
locale:{},// the current locale values will be preserved here for global access
dom:{},// for storing all dom nodes in this particular property
memory:{methodsToExec:[]},shouldAnimate:true,skipLastTimelinelabel:false,// when last label is cropped, skip drawing it
skipFirstTimelinelabel:false,// when first label is cropped, skip drawing it
delayedElements:[],// element which appear after animation has finished
axisCharts:true,// chart type = line or area or bar
// (refer them also as plot charts in the code)
isDataXYZ:false,// bool: data was provided in a {[x,y,z]} pattern
resized:false,// bool: user has resized
resizeTimer:null,// timeout function to make a small delay before
// drawing when user resized
comboCharts:false,// bool: whether it's a combination of line/column
dataChanged:false,// bool: has data changed dynamically
previousPaths:[],// array: when data is changed, it will animate from
// previous paths
allSeriesHasEqualX:true,pointsArray:[],// store the points positions here to draw later on hover
// format is - [[x,y],[x,y]... [x,y]]
dataLabelsRects:[],// store the positions of datalabels to prevent collision
lastDrawnDataLabelsIndexes:[],x2SpaceAvailable:0,// space available on the right side after grid area
hasNullValues:false,// bool: whether series contains null values
easing:null,// function: animation effect to apply
zoomed:false,// whether user has zoomed or not
gridWidth:0,// drawable width of actual graphs (series paths)
gridHeight:0,// drawable height of actual graphs (series paths)
rotateXLabels:false,defaultLabels:false,xLabelFormatter:undefined,// formatter for x axis labels
yLabelFormatters:[],xaxisTooltipFormatter:undefined,// formatter for x axis tooltip
ttKeyFormatter:undefined,ttVal:undefined,ttZFormatter:undefined,LINE_HEIGHT_RATIO:1.618,xAxisLabelsHeight:0,yAxisLabelsWidth:0,scaleX:1,scaleY:1,translateX:0,translateY:0,translateYAxisX:[],yAxisWidths:[],translateXAxisY:0,translateXAxisX:0,tooltip:null};}},{key:"init",value:function init(config){var globals=this.globalVars(config);this.initGlobalVars(globals);globals.initialConfig=Utils.extend({},config);globals.initialSeries=JSON.parse(JSON.stringify(globals.initialConfig.series));globals.lastXAxis=JSON.parse(JSON.stringify(globals.initialConfig.xaxis));globals.lastYAxis=JSON.parse(JSON.stringify(globals.initialConfig.yaxis));return globals;}}]);return Globals;}();/**
   * ApexCharts Base Class for extending user options with pre-defined ApexCharts config.
   *
   * @module Base
   **/var Base=/*#__PURE__*/function(){function Base(opts){_classCallCheck(this,Base);this.opts=opts;}_createClass(Base,[{key:"init",value:function init(){var config=new Config(this.opts).init({responsiveOverride:false});var globals=new Globals().init(config);var w={config:config,globals:globals};return w;}}]);return Base;}();/*
   ** Util functions which are dependent on ApexCharts instance
   */var CoreUtils=/*#__PURE__*/function(){function CoreUtils(ctx){_classCallCheck(this,CoreUtils);this.ctx=ctx;this.w=ctx.w;}_createClass(CoreUtils,[{key:"getStackedSeriesTotals",/**
       * @memberof CoreUtils
       * returns the sum of all individual values in a multiple stacked series
       * Eg. w.globals.series = [[32,33,43,12], [2,3,5,1]]
       *  @return [34,36,48,13]
       **/value:function getStackedSeriesTotals(){var w=this.w;var total=[];if(w.globals.series.length===0)return total;for(var i=0;i<w.globals.series[w.globals.maxValsInArrayIndex].length;i++){var t=0;for(var j=0;j<w.globals.series.length;j++){if(typeof w.globals.series[j][i]!=='undefined'){t+=w.globals.series[j][i];}}total.push(t);}w.globals.stackedSeriesTotals=total;return total;}// get total of the all values inside all series
},{key:"getSeriesTotalByIndex",value:function getSeriesTotalByIndex(){var index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(index===null){// non-plot chart types - pie / donut / circle
return this.w.config.series.reduce(function(acc,cur){return acc+cur;},0);}else{// axis charts - supporting multiple series
return this.w.globals.series[index].reduce(function(acc,cur){return acc+cur;},0);}}},{key:"isSeriesNull",value:function isSeriesNull(){var index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var r=[];if(index===null){// non-plot chart types - pie / donut / circle
r=this.w.config.series.filter(function(d){return d!==null;});}else{// axis charts - supporting multiple series
r=this.w.globals.series[index].filter(function(d){return d!==null;});}return r.length===0;}},{key:"seriesHaveSameValues",value:function seriesHaveSameValues(index){return this.w.globals.series[index].every(function(val,i,arr){return val===arr[0];});}},{key:"getCategoryLabels",value:function getCategoryLabels(labels){var w=this.w;var catLabels=labels.slice();if(w.config.xaxis.convertedCatToNumeric){catLabels=labels.map(function(i){return w.config.xaxis.labels.formatter(i-w.globals.minX+1);});}return catLabels;}// maxValsInArrayIndex is the index of series[] which has the largest number of items
},{key:"getLargestSeries",value:function getLargestSeries(){var w=this.w;w.globals.maxValsInArrayIndex=w.globals.series.map(function(a){return a.length;}).indexOf(Math.max.apply(Math,w.globals.series.map(function(a){return a.length;})));}},{key:"getLargestMarkerSize",value:function getLargestMarkerSize(){var w=this.w;var size=0;w.globals.markers.size.forEach(function(m){size=Math.max(size,m);});w.globals.markers.largestSize=size;return size;}/**
       * @memberof Core
       * returns the sum of all values in a series
       * Eg. w.globals.series = [[32,33,43,12], [2,3,5,1]]
       *  @return [120, 11]
       **/},{key:"getSeriesTotals",value:function getSeriesTotals(){var w=this.w;w.globals.seriesTotals=w.globals.series.map(function(ser,index){var total=0;if(Array.isArray(ser)){for(var j=0;j<ser.length;j++){total+=ser[j];}}else{// for pie/donuts/gauges
total+=ser;}return total;});}},{key:"getSeriesTotalsXRange",value:function getSeriesTotalsXRange(minX,maxX){var w=this.w;var seriesTotalsXRange=w.globals.series.map(function(ser,index){var total=0;for(var j=0;j<ser.length;j++){if(w.globals.seriesX[index][j]>minX&&w.globals.seriesX[index][j]<maxX){total+=ser[j];}}return total;});return seriesTotalsXRange;}/**
       * @memberof CoreUtils
       * returns the percentage value of all individual values which can be used in a 100% stacked series
       * Eg. w.globals.series = [[32, 33, 43, 12], [2, 3, 5, 1]]
       *  @return [[94.11, 91.66, 89.58, 92.30], [5.88, 8.33, 10.41, 7.7]]
       **/},{key:"getPercentSeries",value:function getPercentSeries(){var w=this.w;w.globals.seriesPercent=w.globals.series.map(function(ser,index){var seriesPercent=[];if(Array.isArray(ser)){for(var j=0;j<ser.length;j++){var total=w.globals.stackedSeriesTotals[j];var percent=0;if(total){percent=100*ser[j]/total;}seriesPercent.push(percent);}}else{var _total=w.globals.seriesTotals.reduce(function(acc,val){return acc+val;},0);var _percent=100*ser/_total;seriesPercent.push(_percent);}return seriesPercent;});}},{key:"getCalculatedRatios",value:function getCalculatedRatios(){var gl=this.w.globals;var yRatio=[];var invertedYRatio=0;var xRatio=0;var initialXRatio=0;var invertedXRatio=0;var zRatio=0;var baseLineY=[];var baseLineInvertedY=0.1;var baseLineX=0;gl.yRange=[];if(gl.isMultipleYAxis){for(var i=0;i<gl.minYArr.length;i++){gl.yRange.push(Math.abs(gl.minYArr[i]-gl.maxYArr[i]));baseLineY.push(0);}}else{gl.yRange.push(Math.abs(gl.minY-gl.maxY));}gl.xRange=Math.abs(gl.maxX-gl.minX);gl.zRange=Math.abs(gl.maxZ-gl.minZ);// multiple y axis
for(var _i=0;_i<gl.yRange.length;_i++){yRatio.push(gl.yRange[_i]/gl.gridHeight);}xRatio=gl.xRange/gl.gridWidth;initialXRatio=Math.abs(gl.initialMaxX-gl.initialMinX)/gl.gridWidth;invertedYRatio=gl.yRange/gl.gridWidth;invertedXRatio=gl.xRange/gl.gridHeight;zRatio=gl.zRange/gl.gridHeight*16;if(!zRatio){zRatio=1;}if(gl.minY!==Number.MIN_VALUE&&Math.abs(gl.minY)!==0){// Negative numbers present in series
gl.hasNegs=true;}if(gl.isMultipleYAxis){baseLineY=[];// baseline variables is the 0 of the yaxis which will be needed when there are negatives
for(var _i2=0;_i2<yRatio.length;_i2++){baseLineY.push(-gl.minYArr[_i2]/yRatio[_i2]);}}else{baseLineY.push(-gl.minY/yRatio[0]);if(gl.minY!==Number.MIN_VALUE&&Math.abs(gl.minY)!==0){baseLineInvertedY=-gl.minY/invertedYRatio;// this is for bar chart
baseLineX=gl.minX/xRatio;}}return{yRatio:yRatio,invertedYRatio:invertedYRatio,zRatio:zRatio,xRatio:xRatio,initialXRatio:initialXRatio,invertedXRatio:invertedXRatio,baseLineInvertedY:baseLineInvertedY,baseLineY:baseLineY,baseLineX:baseLineX};}},{key:"getLogSeries",value:function getLogSeries(series){var w=this.w;w.globals.seriesLog=series.map(function(s,i){if(w.config.yaxis[i]&&w.config.yaxis[i].logarithmic){return s.map(function(d){if(d===null)return null;var logVal=(Math.log(d)-Math.log(w.globals.minYArr[i]))/(Math.log(w.globals.maxYArr[i])-Math.log(w.globals.minYArr[i]));return logVal;});}else{return s;}});return w.globals.invalidLogScale?series:w.globals.seriesLog;}},{key:"getLogYRatios",value:function getLogYRatios(yRatio){var _this=this;var w=this.w;var gl=this.w.globals;gl.yLogRatio=yRatio.slice();gl.logYRange=gl.yRange.map(function(yRange,i){if(w.config.yaxis[i]&&_this.w.config.yaxis[i].logarithmic){var maxY=-Number.MAX_VALUE;var minY=Number.MIN_VALUE;var range=1;gl.seriesLog.forEach(function(s,si){s.forEach(function(v){if(w.config.yaxis[si]&&w.config.yaxis[si].logarithmic){maxY=Math.max(v,maxY);minY=Math.min(v,minY);}});});range=Math.pow(gl.yRange[i],Math.abs(minY-maxY)/gl.yRange[i]);gl.yLogRatio[i]=range/gl.gridHeight;return range;}});return gl.invalidLogScale?yRatio.slice():gl.yLogRatio;}// Some config objects can be array - and we need to extend them correctly
}],[{key:"checkComboSeries",value:function checkComboSeries(series){var comboCharts=false;var comboBarCount=0;// if user specified a type in series too, turn on comboCharts flag
if(series.length&&typeof series[0].type!=='undefined'){comboCharts=true;series.forEach(function(s){if(s.type==='bar'||s.type==='column'||s.type==='candlestick'){comboBarCount++;}});}return{comboBarCount:comboBarCount,comboCharts:comboCharts};}},{key:"extendArrayProps",value:function extendArrayProps(configInstance,options){if(options.yaxis){options=configInstance.extendYAxis(options);}if(options.annotations){if(options.annotations.yaxis){options=configInstance.extendYAxisAnnotations(options);}if(options.annotations.xaxis){options=configInstance.extendXAxisAnnotations(options);}if(options.annotations.points){options=configInstance.extendPointAnnotations(options);}}return options;}}]);return CoreUtils;}();/**
   * ApexCharts Fill Class for setting fill options of the paths.
   *
   * @module Fill
   **/var Fill=/*#__PURE__*/function(){function Fill(ctx){_classCallCheck(this,Fill);this.ctx=ctx;this.w=ctx.w;this.opts=null;this.seriesIndex=0;}_createClass(Fill,[{key:"clippedImgArea",value:function clippedImgArea(params){var w=this.w;var cnf=w.config;var svgW=parseInt(w.globals.gridWidth,10);var svgH=parseInt(w.globals.gridHeight,10);var size=svgW>svgH?svgW:svgH;var fillImg=params.image;var imgWidth=0;var imgHeight=0;if(typeof params.width==='undefined'&&typeof params.height==='undefined'){if(cnf.fill.image.width!==undefined&&cnf.fill.image.height!==undefined){imgWidth=cnf.fill.image.width+1;imgHeight=cnf.fill.image.height;}else{imgWidth=size+1;imgHeight=size;}}else{imgWidth=params.width;imgHeight=params.height;}var elPattern=document.createElementNS(w.globals.SVGNS,'pattern');Graphics.setAttrs(elPattern,{id:params.patternID,patternUnits:params.patternUnits?params.patternUnits:'userSpaceOnUse',width:imgWidth+'px',height:imgHeight+'px'});var elImage=document.createElementNS(w.globals.SVGNS,'image');elPattern.appendChild(elImage);elImage.setAttributeNS(window.SVG.xlink,'href',fillImg);Graphics.setAttrs(elImage,{x:0,y:0,preserveAspectRatio:'none',width:imgWidth+'px',height:imgHeight+'px'});elImage.style.opacity=params.opacity;w.globals.dom.elDefs.node.appendChild(elPattern);}},{key:"getSeriesIndex",value:function getSeriesIndex(opts){var w=this.w;if((w.config.chart.type==='bar'||w.config.chart.type==='rangeBar')&&w.config.plotOptions.bar.distributed||w.config.chart.type==='heatmap'){this.seriesIndex=opts.seriesNumber;}else{this.seriesIndex=opts.seriesNumber%w.globals.series.length;}return this.seriesIndex;}},{key:"fillPath",value:function fillPath(opts){var w=this.w;this.opts=opts;var cnf=this.w.config;var pathFill;var patternFill,gradientFill;this.seriesIndex=this.getSeriesIndex(opts);var fillColors=this.getFillColors();var fillColor=fillColors[this.seriesIndex];if(typeof fillColor==='function'){fillColor=fillColor({seriesIndex:this.seriesIndex,dataPointIndex:opts.dataPointIndex,value:opts.value,w:w});}var fillType=this.getFillType(this.seriesIndex);var fillOpacity=Array.isArray(cnf.fill.opacity)?cnf.fill.opacity[this.seriesIndex]:cnf.fill.opacity;var defaultColor=fillColor;if(opts.color){fillColor=opts.color;}if(fillColor.indexOf('rgb')===-1){defaultColor=Utils.hexToRgba(fillColor,fillOpacity);}else{if(fillColor.indexOf('rgba')>-1){fillOpacity=0+'.'+Utils.getOpacityFromRGBA(fillColor);}}if(opts.opacity)fillOpacity=opts.opacity;if(fillType==='pattern'){patternFill=this.handlePatternFill(patternFill,fillColor,fillOpacity,defaultColor);}if(fillType==='gradient'){gradientFill=this.handleGradientFill(gradientFill,fillColor,fillOpacity,this.seriesIndex);}if(fillType==='image'){var imgSrc=cnf.fill.image.src;var patternID=opts.patternID?opts.patternID:'';this.clippedImgArea({opacity:fillOpacity,image:Array.isArray(imgSrc)?opts.seriesNumber<imgSrc.length?imgSrc[opts.seriesNumber]:imgSrc[0]:imgSrc,width:opts.width?opts.width:undefined,height:opts.height?opts.height:undefined,patternUnits:opts.patternUnits,patternID:"pattern".concat(w.globals.cuid).concat(opts.seriesNumber+1).concat(patternID)});pathFill="url(#pattern".concat(w.globals.cuid).concat(opts.seriesNumber+1).concat(patternID,")");}else if(fillType==='gradient'){pathFill=gradientFill;}else if(fillType==='pattern'){pathFill=patternFill;}else{pathFill=defaultColor;}// override pattern/gradient if opts.solid is true
if(opts.solid){pathFill=defaultColor;}return pathFill;}},{key:"getFillType",value:function getFillType(seriesIndex){var w=this.w;if(Array.isArray(w.config.fill.type)){return w.config.fill.type[seriesIndex];}else{return w.config.fill.type;}}},{key:"getFillColors",value:function getFillColors(){var w=this.w;var cnf=w.config;var opts=this.opts;var fillColors=[];if(w.globals.comboCharts){if(w.config.series[this.seriesIndex].type==='line'){if(w.globals.stroke.colors instanceof Array){fillColors=w.globals.stroke.colors;}else{fillColors.push(w.globals.stroke.colors);}}else{if(w.globals.fill.colors instanceof Array){fillColors=w.globals.fill.colors;}else{fillColors.push(w.globals.fill.colors);}}}else{if(cnf.chart.type==='line'){if(w.globals.stroke.colors instanceof Array){fillColors=w.globals.stroke.colors;}else{fillColors.push(w.globals.stroke.colors);}}else{if(w.globals.fill.colors instanceof Array){fillColors=w.globals.fill.colors;}else{fillColors.push(w.globals.fill.colors);}}}// colors passed in arguments
if(typeof opts.fillColors!=='undefined'){fillColors=[];if(opts.fillColors instanceof Array){fillColors=opts.fillColors.slice();}else{fillColors.push(opts.fillColors);}}return fillColors;}},{key:"handlePatternFill",value:function handlePatternFill(patternFill,fillColor,fillOpacity,defaultColor){var cnf=this.w.config;var opts=this.opts;var graphics=new Graphics(this.ctx);var patternStrokeWidth=cnf.fill.pattern.strokeWidth===undefined?Array.isArray(cnf.stroke.width)?cnf.stroke.width[this.seriesIndex]:cnf.stroke.width:Array.isArray(cnf.fill.pattern.strokeWidth)?cnf.fill.pattern.strokeWidth[this.seriesIndex]:cnf.fill.pattern.strokeWidth;var patternLineColor=fillColor;if(cnf.fill.pattern.style instanceof Array){if(typeof cnf.fill.pattern.style[opts.seriesNumber]!=='undefined'){var pf=graphics.drawPattern(cnf.fill.pattern.style[opts.seriesNumber],cnf.fill.pattern.width,cnf.fill.pattern.height,patternLineColor,patternStrokeWidth,fillOpacity);patternFill=pf;}else{patternFill=defaultColor;}}else{patternFill=graphics.drawPattern(cnf.fill.pattern.style,cnf.fill.pattern.width,cnf.fill.pattern.height,patternLineColor,patternStrokeWidth,fillOpacity);}return patternFill;}},{key:"handleGradientFill",value:function handleGradientFill(gradientFill,fillColor,fillOpacity,i){var cnf=this.w.config;var opts=this.opts;var graphics=new Graphics(this.ctx);var utils=new Utils();var type=cnf.fill.gradient.type;var gradientFrom,gradientTo;var opacityFrom=cnf.fill.gradient.opacityFrom===undefined?fillOpacity:Array.isArray(cnf.fill.gradient.opacityFrom)?cnf.fill.gradient.opacityFrom[i]:cnf.fill.gradient.opacityFrom;var opacityTo=cnf.fill.gradient.opacityTo===undefined?fillOpacity:Array.isArray(cnf.fill.gradient.opacityTo)?cnf.fill.gradient.opacityTo[i]:cnf.fill.gradient.opacityTo;gradientFrom=fillColor;if(cnf.fill.gradient.gradientToColors===undefined||cnf.fill.gradient.gradientToColors.length===0){if(cnf.fill.gradient.shade==='dark'){gradientTo=utils.shadeColor(parseFloat(cnf.fill.gradient.shadeIntensity)*-1,fillColor);}else{gradientTo=utils.shadeColor(parseFloat(cnf.fill.gradient.shadeIntensity),fillColor);}}else{gradientTo=cnf.fill.gradient.gradientToColors[opts.seriesNumber];}if(cnf.fill.gradient.inverseColors){var t=gradientFrom;gradientFrom=gradientTo;gradientTo=t;}gradientFill=graphics.drawGradient(type,gradientFrom,gradientTo,opacityFrom,opacityTo,opts.size,cnf.fill.gradient.stops,cnf.fill.gradient.colorStops,i);return gradientFill;}}]);return Fill;}();/**
   * ApexCharts Markers Class for drawing points on y values in axes charts.
   *
   * @module Markers
   **/var Markers=/*#__PURE__*/function(){function Markers(ctx,opts){_classCallCheck(this,Markers);this.ctx=ctx;this.w=ctx.w;}_createClass(Markers,[{key:"setGlobalMarkerSize",value:function setGlobalMarkerSize(){var w=this.w;w.globals.markers.size=Array.isArray(w.config.markers.size)?w.config.markers.size:[w.config.markers.size];if(w.globals.markers.size.length>0){if(w.globals.markers.size.length<w.globals.series.length+1){for(var i=0;i<=w.globals.series.length;i++){if(typeof w.globals.markers.size[i]==='undefined'){w.globals.markers.size.push(w.globals.markers.size[0]);}}}}else{w.globals.markers.size=w.config.series.map(function(s){return w.config.markers.size;});}}},{key:"plotChartMarkers",value:function plotChartMarkers(pointsPos,seriesIndex,j,pSize){var alwaysDrawMarker=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var w=this.w;var i=seriesIndex;var p=pointsPos;var elPointsWrap=null;var graphics=new Graphics(this.ctx);var point;if(w.globals.markers.size[seriesIndex]>0||alwaysDrawMarker){elPointsWrap=graphics.group({"class":alwaysDrawMarker?'':'apexcharts-series-markers'});elPointsWrap.attr('clip-path',"url(#gridRectMarkerMask".concat(w.globals.cuid,")"));}if(p.x instanceof Array){for(var q=0;q<p.x.length;q++){var dataPointIndex=j;// a small hack as we have 2 points for the first val to connect it
if(j===1&&q===0)dataPointIndex=0;if(j===1&&q===1)dataPointIndex=1;var PointClasses='apexcharts-marker';if((w.config.chart.type==='line'||w.config.chart.type==='area')&&!w.globals.comboCharts&&!w.config.tooltip.intersect){PointClasses+=' no-pointer-events';}var shouldMarkerDraw=Array.isArray(w.config.markers.size)?w.globals.markers.size[seriesIndex]>0:w.config.markers.size>0;if(shouldMarkerDraw||alwaysDrawMarker){if(Utils.isNumber(p.y[q])){PointClasses+=" w".concat(Utils.randomId());}else{PointClasses='apexcharts-nullpoint';}var opts=this.getMarkerConfig(PointClasses,seriesIndex,dataPointIndex);if(w.config.series[i].data[j]){if(w.config.series[i].data[j].fillColor){opts.pointFillColor=w.config.series[i].data[j].fillColor;}if(w.config.series[i].data[j].strokeColor){opts.pointStrokeColor=w.config.series[i].data[j].strokeColor;}}if(pSize){opts.pSize=pSize;}point=graphics.drawMarker(p.x[q],p.y[q],opts);point.attr('rel',dataPointIndex);point.attr('j',dataPointIndex);point.attr('index',seriesIndex);point.node.setAttribute('default-marker-size',opts.pSize);var filters=new Filters(this.ctx);filters.setSelectionFilter(point,seriesIndex,dataPointIndex);this.addEvents(point);if(elPointsWrap){elPointsWrap.add(point);}}else{// dynamic array creation - multidimensional
if(typeof w.globals.pointsArray[seriesIndex]==='undefined')w.globals.pointsArray[seriesIndex]=[];w.globals.pointsArray[seriesIndex].push([p.x[q],p.y[q]]);}}}return elPointsWrap;}},{key:"getMarkerConfig",value:function getMarkerConfig(cssClass,seriesIndex){var dataPointIndex=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var w=this.w;var pStyle=this.getMarkerStyle(seriesIndex);var pSize=w.globals.markers.size[seriesIndex];var m=w.config.markers;// discrete markers is an option where user can specify a particular marker with different size and color
if(dataPointIndex!==null&&m.discrete.length){m.discrete.map(function(marker){if(marker.seriesIndex===seriesIndex&&marker.dataPointIndex===dataPointIndex){pStyle.pointStrokeColor=marker.strokeColor;pStyle.pointFillColor=marker.fillColor;pSize=marker.size;}});}return{pSize:pSize,pRadius:m.radius,pWidth:m.strokeWidth instanceof Array?m.strokeWidth[seriesIndex]:m.strokeWidth,pointStrokeColor:pStyle.pointStrokeColor,pointFillColor:pStyle.pointFillColor,shape:m.shape instanceof Array?m.shape[seriesIndex]:m.shape,"class":cssClass,pointStrokeOpacity:m.strokeOpacity instanceof Array?m.strokeOpacity[seriesIndex]:m.strokeOpacity,pointStrokeDashArray:m.strokeDashArray instanceof Array?m.strokeDashArray[seriesIndex]:m.strokeDashArray,pointFillOpacity:m.fillOpacity instanceof Array?m.fillOpacity[seriesIndex]:m.fillOpacity,seriesIndex:seriesIndex};}},{key:"addEvents",value:function addEvents(circle){var w=this.w;var graphics=new Graphics(this.ctx);circle.node.addEventListener('mouseenter',graphics.pathMouseEnter.bind(this.ctx,circle));circle.node.addEventListener('mouseleave',graphics.pathMouseLeave.bind(this.ctx,circle));circle.node.addEventListener('mousedown',graphics.pathMouseDown.bind(this.ctx,circle));circle.node.addEventListener('click',w.config.markers.onClick);circle.node.addEventListener('dblclick',w.config.markers.onDblClick);circle.node.addEventListener('touchstart',graphics.pathMouseDown.bind(this.ctx,circle),{passive:true});}},{key:"getMarkerStyle",value:function getMarkerStyle(seriesIndex){var w=this.w;var colors=w.globals.markers.colors;var strokeColors=w.config.markers.strokeColor||w.config.markers.strokeColors;var pointStrokeColor=strokeColors instanceof Array?strokeColors[seriesIndex]:strokeColors;var pointFillColor=colors instanceof Array?colors[seriesIndex]:colors;return{pointStrokeColor:pointStrokeColor,pointFillColor:pointFillColor};}}]);return Markers;}();/**
   * ApexCharts Scatter Class.
   * This Class also handles bubbles chart as currently there is no major difference in drawing them,
   * @module Scatter
   **/var Scatter=/*#__PURE__*/function(){function Scatter(ctx){_classCallCheck(this,Scatter);this.ctx=ctx;this.w=ctx.w;this.initialAnim=this.w.config.chart.animations.enabled;this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled;}_createClass(Scatter,[{key:"draw",value:function draw(elSeries,j,opts){var w=this.w;var graphics=new Graphics(this.ctx);var realIndex=opts.realIndex;var pointsPos=opts.pointsPos;var zRatio=opts.zRatio;var elPointsMain=opts.elParent;var elPointsWrap=graphics.group({"class":"apexcharts-series-markers apexcharts-series-".concat(w.config.chart.type)});elPointsWrap.attr('clip-path',"url(#gridRectMarkerMask".concat(w.globals.cuid,")"));if(pointsPos.x instanceof Array){for(var q=0;q<pointsPos.x.length;q++){var dataPointIndex=j+1;var shouldDraw=true;// a small hack as we have 2 points for the first val to connect it
if(j===0&&q===0)dataPointIndex=0;if(j===0&&q===1)dataPointIndex=1;var radius=0;var finishRadius=w.globals.markers.size[realIndex];if(zRatio!==Infinity){// means we have a bubble
finishRadius=w.globals.seriesZ[realIndex][dataPointIndex]/zRatio;var bubble=w.config.plotOptions.bubble;if(bubble.minBubbleRadius&&finishRadius<bubble.minBubbleRadius){finishRadius=bubble.minBubbleRadius;}if(bubble.maxBubbleRadius&&finishRadius>bubble.maxBubbleRadius){finishRadius=bubble.maxBubbleRadius;}}if(!w.config.chart.animations.enabled){radius=finishRadius;}var x=pointsPos.x[q];var y=pointsPos.y[q];radius=radius||0;if(y===null||typeof w.globals.series[realIndex][dataPointIndex]==='undefined'){shouldDraw=false;}if(shouldDraw){var circle=this.drawPoint(x,y,radius,finishRadius,realIndex,dataPointIndex,j);elPointsWrap.add(circle);}elPointsMain.add(elPointsWrap);}}}},{key:"drawPoint",value:function drawPoint(x,y,radius,finishRadius,realIndex,dataPointIndex,j){var w=this.w;var i=realIndex;var anim=new Animations(this.ctx);var filters=new Filters(this.ctx);var fill=new Fill(this.ctx);var markers=new Markers(this.ctx);var graphics=new Graphics(this.ctx);var markerConfig=markers.getMarkerConfig('apexcharts-marker',i);var pathFillCircle=fill.fillPath({seriesNumber:realIndex,dataPointIndex:dataPointIndex,patternUnits:'objectBoundingBox',value:w.globals.series[realIndex][j]});var circle=graphics.drawCircle(radius);if(w.config.series[i].data[dataPointIndex]){if(w.config.series[i].data[dataPointIndex].fillColor){pathFillCircle=w.config.series[i].data[dataPointIndex].fillColor;}}circle.attr({cx:x,cy:y,fill:pathFillCircle,stroke:markerConfig.pointStrokeColor,'stroke-width':markerConfig.pWidth,'stroke-dasharray':markerConfig.pointStrokeDashArray,'stroke-opacity':markerConfig.pointStrokeOpacity});if(w.config.chart.dropShadow.enabled){var dropShadow=w.config.chart.dropShadow;filters.dropShadow(circle,dropShadow,realIndex);}if(this.initialAnim&&!w.globals.dataChanged){var speed=1;if(!w.globals.resized){speed=w.config.chart.animations.speed;}anim.animateCircleRadius(circle,0,finishRadius,speed,w.globals.easing,function(){window.setTimeout(function(){anim.animationCompleted(circle);},100);});}if(w.globals.dataChanged){if(this.dynamicAnim){var _speed=w.config.chart.animations.dynamicAnimation.speed;var prevX,prevY,prevR;var prevPathJ=null;prevPathJ=w.globals.previousPaths[realIndex]&&w.globals.previousPaths[realIndex][j];if(typeof prevPathJ!=='undefined'&&prevPathJ!==null){// series containing less elements will ignore these values and revert to 0
prevX=prevPathJ.x;prevY=prevPathJ.y;prevR=typeof prevPathJ.r!=='undefined'?prevPathJ.r:finishRadius;}for(var cs=0;cs<w.globals.collapsedSeries.length;cs++){if(w.globals.collapsedSeries[cs].index===realIndex){_speed=1;finishRadius=0;}}if(x===0&&y===0)finishRadius=0;anim.animateCircle(circle,{cx:prevX,cy:prevY,r:prevR},{cx:x,cy:y,r:finishRadius},_speed,w.globals.easing);}else{circle.attr({r:finishRadius});}}circle.attr({rel:dataPointIndex,j:dataPointIndex,index:realIndex,'default-marker-size':finishRadius});filters.setSelectionFilter(circle,realIndex,dataPointIndex);markers.addEvents(circle);circle.node.classList.add('apexcharts-marker');return circle;}},{key:"centerTextInBubble",value:function centerTextInBubble(y){var w=this.w;y=y+parseInt(w.config.dataLabels.style.fontSize,10)/4;return{y:y};}}]);return Scatter;}();/**
   * ApexCharts DataLabels Class for drawing dataLabels on Axes based Charts.
   *
   * @module DataLabels
   **/var DataLabels=/*#__PURE__*/function(){function DataLabels(ctx){_classCallCheck(this,DataLabels);this.ctx=ctx;this.w=ctx.w;}// When there are many datalabels to be printed, and some of them overlaps each other in the same series, this method will take care of that
// Also, when datalabels exceeds the drawable area and get clipped off, we need to adjust and move some pixels to make them visible again
_createClass(DataLabels,[{key:"dataLabelsCorrection",value:function dataLabelsCorrection(x,y,val,i,dataPointIndex,alwaysDrawDataLabel,fontSize){var w=this.w;var graphics=new Graphics(this.ctx);var drawnextLabel=false;//
var textRects=graphics.getTextRects(val,fontSize);var width=textRects.width;var height=textRects.height;// first value in series, so push an empty array
if(typeof w.globals.dataLabelsRects[i]==='undefined')w.globals.dataLabelsRects[i]=[];// then start pushing actual rects in that sub-array
w.globals.dataLabelsRects[i].push({x:x,y:y,width:width,height:height});var len=w.globals.dataLabelsRects[i].length-2;var lastDrawnIndex=typeof w.globals.lastDrawnDataLabelsIndexes[i]!=='undefined'?w.globals.lastDrawnDataLabelsIndexes[i][w.globals.lastDrawnDataLabelsIndexes[i].length-1]:0;if(typeof w.globals.dataLabelsRects[i][len]!=='undefined'){var lastDataLabelRect=w.globals.dataLabelsRects[i][lastDrawnIndex];if(// next label forward and x not intersecting
x>lastDataLabelRect.x+lastDataLabelRect.width+2||y>lastDataLabelRect.y+lastDataLabelRect.height+2||x+width<lastDataLabelRect.x// next label is going to be drawn backwards
){// the 2 indexes don't override, so OK to draw next label
drawnextLabel=true;}}if(dataPointIndex===0||alwaysDrawDataLabel){drawnextLabel=true;}return{x:x,y:y,textRects:textRects,drawnextLabel:drawnextLabel};}},{key:"drawDataLabel",value:function drawDataLabel(pos,i,j){var _this=this;var strokeWidth=arguments.length>4&&arguments[4]!==undefined?arguments[4]:2;// this method handles line, area, bubble, scatter charts as those charts contains markers/points which have pre-defined x/y positions
// all other charts like radar / bars / heatmaps will define their own drawDataLabel routine
var w=this.w;var graphics=new Graphics(this.ctx);var dataLabelsConfig=w.config.dataLabels;var x=0;var y=0;var dataPointIndex=j;var elDataLabelsWrap=null;if(!dataLabelsConfig.enabled||pos.x instanceof Array!==true){return elDataLabelsWrap;}elDataLabelsWrap=graphics.group({"class":'apexcharts-data-labels'});for(var q=0;q<pos.x.length;q++){x=pos.x[q]+dataLabelsConfig.offsetX;y=pos.y[q]+dataLabelsConfig.offsetY+strokeWidth;if(!isNaN(x)){// a small hack as we have 2 points for the first val to connect it
if(j===1&&q===0)dataPointIndex=0;if(j===1&&q===1)dataPointIndex=1;var val=w.globals.series[i][dataPointIndex];var text='';var getText=function getText(v){return w.config.dataLabels.formatter(v,{ctx:_this.ctx,seriesIndex:i,dataPointIndex:dataPointIndex,w:w});};if(w.config.chart.type==='bubble'){val=w.globals.seriesZ[i][dataPointIndex];text=getText(val);y=pos.y[q];var scatter=new Scatter(this.ctx);var centerTextInBubbleCoords=scatter.centerTextInBubble(y,i,dataPointIndex);y=centerTextInBubbleCoords.y;}else{if(typeof val!=='undefined'){text=getText(val);}}this.plotDataLabelsText({x:x,y:y,text:text,i:i,j:dataPointIndex,parent:elDataLabelsWrap,offsetCorrection:true,dataLabelsConfig:w.config.dataLabels});}}return elDataLabelsWrap;}},{key:"plotDataLabelsText",value:function plotDataLabelsText(opts){var w=this.w;var graphics=new Graphics(this.ctx);var x=opts.x,y=opts.y,i=opts.i,j=opts.j,text=opts.text,textAnchor=opts.textAnchor,parent=opts.parent,dataLabelsConfig=opts.dataLabelsConfig,color=opts.color,alwaysDrawDataLabel=opts.alwaysDrawDataLabel,offsetCorrection=opts.offsetCorrection;if(Array.isArray(w.config.dataLabels.enabledOnSeries)){if(w.config.dataLabels.enabledOnSeries.indexOf(i)<0){return;}}var correctedLabels={x:x,y:y,drawnextLabel:true};if(offsetCorrection){correctedLabels=this.dataLabelsCorrection(x,y,text,i,j,alwaysDrawDataLabel,parseInt(dataLabelsConfig.style.fontSize,10));}// when zoomed, we don't need to correct labels offsets,
// but if normally, labels get cropped, correct them
if(!w.globals.zoomed){x=correctedLabels.x;y=correctedLabels.y;}if(correctedLabels.textRects){if(x+correctedLabels.textRects.width<-20||x>w.globals.gridWidth+20){// datalabels fall outside drawing area, so draw a blank label
text='';}}var dataLabelColor=w.globals.dataLabels.style.colors[i];if((w.config.chart.type==='bar'||w.config.chart.type==='rangeBar')&&w.config.plotOptions.bar.distributed||w.config.dataLabels.distributed){dataLabelColor=w.globals.dataLabels.style.colors[j];}if(color){dataLabelColor=color;}var offX=dataLabelsConfig.offsetX;var offY=dataLabelsConfig.offsetY;if(w.config.chart.type==='bar'||w.config.chart.type==='rangeBar'){// for certain chart types, we handle offsets while calculating datalabels pos
// why? because bars/column may have negative values and based on that
// offsets becomes reversed
offX=0;offY=0;}if(correctedLabels.drawnextLabel){var dataLabelText=graphics.drawText({width:100,height:parseInt(dataLabelsConfig.style.fontSize,10),x:x+offX,y:y+offY,foreColor:dataLabelColor,textAnchor:textAnchor||dataLabelsConfig.textAnchor,text:text,fontSize:dataLabelsConfig.style.fontSize,fontFamily:dataLabelsConfig.style.fontFamily,fontWeight:dataLabelsConfig.style.fontWeight||'normal'});dataLabelText.attr({"class":'apexcharts-datalabel',cx:x,cy:y});if(dataLabelsConfig.dropShadow.enabled){var textShadow=dataLabelsConfig.dropShadow;var filters=new Filters(this.ctx);filters.dropShadow(dataLabelText,textShadow);}parent.add(dataLabelText);if(typeof w.globals.lastDrawnDataLabelsIndexes[i]==='undefined'){w.globals.lastDrawnDataLabelsIndexes[i]=[];}w.globals.lastDrawnDataLabelsIndexes[i].push(j);}}},{key:"addBackgroundToDataLabel",value:function addBackgroundToDataLabel(el,coords){var w=this.w;var bCnf=w.config.dataLabels.background;var paddingH=bCnf.padding;var paddingV=bCnf.padding/2;var width=coords.width;var height=coords.height;var graphics=new Graphics(this.ctx);var elRect=graphics.drawRect(coords.x-paddingH,coords.y-paddingV/2,width+paddingH*2,height+paddingV,bCnf.borderRadius,w.config.chart.background==='transparent'?'#fff':w.config.chart.background,bCnf.opacity,bCnf.borderWidth,bCnf.borderColor);if(bCnf.dropShadow.enabled){var filters=new Filters(this.ctx);filters.dropShadow(elRect,bCnf.dropShadow);}return elRect;}},{key:"dataLabelsBackground",value:function dataLabelsBackground(){var w=this.w;if(w.config.chart.type==='bubble')return;var elDataLabels=w.globals.dom.baseEl.querySelectorAll('.apexcharts-datalabels text');for(var i=0;i<elDataLabels.length;i++){var el=elDataLabels[i];var coords=el.getBBox();var elRect=null;if(coords.width&&coords.height){elRect=this.addBackgroundToDataLabel(el,coords);}if(elRect){el.parentNode.insertBefore(elRect.node,el);var background=el.getAttribute('fill');var shouldAnim=w.config.chart.animations.enabled&&!w.globals.resized&&!w.globals.dataChanged;if(shouldAnim){elRect.animate().attr({fill:background});}else{elRect.attr({fill:background});}el.setAttribute('fill',w.config.dataLabels.background.foreColor);}}}},{key:"bringForward",value:function bringForward(){var w=this.w;var elDataLabelsNodes=w.globals.dom.baseEl.getElementsByClassName('apexcharts-datalabels');var elSeries=w.globals.dom.baseEl.querySelector('.apexcharts-plot-series:last-child');for(var i=0;i<elDataLabelsNodes.length;i++){if(elSeries){elSeries.insertBefore(elDataLabelsNodes[i],elSeries.nextSibling);}}}}]);return DataLabels;}();/**
   * ApexCharts Series Class for interation with the Series of the chart.
   *
   * @module Series
   **/var Series=/*#__PURE__*/function(){function Series(ctx){_classCallCheck(this,Series);this.ctx=ctx;this.w=ctx.w;this.legendInactiveClass='legend-mouseover-inactive';}_createClass(Series,[{key:"getAllSeriesEls",value:function getAllSeriesEls(){return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");}},{key:"getSeriesByName",value:function getSeriesByName(seriesName){return this.w.globals.dom.baseEl.querySelector("[seriesName='".concat(Utils.escapeString(seriesName),"']"));}},{key:"isSeriesHidden",value:function isSeriesHidden(seriesName){var targetElement=this.getSeriesByName(seriesName);var realIndex=parseInt(targetElement.getAttribute('data:realIndex'),10);var isHidden=targetElement.classList.contains('apexcharts-series-collapsed');return{isHidden:isHidden,realIndex:realIndex};}},{key:"addCollapsedClassToSeries",value:function addCollapsedClassToSeries(elSeries,index){var w=this.w;function iterateOnAllCollapsedSeries(series){for(var cs=0;cs<series.length;cs++){if(series[cs].index===index){elSeries.node.classList.add('apexcharts-series-collapsed');}}}iterateOnAllCollapsedSeries(w.globals.collapsedSeries);iterateOnAllCollapsedSeries(w.globals.ancillaryCollapsedSeries);}},{key:"toggleSeries",value:function toggleSeries(seriesName){var isSeriesHidden=this.isSeriesHidden(seriesName);this.ctx.legend.legendHelpers.toggleDataSeries(isSeriesHidden.realIndex,isSeriesHidden.isHidden);return isSeriesHidden.isHidden;}},{key:"showSeries",value:function showSeries(seriesName){var isSeriesHidden=this.isSeriesHidden(seriesName);if(isSeriesHidden.isHidden){this.ctx.legend.legendHelpers.toggleDataSeries(isSeriesHidden.realIndex,true);}}},{key:"hideSeries",value:function hideSeries(seriesName){var isSeriesHidden=this.isSeriesHidden(seriesName);if(!isSeriesHidden.isHidden){this.ctx.legend.legendHelpers.toggleDataSeries(isSeriesHidden.realIndex,false);}}},{key:"resetSeries",value:function resetSeries(){var shouldUpdateChart=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var shouldResetZoom=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var shouldResetCollapsed=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var w=this.w;var series=w.globals.initialSeries.slice();w.config.series=series;w.globals.previousPaths=[];if(shouldResetCollapsed){w.globals.collapsedSeries=[];w.globals.ancillaryCollapsedSeries=[];w.globals.collapsedSeriesIndices=[];w.globals.ancillaryCollapsedSeriesIndices=[];}if(shouldUpdateChart){if(shouldResetZoom){w.globals.zoomed=false;this.ctx.updateHelpers.revertDefaultAxisMinMax();}this.ctx.updateHelpers._updateSeries(series,w.config.chart.animations.dynamicAnimation.enabled);}}},{key:"toggleSeriesOnHover",value:function toggleSeriesOnHover(e,targetElement){var w=this.w;var allSeriesEls=w.globals.dom.baseEl.getElementsByClassName("apexcharts-series apexcharts-datalabels");if(e.type==='mousemove'){var seriesCnt=parseInt(targetElement.getAttribute('rel'),10)-1;var seriesEl=null;var dataLabelEl=null;if(w.globals.axisCharts||w.config.chart.type==='radialBar'){if(w.globals.axisCharts){seriesEl=w.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(seriesCnt,"']"));dataLabelEl=w.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(seriesCnt,"']"));}else{seriesEl=w.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(seriesCnt+1,"']"));}}else{seriesEl=w.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(seriesCnt+1,"'] path"));}for(var se=0;se<allSeriesEls.length;se++){allSeriesEls[se].classList.add(this.legendInactiveClass);}if(seriesEl!==null){if(!w.globals.axisCharts){seriesEl.parentNode.classList.remove(this.legendInactiveClass);}seriesEl.classList.remove(this.legendInactiveClass);if(dataLabelEl!==null){dataLabelEl.classList.remove(this.legendInactiveClass);}}}else if(e.type==='mouseout'){for(var _se=0;_se<allSeriesEls.length;_se++){allSeriesEls[_se].classList.remove(this.legendInactiveClass);}}}},{key:"highlightRangeInSeries",value:function highlightRangeInSeries(e,targetElement){var _this=this;var w=this.w;var allHeatMapElements=w.globals.dom.baseEl.getElementsByClassName('apexcharts-heatmap-rect');var activeInactive=function activeInactive(action){for(var i=0;i<allHeatMapElements.length;i++){allHeatMapElements[i].classList[action](_this.legendInactiveClass);}};var removeInactiveClassFromHoveredRange=function removeInactiveClassFromHoveredRange(range){for(var i=0;i<allHeatMapElements.length;i++){var val=parseInt(allHeatMapElements[i].getAttribute('val'),10);if(val>=range.from&&val<=range.to){allHeatMapElements[i].classList.remove(_this.legendInactiveClass);}}};if(e.type==='mousemove'){var seriesCnt=parseInt(targetElement.getAttribute('rel'),10)-1;activeInactive('add');var range=w.config.plotOptions.heatmap.colorScale.ranges[seriesCnt];removeInactiveClassFromHoveredRange(range);}else if(e.type==='mouseout'){activeInactive('remove');}}},{key:"getActiveConfigSeriesIndex",value:function getActiveConfigSeriesIndex(){var ignoreBars=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var w=this.w;var activeIndex=0;if(w.config.series.length>1){// active series flag is required to know if user has not deactivated via legend click
var firstActiveSeriesIndex=w.config.series.map(function(series,index){var hasBars=false;if(ignoreBars){hasBars=w.config.series[index].type==='bar'||w.config.series[index].type==='column';}return series.data&&series.data.length>0&&!hasBars?index:-1;});for(var a=0;a<firstActiveSeriesIndex.length;a++){if(firstActiveSeriesIndex[a]!==-1){activeIndex=firstActiveSeriesIndex[a];break;}}}return activeIndex;}},{key:"getPreviousPaths",value:function getPreviousPaths(){var w=this.w;w.globals.previousPaths=[];function pushPaths(seriesEls,i,type){var paths=seriesEls[i].childNodes;var dArr={type:type,paths:[],realIndex:seriesEls[i].getAttribute('data:realIndex')};for(var j=0;j<paths.length;j++){if(paths[j].hasAttribute('pathTo')){var d=paths[j].getAttribute('pathTo');dArr.paths.push({d:d});}}w.globals.previousPaths.push(dArr);}var getPaths=function getPaths(chartType){return w.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(chartType,"-series .apexcharts-series"));};var chartTypes=['line','area','bar','candlestick','radar'];chartTypes.forEach(function(type){var paths=getPaths(type);for(var p=0;p<paths.length;p++){pushPaths(paths,p,type);}});this.handlePrevBubbleScatterPaths('bubble');this.handlePrevBubbleScatterPaths('scatter');var heatmapColors=w.globals.dom.baseEl.querySelectorAll('.apexcharts-heatmap .apexcharts-series');if(heatmapColors.length>0){for(var h=0;h<heatmapColors.length;h++){var seriesEls=w.globals.dom.baseEl.querySelectorAll(".apexcharts-heatmap .apexcharts-series[data\\:realIndex='".concat(h,"'] rect"));var dArr=[];for(var i=0;i<seriesEls.length;i++){dArr.push({color:seriesEls[i].getAttribute('color')});}w.globals.previousPaths.push(dArr);}}if(!w.globals.axisCharts){// for non-axis charts (i.e., circular charts, pathFrom is not usable. We need whole series)
w.globals.previousPaths=w.globals.series;}}},{key:"handlePrevBubbleScatterPaths",value:function handlePrevBubbleScatterPaths(type){var w=this.w;var paths=w.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(type,"-series .apexcharts-series"));if(paths.length>0){for(var s=0;s<paths.length;s++){var seriesEls=w.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(type,"-series .apexcharts-series[data\\:realIndex='").concat(s,"'] circle"));var dArr=[];for(var i=0;i<seriesEls.length;i++){dArr.push({x:seriesEls[i].getAttribute('cx'),y:seriesEls[i].getAttribute('cy'),r:seriesEls[i].getAttribute('r')});}w.globals.previousPaths.push(dArr);}}}},{key:"clearPreviousPaths",value:function clearPreviousPaths(){var w=this.w;w.globals.previousPaths=[];w.globals.allSeriesCollapsed=false;}},{key:"handleNoData",value:function handleNoData(){var w=this.w;var me=this;var noDataOpts=w.config.noData;var graphics=new Graphics(me.ctx);var x=w.globals.svgWidth/2;var y=w.globals.svgHeight/2;var textAnchor='middle';w.globals.noData=true;w.globals.animationEnded=true;if(noDataOpts.align==='left'){x=10;textAnchor='start';}else if(noDataOpts.align==='right'){x=w.globals.svgWidth-10;textAnchor='end';}if(noDataOpts.verticalAlign==='top'){y=50;}else if(noDataOpts.verticalAlign==='bottom'){y=w.globals.svgHeight-50;}x=x+noDataOpts.offsetX;y=y+parseInt(noDataOpts.style.fontSize,10)+2+noDataOpts.offsetY;if(noDataOpts.text!==undefined&&noDataOpts.text!==''){var titleText=graphics.drawText({x:x,y:y,text:noDataOpts.text,textAnchor:textAnchor,fontSize:noDataOpts.style.fontSize,fontFamily:noDataOpts.style.fontFamily,foreColor:noDataOpts.style.color,opacity:1,"class":'apexcharts-text-nodata'});w.globals.dom.Paper.add(titleText);}}// When user clicks on legends, the collapsed series is filled with [0,0,0,...,0]
// This is because we don't want to alter the series' length as it is used at many places
},{key:"setNullSeriesToZeroValues",value:function setNullSeriesToZeroValues(series){var w=this.w;for(var sl=0;sl<series.length;sl++){if(series[sl].length===0){for(var j=0;j<series[w.globals.maxValsInArrayIndex].length;j++){series[sl].push(0);}}}return series;}},{key:"hasAllSeriesEqualX",value:function hasAllSeriesEqualX(){var equalLen=true;var w=this.w;var filteredSerX=this.filteredSeriesX();for(var i=0;i<filteredSerX.length-1;i++){if(filteredSerX[i][0]!==filteredSerX[i+1][0]){equalLen=false;break;}}w.globals.allSeriesHasEqualX=equalLen;return equalLen;}},{key:"filteredSeriesX",value:function filteredSeriesX(){var w=this.w;var filteredSeriesX=w.globals.seriesX.map(function(ser){return ser.length>0?ser:[];});return filteredSeriesX;}}]);return Series;}();var Data=/*#__PURE__*/function(){function Data(ctx){_classCallCheck(this,Data);this.ctx=ctx;this.w=ctx.w;this.twoDSeries=[];this.threeDSeries=[];this.twoDSeriesX=[];this.coreUtils=new CoreUtils(this.ctx);}_createClass(Data,[{key:"isMultiFormat",value:function isMultiFormat(){return this.isFormatXY()||this.isFormat2DArray();}// given format is [{x, y}, {x, y}]
},{key:"isFormatXY",value:function isFormatXY(){var series=this.w.config.series.slice();var sr=new Series(this.ctx);this.activeSeriesIndex=sr.getActiveConfigSeriesIndex();if(typeof series[this.activeSeriesIndex].data!=='undefined'&&series[this.activeSeriesIndex].data.length>0&&series[this.activeSeriesIndex].data[0]!==null&&typeof series[this.activeSeriesIndex].data[0].x!=='undefined'&&series[this.activeSeriesIndex].data[0]!==null){return true;}}// given format is [[x, y], [x, y]]
},{key:"isFormat2DArray",value:function isFormat2DArray(){var series=this.w.config.series.slice();var sr=new Series(this.ctx);this.activeSeriesIndex=sr.getActiveConfigSeriesIndex();if(typeof series[this.activeSeriesIndex].data!=='undefined'&&series[this.activeSeriesIndex].data.length>0&&typeof series[this.activeSeriesIndex].data[0]!=='undefined'&&series[this.activeSeriesIndex].data[0]!==null&&series[this.activeSeriesIndex].data[0].constructor===Array){return true;}}},{key:"handleFormat2DArray",value:function handleFormat2DArray(ser,i){var cnf=this.w.config;var gl=this.w.globals;for(var j=0;j<ser[i].data.length;j++){if(typeof ser[i].data[j][1]!=='undefined'){if(Array.isArray(ser[i].data[j][1])&&ser[i].data[j][1].length===4){// candlestick nested ohlc format
this.twoDSeries.push(Utils.parseNumber(ser[i].data[j][1][3]));}else if(ser[i].data[j].length===5){// candlestick non-nested ohlc format
this.twoDSeries.push(Utils.parseNumber(ser[i].data[j][4]));}else{this.twoDSeries.push(Utils.parseNumber(ser[i].data[j][1]));}gl.dataFormatXNumeric=true;}if(cnf.xaxis.type==='datetime'){// if timestamps are provided and xaxis type is datettime,
var ts=new Date(ser[i].data[j][0]);ts=new Date(ts).getTime();this.twoDSeriesX.push(ts);}else{this.twoDSeriesX.push(ser[i].data[j][0]);}}for(var _j=0;_j<ser[i].data.length;_j++){if(typeof ser[i].data[_j][2]!=='undefined'){this.threeDSeries.push(ser[i].data[_j][2]);gl.isDataXYZ=true;}}}},{key:"handleFormatXY",value:function handleFormatXY(ser,i){var cnf=this.w.config;var gl=this.w.globals;var dt=new DateTime(this.ctx);var activeI=i;if(gl.collapsedSeriesIndices.indexOf(i)>-1){// fix #368
activeI=this.activeSeriesIndex;}// get series
for(var j=0;j<ser[i].data.length;j++){if(typeof ser[i].data[j].y!=='undefined'){if(Array.isArray(ser[i].data[j].y)){this.twoDSeries.push(Utils.parseNumber(ser[i].data[j].y[ser[i].data[j].y.length-1]));}else{this.twoDSeries.push(Utils.parseNumber(ser[i].data[j].y));}}}// get seriesX
for(var _j2=0;_j2<ser[activeI].data.length;_j2++){var isXString=typeof ser[activeI].data[_j2].x==='string';var isXArr=Array.isArray(ser[activeI].data[_j2].x);var isXDate=!isXArr&&!!dt.isValidDate(ser[activeI].data[_j2].x.toString());if(isXString||isXDate){// user supplied '01/01/2017' or a date string (a JS date object is not supported)
if(isXString||cnf.xaxis.convertedCatToNumeric){if(cnf.xaxis.type==='datetime'&&!gl.isRangeData){this.twoDSeriesX.push(dt.parseDate(ser[activeI].data[_j2].x));}else{// a category and not a numeric x value
this.fallbackToCategory=true;this.twoDSeriesX.push(ser[activeI].data[_j2].x);}}else{if(cnf.xaxis.type==='datetime'){this.twoDSeriesX.push(dt.parseDate(ser[activeI].data[_j2].x.toString()));}else{gl.dataFormatXNumeric=true;gl.isXNumeric=true;this.twoDSeriesX.push(parseFloat(ser[activeI].data[_j2].x));}}}else if(isXArr){// a multiline label described in array format
this.fallbackToCategory=true;this.twoDSeriesX.push(ser[activeI].data[_j2].x);}else{// a numeric value in x property
gl.isXNumeric=true;gl.dataFormatXNumeric=true;this.twoDSeriesX.push(ser[activeI].data[_j2].x);}}if(ser[i].data[0]&&typeof ser[i].data[0].z!=='undefined'){for(var t=0;t<ser[i].data.length;t++){this.threeDSeries.push(ser[i].data[t].z);}gl.isDataXYZ=true;}}},{key:"handleRangeData",value:function handleRangeData(ser,i){var cnf=this.w.config;var gl=this.w.globals;var range={};if(this.isFormat2DArray()){range=this.handleRangeDataFormat('array',ser,i);}else if(this.isFormatXY()){range=this.handleRangeDataFormat('xy',ser,i);}gl.seriesRangeStart.push(range.start);gl.seriesRangeEnd.push(range.end);if(cnf.xaxis.type==='datetime'){gl.seriesRangeBarTimeline.push(range.rangeUniques);}// check for overlaps to avoid clashes in a timeline chart
gl.seriesRangeBarTimeline.forEach(function(sr,si){if(sr){sr.forEach(function(sarr,sarri){sarr.y.forEach(function(arr,arri){for(var sri=0;sri<sarr.y.length;sri++){if(arri!==sri){var range1y1=arr.y1;var range1y2=arr.y2;var range2y1=sarr.y[sri].y1;var range2y2=sarr.y[sri].y2;if(range1y1<=range2y2&&range2y1<=range1y2){if(sarr.overlaps.indexOf(arr.rangeName)<0){sarr.overlaps.push(arr.rangeName);}if(sarr.overlaps.indexOf(sarr.y[sri].rangeName)<0){sarr.overlaps.push(sarr.y[sri].rangeName);}}}}});});}});return range;}},{key:"handleCandleStickData",value:function handleCandleStickData(ser,i){var gl=this.w.globals;var ohlc={};if(this.isFormat2DArray()){ohlc=this.handleCandleStickDataFormat('array',ser,i);}else if(this.isFormatXY()){ohlc=this.handleCandleStickDataFormat('xy',ser,i);}gl.seriesCandleO[i]=ohlc.o;gl.seriesCandleH[i]=ohlc.h;gl.seriesCandleL[i]=ohlc.l;gl.seriesCandleC[i]=ohlc.c;return ohlc;}},{key:"handleRangeDataFormat",value:function handleRangeDataFormat(format,ser,i){var rangeStart=[];var rangeEnd=[];var uniqueKeys=ser[i].data.filter(function(thing,index,self){return index===self.findIndex(function(t){return t.x===thing.x;});}).map(function(r,index){return{x:r.x,overlaps:[],y:[]};});var err='Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts';var serObj=new Series(this.ctx);var activeIndex=serObj.getActiveConfigSeriesIndex();if(format==='array'){if(ser[activeIndex].data[0][1].length!==2){throw new Error(err);}for(var j=0;j<ser[i].data.length;j++){rangeStart.push(ser[i].data[j][1][0]);rangeEnd.push(ser[i].data[j][1][1]);}}else if(format==='xy'){if(ser[activeIndex].data[0].y.length!==2){throw new Error(err);}var _loop=function _loop(_j3){var id=Utils.randomId();var x=ser[i].data[_j3].x;var y={y1:ser[i].data[_j3].y[0],y2:ser[i].data[_j3].y[1],rangeName:id};// mutating config object by adding a new property
// TODO: As this is specifically for timeline rangebar charts, update the docs mentioning the series only supports xy format
ser[i].data[_j3].rangeName=id;var uI=uniqueKeys.findIndex(function(t){return t.x===x;});uniqueKeys[uI].y.push(y);rangeStart.push(y.y1);rangeEnd.push(y.y2);};for(var _j3=0;_j3<ser[i].data.length;_j3++){_loop(_j3);}}return{start:rangeStart,end:rangeEnd,rangeUniques:uniqueKeys};}},{key:"handleCandleStickDataFormat",value:function handleCandleStickDataFormat(format,ser,i){var serO=[];var serH=[];var serL=[];var serC=[];var err='Please provide [Open, High, Low and Close] values in valid format. Read more https://apexcharts.com/docs/series/#candlestick';if(format==='array'){if(!Array.isArray(ser[i].data[0][1])&&ser[i].data[0].length!==5||Array.isArray(ser[i].data[0][1])&&ser[i].data[0][1].length!==4){throw new Error(err);}if(ser[i].data[0].length===5){for(var j=0;j<ser[i].data.length;j++){serO.push(ser[i].data[j][1]);serH.push(ser[i].data[j][2]);serL.push(ser[i].data[j][3]);serC.push(ser[i].data[j][4]);}}else{for(var _j4=0;_j4<ser[i].data.length;_j4++){serO.push(ser[i].data[_j4][1][0]);serH.push(ser[i].data[_j4][1][1]);serL.push(ser[i].data[_j4][1][2]);serC.push(ser[i].data[_j4][1][3]);}}}else if(format==='xy'){if(ser[i].data[0].y.length!==4){throw new Error(err);}for(var _j5=0;_j5<ser[i].data.length;_j5++){serO.push(ser[i].data[_j5].y[0]);serH.push(ser[i].data[_j5].y[1]);serL.push(ser[i].data[_j5].y[2]);serC.push(ser[i].data[_j5].y[3]);}}return{o:serO,h:serH,l:serL,c:serC};}},{key:"parseDataAxisCharts",value:function parseDataAxisCharts(ser){var _this=this;var ctx=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.ctx;var cnf=this.w.config;var gl=this.w.globals;var dt=new DateTime(ctx);var xlabels=cnf.labels.length>0?cnf.labels.slice():cnf.xaxis.categories.slice();var handleDates=function handleDates(){for(var j=0;j<xlabels.length;j++){if(typeof xlabels[j]==='string'){// user provided date strings
var isDate=dt.isValidDate(xlabels[j]);if(isDate){_this.twoDSeriesX.push(dt.parseDate(xlabels[j]));}else{throw new Error('You have provided invalid Date format. Please provide a valid JavaScript Date');}}else{// user provided timestamps
if(String(xlabels[j]).length!==13){throw new Error('Please provide a valid JavaScript timestamp');}else{_this.twoDSeriesX.push(xlabels[j]);}}}};for(var i=0;i<ser.length;i++){this.twoDSeries=[];this.twoDSeriesX=[];this.threeDSeries=[];if(typeof ser[i].data==='undefined'){console.error("It is a possibility that you may have not included 'data' property in series.");return;}if(cnf.chart.type==='rangeBar'||cnf.chart.type==='rangeArea'||ser[i].type==='rangeBar'||ser[i].type==='rangeArea'){gl.isRangeData=true;this.handleRangeData(ser,i);}if(this.isMultiFormat()){if(this.isFormat2DArray()){this.handleFormat2DArray(ser,i);}else if(this.isFormatXY()){this.handleFormatXY(ser,i);}if(cnf.chart.type==='candlestick'||ser[i].type==='candlestick'){this.handleCandleStickData(ser,i);}gl.series.push(this.twoDSeries);gl.labels.push(this.twoDSeriesX);gl.seriesX.push(this.twoDSeriesX);if(i===this.activeSeriesIndex&&!this.fallbackToCategory){gl.isXNumeric=true;}}else{if(cnf.xaxis.type==='datetime'){// user didn't supplied [{x,y}] or [[x,y]], but single array in data.
// Also labels/categories were supplied differently
gl.isXNumeric=true;handleDates();gl.seriesX.push(this.twoDSeriesX);}else if(cnf.xaxis.type==='numeric'){gl.isXNumeric=true;if(xlabels.length>0){this.twoDSeriesX=xlabels;gl.seriesX.push(this.twoDSeriesX);}}gl.labels.push(this.twoDSeriesX);var singleArray=ser[i].data.map(function(d){return Utils.parseNumber(d);});gl.series.push(singleArray);}gl.seriesZ.push(this.threeDSeries);if(ser[i].name!==undefined){gl.seriesNames.push(ser[i].name);}else{gl.seriesNames.push('series-'+parseInt(i+1,10));}}return this.w;}},{key:"parseDataNonAxisCharts",value:function parseDataNonAxisCharts(ser){var gl=this.w.globals;var cnf=this.w.config;gl.series=ser.slice();gl.seriesNames=cnf.labels.slice();for(var i=0;i<gl.series.length;i++){if(gl.seriesNames[i]===undefined){gl.seriesNames.push('series-'+(i+1));}}return this.w;}/** User possibly set string categories in xaxis.categories or labels prop
       * Or didn't set xaxis labels at all - in which case we manually do it.
       * If user passed series data as [[3, 2], [4, 5]] or [{ x: 3, y: 55 }],
       * this shouldn't be called
       * @param {array} ser - the series which user passed to the config
       */},{key:"handleExternalLabelsData",value:function handleExternalLabelsData(ser){var cnf=this.w.config;var gl=this.w.globals;if(cnf.xaxis.categories.length>0){// user provided labels in xaxis.category prop
gl.labels=cnf.xaxis.categories;}else if(cnf.labels.length>0){// user provided labels in labels props
gl.labels=cnf.labels.slice();}else if(this.fallbackToCategory){// user provided labels in x prop in [{ x: 3, y: 55 }] data, and those labels are already stored in gl.labels[0], so just re-arrange the gl.labels array
gl.labels=gl.labels[0];if(gl.seriesRangeBarTimeline.length){gl.seriesRangeBarTimeline.map(function(srt){srt.forEach(function(sr){if(gl.labels.indexOf(sr.x)<0&&sr.x){gl.labels.push(sr.x);}});});gl.labels=gl.labels.filter(function(elem,pos,arr){return arr.indexOf(elem)===pos;});}if(cnf.xaxis.convertedCatToNumeric){var defaults=new Defaults(cnf);defaults.convertCatToNumericXaxis(cnf,this.ctx,gl.seriesX[0]);this._generateExternalLabels(ser);}}else{this._generateExternalLabels(ser);}}},{key:"_generateExternalLabels",value:function _generateExternalLabels(ser){var gl=this.w.globals;var cnf=this.w.config;// user didn't provided any labels, fallback to 1-2-3-4-5
var labelArr=[];if(gl.axisCharts){if(gl.series.length>0){for(var i=0;i<gl.series[gl.maxValsInArrayIndex].length;i++){labelArr.push(i+1);}}gl.seriesX=[];// create gl.seriesX as it will be used in calculations of x positions
for(var _i=0;_i<ser.length;_i++){gl.seriesX.push(labelArr);}// turn on the isXNumeric flag to allow minX and maxX to function properly
gl.isXNumeric=true;}// no series to pull labels from, put a 0-10 series
// possibly, user collapsed all series. Hence we can't work with above calc
if(labelArr.length===0){labelArr=gl.axisCharts?[]:gl.series.map(function(gls,glsi){return glsi+1;});for(var _i2=0;_i2<ser.length;_i2++){gl.seriesX.push(labelArr);}}// Finally, pass the labelArr in gl.labels which will be printed on x-axis
gl.labels=labelArr;if(cnf.xaxis.convertedCatToNumeric){gl.categoryLabels=labelArr.map(function(l){return cnf.xaxis.labels.formatter(l);});}// Turn on this global flag to indicate no labels were provided by user
gl.noLabelsProvided=true;}// Segregate user provided data into appropriate vars
},{key:"parseData",value:function parseData(ser){var w=this.w;var cnf=w.config;var gl=w.globals;this.excludeCollapsedSeriesInYAxis();// If we detected string in X prop of series, we fallback to category x-axis
this.fallbackToCategory=false;this.ctx.core.resetGlobals();this.ctx.core.isMultipleY();if(gl.axisCharts){// axisCharts includes line / area / column / scatter
this.parseDataAxisCharts(ser);}else{// non-axis charts are pie / donut
this.parseDataNonAxisCharts(ser);}this.coreUtils.getLargestSeries();// set Null values to 0 in all series when user hides/shows some series
if(cnf.chart.type==='bar'&&cnf.chart.stacked){var series=new Series(this.ctx);gl.series=series.setNullSeriesToZeroValues(gl.series);}this.coreUtils.getSeriesTotals();if(gl.axisCharts){this.coreUtils.getStackedSeriesTotals();}this.coreUtils.getPercentSeries();if(!gl.dataFormatXNumeric&&(!gl.isXNumeric||cnf.xaxis.type==='numeric'&&cnf.labels.length===0&&cnf.xaxis.categories.length===0)){// x-axis labels couldn't be detected; hence try searching every option in config
this.handleExternalLabelsData(ser);}// check for multiline xaxis
var catLabels=this.coreUtils.getCategoryLabels(gl.labels);for(var l=0;l<catLabels.length;l++){if(Array.isArray(catLabels[l])){gl.isMultiLineX=true;break;}}}},{key:"excludeCollapsedSeriesInYAxis",value:function excludeCollapsedSeriesInYAxis(){var _this2=this;var w=this.w;w.globals.ignoreYAxisIndexes=w.globals.collapsedSeries.map(function(collapsed,i){// fix issue #1215
// if stacked, not returning collapsed.index to preserve yaxis
if(_this2.w.globals.isMultipleYAxis&&!w.config.chart.stacked){return collapsed.index;}});}}]);return Data;}();/**
   * ApexCharts Formatter Class for setting value formatters for axes as well as tooltips.
   *
   * @module Formatters
   **/var Formatters=/*#__PURE__*/function(){function Formatters(ctx){_classCallCheck(this,Formatters);this.ctx=ctx;this.w=ctx.w;this.tooltipKeyFormat='dd MMM';}_createClass(Formatters,[{key:"xLabelFormat",value:function xLabelFormat(fn,val,timestamp){var w=this.w;if(w.config.xaxis.type==='datetime'){if(w.config.xaxis.labels.formatter===undefined){// if user has not specified a custom formatter, use the default tooltip.x.format
if(w.config.tooltip.x.formatter===undefined){var datetimeObj=new DateTime(this.ctx);return datetimeObj.formatDate(datetimeObj.getDate(val),w.config.tooltip.x.format);}}}return fn(val,timestamp);}},{key:"defaultGeneralFormatter",value:function defaultGeneralFormatter(val){if(Array.isArray(val)){return val.map(function(v){return v;});}else{return val;}}},{key:"defaultYFormatter",value:function defaultYFormatter(v,yaxe,i){var w=this.w;if(Utils.isNumber(v)){if(w.globals.yValueDecimal!==0){v=v.toFixed(yaxe.decimalsInFloat!==undefined?yaxe.decimalsInFloat:w.globals.yValueDecimal);}else if(w.globals.maxYArr[i]-w.globals.minYArr[i]<10){v=v.toFixed(1);}else{v=v.toFixed(0);}}return v;}},{key:"setLabelFormatters",value:function setLabelFormatters(){var _this=this;var w=this.w;w.globals.xLabelFormatter=function(val){return _this.defaultGeneralFormatter(val);};w.globals.xaxisTooltipFormatter=function(val){return _this.defaultGeneralFormatter(val);};w.globals.ttKeyFormatter=function(val){return _this.defaultGeneralFormatter(val);};w.globals.ttZFormatter=function(val){return val;};w.globals.legendFormatter=function(val){return _this.defaultGeneralFormatter(val);};// formatter function will always overwrite format property
if(w.config.xaxis.labels.formatter!==undefined){w.globals.xLabelFormatter=w.config.xaxis.labels.formatter;}else{w.globals.xLabelFormatter=function(val){if(Utils.isNumber(val)){// numeric xaxis may have smaller range, so defaulting to 1 decimal
if(!w.config.xaxis.convertedCatToNumeric&&w.config.xaxis.type==='numeric'&&w.globals.dataPoints<50){return val.toFixed(1);}if(w.globals.isBarHorizontal){var range=w.globals.maxY-w.globals.minYArr;if(range<4){return val.toFixed(1);}}return val.toFixed(0);}return val;};}if(typeof w.config.tooltip.x.formatter==='function'){w.globals.ttKeyFormatter=w.config.tooltip.x.formatter;}else{w.globals.ttKeyFormatter=w.globals.xLabelFormatter;}if(typeof w.config.xaxis.tooltip.formatter==='function'){w.globals.xaxisTooltipFormatter=w.config.xaxis.tooltip.formatter;}if(Array.isArray(w.config.tooltip.y)){w.globals.ttVal=w.config.tooltip.y;}else{if(w.config.tooltip.y.formatter!==undefined){w.globals.ttVal=w.config.tooltip.y;}}if(w.config.tooltip.z.formatter!==undefined){w.globals.ttZFormatter=w.config.tooltip.z.formatter;}// legend formatter - if user wants to append any global values of series to legend text
if(w.config.legend.formatter!==undefined){w.globals.legendFormatter=w.config.legend.formatter;}// formatter function will always overwrite format property
w.config.yaxis.forEach(function(yaxe,i){if(yaxe.labels.formatter!==undefined){w.globals.yLabelFormatters[i]=yaxe.labels.formatter;}else{w.globals.yLabelFormatters[i]=function(val){if(!w.globals.xyCharts)return val;if(Array.isArray(val)){return val.map(function(v){return _this.defaultYFormatter(v,yaxe,i);});}else{return _this.defaultYFormatter(val,yaxe,i);}};}});return w.globals;}},{key:"heatmapLabelFormatters",value:function heatmapLabelFormatters(){var w=this.w;if(w.config.chart.type==='heatmap'){w.globals.yAxisScale[0].result=w.globals.seriesNames.slice();//  get the longest string from the labels array and also apply label formatter to it
var longest=w.globals.seriesNames.reduce(function(a,b){return a.length>b.length?a:b;},0);w.globals.yAxisScale[0].niceMax=longest;w.globals.yAxisScale[0].niceMin=longest;}}}]);return Formatters;}();var AxesUtils=/*#__PURE__*/function(){function AxesUtils(ctx){_classCallCheck(this,AxesUtils);this.ctx=ctx;this.w=ctx.w;}// Based on the formatter function, get the label text and position
_createClass(AxesUtils,[{key:"getLabel",value:function getLabel(labels,timescaleLabels,x,i){var drawnLabels=arguments.length>4&&arguments[4]!==undefined?arguments[4]:[];var fontSize=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'12px';var w=this.w;var rawLabel=typeof labels[i]==='undefined'?'':labels[i];var label=rawLabel;var xlbFormatter=w.globals.xLabelFormatter;var customFormatter=w.config.xaxis.labels.formatter;var isBold=false;var xFormat=new Formatters(this.ctx);var timestamp=rawLabel;label=xFormat.xLabelFormat(xlbFormatter,rawLabel,timestamp);if(customFormatter!==undefined){label=customFormatter(rawLabel,labels[i],i);}var determineHighestUnit=function determineHighestUnit(unit){var highestUnit=null;timescaleLabels.forEach(function(t){if(t.unit==='month'){highestUnit='year';}else if(t.unit==='day'){highestUnit='month';}else if(t.unit==='hour'){highestUnit='day';}else if(t.unit==='minute'){highestUnit='hour';}});return highestUnit===unit;};if(timescaleLabels.length>0){isBold=determineHighestUnit(timescaleLabels[i].unit);x=timescaleLabels[i].position;label=timescaleLabels[i].value;}else{if(w.config.xaxis.type==='datetime'&&customFormatter===undefined){label='';}}if(typeof label==='undefined')label='';label=Array.isArray(label)?label:label.toString();var graphics=new Graphics(this.ctx);var textRect={};if(w.globals.rotateXLabels){textRect=graphics.getTextRects(label,parseInt(fontSize,10),null,"rotate(".concat(w.config.xaxis.labels.rotate," 0 0)"),false);}else{textRect=graphics.getTextRects(label,parseInt(fontSize,10));}if(!Array.isArray(label)&&(label.indexOf('NaN')===0||label.toLowerCase().indexOf('invalid')===0||label.toLowerCase().indexOf('infinity')>=0||drawnLabels.indexOf(label)>=0&&!w.config.xaxis.labels.showDuplicates)){label='';}return{x:x,text:label,textRect:textRect,isBold:isBold};}},{key:"checkForOverflowingLabels",value:function checkForOverflowingLabels(i,label,labelsLen,drawnLabels,drawnLabelsRects){var w=this.w;if(i===0){// check if first label is being truncated
if(w.globals.skipFirstTimelinelabel){label.text='';}}if(i===labelsLen-1){// check if last label is being truncated
if(w.globals.skipLastTimelinelabel){label.text='';}}if(w.config.xaxis.labels.hideOverlappingLabels&&drawnLabels.length>0){var prev=drawnLabelsRects[drawnLabelsRects.length-1];if(label.x<prev.textRect.width/(w.globals.rotateXLabels?Math.abs(w.config.xaxis.labels.rotate)/12:1.01)+prev.x){label.text='';}}return label;}},{key:"checkForReversedLabels",value:function checkForReversedLabels(i,labels){var w=this.w;if(w.config.yaxis[i]&&w.config.yaxis[i].reversed){labels.reverse();}return labels;}},{key:"isYAxisHidden",value:function isYAxisHidden(index){var w=this.w;var coreUtils=new CoreUtils(this.ctx);return!w.config.yaxis[index].show||!w.config.yaxis[index].showForNullSeries&&coreUtils.isSeriesNull(index)&&w.globals.collapsedSeriesIndices.indexOf(index)===-1;}},{key:"drawYAxisTicks",value:function drawYAxisTicks(x,tickAmount,axisBorder,axisTicks,realIndex,labelsDivider,elYaxis){var w=this.w;var graphics=new Graphics(this.ctx);// initial label position = 0;
var t=w.globals.translateY;if(axisTicks.show&&tickAmount>0){if(w.config.yaxis[realIndex].opposite===true)x=x+axisTicks.width;for(var i=tickAmount;i>=0;i--){var tY=t+tickAmount/10+w.config.yaxis[realIndex].labels.offsetY-1;if(w.globals.isBarHorizontal){tY=labelsDivider*i;}if(w.config.chart.type==='heatmap'){tY=tY+labelsDivider/2;}var elTick=graphics.drawLine(x+axisBorder.offsetX-axisTicks.width+axisTicks.offsetX,tY+axisTicks.offsetY,x+axisBorder.offsetX+axisTicks.offsetX,tY+axisTicks.offsetY,axisTicks.color);elYaxis.add(elTick);t=t+labelsDivider;}}}}]);return AxesUtils;}();var Exports=/*#__PURE__*/function(){function Exports(ctx){_classCallCheck(this,Exports);this.ctx=ctx;this.w=ctx.w;}_createClass(Exports,[{key:"fixSvgStringForIe11",value:function fixSvgStringForIe11(svgData){// IE11 generates broken SVG that we have to fix by using regex
if(!Utils.isIE11()){// not IE11 - noop
return svgData;}// replace second occurence of "xmlns" attribute with "xmlns:xlink" with correct url + add xmlns:svgjs
var nXmlnsSeen=0;var result=svgData.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g,function(match){nXmlnsSeen++;return nXmlnsSeen===2?'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs"':match;});// remove the invalid empty namespace declarations
result=result.replace(/xmlns:NS\d+=""/g,'');// remove these broken namespaces from attributes
result=result.replace(/NS\d+:(\w+:\w+=")/g,'$1');return result;}},{key:"getSvgString",value:function getSvgString(){var svgString=this.w.globals.dom.Paper.svg();return this.fixSvgStringForIe11(svgString);}},{key:"cleanup",value:function cleanup(){var w=this.w;// hide some elements to avoid printing them on exported svg
var xcrosshairs=w.globals.dom.baseEl.getElementsByClassName('apexcharts-xcrosshairs');var ycrosshairs=w.globals.dom.baseEl.getElementsByClassName('apexcharts-ycrosshairs');var zoomSelectionRects=w.globals.dom.baseEl.getElementsByClassName('apexcharts-zoom-rect apexcharts-selection-rect');Array.prototype.forEach.call(zoomSelectionRects,function(z){z.setAttribute('width',0);});if(xcrosshairs){xcrosshairs.setAttribute('x',-500);xcrosshairs.setAttribute('x1',-500);xcrosshairs.setAttribute('x2',-500);}if(ycrosshairs){ycrosshairs.setAttribute('y',-100);ycrosshairs.setAttribute('y1',-100);ycrosshairs.setAttribute('y2',-100);}}},{key:"svgUrl",value:function svgUrl(){this.cleanup();var svgData=this.getSvgString();var svgBlob=new Blob([svgData],{type:'image/svg+xml;charset=utf-8'});return URL.createObjectURL(svgBlob);}},{key:"dataURI",value:function dataURI(){var _this=this;return new Promise(function(resolve){var w=_this.w;_this.cleanup();var canvas=document.createElement('canvas');canvas.width=w.globals.svgWidth;canvas.height=parseInt(w.globals.dom.elWrap.style.height,10);// because of resizeNonAxisCharts
var canvasBg=w.config.chart.background==='transparent'?'#fff':w.config.chart.background;var ctx=canvas.getContext('2d');ctx.fillStyle=canvasBg;ctx.fillRect(0,0,canvas.width,canvas.height);var svgData=_this.getSvgString();if(window.canvg&&Utils.isIE11()){// use canvg as a polyfill to workaround ie11 considering a canvas with loaded svg 'unsafe'
// without ignoreClear we lose our background color; without ignoreDimensions some grid lines become invisible
var v=window.canvg.Canvg.fromString(ctx,svgData,{ignoreClear:true,ignoreDimensions:true});// render the svg to canvas
v.start();var blob=canvas.msToBlob();// dispose - missing this will cause a memory leak
v.stop();resolve({blob:blob});}else{var svgUrl='data:image/svg+xml,'+encodeURIComponent(svgData);var img=new Image();img.crossOrigin='anonymous';img.onload=function(){ctx.drawImage(img,0,0);if(canvas.msToBlob){// IE and Edge can't navigate to data urls, so we return the blob instead
var _blob=canvas.msToBlob();resolve({blob:_blob});}else{var imgURI=canvas.toDataURL('image/png');resolve({imgURI:imgURI});}};img.src=svgUrl;}});}},{key:"exportToSVG",value:function exportToSVG(){this.triggerDownload(this.svgUrl(),'.svg');}},{key:"exportToPng",value:function exportToPng(){var _this2=this;this.dataURI().then(function(_ref){var imgURI=_ref.imgURI,blob=_ref.blob;if(blob){navigator.msSaveOrOpenBlob(blob,_this2.w.globals.chartID+'.png');}else{_this2.triggerDownload(imgURI,'.png');}});}},{key:"exportToCSV",value:function exportToCSV(_ref2){var _this3=this;var series=_ref2.series,_ref2$columnDelimiter=_ref2.columnDelimiter,columnDelimiter=_ref2$columnDelimiter===void 0?',':_ref2$columnDelimiter,_ref2$lineDelimiter=_ref2.lineDelimiter,lineDelimiter=_ref2$lineDelimiter===void 0?'\n':_ref2$lineDelimiter;var w=this.w;var columns=[];var rows=[];var result='data:text/csv;charset=utf-8,';var dataFormat=new Data(this.ctx);var axesUtils=new AxesUtils(this.ctx);var getCat=function getCat(i){var cat='';// pie / donut/ radial
if(!w.globals.axisCharts){cat=w.config.labels[i];}else{// xy charts
// non datetime
if(w.config.xaxis.type==='category'||w.config.xaxis.convertedCatToNumeric){if(w.globals.isBarHorizontal){var lbFormatter=w.globals.yLabelFormatters[0];var sr=new Series(_this3.ctx);var activeSeries=sr.getActiveConfigSeriesIndex();cat=lbFormatter(w.globals.labels[i],{seriesIndex:activeSeries,dataPointIndex:i,w:w});}else{cat=axesUtils.getLabel(w.globals.labels,w.globals.timescaleLabels,0,i).text;}}// datetime, but labels specified in categories or labels
if(w.config.xaxis.type==='datetime'){if(w.config.xaxis.categories.length){cat=w.config.xaxis.categories[i];}else if(w.config.labels.length){cat=w.config.labels[i];}}}return cat;};var handleAxisRowsColumns=function handleAxisRowsColumns(s,sI){if(columns.length){rows.push(columns.join(columnDelimiter));}if(s.data&&s.data.length){for(var i=0;i<s.data.length;i++){columns=[];var cat=getCat(i);if(!cat){if(dataFormat.isFormatXY()){cat=series[sI].data[i].x;}else if(dataFormat.isFormat2DArray()){cat=series[sI].data[i]?series[sI].data[i][0]:'';}}if(sI===0){columns.push(cat);for(var ci=0;ci<w.globals.series.length;ci++){columns.push(w.globals.series[ci][i]);}}if(w.config.chart.type==='candlestick'||s.type&&s.type==='candlestick'){columns.pop();columns.push(w.globals.seriesCandleO[sI][i]);columns.push(w.globals.seriesCandleH[sI][i]);columns.push(w.globals.seriesCandleL[sI][i]);columns.push(w.globals.seriesCandleC[sI][i]);}if(w.config.chart.type==='rangeBar'){columns.pop();columns.push(w.globals.seriesRangeStart[sI][i]);columns.push(w.globals.seriesRangeEnd[sI][i]);}if(columns.length){rows.push(columns.join(columnDelimiter));}}}};columns.push('category');series.map(function(s,sI){if(w.globals.axisCharts){columns.push(s.name?s.name:"series-".concat(sI));}});if(!w.globals.axisCharts){columns.push('value');rows.push(columns.join(columnDelimiter));}series.map(function(s,sI){if(w.globals.axisCharts){handleAxisRowsColumns(s,sI);}else{columns=[];columns.push(w.globals.labels[sI]);columns.push(w.globals.series[sI]);rows.push(columns.join(columnDelimiter));}});result+=rows.join(lineDelimiter);this.triggerDownload(encodeURI(result),'.csv');}},{key:"triggerDownload",value:function triggerDownload(href,ext){var downloadLink=document.createElement('a');downloadLink.href=href;downloadLink.download=this.w.globals.chartID+ext;document.body.appendChild(downloadLink);downloadLink.click();document.body.removeChild(downloadLink);}}]);return Exports;}();/**
   * ApexCharts XAxis Class for drawing X-Axis.
   *
   * @module XAxis
   **/var XAxis=/*#__PURE__*/function(){function XAxis(ctx){_classCallCheck(this,XAxis);this.ctx=ctx;this.w=ctx.w;var w=this.w;this.axesUtils=new AxesUtils(ctx);this.xaxisLabels=w.globals.labels.slice();if(w.globals.timescaleLabels.length>0&&!w.globals.isBarHorizontal){//  timeline labels are there and chart is not rangeabr timeline
this.xaxisLabels=w.globals.timescaleLabels.slice();}this.drawnLabels=[];this.drawnLabelsRects=[];if(w.config.xaxis.position==='top'){this.offY=0;}else{this.offY=w.globals.gridHeight+1;}this.offY=this.offY+w.config.xaxis.axisBorder.offsetY;this.isCategoryBarHorizontal=w.config.chart.type==='bar'&&w.config.plotOptions.bar.horizontal;this.xaxisFontSize=w.config.xaxis.labels.style.fontSize;this.xaxisFontFamily=w.config.xaxis.labels.style.fontFamily;this.xaxisForeColors=w.config.xaxis.labels.style.colors;this.xaxisBorderWidth=w.config.xaxis.axisBorder.width;if(this.isCategoryBarHorizontal){this.xaxisBorderWidth=w.config.yaxis[0].axisBorder.width.toString();}if(this.xaxisBorderWidth.indexOf('%')>-1){this.xaxisBorderWidth=w.globals.gridWidth*parseInt(this.xaxisBorderWidth,10)/100;}else{this.xaxisBorderWidth=parseInt(this.xaxisBorderWidth,10);}this.xaxisBorderHeight=w.config.xaxis.axisBorder.height;// For bars, we will only consider single y xais,
// as we are not providing multiple yaxis for bar charts
this.yaxis=w.config.yaxis[0];}_createClass(XAxis,[{key:"drawXaxis",value:function drawXaxis(){var _this=this;var w=this.w;var graphics=new Graphics(this.ctx);var elXaxis=graphics.group({"class":'apexcharts-xaxis',transform:"translate(".concat(w.config.xaxis.offsetX,", ").concat(w.config.xaxis.offsetY,")")});var elXaxisTexts=graphics.group({"class":'apexcharts-xaxis-texts-g',transform:"translate(".concat(w.globals.translateXAxisX,", ").concat(w.globals.translateXAxisY,")")});elXaxis.add(elXaxisTexts);var colWidth;// initial x Position (keep adding column width in the loop)
var xPos=w.globals.padHorizontal;var labels=[];for(var i=0;i<this.xaxisLabels.length;i++){labels.push(this.xaxisLabels[i]);}var labelsLen=labels.length;if(w.globals.isXNumeric){var len=labelsLen>1?labelsLen-1:labelsLen;colWidth=w.globals.gridWidth/len;xPos=xPos+colWidth/2+w.config.xaxis.labels.offsetX;}else{colWidth=w.globals.gridWidth/labels.length;xPos=xPos+colWidth+w.config.xaxis.labels.offsetX;}if(w.config.xaxis.labels.show){var _loop=function _loop(_i){var x=xPos-colWidth/2+w.config.xaxis.labels.offsetX;if(_i===0&&labelsLen===1&&colWidth/2===xPos&&w.globals.dataPoints===1){// single datapoint
x=w.globals.gridWidth/2;}var label=_this.axesUtils.getLabel(labels,w.globals.timescaleLabels,x,_i,_this.drawnLabels,_this.xaxisFontSize);var offsetYCorrection=28;if(w.globals.rotateXLabels){offsetYCorrection=22;}label=_this.axesUtils.checkForOverflowingLabels(_i,label,labelsLen,_this.drawnLabels,_this.drawnLabelsRects);var getCatForeColor=function getCatForeColor(){return w.config.xaxis.convertedCatToNumeric?_this.xaxisForeColors[w.globals.minX+_i-1]:_this.xaxisForeColors[_i];};if(label.text){w.globals.xaxisLabelsCount++;}var elText=graphics.drawText({x:label.x,y:_this.offY+w.config.xaxis.labels.offsetY+offsetYCorrection-(w.config.xaxis.position==='top'?w.globals.xAxisHeight+w.config.xaxis.axisTicks.height-2:0),text:label.text,textAnchor:'middle',fontWeight:label.isBold?600:w.config.xaxis.labels.style.fontWeight,fontSize:_this.xaxisFontSize,fontFamily:_this.xaxisFontFamily,foreColor:Array.isArray(_this.xaxisForeColors)?getCatForeColor():_this.xaxisForeColors,isPlainText:false,cssClass:'apexcharts-xaxis-label '+w.config.xaxis.labels.style.cssClass});elXaxisTexts.add(elText);var elTooltipTitle=document.createElementNS(w.globals.SVGNS,'title');elTooltipTitle.textContent=label.text;elText.node.appendChild(elTooltipTitle);if(label.text!==''){_this.drawnLabels.push(label.text);_this.drawnLabelsRects.push(label);}xPos=xPos+colWidth;};for(var _i=0;_i<=labelsLen-1;_i++){_loop(_i);}}if(w.config.xaxis.title.text!==undefined){var elXaxisTitle=graphics.group({"class":'apexcharts-xaxis-title'});var elXAxisTitleText=graphics.drawText({x:w.globals.gridWidth/2+w.config.xaxis.title.offsetX,y:this.offY-parseFloat(this.xaxisFontSize)+w.globals.xAxisLabelsHeight+w.config.xaxis.title.offsetY,text:w.config.xaxis.title.text,textAnchor:'middle',fontSize:w.config.xaxis.title.style.fontSize,fontFamily:w.config.xaxis.title.style.fontFamily,fontWeight:w.config.xaxis.title.style.fontWeight,foreColor:w.config.xaxis.title.style.color,cssClass:'apexcharts-xaxis-title-text '+w.config.xaxis.title.style.cssClass});elXaxisTitle.add(elXAxisTitleText);elXaxis.add(elXaxisTitle);}if(w.config.xaxis.axisBorder.show){var lineCorrection=0;if(w.config.chart.type==='bar'&&w.globals.isXNumeric){lineCorrection=lineCorrection-15;}var elHorzLine=graphics.drawLine(w.globals.padHorizontal+lineCorrection+w.config.xaxis.axisBorder.offsetX,this.offY,this.xaxisBorderWidth,this.offY,w.config.xaxis.axisBorder.color,0,this.xaxisBorderHeight);elXaxis.add(elHorzLine);}return elXaxis;}// this actually becomes the vertical axis (for bar charts)
},{key:"drawXaxisInversed",value:function drawXaxisInversed(realIndex){var w=this.w;var graphics=new Graphics(this.ctx);var translateYAxisX=w.config.yaxis[0].opposite?w.globals.translateYAxisX[realIndex]:0;var elYaxis=graphics.group({"class":'apexcharts-yaxis apexcharts-xaxis-inversed',rel:realIndex});var elYaxisTexts=graphics.group({"class":'apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g',transform:'translate('+translateYAxisX+', 0)'});elYaxis.add(elYaxisTexts);var colHeight;// initial x Position (keep adding column width in the loop)
var yPos;var labels=[];if(w.config.yaxis[realIndex].show){for(var i=0;i<this.xaxisLabels.length;i++){labels.push(this.xaxisLabels[i]);}}colHeight=w.globals.gridHeight/labels.length;yPos=-(colHeight/2.2);var lbFormatter=w.globals.yLabelFormatters[0];var ylabels=w.config.yaxis[0].labels;if(ylabels.show){for(var _i2=0;_i2<=labels.length-1;_i2++){var label=typeof labels[_i2]==='undefined'?'':labels[_i2];label=lbFormatter(label,{seriesIndex:realIndex,dataPointIndex:_i2,w:w});var multiY=0;if(Array.isArray(label)){multiY=label.length/2*parseInt(ylabels.style.fontSize,10);}var elLabel=graphics.drawText({x:ylabels.offsetX-15,y:yPos+colHeight+ylabels.offsetY-multiY,text:label,textAnchor:this.yaxis.opposite?'start':'end',foreColor:Array.isArray(ylabels.style.colors)?ylabels.style.colors[_i2]:ylabels.style.colors,fontSize:ylabels.style.fontSize,fontFamily:ylabels.style.fontFamily,fontWeight:ylabels.style.fontWeight,isPlainText:false,cssClass:'apexcharts-yaxis-label '+ylabels.style.cssClass});elYaxisTexts.add(elLabel);var elTooltipTitle=document.createElementNS(w.globals.SVGNS,'title');elTooltipTitle.textContent=label.text;elLabel.node.appendChild(elTooltipTitle);if(w.config.yaxis[realIndex].labels.rotate!==0){var labelRotatingCenter=graphics.rotateAroundCenter(elLabel.node);elLabel.node.setAttribute('transform',"rotate(".concat(w.config.yaxis[realIndex].labels.rotate," 0 ").concat(labelRotatingCenter.y,")"));}yPos=yPos+colHeight;}}if(w.config.yaxis[0].title.text!==undefined){var elXaxisTitle=graphics.group({"class":'apexcharts-yaxis-title apexcharts-xaxis-title-inversed',transform:'translate('+translateYAxisX+', 0)'});var elXAxisTitleText=graphics.drawText({x:0,y:w.globals.gridHeight/2,text:w.config.yaxis[0].title.text,textAnchor:'middle',foreColor:w.config.yaxis[0].title.style.color,fontSize:w.config.yaxis[0].title.style.fontSize,fontWeight:w.config.yaxis[0].title.style.fontWeight,fontFamily:w.config.yaxis[0].title.style.fontFamily,cssClass:'apexcharts-yaxis-title-text '+w.config.yaxis[0].title.style.cssClass});elXaxisTitle.add(elXAxisTitleText);elYaxis.add(elXaxisTitle);}var offX=0;if(this.isCategoryBarHorizontal&&w.config.yaxis[0].opposite){offX=w.globals.gridWidth;}var axisBorder=w.config.xaxis.axisBorder;if(axisBorder.show){var elVerticalLine=graphics.drawLine(w.globals.padHorizontal+axisBorder.offsetX+offX,1+axisBorder.offsetY,w.globals.padHorizontal+axisBorder.offsetX+offX,w.globals.gridHeight+axisBorder.offsetY,axisBorder.color,0);elYaxis.add(elVerticalLine);}if(w.config.yaxis[0].axisTicks.show){this.axesUtils.drawYAxisTicks(offX,labels.length,w.config.yaxis[0].axisBorder,w.config.yaxis[0].axisTicks,0,colHeight,elYaxis);}return elYaxis;}},{key:"drawXaxisTicks",value:function drawXaxisTicks(x1,appendToElement){var w=this.w;var x2=x1;if(x1<0||x1-2>w.globals.gridWidth)return;var y1=this.offY+w.config.xaxis.axisTicks.offsetY;var y2=y1+w.config.xaxis.axisTicks.height;if(w.config.xaxis.position==='top'){y2=y1-w.config.xaxis.axisTicks.height;}if(w.config.xaxis.axisTicks.show){var graphics=new Graphics(this.ctx);var line=graphics.drawLine(x1+w.config.xaxis.axisTicks.offsetX,y1+w.config.xaxis.offsetY,x2+w.config.xaxis.axisTicks.offsetX,y2+w.config.xaxis.offsetY,w.config.xaxis.axisTicks.color);// we are not returning anything, but appending directly to the element pased in param
appendToElement.add(line);line.node.classList.add('apexcharts-xaxis-tick');}}},{key:"getXAxisTicksPositions",value:function getXAxisTicksPositions(){var w=this.w;var xAxisTicksPositions=[];var xCount=this.xaxisLabels.length;var x1=w.globals.padHorizontal;if(w.globals.timescaleLabels.length>0){for(var i=0;i<xCount;i++){x1=this.xaxisLabels[i].position;xAxisTicksPositions.push(x1);}}else{var xCountForCategoryCharts=xCount;for(var _i3=0;_i3<xCountForCategoryCharts;_i3++){var x1Count=xCountForCategoryCharts;if(w.globals.isXNumeric&&w.config.chart.type!=='bar'){x1Count-=1;}x1=x1+w.globals.gridWidth/x1Count;xAxisTicksPositions.push(x1);}}return xAxisTicksPositions;}// to rotate x-axis labels or to put ... for longer text in xaxis
},{key:"xAxisLabelCorrections",value:function xAxisLabelCorrections(){var w=this.w;var graphics=new Graphics(this.ctx);var xAxis=w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g');var xAxisTexts=w.globals.dom.baseEl.querySelectorAll('.apexcharts-xaxis-texts-g text');var yAxisTextsInversed=w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxis-inversed text');var xAxisTextsInversed=w.globals.dom.baseEl.querySelectorAll('.apexcharts-xaxis-inversed-texts-g text tspan');if(w.globals.rotateXLabels||w.config.xaxis.labels.rotateAlways){for(var xat=0;xat<xAxisTexts.length;xat++){var textRotatingCenter=graphics.rotateAroundCenter(xAxisTexts[xat]);textRotatingCenter.y=textRotatingCenter.y-1;// + tickWidth/4;
textRotatingCenter.x=textRotatingCenter.x+1;xAxisTexts[xat].setAttribute('transform',"rotate(".concat(w.config.xaxis.labels.rotate," ").concat(textRotatingCenter.x," ").concat(textRotatingCenter.y,")"));xAxisTexts[xat].setAttribute('text-anchor',"end");var offsetHeight=10;xAxis.setAttribute('transform',"translate(0, ".concat(-offsetHeight,")"));var tSpan=xAxisTexts[xat].childNodes;if(w.config.xaxis.labels.trim){Array.prototype.forEach.call(tSpan,function(ts){graphics.placeTextWithEllipsis(ts,ts.textContent,w.config.xaxis.labels.maxHeight-(w.config.legend.position==='bottom'?20:10));});}}}else{(function(){var width=w.globals.gridWidth/(w.globals.labels.length+1);for(var _xat=0;_xat<xAxisTexts.length;_xat++){var _tSpan=xAxisTexts[_xat].childNodes;if(w.config.xaxis.labels.trim&&w.config.xaxis.type!=='datetime'){Array.prototype.forEach.call(_tSpan,function(ts){graphics.placeTextWithEllipsis(ts,ts.textContent,width);});}}})();}if(yAxisTextsInversed.length>0){// truncate rotated y axis in bar chart (x axis)
var firstLabelPosX=yAxisTextsInversed[yAxisTextsInversed.length-1].getBBox();var lastLabelPosX=yAxisTextsInversed[0].getBBox();if(firstLabelPosX.x<-20){yAxisTextsInversed[yAxisTextsInversed.length-1].parentNode.removeChild(yAxisTextsInversed[yAxisTextsInversed.length-1]);}if(lastLabelPosX.x+lastLabelPosX.width>w.globals.gridWidth&&!w.globals.isBarHorizontal){yAxisTextsInversed[0].parentNode.removeChild(yAxisTextsInversed[0]);}// truncate rotated x axis in bar chart (y axis)
for(var _xat2=0;_xat2<xAxisTextsInversed.length;_xat2++){graphics.placeTextWithEllipsis(xAxisTextsInversed[_xat2],xAxisTextsInversed[_xat2].textContent,w.config.yaxis[0].labels.maxWidth-parseFloat(w.config.yaxis[0].title.style.fontSize)*2-20);}}}// renderXAxisBands() {
//   let w = this.w;
//   let plotBand = document.createElementNS(w.globals.SVGNS, 'rect')
//   w.globals.dom.elGraphical.add(plotBand)
// }
}]);return XAxis;}();/**
   * ApexCharts Grid Class for drawing Cartesian Grid.
   *
   * @module Grid
   **/var Grid=/*#__PURE__*/function(){function Grid(ctx){_classCallCheck(this,Grid);this.ctx=ctx;this.w=ctx.w;var w=this.w;this.xaxisLabels=w.globals.labels.slice();this.axesUtils=new AxesUtils(ctx);this.isTimelineBar=w.config.xaxis.type==='datetime'&&w.globals.seriesRangeBarTimeline.length;if(w.globals.timescaleLabels.length>0){//  timescaleLabels labels are there
this.xaxisLabels=w.globals.timescaleLabels.slice();}}// when using sparklines or when showing no grid, we need to have a grid area which is reused at many places for other calculations as well
_createClass(Grid,[{key:"drawGridArea",value:function drawGridArea(){var elGrid=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var w=this.w;var graphics=new Graphics(this.ctx);if(elGrid===null){elGrid=graphics.group({"class":'apexcharts-grid'});}var elVerticalLine=graphics.drawLine(w.globals.padHorizontal,1,w.globals.padHorizontal,w.globals.gridHeight,'transparent');var elHorzLine=graphics.drawLine(w.globals.padHorizontal,w.globals.gridHeight,w.globals.gridWidth,w.globals.gridHeight,'transparent');elGrid.add(elHorzLine);elGrid.add(elVerticalLine);return elGrid;}},{key:"drawGrid",value:function drawGrid(){var gl=this.w.globals;var elgrid=null;if(gl.axisCharts){// grid is drawn after xaxis and yaxis are drawn
elgrid=this.renderGrid();this.drawGridArea(elgrid.el);}return elgrid;}// This mask will clip off overflowing graphics from the drawable area
},{key:"createGridMask",value:function createGridMask(){var w=this.w;var gl=w.globals;var graphics=new Graphics(this.ctx);var strokeSize=Array.isArray(w.config.stroke.width)?0:w.config.stroke.width;if(Array.isArray(w.config.stroke.width)){var strokeMaxSize=0;w.config.stroke.width.forEach(function(m){strokeMaxSize=Math.max(strokeMaxSize,m);});strokeSize=strokeMaxSize;}gl.dom.elGridRectMask=document.createElementNS(gl.SVGNS,'clipPath');gl.dom.elGridRectMask.setAttribute('id',"gridRectMask".concat(gl.cuid));gl.dom.elGridRectMarkerMask=document.createElementNS(gl.SVGNS,'clipPath');gl.dom.elGridRectMarkerMask.setAttribute('id',"gridRectMarkerMask".concat(gl.cuid));// let barHalfWidth = 0
var type=w.config.chart.type;var hasBar=type==='bar'||type==='rangeBar'||w.globals.comboBarCount>0;var barWidthLeft=0;var barWidthRight=0;if(hasBar&&w.globals.isXNumeric&&!w.globals.isBarHorizontal){barWidthLeft=w.config.grid.padding.left;barWidthRight=w.config.grid.padding.right;if(gl.barPadForNumericAxis>barWidthLeft){barWidthLeft=gl.barPadForNumericAxis;barWidthRight=gl.barPadForNumericAxis;}}gl.dom.elGridRect=graphics.drawRect(-strokeSize/2-barWidthLeft-2,-strokeSize/2,gl.gridWidth+strokeSize+barWidthRight+barWidthLeft+4,gl.gridHeight+strokeSize,0,'#fff');var coreUtils=new CoreUtils(this);coreUtils.getLargestMarkerSize();var markerSize=w.globals.markers.largestSize+1;gl.dom.elGridRectMarker=graphics.drawRect(-markerSize*2,-markerSize*2,gl.gridWidth+markerSize*4,gl.gridHeight+markerSize*4,0,'#fff');gl.dom.elGridRectMask.appendChild(gl.dom.elGridRect.node);gl.dom.elGridRectMarkerMask.appendChild(gl.dom.elGridRectMarker.node);var defs=gl.dom.baseEl.querySelector('defs');defs.appendChild(gl.dom.elGridRectMask);defs.appendChild(gl.dom.elGridRectMarkerMask);}},{key:"_drawGridLines",value:function _drawGridLines(_ref){var i=_ref.i,x1=_ref.x1,y1=_ref.y1,x2=_ref.x2,y2=_ref.y2,xCount=_ref.xCount,parent=_ref.parent;var w=this.w;var shouldDraw=function shouldDraw(){if(i===0&&w.globals.skipFirstTimelinelabel){return false;}if(i===xCount-1&&w.globals.skipLastTimelinelabel){return false;}if(w.config.chart.type==='radar'){return false;}return true;};if(shouldDraw()){if(w.config.grid.xaxis.lines.show){this._drawGridLine({x1:x1,y1:y1,x2:x2,y2:y2,parent:parent});}var xAxis=new XAxis(this.ctx);xAxis.drawXaxisTicks(x1,this.elg);}}},{key:"_drawGridLine",value:function _drawGridLine(_ref2){var x1=_ref2.x1,y1=_ref2.y1,x2=_ref2.x2,y2=_ref2.y2,parent=_ref2.parent;var w=this.w;var strokeDashArray=w.config.grid.strokeDashArray;var graphics=new Graphics(this);var line=graphics.drawLine(x1,y1,x2,y2,w.config.grid.borderColor,strokeDashArray);line.node.classList.add('apexcharts-gridline');parent.add(line);}},{key:"_drawGridBandRect",value:function _drawGridBandRect(_ref3){var c=_ref3.c,x1=_ref3.x1,y1=_ref3.y1,x2=_ref3.x2,y2=_ref3.y2,type=_ref3.type;var w=this.w;var graphics=new Graphics(this.ctx);if(type==='column'&&w.config.xaxis.type==='datetime')return;var color=w.config.grid[type].colors[c];var rect=graphics.drawRect(x1,y1,x2,y2,0,color,w.config.grid[type].opacity);this.elg.add(rect);rect.attr('clip-path',"url(#gridRectMask".concat(w.globals.cuid,")"));rect.node.classList.add("apexcharts-grid-".concat(type));}},{key:"_drawXYLines",value:function _drawXYLines(_ref4){var _this=this;var xCount=_ref4.xCount,tickAmount=_ref4.tickAmount;var w=this.w;var datetimeLines=function datetimeLines(_ref5){var xC=_ref5.xC,x1=_ref5.x1,y1=_ref5.y1,x2=_ref5.x2,y2=_ref5.y2;for(var i=0;i<xC;i++){x1=_this.xaxisLabels[i].position;x2=_this.xaxisLabels[i].position;_this._drawGridLines({i:i,x1:x1,y1:y1,x2:x2,y2:y2,xCount:xCount,parent:_this.elgridLinesV});}};var categoryLines=function categoryLines(_ref6){var xC=_ref6.xC,x1=_ref6.x1,y1=_ref6.y1,x2=_ref6.x2,y2=_ref6.y2;for(var i=0;i<xC+(w.globals.isXNumeric?0:1);i++){if(i===0&&xC===1&&w.globals.dataPoints===1){// single datapoint
x1=w.globals.gridWidth/2;x2=x1;}_this._drawGridLines({i:i,x1:x1,y1:y1,x2:x2,y2:y2,xCount:xCount,parent:_this.elgridLinesV});x1=x1+w.globals.gridWidth/(w.globals.isXNumeric?xC-1:xC);x2=x1;}};// draw vertical lines
if(w.config.grid.xaxis.lines.show||w.config.xaxis.axisTicks.show){var x1=w.globals.padHorizontal;var y1=0;var x2;var y2=w.globals.gridHeight;if(w.globals.timescaleLabels.length){datetimeLines({xC:xCount,x1:x1,y1:y1,x2:x2,y2:y2});}else{if(w.globals.isXNumeric){xCount=w.globals.xAxisScale.result.length;}if(w.config.xaxis.convertedCatToNumeric){// in case of a convertedCatToNumeric, some labels might be skipped due to hideOverLapping labels, hence use this var to get the visible ticks
xCount=w.globals.xaxisLabelsCount;}categoryLines({xC:xCount,x1:x1,y1:y1,x2:x2,y2:y2});}}// draw horizontal lines
if(w.config.grid.yaxis.lines.show){var _x=0;var _y=0;var _y2=0;var _x2=w.globals.gridWidth;var tA=tickAmount+1;if(this.isTimelineBar){tA=w.globals.labels.length;}for(var i=0;i<tA+(this.isTimelineBar?1:0);i++){this._drawGridLine({x1:_x,y1:_y,x2:_x2,y2:_y2,parent:this.elgridLinesH});_y=_y+w.globals.gridHeight/(this.isTimelineBar?tA:tickAmount);_y2=_y;}}}},{key:"_drawInvertedXYLines",value:function _drawInvertedXYLines(_ref7){var xCount=_ref7.xCount;var w=this.w;// draw vertical lines
if(w.config.grid.xaxis.lines.show||w.config.xaxis.axisTicks.show){var x1=w.globals.padHorizontal;var y1=0;var x2;var y2=w.globals.gridHeight;for(var i=0;i<xCount+1;i++){if(w.config.grid.xaxis.lines.show){this._drawGridLine({x1:x1,y1:y1,x2:x2,y2:y2,parent:this.elgridLinesV});}var xAxis=new XAxis(this.ctx);xAxis.drawXaxisTicks(x1,this.elg);x1=x1+w.globals.gridWidth/xCount+0.3;x2=x1;}}// draw horizontal lines
if(w.config.grid.yaxis.lines.show){var _x3=0;var _y3=0;var _y4=0;var _x4=w.globals.gridWidth;for(var _i=0;_i<w.globals.dataPoints+1;_i++){this._drawGridLine({x1:_x3,y1:_y3,x2:_x4,y2:_y4,parent:this.elgridLinesH});_y3=_y3+w.globals.gridHeight/w.globals.dataPoints;_y4=_y3;}}}// actual grid rendering
},{key:"renderGrid",value:function renderGrid(){var w=this.w;var graphics=new Graphics(this.ctx);this.elg=graphics.group({"class":'apexcharts-grid'});this.elgridLinesH=graphics.group({"class":'apexcharts-gridlines-horizontal'});this.elgridLinesV=graphics.group({"class":'apexcharts-gridlines-vertical'});this.elg.add(this.elgridLinesH);this.elg.add(this.elgridLinesV);if(!w.config.grid.show){this.elgridLinesV.hide();this.elgridLinesH.hide();}var yTickAmount=w.globals.yAxisScale.length?w.globals.yAxisScale[0].result.length-1:5;for(var i=0;i<w.globals.series.length;i++){if(typeof w.globals.yAxisScale[i]!=='undefined'){yTickAmount=w.globals.yAxisScale[i].result.length-1;}if(yTickAmount>2)break;}var xCount;if(!w.globals.isBarHorizontal||this.isTimelineBar){xCount=this.xaxisLabels.length;if(this.isTimelineBar){yTickAmount=w.globals.labels.length;}this._drawXYLines({xCount:xCount,tickAmount:yTickAmount});}else{xCount=yTickAmount;// for horizontal bar chart, get the xaxis tickamount
yTickAmount=w.globals.xTickAmount;this._drawInvertedXYLines({xCount:xCount,tickAmount:yTickAmount});}this.drawGridBands(xCount,yTickAmount);return{el:this.elg,xAxisTickWidth:w.globals.gridWidth/xCount};}},{key:"drawGridBands",value:function drawGridBands(xCount,tickAmount){var w=this.w;// rows background bands
if(w.config.grid.row.colors!==undefined&&w.config.grid.row.colors.length>0){var x1=0;var y1=0;var y2=w.globals.gridHeight/tickAmount;var x2=w.globals.gridWidth;for(var i=0,c=0;i<tickAmount;i++,c++){if(c>=w.config.grid.row.colors.length){c=0;}this._drawGridBandRect({c:c,x1:x1,y1:y1,x2:x2,y2:y2,type:'row'});y1=y1+w.globals.gridHeight/tickAmount;}}// columns background bands
if(w.config.grid.column.colors!==undefined&&w.config.grid.column.colors.length>0){var xc=!w.globals.isBarHorizontal&&(w.config.xaxis.type==='category'||w.config.xaxis.convertedCatToNumeric)?xCount-1:xCount;var _x5=w.globals.padHorizontal;var _y5=0;var _x6=w.globals.padHorizontal+w.globals.gridWidth/xc;var _y6=w.globals.gridHeight;for(var _i2=0,_c=0;_i2<xCount;_i2++,_c++){if(_c>=w.config.grid.column.colors.length){_c=0;}this._drawGridBandRect({c:_c,x1:_x5,y1:_y5,x2:_x6,y2:_y6,type:'column'});_x5=_x5+w.globals.gridWidth/xc;}}}}]);return Grid;}();var Range=/*#__PURE__*/function(){function Range(ctx){_classCallCheck(this,Range);this.ctx=ctx;this.w=ctx.w;}// http://stackoverflow.com/questions/326679/choosing-an-attractive-linear-scale-for-a-graphs-y-axiss
// This routine creates the Y axis values for a graph.
_createClass(Range,[{key:"niceScale",value:function niceScale(yMin,yMax,diff){var index=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var ticks=arguments.length>4&&arguments[4]!==undefined?arguments[4]:10;var NO_MIN_MAX_PROVIDED=arguments.length>5?arguments[5]:undefined;var w=this.w;if(ticks==='dataPoints'){ticks=w.globals.dataPoints-1;}if(yMin===Number.MIN_VALUE&&yMax===0||!Utils.isNumber(yMin)&&!Utils.isNumber(yMax)||yMin===Number.MIN_VALUE&&yMax===-Number.MAX_VALUE){// when all values are 0
yMin=0;yMax=ticks;var linearScale=this.linearScale(yMin,yMax,ticks);return linearScale;}if(yMin>yMax){// if somehow due to some wrong config, user sent max less than min,
// adjust the min/max again
console.warn('axis.min cannot be greater than axis.max');yMax=yMin+0.1;}else if(yMin===yMax){// If yMin and yMax are identical, then
// adjust the yMin and yMax values to actually
// make a graph. Also avoids division by zero errors.
yMin=yMin===0?0:yMin-0.5;// some small value
yMax=yMax===0?2:yMax+0.5;// some small value
}// Calculate Min amd Max graphical labels and graph
// increments.  The number of ticks defaults to
// 10 which is the SUGGESTED value.  Any tick value
// entered is used as a suggested value which is
// adjusted to be a 'pretty' value.
//
// Output will be an array of the Y axis values that
// encompass the Y values.
var result=[];// Determine Range
var range=Math.abs(yMax-yMin);if(range<1&&NO_MIN_MAX_PROVIDED&&(w.config.chart.type==='candlestick'||w.config.series[index].type==='candlestick'||w.globals.isRangeData)){/* fix https://github.com/apexcharts/apexcharts.js/issues/430 */yMax=yMax*1.01;}var tiks=ticks+1;// Adjust ticks if needed
if(tiks<2){tiks=2;}else if(tiks>2){tiks-=2;}// Get raw step value
var tempStep=range/tiks;// Calculate pretty step value
var mag=Math.floor(Utils.log10(tempStep));var magPow=Math.pow(10,mag);var magMsd=Math.round(tempStep/magPow);if(magMsd<1){magMsd=1;}var stepSize=magMsd*magPow;// build Y label array.
// Lower and upper bounds calculations
var lb=stepSize*Math.floor(yMin/stepSize);var ub=stepSize*Math.ceil(yMax/stepSize);// Build array
var val=lb;if(NO_MIN_MAX_PROVIDED&&range>2){while(1){result.push(val);val+=stepSize;if(val>ub){break;}}return{result:result,niceMin:result[0],niceMax:result[result.length-1]};}else{result=[];var v=yMin;result.push(v);var valuesDivider=Math.abs(yMax-yMin)/ticks;for(var i=0;i<=ticks;i++){v=v+valuesDivider;result.push(v);}if(result[result.length-2]>=yMax){result.pop();}return{result:result,niceMin:result[0],niceMax:result[result.length-1]};}}},{key:"linearScale",value:function linearScale(yMin,yMax){var ticks=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;var range=Math.abs(yMax-yMin);var step=range/ticks;if(ticks===Number.MAX_VALUE){ticks=10;step=1;}var result=[];var v=yMin;while(ticks>=0){result.push(v);v=v+step;ticks-=1;}return{result:result,niceMin:result[0],niceMax:result[result.length-1]};}},{key:"logarithmicScale",value:function logarithmicScale(index,yMin,yMax,ticks){if(yMin<0||yMin===Number.MIN_VALUE)yMin=0.01;var base=10;var min=Math.log(yMin)/Math.log(base);var max=Math.log(yMax)/Math.log(base);var range=Math.abs(yMax-yMin);var step=range/ticks;var result=[];var v=yMin;while(ticks>=0){result.push(v);v=v+step;ticks-=1;}var logs=result.map(function(niceNumber,i){if(niceNumber<=0){niceNumber=0.01;}// calculate adjustment factor
var scale=(max-min)/(yMax-yMin);var logVal=Math.pow(base,min+scale*(niceNumber-min));return Math.round(logVal/Utils.roundToBase(logVal,base))*Utils.roundToBase(logVal,base);});// Math.floor may have rounded the value to 0, revert back to 1
if(logs[0]===0)logs[0]=1;return{result:logs,niceMin:logs[0],niceMax:logs[logs.length-1]};}},{key:"setYScaleForIndex",value:function setYScaleForIndex(index,minY,maxY){var gl=this.w.globals;var cnf=this.w.config;var y=gl.isBarHorizontal?cnf.xaxis:cnf.yaxis[index];if(typeof gl.yAxisScale[index]==='undefined'){gl.yAxisScale[index]=[];}var diff=Math.abs(maxY-minY);if(y.logarithmic&&diff<=5){gl.invalidLogScale=true;}if(y.logarithmic&&diff>5){gl.allSeriesCollapsed=false;gl.yAxisScale[index]=this.logarithmicScale(index,minY,maxY,y.tickAmount?y.tickAmount:Math.floor(Math.log10(maxY)));}else{if(maxY===-Number.MAX_VALUE||!Utils.isNumber(maxY)){// no data in the chart. Either all series collapsed or user passed a blank array
gl.yAxisScale[index]=this.linearScale(0,5,5);}else{// there is some data. Turn off the allSeriesCollapsed flag
gl.allSeriesCollapsed=false;if((y.min!==undefined||y.max!==undefined)&&!y.forceNiceScale){// fix https://github.com/apexcharts/apexcharts.js/issues/492
gl.yAxisScale[index]=this.linearScale(minY,maxY,y.tickAmount);}else{var noMinMaxProvided=cnf.yaxis[index].max===undefined&&cnf.yaxis[index].min===undefined||cnf.yaxis[index].forceNiceScale;gl.yAxisScale[index]=this.niceScale(minY,maxY,diff,index,// fix https://github.com/apexcharts/apexcharts.js/issues/397
y.tickAmount?y.tickAmount:diff<5&&diff>1?diff+1:5,noMinMaxProvided);}}}}},{key:"setXScale",value:function setXScale(minX,maxX){var w=this.w;var gl=w.globals;var x=w.config.xaxis;var diff=Math.abs(maxX-minX);if(maxX===-Number.MAX_VALUE||!Utils.isNumber(maxX)){// no data in the chart. Either all series collapsed or user passed a blank array
gl.xAxisScale=this.linearScale(0,5,5);}else{gl.xAxisScale=this.niceScale(minX,maxX,diff,0,x.tickAmount?x.tickAmount:diff<5&&diff>1?diff+1:5);}return gl.xAxisScale;}},{key:"setMultipleYScales",value:function setMultipleYScales(){var _this=this;var gl=this.w.globals;var cnf=this.w.config;var minYArr=gl.minYArr.concat([]);var maxYArr=gl.maxYArr.concat([]);var scalesIndices=[];// here, we loop through the yaxis array and find the item which has "seriesName" property
cnf.yaxis.forEach(function(yaxe,i){var index=i;cnf.series.forEach(function(s,si){// if seriesName matches and that series is not collapsed, we use that scale
// fix issue #1215
// proceed even if si is in gl.collapsedSeriesIndices
if(s.name===yaxe.seriesName){index=si;if(i!==si){scalesIndices.push({index:si,similarIndex:i,alreadyExists:true});}else{scalesIndices.push({index:si});}}});var minY=minYArr[index];var maxY=maxYArr[index];_this.setYScaleForIndex(i,minY,maxY);});this.sameScaleInMultipleAxes(minYArr,maxYArr,scalesIndices);}},{key:"sameScaleInMultipleAxes",value:function sameScaleInMultipleAxes(minYArr,maxYArr,scalesIndices){var _this2=this;var cnf=this.w.config;var gl=this.w.globals;// we got the scalesIndices array in the above code, but we need to filter out the items which doesn't have same scales
var similarIndices=[];scalesIndices.forEach(function(scale){if(scale.alreadyExists){if(typeof similarIndices[scale.index]==='undefined'){similarIndices[scale.index]=[];}similarIndices[scale.index].push(scale.index);similarIndices[scale.index].push(scale.similarIndex);}});function intersect(a,b){return a.filter(function(value){return b.indexOf(value)!==-1;});}gl.yAxisSameScaleIndices=similarIndices;similarIndices.forEach(function(si,i){similarIndices.forEach(function(sj,j){if(i!==j){if(intersect(si,sj).length>0){similarIndices[i]=similarIndices[i].concat(similarIndices[j]);}}});});// then, we remove duplicates from the similarScale array
var uniqueSimilarIndices=similarIndices.map(function(item){return item.filter(function(i,pos){return item.indexOf(i)===pos;});});// sort further to remove whole duplicate arrays later
var sortedIndices=uniqueSimilarIndices.map(function(s){return s.sort();});// remove undefined items
similarIndices=similarIndices.filter(function(s){return!!s;});var indices=sortedIndices.slice();var stringIndices=indices.map(function(ind){return JSON.stringify(ind);});indices=indices.filter(function(ind,p){return stringIndices.indexOf(JSON.stringify(ind))===p;});var sameScaleMinYArr=[];var sameScaleMaxYArr=[];minYArr.forEach(function(minYValue,yi){indices.forEach(function(scale,i){// we compare only the yIndex which exists in the indices array
if(scale.indexOf(yi)>-1){if(typeof sameScaleMinYArr[i]==='undefined'){sameScaleMinYArr[i]=[];sameScaleMaxYArr[i]=[];}sameScaleMinYArr[i].push({key:yi,value:minYValue});sameScaleMaxYArr[i].push({key:yi,value:maxYArr[yi]});}});});var sameScaleMin=Array.apply(null,Array(indices.length)).map(Number.prototype.valueOf,Number.MIN_VALUE);var sameScaleMax=Array.apply(null,Array(indices.length)).map(Number.prototype.valueOf,-Number.MAX_VALUE);sameScaleMinYArr.forEach(function(s,i){s.forEach(function(sc,j){sameScaleMin[i]=Math.min(sc.value,sameScaleMin[i]);});});sameScaleMaxYArr.forEach(function(s,i){s.forEach(function(sc,j){sameScaleMax[i]=Math.max(sc.value,sameScaleMax[i]);});});minYArr.forEach(function(min,i){sameScaleMaxYArr.forEach(function(s,si){var minY=sameScaleMin[si];var maxY=sameScaleMax[si];if(cnf.chart.stacked){// for stacked charts, we need to add the values
maxY=0;s.forEach(function(ind,k){// fix incorrectly adjust y scale issue #1215
if(ind.value!==-Number.MAX_VALUE){maxY+=ind.value;}if(minY!==Number.MIN_VALUE){minY+=sameScaleMinYArr[si][k].value;}});}s.forEach(function(ind,k){if(s[k].key===i){if(cnf.yaxis[i].min!==undefined){if(typeof cnf.yaxis[i].min==='function'){minY=cnf.yaxis[i].min(gl.minY);}else{minY=cnf.yaxis[i].min;}}if(cnf.yaxis[i].max!==undefined){if(typeof cnf.yaxis[i].max==='function'){maxY=cnf.yaxis[i].max(gl.maxY);}else{maxY=cnf.yaxis[i].max;}}_this2.setYScaleForIndex(i,minY,maxY);}});});});}},{key:"autoScaleY",value:function autoScaleY(ctx,yaxis,e){if(!ctx){ctx=this;}var w=ctx.w;if(w.globals.isMultipleYAxis||w.globals.collapsedSeries.length){// The autoScale option for multiple y-axis is turned off as it leads to buggy behavior.
// Also, when a series is collapsed, it results in incorrect behavior. Hence turned it off for that too - fixes apexcharts.js#795
console.warn('autoScaleYaxis is not supported in a multi-yaxis chart.');return yaxis;}var seriesX=w.globals.seriesX[0];var isStacked=w.config.chart.stacked;yaxis.forEach(function(yaxe,yi){var firstXIndex=0;for(var xi=0;xi<seriesX.length;xi++){if(seriesX[xi]>=e.xaxis.min){firstXIndex=xi;break;}}var initialMin=w.globals.minYArr[yi];var initialMax=w.globals.maxYArr[yi];var min,max;var stackedSer=w.globals.stackedSeriesTotals;w.globals.series.forEach(function(serie,sI){var firstValue=serie[firstXIndex];if(isStacked){firstValue=stackedSer[firstXIndex];min=max=firstValue;stackedSer.forEach(function(y,yI){if(seriesX[yI]<=e.xaxis.max&&seriesX[yI]>=e.xaxis.min){if(y>max&&y!==null)max=y;if(serie[yI]<min&&serie[yI]!==null)min=serie[yI];}});}else{min=max=firstValue;serie.forEach(function(y,yI){if(seriesX[yI]<=e.xaxis.max&&seriesX[yI]>=e.xaxis.min){var valMin=y;var valMax=y;w.globals.series.forEach(function(wS,wSI){if(y!==null){valMin=Math.min(wS[yI],valMin);valMax=Math.max(wS[yI],valMax);}});if(valMax>max&&valMax!==null)max=valMax;if(valMin<min&&valMin!==null)min=valMin;}});}if(min===undefined&&max===undefined){min=initialMin;max=initialMax;}min*=min<0?1.1:0.9;max*=max<0?0.9:1.1;if(max<0&&max<initialMax){max=initialMax;}if(min<0&&min>initialMin){min=initialMin;}if(yaxis.length>1){yaxis[sI].min=yaxe.min===undefined?min:yaxe.min;yaxis[sI].max=yaxe.max===undefined?max:yaxe.max;}else{yaxis[0].min=yaxe.min===undefined?min:yaxe.min;yaxis[0].max=yaxe.max===undefined?max:yaxe.max;}});});return yaxis;}}]);return Range;}();/**
   * Range is used to generates values between min and max.
   *
   * @module Range
   **/var Range$1=/*#__PURE__*/function(){function Range$1(ctx){_classCallCheck(this,Range$1);this.ctx=ctx;this.w=ctx.w;this.scales=new Range(ctx);}_createClass(Range$1,[{key:"init",value:function init(){this.setYRange();this.setXRange();this.setZRange();}},{key:"getMinYMaxY",value:function getMinYMaxY(startingIndex){var lowestY=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Number.MAX_VALUE;var highestY=arguments.length>2&&arguments[2]!==undefined?arguments[2]:-Number.MAX_VALUE;var len=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var cnf=this.w.config;var gl=this.w.globals;var maxY=-Number.MAX_VALUE;var minY=Number.MIN_VALUE;if(len===null){len=startingIndex+1;}var series=gl.series;var seriesMin=series;var seriesMax=series;if(cnf.chart.type==='candlestick'){seriesMin=gl.seriesCandleL;seriesMax=gl.seriesCandleH;}else if(gl.isRangeData){seriesMin=gl.seriesRangeStart;seriesMax=gl.seriesRangeEnd;}for(var i=startingIndex;i<len;i++){gl.dataPoints=Math.max(gl.dataPoints,series[i].length);for(var j=0;j<gl.series[i].length;j++){var val=series[i][j];if(val!==null&&Utils.isNumber(val)){maxY=Math.max(maxY,seriesMax[i][j]);lowestY=Math.min(lowestY,seriesMin[i][j]);highestY=Math.max(highestY,seriesMin[i][j]);if(this.w.config.chart.type==='candlestick'){maxY=Math.max(maxY,gl.seriesCandleO[i][j]);maxY=Math.max(maxY,gl.seriesCandleH[i][j]);maxY=Math.max(maxY,gl.seriesCandleL[i][j]);maxY=Math.max(maxY,gl.seriesCandleC[i][j]);highestY=maxY;}if(Utils.isFloat(val)){val=Utils.noExponents(val);gl.yValueDecimal=Math.max(gl.yValueDecimal,val.toString().split('.')[1].length);}if(minY>seriesMin[i][j]&&seriesMin[i][j]<0){minY=seriesMin[i][j];}}else{gl.hasNullValues=true;}}}if(cnf.chart.type==='rangeBar'&&gl.seriesRangeStart.length&&cnf.xaxis.type==='datetime'){minY=lowestY;}if(cnf.chart.type==='bar'){if(minY<0&&maxY<0){// all negative values in a bar chart, hence make the max to 0
maxY=0;}if(minY===Number.MIN_VALUE){minY=0;}}return{minY:minY,maxY:maxY,lowestY:lowestY,highestY:highestY};}},{key:"setYRange",value:function setYRange(){var gl=this.w.globals;var cnf=this.w.config;gl.maxY=-Number.MAX_VALUE;gl.minY=Number.MIN_VALUE;var lowestYInAllSeries=Number.MAX_VALUE;if(gl.isMultipleYAxis){// we need to get minY and maxY for multiple y axis
for(var i=0;i<gl.series.length;i++){var minYMaxYArr=this.getMinYMaxY(i,lowestYInAllSeries,null,i+1);gl.minYArr.push(minYMaxYArr.minY);gl.maxYArr.push(minYMaxYArr.maxY);lowestYInAllSeries=minYMaxYArr.lowestY;}}// and then, get the minY and maxY from all series
var minYMaxY=this.getMinYMaxY(0,lowestYInAllSeries,null,gl.series.length);gl.minY=minYMaxY.minY;gl.maxY=minYMaxY.maxY;lowestYInAllSeries=minYMaxY.lowestY;if(cnf.chart.stacked){this._setStackedMinMax();}// if the numbers are too big, reduce the range
// for eg, if number is between 100000-110000, putting 0 as the lowest value is not so good idea. So change the gl.minY for line/area/candlesticks
if(cnf.chart.type==='line'||cnf.chart.type==='area'||cnf.chart.type==='candlestick'){if(gl.minY===Number.MIN_VALUE&&lowestYInAllSeries!==-Number.MAX_VALUE&&lowestYInAllSeries!==gl.maxY// single value possibility
){var diff=gl.maxY-lowestYInAllSeries;if(lowestYInAllSeries>=0&&lowestYInAllSeries<=10){// if minY is already 0/low value, we don't want to go negatives here - so this check is essential.
diff=0;}gl.minY=lowestYInAllSeries-diff*5/100;/* fix https://github.com/apexcharts/apexcharts.js/issues/614 */ /* fix https://github.com/apexcharts/apexcharts.js/issues/968 */if(lowestYInAllSeries>0&&gl.minY<0){gl.minY=0;}/* fix https://github.com/apexcharts/apexcharts.js/issues/426 */gl.maxY=gl.maxY+diff*5/100;}}cnf.yaxis.forEach(function(yaxe,index){// override all min/max values by user defined values (y axis)
if(yaxe.max!==undefined){if(typeof yaxe.max==='number'){gl.maxYArr[index]=yaxe.max;}else if(typeof yaxe.max==='function'){gl.maxYArr[index]=yaxe.max(gl.maxY);}// gl.maxY is for single y-axis chart, it will be ignored in multi-yaxis
gl.maxY=gl.maxYArr[index];}if(yaxe.min!==undefined){if(typeof yaxe.min==='number'){gl.minYArr[index]=yaxe.min;}else if(typeof yaxe.min==='function'){gl.minYArr[index]=yaxe.min(gl.minY);}// gl.minY is for single y-axis chart, it will be ignored in multi-yaxis
gl.minY=gl.minYArr[index];}});// for horizontal bar charts, we need to check xaxis min/max as user may have specified there
if(gl.isBarHorizontal){var minmax=['min','max'];minmax.forEach(function(m){if(cnf.xaxis[m]!==undefined&&typeof cnf.xaxis[m]==='number'){m==='min'?gl.minY=cnf.xaxis[m]:gl.maxY=cnf.xaxis[m];}});}// for multi y-axis we need different scales for each
if(gl.isMultipleYAxis){this.scales.setMultipleYScales();gl.minY=lowestYInAllSeries;gl.yAxisScale.forEach(function(scale,i){gl.minYArr[i]=scale.niceMin;gl.maxYArr[i]=scale.niceMax;});}else{this.scales.setYScaleForIndex(0,gl.minY,gl.maxY);gl.minY=gl.yAxisScale[0].niceMin;gl.maxY=gl.yAxisScale[0].niceMax;gl.minYArr[0]=gl.yAxisScale[0].niceMin;gl.maxYArr[0]=gl.yAxisScale[0].niceMax;}return{minY:gl.minY,maxY:gl.maxY,minYArr:gl.minYArr,maxYArr:gl.maxYArr};}},{key:"setXRange",value:function setXRange(){var gl=this.w.globals;var cnf=this.w.config;var isXNumeric=cnf.xaxis.type==='numeric'||cnf.xaxis.type==='datetime'||cnf.xaxis.type==='category'&&!gl.noLabelsProvided||gl.noLabelsProvided||gl.isXNumeric;var getInitialMinXMaxX=function getInitialMinXMaxX(){for(var i=0;i<gl.series.length;i++){if(gl.labels[i]){for(var j=0;j<gl.labels[i].length;j++){if(gl.labels[i][j]!==null&&Utils.isNumber(gl.labels[i][j])){gl.maxX=Math.max(gl.maxX,gl.labels[i][j]);gl.initialMaxX=Math.max(gl.maxX,gl.labels[i][j]);gl.minX=Math.min(gl.minX,gl.labels[i][j]);gl.initialMinX=Math.min(gl.minX,gl.labels[i][j]);}}}}};// minX maxX starts here
if(gl.isXNumeric){getInitialMinXMaxX();}if(gl.noLabelsProvided){if(cnf.xaxis.categories.length===0){gl.maxX=gl.labels[gl.labels.length-1];gl.initialMaxX=gl.labels[gl.labels.length-1];gl.minX=1;gl.initialMinX=1;}}if(gl.isXNumeric||gl.noLabelsProvided||gl.dataFormatXNumeric){var ticks;if(cnf.xaxis.tickAmount===undefined){ticks=Math.round(gl.svgWidth/150);// no labels provided and total number of dataPoints is less than 30
if(cnf.xaxis.type==='numeric'&&gl.dataPoints<30){ticks=gl.dataPoints-1;}// this check is for when ticks exceeds total datapoints and that would result in duplicate labels
if(ticks>gl.dataPoints&&gl.dataPoints!==0){ticks=gl.dataPoints-1;}}else if(cnf.xaxis.tickAmount==='dataPoints'){if(gl.series.length>1){ticks=gl.series[gl.maxValsInArrayIndex].length-1;}if(gl.isXNumeric){ticks=gl.maxX-gl.minX-1;}}else{ticks=cnf.xaxis.tickAmount;}gl.xTickAmount=ticks;// override all min/max values by user defined values (x axis)
if(cnf.xaxis.max!==undefined&&typeof cnf.xaxis.max==='number'){gl.maxX=cnf.xaxis.max;}if(cnf.xaxis.min!==undefined&&typeof cnf.xaxis.min==='number'){gl.minX=cnf.xaxis.min;}// if range is provided, adjust the new minX
if(cnf.xaxis.range!==undefined){gl.minX=gl.maxX-cnf.xaxis.range;}if(gl.minX!==Number.MAX_VALUE&&gl.maxX!==-Number.MAX_VALUE){if(cnf.xaxis.convertedCatToNumeric&&!gl.dataFormatXNumeric){var catScale=[];for(var i=gl.minX-1;i<gl.maxX;i++){catScale.push(i+1);}gl.xAxisScale={result:catScale,niceMin:catScale[0],niceMax:catScale[catScale.length-1]};}else{gl.xAxisScale=this.scales.setXScale(gl.minX,gl.maxX);}}else{gl.xAxisScale=this.scales.linearScale(1,ticks,ticks);if(gl.noLabelsProvided&&gl.labels.length>0){gl.xAxisScale=this.scales.linearScale(1,gl.labels.length,ticks-1);// this is the only place seriesX is again mutated
gl.seriesX=gl.labels.slice();}}// we will still store these labels as the count for this will be different (to draw grid and labels placement)
if(isXNumeric){gl.labels=gl.xAxisScale.result.slice();}}if(gl.isBarHorizontal&&gl.labels.length){gl.xTickAmount=gl.labels.length;}// single dataPoint
this._handleSingleDataPoint();// minimum x difference to calculate bar width in numeric bars
this._getMinXDiff();return{minX:gl.minX,maxX:gl.maxX};}},{key:"setZRange",value:function setZRange(){// minZ, maxZ starts here
var gl=this.w.globals;if(!gl.isDataXYZ)return;for(var i=0;i<gl.series.length;i++){if(typeof gl.seriesZ[i]!=='undefined'){for(var j=0;j<gl.seriesZ[i].length;j++){if(gl.seriesZ[i][j]!==null&&Utils.isNumber(gl.seriesZ[i][j])){gl.maxZ=Math.max(gl.maxZ,gl.seriesZ[i][j]);gl.minZ=Math.min(gl.minZ,gl.seriesZ[i][j]);}}}}}},{key:"_handleSingleDataPoint",value:function _handleSingleDataPoint(){var gl=this.w.globals;var cnf=this.w.config;if(gl.minX===gl.maxX){var datetimeObj=new DateTime(this.ctx);if(cnf.xaxis.type==='datetime'){var newMinX=datetimeObj.getDate(gl.minX);newMinX.setUTCDate(newMinX.getDate()-2);gl.minX=new Date(newMinX).getTime();var newMaxX=datetimeObj.getDate(gl.maxX);newMaxX.setUTCDate(newMaxX.getDate()+2);gl.maxX=new Date(newMaxX).getTime();}else if(cnf.xaxis.type==='numeric'||cnf.xaxis.type==='category'&&!gl.noLabelsProvided){gl.minX=gl.minX-2;gl.initialMinX=gl.minX;gl.maxX=gl.maxX+2;gl.initialMaxX=gl.maxX;}}}},{key:"_getMinXDiff",value:function _getMinXDiff(){var gl=this.w.globals;if(gl.isXNumeric){// get the least x diff if numeric x axis is present
gl.seriesX.forEach(function(sX,i){if(sX.length===1){// a small hack to prevent overlapping multiple bars when there is just 1 datapoint in bar series.
// fix #811
sX.push(gl.seriesX[gl.maxValsInArrayIndex][gl.seriesX[gl.maxValsInArrayIndex].length-1]);}// fix #983 (clone the array to avoid side effects)
var seriesX=sX.slice();seriesX.sort(function(a,b){return a-b;});seriesX.forEach(function(s,j){if(j>0){var xDiff=s-gl.seriesX[i][j-1];if(xDiff>0){gl.minXDiff=Math.min(xDiff,gl.minXDiff);}}});if(gl.dataPoints===1&&gl.minXDiff===Number.MAX_VALUE){gl.minXDiff=0.5;}});}}},{key:"_setStackedMinMax",value:function _setStackedMinMax(){var gl=this.w.globals;// for stacked charts, we calculate each series's parallel values. i.e, series[0][j] + series[1][j] .... [series[i.length][j]] and get the max out of it
var stackedPoss=[];var stackedNegs=[];if(gl.series.length){for(var j=0;j<gl.series[gl.maxValsInArrayIndex].length;j++){var poss=0;var negs=0;for(var i=0;i<gl.series.length;i++){if(gl.series[i][j]!==null&&Utils.isNumber(gl.series[i][j])){// 0.0001 fixes #185 when values are very small
gl.series[i][j]>0?poss=poss+parseFloat(gl.series[i][j])+0.0001:negs=negs+parseFloat(gl.series[i][j]);}if(i===gl.series.length-1){// push all the totals to the array for future use
stackedPoss.push(poss);stackedNegs.push(negs);}}}}// get the max/min out of the added parallel values
for(var z=0;z<stackedPoss.length;z++){gl.maxY=Math.max(gl.maxY,stackedPoss[z]);gl.minY=Math.min(gl.minY,stackedNegs[z]);}}}]);return Range$1;}();/**
   * ApexCharts YAxis Class for drawing Y-Axis.
   *
   * @module YAxis
   **/var YAxis=/*#__PURE__*/function(){function YAxis(ctx){_classCallCheck(this,YAxis);this.ctx=ctx;this.w=ctx.w;var w=this.w;this.xaxisFontSize=w.config.xaxis.labels.style.fontSize;this.axisFontFamily=w.config.xaxis.labels.style.fontFamily;this.xaxisForeColors=w.config.xaxis.labels.style.colors;this.isCategoryBarHorizontal=w.config.chart.type==='bar'&&w.config.plotOptions.bar.horizontal;this.xAxisoffX=0;if(w.config.xaxis.position==='bottom'){this.xAxisoffX=w.globals.gridHeight;}this.drawnLabels=[];this.axesUtils=new AxesUtils(ctx);}_createClass(YAxis,[{key:"drawYaxis",value:function drawYaxis(realIndex){var w=this.w;var graphics=new Graphics(this.ctx);var yaxisStyle=w.config.yaxis[realIndex].labels.style;var yaxisFontSize=yaxisStyle.fontSize;var yaxisFontFamily=yaxisStyle.fontFamily;var yaxisFontWeight=yaxisStyle.fontWeight;var elYaxis=graphics.group({"class":'apexcharts-yaxis',rel:realIndex,transform:'translate('+w.globals.translateYAxisX[realIndex]+', 0)'});if(this.axesUtils.isYAxisHidden(realIndex)){return elYaxis;}var elYaxisTexts=graphics.group({"class":'apexcharts-yaxis-texts-g'});elYaxis.add(elYaxisTexts);var tickAmount=w.globals.yAxisScale[realIndex].result.length-1;// labelsDivider is simply svg height/number of ticks
var labelsDivider=w.globals.gridHeight/tickAmount;// initial label position = 0;
var l=w.globals.translateY;var lbFormatter=w.globals.yLabelFormatters[realIndex];var labels=w.globals.yAxisScale[realIndex].result.slice();labels=this.axesUtils.checkForReversedLabels(realIndex,labels);var firstLabel='';if(w.config.yaxis[realIndex].labels.show){var _loop=function _loop(i){var val=labels[i];val=lbFormatter(val,i);var xPad=w.config.yaxis[realIndex].labels.padding;if(w.config.yaxis[realIndex].opposite&&w.config.yaxis.length!==0){xPad=xPad*-1;}var getForeColor=function getForeColor(){return Array.isArray(yaxisStyle.colors)?yaxisStyle.colors[i]:yaxisStyle.colors;};var label=graphics.drawText({x:xPad,y:l+tickAmount/10+w.config.yaxis[realIndex].labels.offsetY+1,text:val,textAnchor:w.config.yaxis[realIndex].opposite?'start':'end',fontSize:yaxisFontSize,fontFamily:yaxisFontFamily,fontWeight:yaxisFontWeight,foreColor:getForeColor(),isPlainText:false,cssClass:'apexcharts-yaxis-label '+yaxisStyle.cssClass});if(i===tickAmount){firstLabel=label;}elYaxisTexts.add(label);if(w.config.yaxis[realIndex].labels.rotate!==0){var firstabelRotatingCenter=graphics.rotateAroundCenter(firstLabel.node);var labelRotatingCenter=graphics.rotateAroundCenter(label.node);label.node.setAttribute('transform',"rotate(".concat(w.config.yaxis[realIndex].labels.rotate," ").concat(firstabelRotatingCenter.x," ").concat(labelRotatingCenter.y,")"));}l=l+labelsDivider;};for(var i=tickAmount;i>=0;i--){_loop(i);}}if(w.config.yaxis[realIndex].title.text!==undefined){var elYaxisTitle=graphics.group({"class":'apexcharts-yaxis-title'});var _x=0;if(w.config.yaxis[realIndex].opposite){_x=w.globals.translateYAxisX[realIndex];}var elYAxisTitleText=graphics.drawText({x:_x,y:w.globals.gridHeight/2+w.globals.translateY+w.config.yaxis[realIndex].title.offsetY,text:w.config.yaxis[realIndex].title.text,textAnchor:'end',foreColor:w.config.yaxis[realIndex].title.style.color,fontSize:w.config.yaxis[realIndex].title.style.fontSize,fontWeight:w.config.yaxis[realIndex].title.style.fontWeight,fontFamily:w.config.yaxis[realIndex].title.style.fontFamily,cssClass:'apexcharts-yaxis-title-text '+w.config.yaxis[realIndex].title.style.cssClass});elYaxisTitle.add(elYAxisTitleText);elYaxis.add(elYaxisTitle);}var axisBorder=w.config.yaxis[realIndex].axisBorder;var x=31+axisBorder.offsetX;if(w.config.yaxis[realIndex].opposite){x=-31-axisBorder.offsetX;}if(axisBorder.show){var elVerticalLine=graphics.drawLine(x,w.globals.translateY+axisBorder.offsetY-2,x,w.globals.gridHeight+w.globals.translateY+axisBorder.offsetY+2,axisBorder.color,0,axisBorder.width);elYaxis.add(elVerticalLine);}if(w.config.yaxis[realIndex].axisTicks.show){this.axesUtils.drawYAxisTicks(x,tickAmount,axisBorder,w.config.yaxis[realIndex].axisTicks,realIndex,labelsDivider,elYaxis);}return elYaxis;}// This actually becomes horizonal axis (for bar charts)
},{key:"drawYaxisInversed",value:function drawYaxisInversed(realIndex){var w=this.w;var graphics=new Graphics(this.ctx);var elXaxis=graphics.group({"class":'apexcharts-xaxis apexcharts-yaxis-inversed'});var elXaxisTexts=graphics.group({"class":'apexcharts-xaxis-texts-g',transform:"translate(".concat(w.globals.translateXAxisX,", ").concat(w.globals.translateXAxisY,")")});elXaxis.add(elXaxisTexts);var tickAmount=w.globals.yAxisScale[realIndex].result.length-1;// labelsDivider is simply svg width/number of ticks
var labelsDivider=w.globals.gridWidth/tickAmount+0.1;// initial label position;
var l=labelsDivider+w.config.xaxis.labels.offsetX;var lbFormatter=w.globals.xLabelFormatter;var labels=w.globals.yAxisScale[realIndex].result.slice();var timescaleLabels=w.globals.timescaleLabels;if(timescaleLabels.length>0){this.xaxisLabels=timescaleLabels.slice();labels=timescaleLabels.slice();tickAmount=labels.length;}labels=this.axesUtils.checkForReversedLabels(realIndex,labels);var tl=timescaleLabels.length;if(w.config.xaxis.labels.show){for(var i=tl?0:tickAmount;tl?i<tl:i>=0;tl?i++:i--){var val=labels[i];val=lbFormatter(val,i);var x=w.globals.gridWidth+w.globals.padHorizontal-(l-labelsDivider+w.config.xaxis.labels.offsetX);if(timescaleLabels.length){var label=this.axesUtils.getLabel(labels,timescaleLabels,x,i,this.drawnLabels,this.xaxisFontSize);x=label.x;val=label.text;this.drawnLabels.push(label.text);if(i===0&&w.globals.skipFirstTimelinelabel){val='';}if(i===labels.length-1&&w.globals.skipLastTimelinelabel){val='';}}var elTick=graphics.drawText({x:x,y:this.xAxisoffX+w.config.xaxis.labels.offsetY+30-(w.config.xaxis.position==='top'?w.globals.xAxisHeight+w.config.xaxis.axisTicks.height-2:0),text:val,textAnchor:'middle',foreColor:Array.isArray(this.xaxisForeColors)?this.xaxisForeColors[realIndex]:this.xaxisForeColors,fontSize:this.xaxisFontSize,fontFamily:this.xaxisFontFamily,fontWeight:w.config.xaxis.labels.style.fontWeight,isPlainText:false,cssClass:'apexcharts-xaxis-label '+w.config.xaxis.labels.style.cssClass});elXaxisTexts.add(elTick);elTick.tspan(val);var elTooltipTitle=document.createElementNS(w.globals.SVGNS,'title');elTooltipTitle.textContent=val;elTick.node.appendChild(elTooltipTitle);l=l+labelsDivider;}}this.inversedYAxisTitleText(elXaxis);this.inversedYAxisBorder(elXaxis);return elXaxis;}},{key:"inversedYAxisBorder",value:function inversedYAxisBorder(parent){var w=this.w;var graphics=new Graphics(this.ctx);var axisBorder=w.config.xaxis.axisBorder;if(axisBorder.show){var lineCorrection=0;if(w.config.chart.type==='bar'&&w.globals.isXNumeric){lineCorrection=lineCorrection-15;}var elHorzLine=graphics.drawLine(w.globals.padHorizontal+lineCorrection+axisBorder.offsetX,this.xAxisoffX,w.globals.gridWidth,this.xAxisoffX,axisBorder.color,0,axisBorder.height);parent.add(elHorzLine);}}},{key:"inversedYAxisTitleText",value:function inversedYAxisTitleText(parent){var w=this.w;var graphics=new Graphics(this.ctx);if(w.config.xaxis.title.text!==undefined){var elYaxisTitle=graphics.group({"class":'apexcharts-xaxis-title apexcharts-yaxis-title-inversed'});var elYAxisTitleText=graphics.drawText({x:w.globals.gridWidth/2+w.config.xaxis.title.offsetX,y:this.xAxisoffX+parseFloat(this.xaxisFontSize)+parseFloat(w.config.xaxis.title.style.fontSize)+w.config.xaxis.title.offsetY+20,text:w.config.xaxis.title.text,textAnchor:'middle',fontSize:w.config.xaxis.title.style.fontSize,fontFamily:w.config.xaxis.title.style.fontFamily,fontWeight:w.config.xaxis.title.style.fontWeight,cssClass:'apexcharts-xaxis-title-text '+w.config.xaxis.title.style.cssClass});elYaxisTitle.add(elYAxisTitleText);parent.add(elYaxisTitle);}}},{key:"yAxisTitleRotate",value:function yAxisTitleRotate(realIndex,yAxisOpposite){var w=this.w;var graphics=new Graphics(this.ctx);var yAxisLabelsCoord={width:0,height:0};var yAxisTitleCoord={width:0,height:0};var elYAxisLabelsWrap=w.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(realIndex,"'] .apexcharts-yaxis-texts-g"));if(elYAxisLabelsWrap!==null){yAxisLabelsCoord=elYAxisLabelsWrap.getBoundingClientRect();}var yAxisTitle=w.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(realIndex,"'] .apexcharts-yaxis-title text"));if(yAxisTitle!==null){yAxisTitleCoord=yAxisTitle.getBoundingClientRect();}if(yAxisTitle!==null){var x=this.xPaddingForYAxisTitle(realIndex,yAxisLabelsCoord,yAxisTitleCoord,yAxisOpposite);yAxisTitle.setAttribute('x',x.xPos-(yAxisOpposite?10:0));}if(yAxisTitle!==null){var titleRotatingCenter=graphics.rotateAroundCenter(yAxisTitle);yAxisTitle.setAttribute('transform',"rotate(".concat(yAxisOpposite?'':'-').concat(w.config.yaxis[realIndex].title.rotate," ").concat(titleRotatingCenter.x," ").concat(titleRotatingCenter.y,")"));}}},{key:"xPaddingForYAxisTitle",value:function xPaddingForYAxisTitle(realIndex,yAxisLabelsCoord,yAxisTitleCoord,yAxisOpposite){var w=this.w;var oppositeAxisCount=0;var x=0;var padd=10;if(w.config.yaxis[realIndex].title.text===undefined||realIndex<0){return{xPos:x,padd:0};}if(yAxisOpposite){x=yAxisLabelsCoord.width+w.config.yaxis[realIndex].title.offsetX+yAxisTitleCoord.width/2+padd/2;oppositeAxisCount+=1;if(oppositeAxisCount===0){x=x-padd/2;}}else{x=yAxisLabelsCoord.width*-1+w.config.yaxis[realIndex].title.offsetX+padd/2+yAxisTitleCoord.width/2;if(w.globals.isBarHorizontal){padd=25;x=yAxisLabelsCoord.width*-1-w.config.yaxis[realIndex].title.offsetX-padd;}}return{xPos:x,padd:padd};}// sets the x position of the y-axis by counting the labels width, title width and any offset
},{key:"setYAxisXPosition",value:function setYAxisXPosition(yaxisLabelCoords,yTitleCoords){var w=this.w;var xLeft=0;var xRight=0;var leftOffsetX=18;var rightOffsetX=1;if(w.config.yaxis.length>1){this.multipleYs=true;}w.config.yaxis.map(function(yaxe,index){var shouldNotDrawAxis=w.globals.ignoreYAxisIndexes.indexOf(index)>-1||!yaxe.show||yaxe.floating||yaxisLabelCoords[index].width===0;var axisWidth=yaxisLabelCoords[index].width+yTitleCoords[index].width;if(!yaxe.opposite){xLeft=w.globals.translateX-leftOffsetX;if(!shouldNotDrawAxis){leftOffsetX=leftOffsetX+axisWidth+20;}w.globals.translateYAxisX[index]=xLeft+yaxe.labels.offsetX;}else{if(w.globals.isBarHorizontal){xRight=w.globals.gridWidth+w.globals.translateX-1;w.globals.translateYAxisX[index]=xRight-yaxe.labels.offsetX;}else{xRight=w.globals.gridWidth+w.globals.translateX+rightOffsetX;if(!shouldNotDrawAxis){rightOffsetX=rightOffsetX+axisWidth+20;}w.globals.translateYAxisX[index]=xRight-yaxe.labels.offsetX+20;}}});}},{key:"setYAxisTextAlignments",value:function setYAxisTextAlignments(){var w=this.w;var yaxis=w.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");yaxis=Utils.listToArray(yaxis);yaxis.forEach(function(y,index){var yaxe=w.config.yaxis[index];// proceed only if user has specified alignment
if(yaxe.labels.align!==undefined){var yAxisInner=w.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(index,"'] .apexcharts-yaxis-texts-g"));var yAxisTexts=w.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(index,"'] .apexcharts-yaxis-label"));yAxisTexts=Utils.listToArray(yAxisTexts);var rect=yAxisInner.getBoundingClientRect();if(yaxe.labels.align==='left'){yAxisTexts.forEach(function(label,lI){label.setAttribute('text-anchor','start');});if(!yaxe.opposite){yAxisInner.setAttribute('transform',"translate(-".concat(rect.width,", 0)"));}}else if(yaxe.labels.align==='center'){yAxisTexts.forEach(function(label,lI){label.setAttribute('text-anchor','middle');});yAxisInner.setAttribute('transform',"translate(".concat(rect.width/2*(!yaxe.opposite?-1:1),", 0)"));}else if(yaxe.labels.align==='right'){yAxisTexts.forEach(function(label,lI){label.setAttribute('text-anchor','end');});if(yaxe.opposite){yAxisInner.setAttribute('transform',"translate(".concat(rect.width,", 0)"));}}}});}}]);return YAxis;}();var Events=/*#__PURE__*/function(){function Events(ctx){_classCallCheck(this,Events);this.ctx=ctx;this.w=ctx.w;this.documentEvent=Utils.bind(this.documentEvent,this);}_createClass(Events,[{key:"addEventListener",value:function addEventListener(name,handler){var w=this.w;if(w.globals.events.hasOwnProperty(name)){w.globals.events[name].push(handler);}else{w.globals.events[name]=[handler];}}},{key:"removeEventListener",value:function removeEventListener(name,handler){var w=this.w;if(!w.globals.events.hasOwnProperty(name)){return;}var index=w.globals.events[name].indexOf(handler);if(index!==-1){w.globals.events[name].splice(index,1);}}},{key:"fireEvent",value:function fireEvent(name,args){var w=this.w;if(!w.globals.events.hasOwnProperty(name)){return;}if(!args||!args.length){args=[];}var evs=w.globals.events[name];var l=evs.length;for(var i=0;i<l;i++){evs[i].apply(null,args);}}},{key:"setupEventHandlers",value:function setupEventHandlers(){var _this=this;var w=this.w;var me=this.ctx;var clickableArea=w.globals.dom.baseEl.querySelector(w.globals.chartClass);this.ctx.eventList.forEach(function(event){clickableArea.addEventListener(event,function(e){var opts=Object.assign({},w,{seriesIndex:w.globals.capturedSeriesIndex,dataPointIndex:w.globals.capturedDataPointIndex});if(e.type==='mousemove'||e.type==='touchmove'){if(typeof w.config.chart.events.mouseMove==='function'){w.config.chart.events.mouseMove(e,me,opts);}}else if(e.type==='mouseup'&&e.which===1||e.type==='touchend'){if(typeof w.config.chart.events.click==='function'){w.config.chart.events.click(e,me,opts);}me.ctx.events.fireEvent('click',[e,me,opts]);}},{capture:false,passive:true});});this.ctx.eventList.forEach(function(event){document.addEventListener(event,_this.documentEvent);});this.ctx.core.setupBrushHandler();}},{key:"documentEvent",value:function documentEvent(e){var w=this.w;var target=e.target.className;if(e.type==='click'){var elMenu=w.globals.dom.baseEl.querySelector('.apexcharts-menu');if(elMenu&&elMenu.classList.contains('apexcharts-menu-open')&&target!=='apexcharts-menu-icon'){elMenu.classList.remove('apexcharts-menu-open');}}if(e.type==='mousedown'){var elAnnos=w.globals.dom.Paper.select('.apexcharts-resizable-element').members;Array.prototype.forEach.call(elAnnos,function(el){// any shape annotations that might have selected by user for resizing, should be deselected
if(!e.target.classList.contains('apexcharts-resizable-element')&&!e.target.classList.contains('svg_select_points')){el.selectize(false);}});}w.globals.clientX=e.type==='touchmove'?e.touches[0].clientX:e.clientX;w.globals.clientY=e.type==='touchmove'?e.touches[0].clientY:e.clientY;}}]);return Events;}();var Localization=/*#__PURE__*/function(){function Localization(ctx){_classCallCheck(this,Localization);this.ctx=ctx;this.w=ctx.w;}_createClass(Localization,[{key:"setCurrentLocaleValues",value:function setCurrentLocaleValues(localeName){var locales=this.w.config.chart.locales;// check if user has specified locales in global Apex variable
// if yes - then extend those with local chart's locale
if(window.Apex.chart&&window.Apex.chart.locales&&window.Apex.chart.locales.length>0){locales=this.w.config.chart.locales.concat(window.Apex.chart.locales);}// find the locale from the array of locales which user has set (either by chart.defaultLocale or by calling setLocale() method.)
var selectedLocale=locales.filter(function(c){return c.name===localeName;})[0];if(selectedLocale){// create a complete locale object by extending defaults so you don't get undefined errors.
var ret=Utils.extend(en,selectedLocale);// store these locale options in global var for ease access
this.w.globals.locale=ret.options;}else{throw new Error('Wrong locale name provided. Please make sure you set the correct locale name in options');}}}]);return Localization;}();var Axes=/*#__PURE__*/function(){function Axes(ctx){_classCallCheck(this,Axes);this.ctx=ctx;this.w=ctx.w;}_createClass(Axes,[{key:"drawAxis",value:function drawAxis(type,xyRatios){var gl=this.w.globals;var cnf=this.w.config;var xAxis=new XAxis(this.ctx);var yAxis=new YAxis(this.ctx);if(gl.axisCharts&&type!=='radar'){var elXaxis,elYaxis;if(gl.isBarHorizontal){elYaxis=yAxis.drawYaxisInversed(0);elXaxis=xAxis.drawXaxisInversed(0);gl.dom.elGraphical.add(elXaxis);gl.dom.elGraphical.add(elYaxis);}else{elXaxis=xAxis.drawXaxis();gl.dom.elGraphical.add(elXaxis);cnf.yaxis.map(function(yaxe,index){if(gl.ignoreYAxisIndexes.indexOf(index)===-1){elYaxis=yAxis.drawYaxis(index);gl.dom.Paper.add(elYaxis);}});}}cnf.yaxis.map(function(yaxe,index){if(gl.ignoreYAxisIndexes.indexOf(index)===-1){yAxis.yAxisTitleRotate(index,yaxe.opposite);}});}}]);return Axes;}();var Crosshairs=/*#__PURE__*/function(){function Crosshairs(ctx){_classCallCheck(this,Crosshairs);this.ctx=ctx;this.w=ctx.w;}_createClass(Crosshairs,[{key:"drawXCrosshairs",value:function drawXCrosshairs(){var w=this.w;var graphics=new Graphics(this.ctx);var filters=new Filters(this.ctx);var crosshairGradient=w.config.xaxis.crosshairs.fill.gradient;var crosshairShadow=w.config.xaxis.crosshairs.dropShadow;var fillType=w.config.xaxis.crosshairs.fill.type;var gradientFrom=crosshairGradient.colorFrom;var gradientTo=crosshairGradient.colorTo;var opacityFrom=crosshairGradient.opacityFrom;var opacityTo=crosshairGradient.opacityTo;var stops=crosshairGradient.stops;var shadow='none';var dropShadow=crosshairShadow.enabled;var shadowLeft=crosshairShadow.left;var shadowTop=crosshairShadow.top;var shadowBlur=crosshairShadow.blur;var shadowColor=crosshairShadow.color;var shadowOpacity=crosshairShadow.opacity;var xcrosshairsFill=w.config.xaxis.crosshairs.fill.color;if(w.config.xaxis.crosshairs.show){if(fillType==='gradient'){xcrosshairsFill=graphics.drawGradient('vertical',gradientFrom,gradientTo,opacityFrom,opacityTo,null,stops,null);}var xcrosshairs=graphics.drawRect();if(w.config.xaxis.crosshairs.width===1){// to prevent drawing 2 lines, convert rect to line
xcrosshairs=graphics.drawLine();}xcrosshairs.attr({"class":'apexcharts-xcrosshairs',x:0,y:0,y2:w.globals.gridHeight,width:Utils.isNumber(w.config.xaxis.crosshairs.width)?w.config.xaxis.crosshairs.width:0,height:w.globals.gridHeight,fill:xcrosshairsFill,filter:shadow,'fill-opacity':w.config.xaxis.crosshairs.opacity,stroke:w.config.xaxis.crosshairs.stroke.color,'stroke-width':w.config.xaxis.crosshairs.stroke.width,'stroke-dasharray':w.config.xaxis.crosshairs.stroke.dashArray});if(dropShadow){xcrosshairs=filters.dropShadow(xcrosshairs,{left:shadowLeft,top:shadowTop,blur:shadowBlur,color:shadowColor,opacity:shadowOpacity});}w.globals.dom.elGraphical.add(xcrosshairs);}}},{key:"drawYCrosshairs",value:function drawYCrosshairs(){var w=this.w;var graphics=new Graphics(this.ctx);var crosshair=w.config.yaxis[0].crosshairs;if(w.config.yaxis[0].crosshairs.show){var ycrosshairs=graphics.drawLine(0,0,w.globals.gridWidth,0,crosshair.stroke.color,crosshair.stroke.dashArray,crosshair.stroke.width);ycrosshairs.attr({"class":'apexcharts-ycrosshairs'});w.globals.dom.elGraphical.add(ycrosshairs);}// draw an invisible crosshair to help in positioning the yaxis tooltip
var ycrosshairsHidden=graphics.drawLine(0,0,w.globals.gridWidth,0,crosshair.stroke.color,0,0);ycrosshairsHidden.attr({"class":'apexcharts-ycrosshairs-hidden'});w.globals.dom.elGraphical.add(ycrosshairsHidden);}}]);return Crosshairs;}();/**
   * ApexCharts Responsive Class to override options for different screen sizes.
   *
   * @module Responsive
   **/var Responsive=/*#__PURE__*/function(){function Responsive(ctx){_classCallCheck(this,Responsive);this.ctx=ctx;this.w=ctx.w;}// the opts parameter if not null has to be set overriding everything
// as the opts is set by user externally
_createClass(Responsive,[{key:"checkResponsiveConfig",value:function checkResponsiveConfig(opts){var _this=this;var w=this.w;var cnf=w.config;// check if responsive config exists
if(cnf.responsive.length===0)return;var res=cnf.responsive.slice();res.sort(function(a,b){return a.breakpoint>b.breakpoint?1:b.breakpoint>a.breakpoint?-1:0;}).reverse();var config=new Config({});var iterateResponsiveOptions=function iterateResponsiveOptions(){var newOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var largestBreakpoint=res[0].breakpoint;var width=window.innerWidth>0?window.innerWidth:screen.width;if(width>largestBreakpoint){var options=CoreUtils.extendArrayProps(config,w.globals.initialConfig);newOptions=Utils.extend(options,newOptions);newOptions=Utils.extend(w.config,newOptions);_this.overrideResponsiveOptions(newOptions);}else{for(var i=0;i<res.length;i++){if(width<res[i].breakpoint){newOptions=CoreUtils.extendArrayProps(config,res[i].options);newOptions=Utils.extend(w.config,newOptions);_this.overrideResponsiveOptions(newOptions);}}}};if(opts){var options=CoreUtils.extendArrayProps(config,opts);options=Utils.extend(w.config,options);options=Utils.extend(options,opts);iterateResponsiveOptions(options);}else{iterateResponsiveOptions({});}}},{key:"overrideResponsiveOptions",value:function overrideResponsiveOptions(newOptions){var newConfig=new Config(newOptions).init({responsiveOverride:true});this.w.config=newConfig;}}]);return Responsive;}();/**
   * ApexCharts Theme Class for setting the colors and palettes.
   *
   * @module Theme
   **/var Theme=/*#__PURE__*/function(){function Theme(ctx){_classCallCheck(this,Theme);this.ctx=ctx;this.colors=[];this.w=ctx.w;var w=this.w;this.isColorFn=false;this.isBarDistributed=w.config.plotOptions.bar.distributed&&(w.config.chart.type==='bar'||w.config.chart.type==='rangeBar');}_createClass(Theme,[{key:"init",value:function init(){this.setDefaultColors();}},{key:"setDefaultColors",value:function setDefaultColors(){var _this=this;var w=this.w;var utils=new Utils();w.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(w.config.theme.mode));if(w.config.colors===undefined){w.globals.colors=this.predefined();}else{w.globals.colors=w.config.colors;// if user provided a function in colors, we need to eval here
if(w.globals.axisCharts&&w.config.chart.type!=='bar'&&Array.isArray(w.config.colors)&&w.config.colors.length>0&&w.config.colors.length===w.config.series.length// colors & series length needs same
){w.globals.colors=w.config.colors.map(function(c,i){if(typeof c==='function'){_this.isColorFn=true;return c({value:w.globals.axisCharts?w.globals.series[i][0]?w.globals.series[i][0]:0:w.globals.series[i],seriesIndex:i,dataPointIndex:i,w:w});}return c;});}}if(w.config.theme.monochrome.enabled){var monoArr=[];var glsCnt=w.globals.series.length;if(this.isBarDistributed){glsCnt=w.globals.series[0].length*w.globals.series.length;}var mainColor=w.config.theme.monochrome.color;var part=1/(glsCnt/w.config.theme.monochrome.shadeIntensity);var shade=w.config.theme.monochrome.shadeTo;var percent=0;for(var gsl=0;gsl<glsCnt;gsl++){var newColor=void 0;if(shade==='dark'){newColor=utils.shadeColor(percent*-1,mainColor);percent=percent+part;}else{newColor=utils.shadeColor(percent,mainColor);percent=percent+part;}monoArr.push(newColor);}w.globals.colors=monoArr.slice();}var defaultColors=w.globals.colors.slice();// if user specfied less colors than no. of series, push the same colors again
this.pushExtraColors(w.globals.colors);var colorTypes=['fill','stroke'];colorTypes.forEach(function(c){if(w.config[c].colors===undefined){w.globals[c].colors=_this.isColorFn?w.config.colors:defaultColors;}else{w.globals[c].colors=w.config[c].colors.slice();}_this.pushExtraColors(w.globals[c].colors);});if(w.config.dataLabels.style.colors===undefined){w.globals.dataLabels.style.colors=defaultColors;}else{w.globals.dataLabels.style.colors=w.config.dataLabels.style.colors.slice();}this.pushExtraColors(w.globals.dataLabels.style.colors,50);if(w.config.plotOptions.radar.polygons.fill.colors===undefined){w.globals.radarPolygons.fill.colors=[w.config.theme.mode==='dark'?'#202D48':'#fff'];}else{w.globals.radarPolygons.fill.colors=w.config.plotOptions.radar.polygons.fill.colors.slice();}this.pushExtraColors(w.globals.radarPolygons.fill.colors,20);// The point colors
if(w.config.markers.colors===undefined){w.globals.markers.colors=defaultColors;}else{w.globals.markers.colors=w.config.markers.colors.slice();}this.pushExtraColors(w.globals.markers.colors);}// When the number of colors provided is less than the number of series, this method
// will push same colors to the list
// params:
// distributed is only valid for distributed column/bar charts
},{key:"pushExtraColors",value:function pushExtraColors(colorSeries,length){var distributed=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var w=this.w;var len=length||w.globals.series.length;if(distributed===null){distributed=this.isBarDistributed||w.config.chart.type==='heatmap'&&w.config.plotOptions.heatmap.colorScale.inverse;}if(distributed){len=w.globals.series[0].length*w.globals.series.length;}if(colorSeries.length<len){var diff=len-colorSeries.length;for(var i=0;i<diff;i++){colorSeries.push(colorSeries[i]);}}}},{key:"updateThemeOptions",value:function updateThemeOptions(options){options.chart=options.chart||{};options.tooltip=options.tooltip||{};var mode=options.theme.mode||'light';var palette=options.theme.palette?options.theme.palette:mode==='dark'?'palette4':'palette1';var foreColor=options.chart.foreColor?options.chart.foreColor:mode==='dark'?'#f6f7f8':'#424242';options.tooltip.theme=mode;options.chart.foreColor=foreColor;options.theme.palette=palette;return options;}},{key:"predefined",value:function predefined(){var palette=this.w.config.theme.palette;// D6E3F8, FCEFEF, DCE0D9, A5978B, EDDDD4, D6E3F8, FEF5EF
switch(palette){case'palette1':this.colors=['#2196f3','#4caf50','#f44336','#ff9800','#9c27b0'];break;case'palette2':this.colors=['#3f51b5','#03a9f4','#4caf50','#f9ce1d','#FF9800'];break;case'palette3':this.colors=['#33b2df','#546E7A','#d4526e','#13d8aa','#A5978B'];break;case'palette4':this.colors=['#4ecdc4','#c7f464','#81D4FA','#fd6a6a','#546E7A'];break;case'palette5':this.colors=['#2b908f','#f9a3a4','#90ee7e','#fa4443','#69d2e7'];break;case'palette6':this.colors=['#449DD1','#F86624','#EA3546','#662E9B','#C5D86D'];break;case'palette7':this.colors=['#D7263D','#1B998B','#2E294E','#F46036','#E2C044'];break;case'palette8':this.colors=['#662E9B','#F86624','#F9C80E','#EA3546','#43BCCD'];break;case'palette9':this.colors=['#5C4742','#A5978B','#8D5B4C','#5A2A27','#C4BBAF'];break;case'palette10':this.colors=['#A300D6','#7D02EB','#5653FE','#2983FF','#00B1F2'];break;default:this.colors=['#2196f3','#00E396','#FEB019','#FF4560','#775DD0'];break;}return this.colors;}}]);return Theme;}();var TitleSubtitle=/*#__PURE__*/function(){function TitleSubtitle(ctx){_classCallCheck(this,TitleSubtitle);this.ctx=ctx;this.w=ctx.w;}_createClass(TitleSubtitle,[{key:"draw",value:function draw(){this.drawTitleSubtitle('title');this.drawTitleSubtitle('subtitle');}},{key:"drawTitleSubtitle",value:function drawTitleSubtitle(type){var w=this.w;var tsConfig=type==='title'?w.config.title:w.config.subtitle;var x=w.globals.svgWidth/2;var y=tsConfig.offsetY;var textAnchor='middle';if(tsConfig.align==='left'){x=10;textAnchor='start';}else if(tsConfig.align==='right'){x=w.globals.svgWidth-10;textAnchor='end';}x=x+tsConfig.offsetX;y=y+parseInt(tsConfig.style.fontSize,10)+tsConfig.margin/2;if(tsConfig.text!==undefined){var graphics=new Graphics(this.ctx);var titleText=graphics.drawText({x:x,y:y,text:tsConfig.text,textAnchor:textAnchor,fontSize:tsConfig.style.fontSize,fontFamily:tsConfig.style.fontFamily,fontWeight:tsConfig.style.fontWeight,foreColor:tsConfig.style.color,opacity:1});titleText.node.setAttribute('class',"apexcharts-".concat(type,"-text"));w.globals.dom.Paper.add(titleText);}}}]);return TitleSubtitle;}();var Helpers$1=/*#__PURE__*/function(){function Helpers(dCtx){_classCallCheck(this,Helpers);this.w=dCtx.w;this.dCtx=dCtx;}/**
     * Get Chart Title/Subtitle Dimensions
     * @memberof Dimensions
     * @return {{width, height}}
     **/_createClass(Helpers,[{key:"getTitleSubtitleCoords",value:function getTitleSubtitleCoords(type){var w=this.w;var width=0;var height=0;var floating=type==='title'?w.config.title.floating:w.config.subtitle.floating;var el=w.globals.dom.baseEl.querySelector(".apexcharts-".concat(type,"-text"));if(el!==null&&!floating){var coord=el.getBoundingClientRect();width=coord.width;height=w.globals.axisCharts?coord.height+5:coord.height;}return{width:width,height:height};}},{key:"getLegendsRect",value:function getLegendsRect(){var w=this.w;var elLegendWrap=w.globals.dom.baseEl.querySelector('.apexcharts-legend');var lgRect=Object.assign({},Utils.getBoundingClientRect(elLegendWrap));if(elLegendWrap!==null&&!w.config.legend.floating&&w.config.legend.show){this.dCtx.lgRect={x:lgRect.x,y:lgRect.y,height:lgRect.height,width:lgRect.height===0?0:lgRect.width};}else{this.dCtx.lgRect={x:0,y:0,height:0,width:0};}// if legend takes up all of the chart space, we need to restrict it.
if(w.config.legend.position==='left'||w.config.legend.position==='right'){if(this.dCtx.lgRect.width*1.5>w.globals.svgWidth){this.dCtx.lgRect.width=w.globals.svgWidth/1.5;}}return this.dCtx.lgRect;}},{key:"getLargestStringFromMultiArr",value:function getLargestStringFromMultiArr(val,arr){var w=this.w;var valArr=val;if(w.globals.isMultiLineX){// if the xaxis labels has multiline texts (array)
var maxArrs=arr.map(function(xl,idx){return Array.isArray(xl)?xl.length:1;});var maxArrLen=Math.max.apply(Math,_toConsumableArray(maxArrs));var maxArrIndex=maxArrs.indexOf(maxArrLen);valArr=arr[maxArrIndex];}return valArr;}}]);return Helpers;}();var DimXAxis=/*#__PURE__*/function(){function DimXAxis(dCtx){_classCallCheck(this,DimXAxis);this.w=dCtx.w;this.dCtx=dCtx;}/**
     * Get X Axis Dimensions
     * @memberof Dimensions
     * @return {{width, height}}
     **/_createClass(DimXAxis,[{key:"getxAxisLabelsCoords",value:function getxAxisLabelsCoords(){var w=this.w;var xaxisLabels=w.globals.labels.slice();if(w.config.xaxis.convertedCatToNumeric&&xaxisLabels.length===0){xaxisLabels=w.globals.categoryLabels;}var rect;if(w.globals.timescaleLabels.length>0){var coords=this.getxAxisTimeScaleLabelsCoords();rect={width:coords.width,height:coords.height};w.globals.rotateXLabels=false;}else{this.dCtx.lgWidthForSideLegends=(w.config.legend.position==='left'||w.config.legend.position==='right')&&!w.config.legend.floating?this.dCtx.lgRect.width:0;// get the longest string from the labels array and also apply label formatter
var xlbFormatter=w.globals.xLabelFormatter;// prevent changing xaxisLabels to avoid issues in multi-yaxes - fix #522
var val=Utils.getLargestStringFromArr(xaxisLabels);var valArr=this.dCtx.dimHelpers.getLargestStringFromMultiArr(val,xaxisLabels);// the labels gets changed for bar charts
if(w.globals.isBarHorizontal){val=w.globals.yAxisScale[0].result.reduce(function(a,b){return a.length>b.length?a:b;},0);valArr=val;}var xFormat=new Formatters(this.dCtx.ctx);var timestamp=val;val=xFormat.xLabelFormat(xlbFormatter,val,timestamp);valArr=xFormat.xLabelFormat(xlbFormatter,valArr,timestamp);if(w.config.xaxis.convertedCatToNumeric&&typeof val==='undefined'||String(val).trim()===''){val='1';valArr=val;}var graphics=new Graphics(this.dCtx.ctx);var xLabelrect=graphics.getTextRects(val,w.config.xaxis.labels.style.fontSize);var xArrLabelrect=xLabelrect;if(val!==valArr){xArrLabelrect=graphics.getTextRects(valArr,w.config.xaxis.labels.style.fontSize);}rect={width:xLabelrect.width>=xArrLabelrect.width?xLabelrect.width:xArrLabelrect.width,height:xLabelrect.height>=xArrLabelrect.height?xLabelrect.height:xArrLabelrect.height};if(rect.width*xaxisLabels.length>w.globals.svgWidth-this.dCtx.lgWidthForSideLegends-this.dCtx.yAxisWidth-this.dCtx.gridPad.left-this.dCtx.gridPad.right&&w.config.xaxis.labels.rotate!==0||w.config.xaxis.labels.rotateAlways){if(!w.globals.isBarHorizontal){w.globals.rotateXLabels=true;var getRotatedTextRects=function getRotatedTextRects(text){return graphics.getTextRects(text,w.config.xaxis.labels.style.fontSize,w.config.xaxis.labels.style.fontFamily,"rotate(".concat(w.config.xaxis.labels.rotate," 0 0)"),false);};xLabelrect=getRotatedTextRects(val);if(val!==valArr){xArrLabelrect=getRotatedTextRects(valArr);}rect.height=(xLabelrect.height>xArrLabelrect.height?xLabelrect.height:xArrLabelrect.height)/1.5;rect.width=xLabelrect.width>xArrLabelrect.width?xLabelrect.width:xArrLabelrect.width;}}else{w.globals.rotateXLabels=false;}}if(!w.config.xaxis.labels.show){rect={width:0,height:0};}return{width:rect.width,height:rect.height};}/**
       * Get X Axis Title Dimensions
       * @memberof Dimensions
       * @return {{width, height}}
       **/},{key:"getxAxisTitleCoords",value:function getxAxisTitleCoords(){var w=this.w;var width=0;var height=0;if(w.config.xaxis.title.text!==undefined){var graphics=new Graphics(this.dCtx.ctx);var rect=graphics.getTextRects(w.config.xaxis.title.text,w.config.xaxis.title.style.fontSize);width=rect.width;height=rect.height;}return{width:width,height:height};}},{key:"getxAxisTimeScaleLabelsCoords",value:function getxAxisTimeScaleLabelsCoords(){var w=this.w;var rect;this.dCtx.timescaleLabels=w.globals.timescaleLabels.slice();var labels=this.dCtx.timescaleLabels.map(function(label){return label.value;});//  get the longest string from the labels array and also apply label formatter to it
var val=labels.reduce(function(a,b){// if undefined, maybe user didn't pass the datetime(x) values
if(typeof a==='undefined'){console.error('You have possibly supplied invalid Date format. Please supply a valid JavaScript Date');return 0;}else{return a.length>b.length?a:b;}},0);var graphics=new Graphics(this.dCtx.ctx);rect=graphics.getTextRects(val,w.config.xaxis.labels.style.fontSize);var totalWidthRotated=rect.width*1.05*labels.length;if(totalWidthRotated>w.globals.gridWidth&&w.config.xaxis.labels.rotate!==0){w.globals.overlappingXLabels=true;}return rect;}// In certain cases, the last labels gets cropped in xaxis.
// Hence, we add some additional padding based on the label length to avoid the last label being cropped or we don't draw it at all
},{key:"additionalPaddingXLabels",value:function additionalPaddingXLabels(xaxisLabelCoords){var _this=this;var w=this.w;var gl=w.globals;var cnf=w.config;var xtype=cnf.xaxis.type;// const predictedGridWidth =
//   gl.svgWidth -
//   this.dCtx.lgWidthForSideLegends -
//   this.dCtx.yAxisWidth -
//   this.dCtx.gridPad.left -
//   this.dCtx.gridPad.right
var lbWidth=xaxisLabelCoords.width;gl.skipLastTimelinelabel=false;gl.skipFirstTimelinelabel=false;var isBarOpposite=w.config.yaxis[0].opposite&&w.globals.isBarHorizontal;var isCollapsed=function isCollapsed(i){return gl.collapsedSeriesIndices.indexOf(i)!==-1;};var rightPad=function rightPad(yaxe){if(_this.dCtx.timescaleLabels&&_this.dCtx.timescaleLabels.length){// for timeline labels, we take the last label and check if it exceeds gridWidth
var firstimescaleLabel=_this.dCtx.timescaleLabels[0];var lastTimescaleLabel=_this.dCtx.timescaleLabels[_this.dCtx.timescaleLabels.length-1];var lastLabelPosition=lastTimescaleLabel.position+lbWidth/1.75-// replace + with - ;
// allow the last label to intersect with the right y axis
_this.dCtx.yAxisWidthRight;var firstLabelPosition=firstimescaleLabel.position-lbWidth/1.75+// remove conditional since the first label is always at the very left
// allow the first label to intersect with the left y axes
_this.dCtx.yAxisWidthLeft;if(lastLabelPosition>gl.gridWidth){gl.skipLastTimelinelabel=true;}if(firstLabelPosition<0){gl.skipFirstTimelinelabel=true;}}else if(xtype==='datetime'){// If user has enabled DateTime, but uses own's formatter
if(_this.dCtx.gridPad.right<lbWidth&&!gl.rotateXLabels){gl.skipLastTimelinelabel=true;}}else if(xtype!=='datetime'){if(_this.dCtx.gridPad.right<lbWidth/2-_this.dCtx.yAxisWidthRight&&!gl.rotateXLabels&&(w.config.xaxis.tickPlacement!=='between'||w.globals.isBarHorizontal)){_this.dCtx.xPadRight=lbWidth/2+1;}}};var padYAxe=function padYAxe(yaxe,i){if(isCollapsed(i))return;if(xtype!=='datetime'){if(_this.dCtx.gridPad.left<lbWidth/2-_this.dCtx.yAxisWidthLeft&&!gl.rotateXLabels&&!cnf.xaxis.labels.trim){_this.dCtx.xPadLeft=lbWidth/2+1;}}rightPad();};cnf.yaxis.forEach(function(yaxe,i){if(isBarOpposite){if(_this.dCtx.gridPad.left<lbWidth){_this.dCtx.xPadLeft=lbWidth/2+1;}_this.dCtx.xPadRight=lbWidth/2+1;}else{padYAxe(yaxe,i);}});}}]);return DimXAxis;}();var DimYAxis=/*#__PURE__*/function(){function DimYAxis(dCtx){_classCallCheck(this,DimYAxis);this.w=dCtx.w;this.dCtx=dCtx;}/**
     * Get Y Axis Dimensions
     * @memberof Dimensions
     * @return {{width, height}}
     **/_createClass(DimYAxis,[{key:"getyAxisLabelsCoords",value:function getyAxisLabelsCoords(){var _this=this;var w=this.w;var width=0;var height=0;var ret=[];var labelPad=10;var axesUtils=new AxesUtils(this.dCtx.ctx);w.config.yaxis.map(function(yaxe,index){if(!axesUtils.isYAxisHidden(index)&&yaxe.labels.show&&w.globals.yAxisScale[index].result.length){var lbFormatter=w.globals.yLabelFormatters[index];// the second parameter -1 is the index of tick which user can use in the formatter
var val=lbFormatter(w.globals.yAxisScale[index].niceMax,{seriesIndex:index,dataPointIndex:-1,w:w});var valArr=val;// if user has specified a custom formatter, and the result is null or empty, we need to discard the formatter and take the value as it is.
if(typeof val==='undefined'||val.length===0){val=w.globals.yAxisScale[index].niceMax;}if(w.globals.isBarHorizontal){labelPad=0;var barYaxisLabels=w.globals.labels.slice();//  get the longest string from the labels array and also apply label formatter to it
val=Utils.getLargestStringFromArr(barYaxisLabels);val=lbFormatter(val,{seriesIndex:index,dataPointIndex:-1,w:w});valArr=_this.dCtx.dimHelpers.getLargestStringFromMultiArr(val,barYaxisLabels);}var graphics=new Graphics(_this.dCtx.ctx);var rect=graphics.getTextRects(val,yaxe.labels.style.fontSize);var arrLabelrect=rect;if(val!==valArr){arrLabelrect=graphics.getTextRects(valArr,yaxe.labels.style.fontSize);}ret.push({width:(arrLabelrect.width>rect.width?arrLabelrect.width:rect.width)+labelPad,height:arrLabelrect.height>rect.height?arrLabelrect.height:rect.height});}else{ret.push({width:width,height:height});}});return ret;}/**
       * Get Y Axis Dimensions
       * @memberof Dimensions
       * @return {{width, height}}
       **/},{key:"getyAxisTitleCoords",value:function getyAxisTitleCoords(){var _this2=this;var w=this.w;var ret=[];w.config.yaxis.map(function(yaxe,index){if(yaxe.show&&yaxe.title.text!==undefined){var graphics=new Graphics(_this2.dCtx.ctx);var rect=graphics.getTextRects(yaxe.title.text,yaxe.title.style.fontSize,yaxe.title.style.fontFamily,'rotate(-90 0 0)',false);ret.push({width:rect.width,height:rect.height});}else{ret.push({width:0,height:0});}});return ret;}},{key:"getTotalYAxisWidth",value:function getTotalYAxisWidth(){var w=this.w;var yAxisWidth=0;var yAxisWidthLeft=0;var yAxisWidthRight=0;var padding=w.globals.yAxisScale.length>1?10:0;var axesUtils=new AxesUtils(this.dCtx.ctx);var isHiddenYAxis=function isHiddenYAxis(index){return w.globals.ignoreYAxisIndexes.indexOf(index)>-1;};var padForLabelTitle=function padForLabelTitle(coord,index){var floating=w.config.yaxis[index].floating;var width=0;if(coord.width>0&&!floating){width=coord.width+padding;if(isHiddenYAxis(index)){width=width-coord.width-padding;}}else{width=floating||axesUtils.isYAxisHidden(index)?0:5;}w.config.yaxis[index].opposite?yAxisWidthRight=yAxisWidthRight+width:yAxisWidthLeft=yAxisWidthLeft+width;yAxisWidth=yAxisWidth+width;};w.globals.yLabelsCoords.map(function(yLabelCoord,index){padForLabelTitle(yLabelCoord,index);});w.globals.yTitleCoords.map(function(yTitleCoord,index){padForLabelTitle(yTitleCoord,index);});if(w.globals.isBarHorizontal){yAxisWidth=w.globals.yLabelsCoords[0].width+w.globals.yTitleCoords[0].width+15;}this.dCtx.yAxisWidthLeft=yAxisWidthLeft;this.dCtx.yAxisWidthRight=yAxisWidthRight;return yAxisWidth;}}]);return DimYAxis;}();var DimGrid=/*#__PURE__*/function(){function DimGrid(dCtx){_classCallCheck(this,DimGrid);this.w=dCtx.w;this.dCtx=dCtx;}_createClass(DimGrid,[{key:"gridPadForColumnsInNumericAxis",value:function gridPadForColumnsInNumericAxis(gridWidth){var w=this.w;if(w.globals.noData||w.globals.allSeriesCollapsed){return 0;}var type=w.config.chart.type;var barWidth=0;var seriesLen=type==='bar'||type==='rangeBar'?w.config.series.length:1;if(w.globals.comboBarCount>0){seriesLen=w.globals.comboBarCount;}w.globals.collapsedSeries.forEach(function(c){if(c.type==='bar'||c.type==='rangeBar'){seriesLen=seriesLen-1;}});if(w.config.chart.stacked){seriesLen=1;}var hasBar=type==='bar'||type==='rangeBar'||w.globals.comboBarCount>0;if(hasBar&&w.globals.isXNumeric&&!w.globals.isBarHorizontal&&seriesLen>0){var xRatio=0;var xRange=Math.abs(w.globals.initialMaxX-w.globals.initialMinX);if(xRange<=3){xRange=w.globals.dataPoints;}xRatio=xRange/gridWidth;var xDivision;// max barwidth should be equal to minXDiff to avoid overlap
if(w.globals.minXDiff&&w.globals.minXDiff/xRatio>0){xDivision=w.globals.minXDiff/xRatio;}barWidth=xDivision/seriesLen*parseInt(w.config.plotOptions.bar.columnWidth,10)/100;if(barWidth<1){barWidth=1;}barWidth=barWidth/(seriesLen>1?1:1.5)+5;w.globals.barPadForNumericAxis=barWidth;}return barWidth;}},{key:"gridPadFortitleSubtitle",value:function gridPadFortitleSubtitle(){var _this=this;var w=this.w;var gl=w.globals;var gridShrinkOffset=this.dCtx.isSparkline||!w.globals.axisCharts?0:10;var titleSubtitle=['title','subtitle'];titleSubtitle.forEach(function(t){if(w.config[t].text!==undefined){gridShrinkOffset+=w.config[t].margin;}else{gridShrinkOffset+=_this.dCtx.isSparkline||!w.globals.axisCharts?0:5;}});var nonAxisOrMultiSeriesCharts=w.config.series.length>1||!w.globals.axisCharts||w.config.legend.showForSingleSeries;if(w.config.legend.show&&w.config.legend.position==='bottom'&&!w.config.legend.floating&&nonAxisOrMultiSeriesCharts){gridShrinkOffset+=10;}var titleCoords=this.dCtx.dimHelpers.getTitleSubtitleCoords('title');var subtitleCoords=this.dCtx.dimHelpers.getTitleSubtitleCoords('subtitle');gl.gridHeight=gl.gridHeight-titleCoords.height-subtitleCoords.height-gridShrinkOffset;gl.translateY=gl.translateY+titleCoords.height+subtitleCoords.height+gridShrinkOffset;}},{key:"setGridXPosForDualYAxis",value:function setGridXPosForDualYAxis(yTitleCoords,yaxisLabelCoords){var w=this.w;var axesUtils=new AxesUtils(this.dCtx.ctx);w.config.yaxis.map(function(yaxe,index){if(w.globals.ignoreYAxisIndexes.indexOf(index)===-1&&!yaxe.floating&&!axesUtils.isYAxisHidden(index)){if(yaxe.opposite){w.globals.translateX=w.globals.translateX-(yaxisLabelCoords[index].width+yTitleCoords[index].width)-parseInt(w.config.yaxis[index].labels.style.fontSize,10)/1.2-12;}}});}}]);return DimGrid;}();/**
   * ApexCharts Dimensions Class for calculating rects of all elements that are drawn and will be drawn.
   *
   * @module Dimensions
   **/var Dimensions=/*#__PURE__*/function(){function Dimensions(ctx){_classCallCheck(this,Dimensions);this.ctx=ctx;this.w=ctx.w;this.lgRect={};this.yAxisWidth=0;this.yAxisWidthLeft=0;this.yAxisWidthRight=0;this.xAxisHeight=0;this.isSparkline=this.w.config.chart.sparkline.enabled;this.dimHelpers=new Helpers$1(this);this.dimYAxis=new DimYAxis(this);this.dimXAxis=new DimXAxis(this);this.dimGrid=new DimGrid(this);this.lgWidthForSideLegends=0;this.gridPad=this.w.config.grid.padding;this.xPadRight=0;this.xPadLeft=0;}/**
     * @memberof Dimensions
     * @param {object} w - chart context
     **/_createClass(Dimensions,[{key:"plotCoords",value:function plotCoords(){var w=this.w;var gl=w.globals;this.lgRect=this.dimHelpers.getLegendsRect();if(gl.axisCharts){// for line / area / scatter / column
this.setDimensionsForAxisCharts();}else{// for pie / donuts / circle
this.setDimensionsForNonAxisCharts();}this.dimGrid.gridPadFortitleSubtitle();// after calculating everything, apply padding set by user
gl.gridHeight=gl.gridHeight-this.gridPad.top-this.gridPad.bottom;gl.gridWidth=gl.gridWidth-this.gridPad.left-this.gridPad.right-this.xPadRight-this.xPadLeft;var barWidth=this.dimGrid.gridPadForColumnsInNumericAxis(gl.gridWidth);gl.gridWidth=gl.gridWidth-barWidth*2;gl.translateX=gl.translateX+this.gridPad.left+this.xPadLeft+(barWidth>0?barWidth+4:0);gl.translateY=gl.translateY+this.gridPad.top;}},{key:"setDimensionsForAxisCharts",value:function setDimensionsForAxisCharts(){var _this=this;var w=this.w;var gl=w.globals;var yaxisLabelCoords=this.dimYAxis.getyAxisLabelsCoords();var yTitleCoords=this.dimYAxis.getyAxisTitleCoords();w.globals.yLabelsCoords=[];w.globals.yTitleCoords=[];w.config.yaxis.map(function(yaxe,index){// store the labels and titles coords in global vars
w.globals.yLabelsCoords.push({width:yaxisLabelCoords[index].width,index:index});w.globals.yTitleCoords.push({width:yTitleCoords[index].width,index:index});});this.yAxisWidth=this.dimYAxis.getTotalYAxisWidth();var xaxisLabelCoords=this.dimXAxis.getxAxisLabelsCoords();var xtitleCoords=this.dimXAxis.getxAxisTitleCoords();this.conditionalChecksForAxisCoords(xaxisLabelCoords,xtitleCoords);gl.translateXAxisY=w.globals.rotateXLabels?this.xAxisHeight/8:-4;gl.translateXAxisX=w.globals.rotateXLabels&&w.globals.isXNumeric&&w.config.xaxis.labels.rotate<=-45?-this.xAxisWidth/4:0;if(w.globals.isBarHorizontal){gl.rotateXLabels=false;gl.translateXAxisY=-1*(parseInt(w.config.xaxis.labels.style.fontSize,10)/1.5);}gl.translateXAxisY=gl.translateXAxisY+w.config.xaxis.labels.offsetY;gl.translateXAxisX=gl.translateXAxisX+w.config.xaxis.labels.offsetX;var yAxisWidth=this.yAxisWidth;var xAxisHeight=this.xAxisHeight;gl.xAxisLabelsHeight=this.xAxisHeight;gl.xAxisHeight=this.xAxisHeight;var translateY=10;if(w.config.chart.type==='radar'||this.isSparkline){yAxisWidth=0;xAxisHeight=gl.goldenPadding;}if(this.isSparkline){this.lgRect={height:0,width:0};xAxisHeight=0;yAxisWidth=0;translateY=0;}this.dimXAxis.additionalPaddingXLabels(xaxisLabelCoords);var legendTopBottom=function legendTopBottom(){gl.translateX=yAxisWidth;gl.gridHeight=gl.svgHeight-_this.lgRect.height-xAxisHeight-(!_this.isSparkline?w.globals.rotateXLabels?10:15:0);gl.gridWidth=gl.svgWidth-yAxisWidth;};if(w.config.xaxis.position==='top')translateY=gl.xAxisHeight-w.config.xaxis.axisTicks.height-5;switch(w.config.legend.position){case'bottom':gl.translateY=translateY;legendTopBottom();break;case'top':gl.translateY=this.lgRect.height+translateY;legendTopBottom();break;case'left':gl.translateY=translateY;gl.translateX=this.lgRect.width+yAxisWidth;gl.gridHeight=gl.svgHeight-xAxisHeight-12;gl.gridWidth=gl.svgWidth-this.lgRect.width-yAxisWidth;break;case'right':gl.translateY=translateY;gl.translateX=yAxisWidth;gl.gridHeight=gl.svgHeight-xAxisHeight-12;gl.gridWidth=gl.svgWidth-this.lgRect.width-yAxisWidth-5;break;default:throw new Error('Legend position not supported');}this.dimGrid.setGridXPosForDualYAxis(yTitleCoords,yaxisLabelCoords);// after drawing everything, set the Y axis positions
var objyAxis=new YAxis(this.ctx);objyAxis.setYAxisXPosition(yaxisLabelCoords,yTitleCoords);}},{key:"setDimensionsForNonAxisCharts",value:function setDimensionsForNonAxisCharts(){var w=this.w;var gl=w.globals;var cnf=w.config;var xPad=0;if(w.config.legend.show&&!w.config.legend.floating){xPad=20;}var type=cnf.chart.type==='pie'||cnf.chart.type==='donut'?'pie':'radialBar';var offY=cnf.plotOptions[type].offsetY;var offX=cnf.plotOptions[type].offsetX;if(!cnf.legend.show||cnf.legend.floating){gl.gridHeight=gl.svgHeight-cnf.grid.padding.left+cnf.grid.padding.right;gl.gridWidth=gl.gridHeight;gl.translateY=offY;gl.translateX=offX+(gl.svgWidth-gl.gridWidth)/2;return;}switch(cnf.legend.position){case'bottom':gl.gridHeight=gl.svgHeight-this.lgRect.height-gl.goldenPadding;gl.gridWidth=gl.gridHeight;gl.translateY=offY-10;gl.translateX=offX+(gl.svgWidth-gl.gridWidth)/2;break;case'top':gl.gridHeight=gl.svgHeight-this.lgRect.height-gl.goldenPadding;gl.gridWidth=gl.gridHeight;gl.translateY=this.lgRect.height+offY+10;gl.translateX=offX+(gl.svgWidth-gl.gridWidth)/2;break;case'left':gl.gridWidth=gl.svgWidth-this.lgRect.width-xPad;gl.gridHeight=cnf.chart.height!=='auto'?gl.svgHeight:gl.gridWidth;gl.translateY=offY;gl.translateX=offX+this.lgRect.width+xPad;break;case'right':gl.gridWidth=gl.svgWidth-this.lgRect.width-xPad-5;gl.gridHeight=cnf.chart.height!=='auto'?gl.svgHeight:gl.gridWidth;gl.translateY=offY;gl.translateX=offX+10;break;default:throw new Error('Legend position not supported');}}},{key:"conditionalChecksForAxisCoords",value:function conditionalChecksForAxisCoords(xaxisLabelCoords,xtitleCoords){var w=this.w;this.xAxisHeight=(xaxisLabelCoords.height+xtitleCoords.height)*(w.globals.isMultiLineX?1.2:w.globals.LINE_HEIGHT_RATIO)+(w.globals.rotateXLabels?22:10);this.xAxisWidth=xaxisLabelCoords.width;if(this.xAxisHeight-xtitleCoords.height>w.config.xaxis.labels.maxHeight){this.xAxisHeight=w.config.xaxis.labels.maxHeight;}if(w.config.xaxis.labels.minHeight&&this.xAxisHeight<w.config.xaxis.labels.minHeight){this.xAxisHeight=w.config.xaxis.labels.minHeight;}if(w.config.xaxis.floating){this.xAxisHeight=0;}var minYAxisWidth=0;var maxYAxisWidth=0;w.config.yaxis.forEach(function(y){minYAxisWidth+=y.labels.minWidth;maxYAxisWidth+=y.labels.maxWidth;});if(this.yAxisWidth<minYAxisWidth){this.yAxisWidth=minYAxisWidth;}if(this.yAxisWidth>maxYAxisWidth){this.yAxisWidth=maxYAxisWidth;}}}]);return Dimensions;}();/**
   * ApexCharts Pie Class for drawing Pie / Donut Charts.
   * @module Pie
   **/var Pie=/*#__PURE__*/function(){function Pie(ctx){_classCallCheck(this,Pie);this.ctx=ctx;this.w=ctx.w;this.chartType=this.w.config.chart.type;this.initialAnim=this.w.config.chart.animations.enabled;this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled;this.animBeginArr=[0];this.animDur=0;this.donutDataLabels=this.w.config.plotOptions.pie.donut.labels;var w=this.w;this.lineColorArr=w.globals.stroke.colors!==undefined?w.globals.stroke.colors:w.globals.colors;this.defaultSize=w.globals.svgHeight<w.globals.svgWidth?w.globals.gridHeight:w.globals.gridWidth;this.centerY=this.defaultSize/2;this.centerX=w.globals.gridWidth/2;this.fullAngle=360;w.globals.radialSize=this.defaultSize/2.05-w.config.stroke.width-(!w.config.chart.sparkline.enabled?w.config.chart.dropShadow.blur:0);this.donutSize=w.globals.radialSize*parseInt(w.config.plotOptions.pie.donut.size,10)/100;this.sliceLabels=[];this.prevSectorAngleArr=[];// for dynamic animations
}_createClass(Pie,[{key:"draw",value:function draw(series){var self=this;var w=this.w;var graphics=new Graphics(this.ctx);var ret=graphics.group({"class":'apexcharts-pie'});if(w.globals.noData)return ret;var total=0;for(var k=0;k<series.length;k++){// CALCULATE THE TOTAL
total+=Utils.negToZero(series[k]);}var sectorAngleArr=[];// el to which series will be drawn
var elSeries=graphics.group();// prevent division by zero error if there is no data
if(total===0){total=0.00001;}for(var i=0;i<series.length;i++){// CALCULATE THE ANGLES
var angle=this.fullAngle*Utils.negToZero(series[i])/total;sectorAngleArr.push(angle);}if(w.globals.dataChanged){var prevTotal=0;for(var _k=0;_k<w.globals.previousPaths.length;_k++){// CALCULATE THE PREV TOTAL
prevTotal+=Utils.negToZero(w.globals.previousPaths[_k]);}var previousAngle;for(var _i=0;_i<w.globals.previousPaths.length;_i++){// CALCULATE THE PREVIOUS ANGLES
previousAngle=this.fullAngle*Utils.negToZero(w.globals.previousPaths[_i])/prevTotal;this.prevSectorAngleArr.push(previousAngle);}}// on small chart size after few count of resizes browser window donutSize can be negative
if(this.donutSize<0){this.donutSize=0;}var scaleSize=w.config.plotOptions.pie.customScale;var halfW=w.globals.gridWidth/2;var halfH=w.globals.gridHeight/2;var translateX=halfW-w.globals.gridWidth/2*scaleSize;var translateY=halfH-w.globals.gridHeight/2*scaleSize;if(w.config.chart.type==='donut'){// draw the inner circle and add some text to it
var circle=graphics.drawCircle(this.donutSize);circle.attr({cx:this.centerX,cy:this.centerY,fill:w.config.plotOptions.pie.donut.background?w.config.plotOptions.pie.donut.background:'transparent'});elSeries.add(circle);}var elG=self.drawArcs(sectorAngleArr,series);// add slice dataLabels at the end
this.sliceLabels.forEach(function(s){elG.add(s);});elSeries.attr({transform:"translate(".concat(translateX,", ").concat(translateY,") scale(").concat(scaleSize,")")});elSeries.add(elG);ret.add(elSeries);if(this.donutDataLabels.show){var dataLabels=this.renderInnerDataLabels(this.donutDataLabels,{hollowSize:this.donutSize,centerX:this.centerX,centerY:this.centerY,opacity:this.donutDataLabels.show,translateX:translateX,translateY:translateY});ret.add(dataLabels);}return ret;}// core function for drawing pie arcs
},{key:"drawArcs",value:function drawArcs(sectorAngleArr,series){var w=this.w;var filters=new Filters(this.ctx);var graphics=new Graphics(this.ctx);var fill=new Fill(this.ctx);var g=graphics.group({"class":'apexcharts-slices'});var startAngle=0;var prevStartAngle=0;var endAngle=0;var prevEndAngle=0;this.strokeWidth=w.config.stroke.show?w.config.stroke.width:0;for(var i=0;i<sectorAngleArr.length;i++){var elPieArc=graphics.group({"class":"apexcharts-series apexcharts-pie-series",seriesName:Utils.escapeString(w.globals.seriesNames[i]),rel:i+1,'data:realIndex':i});g.add(elPieArc);startAngle=endAngle;prevStartAngle=prevEndAngle;endAngle=startAngle+sectorAngleArr[i];prevEndAngle=prevStartAngle+this.prevSectorAngleArr[i];var angle=endAngle-startAngle;var pathFill=fill.fillPath({seriesNumber:i,size:w.globals.radialSize,value:series[i]});// additionaly, pass size for gradient drawing in the fillPath function
var path=this.getChangedPath(prevStartAngle,prevEndAngle);var elPath=graphics.drawPath({d:path,stroke:this.lineColorArr instanceof Array?this.lineColorArr[i]:this.lineColorArr,strokeWidth:0,fill:pathFill,fillOpacity:w.config.fill.opacity,classes:"apexcharts-pie-area apexcharts-".concat(w.config.chart.type,"-slice-").concat(i)});elPath.attr({index:0,j:i});if(w.config.chart.dropShadow.enabled){var shadow=w.config.chart.dropShadow;filters.dropShadow(elPath,shadow,i);}this.addListeners(elPath,this.donutDataLabels);Graphics.setAttrs(elPath.node,{'data:angle':angle,'data:startAngle':startAngle,'data:strokeWidth':this.strokeWidth,'data:value':series[i]});var labelPosition={x:0,y:0};if(w.config.chart.type==='pie'){labelPosition=Utils.polarToCartesian(this.centerX,this.centerY,w.globals.radialSize/1.25+w.config.plotOptions.pie.dataLabels.offset,startAngle+(endAngle-startAngle)/2);}else if(w.config.chart.type==='donut'){labelPosition=Utils.polarToCartesian(this.centerX,this.centerY,(w.globals.radialSize+this.donutSize)/2+w.config.plotOptions.pie.dataLabels.offset,startAngle+(endAngle-startAngle)/2);}elPieArc.add(elPath);// Animation code starts
var dur=0;if(this.initialAnim&&!w.globals.resized&&!w.globals.dataChanged){dur=(endAngle-startAngle)/this.fullAngle*w.config.chart.animations.speed;if(dur===0)dur=1;this.animDur=dur+this.animDur;this.animBeginArr.push(this.animDur);}else{this.animBeginArr.push(0);}if(this.dynamicAnim&&w.globals.dataChanged){this.animatePaths(elPath,{size:w.globals.radialSize,endAngle:endAngle,startAngle:startAngle,prevStartAngle:prevStartAngle,prevEndAngle:prevEndAngle,animateStartingPos:true,i:i,animBeginArr:this.animBeginArr,shouldSetPrevPaths:true,dur:w.config.chart.animations.dynamicAnimation.speed});}else{this.animatePaths(elPath,{size:w.globals.radialSize,endAngle:endAngle,startAngle:startAngle,i:i,totalItems:sectorAngleArr.length-1,animBeginArr:this.animBeginArr,dur:dur});}// animation code ends
if(w.config.plotOptions.pie.expandOnClick){elPath.click(this.pieClicked.bind(this,i));}if(w.config.dataLabels.enabled){var xPos=labelPosition.x;var yPos=labelPosition.y;var text=100*(endAngle-startAngle)/360+'%';if(angle!==0&&w.config.plotOptions.pie.dataLabels.minAngleToShowLabel<sectorAngleArr[i]){var formatter=w.config.dataLabels.formatter;if(formatter!==undefined){text=formatter(w.globals.seriesPercent[i][0],{seriesIndex:i,w:w});}var foreColor=w.globals.dataLabels.style.colors[i];var elPieLabel=graphics.drawText({x:xPos,y:yPos,text:text,textAnchor:'middle',fontSize:w.config.dataLabels.style.fontSize,fontFamily:w.config.dataLabels.style.fontFamily,fontWeight:w.config.dataLabels.style.fontWeight,foreColor:foreColor});if(w.config.dataLabels.dropShadow.enabled){var textShadow=w.config.dataLabels.dropShadow;filters.dropShadow(elPieLabel,textShadow);}elPieLabel.node.classList.add('apexcharts-pie-label');if(w.config.chart.animations.animate&&w.globals.resized===false){elPieLabel.node.classList.add('apexcharts-pie-label-delay');elPieLabel.node.style.animationDelay=w.config.chart.animations.speed/940+'s';}this.sliceLabels.push(elPieLabel);}}}return g;}},{key:"addListeners",value:function addListeners(elPath,dataLabels){var graphics=new Graphics(this.ctx);// append filters on mouseenter and mouseleave
elPath.node.addEventListener('mouseenter',graphics.pathMouseEnter.bind(this,elPath));elPath.node.addEventListener('mouseleave',graphics.pathMouseLeave.bind(this,elPath));elPath.node.addEventListener('mouseleave',this.revertDataLabelsInner.bind(this,elPath.node,dataLabels));elPath.node.addEventListener('mousedown',graphics.pathMouseDown.bind(this,elPath));if(!this.donutDataLabels.total.showAlways){elPath.node.addEventListener('mouseenter',this.printDataLabelsInner.bind(this,elPath.node,dataLabels));elPath.node.addEventListener('mousedown',this.printDataLabelsInner.bind(this,elPath.node,dataLabels));}}// This function can be used for other circle charts too
},{key:"animatePaths",value:function animatePaths(el,opts){var w=this.w;var me=this;var angle=opts.endAngle-opts.startAngle;var prevAngle=angle;var fromStartAngle=opts.startAngle;var toStartAngle=opts.startAngle;if(opts.prevStartAngle!==undefined&&opts.prevEndAngle!==undefined){fromStartAngle=opts.prevEndAngle;prevAngle=opts.prevEndAngle-opts.prevStartAngle;}if(opts.i===w.config.series.length-1){// some adjustments for the last overlapping paths
if(angle+toStartAngle>this.fullAngle){opts.endAngle=opts.endAngle-(angle+toStartAngle);}else if(angle+toStartAngle<this.fullAngle){opts.endAngle=opts.endAngle+(this.fullAngle-(angle+toStartAngle));}}if(angle===this.fullAngle)angle=this.fullAngle-0.01;me.animateArc(el,fromStartAngle,toStartAngle,angle,prevAngle,opts);}},{key:"animateArc",value:function animateArc(el,fromStartAngle,toStartAngle,angle,prevAngle,opts){var me=this;var w=this.w;var animations=new Animations(this.ctx);var size=opts.size;var path;if(isNaN(fromStartAngle)||isNaN(prevAngle)){fromStartAngle=toStartAngle;prevAngle=angle;opts.dur=0;}var currAngle=angle;var startAngle=toStartAngle;var fromAngle=fromStartAngle-toStartAngle;if(w.globals.dataChanged&&opts.shouldSetPrevPaths){// to avoid flicker when updating, set prev path first and then animate from there
if(opts.prevEndAngle){path=me.getPiePath({me:me,startAngle:opts.prevStartAngle,angle:opts.prevEndAngle-opts.prevStartAngle,size:size});el.attr({d:path});}}if(opts.dur!==0){el.animate(opts.dur,w.globals.easing,opts.animBeginArr[opts.i]).afterAll(function(){if(w.config.chart.type==='pie'||w.config.chart.type==='donut'){this.animate(w.config.chart.animations.dynamicAnimation.speed).attr({'stroke-width':me.strokeWidth});}if(opts.i===w.config.series.length-1){animations.animationCompleted(el);}}).during(function(pos){currAngle=fromAngle+(angle-fromAngle)*pos;if(opts.animateStartingPos){currAngle=prevAngle+(angle-prevAngle)*pos;startAngle=fromStartAngle-prevAngle+(toStartAngle-(fromStartAngle-prevAngle))*pos;}path=me.getPiePath({me:me,startAngle:startAngle,angle:currAngle,size:size});el.node.setAttribute('data:pathOrig',path);el.attr({d:path});});}else{path=me.getPiePath({me:me,startAngle:startAngle,angle:angle,size:size});if(!opts.isTrack){w.globals.animationEnded=true;}el.node.setAttribute('data:pathOrig',path);el.attr({d:path,'stroke-width':me.strokeWidth});}}},{key:"pieClicked",value:function pieClicked(i){var w=this.w;var me=this;var path;var size=me.w.globals.radialSize+(w.config.plotOptions.pie.expandOnClick?4:0);var elPath=w.globals.dom.Paper.select(".apexcharts-".concat(w.config.chart.type.toLowerCase(),"-slice-").concat(i)).members[0];if(elPath.attr('data:pieClicked')==='true'){elPath.attr({'data:pieClicked':'false'});this.revertDataLabelsInner(elPath.node,this.donutDataLabels);var origPath=elPath.attr('data:pathOrig');elPath.attr({d:origPath});return;}else{// reset all elems
var allEls=w.globals.dom.baseEl.getElementsByClassName('apexcharts-pie-area');Array.prototype.forEach.call(allEls,function(pieSlice){pieSlice.setAttribute('data:pieClicked','false');var origPath=pieSlice.getAttribute('data:pathOrig');pieSlice.setAttribute('d',origPath);});elPath.attr('data:pieClicked','true');}var startAngle=parseInt(elPath.attr('data:startAngle'),10);var angle=parseInt(elPath.attr('data:angle'),10);path=me.getPiePath({me:me,startAngle:startAngle,angle:angle,size:size});if(angle===360)return;elPath.plot(path);}},{key:"getChangedPath",value:function getChangedPath(prevStartAngle,prevEndAngle){var path='';if(this.dynamicAnim&&this.w.globals.dataChanged){path=this.getPiePath({me:this,startAngle:prevStartAngle,angle:prevEndAngle-prevStartAngle,size:this.size});}return path;}},{key:"getPiePath",value:function getPiePath(_ref){var me=_ref.me,startAngle=_ref.startAngle,angle=_ref.angle,size=_ref.size;var w=this.w;var path;var startDeg=startAngle;var startRadians=Math.PI*(startDeg-90)/180;var endDeg=angle+startAngle;if(Math.ceil(endDeg)>=360)endDeg=359.99;var endRadians=Math.PI*(endDeg-90)/180;var x1=me.centerX+size*Math.cos(startRadians);var y1=me.centerY+size*Math.sin(startRadians);var x2=me.centerX+size*Math.cos(endRadians);var y2=me.centerY+size*Math.sin(endRadians);var startInner=Utils.polarToCartesian(me.centerX,me.centerY,me.donutSize,endDeg);var endInner=Utils.polarToCartesian(me.centerX,me.centerY,me.donutSize,startDeg);var largeArc=angle>180?1:0;var pathBeginning=['M',x1,y1,'A',size,size,0,largeArc,1,x2,y2];if(w.config.chart.type==='donut'){path=[].concat(pathBeginning,['L',startInner.x,startInner.y,'A',me.donutSize,me.donutSize,0,largeArc,0,endInner.x,endInner.y,'L',x1,y1,'z']).join(' ');}else if(w.config.chart.type==='pie'){path=[].concat(pathBeginning,['L',me.centerX,me.centerY,'L',x1,y1]).join(' ');}else{path=[].concat(pathBeginning).join(' ');}return path;}},{key:"renderInnerDataLabels",value:function renderInnerDataLabels(dataLabelsConfig,opts){var w=this.w;var graphics=new Graphics(this.ctx);var g=graphics.group({"class":'apexcharts-datalabels-group',transform:"translate(".concat(opts.translateX?opts.translateX:0,", ").concat(opts.translateY?opts.translateY:0,") scale(").concat(w.config.plotOptions.pie.customScale,")")});var showTotal=dataLabelsConfig.total.show;g.node.style.opacity=opts.opacity;var x=opts.centerX;var y=opts.centerY;var labelColor,valueColor;if(dataLabelsConfig.name.color===undefined){labelColor=w.globals.colors[0];}else{labelColor=dataLabelsConfig.name.color;}var labelFontSize=dataLabelsConfig.name.fontSize;var labelFontFamily=dataLabelsConfig.name.fontFamily;var labelFontWeight=dataLabelsConfig.value.fontWeight;if(dataLabelsConfig.value.color===undefined){valueColor=w.config.chart.foreColor;}else{valueColor=dataLabelsConfig.value.color;}var lbFormatter=dataLabelsConfig.value.formatter;var val='';var name='';if(showTotal){labelColor=dataLabelsConfig.total.color;labelFontSize=dataLabelsConfig.total.fontSize;labelFontFamily=dataLabelsConfig.total.fontFamily;labelFontWeight=dataLabelsConfig.total.fontWeight;name=dataLabelsConfig.total.label;val=dataLabelsConfig.total.formatter(w);}else{if(w.globals.series.length===1){val=lbFormatter(w.globals.series[0],w);name=w.globals.seriesNames[0];}}if(name){name=dataLabelsConfig.name.formatter(name,dataLabelsConfig.total.show,w);}if(dataLabelsConfig.name.show){var elLabel=graphics.drawText({x:x,y:y+parseFloat(dataLabelsConfig.name.offsetY),text:name,textAnchor:'middle',foreColor:labelColor,fontSize:labelFontSize,fontWeight:labelFontWeight,fontFamily:labelFontFamily});elLabel.node.classList.add('apexcharts-datalabel-label');g.add(elLabel);}if(dataLabelsConfig.value.show){var valOffset=dataLabelsConfig.name.show?parseFloat(dataLabelsConfig.value.offsetY)+16:dataLabelsConfig.value.offsetY;var elValue=graphics.drawText({x:x,y:y+valOffset,text:val,textAnchor:'middle',foreColor:valueColor,fontWeight:dataLabelsConfig.value.fontWeight,fontSize:dataLabelsConfig.value.fontSize,fontFamily:dataLabelsConfig.value.fontFamily});elValue.node.classList.add('apexcharts-datalabel-value');g.add(elValue);}// for a multi-series circle chart, we need to show total value instead of first series labels
return g;}/**
       *
       * @param {string} name - The name of the series
       * @param {string} val - The value of that series
       * @param {object} el - Optional el (indicates which series was hovered/clicked). If this param is not present, means we need to show total
       */},{key:"printInnerLabels",value:function printInnerLabels(labelsConfig,name,val,el){var w=this.w;var labelColor;if(el){if(labelsConfig.name.color===undefined){labelColor=w.globals.colors[parseInt(el.parentNode.getAttribute('rel'),10)-1];}else{labelColor=labelsConfig.name.color;}}else{if(w.globals.series.length>1&&labelsConfig.total.show){labelColor=labelsConfig.total.color;}}var elLabel=w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-label');var elValue=w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-value');var lbFormatter=labelsConfig.value.formatter;val=lbFormatter(val,w);// we need to show Total Val - so get the formatter of it
if(!el&&typeof labelsConfig.total.formatter==='function'){val=labelsConfig.total.formatter(w);}var isTotal=name===labelsConfig.total.label;name=labelsConfig.name.formatter(name,isTotal,w);if(elLabel!==null){elLabel.textContent=name;}if(elValue!==null){elValue.textContent=val;}if(elLabel!==null){elLabel.style.fill=labelColor;}}},{key:"printDataLabelsInner",value:function printDataLabelsInner(el,dataLabelsConfig){var w=this.w;var val=el.getAttribute('data:value');var name=w.globals.seriesNames[parseInt(el.parentNode.getAttribute('rel'),10)-1];if(w.globals.series.length>1){this.printInnerLabels(dataLabelsConfig,name,val,el);}var dataLabelsGroup=w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');if(dataLabelsGroup!==null){dataLabelsGroup.style.opacity=1;}}},{key:"revertDataLabelsInner",value:function revertDataLabelsInner(elem,dataLabelsConfig,event){var _this=this;var w=this.w;var dataLabelsGroup=w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');var sliceOut=false;var slices=w.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");var selectSlice=function selectSlice(_ref2){var makeSliceOut=_ref2.makeSliceOut,printLabel=_ref2.printLabel;Array.prototype.forEach.call(slices,function(s){if(s.getAttribute('data:pieClicked')==='true'){if(makeSliceOut){sliceOut=true;}if(printLabel){_this.printDataLabelsInner(s,dataLabelsConfig);}}});};selectSlice({makeSliceOut:true,printLabel:false});if(dataLabelsConfig.total.show&&w.globals.series.length>1){if(sliceOut&&!dataLabelsConfig.total.showAlways){selectSlice({makeSliceOut:false,printLabel:true});}else{this.printInnerLabels(dataLabelsConfig,dataLabelsConfig.total.label,dataLabelsConfig.total.formatter(w));}}else{selectSlice({makeSliceOut:false,printLabel:true});if(!sliceOut){if(w.globals.selectedDataPoints.length&&w.globals.series.length>1){if(w.globals.selectedDataPoints[0].length>0){var index=w.globals.selectedDataPoints[0];var el=w.globals.dom.baseEl.querySelector(".apexcharts-".concat(w.config.chart.type.toLowerCase(),"-slice-").concat(index));this.printDataLabelsInner(el,dataLabelsConfig);}else if(dataLabelsGroup&&w.globals.selectedDataPoints.length&&w.globals.selectedDataPoints[0].length===0){dataLabelsGroup.style.opacity=0;}}else{if(dataLabelsGroup&&w.globals.series.length>1){dataLabelsGroup.style.opacity=0;}}}}}}]);return Pie;}();var Helpers$2=/*#__PURE__*/function(){function Helpers(lgCtx){_classCallCheck(this,Helpers);this.w=lgCtx.w;this.lgCtx=lgCtx;}_createClass(Helpers,[{key:"getLegendStyles",value:function getLegendStyles(){var stylesheet=document.createElement('style');stylesheet.setAttribute('type','text/css');var text="";var rules=document.createTextNode(text);stylesheet.appendChild(rules);return stylesheet;}},{key:"getLegendBBox",value:function getLegendBBox(){var w=this.w;var currLegendsWrap=w.globals.dom.baseEl.querySelector('.apexcharts-legend');var currLegendsWrapRect=currLegendsWrap.getBoundingClientRect();var currLegendsWrapWidth=currLegendsWrapRect.width;var currLegendsWrapHeight=currLegendsWrapRect.height;return{clwh:currLegendsWrapHeight,clww:currLegendsWrapWidth};}},{key:"appendToForeignObject",value:function appendToForeignObject(){var gl=this.w.globals;gl.dom.elLegendForeign=document.createElementNS(gl.SVGNS,'foreignObject');var elForeign=gl.dom.elLegendForeign;elForeign.setAttribute('x',0);elForeign.setAttribute('y',0);elForeign.setAttribute('width',gl.svgWidth);elForeign.setAttribute('height',gl.svgHeight);gl.dom.elLegendWrap.setAttribute('xmlns','http://www.w3.org/1999/xhtml');elForeign.appendChild(gl.dom.elLegendWrap);elForeign.appendChild(this.getLegendStyles());gl.dom.Paper.node.insertBefore(elForeign,gl.dom.elGraphical.node);}},{key:"toggleDataSeries",value:function toggleDataSeries(seriesCnt,isHidden){var _this=this;var w=this.w;if(w.globals.axisCharts||w.config.chart.type==='radialBar'){w.globals.resized=true;// we don't want initial animations again
var seriesEl=null;var realIndex=null;// yes, make it null. 1 series will rise at a time
w.globals.risingSeries=[];if(w.globals.axisCharts){seriesEl=w.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(seriesCnt,"']"));realIndex=parseInt(seriesEl.getAttribute('data:realIndex'),10);}else{seriesEl=w.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(seriesCnt+1,"']"));realIndex=parseInt(seriesEl.getAttribute('rel'),10)-1;}if(isHidden){var seriesToMakeVisible=[{cs:w.globals.collapsedSeries,csi:w.globals.collapsedSeriesIndices},{cs:w.globals.ancillaryCollapsedSeries,csi:w.globals.ancillaryCollapsedSeriesIndices}];seriesToMakeVisible.forEach(function(r){_this.riseCollapsedSeries(r.cs,r.csi,realIndex);});}else{this.hideSeries({seriesEl:seriesEl,realIndex:realIndex});}}else{// for non-axis charts i.e pie / donuts
var _seriesEl=w.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(seriesCnt+1,"'] path"));var type=w.config.chart.type;if(type==='pie'||type==='donut'){var dataLabels=w.config.plotOptions.pie.donut.labels;var graphics=new Graphics(this.lgCtx.ctx);var pie=new Pie(this.lgCtx.ctx);graphics.pathMouseDown(_seriesEl.members[0],null);pie.printDataLabelsInner(_seriesEl.members[0].node,dataLabels);}_seriesEl.fire('click');}}},{key:"hideSeries",value:function hideSeries(_ref){var seriesEl=_ref.seriesEl,realIndex=_ref.realIndex;var w=this.w;if(w.globals.axisCharts){var shouldNotHideYAxis=false;if(w.config.yaxis[realIndex]&&w.config.yaxis[realIndex].show&&w.config.yaxis[realIndex].showAlways){shouldNotHideYAxis=true;if(w.globals.ancillaryCollapsedSeriesIndices.indexOf(realIndex)<0){w.globals.ancillaryCollapsedSeries.push({index:realIndex,data:w.config.series[realIndex].data.slice(),type:seriesEl.parentNode.className.baseVal.split('-')[1]});w.globals.ancillaryCollapsedSeriesIndices.push(realIndex);}}if(!shouldNotHideYAxis){w.globals.collapsedSeries.push({index:realIndex,data:w.config.series[realIndex].data.slice(),type:seriesEl.parentNode.className.baseVal.split('-')[1]});w.globals.collapsedSeriesIndices.push(realIndex);var removeIndexOfRising=w.globals.risingSeries.indexOf(realIndex);w.globals.risingSeries.splice(removeIndexOfRising,1);}// TODO: AVOID mutating the user's config object below
w.config.series[realIndex].data=[];}else{w.globals.collapsedSeries.push({index:realIndex,data:w.config.series[realIndex]});w.globals.collapsedSeriesIndices.push(realIndex);w.config.series[realIndex]=0;}var seriesChildren=seriesEl.childNodes;for(var sc=0;sc<seriesChildren.length;sc++){if(seriesChildren[sc].classList.contains('apexcharts-series-markers-wrap')){if(seriesChildren[sc].classList.contains('apexcharts-hide')){seriesChildren[sc].classList.remove('apexcharts-hide');}else{seriesChildren[sc].classList.add('apexcharts-hide');}}}w.globals.allSeriesCollapsed=w.globals.collapsedSeries.length===w.config.series.length;this.lgCtx.ctx.updateHelpers._updateSeries(w.config.series,w.config.chart.animations.dynamicAnimation.enabled);}},{key:"riseCollapsedSeries",value:function riseCollapsedSeries(series,seriesIndices,realIndex){var w=this.w;if(series.length>0){for(var c=0;c<series.length;c++){if(series[c].index===realIndex){if(w.globals.axisCharts){w.config.series[realIndex].data=series[c].data.slice();series.splice(c,1);seriesIndices.splice(c,1);w.globals.risingSeries.push(realIndex);}else{w.config.series[realIndex]=series[c].data;series.splice(c,1);seriesIndices.splice(c,1);w.globals.risingSeries.push(realIndex);}this.lgCtx.ctx.updateHelpers._updateSeries(w.config.series,w.config.chart.animations.dynamicAnimation.enabled);}}}}}]);return Helpers;}();/**
   * ApexCharts Legend Class to draw legend.
   *
   * @module Legend
   **/var Legend=/*#__PURE__*/function(){function Legend(ctx,opts){_classCallCheck(this,Legend);this.ctx=ctx;this.w=ctx.w;this.onLegendClick=this.onLegendClick.bind(this);this.onLegendHovered=this.onLegendHovered.bind(this);this.isBarsDistributed=this.w.config.chart.type==='bar'&&this.w.config.plotOptions.bar.distributed&&this.w.config.series.length===1;this.legendHelpers=new Helpers$2(this);}_createClass(Legend,[{key:"init",value:function init(){var w=this.w;var gl=w.globals;var cnf=w.config;var showLegendAlways=cnf.legend.showForSingleSeries&&gl.series.length===1||this.isBarsDistributed||gl.series.length>1;if((showLegendAlways||!gl.axisCharts)&&cnf.legend.show){while(gl.dom.elLegendWrap.firstChild){gl.dom.elLegendWrap.removeChild(gl.dom.elLegendWrap.firstChild);}this.drawLegends();if(!Utils.isIE11()){this.legendHelpers.appendToForeignObject();}else{// IE11 doesn't supports foreignObject, hence append it to <head>
document.getElementsByTagName('head')[0].appendChild(this.legendHelpers.getLegendStyles());}if(cnf.legend.position==='bottom'||cnf.legend.position==='top'){this.legendAlignHorizontal();}else if(cnf.legend.position==='right'||cnf.legend.position==='left'){this.legendAlignVertical();}}}},{key:"drawLegends",value:function drawLegends(){var self=this;var w=this.w;var fontFamily=w.config.legend.fontFamily;var legendNames=w.globals.seriesNames;var fillcolor=w.globals.colors.slice();if(w.config.chart.type==='heatmap'){var ranges=w.config.plotOptions.heatmap.colorScale.ranges;legendNames=ranges.map(function(colorScale){return colorScale.name?colorScale.name:colorScale.from+' - '+colorScale.to;});fillcolor=ranges.map(function(color){return color.color;});}else if(this.isBarsDistributed){legendNames=w.globals.labels.slice();}var legendFormatter=w.globals.legendFormatter;var isLegendInversed=w.config.legend.inverseOrder;for(var i=isLegendInversed?legendNames.length-1:0;isLegendInversed?i>=0:i<=legendNames.length-1;isLegendInversed?i--:i++){var text=legendFormatter(legendNames[i],{seriesIndex:i,w:w});var collapsedSeries=false;var ancillaryCollapsedSeries=false;if(w.globals.collapsedSeries.length>0){for(var c=0;c<w.globals.collapsedSeries.length;c++){if(w.globals.collapsedSeries[c].index===i){collapsedSeries=true;}}}if(w.globals.ancillaryCollapsedSeriesIndices.length>0){for(var _c=0;_c<w.globals.ancillaryCollapsedSeriesIndices.length;_c++){if(w.globals.ancillaryCollapsedSeriesIndices[_c]===i){ancillaryCollapsedSeries=true;}}}var elMarker=document.createElement('span');elMarker.classList.add('apexcharts-legend-marker');var mOffsetX=w.config.legend.markers.offsetX;var mOffsetY=w.config.legend.markers.offsetY;var mHeight=w.config.legend.markers.height;var mWidth=w.config.legend.markers.width;var mBorderWidth=w.config.legend.markers.strokeWidth;var mBorderColor=w.config.legend.markers.strokeColor;var mBorderRadius=w.config.legend.markers.radius;var mStyle=elMarker.style;mStyle.background=fillcolor[i];mStyle.color=fillcolor[i];// override fill color with custom legend.markers.fillColors
if(w.config.legend.markers.fillColors&&w.config.legend.markers.fillColors[i]){mStyle.background=w.config.legend.markers.fillColors[i];}mStyle.height=Array.isArray(mHeight)?parseFloat(mHeight[i])+'px':parseFloat(mHeight)+'px';mStyle.width=Array.isArray(mWidth)?parseFloat(mWidth[i])+'px':parseFloat(mWidth)+'px';mStyle.left=Array.isArray(mOffsetX)?mOffsetX[i]:mOffsetX;mStyle.top=Array.isArray(mOffsetY)?mOffsetY[i]:mOffsetY;mStyle.borderWidth=Array.isArray(mBorderWidth)?mBorderWidth[i]:mBorderWidth;mStyle.borderColor=Array.isArray(mBorderColor)?mBorderColor[i]:mBorderColor;mStyle.borderRadius=Array.isArray(mBorderRadius)?parseFloat(mBorderRadius[i])+'px':parseFloat(mBorderRadius)+'px';if(w.config.legend.markers.customHTML){if(Array.isArray(w.config.legend.markers.customHTML)){elMarker.innerHTML=w.config.legend.markers.customHTML[i]();}else{elMarker.innerHTML=w.config.legend.markers.customHTML();}}Graphics.setAttrs(elMarker,{rel:i+1,'data:collapsed':collapsedSeries||ancillaryCollapsedSeries});if(collapsedSeries||ancillaryCollapsedSeries){elMarker.classList.add('apexcharts-inactive-legend');}var elLegend=document.createElement('div');var elLegendText=document.createElement('span');elLegendText.classList.add('apexcharts-legend-text');elLegendText.innerHTML=Array.isArray(text)?text.join(' '):text;var textColor=w.config.legend.labels.useSeriesColors?w.globals.colors[i]:w.config.legend.labels.colors;if(!textColor){textColor=w.config.chart.foreColor;}elLegendText.style.color=textColor;elLegendText.style.fontSize=parseFloat(w.config.legend.fontSize)+'px';elLegendText.style.fontWeight=w.config.legend.fontWeight;elLegendText.style.fontFamily=fontFamily||w.config.chart.fontFamily;Graphics.setAttrs(elLegendText,{rel:i+1,i:i,'data:default-text':encodeURIComponent(text),'data:collapsed':collapsedSeries||ancillaryCollapsedSeries});elLegend.appendChild(elMarker);elLegend.appendChild(elLegendText);var coreUtils=new CoreUtils(this.ctx);if(!w.config.legend.showForZeroSeries){var total=coreUtils.getSeriesTotalByIndex(i);if(total===0&&coreUtils.seriesHaveSameValues(i)&&!coreUtils.isSeriesNull(i)&&w.globals.collapsedSeriesIndices.indexOf(i)===-1&&w.globals.ancillaryCollapsedSeriesIndices.indexOf(i)===-1){elLegend.classList.add('apexcharts-hidden-zero-series');}}if(!w.config.legend.showForNullSeries){if(coreUtils.isSeriesNull(i)&&w.globals.collapsedSeriesIndices.indexOf(i)===-1&&w.globals.ancillaryCollapsedSeriesIndices.indexOf(i)===-1){elLegend.classList.add('apexcharts-hidden-null-series');}}w.globals.dom.elLegendWrap.appendChild(elLegend);w.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(w.config.legend.horizontalAlign));w.globals.dom.elLegendWrap.classList.add('position-'+w.config.legend.position);elLegend.classList.add('apexcharts-legend-series');elLegend.style.margin="".concat(w.config.legend.itemMargin.vertical,"px ").concat(w.config.legend.itemMargin.horizontal,"px");w.globals.dom.elLegendWrap.style.width=w.config.legend.width?w.config.legend.width+'px':'';w.globals.dom.elLegendWrap.style.height=w.config.legend.height?w.config.legend.height+'px':'';Graphics.setAttrs(elLegend,{rel:i+1,'data:collapsed':collapsedSeries||ancillaryCollapsedSeries});if(collapsedSeries||ancillaryCollapsedSeries){elLegend.classList.add('apexcharts-inactive-legend');}if(!w.config.legend.onItemClick.toggleDataSeries){elLegend.classList.add('apexcharts-no-click');}}// for now - just prevent click on heatmap legend - and allow hover only
var clickAllowed=w.config.chart.type!=='heatmap'&&!this.isBarsDistributed;if(clickAllowed&&w.config.legend.onItemClick.toggleDataSeries){w.globals.dom.elWrap.addEventListener('click',self.onLegendClick,true);}if(w.config.legend.onItemHover.highlightDataSeries){w.globals.dom.elWrap.addEventListener('mousemove',self.onLegendHovered,true);w.globals.dom.elWrap.addEventListener('mouseout',self.onLegendHovered,true);}}},{key:"setLegendWrapXY",value:function setLegendWrapXY(offsetX,offsetY){var w=this.w;var elLegendWrap=w.globals.dom.baseEl.querySelector('.apexcharts-legend');var legendRect=elLegendWrap.getBoundingClientRect();var x=0;var y=0;if(w.config.legend.position==='bottom'){y=y+(w.globals.svgHeight-legendRect.height/2);}else if(w.config.legend.position==='top'){var dim=new Dimensions(this.ctx);var titleH=dim.dimHelpers.getTitleSubtitleCoords('title').height;var subtitleH=dim.dimHelpers.getTitleSubtitleCoords('subtitle').height;y=y+(titleH>0?titleH-10:0)+(subtitleH>0?subtitleH-10:0);}elLegendWrap.style.position='absolute';x=x+offsetX+w.config.legend.offsetX;y=y+offsetY+w.config.legend.offsetY;elLegendWrap.style.left=x+'px';elLegendWrap.style.top=y+'px';if(w.config.legend.position==='bottom'){elLegendWrap.style.top='auto';elLegendWrap.style.bottom=5-w.config.legend.offsetY+'px';}else if(w.config.legend.position==='right'){elLegendWrap.style.left='auto';elLegendWrap.style.right=25+w.config.legend.offsetX+'px';}var fixedHeigthWidth=['width','height'];fixedHeigthWidth.forEach(function(hw){if(elLegendWrap.style[hw]){elLegendWrap.style[hw]=parseInt(w.config.legend[hw],10)+'px';}});}},{key:"legendAlignHorizontal",value:function legendAlignHorizontal(){var w=this.w;var elLegendWrap=w.globals.dom.baseEl.querySelector('.apexcharts-legend');elLegendWrap.style.right=0;var lRect=this.legendHelpers.getLegendBBox();var dimensions=new Dimensions(this.ctx);var titleRect=dimensions.dimHelpers.getTitleSubtitleCoords('title');var subtitleRect=dimensions.dimHelpers.getTitleSubtitleCoords('subtitle');var offsetX=20;var offsetY=0;// the whole legend box is set to bottom
if(w.config.legend.position==='bottom'){offsetY=-lRect.clwh/1.8;}else if(w.config.legend.position==='top'){offsetY=titleRect.height+subtitleRect.height+w.config.title.margin+w.config.subtitle.margin-10;}this.setLegendWrapXY(offsetX,offsetY);}},{key:"legendAlignVertical",value:function legendAlignVertical(){var w=this.w;var lRect=this.legendHelpers.getLegendBBox();var offsetY=20;var offsetX=0;if(w.config.legend.position==='left'){offsetX=20;}if(w.config.legend.position==='right'){offsetX=w.globals.svgWidth-lRect.clww-10;}this.setLegendWrapXY(offsetX,offsetY);}},{key:"onLegendHovered",value:function onLegendHovered(e){var w=this.w;var hoverOverLegend=e.target.classList.contains('apexcharts-legend-text')||e.target.classList.contains('apexcharts-legend-marker');if(w.config.chart.type!=='heatmap'&&!this.isBarsDistributed){if(!e.target.classList.contains('apexcharts-inactive-legend')&&hoverOverLegend){var series=new Series(this.ctx);series.toggleSeriesOnHover(e,e.target);}}else{// for heatmap handling
if(hoverOverLegend){var seriesCnt=parseInt(e.target.getAttribute('rel'),10)-1;this.ctx.events.fireEvent('legendHover',[this.ctx,seriesCnt,this.w]);var _series=new Series(this.ctx);_series.highlightRangeInSeries(e,e.target);}}}},{key:"onLegendClick",value:function onLegendClick(e){if(e.target.classList.contains('apexcharts-legend-text')||e.target.classList.contains('apexcharts-legend-marker')){var seriesCnt=parseInt(e.target.getAttribute('rel'),10)-1;var isHidden=e.target.getAttribute('data:collapsed')==='true';var legendClick=this.w.config.chart.events.legendClick;if(typeof legendClick==='function'){legendClick(this.ctx,seriesCnt,this.w);}this.ctx.events.fireEvent('legendClick',[this.ctx,seriesCnt,this.w]);var markerClick=this.w.config.legend.markers.onClick;if(typeof markerClick==='function'&&e.target.classList.contains('apexcharts-legend-marker')){markerClick(this.ctx,seriesCnt,this.w);this.ctx.events.fireEvent('legendMarkerClick',[this.ctx,seriesCnt,this.w]);}this.legendHelpers.toggleDataSeries(seriesCnt,isHidden);}}}]);return Legend;}();var icoPan='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="apexcharts-icon"><path class="apexcharts-icon-fill" d="M408.781 128.007C386.356 127.578 368 146.36 368 168.79V256h-8V79.79c0-22.43-18.356-41.212-40.781-40.783C297.488 39.423 280 57.169 280 79v177h-8V40.79C272 18.36 253.644-.422 231.219.007 209.488.423 192 18.169 192 40v216h-8V80.79c0-22.43-18.356-41.212-40.781-40.783C121.488 40.423 104 58.169 104 80v235.992l-31.648-43.519c-12.993-17.866-38.009-21.817-55.877-8.823-17.865 12.994-21.815 38.01-8.822 55.877l125.601 172.705A48 48 0 0 0 172.073 512h197.59c22.274 0 41.622-15.324 46.724-37.006l26.508-112.66a192.011 192.011 0 0 0 5.104-43.975V168c.001-21.831-17.487-39.577-39.218-39.993z"/></svg>';var icoZoom='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="apexcharts-icon"><path class="apexcharts-icon-fill" d="M304 192v32c0 6.6-5.4 12-12 12h-56v56c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-56h-56c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h56v-56c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v56h56c6.6 0 12 5.4 12 12zm201 284.7L476.7 505c-9.4 9.4-24.6 9.4-33.9 0L343 405.3c-4.5-4.5-7-10.6-7-17V372c-35.3 27.6-79.7 44-128 44C93.1 416 0 322.9 0 208S93.1 0 208 0s208 93.1 208 208c0 48.3-16.4 92.7-44 128h16.3c6.4 0 12.5 2.5 17 7l99.7 99.7c9.3 9.4 9.3 24.6 0 34zM344 208c0-75.2-60.8-136-136-136S72 132.8 72 208s60.8 136 136 136 136-60.8 136-136z"/></svg>';var icoReset='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="apexcharts-icon"><path class="apexcharts-icon-fill" d="M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z"/></svg>';var icoZoomIn='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="apexcharts-icon"><path class="apexcharts-icon-fill" d="M352 240v32c0 6.6-5.4 12-12 12h-88v88c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-88h-88c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h88v-88c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v88h88c6.6 0 12 5.4 12 12zm96-160v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"/></svg>';var icoZoomOut='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="apexcharts-icon"><path class="apexcharts-icon-fill" d="M108 284c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h232c6.6 0 12 5.4 12 12v32c0 6.6-5.4 12-12 12H108zM448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"/></svg>';var icoSelect='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="apexcharts-icon"><path class="apexcharts-icon-fill" d="M240 224h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-288 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM240 320h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-192h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm-96 288h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm96-384h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM48 224H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 192H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-192H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-96H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zm96 0h-32a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h32a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"/></svg>';var icoMenu='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="apexcharts-icon"><path class="apexcharts-icon-fill" d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg>';/**
   * ApexCharts Toolbar Class for creating toolbar in axis based charts.
   *
   * @module Toolbar
   **/var Toolbar=/*#__PURE__*/function(){function Toolbar(ctx){_classCallCheck(this,Toolbar);this.ctx=ctx;this.w=ctx.w;this.ev=this.w.config.chart.events;this.selectedClass='apexcharts-selected';this.localeValues=this.w.globals.locale.toolbar;}_createClass(Toolbar,[{key:"createToolbar",value:function createToolbar(){var _this=this;var w=this.w;var createDiv=function createDiv(){return document.createElement('div');};var elToolbarWrap=createDiv();elToolbarWrap.setAttribute('class','apexcharts-toolbar');elToolbarWrap.style.top=w.config.chart.toolbar.offsetY+'px';elToolbarWrap.style.right=-w.config.chart.toolbar.offsetX+3+'px';w.globals.dom.elWrap.appendChild(elToolbarWrap);this.elZoom=createDiv();this.elZoomIn=createDiv();this.elZoomOut=createDiv();this.elPan=createDiv();this.elSelection=createDiv();this.elZoomReset=createDiv();this.elMenuIcon=createDiv();this.elMenu=createDiv();this.elCustomIcons=[];this.t=w.config.chart.toolbar.tools;if(Array.isArray(this.t.customIcons)){for(var i=0;i<this.t.customIcons.length;i++){this.elCustomIcons.push(createDiv());}}var toolbarControls=[];var appendZoomControl=function appendZoomControl(type,el,ico){var tool=type.toLowerCase();if(_this.t[tool]&&w.config.chart.zoom.enabled){toolbarControls.push({el:el,icon:typeof _this.t[tool]==='string'?_this.t[tool]:ico,title:_this.localeValues[type],"class":"apexcharts-".concat(tool,"-icon")});}};appendZoomControl('zoomIn',this.elZoomIn,icoZoomIn);appendZoomControl('zoomOut',this.elZoomOut,icoZoomOut);var zoomSelectionCtrls=function zoomSelectionCtrls(z){if(_this.t[z]&&w.config.chart[z].enabled){toolbarControls.push({el:z==='zoom'?_this.elZoom:_this.elSelection,icon:typeof _this.t[z]==='string'?_this.t[z]:z==='zoom'?icoZoom:icoSelect,title:_this.localeValues[z==='zoom'?'selectionZoom':'selection'],"class":w.globals.isTouchDevice?'apexcharts-element-hidden':"apexcharts-".concat(z,"-icon")});}};zoomSelectionCtrls('zoom');zoomSelectionCtrls('selection');if(this.t.pan&&w.config.chart.zoom.enabled){toolbarControls.push({el:this.elPan,icon:typeof this.t.pan==='string'?this.t.pan:icoPan,title:this.localeValues.pan,"class":w.globals.isTouchDevice?'apexcharts-element-hidden':'apexcharts-pan-icon'});}appendZoomControl('reset',this.elZoomReset,icoReset);if(this.t.download){toolbarControls.push({el:this.elMenuIcon,icon:typeof this.t.download==='string'?this.t.download:icoMenu,title:this.localeValues.menu,"class":'apexcharts-menu-icon'});}for(var _i=0;_i<this.elCustomIcons.length;_i++){toolbarControls.push({el:this.elCustomIcons[_i],icon:this.t.customIcons[_i].icon,title:this.t.customIcons[_i].title,index:this.t.customIcons[_i].index,"class":'apexcharts-toolbar-custom-icon '+this.t.customIcons[_i]["class"]});}toolbarControls.forEach(function(t,index){if(t.index){Utils.moveIndexInArray(toolbarControls,index,t.index);}});for(var _i2=0;_i2<toolbarControls.length;_i2++){Graphics.setAttrs(toolbarControls[_i2].el,{"class":toolbarControls[_i2]["class"],title:toolbarControls[_i2].title});toolbarControls[_i2].el.innerHTML=toolbarControls[_i2].icon;elToolbarWrap.appendChild(toolbarControls[_i2].el);}this._createHamburgerMenu(elToolbarWrap);if(w.globals.zoomEnabled){this.elZoom.classList.add(this.selectedClass);}else if(w.globals.panEnabled){this.elPan.classList.add(this.selectedClass);}else if(w.globals.selectionEnabled){this.elSelection.classList.add(this.selectedClass);}this.addToolbarEventListeners();}},{key:"_createHamburgerMenu",value:function _createHamburgerMenu(parent){this.elMenuItems=[];parent.appendChild(this.elMenu);Graphics.setAttrs(this.elMenu,{"class":'apexcharts-menu'});var menuItems=[{name:'exportSVG',title:this.localeValues.exportToSVG},{name:'exportPNG',title:this.localeValues.exportToPNG},{name:'exportCSV',title:this.localeValues.exportToCSV}];if(!this.w.globals.allSeriesHasEqualX){// if it is a multi series, and all series have variable x values, export CSV won't work
menuItems.splice(2,1);}for(var i=0;i<menuItems.length;i++){this.elMenuItems.push(document.createElement('div'));this.elMenuItems[i].innerHTML=menuItems[i].title;Graphics.setAttrs(this.elMenuItems[i],{"class":"apexcharts-menu-item ".concat(menuItems[i].name),title:menuItems[i].title});this.elMenu.appendChild(this.elMenuItems[i]);}}},{key:"addToolbarEventListeners",value:function addToolbarEventListeners(){var _this2=this;this.elZoomReset.addEventListener('click',this.handleZoomReset.bind(this));this.elSelection.addEventListener('click',this.toggleZoomSelection.bind(this,'selection'));this.elZoom.addEventListener('click',this.toggleZoomSelection.bind(this,'zoom'));this.elZoomIn.addEventListener('click',this.handleZoomIn.bind(this));this.elZoomOut.addEventListener('click',this.handleZoomOut.bind(this));this.elPan.addEventListener('click',this.togglePanning.bind(this));this.elMenuIcon.addEventListener('click',this.toggleMenu.bind(this));this.elMenuItems.forEach(function(m){if(m.classList.contains('exportSVG')){m.addEventListener('click',_this2.handleDownload.bind(_this2,'svg'));}else if(m.classList.contains('exportPNG')){m.addEventListener('click',_this2.handleDownload.bind(_this2,'png'));}else if(m.classList.contains('exportCSV')){m.addEventListener('click',_this2.handleDownload.bind(_this2,'csv'));}});for(var i=0;i<this.t.customIcons.length;i++){this.elCustomIcons[i].addEventListener('click',this.t.customIcons[i].click.bind(this,this.ctx,this.ctx.w));}}},{key:"toggleZoomSelection",value:function toggleZoomSelection(type){this.toggleOtherControls();var el=type==='selection'?this.elSelection:this.elZoom;var enabledType=type==='selection'?'selectionEnabled':'zoomEnabled';this.w.globals[enabledType]=!this.w.globals[enabledType];if(!el.classList.contains(this.selectedClass)){el.classList.add(this.selectedClass);}else{el.classList.remove(this.selectedClass);}}},{key:"getToolbarIconsReference",value:function getToolbarIconsReference(){var w=this.w;if(!this.elZoom){this.elZoom=w.globals.dom.baseEl.querySelector('.apexcharts-zoom-icon');}if(!this.elPan){this.elPan=w.globals.dom.baseEl.querySelector('.apexcharts-pan-icon');}if(!this.elSelection){this.elSelection=w.globals.dom.baseEl.querySelector('.apexcharts-selection-icon');}}},{key:"enableZoomPanFromToolbar",value:function enableZoomPanFromToolbar(type){this.toggleOtherControls();type==='pan'?this.w.globals.panEnabled=true:this.w.globals.zoomEnabled=true;var el=type==='pan'?this.elPan:this.elZoom;var el2=type==='pan'?this.elZoom:this.elPan;if(el){el.classList.add(this.selectedClass);}if(el2){el2.classList.remove(this.selectedClass);}}},{key:"togglePanning",value:function togglePanning(){this.toggleOtherControls();this.w.globals.panEnabled=!this.w.globals.panEnabled;if(!this.elPan.classList.contains(this.selectedClass)){this.elPan.classList.add(this.selectedClass);}else{this.elPan.classList.remove(this.selectedClass);}}},{key:"toggleOtherControls",value:function toggleOtherControls(){var _this3=this;var w=this.w;w.globals.panEnabled=false;w.globals.zoomEnabled=false;w.globals.selectionEnabled=false;this.getToolbarIconsReference();var toggleEls=[this.elPan,this.elSelection,this.elZoom];toggleEls.forEach(function(el){if(el){el.classList.remove(_this3.selectedClass);}});}},{key:"handleZoomIn",value:function handleZoomIn(){var w=this.w;var centerX=(w.globals.minX+w.globals.maxX)/2;var newMinX=(w.globals.minX+centerX)/2;var newMaxX=(w.globals.maxX+centerX)/2;var newMinXMaxX=this._getNewMinXMaxX(newMinX,newMaxX);if(!w.globals.disableZoomIn){this.zoomUpdateOptions(newMinXMaxX.minX,newMinXMaxX.maxX);}}},{key:"handleZoomOut",value:function handleZoomOut(){var w=this.w;// avoid zooming out beyond 1000 which may result in NaN values being printed on x-axis
if(w.config.xaxis.type==='datetime'&&new Date(w.globals.minX).getUTCFullYear()<1000){return;}var centerX=(w.globals.minX+w.globals.maxX)/2;var newMinX=w.globals.minX-(centerX-w.globals.minX);var newMaxX=w.globals.maxX-(centerX-w.globals.maxX);var newMinXMaxX=this._getNewMinXMaxX(newMinX,newMaxX);if(!w.globals.disableZoomOut){this.zoomUpdateOptions(newMinXMaxX.minX,newMinXMaxX.maxX);}}},{key:"_getNewMinXMaxX",value:function _getNewMinXMaxX(newMinX,newMaxX){var shouldFloor=this.w.config.xaxis.convertedCatToNumeric;return{minX:shouldFloor?Math.floor(newMinX):newMinX,maxX:shouldFloor?Math.floor(newMaxX):newMaxX};}},{key:"zoomUpdateOptions",value:function zoomUpdateOptions(newMinX,newMaxX){var w=this.w;if(w.config.xaxis.convertedCatToNumeric){// in category charts, avoid zooming out beyond min and max
if(newMinX<1){newMinX=1;newMaxX=w.globals.dataPoints;}if(newMaxX-newMinX<2){return;}}var xaxis={min:newMinX,max:newMaxX};var beforeZoomRange=this.getBeforeZoomRange(xaxis);if(beforeZoomRange){xaxis=beforeZoomRange.xaxis;}var options={xaxis:xaxis};var yaxis=Utils.clone(w.globals.initialConfig.yaxis);if(w.config.chart.zoom.autoScaleYaxis){var scale=new Range(this.ctx);yaxis=scale.autoScaleY(this.ctx,yaxis,{xaxis:xaxis});}if(!w.config.chart.group){// if chart in a group, prevent yaxis update here
// fix issue #650
options.yaxis=yaxis;}this.w.globals.zoomed=true;this.ctx.updateHelpers._updateOptions(options,false,this.w.config.chart.animations.dynamicAnimation.enabled);this.zoomCallback(xaxis,yaxis);}},{key:"zoomCallback",value:function zoomCallback(xaxis,yaxis){if(typeof this.ev.zoomed==='function'){this.ev.zoomed(this.ctx,{xaxis:xaxis,yaxis:yaxis});}}},{key:"getBeforeZoomRange",value:function getBeforeZoomRange(xaxis,yaxis){var newRange=null;if(typeof this.ev.beforeZoom==='function'){newRange=this.ev.beforeZoom(this,{xaxis:xaxis,yaxis:yaxis});}return newRange;}},{key:"toggleMenu",value:function toggleMenu(){var _this4=this;window.setTimeout(function(){if(_this4.elMenu.classList.contains('apexcharts-menu-open')){_this4.elMenu.classList.remove('apexcharts-menu-open');}else{_this4.elMenu.classList.add('apexcharts-menu-open');}},0);}},{key:"handleDownload",value:function handleDownload(type){var w=this.w;var exprt=new Exports(this.ctx);switch(type){case'svg':exprt.exportToSVG(this.ctx);break;case'png':exprt.exportToPng(this.ctx);break;case'csv':exprt.exportToCSV({series:w.config.series});break;}}},{key:"handleZoomReset",value:function handleZoomReset(e){var _this5=this;var charts=this.ctx.getSyncedCharts();charts.forEach(function(ch){var w=ch.w;if(w.globals.minX!==w.globals.initialMinX||w.globals.maxX!==w.globals.initialMaxX){ch.updateHelpers.revertDefaultAxisMinMax();if(typeof w.config.chart.events.zoomed==='function'){_this5.zoomCallback({min:w.config.xaxis.min,max:w.config.xaxis.max});}w.globals.zoomed=false;ch.updateHelpers._updateSeries(w.globals.initialSeries,w.config.chart.animations.dynamicAnimation.enabled);}});}},{key:"destroy",value:function destroy(){this.elZoom=null;this.elZoomIn=null;this.elZoomOut=null;this.elPan=null;this.elSelection=null;this.elZoomReset=null;this.elMenuIcon=null;}}]);return Toolbar;}();/**
   * ApexCharts Zoom Class for handling zooming and panning on axes based charts.
   *
   * @module ZoomPanSelection
   **/var ZoomPanSelection=/*#__PURE__*/function(_Toolbar){_inherits(ZoomPanSelection,_Toolbar);function ZoomPanSelection(ctx){var _this;_classCallCheck(this,ZoomPanSelection);_this=_possibleConstructorReturn(this,_getPrototypeOf(ZoomPanSelection).call(this,ctx));_this.ctx=ctx;_this.w=ctx.w;_this.dragged=false;_this.graphics=new Graphics(_this.ctx);_this.eventList=['mousedown','mouseleave','mousemove','touchstart','touchmove','mouseup','touchend'];_this.clientX=0;_this.clientY=0;_this.startX=0;_this.endX=0;_this.dragX=0;_this.startY=0;_this.endY=0;_this.dragY=0;_this.moveDirection='none';return _this;}_createClass(ZoomPanSelection,[{key:"init",value:function init(_ref){var _this2=this;var xyRatios=_ref.xyRatios;var w=this.w;var me=this;this.xyRatios=xyRatios;this.zoomRect=this.graphics.drawRect(0,0,0,0);this.selectionRect=this.graphics.drawRect(0,0,0,0);this.gridRect=w.globals.dom.baseEl.querySelector('.apexcharts-grid');this.zoomRect.node.classList.add('apexcharts-zoom-rect');this.selectionRect.node.classList.add('apexcharts-selection-rect');w.globals.dom.elGraphical.add(this.zoomRect);w.globals.dom.elGraphical.add(this.selectionRect);if(w.config.chart.selection.type==='x'){this.slDraggableRect=this.selectionRect.draggable({minX:0,minY:0,maxX:w.globals.gridWidth,maxY:w.globals.gridHeight}).on('dragmove',this.selectionDragging.bind(this,'dragging'));}else if(w.config.chart.selection.type==='y'){this.slDraggableRect=this.selectionRect.draggable({minX:0,maxX:w.globals.gridWidth}).on('dragmove',this.selectionDragging.bind(this,'dragging'));}else{this.slDraggableRect=this.selectionRect.draggable().on('dragmove',this.selectionDragging.bind(this,'dragging'));}this.preselectedSelection();this.hoverArea=w.globals.dom.baseEl.querySelector(w.globals.chartClass);this.hoverArea.classList.add('apexcharts-zoomable');this.eventList.forEach(function(event){_this2.hoverArea.addEventListener(event,me.svgMouseEvents.bind(me,xyRatios),{capture:false,passive:true});});}// remove the event listeners which were previously added on hover area
},{key:"destroy",value:function destroy(){if(this.slDraggableRect){this.slDraggableRect.draggable(false);this.slDraggableRect.off();this.selectionRect.off();}this.selectionRect=null;this.zoomRect=null;this.gridRect=null;}},{key:"svgMouseEvents",value:function svgMouseEvents(xyRatios,e){var w=this.w;var me=this;var toolbar=this.ctx.toolbar;var zoomtype=w.globals.zoomEnabled?w.config.chart.zoom.type:w.config.chart.selection.type;if(e.shiftKey){this.shiftWasPressed=true;toolbar.enableZoomPanFromToolbar('pan');}else{if(this.shiftWasPressed){toolbar.enableZoomPanFromToolbar('zoom');this.shiftWasPressed=false;}}var falsePositives=e.target.classList.contains('apexcharts-selection-rect')||e.target.parentNode.classList.contains('apexcharts-toolbar');if(falsePositives)return;me.clientX=e.type==='touchmove'||e.type==='touchstart'?e.touches[0].clientX:e.type==='touchend'?e.changedTouches[0].clientX:e.clientX;me.clientY=e.type==='touchmove'||e.type==='touchstart'?e.touches[0].clientY:e.type==='touchend'?e.changedTouches[0].clientY:e.clientY;if(e.type==='mousedown'&&e.which===1){var gridRectDim=me.gridRect.getBoundingClientRect();me.startX=me.clientX-gridRectDim.left;me.startY=me.clientY-gridRectDim.top;me.dragged=false;me.w.globals.mousedown=true;}if(e.type==='mousemove'&&e.which===1||e.type==='touchmove'){me.dragged=true;if(w.globals.panEnabled){w.globals.selection=null;if(me.w.globals.mousedown){me.panDragging({context:me,zoomtype:zoomtype,xyRatios:xyRatios});}}else{if(me.w.globals.mousedown&&w.globals.zoomEnabled||me.w.globals.mousedown&&w.globals.selectionEnabled){me.selection=me.selectionDrawing({context:me,zoomtype:zoomtype});}}}if(e.type==='mouseup'||e.type==='touchend'||e.type==='mouseleave'){// we will be calling getBoundingClientRect on each mousedown/mousemove/mouseup
var _gridRectDim=me.gridRect.getBoundingClientRect();if(me.w.globals.mousedown){// user released the drag, now do all the calculations
me.endX=me.clientX-_gridRectDim.left;me.endY=me.clientY-_gridRectDim.top;me.dragX=Math.abs(me.endX-me.startX);me.dragY=Math.abs(me.endY-me.startY);if(w.globals.zoomEnabled||w.globals.selectionEnabled){me.selectionDrawn({context:me,zoomtype:zoomtype});}if(w.globals.panEnabled&&w.config.xaxis.convertedCatToNumeric){me.delayedPanScrolled();}}if(w.globals.zoomEnabled){me.hideSelectionRect(this.selectionRect);}me.dragged=false;me.w.globals.mousedown=false;}this.makeSelectionRectDraggable();}},{key:"makeSelectionRectDraggable",value:function makeSelectionRectDraggable(){var w=this.w;if(!this.selectionRect)return;var rectDim=this.selectionRect.node.getBoundingClientRect();if(rectDim.width>0&&rectDim.height>0){this.slDraggableRect.selectize({points:'l, r',pointSize:8,pointType:'rect'}).resize({constraint:{minX:0,minY:0,maxX:w.globals.gridWidth,maxY:w.globals.gridHeight}}).on('resizing',this.selectionDragging.bind(this,'resizing'));}}},{key:"preselectedSelection",value:function preselectedSelection(){var w=this.w;var xyRatios=this.xyRatios;if(!w.globals.zoomEnabled){if(typeof w.globals.selection!=='undefined'&&w.globals.selection!==null){this.drawSelectionRect(w.globals.selection);}else{if(w.config.chart.selection.xaxis.min!==undefined&&w.config.chart.selection.xaxis.max!==undefined){var x=(w.config.chart.selection.xaxis.min-w.globals.minX)/xyRatios.xRatio;var width=w.globals.gridWidth-(w.globals.maxX-w.config.chart.selection.xaxis.max)/xyRatios.xRatio-x;var selectionRect={x:x,y:0,width:width,height:w.globals.gridHeight,translateX:0,translateY:0,selectionEnabled:true};this.drawSelectionRect(selectionRect);this.makeSelectionRectDraggable();if(typeof w.config.chart.events.selection==='function'){w.config.chart.events.selection(this.ctx,{xaxis:{min:w.config.chart.selection.xaxis.min,max:w.config.chart.selection.xaxis.max},yaxis:{}});}}}}}},{key:"drawSelectionRect",value:function drawSelectionRect(_ref2){var x=_ref2.x,y=_ref2.y,width=_ref2.width,height=_ref2.height,translateX=_ref2.translateX,translateY=_ref2.translateY;var w=this.w;var zoomRect=this.zoomRect;var selectionRect=this.selectionRect;if(this.dragged||w.globals.selection!==null){var scalingAttrs={transform:'translate('+translateX+', '+translateY+')'};// change styles based on zoom or selection
// zoom is Enabled and user has dragged, so draw blue rect
if(w.globals.zoomEnabled&&this.dragged){if(width<0)width=1;// fixes apexcharts.js#1168
zoomRect.attr({x:x,y:y,width:width,height:height,fill:w.config.chart.zoom.zoomedArea.fill.color,'fill-opacity':w.config.chart.zoom.zoomedArea.fill.opacity,stroke:w.config.chart.zoom.zoomedArea.stroke.color,'stroke-width':w.config.chart.zoom.zoomedArea.stroke.width,'stroke-opacity':w.config.chart.zoom.zoomedArea.stroke.opacity});Graphics.setAttrs(zoomRect.node,scalingAttrs);}// selection is enabled
if(w.globals.selectionEnabled){selectionRect.attr({x:x,y:y,width:width>0?width:0,height:height>0?height:0,fill:w.config.chart.selection.fill.color,'fill-opacity':w.config.chart.selection.fill.opacity,stroke:w.config.chart.selection.stroke.color,'stroke-width':w.config.chart.selection.stroke.width,'stroke-dasharray':w.config.chart.selection.stroke.dashArray,'stroke-opacity':w.config.chart.selection.stroke.opacity});Graphics.setAttrs(selectionRect.node,scalingAttrs);}}}},{key:"hideSelectionRect",value:function hideSelectionRect(rect){if(rect){rect.attr({x:0,y:0,width:0,height:0});}}},{key:"selectionDrawing",value:function selectionDrawing(_ref3){var context=_ref3.context,zoomtype=_ref3.zoomtype;var w=this.w;var me=context;var gridRectDim=this.gridRect.getBoundingClientRect();var startX=me.startX-1;var startY=me.startY;var selectionWidth=me.clientX-gridRectDim.left-startX;var selectionHeight=me.clientY-gridRectDim.top-startY;var translateX=0;var translateY=0;var selectionRect={};if(Math.abs(selectionWidth+startX)>w.globals.gridWidth){// user dragged the mouse outside drawing area to the right
selectionWidth=w.globals.gridWidth-startX;}else if(me.clientX-gridRectDim.left<0){// user dragged the mouse outside drawing area to the left
selectionWidth=startX;}// inverse selection X
if(startX>me.clientX-gridRectDim.left){selectionWidth=Math.abs(selectionWidth);translateX=-selectionWidth;}// inverse selection Y
if(startY>me.clientY-gridRectDim.top){selectionHeight=Math.abs(selectionHeight);translateY=-selectionHeight;}if(zoomtype==='x'){selectionRect={x:startX,y:0,width:selectionWidth,height:w.globals.gridHeight,translateX:translateX,translateY:0};}else if(zoomtype==='y'){selectionRect={x:0,y:startY,width:w.globals.gridWidth,height:selectionHeight,translateX:0,translateY:translateY};}else{selectionRect={x:startX,y:startY,width:selectionWidth,height:selectionHeight,translateX:translateX,translateY:translateY};}me.drawSelectionRect(selectionRect);me.selectionDragging('resizing');return selectionRect;}},{key:"selectionDragging",value:function selectionDragging(type,e){var _this3=this;var w=this.w;var xyRatios=this.xyRatios;var selRect=this.selectionRect;var timerInterval=0;if(type==='resizing'){timerInterval=30;}if(typeof w.config.chart.events.selection==='function'&&w.globals.selectionEnabled){// a small debouncer is required when resizing to avoid freezing the chart
clearTimeout(this.w.globals.selectionResizeTimer);this.w.globals.selectionResizeTimer=window.setTimeout(function(){var gridRectDim=_this3.gridRect.getBoundingClientRect();var selectionRect=selRect.node.getBoundingClientRect();var minX=w.globals.xAxisScale.niceMin+(selectionRect.left-gridRectDim.left)*xyRatios.xRatio;var maxX=w.globals.xAxisScale.niceMin+(selectionRect.right-gridRectDim.left)*xyRatios.xRatio;var minY=w.globals.yAxisScale[0].niceMin+(gridRectDim.bottom-selectionRect.bottom)*xyRatios.yRatio[0];var maxY=w.globals.yAxisScale[0].niceMax-(selectionRect.top-gridRectDim.top)*xyRatios.yRatio[0];w.config.chart.events.selection(_this3.ctx,{xaxis:{min:minX,max:maxX},yaxis:{min:minY,max:maxY}});},timerInterval);}}},{key:"selectionDrawn",value:function selectionDrawn(_ref4){var context=_ref4.context,zoomtype=_ref4.zoomtype;var w=this.w;var me=context;var xyRatios=this.xyRatios;var toolbar=this.ctx.toolbar;if(me.startX>me.endX){var tempX=me.startX;me.startX=me.endX;me.endX=tempX;}if(me.startY>me.endY){var tempY=me.startY;me.startY=me.endY;me.endY=tempY;}var xLowestValue=w.globals.xAxisScale.niceMin+me.startX*xyRatios.xRatio;var xHighestValue=w.globals.xAxisScale.niceMin+me.endX*xyRatios.xRatio;// TODO: we will consider the 1st y axis values here for getting highest and lowest y
var yHighestValue=[];var yLowestValue=[];w.config.yaxis.forEach(function(yaxe,index){yHighestValue.push(w.globals.yAxisScale[index].niceMax-xyRatios.yRatio[index]*me.startY);yLowestValue.push(w.globals.yAxisScale[index].niceMax-xyRatios.yRatio[index]*me.endY);});if(me.dragged&&(me.dragX>10||me.dragY>10)&&xLowestValue!==xHighestValue){if(w.globals.zoomEnabled){var yaxis=Utils.clone(w.globals.initialConfig.yaxis);w.globals.zoomed=true;// before zooming in/out, store the last yaxis and xaxis range, so that when user hits the RESET button, we get the original range
// also - make sure user is not already zoomed in/out - otherwise we will store zoomed values in lastAxis
// DEAD code - the below condition will never run now as zoomed is made false above
if(!w.globals.zoomed){w.globals.lastXAxis=Utils.clone(w.config.xaxis);w.globals.lastYAxis=Utils.clone(w.config.yaxis);}if(w.config.xaxis.convertedCatToNumeric){xLowestValue=Math.floor(xLowestValue);xHighestValue=Math.floor(xHighestValue);if(xLowestValue<1){xLowestValue=1;xHighestValue=w.globals.dataPoints;}if(xHighestValue-xLowestValue<2){xHighestValue=xLowestValue+1;}}var xaxis={min:xLowestValue,max:xHighestValue};if(zoomtype==='xy'||zoomtype==='y'){yaxis.forEach(function(yaxe,index){yaxis[index].min=yLowestValue[index];yaxis[index].max=yHighestValue[index];});}if(w.config.chart.zoom.autoScaleYaxis){var scale=new Range(me.ctx);yaxis=scale.autoScaleY(me.ctx,yaxis,{xaxis:xaxis});}if(toolbar){var beforeZoomRange=toolbar.getBeforeZoomRange(xaxis,yaxis);if(beforeZoomRange){xaxis=beforeZoomRange.xaxis?beforeZoomRange.xaxis:xaxis;yaxis=beforeZoomRange.yaxis?beforeZoomRange.yaxe:yaxis;}}var options={xaxis:xaxis};if(!w.config.chart.group){// if chart in a group, prevent yaxis update here
// fix issue #650
options.yaxis=yaxis;}me.ctx.updateHelpers._updateOptions(options,false,me.w.config.chart.animations.dynamicAnimation.enabled);if(typeof w.config.chart.events.zoomed==='function'){toolbar.zoomCallback(xaxis,yaxis);}}else if(w.globals.selectionEnabled){var _yaxis=null;var _xaxis=null;_xaxis={min:xLowestValue,max:xHighestValue};if(zoomtype==='xy'||zoomtype==='y'){_yaxis=Utils.clone(w.config.yaxis);_yaxis.forEach(function(yaxe,index){_yaxis[index].min=yLowestValue[index];_yaxis[index].max=yHighestValue[index];});}w.globals.selection=me.selection;if(typeof w.config.chart.events.selection==='function'){w.config.chart.events.selection(me.ctx,{xaxis:_xaxis,yaxis:_yaxis});}}}}},{key:"panDragging",value:function panDragging(_ref5){var context=_ref5.context;var w=this.w;var me=context;// check to make sure there is data to compare against
if(typeof w.globals.lastClientPosition.x!=='undefined'){// get the change from last position to this position
var deltaX=w.globals.lastClientPosition.x-me.clientX;var deltaY=w.globals.lastClientPosition.y-me.clientY;// check which direction had the highest amplitude and then figure out direction by checking if the value is greater or less than zero
if(Math.abs(deltaX)>Math.abs(deltaY)&&deltaX>0){this.moveDirection='left';}else if(Math.abs(deltaX)>Math.abs(deltaY)&&deltaX<0){this.moveDirection='right';}else if(Math.abs(deltaY)>Math.abs(deltaX)&&deltaY>0){this.moveDirection='up';}else if(Math.abs(deltaY)>Math.abs(deltaX)&&deltaY<0){this.moveDirection='down';}}// set the new last position to the current for next time (to get the position of drag)
w.globals.lastClientPosition={x:me.clientX,y:me.clientY};var xLowestValue=w.globals.minX;var xHighestValue=w.globals.maxX;// on a category, we don't pan continuosly as it causes bugs
if(!w.config.xaxis.convertedCatToNumeric){me.panScrolled(xLowestValue,xHighestValue);}}},{key:"delayedPanScrolled",value:function delayedPanScrolled(){var w=this.w;var newMinX=w.globals.minX;var newMaxX=w.globals.maxX;var centerX=(w.globals.maxX-w.globals.minX)/2;if(this.moveDirection==='left'){newMinX=w.globals.minX+centerX;newMaxX=w.globals.maxX+centerX;}else if(this.moveDirection==='right'){newMinX=w.globals.minX-centerX;newMaxX=w.globals.maxX-centerX;}newMinX=Math.floor(newMinX);newMaxX=Math.floor(newMaxX);this.updateScrolledChart({xaxis:{min:newMinX,max:newMaxX}},newMinX,newMaxX);}},{key:"panScrolled",value:function panScrolled(xLowestValue,xHighestValue){var w=this.w;var xyRatios=this.xyRatios;var yaxis=Utils.clone(w.globals.initialConfig.yaxis);if(this.moveDirection==='left'){xLowestValue=w.globals.minX+w.globals.gridWidth/15*xyRatios.xRatio;xHighestValue=w.globals.maxX+w.globals.gridWidth/15*xyRatios.xRatio;}else if(this.moveDirection==='right'){xLowestValue=w.globals.minX-w.globals.gridWidth/15*xyRatios.xRatio;xHighestValue=w.globals.maxX-w.globals.gridWidth/15*xyRatios.xRatio;}if(xLowestValue<w.globals.initialMinX||xHighestValue>w.globals.initialMaxX){xLowestValue=w.globals.minX;xHighestValue=w.globals.maxX;}var xaxis={min:xLowestValue,max:xHighestValue};if(w.config.chart.zoom.autoScaleYaxis){var scale=new Range(this.ctx);yaxis=scale.autoScaleY(this.ctx,yaxis,{xaxis:xaxis});}var options={xaxis:{min:xLowestValue,max:xHighestValue}};if(!w.config.chart.group){// if chart in a group, prevent yaxis update here
// fix issue #650
options.yaxis=yaxis;}this.updateScrolledChart(options,xLowestValue,xHighestValue);}},{key:"updateScrolledChart",value:function updateScrolledChart(options,xLowestValue,xHighestValue){var w=this.w;this.ctx.updateHelpers._updateOptions(options,false,false);if(typeof w.config.chart.events.scrolled==='function'){w.config.chart.events.scrolled(this.ctx,{xaxis:{min:xLowestValue,max:xHighestValue}});}}}]);return ZoomPanSelection;}(Toolbar);var Utils$1=/*#__PURE__*/function(){function Utils$1(tooltipContext){_classCallCheck(this,Utils$1);this.w=tooltipContext.w;this.ttCtx=tooltipContext;this.ctx=tooltipContext.ctx;}/**
     ** When hovering over series, you need to capture which series is being hovered on.
     ** This function will return both capturedseries index as well as inner index of that series
     * @memberof Utils
     * @param {object}
     * - hoverArea = the rect on which user hovers
     * - elGrid = dimensions of the hover rect (it can be different than hoverarea)
     */_createClass(Utils$1,[{key:"getNearestValues",value:function getNearestValues(_ref){var hoverArea=_ref.hoverArea,elGrid=_ref.elGrid,clientX=_ref.clientX,clientY=_ref.clientY;var w=this.w;var hoverWidth=w.globals.gridWidth;var xDivisor=hoverWidth/(w.globals.dataPoints-1);var seriesBound=elGrid.getBoundingClientRect();var hasBars=this.hasBars();if(w.globals.comboCharts||hasBars){xDivisor=hoverWidth/w.globals.dataPoints;}var hoverX=clientX-seriesBound.left;var hoverY=clientY-seriesBound.top;var notInRect=hoverX<0||hoverY<0||hoverX>w.globals.gridWidth||hoverY>w.globals.gridHeight;if(notInRect){hoverArea.classList.remove('hovering-zoom');hoverArea.classList.remove('hovering-pan');}else{if(w.globals.zoomEnabled){hoverArea.classList.remove('hovering-pan');hoverArea.classList.add('hovering-zoom');}else if(w.globals.panEnabled){hoverArea.classList.remove('hovering-zoom');hoverArea.classList.add('hovering-pan');}}var j=Math.round(hoverX/xDivisor);if(hasBars){j=Math.ceil(hoverX/xDivisor);j=j-1;}var capturedSeries=null;var closest=null;var seriesXValArr=[];var seriesYValArr=[];for(var s=0;s<w.globals.seriesXvalues.length;s++){seriesXValArr.push([w.globals.seriesXvalues[s][0]-0.000001].concat(w.globals.seriesXvalues[s]));}seriesXValArr=seriesXValArr.map(function(seriesXVal){return seriesXVal.filter(function(s){return s;});});seriesYValArr=w.globals.seriesYvalues.map(function(seriesYVal){return seriesYVal.filter(function(s){return Utils.isNumber(s);});});// if X axis type is not category and tooltip is not shared, then we need to find the cursor position and get the nearest value
if(w.globals.isXNumeric){closest=this.closestInMultiArray(hoverX,hoverY,seriesXValArr,seriesYValArr);capturedSeries=closest.index;j=closest.j;if(capturedSeries!==null){// initial push, it should be a little smaller than the 1st val
seriesXValArr=w.globals.seriesXvalues[capturedSeries];closest=this.closestInArray(hoverX,seriesXValArr);j=closest.index;}}w.globals.capturedSeriesIndex=capturedSeries===null?-1:capturedSeries;if(!j||j<1)j=0;w.globals.capturedDataPointIndex=j;return{capturedSeries:capturedSeries,j:j,hoverX:hoverX,hoverY:hoverY};}},{key:"closestInMultiArray",value:function closestInMultiArray(hoverX,hoverY,Xarrays,Yarrays){var w=this.w;var activeIndex=0;var currIndex=null;var j=-1;if(w.globals.series.length>1){activeIndex=this.getFirstActiveXArray(Xarrays);}else{currIndex=0;}var currY=Yarrays[activeIndex][0];var currX=Xarrays[activeIndex][0];var diffX=Math.abs(hoverX-currX);var diffY=Math.abs(hoverY-currY);var diff=diffY+diffX;Yarrays.map(function(arrY,arrIndex){arrY.map(function(y,innerKey){var newdiffY=Math.abs(hoverY-Yarrays[arrIndex][innerKey]);var newdiffX=Math.abs(hoverX-Xarrays[arrIndex][innerKey]);var newdiff=newdiffX+newdiffY;if(newdiff<diff){diff=newdiff;diffX=newdiffX;diffY=newdiffY;currIndex=arrIndex;j=innerKey;}});});return{index:currIndex,j:j};}},{key:"getFirstActiveXArray",value:function getFirstActiveXArray(Xarrays){var activeIndex=0;var coreUtils=new CoreUtils(this.ctx);var firstActiveSeriesIndex=Xarrays.map(function(xarr,index){return xarr.length>0?index:-1;});for(var a=0;a<firstActiveSeriesIndex.length;a++){var total=coreUtils.getSeriesTotalByIndex(a);if(firstActiveSeriesIndex[a]!==-1&&total!==0&&!coreUtils.seriesHaveSameValues(a)){activeIndex=firstActiveSeriesIndex[a];break;}}return activeIndex;}},{key:"closestInArray",value:function closestInArray(val,arr){var curr=arr[0];var currIndex=null;var diff=Math.abs(val-curr);for(var i=0;i<arr.length;i++){var newdiff=Math.abs(val-arr[i]);if(newdiff<diff){diff=newdiff;currIndex=i;}}return{index:currIndex};}/**
       * When there are multiple series, it is possible to have different x values for each series.
       * But it may be possible in those multiple series, that there is same x value for 2 or more
       * series.
       * @memberof Utils
       * @param {int}
       * - j = is the inner index of series -> (series[i][j])
       * @return {bool}
       */},{key:"isXoverlap",value:function isXoverlap(j){var w=this.w;var xSameForAllSeriesJArr=[];var seriesX=w.globals.seriesX.filter(function(s){return typeof s[0]!=='undefined';});if(seriesX.length>0){for(var i=0;i<seriesX.length-1;i++){if(typeof seriesX[i][j]!=='undefined'&&typeof seriesX[i+1][j]!=='undefined'){if(seriesX[i][j]!==seriesX[i+1][j]){xSameForAllSeriesJArr.push('unEqual');}}}}if(xSameForAllSeriesJArr.length===0){return true;}return false;}},{key:"isInitialSeriesSameLen",value:function isInitialSeriesSameLen(){var sameLen=true;var initialSeries=this.w.globals.initialSeries;for(var i=0;i<initialSeries.length-1;i++){if(initialSeries[i].data.length!==initialSeries[i+1].data.length){sameLen=false;break;}}return sameLen;}},{key:"getBarsHeight",value:function getBarsHeight(allbars){var bars=_toConsumableArray(allbars);var totalHeight=bars.reduce(function(acc,bar){return acc+bar.getBBox().height;},0);return totalHeight;}},{key:"getElMarkers",value:function getElMarkers(){return this.w.globals.dom.baseEl.querySelectorAll(' .apexcharts-series-markers');}},{key:"getAllMarkers",value:function getAllMarkers(){// first get all marker parents. This parent class contains series-index
// which helps to sort the markers as they are dynamic
var markersWraps=this.w.globals.dom.baseEl.querySelectorAll('.apexcharts-series-markers-wrap');markersWraps=_toConsumableArray(markersWraps);markersWraps.sort(function(a,b){return Number(b.getAttribute('data:realIndex'))<Number(a.getAttribute('data:realIndex'))?0:-1;});var markers=[];markersWraps.forEach(function(m){markers.push(m.querySelector('.apexcharts-marker'));});return markers;}},{key:"hasMarkers",value:function hasMarkers(){var markers=this.getElMarkers();return markers.length>0;}},{key:"getElBars",value:function getElBars(){return this.w.globals.dom.baseEl.querySelectorAll('.apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-rangebar-series');}},{key:"hasBars",value:function hasBars(){var bars=this.getElBars();return bars.length>0;}},{key:"getHoverMarkerSize",value:function getHoverMarkerSize(index){var w=this.w;var hoverSize=w.config.markers.hover.size;if(hoverSize===undefined){hoverSize=w.globals.markers.size[index]+w.config.markers.hover.sizeOffset;}return hoverSize;}},{key:"toggleAllTooltipSeriesGroups",value:function toggleAllTooltipSeriesGroups(state){var w=this.w;var ttCtx=this.ttCtx;if(ttCtx.allTooltipSeriesGroups.length===0){ttCtx.allTooltipSeriesGroups=w.globals.dom.baseEl.querySelectorAll('.apexcharts-tooltip-series-group');}var allTooltipSeriesGroups=ttCtx.allTooltipSeriesGroups;for(var i=0;i<allTooltipSeriesGroups.length;i++){if(state==='enable'){allTooltipSeriesGroups[i].classList.add('apexcharts-active');allTooltipSeriesGroups[i].style.display=w.config.tooltip.items.display;}else{allTooltipSeriesGroups[i].classList.remove('apexcharts-active');allTooltipSeriesGroups[i].style.display='none';}}}}]);return Utils$1;}();/**
   * ApexCharts Tooltip.Labels Class to draw texts on the tooltip.
   *
   * @module Tooltip.Labels
   **/var Labels=/*#__PURE__*/function(){function Labels(tooltipContext){_classCallCheck(this,Labels);this.w=tooltipContext.w;this.ctx=tooltipContext.ctx;this.ttCtx=tooltipContext;this.tooltipUtil=new Utils$1(tooltipContext);}_createClass(Labels,[{key:"drawSeriesTexts",value:function drawSeriesTexts(_ref){var _ref$shared=_ref.shared,shared=_ref$shared===void 0?true:_ref$shared,ttItems=_ref.ttItems,_ref$i=_ref.i,i=_ref$i===void 0?0:_ref$i,_ref$j=_ref.j,j=_ref$j===void 0?null:_ref$j,y1=_ref.y1,y2=_ref.y2;var w=this.w;if(w.config.tooltip.custom!==undefined){this.handleCustomTooltip({i:i,j:j,y1:y1,y2:y2,w:w});}else{this.toggleActiveInactiveSeries(shared);}var values=this.getValuesToPrint({i:i,j:j});this.printLabels({i:i,j:j,values:values,ttItems:ttItems,shared:shared});// Re-calculate tooltip dimensions now that we have drawn the text
var tooltipEl=this.ttCtx.getElTooltip();this.ttCtx.tooltipRect.ttWidth=tooltipEl.getBoundingClientRect().width;this.ttCtx.tooltipRect.ttHeight=tooltipEl.getBoundingClientRect().height;}},{key:"printLabels",value:function printLabels(_ref2){var _this=this;var i=_ref2.i,j=_ref2.j,values=_ref2.values,ttItems=_ref2.ttItems,shared=_ref2.shared;var w=this.w;var val;var xVal=values.xVal,zVal=values.zVal,xAxisTTVal=values.xAxisTTVal;var seriesName='';var pColor=w.globals.colors[i];if(j!==null&&w.config.plotOptions.bar.distributed){pColor=w.globals.colors[j];}var _loop=function _loop(t,inverset){var f=_this.getFormatters(i);seriesName=_this.getSeriesName({fn:f.yLbTitleFormatter,index:i,seriesIndex:i,j:j});var tIndex=w.config.tooltip.inverseOrder?inverset:t;if(w.globals.axisCharts){var generalFormatter=function generalFormatter(index){return f.yLbFormatter(w.globals.series[index][j],{series:w.globals.series,seriesIndex:index,dataPointIndex:j,w:w});};if(shared){f=_this.getFormatters(tIndex);seriesName=_this.getSeriesName({fn:f.yLbTitleFormatter,index:tIndex,seriesIndex:i,j:j});pColor=w.globals.colors[tIndex];val=generalFormatter(tIndex);}else{val=generalFormatter(i);}}// for pie / donuts
if(j===null){val=f.yLbFormatter(w.globals.series[i],w);}_this.DOMHandling({i:i,t:tIndex,j:j,ttItems:ttItems,values:{val:val,xVal:xVal,xAxisTTVal:xAxisTTVal,zVal:zVal},seriesName:seriesName,shared:shared,pColor:pColor});};for(var t=0,inverset=w.globals.series.length-1;t<w.globals.series.length;t++,inverset--){_loop(t,inverset);}}},{key:"getFormatters",value:function getFormatters(i){var w=this.w;var yLbFormatter=w.globals.yLabelFormatters[i];var yLbTitleFormatter;if(w.globals.ttVal!==undefined){if(Array.isArray(w.globals.ttVal)){yLbFormatter=w.globals.ttVal[i]&&w.globals.ttVal[i].formatter;yLbTitleFormatter=w.globals.ttVal[i]&&w.globals.ttVal[i].title&&w.globals.ttVal[i].title.formatter;}else{yLbFormatter=w.globals.ttVal.formatter;if(typeof w.globals.ttVal.title.formatter==='function'){yLbTitleFormatter=w.globals.ttVal.title.formatter;}}}else{yLbTitleFormatter=w.config.tooltip.y.title.formatter;}if(typeof yLbFormatter!=='function'){if(w.globals.yLabelFormatters[0]){yLbFormatter=w.globals.yLabelFormatters[0];}else{yLbFormatter=function yLbFormatter(label){return label;};}}if(typeof yLbTitleFormatter!=='function'){yLbTitleFormatter=function yLbTitleFormatter(label){return label;};}return{yLbFormatter:yLbFormatter,yLbTitleFormatter:yLbTitleFormatter};}},{key:"getSeriesName",value:function getSeriesName(_ref3){var fn=_ref3.fn,index=_ref3.index,seriesIndex=_ref3.seriesIndex,j=_ref3.j;var w=this.w;return fn(String(w.globals.seriesNames[index]),{series:w.globals.series,seriesIndex:seriesIndex,dataPointIndex:j,w:w});}},{key:"DOMHandling",value:function DOMHandling(_ref4){var i=_ref4.i,t=_ref4.t,j=_ref4.j,ttItems=_ref4.ttItems,values=_ref4.values,seriesName=_ref4.seriesName,shared=_ref4.shared,pColor=_ref4.pColor;var w=this.w;var ttCtx=this.ttCtx;var val=values.val,xVal=values.xVal,xAxisTTVal=values.xAxisTTVal,zVal=values.zVal;var ttItemsChildren=null;ttItemsChildren=ttItems[t].children;if(w.config.tooltip.fillSeriesColor){//  elTooltip.style.backgroundColor = pColor
ttItems[t].style.backgroundColor=pColor;ttItemsChildren[0].style.display='none';}if(ttCtx.showTooltipTitle){if(ttCtx.tooltipTitle===null){// get it once if null, and store it in class property
ttCtx.tooltipTitle=w.globals.dom.baseEl.querySelector('.apexcharts-tooltip-title');}ttCtx.tooltipTitle.innerHTML=xVal;}// if xaxis tooltip is constructed, we need to replace the innerHTML
if(ttCtx.blxaxisTooltip){ttCtx.xaxisTooltipText.innerHTML=xAxisTTVal!==''?xAxisTTVal:xVal;}var ttYLabel=ttItems[t].querySelector('.apexcharts-tooltip-text-label');if(ttYLabel){ttYLabel.innerHTML=seriesName?seriesName+': ':'';}var ttYVal=ttItems[t].querySelector('.apexcharts-tooltip-text-value');if(ttYVal){ttYVal.innerHTML=typeof val!=='undefined'?val:'';}if(ttItemsChildren[0]&&ttItemsChildren[0].classList.contains('apexcharts-tooltip-marker')){if(w.config.tooltip.marker.fillColors&&Array.isArray(w.config.tooltip.marker.fillColors)){pColor=w.config.tooltip.marker.fillColors[i];}ttItemsChildren[0].style.backgroundColor=pColor;}if(!w.config.tooltip.marker.show){ttItemsChildren[0].style.display='none';}if(zVal!==null){var ttZLabel=ttItems[t].querySelector('.apexcharts-tooltip-text-z-label');ttZLabel.innerHTML=w.config.tooltip.z.title;var ttZVal=ttItems[t].querySelector('.apexcharts-tooltip-text-z-value');ttZVal.innerHTML=typeof zVal!=='undefined'?zVal:'';}if(shared&&ttItemsChildren[0]){// hide when no Val or series collapsed
if(typeof val==='undefined'||val===null||w.globals.collapsedSeriesIndices.indexOf(t)>-1){ttItemsChildren[0].parentNode.style.display='none';}else{ttItemsChildren[0].parentNode.style.display=w.config.tooltip.items.display;}// TODO: issue #1240 needs to be looked at again. commenting it because this also hides single series values with 0 in it (shared tooltip)
// if (w.globals.stackedSeriesTotals[j] === 0) {
//   // shared tooltip and all values are null, so we need to hide the x value too
//   let allYZeroForJ = false
//   for (let si = 1; si < w.globals.seriesYvalues.length; si++) {
//     if (
//       w.globals.seriesYvalues[si][j] ===
//       w.globals.seriesYvalues[si - 1][j]
//     ) {
//       allYZeroForJ = true
//     }
//   }
//   if (allYZeroForJ) {
//     ttCtx.tooltipTitle.style.display = 'none'
//   } else {
//     ttCtx.tooltipTitle.style.display = w.config.tooltip.items.display
//   }
// } else {
//   ttCtx.tooltipTitle.style.display = w.config.tooltip.items.display
// }
}}},{key:"toggleActiveInactiveSeries",value:function toggleActiveInactiveSeries(shared){var w=this.w;if(shared){// make all tooltips active
this.tooltipUtil.toggleAllTooltipSeriesGroups('enable');}else{// disable all tooltip text groups
this.tooltipUtil.toggleAllTooltipSeriesGroups('disable');// enable the first tooltip text group
var firstTooltipSeriesGroup=w.globals.dom.baseEl.querySelector('.apexcharts-tooltip-series-group');if(firstTooltipSeriesGroup){firstTooltipSeriesGroup.classList.add('apexcharts-active');firstTooltipSeriesGroup.style.display=w.config.tooltip.items.display;}}}},{key:"getValuesToPrint",value:function getValuesToPrint(_ref5){var i=_ref5.i,j=_ref5.j;var w=this.w;var filteredSeriesX=this.ctx.series.filteredSeriesX();var xVal='';var xAxisTTVal='';var zVal=null;var val=null;var customFormatterOpts={series:w.globals.series,seriesIndex:i,dataPointIndex:j,w:w};var zFormatter=w.globals.ttZFormatter;if(j===null){val=w.globals.series[i];}else{if(w.globals.isXNumeric){xVal=filteredSeriesX[i][j];if(filteredSeriesX[i].length===0){// a series (possibly the first one) might be collapsed, so get the next active index
var firstActiveSeriesIndex=this.tooltipUtil.getFirstActiveXArray(filteredSeriesX);xVal=filteredSeriesX[firstActiveSeriesIndex][j];}}else{xVal=typeof w.globals.labels[j]!=='undefined'?w.globals.labels[j]:'';}}var bufferXVal=xVal;if(w.globals.isXNumeric&&w.config.xaxis.type==='datetime'){var xFormat=new Formatters(this.ctx);xVal=xFormat.xLabelFormat(w.globals.ttKeyFormatter,bufferXVal,bufferXVal);}else{if(!w.globals.isBarHorizontal){xVal=w.globals.xLabelFormatter(bufferXVal,customFormatterOpts);}}// override default x-axis formatter with tooltip formatter
if(w.config.tooltip.x.formatter!==undefined){xVal=w.globals.ttKeyFormatter(bufferXVal,customFormatterOpts);}if(w.globals.seriesZ.length>0&&w.globals.seriesZ[0].length>0){zVal=zFormatter(w.globals.seriesZ[i][j],w);}if(typeof w.config.xaxis.tooltip.formatter==='function'){xAxisTTVal=w.globals.xaxisTooltipFormatter(bufferXVal,customFormatterOpts);}else{xAxisTTVal=xVal;}return{val:Array.isArray(val)?val.join(' '):val,xVal:Array.isArray(xVal)?xVal.join(' '):xVal,xAxisTTVal:Array.isArray(xAxisTTVal)?xAxisTTVal.join(' '):xAxisTTVal,zVal:zVal};}},{key:"handleCustomTooltip",value:function handleCustomTooltip(_ref6){var i=_ref6.i,j=_ref6.j,y1=_ref6.y1,y2=_ref6.y2,w=_ref6.w;var tooltipEl=this.ttCtx.getElTooltip();var fn=w.config.tooltip.custom;if(Array.isArray(fn)&&fn[i]){fn=fn[i];}// override everything with a custom html tooltip and replace it
tooltipEl.innerHTML=fn({ctx:this.ctx,series:w.globals.series,seriesIndex:i,dataPointIndex:j,y1:y1,y2:y2,w:w});}}]);return Labels;}();/**
   * ApexCharts Tooltip.Position Class to move the tooltip based on x and y position.
   *
   * @module Tooltip.Position
   **/var Position=/*#__PURE__*/function(){function Position(tooltipContext){_classCallCheck(this,Position);this.ttCtx=tooltipContext;this.ctx=tooltipContext.ctx;this.w=tooltipContext.w;}/**
     * This will move the crosshair (the vertical/horz line that moves along with mouse)
     * Along with this, this function also calls the xaxisMove function
     * @memberof Position
     * @param {int} - cx = point's x position, wherever point's x is, you need to move crosshair
     */_createClass(Position,[{key:"moveXCrosshairs",value:function moveXCrosshairs(cx){var j=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var ttCtx=this.ttCtx;var w=this.w;var xcrosshairs=ttCtx.getElXCrosshairs();var x=cx-ttCtx.xcrosshairsWidth/2;var tickAmount=w.globals.labels.slice().length;if(j!==null){x=w.globals.gridWidth/tickAmount*j;}if(xcrosshairs!==null){xcrosshairs.setAttribute('x',x);xcrosshairs.setAttribute('x1',x);xcrosshairs.setAttribute('x2',x);xcrosshairs.setAttribute('y2',w.globals.gridHeight);xcrosshairs.classList.add('apexcharts-active');}if(x<0){x=0;}if(x>w.globals.gridWidth){x=w.globals.gridWidth;}if(ttCtx.blxaxisTooltip){var tx=x;if(w.config.xaxis.crosshairs.width==='tickWidth'||w.config.xaxis.crosshairs.width==='barWidth'){tx=x+ttCtx.xcrosshairsWidth/2;}this.moveXAxisTooltip(tx);}}/**
       * This will move the crosshair (the vertical/horz line that moves along with mouse)
       * Along with this, this function also calls the xaxisMove function
       * @memberof Position
       * @param {int} - cx = point's x position, wherever point's x is, you need to move crosshair
       */},{key:"moveYCrosshairs",value:function moveYCrosshairs(cy){var ttCtx=this.ttCtx;if(ttCtx.ycrosshairs!==null){Graphics.setAttrs(ttCtx.ycrosshairs,{y1:cy,y2:cy});Graphics.setAttrs(ttCtx.ycrosshairsHidden,{y1:cy,y2:cy});}}/**
       ** AxisTooltip is the small rectangle which appears on x axis with x value, when user moves
       * @memberof Position
       * @param {int} - cx = point's x position, wherever point's x is, you need to move
       */},{key:"moveXAxisTooltip",value:function moveXAxisTooltip(cx){var w=this.w;var ttCtx=this.ttCtx;if(ttCtx.xaxisTooltip!==null){ttCtx.xaxisTooltip.classList.add('apexcharts-active');var cy=ttCtx.xaxisOffY+w.config.xaxis.tooltip.offsetY+w.globals.translateY+1+w.config.xaxis.offsetY;var xaxisTTText=ttCtx.xaxisTooltip.getBoundingClientRect();var xaxisTTTextWidth=xaxisTTText.width;cx=cx-xaxisTTTextWidth/2;if(!isNaN(cx)){cx=cx+w.globals.translateX;var textRect=0;var graphics=new Graphics(this.ctx);textRect=graphics.getTextRects(ttCtx.xaxisTooltipText.innerHTML);ttCtx.xaxisTooltipText.style.minWidth=textRect.width+'px';ttCtx.xaxisTooltip.style.left=cx+'px';ttCtx.xaxisTooltip.style.top=cy+'px';}}}},{key:"moveYAxisTooltip",value:function moveYAxisTooltip(index){var w=this.w;var ttCtx=this.ttCtx;if(ttCtx.yaxisTTEls===null){ttCtx.yaxisTTEls=w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxistooltip');}var ycrosshairsHiddenRectY1=parseInt(ttCtx.ycrosshairsHidden.getAttribute('y1'),10);var cy=w.globals.translateY+ycrosshairsHiddenRectY1;var yAxisTTRect=ttCtx.yaxisTTEls[index].getBoundingClientRect();var yAxisTTHeight=yAxisTTRect.height;var cx=w.globals.translateYAxisX[index]-2;if(w.config.yaxis[index].opposite){cx=cx-26;}cy=cy-yAxisTTHeight/2;if(w.globals.ignoreYAxisIndexes.indexOf(index)===-1){ttCtx.yaxisTTEls[index].classList.add('apexcharts-active');ttCtx.yaxisTTEls[index].style.top=cy+'px';ttCtx.yaxisTTEls[index].style.left=cx+w.config.yaxis[index].tooltip.offsetX+'px';}else{ttCtx.yaxisTTEls[index].classList.remove('apexcharts-active');}}/**
       ** moves the whole tooltip by changing x, y attrs
       * @memberof Position
       * @param {int} - cx = point's x position, wherever point's x is, you need to move tooltip
       * @param {int} - cy = point's y position, wherever point's y is, you need to move tooltip
       * @param {int} - r = point's radius
       */},{key:"moveTooltip",value:function moveTooltip(cx,cy){var r=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var w=this.w;var ttCtx=this.ttCtx;var tooltipEl=ttCtx.getElTooltip();var tooltipRect=ttCtx.tooltipRect;var pointR=r!==null?parseFloat(r):1;var x=parseFloat(cx)+pointR+5;var y=parseFloat(cy)+pointR/2;// - tooltipRect.ttHeight / 2
if(x>w.globals.gridWidth/2){x=x-tooltipRect.ttWidth-pointR-15;}if(x>w.globals.gridWidth-tooltipRect.ttWidth-10){x=w.globals.gridWidth-tooltipRect.ttWidth;}if(x<-20){x=-20;}if(w.config.tooltip.followCursor){var elGrid=ttCtx.getElGrid();var seriesBound=elGrid.getBoundingClientRect();y=ttCtx.e.clientY+w.globals.translateY-seriesBound.top-tooltipRect.ttHeight/2;}if(!w.config.tooltip.followCursor){var newPositions=this.positionChecks(tooltipRect,x,y);x=newPositions.x;y=newPositions.y;}if(!isNaN(x)){x=x+w.globals.translateX;tooltipEl.style.left=x+'px';tooltipEl.style.top=y+'px';}}},{key:"positionChecks",value:function positionChecks(tooltipRect,x,y){var w=this.w;if(tooltipRect.ttHeight/2+y>w.globals.gridHeight){y=w.globals.gridHeight-tooltipRect.ttHeight+w.globals.translateY;}if(y<0){y=0;}return{x:x,y:y};}},{key:"moveMarkers",value:function moveMarkers(i,j){var w=this.w;var ttCtx=this.ttCtx;if(w.globals.markers.size[i]>0){var allPoints=w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(i,"'] .apexcharts-marker"));for(var p=0;p<allPoints.length;p++){if(parseInt(allPoints[p].getAttribute('rel'),10)===j){ttCtx.marker.resetPointsSize();ttCtx.marker.enlargeCurrentPoint(j,allPoints[p]);}}}else{ttCtx.marker.resetPointsSize();this.moveDynamicPointOnHover(j,i);}}// This function is used when you need to show markers/points only on hover -
// DIFFERENT X VALUES in multiple series
},{key:"moveDynamicPointOnHover",value:function moveDynamicPointOnHover(j,capturedSeries){var w=this.w;var ttCtx=this.ttCtx;var cx=0;var cy=0;var pointsArr=w.globals.pointsArray;var hoverSize=ttCtx.tooltipUtil.getHoverMarkerSize(capturedSeries);var serType=w.config.series[capturedSeries].type;if(serType&&(serType==='column'||serType==='candlestick')){// fix error mentioned in #811
return;}cx=pointsArr[capturedSeries][j][0];cy=pointsArr[capturedSeries][j][1]?pointsArr[capturedSeries][j][1]:0;var point=w.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(capturedSeries,"'] .apexcharts-series-markers circle"));if(point){point.setAttribute('r',hoverSize);point.setAttribute('cx',cx);point.setAttribute('cy',cy);}// point.style.opacity = w.config.markers.hover.opacity
this.moveXCrosshairs(cx);if(!ttCtx.fixedTooltip){this.moveTooltip(cx,cy,hoverSize);}}// This function is used when you need to show markers/points only on hover -
// SAME X VALUES in multiple series
},{key:"moveDynamicPointsOnHover",value:function moveDynamicPointsOnHover(j){var ttCtx=this.ttCtx;var w=ttCtx.w;var cx=0;var cy=0;var activeSeries=0;var pointsArr=w.globals.pointsArray;var series=new Series(this.ctx);activeSeries=series.getActiveConfigSeriesIndex(true);var hoverSize=ttCtx.tooltipUtil.getHoverMarkerSize(activeSeries);if(pointsArr[activeSeries]){cx=pointsArr[activeSeries][j][0];cy=pointsArr[activeSeries][j][1];}var points=ttCtx.tooltipUtil.getAllMarkers();if(points!==null){for(var p=0;p<w.globals.series.length;p++){var pointArr=pointsArr[p];if(w.globals.comboCharts){// in a combo chart, if column charts are present, markers will not match with the number of series, hence this patch to push a null value in points array
if(typeof pointArr==='undefined'){// nodelist to array
points.splice(p,0,null);}}if(pointArr&&pointArr.length){var pcy=pointsArr[p][j][1];points[p].setAttribute('cx',cx);if(pcy!==null&&!isNaN(pcy)){points[p]&&points[p].setAttribute('r',hoverSize);points[p]&&points[p].setAttribute('cy',pcy);}else{points[p]&&points[p].setAttribute('r',0);}}}}this.moveXCrosshairs(cx);if(!ttCtx.fixedTooltip){var tcy=cy||w.globals.gridHeight;this.moveTooltip(cx,tcy,hoverSize);}}},{key:"moveStickyTooltipOverBars",value:function moveStickyTooltipOverBars(j){var w=this.w;var ttCtx=this.ttCtx;var barLen=w.globals.columnSeries?w.globals.columnSeries.length:w.globals.series.length;var i=barLen>=2&&barLen%2===0?Math.floor(barLen/2):Math.floor(barLen/2)+1;var jBar=w.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(i,"'] path[j='").concat(j,"'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(i,"'] path[j='").concat(j,"'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(i,"'] path[j='").concat(j,"']"));var bcx=jBar?parseFloat(jBar.getAttribute('cx')):0;var bcy=0;var bw=jBar?parseFloat(jBar.getAttribute('barWidth')):0;if(w.globals.isXNumeric){bcx=bcx-(barLen%2!==0?bw/2:0);}else{bcx=ttCtx.xAxisTicksPositions[j-1]+ttCtx.dataPointsDividedWidth/2;if(isNaN(bcx)){bcx=ttCtx.xAxisTicksPositions[j]-ttCtx.dataPointsDividedWidth/2;}}// tooltip will move vertically along with mouse as it is a shared tooltip
var elGrid=ttCtx.getElGrid();var seriesBound=elGrid.getBoundingClientRect();bcy=ttCtx.e.clientY-seriesBound.top-ttCtx.tooltipRect.ttHeight/2;this.moveXCrosshairs(bcx);if(!ttCtx.fixedTooltip){var tcy=bcy||w.globals.gridHeight;this.moveTooltip(bcx,tcy);}}}]);return Position;}();/**
   * ApexCharts Tooltip.Marker Class to draw texts on the tooltip.
   *
   * @module Tooltip.Marker
   **/var Marker=/*#__PURE__*/function(){function Marker(tooltipContext){_classCallCheck(this,Marker);this.w=tooltipContext.w;this.ttCtx=tooltipContext;this.ctx=tooltipContext.ctx;this.tooltipPosition=new Position(tooltipContext);}_createClass(Marker,[{key:"drawDynamicPoints",value:function drawDynamicPoints(){var w=this.w;var graphics=new Graphics(this.ctx);var marker=new Markers(this.ctx);var elsSeries=w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');elsSeries=_toConsumableArray(elsSeries);elsSeries.sort(function(a,b){return Number(b.getAttribute('data:realIndex'))<Number(a.getAttribute('data:realIndex'))?0:-1;});for(var i=0;i<elsSeries.length;i++){var pointsMain=elsSeries[i].querySelector(".apexcharts-series-markers-wrap");if(pointsMain!==null){// it can be null as we have tooltips in donut/bar charts
var point=void 0;var PointClasses="apexcharts-marker w".concat((Math.random()+1).toString(36).substring(4));if((w.config.chart.type==='line'||w.config.chart.type==='area')&&!w.globals.comboCharts&&!w.config.tooltip.intersect){PointClasses+=' no-pointer-events';}var elPointOptions=marker.getMarkerConfig(PointClasses,i);point=graphics.drawMarker(0,0,elPointOptions);point.node.setAttribute('default-marker-size',0);var elPointsG=document.createElementNS(w.globals.SVGNS,'g');elPointsG.classList.add('apexcharts-series-markers');elPointsG.appendChild(point.node);pointsMain.appendChild(elPointsG);}}}},{key:"enlargeCurrentPoint",value:function enlargeCurrentPoint(rel,point){var x=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var y=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var w=this.w;if(w.config.chart.type!=='bubble'){this.newPointSize(rel,point);}var cx=point.getAttribute('cx');var cy=point.getAttribute('cy');if(x!==null&&y!==null){cx=x;cy=y;}this.tooltipPosition.moveXCrosshairs(cx);if(!this.fixedTooltip){if(w.config.chart.type==='radar'){var elGrid=this.ttCtx.getElGrid();var seriesBound=elGrid.getBoundingClientRect();cx=this.ttCtx.e.clientX-seriesBound.left;}this.tooltipPosition.moveTooltip(cx,cy,w.config.markers.hover.size);}}},{key:"enlargePoints",value:function enlargePoints(j){var w=this.w;var me=this;var ttCtx=this.ttCtx;var col=j;var points=w.globals.dom.baseEl.querySelectorAll('.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker');var newSize=w.config.markers.hover.size;for(var p=0;p<points.length;p++){var rel=points[p].getAttribute('rel');var index=points[p].getAttribute('index');if(newSize===undefined){newSize=w.globals.markers.size[index]+w.config.markers.hover.sizeOffset;}if(col===parseInt(rel,10)){me.newPointSize(col,points[p]);var cx=points[p].getAttribute('cx');var cy=points[p].getAttribute('cy');me.tooltipPosition.moveXCrosshairs(cx);if(!ttCtx.fixedTooltip){me.tooltipPosition.moveTooltip(cx,cy,newSize);}}else{me.oldPointSize(points[p]);}}}},{key:"newPointSize",value:function newPointSize(rel,point){var w=this.w;var newSize=w.config.markers.hover.size;var elPoint=rel===0?point.parentNode.firstChild:point.parentNode.lastChild;if(elPoint.getAttribute('default-marker-size')!=='0'){var index=parseInt(elPoint.getAttribute('index'),10);if(newSize===undefined){newSize=w.globals.markers.size[index]+w.config.markers.hover.sizeOffset;}elPoint.setAttribute('r',newSize);}}},{key:"oldPointSize",value:function oldPointSize(point){var size=parseFloat(point.getAttribute('default-marker-size'));point.setAttribute('r',size);}},{key:"resetPointsSize",value:function resetPointsSize(){var w=this.w;var points=w.globals.dom.baseEl.querySelectorAll('.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker');for(var p=0;p<points.length;p++){var size=parseFloat(points[p].getAttribute('default-marker-size'));if(Utils.isNumber(size)){points[p].setAttribute('r',size);}else{points[p].setAttribute('r',0);}}}}]);return Marker;}();/**
   * ApexCharts Tooltip.Intersect Class.
   *
   * @module Tooltip.Intersect
   **/var Intersect=/*#__PURE__*/function(){function Intersect(tooltipContext){_classCallCheck(this,Intersect);this.w=tooltipContext.w;this.ttCtx=tooltipContext;}_createClass(Intersect,[{key:"getAttr",value:function getAttr(e,attr){return parseFloat(e.target.getAttribute(attr));}},{key:"handleHeatTooltip",value:function handleHeatTooltip(_ref){var e=_ref.e,opt=_ref.opt,x=_ref.x,y=_ref.y;var ttCtx=this.ttCtx;var w=this.w;if(e.target.classList.contains('apexcharts-heatmap-rect')){var i=this.getAttr(e,'i');var j=this.getAttr(e,'j');var cx=this.getAttr(e,'cx');var cy=this.getAttr(e,'cy');var width=this.getAttr(e,'width');var height=this.getAttr(e,'height');ttCtx.tooltipLabels.drawSeriesTexts({ttItems:opt.ttItems,i:i,j:j,shared:false});w.globals.capturedSeriesIndex=i;w.globals.capturedDataPointIndex=j;x=cx+ttCtx.tooltipRect.ttWidth/2+width;y=cy+ttCtx.tooltipRect.ttHeight/2-height/2;ttCtx.tooltipPosition.moveXCrosshairs(cx+width/2);if(x>w.globals.gridWidth/2){x=cx-ttCtx.tooltipRect.ttWidth/2+width;}if(ttCtx.w.config.tooltip.followCursor){var elGrid=ttCtx.getElGrid();var seriesBound=elGrid.getBoundingClientRect();// x = ttCtx.e.clientX - seriesBound.left
y=ttCtx.e.clientY-seriesBound.top+w.globals.translateY/2-10;}}return{x:x,y:y};}},{key:"handleMarkerTooltip",value:function handleMarkerTooltip(_ref2){var e=_ref2.e,opt=_ref2.opt,x=_ref2.x,y=_ref2.y;var w=this.w;var ttCtx=this.ttCtx;var i;var j;if(e.target.classList.contains('apexcharts-marker')){var cx=parseInt(opt.paths.getAttribute('cx'),10);var cy=parseInt(opt.paths.getAttribute('cy'),10);var val=parseFloat(opt.paths.getAttribute('val'));j=parseInt(opt.paths.getAttribute('rel'),10);i=parseInt(opt.paths.parentNode.parentNode.parentNode.getAttribute('rel'),10)-1;if(ttCtx.intersect){var el=Utils.findAncestor(opt.paths,'apexcharts-series');if(el){i=parseInt(el.getAttribute('data:realIndex'),10);}}ttCtx.tooltipLabels.drawSeriesTexts({ttItems:opt.ttItems,i:i,j:j,shared:ttCtx.showOnIntersect?false:w.config.tooltip.shared});if(e.type==='mouseup'){ttCtx.markerClick(e,i,j);}w.globals.capturedSeriesIndex=i;w.globals.capturedDataPointIndex=j;x=cx;y=cy+w.globals.translateY-ttCtx.tooltipRect.ttHeight*1.4;if(ttCtx.w.config.tooltip.followCursor){var elGrid=ttCtx.getElGrid();var seriesBound=elGrid.getBoundingClientRect();y=ttCtx.e.clientY+w.globals.translateY-seriesBound.top;}if(val<0){y=cy;}ttCtx.marker.enlargeCurrentPoint(j,opt.paths,x,y);}return{x:x,y:y};}},{key:"handleBarTooltip",value:function handleBarTooltip(_ref3){var e=_ref3.e,opt=_ref3.opt;var w=this.w;var ttCtx=this.ttCtx;var tooltipEl=ttCtx.getElTooltip();var bx=0;var x=0;var y=0;var i=0;var strokeWidth;var barXY=this.getBarTooltipXY({e:e,opt:opt});i=barXY.i;var barHeight=barXY.barHeight;var j=barXY.j;w.globals.capturedSeriesIndex=i;w.globals.capturedDataPointIndex=j;if(w.globals.isBarHorizontal&&ttCtx.tooltipUtil.hasBars()||!w.config.tooltip.shared){x=barXY.x;y=barXY.y;strokeWidth=Array.isArray(w.config.stroke.width)?w.config.stroke.width[i]:w.config.stroke.width;bx=x;}else{if(!w.globals.comboCharts&&!w.config.tooltip.shared){bx=bx/2;}}// y is NaN, make it touch the bottom of grid area
if(isNaN(y)){y=w.globals.svgHeight-ttCtx.tooltipRect.ttHeight;}else if(y<0){y=0;}if(x+ttCtx.tooltipRect.ttWidth>w.globals.gridWidth){x=x-ttCtx.tooltipRect.ttWidth;}else if(x<0){x=0;}if(ttCtx.w.config.tooltip.followCursor){var elGrid=ttCtx.getElGrid();var seriesBound=elGrid.getBoundingClientRect();y=ttCtx.e.clientY-seriesBound.top;}// if tooltip is still null, querySelector
if(ttCtx.tooltip===null){ttCtx.tooltip=w.globals.dom.baseEl.querySelector('.apexcharts-tooltip');}if(!w.config.tooltip.shared){if(w.globals.comboBarCount>0){ttCtx.tooltipPosition.moveXCrosshairs(bx+strokeWidth/2);}else{ttCtx.tooltipPosition.moveXCrosshairs(bx);}}// move tooltip here
if(!ttCtx.fixedTooltip&&(!w.config.tooltip.shared||w.globals.isBarHorizontal&&ttCtx.tooltipUtil.hasBars())){var isReversed=w.globals.isMultipleYAxis?w.config.yaxis[seriesIndex]&&w.config.yaxis[seriesIndex].reversed:w.config.yaxis[0].reversed;if(isReversed){x=x-ttCtx.tooltipRect.ttWidth;if(x<0){x=0;}}tooltipEl.style.left=x+w.globals.translateX+'px';var seriesIndex=parseInt(opt.paths.parentNode.getAttribute('data:realIndex'),10);if(isReversed&&!(w.globals.isBarHorizontal&&ttCtx.tooltipUtil.hasBars())){y=y+barHeight-(w.globals.series[i][j]<0?barHeight:0)*2;}if(ttCtx.tooltipRect.ttHeight+y>w.globals.gridHeight){y=w.globals.gridHeight-ttCtx.tooltipRect.ttHeight+w.globals.translateY;tooltipEl.style.top=y+'px';}else{tooltipEl.style.top=y+w.globals.translateY-ttCtx.tooltipRect.ttHeight/2+'px';}}}},{key:"getBarTooltipXY",value:function getBarTooltipXY(_ref4){var e=_ref4.e,opt=_ref4.opt;var w=this.w;var j=null;var ttCtx=this.ttCtx;var i=0;var x=0;var y=0;var barWidth=0;var barHeight=0;var cl=e.target.classList;if(cl.contains('apexcharts-bar-area')||cl.contains('apexcharts-candlestick-area')||cl.contains('apexcharts-rangebar-area')){var bar=e.target;var barRect=bar.getBoundingClientRect();var seriesBound=opt.elGrid.getBoundingClientRect();var bh=barRect.height;barHeight=barRect.height;var bw=barRect.width;var cx=parseInt(bar.getAttribute('cx'),10);var cy=parseInt(bar.getAttribute('cy'),10);barWidth=parseFloat(bar.getAttribute('barWidth'));var clientX=e.type==='touchmove'?e.touches[0].clientX:e.clientX;j=parseInt(bar.getAttribute('j'),10);i=parseInt(bar.parentNode.getAttribute('rel'),10)-1;var y1=bar.getAttribute('data-range-y1');var y2=bar.getAttribute('data-range-y2');if(w.globals.comboCharts){i=parseInt(bar.parentNode.getAttribute('data:realIndex'),10);}// if (w.config.tooltip.shared) {
// this check not needed  at the moment
//   const yDivisor = w.globals.gridHeight / (w.globals.series.length)
//   const hoverY = ttCtx.clientY - ttCtx.seriesBound.top
//   j = Math.ceil(hoverY / yDivisor)
// }
ttCtx.tooltipLabels.drawSeriesTexts({ttItems:opt.ttItems,i:i,j:j,y1:y1?parseInt(y1,10):null,y2:y2?parseInt(y2,10):null,shared:ttCtx.showOnIntersect?false:w.config.tooltip.shared});if(w.config.tooltip.followCursor){if(w.globals.isBarHorizontal){x=clientX-seriesBound.left+15;y=cy-ttCtx.dataPointsDividedHeight+bh/2-ttCtx.tooltipRect.ttHeight/2;}else{if(w.globals.isXNumeric){x=cx-bw/2;}else{x=cx-ttCtx.dataPointsDividedWidth+bw/2;}y=e.clientY-seriesBound.top-ttCtx.tooltipRect.ttHeight/2-15;}}else{if(w.globals.isBarHorizontal){x=cx;if(x<ttCtx.xyRatios.baseLineInvertedY){x=cx-ttCtx.tooltipRect.ttWidth;}y=cy-ttCtx.dataPointsDividedHeight+bh/2-ttCtx.tooltipRect.ttHeight/2;}else{// if columns
if(w.globals.isXNumeric){x=cx-bw/2;}else{x=cx-ttCtx.dataPointsDividedWidth+bw/2;}y=cy;// - ttCtx.tooltipRect.ttHeight / 2 + 10
}}}return{x:x,y:y,barHeight:barHeight,barWidth:barWidth,i:i,j:j};}}]);return Intersect;}();/**
   * ApexCharts Tooltip.AxesTooltip Class.
   *
   * @module Tooltip.AxesTooltip
   **/var AxesTooltip=/*#__PURE__*/function(){function AxesTooltip(tooltipContext){_classCallCheck(this,AxesTooltip);this.w=tooltipContext.w;this.ttCtx=tooltipContext;}/**
     * This method adds the secondary tooltip which appears below x axis
     * @memberof Tooltip
     **/_createClass(AxesTooltip,[{key:"drawXaxisTooltip",value:function drawXaxisTooltip(){var w=this.w;var ttCtx=this.ttCtx;var isBottom=w.config.xaxis.position==='bottom';ttCtx.xaxisOffY=isBottom?w.globals.gridHeight+1:-w.globals.xAxisHeight-w.config.xaxis.axisTicks.height+3;var tooltipCssClass=isBottom?'apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom':'apexcharts-xaxistooltip apexcharts-xaxistooltip-top';var renderTo=w.globals.dom.elWrap;if(ttCtx.blxaxisTooltip){var xaxisTooltip=w.globals.dom.baseEl.querySelector('.apexcharts-xaxistooltip');if(xaxisTooltip===null){ttCtx.xaxisTooltip=document.createElement('div');ttCtx.xaxisTooltip.setAttribute('class',tooltipCssClass+' apexcharts-theme-'+w.config.tooltip.theme);renderTo.appendChild(ttCtx.xaxisTooltip);ttCtx.xaxisTooltipText=document.createElement('div');ttCtx.xaxisTooltipText.classList.add('apexcharts-xaxistooltip-text');ttCtx.xaxisTooltipText.style.fontFamily=w.config.xaxis.tooltip.style.fontFamily||w.config.chart.fontFamily;ttCtx.xaxisTooltipText.style.fontSize=w.config.xaxis.tooltip.style.fontSize;ttCtx.xaxisTooltip.appendChild(ttCtx.xaxisTooltipText);}}}/**
       * This method adds the secondary tooltip which appears below x axis
       * @memberof Tooltip
       **/},{key:"drawYaxisTooltip",value:function drawYaxisTooltip(){var w=this.w;var ttCtx=this.ttCtx;var _loop=function _loop(i){var isRight=w.config.yaxis[i].opposite||w.config.yaxis[i].crosshairs.opposite;ttCtx.yaxisOffX=isRight?w.globals.gridWidth+1:1;var tooltipCssClass=isRight?"apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i," apexcharts-yaxistooltip-right"):"apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i," apexcharts-yaxistooltip-left");w.globals.yAxisSameScaleIndices.map(function(samescales,ssi){samescales.map(function(s,si){if(si===i){tooltipCssClass+=w.config.yaxis[si].show?" ":" apexcharts-yaxistooltip-hidden";}});});var renderTo=w.globals.dom.elWrap;if(ttCtx.blyaxisTooltip){var yaxisTooltip=w.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i));if(yaxisTooltip===null){ttCtx.yaxisTooltip=document.createElement('div');ttCtx.yaxisTooltip.setAttribute('class',tooltipCssClass+' apexcharts-theme-'+w.config.tooltip.theme);renderTo.appendChild(ttCtx.yaxisTooltip);if(i===0)ttCtx.yaxisTooltipText=[];ttCtx.yaxisTooltipText.push(document.createElement('div'));ttCtx.yaxisTooltipText[i].classList.add('apexcharts-yaxistooltip-text');ttCtx.yaxisTooltip.appendChild(ttCtx.yaxisTooltipText[i]);}}};for(var i=0;i<w.config.yaxis.length;i++){_loop(i);}}/**
       * @memberof Tooltip
       **/},{key:"setXCrosshairWidth",value:function setXCrosshairWidth(){var w=this.w;var ttCtx=this.ttCtx;// set xcrosshairs width
var xcrosshairs=ttCtx.getElXCrosshairs();ttCtx.xcrosshairsWidth=parseInt(w.config.xaxis.crosshairs.width,10);if(!w.globals.comboCharts){if(w.config.xaxis.crosshairs.width==='tickWidth'){var count=w.globals.labels.length;ttCtx.xcrosshairsWidth=w.globals.gridWidth/count;}else if(w.config.xaxis.crosshairs.width==='barWidth'){var bar=w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');if(bar!==null){var barWidth=parseFloat(bar.getAttribute('barWidth'));ttCtx.xcrosshairsWidth=barWidth;}else{ttCtx.xcrosshairsWidth=1;}}}else{var _bar=w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');if(_bar!==null&&w.config.xaxis.crosshairs.width==='barWidth'){var _barWidth=parseFloat(_bar.getAttribute('barWidth'));ttCtx.xcrosshairsWidth=_barWidth;}else{if(w.config.xaxis.crosshairs.width==='tickWidth'){var _count=w.globals.labels.length;ttCtx.xcrosshairsWidth=w.globals.gridWidth/_count;}}}if(w.globals.isBarHorizontal){ttCtx.xcrosshairsWidth=0;}if(xcrosshairs!==null&&ttCtx.xcrosshairsWidth>0){xcrosshairs.setAttribute('width',ttCtx.xcrosshairsWidth);}}},{key:"handleYCrosshair",value:function handleYCrosshair(){var w=this.w;var ttCtx=this.ttCtx;// set ycrosshairs height
ttCtx.ycrosshairs=w.globals.dom.baseEl.querySelector('.apexcharts-ycrosshairs');ttCtx.ycrosshairsHidden=w.globals.dom.baseEl.querySelector('.apexcharts-ycrosshairs-hidden');}},{key:"drawYaxisTooltipText",value:function drawYaxisTooltipText(index,clientY,xyRatios){var ttCtx=this.ttCtx;var w=this.w;var lbFormatter=w.globals.yLabelFormatters[index];if(ttCtx.blyaxisTooltip){var elGrid=ttCtx.getElGrid();var seriesBound=elGrid.getBoundingClientRect();var hoverY=(clientY-seriesBound.top)*xyRatios.yRatio[index];var height=w.globals.maxYArr[index]-w.globals.minYArr[index];var val=w.globals.minYArr[index]+(height-hoverY);ttCtx.tooltipPosition.moveYCrosshairs(clientY-seriesBound.top);ttCtx.yaxisTooltipText[index].innerHTML=lbFormatter(val);ttCtx.tooltipPosition.moveYAxisTooltip(index);}}}]);return AxesTooltip;}();/**
   * ApexCharts Core Tooltip Class to handle the tooltip generation.
   *
   * @module Tooltip
   **/var Tooltip=/*#__PURE__*/function(){function Tooltip(ctx){_classCallCheck(this,Tooltip);this.ctx=ctx;this.w=ctx.w;var w=this.w;this.tConfig=w.config.tooltip;this.tooltipUtil=new Utils$1(this);this.tooltipLabels=new Labels(this);this.tooltipPosition=new Position(this);this.marker=new Marker(this);this.intersect=new Intersect(this);this.axesTooltip=new AxesTooltip(this);this.showOnIntersect=this.tConfig.intersect;this.showTooltipTitle=this.tConfig.x.show;this.fixedTooltip=this.tConfig.fixed.enabled;this.xaxisTooltip=null;this.yaxisTTEls=null;this.isBarShared=!w.globals.isBarHorizontal&&this.tConfig.shared;}_createClass(Tooltip,[{key:"getElTooltip",value:function getElTooltip(ctx){if(!ctx)ctx=this;return ctx.w.globals.dom.baseEl.querySelector('.apexcharts-tooltip');}},{key:"getElXCrosshairs",value:function getElXCrosshairs(){return this.w.globals.dom.baseEl.querySelector('.apexcharts-xcrosshairs');}},{key:"getElGrid",value:function getElGrid(){return this.w.globals.dom.baseEl.querySelector('.apexcharts-grid');}},{key:"drawTooltip",value:function drawTooltip(xyRatios){var w=this.w;this.xyRatios=xyRatios;this.blxaxisTooltip=w.config.xaxis.tooltip.enabled&&w.globals.axisCharts;this.blyaxisTooltip=w.config.yaxis[0].tooltip.enabled&&w.globals.axisCharts;this.allTooltipSeriesGroups=[];if(!w.globals.axisCharts){this.showTooltipTitle=false;}var tooltipEl=document.createElement('div');tooltipEl.classList.add('apexcharts-tooltip');tooltipEl.classList.add("apexcharts-theme-".concat(this.tConfig.theme));w.globals.dom.elWrap.appendChild(tooltipEl);if(w.globals.axisCharts){this.axesTooltip.drawXaxisTooltip();this.axesTooltip.drawYaxisTooltip();this.axesTooltip.setXCrosshairWidth();this.axesTooltip.handleYCrosshair();var xAxis=new XAxis(this.ctx);this.xAxisTicksPositions=xAxis.getXAxisTicksPositions();}// we forcefully set intersect true for these conditions
if((w.globals.comboCharts||this.tConfig.intersect||w.config.chart.type==='bar'||w.config.chart.type==='rangeBar')&&!this.tConfig.shared){this.showOnIntersect=true;}if(w.config.markers.size===0||w.globals.markers.largestSize===0){// when user don't want to show points all the time, but only on when hovering on series
this.marker.drawDynamicPoints(this);}// no visible series, exit
if(w.globals.collapsedSeries.length===w.globals.series.length)return;this.dataPointsDividedHeight=w.globals.gridHeight/w.globals.dataPoints;this.dataPointsDividedWidth=w.globals.gridWidth/w.globals.dataPoints;if(this.showTooltipTitle){this.tooltipTitle=document.createElement('div');this.tooltipTitle.classList.add('apexcharts-tooltip-title');this.tooltipTitle.style.fontFamily=this.tConfig.style.fontFamily||w.config.chart.fontFamily;this.tooltipTitle.style.fontSize=this.tConfig.style.fontSize;tooltipEl.appendChild(this.tooltipTitle);}var ttItemsCnt=w.globals.series.length;// whether shared or not, default is shared
if((w.globals.xyCharts||w.globals.comboCharts)&&this.tConfig.shared){if(!this.showOnIntersect){ttItemsCnt=w.globals.series.length;}else{ttItemsCnt=1;}}this.legendLabels=w.globals.dom.baseEl.querySelectorAll('.apexcharts-legend-text');this.ttItems=this.createTTElements(ttItemsCnt);this.addSVGEvents();}},{key:"createTTElements",value:function createTTElements(ttItemsCnt){var w=this.w;var ttItems=[];var tooltipEl=this.getElTooltip();for(var i=0;i<ttItemsCnt;i++){var gTxt=document.createElement('div');gTxt.classList.add('apexcharts-tooltip-series-group');if(this.tConfig.shared&&this.tConfig.enabledOnSeries&&Array.isArray(this.tConfig.enabledOnSeries)){if(this.tConfig.enabledOnSeries.indexOf(i)<0){gTxt.classList.add('apexcharts-tooltip-series-group-hidden');}}var point=document.createElement('span');point.classList.add('apexcharts-tooltip-marker');point.style.backgroundColor=w.globals.colors[i];gTxt.appendChild(point);var gYZ=document.createElement('div');gYZ.classList.add('apexcharts-tooltip-text');gYZ.style.fontFamily=this.tConfig.style.fontFamily||w.config.chart.fontFamily;gYZ.style.fontSize=this.tConfig.style.fontSize;// y values group
var gYValText=document.createElement('div');gYValText.classList.add('apexcharts-tooltip-y-group');var txtLabel=document.createElement('span');txtLabel.classList.add('apexcharts-tooltip-text-label');gYValText.appendChild(txtLabel);var txtValue=document.createElement('span');txtValue.classList.add('apexcharts-tooltip-text-value');gYValText.appendChild(txtValue);// z values group
var gZValText=document.createElement('div');gZValText.classList.add('apexcharts-tooltip-z-group');var txtZLabel=document.createElement('span');txtZLabel.classList.add('apexcharts-tooltip-text-z-label');gZValText.appendChild(txtZLabel);var txtZValue=document.createElement('span');txtZValue.classList.add('apexcharts-tooltip-text-z-value');gZValText.appendChild(txtZValue);gYZ.appendChild(gYValText);gYZ.appendChild(gZValText);gTxt.appendChild(gYZ);tooltipEl.appendChild(gTxt);ttItems.push(gTxt);}return ttItems;}},{key:"addSVGEvents",value:function addSVGEvents(){var w=this.w;var type=w.config.chart.type;var tooltipEl=this.getElTooltip();var commonBar=!!(type==='bar'||type==='candlestick'||type==='rangeBar');var chartWithmarkers=type==='area'||type==='line'||type==='scatter'||type==='bubble'||type==='radar';var hoverArea=w.globals.dom.Paper.node;var elGrid=this.getElGrid();if(elGrid){this.seriesBound=elGrid.getBoundingClientRect();}var tooltipY=[];var tooltipX=[];var seriesHoverParams={hoverArea:hoverArea,elGrid:elGrid,tooltipEl:tooltipEl,tooltipY:tooltipY,tooltipX:tooltipX,ttItems:this.ttItems};var points;if(w.globals.axisCharts){if(chartWithmarkers){points=w.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker");}else if(commonBar){points=w.globals.dom.baseEl.querySelectorAll('.apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-rangebar-area');}else if(type==='heatmap'){points=w.globals.dom.baseEl.querySelectorAll('.apexcharts-series .apexcharts-heatmap');}if(points&&points.length){for(var p=0;p<points.length;p++){tooltipY.push(points[p].getAttribute('cy'));tooltipX.push(points[p].getAttribute('cx'));}}}var validSharedChartTypes=w.globals.xyCharts&&!this.showOnIntersect||w.globals.comboCharts&&!this.showOnIntersect||commonBar&&this.tooltipUtil.hasBars()&&this.tConfig.shared;if(validSharedChartTypes){this.addPathsEventListeners([hoverArea],seriesHoverParams);}else if(commonBar&&!w.globals.comboCharts||chartWithmarkers&&this.showOnIntersect){this.addDatapointEventsListeners(seriesHoverParams);}else if(!w.globals.axisCharts||type==='heatmap'){var seriesAll=w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');this.addPathsEventListeners(seriesAll,seriesHoverParams);}if(this.showOnIntersect){var lineAreaPoints=w.globals.dom.baseEl.querySelectorAll('.apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker');if(lineAreaPoints.length>0){// if we find any lineSeries, addEventListeners for them
this.addPathsEventListeners(lineAreaPoints,seriesHoverParams);}// combo charts may have bars, so add event listeners here too
if(this.tooltipUtil.hasBars()&&!this.tConfig.shared){this.addDatapointEventsListeners(seriesHoverParams);}}}},{key:"drawFixedTooltipRect",value:function drawFixedTooltipRect(){var w=this.w;var tooltipEl=this.getElTooltip();var tooltipRect=tooltipEl.getBoundingClientRect();var ttWidth=tooltipRect.width+10;var ttHeight=tooltipRect.height+10;var x=this.tConfig.fixed.offsetX;var y=this.tConfig.fixed.offsetY;var fixed=this.tConfig.fixed.position.toLowerCase();if(fixed.indexOf('right')>-1){x=x+w.globals.svgWidth-ttWidth+10;}if(fixed.indexOf('bottom')>-1){y=y+w.globals.svgHeight-ttHeight-10;}tooltipEl.style.left=x+'px';tooltipEl.style.top=y+'px';return{x:x,y:y,ttWidth:ttWidth,ttHeight:ttHeight};}},{key:"addDatapointEventsListeners",value:function addDatapointEventsListeners(seriesHoverParams){var w=this.w;var points=w.globals.dom.baseEl.querySelectorAll('.apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-rangebar-area');this.addPathsEventListeners(points,seriesHoverParams);}},{key:"addPathsEventListeners",value:function addPathsEventListeners(paths,opts){var self=this;var _loop=function _loop(p){var extendedOpts={paths:paths[p],tooltipEl:opts.tooltipEl,tooltipY:opts.tooltipY,tooltipX:opts.tooltipX,elGrid:opts.elGrid,hoverArea:opts.hoverArea,ttItems:opts.ttItems};var events=['mousemove','mouseup','touchmove','mouseout','touchend'];events.map(function(ev){return paths[p].addEventListener(ev,self.seriesHover.bind(self,extendedOpts),{capture:false,passive:true});});};for(var p=0;p<paths.length;p++){_loop(p);}}/*
       ** The actual series hover function
       */},{key:"seriesHover",value:function seriesHover(opt,e){var _this=this;var chartGroups=[];var w=this.w;// if user has more than one charts in group, we need to sync
if(w.config.chart.group){chartGroups=this.ctx.getGroupedCharts();}if(w.globals.axisCharts&&(w.globals.minX===-Infinity&&w.globals.maxX===Infinity||w.globals.dataPoints===0)){return;}if(chartGroups.length){chartGroups.forEach(function(ch){var tooltipEl=_this.getElTooltip(ch);var newOpts={paths:opt.paths,tooltipEl:tooltipEl,tooltipY:opt.tooltipY,tooltipX:opt.tooltipX,elGrid:opt.elGrid,hoverArea:opt.hoverArea,ttItems:ch.w.globals.tooltip.ttItems};// all the charts should have the same minX and maxX (same xaxis) for multiple tooltips to work correctly
if(ch.w.globals.minX===_this.w.globals.minX&&ch.w.globals.maxX===_this.w.globals.maxX){ch.w.globals.tooltip.seriesHoverByContext({chartCtx:ch,ttCtx:ch.w.globals.tooltip,opt:newOpts,e:e});}});}else{this.seriesHoverByContext({chartCtx:this.ctx,ttCtx:this.w.globals.tooltip,opt:opt,e:e});}}},{key:"seriesHoverByContext",value:function seriesHoverByContext(_ref){var chartCtx=_ref.chartCtx,ttCtx=_ref.ttCtx,opt=_ref.opt,e=_ref.e;var w=chartCtx.w;var tooltipEl=this.getElTooltip();// tooltipRect is calculated on every mousemove, because the text is dynamic
ttCtx.tooltipRect={x:0,y:0,ttWidth:tooltipEl.getBoundingClientRect().width,ttHeight:tooltipEl.getBoundingClientRect().height};ttCtx.e=e;// highlight the current hovered bars
if(ttCtx.tooltipUtil.hasBars()&&!w.globals.comboCharts&&!ttCtx.isBarShared){if(this.tConfig.onDatasetHover.highlightDataSeries){var series=new Series(chartCtx);series.toggleSeriesOnHover(e,e.target.parentNode);}}if(ttCtx.fixedTooltip){ttCtx.drawFixedTooltipRect();}if(w.globals.axisCharts){ttCtx.axisChartsTooltips({e:e,opt:opt,tooltipRect:ttCtx.tooltipRect});}else{// non-plot charts i.e pie/donut/circle
ttCtx.nonAxisChartsTooltips({e:e,opt:opt,tooltipRect:ttCtx.tooltipRect});}}// tooltip handling for line/area/bar/columns/scatter
},{key:"axisChartsTooltips",value:function axisChartsTooltips(_ref2){var e=_ref2.e,opt=_ref2.opt;var w=this.w;var x,y;var seriesBound=opt.elGrid.getBoundingClientRect();var clientX=e.type==='touchmove'?e.touches[0].clientX:e.clientX;var clientY=e.type==='touchmove'?e.touches[0].clientY:e.clientY;this.clientY=clientY;this.clientX=clientX;w.globals.capturedSeriesIndex=-1;w.globals.capturedDataPointIndex=-1;if(clientY<seriesBound.top||clientY>seriesBound.top+seriesBound.height){this.handleMouseOut(opt);return;}if(Array.isArray(this.tConfig.enabledOnSeries)&&!w.config.tooltip.shared){var index=parseInt(opt.paths.getAttribute('index'),10);if(this.tConfig.enabledOnSeries.indexOf(index)<0){this.handleMouseOut(opt);return;}}var tooltipEl=this.getElTooltip();var xcrosshairs=this.getElXCrosshairs();var isStickyTooltip=w.globals.xyCharts||w.config.chart.type==='bar'&&!w.globals.isBarHorizontal&&this.tooltipUtil.hasBars()&&this.tConfig.shared||w.globals.comboCharts&&this.tooltipUtil.hasBars();if(w.globals.isBarHorizontal&&this.tooltipUtil.hasBars()){isStickyTooltip=false;}if(e.type==='mousemove'||e.type==='touchmove'||e.type==='mouseup'){if(xcrosshairs!==null){xcrosshairs.classList.add('apexcharts-active');}if(this.ycrosshairs!==null&&this.blyaxisTooltip){this.ycrosshairs.classList.add('apexcharts-active');}if(isStickyTooltip&&!this.showOnIntersect){this.handleStickyTooltip(e,clientX,clientY,opt);}else{if(w.config.chart.type==='heatmap'){var markerXY=this.intersect.handleHeatTooltip({e:e,opt:opt,x:x,y:y});x=markerXY.x;y=markerXY.y;tooltipEl.style.left=x+'px';tooltipEl.style.top=y+'px';}else{if(this.tooltipUtil.hasBars()){this.intersect.handleBarTooltip({e:e,opt:opt});}if(this.tooltipUtil.hasMarkers()){// intersect - line/area/scatter/bubble
this.intersect.handleMarkerTooltip({e:e,opt:opt,x:x,y:y});}}}if(this.blyaxisTooltip){for(var yt=0;yt<w.config.yaxis.length;yt++){this.axesTooltip.drawYaxisTooltipText(yt,clientY,this.xyRatios);}}opt.tooltipEl.classList.add('apexcharts-active');}else if(e.type==='mouseout'||e.type==='touchend'){this.handleMouseOut(opt);}}// tooltip handling for pie/donuts
},{key:"nonAxisChartsTooltips",value:function nonAxisChartsTooltips(_ref3){var e=_ref3.e,opt=_ref3.opt,tooltipRect=_ref3.tooltipRect;var w=this.w;var rel=opt.paths.getAttribute('rel');var tooltipEl=this.getElTooltip();var seriesBound=w.globals.dom.elWrap.getBoundingClientRect();if(e.type==='mousemove'||e.type==='touchmove'){tooltipEl.classList.add('apexcharts-active');this.tooltipLabels.drawSeriesTexts({ttItems:opt.ttItems,i:parseInt(rel,10)-1,shared:false});var x=w.globals.clientX-seriesBound.left-tooltipRect.ttWidth/2;var y=w.globals.clientY-seriesBound.top-tooltipRect.ttHeight-10;tooltipEl.style.left=x+'px';tooltipEl.style.top=y+'px';}else if(e.type==='mouseout'||e.type==='touchend'){tooltipEl.classList.remove('apexcharts-active');}}},{key:"handleStickyTooltip",value:function handleStickyTooltip(e,clientX,clientY,opt){var w=this.w;var capj=this.tooltipUtil.getNearestValues({context:this,hoverArea:opt.hoverArea,elGrid:opt.elGrid,clientX:clientX,clientY:clientY});var j=capj.j;var capturedSeries=capj.capturedSeries;if(capj.hoverX<0||capj.hoverX>w.globals.gridWidth){this.handleMouseOut(opt);return;}if(capturedSeries!==null){this.handleStickyCapturedSeries(e,capturedSeries,opt,j);}else{// couldn't capture any series. check if shared X is same,
// if yes, draw a grouped tooltip
if(this.tooltipUtil.isXoverlap(j)){this.create(e,this,0,j,opt.ttItems);}}}},{key:"handleStickyCapturedSeries",value:function handleStickyCapturedSeries(e,capturedSeries,opt,j){var w=this.w;var ignoreNull=w.globals.series[capturedSeries][j]===null;if(ignoreNull){this.handleMouseOut(opt);return;}if(typeof w.globals.series[capturedSeries][j]!=='undefined'){if(this.tConfig.shared&&this.tooltipUtil.isXoverlap(j)&&this.tooltipUtil.isInitialSeriesSameLen()){this.create(e,this,capturedSeries,j,opt.ttItems);}else{this.create(e,this,capturedSeries,j,opt.ttItems,false);}}else{if(this.tooltipUtil.isXoverlap(j)){this.create(e,this,0,j,opt.ttItems);}}}},{key:"deactivateHoverFilter",value:function deactivateHoverFilter(){var w=this.w;var graphics=new Graphics(this.ctx);var allPaths=w.globals.dom.Paper.select(".apexcharts-bar-area");for(var b=0;b<allPaths.length;b++){graphics.pathMouseLeave(allPaths[b]);}}},{key:"handleMouseOut",value:function handleMouseOut(opt){var w=this.w;var xcrosshairs=this.getElXCrosshairs();opt.tooltipEl.classList.remove('apexcharts-active');this.deactivateHoverFilter();if(w.config.chart.type!=='bubble'){this.marker.resetPointsSize();}if(xcrosshairs!==null){xcrosshairs.classList.remove('apexcharts-active');}if(this.ycrosshairs!==null){this.ycrosshairs.classList.remove('apexcharts-active');}if(this.blxaxisTooltip){this.xaxisTooltip.classList.remove('apexcharts-active');}if(this.blyaxisTooltip){if(this.yaxisTTEls===null){this.yaxisTTEls=w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxistooltip');}for(var i=0;i<this.yaxisTTEls.length;i++){this.yaxisTTEls[i].classList.remove('apexcharts-active');}}if(w.config.legend.tooltipHoverFormatter){this.legendLabels.forEach(function(l){var defaultText=l.getAttribute('data:default-text');l.innerHTML=decodeURIComponent(defaultText);});}}},{key:"markerClick",value:function markerClick(e,seriesIndex,dataPointIndex){var w=this.w;if(typeof w.config.chart.events.markerClick==='function'){w.config.chart.events.markerClick(e,this.ctx,{seriesIndex:seriesIndex,dataPointIndex:dataPointIndex,w:w});}this.ctx.events.fireEvent('markerClick',[e,this.ctx,{seriesIndex:seriesIndex,dataPointIndex:dataPointIndex,w:w}]);}},{key:"create",value:function create(e,context,capturedSeries,j,ttItems){var shared=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var w=this.w;var ttCtx=context;if(e.type==='mouseup'){this.markerClick(e,capturedSeries,j);}if(shared===null)shared=this.tConfig.shared;var hasMarkers=this.tooltipUtil.hasMarkers();var bars=this.tooltipUtil.getElBars();if(w.config.legend.tooltipHoverFormatter){var legendFormatter=w.config.legend.tooltipHoverFormatter;var els=Array.from(this.legendLabels);// reset all legend values first
els.forEach(function(l){var legendName=l.getAttribute('data:default-text');l.innerHTML=decodeURIComponent(legendName);});// for irregular time series
for(var i=0;i<els.length;i++){var l=els[i];var lsIndex=parseInt(l.getAttribute('i'),10);var legendName=decodeURIComponent(l.getAttribute('data:default-text'));var text=legendFormatter(legendName,{seriesIndex:shared?lsIndex:capturedSeries,dataPointIndex:j,w:w});if(!shared){l.innerHTML=lsIndex===capturedSeries?text:legendName;if(capturedSeries===lsIndex){break;}}else{l.innerHTML=w.globals.collapsedSeriesIndices.indexOf(lsIndex)<0?text:legendName;}}}if(shared){ttCtx.tooltipLabels.drawSeriesTexts({ttItems:ttItems,i:capturedSeries,j:j,shared:this.showOnIntersect?false:this.tConfig.shared});if(hasMarkers){if(w.globals.markers.largestSize>0){ttCtx.marker.enlargePoints(j);}else{ttCtx.tooltipPosition.moveDynamicPointsOnHover(j);}}if(this.tooltipUtil.hasBars()){this.barSeriesHeight=this.tooltipUtil.getBarsHeight(bars);if(this.barSeriesHeight>0){// hover state, activate snap filter
var graphics=new Graphics(this.ctx);var paths=w.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(j,"']"));// de-activate first
this.deactivateHoverFilter();this.tooltipPosition.moveStickyTooltipOverBars(j);for(var b=0;b<paths.length;b++){graphics.pathMouseEnter(paths[b]);}}}}else{ttCtx.tooltipLabels.drawSeriesTexts({shared:false,ttItems:ttItems,i:capturedSeries,j:j});if(this.tooltipUtil.hasBars()){ttCtx.tooltipPosition.moveStickyTooltipOverBars(j);}if(hasMarkers){ttCtx.tooltipPosition.moveMarkers(capturedSeries,j);}}}}]);return Tooltip;}();var BarDataLabels=/*#__PURE__*/function(){function BarDataLabels(barCtx){_classCallCheck(this,BarDataLabels);this.w=barCtx.w;this.barCtx=barCtx;}/** handleBarDataLabels is used to calculate the positions for the data-labels
     * It also sets the element's data attr for bars and calls drawCalculatedBarDataLabels()
     * After calculating, it also calls the function to draw data labels
     * @memberof Bar
     * @param {object} {barProps} most of the bar properties used throughout the bar
     * drawing function
     * @return {object} dataLabels node-element which you can append later
     **/_createClass(BarDataLabels,[{key:"handleBarDataLabels",value:function handleBarDataLabels(opts){var x=opts.x,y=opts.y,y1=opts.y1,y2=opts.y2,i=opts.i,j=opts.j,realIndex=opts.realIndex,series=opts.series,barHeight=opts.barHeight,barWidth=opts.barWidth,barYPosition=opts.barYPosition,visibleSeries=opts.visibleSeries,renderedPath=opts.renderedPath;var w=this.w;var graphics=new Graphics(this.barCtx.ctx);var strokeWidth=Array.isArray(this.barCtx.strokeWidth)?this.barCtx.strokeWidth[realIndex]:this.barCtx.strokeWidth;var bcx=x+parseFloat(barWidth*visibleSeries);var bcy=y+parseFloat(barHeight*visibleSeries);if(w.globals.isXNumeric&&!w.globals.isBarHorizontal){bcx=x+parseFloat(barWidth*(visibleSeries+1));bcy=y+parseFloat(barHeight*(visibleSeries+1))-strokeWidth;}var dataLabels=null;var dataLabelsX=x;var dataLabelsY=y;var dataLabelsPos={};var dataLabelsConfig=w.config.dataLabels;var barDataLabelsConfig=this.barCtx.barOptions.dataLabels;if(typeof barYPosition!=='undefined'&&this.barCtx.isTimelineBar){bcy=barYPosition;dataLabelsY=barYPosition;}var offX=dataLabelsConfig.offsetX;var offY=dataLabelsConfig.offsetY;var textRects={width:0,height:0};if(w.config.dataLabels.enabled){textRects=graphics.getTextRects(w.globals.yLabelFormatters[0](w.globals.maxY),parseFloat(dataLabelsConfig.style.fontSize));}var params={x:x,y:y,i:i,j:j,renderedPath:renderedPath,bcx:bcx,bcy:bcy,barHeight:barHeight,barWidth:barWidth,textRects:textRects,strokeWidth:strokeWidth,dataLabelsX:dataLabelsX,dataLabelsY:dataLabelsY,barDataLabelsConfig:barDataLabelsConfig,offX:offX,offY:offY};if(this.barCtx.isHorizontal){dataLabelsPos=this.calculateBarsDataLabelsPosition(params);}else{dataLabelsPos=this.calculateColumnsDataLabelsPosition(params);}renderedPath.attr({cy:dataLabelsPos.bcy,cx:dataLabelsPos.bcx,j:j,val:series[i][j],barHeight:barHeight,barWidth:barWidth});dataLabels=this.drawCalculatedDataLabels({x:dataLabelsPos.dataLabelsX,y:dataLabelsPos.dataLabelsY,val:this.barCtx.isTimelineBar?[y1,y2]:series[i][j],i:realIndex,j:j,barWidth:barWidth,barHeight:barHeight,textRects:textRects,dataLabelsConfig:dataLabelsConfig});return dataLabels;}},{key:"calculateColumnsDataLabelsPosition",value:function calculateColumnsDataLabelsPosition(opts){var w=this.w;var i=opts.i,j=opts.j,y=opts.y,bcx=opts.bcx,barWidth=opts.barWidth,barHeight=opts.barHeight,textRects=opts.textRects,dataLabelsY=opts.dataLabelsY,barDataLabelsConfig=opts.barDataLabelsConfig,strokeWidth=opts.strokeWidth,offX=opts.offX,offY=opts.offY;var dataLabelsX;barHeight=Math.abs(barHeight);var vertical=w.config.plotOptions.bar.dataLabels.orientation==='vertical';bcx=bcx-strokeWidth/2;var dataPointsDividedWidth=w.globals.gridWidth/w.globals.dataPoints;if(w.globals.isXNumeric){dataLabelsX=bcx-barWidth/2+offX;}else{dataLabelsX=bcx-dataPointsDividedWidth+barWidth/2+offX;}if(vertical){var offsetDLX=2;dataLabelsX=dataLabelsX+textRects.height/2-strokeWidth/2-offsetDLX;}var valIsNegative=this.barCtx.series[i][j]<0;if(this.barCtx.isReversed){y=y-barHeight;}switch(barDataLabelsConfig.position){case'center':if(vertical){if(valIsNegative){dataLabelsY=y+barHeight/2+offY;}else{dataLabelsY=y+barHeight/2-offY;}}else{if(valIsNegative){dataLabelsY=y+barHeight/2+textRects.height/2+offY;}else{dataLabelsY=y+barHeight/2+textRects.height/2-offY;}}break;case'bottom':if(vertical){if(valIsNegative){dataLabelsY=y+barHeight+offY;}else{dataLabelsY=y+barHeight-offY;}}else{if(valIsNegative){dataLabelsY=y+barHeight+textRects.height+strokeWidth+offY;}else{dataLabelsY=y+barHeight-textRects.height/2+strokeWidth-offY;}}break;case'top':if(vertical){if(valIsNegative){dataLabelsY=y+offY;}else{dataLabelsY=y-offY;}}else{if(valIsNegative){dataLabelsY=y-textRects.height/2-offY;}else{dataLabelsY=y+textRects.height+offY;}}break;}if(!w.config.chart.stacked){if(dataLabelsY<0){dataLabelsY=0+strokeWidth;}else if(dataLabelsY+textRects.height/3>w.globals.gridHeight){dataLabelsY=w.globals.gridHeight-strokeWidth;}}return{bcx:bcx,bcy:y,dataLabelsX:dataLabelsX,dataLabelsY:dataLabelsY};}},{key:"calculateBarsDataLabelsPosition",value:function calculateBarsDataLabelsPosition(opts){var w=this.w;var x=opts.x,i=opts.i,j=opts.j,bcy=opts.bcy,barHeight=opts.barHeight,barWidth=opts.barWidth,textRects=opts.textRects,dataLabelsX=opts.dataLabelsX,strokeWidth=opts.strokeWidth,barDataLabelsConfig=opts.barDataLabelsConfig,offX=opts.offX,offY=opts.offY;var dataPointsDividedHeight=w.globals.gridHeight/w.globals.dataPoints;barWidth=Math.abs(barWidth);var dataLabelsY=bcy-(this.barCtx.isTimelineBar?0:dataPointsDividedHeight)+barHeight/2+textRects.height/2+offY-3;var valIsNegative=this.barCtx.series[i][j]<0;var newX=x;if(this.barCtx.isReversed){newX=x+barWidth;x=w.globals.gridWidth-barWidth;}switch(barDataLabelsConfig.position){case'center':if(valIsNegative){dataLabelsX=newX-barWidth/2-offX;}else{dataLabelsX=newX-barWidth/2+offX;}break;case'bottom':if(valIsNegative){dataLabelsX=newX+barWidth-strokeWidth-Math.round(textRects.width/2)-offX;}else{dataLabelsX=newX-barWidth+strokeWidth+Math.round(textRects.width/2)+offX;}break;case'top':if(valIsNegative){dataLabelsX=newX-strokeWidth+Math.round(textRects.width/2)-offX;}else{dataLabelsX=newX-strokeWidth-Math.round(textRects.width/2)+offX;}break;}if(!w.config.chart.stacked){if(dataLabelsX<0){dataLabelsX=dataLabelsX+textRects.width+strokeWidth;}else if(dataLabelsX+textRects.width/2>w.globals.gridWidth){dataLabelsX=w.globals.gridWidth-textRects.width-strokeWidth;}}return{bcx:x,bcy:bcy,dataLabelsX:dataLabelsX,dataLabelsY:dataLabelsY};}},{key:"drawCalculatedDataLabels",value:function drawCalculatedDataLabels(_ref){var x=_ref.x,y=_ref.y,val=_ref.val,i=_ref.i,j=_ref.j,textRects=_ref.textRects,barHeight=_ref.barHeight,barWidth=_ref.barWidth,dataLabelsConfig=_ref.dataLabelsConfig;var w=this.w;var rotate='rotate(0)';if(w.config.plotOptions.bar.dataLabels.orientation==='vertical')rotate="rotate(-90, ".concat(x,", ").concat(y,")");var dataLabels=new DataLabels(this.barCtx.ctx);var graphics=new Graphics(this.barCtx.ctx);var formatter=dataLabelsConfig.formatter;var elDataLabelsWrap=null;var isSeriesNotCollapsed=w.globals.collapsedSeriesIndices.indexOf(i)>-1;if(dataLabelsConfig.enabled&&!isSeriesNotCollapsed){elDataLabelsWrap=graphics.group({"class":'apexcharts-data-labels',transform:rotate});var text='';if(typeof val!=='undefined'){text=formatter(val,{seriesIndex:i,dataPointIndex:j,w:w});}if(val===0&&w.config.chart.stacked){// in a stacked bar/column chart, 0 value should be neglected as it will overlap on the next element
text='';}var valIsNegative=w.globals.series[i][j]<=0;var position=w.config.plotOptions.bar.dataLabels.position;if(w.config.plotOptions.bar.dataLabels.orientation==='vertical'){if(position==='top'){if(valIsNegative)dataLabelsConfig.textAnchor='end';else dataLabelsConfig.textAnchor='start';}if(position==='center'){dataLabelsConfig.textAnchor='middle';}if(position==='bottom'){if(valIsNegative)dataLabelsConfig.textAnchor='end';else dataLabelsConfig.textAnchor='start';}}if(this.barCtx.isTimelineBar&&this.barCtx.barOptions.dataLabels.hideOverflowingLabels){// hide the datalabel if it cannot fit into the rect
var txRect=graphics.getTextRects(text,parseFloat(dataLabelsConfig.style.fontSize));if(barWidth<txRect.width){text='';}}if(w.config.chart.stacked&&this.barCtx.barOptions.dataLabels.hideOverflowingLabels){// if there is not enough space to draw the label in the bar/column rect, check hideOverflowingLabels property to prevent overflowing on wrong rect
// Note: This issue is only seen in stacked charts
if(this.barCtx.isHorizontal){barWidth=Math.abs(w.globals.series[i][j])/this.barCtx.invertedYRatio[this.barCtx.yaxisIndex];// FIXED: Don't always hide the stacked negative side label
// A negative value will result in a negative bar width
// Only hide the text when the width is smaller (a higher negative number) than the negative bar width.
if(barWidth>0&&textRects.width/1.6>barWidth||barWidth<0&&textRects.width/1.6<barWidth){text='';}}else{barHeight=Math.abs(w.globals.series[i][j])/this.barCtx.yRatio[this.barCtx.yaxisIndex];if(textRects.height/1.6>barHeight){text='';}}}var modifiedDataLabelsConfig=_objectSpread2({},dataLabelsConfig);if(this.barCtx.isHorizontal){if(val<0){if(dataLabelsConfig.textAnchor==='start'){modifiedDataLabelsConfig.textAnchor='end';}else if(dataLabelsConfig.textAnchor==='end'){modifiedDataLabelsConfig.textAnchor='start';}}}dataLabels.plotDataLabelsText({x:x,y:y,text:text,i:i,j:j,parent:elDataLabelsWrap,dataLabelsConfig:modifiedDataLabelsConfig,alwaysDrawDataLabel:true,offsetCorrection:true});}return elDataLabelsWrap;}}]);return BarDataLabels;}();var Helpers$3=/*#__PURE__*/function(){function Helpers(barCtx){_classCallCheck(this,Helpers);this.w=barCtx.w;this.barCtx=barCtx;}_createClass(Helpers,[{key:"initVariables",value:function initVariables(series){var w=this.w;this.barCtx.series=series;this.barCtx.totalItems=0;this.barCtx.seriesLen=0;this.barCtx.visibleI=-1;// visible Series
this.barCtx.visibleItems=1;// number of visible bars after user zoomed in/out
for(var sl=0;sl<series.length;sl++){if(series[sl].length>0){this.barCtx.seriesLen=this.barCtx.seriesLen+1;this.barCtx.totalItems+=series[sl].length;}if(w.globals.isXNumeric){// get max visible items
for(var j=0;j<series[sl].length;j++){if(w.globals.seriesX[sl][j]>w.globals.minX&&w.globals.seriesX[sl][j]<w.globals.maxX){this.barCtx.visibleItems++;}}}else{this.barCtx.visibleItems=w.globals.dataPoints;}}if(this.barCtx.seriesLen===0){// A small adjustment when combo charts are used
this.barCtx.seriesLen=1;}}},{key:"initialPositions",value:function initialPositions(){var w=this.w;var x,y,yDivision,xDivision,barHeight,barWidth,zeroH,zeroW;var dataPoints=w.globals.dataPoints;if(this.barCtx.isTimelineBar){// timeline rangebar chart
dataPoints=w.globals.labels.length;}if(this.barCtx.isHorizontal){// height divided into equal parts
yDivision=w.globals.gridHeight/dataPoints;barHeight=yDivision/this.barCtx.seriesLen;if(w.globals.isXNumeric){yDivision=w.globals.gridHeight/this.barCtx.totalItems;barHeight=yDivision/this.barCtx.seriesLen;}barHeight=barHeight*parseInt(this.barCtx.barOptions.barHeight,10)/100;zeroW=this.barCtx.baseLineInvertedY+w.globals.padHorizontal+(this.barCtx.isReversed?w.globals.gridWidth:0)-(this.barCtx.isReversed?this.barCtx.baseLineInvertedY*2:0);y=(yDivision-barHeight*this.barCtx.seriesLen)/2;}else{// width divided into equal parts
xDivision=w.globals.gridWidth/this.barCtx.visibleItems;if(w.config.xaxis.convertedCatToNumeric){xDivision=w.globals.gridWidth/w.globals.dataPoints;}barWidth=xDivision/this.barCtx.seriesLen*parseInt(this.barCtx.barOptions.columnWidth,10)/100;if(w.globals.isXNumeric){// max barwidth should be equal to minXDiff to avoid overlap
var xRatio=this.barCtx.xRatio;if(w.config.xaxis.convertedCatToNumeric){xRatio=this.barCtx.initialXRatio;}if(w.globals.minXDiff&&w.globals.minXDiff/xRatio>0){xDivision=w.globals.minXDiff/xRatio;}barWidth=xDivision/this.barCtx.seriesLen*parseInt(this.barCtx.barOptions.columnWidth,10)/100;if(barWidth<1){barWidth=1;}}zeroH=w.globals.gridHeight-this.barCtx.baseLineY[this.barCtx.yaxisIndex]-(this.barCtx.isReversed?w.globals.gridHeight:0)+(this.barCtx.isReversed?this.barCtx.baseLineY[this.barCtx.yaxisIndex]*2:0);x=w.globals.padHorizontal+(xDivision-barWidth*this.barCtx.seriesLen)/2;}return{x:x,y:y,yDivision:yDivision,xDivision:xDivision,barHeight:barHeight,barWidth:barWidth,zeroH:zeroH,zeroW:zeroW};}},{key:"getPathFillColor",value:function getPathFillColor(series,i,j,realIndex){var w=this.w;var fill=new Fill(this.barCtx.ctx);var fillColor=null;var seriesNumber=this.barCtx.barOptions.distributed?j:i;if(this.barCtx.barOptions.colors.ranges.length>0){var colorRange=this.barCtx.barOptions.colors.ranges;colorRange.map(function(range){if(series[i][j]>=range.from&&series[i][j]<=range.to){fillColor=range.color;}});}if(w.config.series[i].data[j]&&w.config.series[i].data[j].fillColor){fillColor=w.config.series[i].data[j].fillColor;}var pathFill=fill.fillPath({seriesNumber:this.barCtx.barOptions.distributed?seriesNumber:realIndex,dataPointIndex:j,color:fillColor,value:series[i][j]});return pathFill;}},{key:"getStrokeWidth",value:function getStrokeWidth(i,j,realIndex){var strokeWidth=0;var w=this.w;if(typeof this.barCtx.series[i][j]==='undefined'||this.barCtx.series[i][j]===null){this.barCtx.isNullValue=true;}else{this.barCtx.isNullValue=false;}if(w.config.stroke.show){if(!this.barCtx.isNullValue){strokeWidth=Array.isArray(this.barCtx.strokeWidth)?this.barCtx.strokeWidth[realIndex]:this.barCtx.strokeWidth;}}return strokeWidth;}},{key:"barBackground",value:function barBackground(_ref){var bc=_ref.bc,i=_ref.i,x1=_ref.x1,x2=_ref.x2,y1=_ref.y1,y2=_ref.y2,elSeries=_ref.elSeries;var w=this.w;var graphics=new Graphics(this.barCtx.ctx);var sr=new Series(this.barCtx.ctx);var activeSeriesIndex=sr.getActiveConfigSeriesIndex();if(this.barCtx.barOptions.colors.backgroundBarColors.length>0&&activeSeriesIndex===i){if(bc>=this.barCtx.barOptions.colors.backgroundBarColors.length){bc=0;}var bcolor=this.barCtx.barOptions.colors.backgroundBarColors[bc];var rect=graphics.drawRect(typeof x1!=='undefined'?x1:0,typeof y1!=='undefined'?y1:0,typeof x2!=='undefined'?x2:w.globals.gridWidth,typeof y2!=='undefined'?y2:w.globals.gridHeight,this.barCtx.barOptions.colors.backgroundBarRadius,bcolor,this.barCtx.barOptions.colors.backgroundBarOpacity);elSeries.add(rect);rect.node.classList.add('apexcharts-backgroundBar');}}},{key:"getColumnPaths",value:function getColumnPaths(_ref2){var barWidth=_ref2.barWidth,barXPosition=_ref2.barXPosition,yRatio=_ref2.yRatio,y1=_ref2.y1,y2=_ref2.y2,strokeWidth=_ref2.strokeWidth,series=_ref2.series,i=_ref2.i,j=_ref2.j,w=_ref2.w;var graphics=new Graphics(this.barCtx.ctx);strokeWidth=Array.isArray(strokeWidth)?strokeWidth[i]:strokeWidth;if(!strokeWidth)strokeWidth=0;var shapeOpts={barWidth:barWidth,strokeWidth:strokeWidth,yRatio:yRatio,barXPosition:barXPosition,y1:y1,y2:y2};var newPath=this.getRoundedBars(w,shapeOpts,series,i,j);var x1=barXPosition;var x2=barXPosition+barWidth;var pathTo=graphics.move(x1,newPath.y1);var pathFrom=graphics.move(x1,newPath.y1);if(w.globals.previousPaths.length>0){pathFrom=this.barCtx.getPreviousPath(i,j,false);}pathTo=pathTo+graphics.line(x1,newPath.y2)+newPath.endingPath+graphics.line(x2-strokeWidth,newPath.y2)+graphics.line(x2-strokeWidth,newPath.y1)+newPath.startingPath+'z';pathFrom=pathFrom+graphics.line(x1,y1)+graphics.line(x2-strokeWidth,y1)+graphics.line(x2-strokeWidth,y1)+graphics.line(x2-strokeWidth,y1)+graphics.line(x1,y1);return{pathTo:pathTo,pathFrom:pathFrom};}},{key:"getBarpaths",value:function getBarpaths(_ref3){var barYPosition=_ref3.barYPosition,barHeight=_ref3.barHeight,x1=_ref3.x1,x2=_ref3.x2,strokeWidth=_ref3.strokeWidth,series=_ref3.series,i=_ref3.i,j=_ref3.j,w=_ref3.w;var graphics=new Graphics(this.barCtx.ctx);strokeWidth=Array.isArray(strokeWidth)?strokeWidth[i]:strokeWidth;if(!strokeWidth)strokeWidth=0;var shapeOpts={barHeight:barHeight,strokeWidth:strokeWidth,barYPosition:barYPosition,x2:x2,x1:x1};var newPath=this.getRoundedBars(w,shapeOpts,series,i,j);var pathTo=graphics.move(newPath.x1,barYPosition);var pathFrom=graphics.move(newPath.x1,barYPosition);if(w.globals.previousPaths.length>0){pathFrom=this.barCtx.getPreviousPath(i,j,false);}var y1=barYPosition;var y2=barYPosition+barHeight;pathTo=pathTo+graphics.line(newPath.x2,y1)+newPath.endingPath+graphics.line(newPath.x2,y2-strokeWidth)+graphics.line(newPath.x1,y2-strokeWidth)+newPath.startingPath+'z';pathFrom=pathFrom+graphics.line(x1,y1)+graphics.line(x1,y2-strokeWidth)+graphics.line(x1,y2-strokeWidth)+graphics.line(x1,y2-strokeWidth)+graphics.line(x1,y1);return{pathTo:pathTo,pathFrom:pathFrom};}/** getRoundedBars draws border radius for bars/columns
       * @memberof Bar
       * @param {object} w - chart context
       * @param {object} opts - consists several properties like barHeight/barWidth
       * @param {array} series - global primary series
       * @param {int} i - current iterating series's index
       * @param {int} j - series's j of i
       * @return {object} endingPath - ending shape path string
       *         startingPath - starting shape path string
       *         newY/newX - which is calculated from existing x/y based on rounded border
       **/},{key:"getRoundedBars",value:function getRoundedBars(w,opts,series,i,j){var graphics=new Graphics(this.barCtx.ctx);var strokeWidth=Array.isArray(opts.strokeWidth)?opts.strokeWidth[i]:opts.strokeWidth;if(!strokeWidth)strokeWidth=0;if(this.barCtx.isHorizontal){var endingShape=null;var startingShape='';var x2=opts.x2;var x1=opts.x1;if(typeof series[i][j]!=='undefined'||series[i][j]!==null){var inverse=series[i][j]<0;var eX=opts.barHeight/2-strokeWidth;if(inverse)eX=-opts.barHeight/2-strokeWidth;if(eX>Math.abs(x2-x1)){eX=Math.abs(x2-x1);}if(this.barCtx.barOptions.endingShape==='rounded'){x2=opts.x2-eX/2;}if(this.barCtx.barOptions.startingShape==='rounded'){x1=opts.x1+eX/2;}switch(this.barCtx.barOptions.endingShape){case'flat':endingShape=graphics.line(x2,opts.barYPosition+opts.barHeight-strokeWidth);break;case'rounded':endingShape=graphics.quadraticCurve(x2+eX,opts.barYPosition+(opts.barHeight-strokeWidth)/2,x2,opts.barYPosition+opts.barHeight-strokeWidth);break;}switch(this.barCtx.barOptions.startingShape){case'flat':startingShape=graphics.line(x1,opts.barYPosition+opts.barHeight-strokeWidth);break;case'rounded':startingShape=graphics.quadraticCurve(x1-eX,opts.barYPosition+opts.barHeight/2,x1,opts.barYPosition);break;}}return{endingPath:endingShape,startingPath:startingShape,x2:x2,x1:x1};}else{var _endingShape=null;var _startingShape='';var y2=opts.y2;var y1=opts.y1;if(typeof series[i][j]!=='undefined'||series[i][j]!==null){var _inverse=series[i][j]<0;var eY=opts.barWidth/2-strokeWidth;if(_inverse)eY=-opts.barWidth/2-strokeWidth;if(eY>Math.abs(y2-y1)){eY=Math.abs(y2-y1);}if(this.barCtx.barOptions.endingShape==='rounded'){// the shape exceeds the chart height, hence reduce y
y2=y2+eY/2;}if(this.barCtx.barOptions.startingShape==='rounded'){y1=y1-eY/2;}switch(this.barCtx.barOptions.endingShape){case'flat':_endingShape=graphics.line(opts.barXPosition+opts.barWidth-strokeWidth,y2);break;case'rounded':_endingShape=graphics.quadraticCurve(opts.barXPosition+(opts.barWidth-strokeWidth)/2,y2-eY,opts.barXPosition+opts.barWidth-strokeWidth,y2);break;}switch(this.barCtx.barOptions.startingShape){case'flat':_startingShape=graphics.line(opts.barXPosition+opts.barWidth-strokeWidth,y1);break;case'rounded':_startingShape=graphics.quadraticCurve(opts.barXPosition+(opts.barWidth-strokeWidth)/2,y1+eY,opts.barXPosition,y1);break;}}return{endingPath:_endingShape,startingPath:_startingShape,y2:y2,y1:y1};}}}]);return Helpers;}();/**
   * ApexCharts Bar Class responsible for drawing both Columns and Bars.
   *
   * @module Bar
   **/var Bar=/*#__PURE__*/function(){function Bar(ctx,xyRatios){_classCallCheck(this,Bar);this.ctx=ctx;this.w=ctx.w;var w=this.w;this.barOptions=w.config.plotOptions.bar;this.isHorizontal=this.barOptions.horizontal;this.strokeWidth=w.config.stroke.width;this.isNullValue=false;this.isTimelineBar=w.config.xaxis.type==='datetime'&&w.globals.seriesRangeBarTimeline.length;this.xyRatios=xyRatios;if(this.xyRatios!==null){this.xRatio=xyRatios.xRatio;this.initialXRatio=xyRatios.initialXRatio;this.yRatio=xyRatios.yRatio;this.invertedXRatio=xyRatios.invertedXRatio;this.invertedYRatio=xyRatios.invertedYRatio;this.baseLineY=xyRatios.baseLineY;this.baseLineInvertedY=xyRatios.baseLineInvertedY;}this.yaxisIndex=0;this.seriesLen=0;this.barHelpers=new Helpers$3(this);}/** primary draw method which is called on bar object
     * @memberof Bar
     * @param {array} series - user supplied series values
     * @param {int} seriesIndex - the index by which series will be drawn on the svg
     * @return {node} element which is supplied to parent chart draw method for appending
     **/_createClass(Bar,[{key:"draw",value:function draw(series,seriesIndex){var w=this.w;var graphics=new Graphics(this.ctx);var coreUtils=new CoreUtils(this.ctx,w);series=coreUtils.getLogSeries(series);this.series=series;this.yRatio=coreUtils.getLogYRatios(this.yRatio);this.barHelpers.initVariables(series);var ret=graphics.group({"class":'apexcharts-bar-series apexcharts-plot-series'});if(w.config.dataLabels.enabled){if(this.totalItems>this.barOptions.dataLabels.maxItems){console.warn('WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.');}}for(var i=0,bc=0;i<series.length;i++,bc++){var x=void 0,y=void 0,xDivision=void 0,// xDivision is the GRIDWIDTH divided by number of datapoints (columns)
yDivision=void 0,// yDivision is the GRIDHEIGHT divided by number of datapoints (bars)
zeroH=void 0,// zeroH is the baseline where 0 meets y axis
zeroW=void 0;// zeroW is the baseline where 0 meets x axis
var yArrj=[];// hold y values of current iterating series
var xArrj=[];// hold x values of current iterating series
var realIndex=w.globals.comboCharts?seriesIndex[i]:i;// el to which series will be drawn
var elSeries=graphics.group({"class":"apexcharts-series",rel:i+1,seriesName:Utils.escapeString(w.globals.seriesNames[realIndex]),'data:realIndex':realIndex});this.ctx.series.addCollapsedClassToSeries(elSeries,realIndex);if(series[i].length>0){this.visibleI=this.visibleI+1;}var barHeight=0;var barWidth=0;if(this.yRatio.length>1){this.yaxisIndex=realIndex;}this.isReversed=w.config.yaxis[this.yaxisIndex]&&w.config.yaxis[this.yaxisIndex].reversed;var initPositions=this.barHelpers.initialPositions();y=initPositions.y;barHeight=initPositions.barHeight;yDivision=initPositions.yDivision;zeroW=initPositions.zeroW;x=initPositions.x;barWidth=initPositions.barWidth;xDivision=initPositions.xDivision;zeroH=initPositions.zeroH;if(!this.horizontal){xArrj.push(x+barWidth/2);}// eldatalabels
var elDataLabelsWrap=graphics.group({"class":'apexcharts-datalabels','data:realIndex':realIndex});for(var j=0;j<w.globals.dataPoints;j++){var strokeWidth=this.barHelpers.getStrokeWidth(i,j,realIndex);var paths=null;var pathsParams={indexes:{i:i,j:j,realIndex:realIndex,bc:bc},x:x,y:y,strokeWidth:strokeWidth,elSeries:elSeries};if(this.isHorizontal){paths=this.drawBarPaths(_objectSpread2({},pathsParams,{barHeight:barHeight,zeroW:zeroW,yDivision:yDivision}));barWidth=this.series[i][j]/this.invertedYRatio;}else{paths=this.drawColumnPaths(_objectSpread2({},pathsParams,{xDivision:xDivision,barWidth:barWidth,zeroH:zeroH}));barHeight=this.series[i][j]/this.yRatio[this.yaxisIndex];}y=paths.y;x=paths.x;// push current X
if(j>0){xArrj.push(x+barWidth/2);}yArrj.push(y);var pathFill=this.barHelpers.getPathFillColor(series,i,j,realIndex);this.renderSeries({realIndex:realIndex,pathFill:pathFill,j:j,i:i,pathFrom:paths.pathFrom,pathTo:paths.pathTo,strokeWidth:strokeWidth,elSeries:elSeries,x:x,y:y,series:series,barHeight:barHeight,barWidth:barWidth,elDataLabelsWrap:elDataLabelsWrap,visibleSeries:this.visibleI,type:'bar'});}// push all x val arrays into main xArr
w.globals.seriesXvalues[realIndex]=xArrj;w.globals.seriesYvalues[realIndex]=yArrj;ret.add(elSeries);}return ret;}},{key:"renderSeries",value:function renderSeries(_ref){var realIndex=_ref.realIndex,pathFill=_ref.pathFill,lineFill=_ref.lineFill,j=_ref.j,i=_ref.i,pathFrom=_ref.pathFrom,pathTo=_ref.pathTo,strokeWidth=_ref.strokeWidth,elSeries=_ref.elSeries,x=_ref.x,y=_ref.y,y1=_ref.y1,y2=_ref.y2,series=_ref.series,barHeight=_ref.barHeight,barWidth=_ref.barWidth,barYPosition=_ref.barYPosition,elDataLabelsWrap=_ref.elDataLabelsWrap,visibleSeries=_ref.visibleSeries,type=_ref.type;var w=this.w;var graphics=new Graphics(this.ctx);if(!lineFill){/* fix apexcharts#341 */lineFill=this.barOptions.distributed?w.globals.stroke.colors[j]:w.globals.stroke.colors[realIndex];}if(w.config.series[i].data[j]&&w.config.series[i].data[j].strokeColor){lineFill=w.config.series[i].data[j].strokeColor;}if(this.isNullValue){pathFill='none';}var delay=j/w.config.chart.animations.animateGradually.delay*(w.config.chart.animations.speed/w.globals.dataPoints)/2.4;var renderedPath=graphics.renderPaths({i:i,j:j,realIndex:realIndex,pathFrom:pathFrom,pathTo:pathTo,stroke:lineFill,strokeWidth:strokeWidth,strokeLineCap:w.config.stroke.lineCap,fill:pathFill,animationDelay:delay,initialSpeed:w.config.chart.animations.speed,dataChangeSpeed:w.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-".concat(type,"-area")});renderedPath.attr('clip-path',"url(#gridRectMask".concat(w.globals.cuid,")"));if(typeof y1!=='undefined'&&typeof y2!=='undefined'){renderedPath.attr('data-range-y1',y1);renderedPath.attr('data-range-y2',y2);}var filters=new Filters(this.ctx);filters.setSelectionFilter(renderedPath,realIndex,j);elSeries.add(renderedPath);var barDataLabels=new BarDataLabels(this);var dataLabels=barDataLabels.handleBarDataLabels({x:x,y:y,y1:y1,y2:y2,i:i,j:j,series:series,realIndex:realIndex,barHeight:barHeight,barWidth:barWidth,barYPosition:barYPosition,renderedPath:renderedPath,visibleSeries:visibleSeries});if(dataLabels!==null){elDataLabelsWrap.add(dataLabels);}elSeries.add(elDataLabelsWrap);return elSeries;}},{key:"drawBarPaths",value:function drawBarPaths(_ref2){var indexes=_ref2.indexes,barHeight=_ref2.barHeight,strokeWidth=_ref2.strokeWidth,zeroW=_ref2.zeroW,x=_ref2.x,y=_ref2.y,yDivision=_ref2.yDivision,elSeries=_ref2.elSeries;var w=this.w;var i=indexes.i;var j=indexes.j;var bc=indexes.bc;if(w.globals.isXNumeric){y=(w.globals.seriesX[i][j]-w.globals.minX)/this.invertedXRatio-barHeight;}var barYPosition=y+barHeight*this.visibleI;if(typeof this.series[i][j]==='undefined'||this.series[i][j]===null){x=zeroW;}else{x=zeroW+this.series[i][j]/this.invertedYRatio-(this.isReversed?this.series[i][j]/this.invertedYRatio:0)*2;}var paths=this.barHelpers.getBarpaths({barYPosition:barYPosition,barHeight:barHeight,x1:zeroW,x2:x,strokeWidth:strokeWidth,series:this.series,i:i,j:j,w:w});if(!w.globals.isXNumeric){y=y+yDivision;}this.barHelpers.barBackground({bc:bc,i:i,y1:barYPosition-barHeight*this.visibleI,y2:barHeight*this.seriesLen,elSeries:elSeries});return{pathTo:paths.pathTo,pathFrom:paths.pathFrom,x:x,y:y,barYPosition:barYPosition};}},{key:"drawColumnPaths",value:function drawColumnPaths(_ref3){var indexes=_ref3.indexes,x=_ref3.x,y=_ref3.y,xDivision=_ref3.xDivision,barWidth=_ref3.barWidth,zeroH=_ref3.zeroH,strokeWidth=_ref3.strokeWidth,elSeries=_ref3.elSeries;var w=this.w;var i=indexes.i;var j=indexes.j;var bc=indexes.bc;if(w.globals.isXNumeric){var sxI=i;if(!w.globals.seriesX[i].length){sxI=w.globals.maxValsInArrayIndex;}x=(w.globals.seriesX[sxI][j]-w.globals.minX)/this.xRatio-barWidth*this.seriesLen/2;}var barXPosition=x+barWidth*this.visibleI;if(typeof this.series[i][j]==='undefined'||this.series[i][j]===null){y=zeroH;}else{y=zeroH-this.series[i][j]/this.yRatio[this.yaxisIndex]+(this.isReversed?this.series[i][j]/this.yRatio[this.yaxisIndex]:0)*2;}var paths=this.barHelpers.getColumnPaths({barXPosition:barXPosition,barWidth:barWidth,y1:zeroH,y2:y,strokeWidth:strokeWidth,series:this.series,i:i,j:j,w:w});if(!w.globals.isXNumeric){x=x+xDivision;}this.barHelpers.barBackground({bc:bc,i:i,x1:barXPosition-strokeWidth/2-barWidth*this.visibleI,x2:barWidth*this.seriesLen+strokeWidth/2,elSeries:elSeries});return{pathTo:paths.pathTo,pathFrom:paths.pathFrom,x:x,y:y,barXPosition:barXPosition};}/** getPreviousPath is a common function for bars/columns which is used to get previous paths when data changes.
       * @memberof Bar
       * @param {int} realIndex - current iterating i
       * @param {int} j - current iterating series's j index
       * @return {string} pathFrom is the string which will be appended in animations
       **/},{key:"getPreviousPath",value:function getPreviousPath(realIndex,j){var w=this.w;var pathFrom;for(var pp=0;pp<w.globals.previousPaths.length;pp++){var gpp=w.globals.previousPaths[pp];if(gpp.paths&&gpp.paths.length>0&&parseInt(gpp.realIndex,10)===parseInt(realIndex,10)){if(typeof w.globals.previousPaths[pp].paths[j]!=='undefined'){pathFrom=w.globals.previousPaths[pp].paths[j].d;}}}return pathFrom;}}]);return Bar;}();/**
   * ApexCharts BarStacked Class responsible for drawing both Stacked Columns and Bars.
   *
   * @module BarStacked
   * The whole calculation for stacked bar/column is different from normal bar/column,
   * hence it makes sense to derive a new class for it extending most of the props of Parent Bar
   **/var BarStacked=/*#__PURE__*/function(_Bar){_inherits(BarStacked,_Bar);function BarStacked(){_classCallCheck(this,BarStacked);return _possibleConstructorReturn(this,_getPrototypeOf(BarStacked).apply(this,arguments));}_createClass(BarStacked,[{key:"draw",value:function draw(series,seriesIndex){var _this=this;var w=this.w;this.graphics=new Graphics(this.ctx);this.bar=new Bar(this.ctx,this.xyRatios);var coreUtils=new CoreUtils(this.ctx,w);series=coreUtils.getLogSeries(series);this.yRatio=coreUtils.getLogYRatios(this.yRatio);this.barHelpers.initVariables(series);if(w.config.chart.stackType==='100%'){series=w.globals.seriesPercent.slice();}this.series=series;this.totalItems=0;this.prevY=[];// y position on chart
this.prevX=[];// x position on chart
this.prevYF=[];// y position including shapes on chart
this.prevXF=[];// x position including shapes on chart
this.prevYVal=[];// y values (series[i][j]) in columns
this.prevXVal=[];// x values (series[i][j]) in bars
this.xArrj=[];// xj indicates x position on graph in bars
this.xArrjF=[];// xjF indicates bar's x position + roundedShape's positions in bars
this.xArrjVal=[];// x val means the actual series's y values in horizontal/bars
this.yArrj=[];// yj indicates y position on graph in columns
this.yArrjF=[];// yjF indicates bar's y position + roundedShape's positions in columns
this.yArrjVal=[];// y val means the actual series's y values in columns
for(var sl=0;sl<series.length;sl++){if(series[sl].length>0){this.totalItems+=series[sl].length;}}var ret=this.graphics.group({"class":'apexcharts-bar-series apexcharts-plot-series'});var x=0;var y=0;var _loop=function _loop(i,bc){var xDivision=void 0;// xDivision is the GRIDWIDTH divided by number of datapoints (columns)
var yDivision=void 0;// yDivision is the GRIDHEIGHT divided by number of datapoints (bars)
var zeroH=void 0;// zeroH is the baseline where 0 meets y axis
var zeroW=void 0;// zeroW is the baseline where 0 meets x axis
var xArrValues=[];var yArrValues=[];var realIndex=w.globals.comboCharts?seriesIndex[i]:i;if(_this.yRatio.length>1){_this.yaxisIndex=realIndex;}_this.isReversed=w.config.yaxis[_this.yaxisIndex]&&w.config.yaxis[_this.yaxisIndex].reversed;// el to which series will be drawn
var elSeries=_this.graphics.group({"class":"apexcharts-series",seriesName:Utils.escapeString(w.globals.seriesNames[realIndex]),rel:i+1,'data:realIndex':realIndex});// eldatalabels
var elDataLabelsWrap=_this.graphics.group({"class":'apexcharts-datalabels','data:realIndex':realIndex});var barHeight=0;var barWidth=0;var initPositions=_this.initialPositions(x,y,xDivision,yDivision,zeroH,zeroW);y=initPositions.y;barHeight=initPositions.barHeight;yDivision=initPositions.yDivision;zeroW=initPositions.zeroW;x=initPositions.x;barWidth=initPositions.barWidth;xDivision=initPositions.xDivision;zeroH=initPositions.zeroH;_this.yArrj=[];_this.yArrjF=[];_this.yArrjVal=[];_this.xArrj=[];_this.xArrjF=[];_this.xArrjVal=[];// if (!this.horizontal) {
// this.xArrj.push(x + barWidth / 2)
// }
// fix issue #1215;
// where all stack bar disappear after collapsing the first series
// sol: if only 1 arr in this.prevY(this.prevY.length === 1) and all are NaN
if(_this.prevY.length===1&&_this.prevY[0].every(function(val){return isNaN(val);})){// make this.prevY[0] all zeroH
_this.prevY[0]=_this.prevY[0].map(function(val){return zeroH;});// make this.prevYF[0] all 0
_this.prevYF[0]=_this.prevYF[0].map(function(val){return 0;});}for(var j=0;j<w.globals.dataPoints;j++){var strokeWidth=_this.barHelpers.getStrokeWidth(i,j,realIndex);var commonPathOpts={indexes:{i:i,j:j,realIndex:realIndex,bc:bc},strokeWidth:strokeWidth,x:x,y:y,elSeries:elSeries};var paths=null;if(_this.isHorizontal){paths=_this.drawStackedBarPaths(_objectSpread2({},commonPathOpts,{zeroW:zeroW,barHeight:barHeight,yDivision:yDivision}));barWidth=_this.series[i][j]/_this.invertedYRatio;}else{paths=_this.drawStackedColumnPaths(_objectSpread2({},commonPathOpts,{xDivision:xDivision,barWidth:barWidth,zeroH:zeroH}));barHeight=_this.series[i][j]/_this.yRatio[_this.yaxisIndex];}y=paths.y;x=paths.x;xArrValues.push(x);yArrValues.push(y);var pathFill=_this.barHelpers.getPathFillColor(series,i,j,realIndex);elSeries=_this.renderSeries({realIndex:realIndex,pathFill:pathFill,j:j,i:i,pathFrom:paths.pathFrom,pathTo:paths.pathTo,strokeWidth:strokeWidth,elSeries:elSeries,x:x,y:y,series:series,barHeight:barHeight,barWidth:barWidth,elDataLabelsWrap:elDataLabelsWrap,type:'bar',visibleSeries:0});}// push all x val arrays into main xArr
w.globals.seriesXvalues[realIndex]=xArrValues;w.globals.seriesYvalues[realIndex]=yArrValues;// push all current y values array to main PrevY Array
_this.prevY.push(_this.yArrj);_this.prevYF.push(_this.yArrjF);_this.prevYVal.push(_this.yArrjVal);_this.prevX.push(_this.xArrj);_this.prevXF.push(_this.xArrjF);_this.prevXVal.push(_this.xArrjVal);ret.add(elSeries);};for(var i=0,bc=0;i<series.length;i++,bc++){_loop(i,bc);}return ret;}},{key:"initialPositions",value:function initialPositions(x,y,xDivision,yDivision,zeroH,zeroW){var w=this.w;var barHeight,barWidth;if(this.isHorizontal){// height divided into equal parts
yDivision=w.globals.gridHeight/w.globals.dataPoints;barHeight=yDivision;barHeight=barHeight*parseInt(w.config.plotOptions.bar.barHeight,10)/100;zeroW=this.baseLineInvertedY+w.globals.padHorizontal+(this.isReversed?w.globals.gridWidth:0)-(this.isReversed?this.baseLineInvertedY*2:0);// initial y position is half of barHeight * half of number of Bars
y=(yDivision-barHeight)/2;}else{// width divided into equal parts
xDivision=w.globals.gridWidth/w.globals.dataPoints;barWidth=xDivision;if(w.globals.isXNumeric){xDivision=w.globals.minXDiff/this.xRatio;barWidth=xDivision*parseInt(this.barOptions.columnWidth,10)/100;}else{barWidth=barWidth*parseInt(w.config.plotOptions.bar.columnWidth,10)/100;}zeroH=this.baseLineY[this.yaxisIndex]+(this.isReversed?w.globals.gridHeight:0)-(this.isReversed?this.baseLineY[this.yaxisIndex]*2:0);// initial x position is one third of barWidth
x=w.globals.padHorizontal+(xDivision-barWidth)/2;}return{x:x,y:y,yDivision:yDivision,xDivision:xDivision,barHeight:barHeight,barWidth:barWidth,zeroH:zeroH,zeroW:zeroW};}},{key:"drawStackedBarPaths",value:function drawStackedBarPaths(_ref){var indexes=_ref.indexes,barHeight=_ref.barHeight,strokeWidth=_ref.strokeWidth,zeroW=_ref.zeroW,x=_ref.x,y=_ref.y,yDivision=_ref.yDivision,elSeries=_ref.elSeries;var w=this.w;var barYPosition=y;var barXPosition;var i=indexes.i;var j=indexes.j;var bc=indexes.bc;var prevBarW=0;for(var k=0;k<this.prevXF.length;k++){prevBarW=prevBarW+this.prevXF[k][j];}if(i>0){var bXP=zeroW;if(this.prevXVal[i-1][j]<0){bXP=this.series[i][j]>=0?this.prevX[i-1][j]+prevBarW-(this.isReversed?prevBarW:0)*2:this.prevX[i-1][j];}else if(this.prevXVal[i-1][j]>=0){bXP=this.series[i][j]>=0?this.prevX[i-1][j]:this.prevX[i-1][j]-prevBarW+(this.isReversed?prevBarW:0)*2;}barXPosition=bXP;}else{// the first series will not have prevX values
barXPosition=zeroW;}if(this.series[i][j]===null){x=barXPosition;}else{x=barXPosition+this.series[i][j]/this.invertedYRatio-(this.isReversed?this.series[i][j]/this.invertedYRatio:0)*2;}this.xArrj.push(x);this.xArrjF.push(Math.abs(barXPosition-x));this.xArrjVal.push(this.series[i][j]);var paths=this.barHelpers.getBarpaths({barYPosition:barYPosition,barHeight:barHeight,x1:barXPosition,x2:x,strokeWidth:strokeWidth,series:this.series,i:i,j:j,w:w});this.barHelpers.barBackground({bc:bc,i:i,y1:barYPosition,y2:barHeight,elSeries:elSeries});y=y+yDivision;return{pathTo:paths.pathTo,pathFrom:paths.pathFrom,x:x,y:y};}},{key:"drawStackedColumnPaths",value:function drawStackedColumnPaths(_ref2){var indexes=_ref2.indexes,x=_ref2.x,y=_ref2.y,xDivision=_ref2.xDivision,barWidth=_ref2.barWidth,zeroH=_ref2.zeroH,strokeWidth=_ref2.strokeWidth,elSeries=_ref2.elSeries;var w=this.w;var i=indexes.i;var j=indexes.j;var bc=indexes.bc;if(w.globals.isXNumeric){var seriesVal=w.globals.seriesX[i][j];if(!seriesVal)seriesVal=0;x=(seriesVal-w.globals.minX)/this.xRatio-barWidth/2;}var barXPosition=x;var barYPosition;var prevBarH=0;for(var k=0;k<this.prevYF.length;k++){// fix issue #1215
// in case where this.prevYF[k][j] is NaN, use 0 instead
prevBarH=prevBarH+(!isNaN(this.prevYF[k][j])?this.prevYF[k][j]:0);}if(i>0&&!w.globals.isXNumeric||i>0&&w.globals.isXNumeric&&w.globals.seriesX[i-1][j]===w.globals.seriesX[i][j]){var bYP;var prevYValue;var p=Math.min(this.yRatio.length+1,i+1);if(this.prevY[i-1]!==undefined){for(var ii=1;ii<p;ii++){if(!isNaN(this.prevY[i-ii][j])){// find the previous available value to give prevYValue
prevYValue=this.prevY[i-ii][j];// if found it, break the loop
break;}}}for(var _ii=1;_ii<p;_ii++){// find the previous available value(non-NaN) to give bYP
if(this.prevYVal[i-_ii][j]<0){bYP=this.series[i][j]>=0?prevYValue-prevBarH+(this.isReversed?prevBarH:0)*2:prevYValue;// found it? break the loop
break;}else if(this.prevYVal[i-_ii][j]>=0){bYP=this.series[i][j]>=0?prevYValue:prevYValue+prevBarH-(this.isReversed?prevBarH:0)*2;// found it? break the loop
break;}}if(typeof bYP==='undefined')bYP=w.globals.gridHeight;// if this.prevYF[0] is all 0 resulted from line #486
// AND every arr starting from the second only contains NaN
if(this.prevYF[0].every(function(val){return val===0;})&&this.prevYF.slice(1,i).every(function(arr){return arr.every(function(val){return isNaN(val);});})){// Use the same calc way as line #485
barYPosition=w.globals.gridHeight-zeroH;}else{// Nothing special
barYPosition=bYP;}}else{// the first series will not have prevY values, also if the prev index's series X doesn't matches the current index's series X, then start from zero
barYPosition=w.globals.gridHeight-zeroH;}y=barYPosition-this.series[i][j]/this.yRatio[this.yaxisIndex]+(this.isReversed?this.series[i][j]/this.yRatio[this.yaxisIndex]:0)*2;this.yArrj.push(y);this.yArrjF.push(Math.abs(barYPosition-y));this.yArrjVal.push(this.series[i][j]);var paths=this.barHelpers.getColumnPaths({barXPosition:barXPosition,barWidth:barWidth,y1:barYPosition,y2:y,yRatio:this.yRatio[this.yaxisIndex],strokeWidth:this.strokeWidth,series:this.series,i:i,j:j,w:w});this.barHelpers.barBackground({bc:bc,i:i,x1:barXPosition,x2:barWidth,elSeries:elSeries});x=x+xDivision;return{pathTo:paths.pathTo,pathFrom:paths.pathFrom,x:w.globals.isXNumeric?x-xDivision:x,y:y};}}]);return BarStacked;}(Bar);/**
   * ApexCharts CandleStick Class responsible for drawing both Stacked Columns and Bars.
   *
   * @module CandleStick
   **/var CandleStick=/*#__PURE__*/function(_Bar){_inherits(CandleStick,_Bar);function CandleStick(){_classCallCheck(this,CandleStick);return _possibleConstructorReturn(this,_getPrototypeOf(CandleStick).apply(this,arguments));}_createClass(CandleStick,[{key:"draw",value:function draw(series,seriesIndex){var w=this.w;var graphics=new Graphics(this.ctx);var fill=new Fill(this.ctx);this.candlestickOptions=this.w.config.plotOptions.candlestick;var coreUtils=new CoreUtils(this.ctx,w);series=coreUtils.getLogSeries(series);this.series=series;this.yRatio=coreUtils.getLogYRatios(this.yRatio);this.barHelpers.initVariables(series);var ret=graphics.group({"class":'apexcharts-candlestick-series apexcharts-plot-series'});for(var i=0;i<series.length;i++){var x=void 0,y=void 0,xDivision=void 0,// xDivision is the GRIDWIDTH divided by number of datapoints (columns)
zeroH=void 0;// zeroH is the baseline where 0 meets y axis
var yArrj=[];// hold y values of current iterating series
var xArrj=[];// hold x values of current iterating series
var realIndex=w.globals.comboCharts?seriesIndex[i]:i;// el to which series will be drawn
var elSeries=graphics.group({"class":"apexcharts-series",seriesName:Utils.escapeString(w.globals.seriesNames[realIndex]),rel:i+1,'data:realIndex':realIndex});if(series[i].length>0){this.visibleI=this.visibleI+1;}var barHeight=0;var barWidth=0;if(this.yRatio.length>1){this.yaxisIndex=realIndex;}var initPositions=this.barHelpers.initialPositions();y=initPositions.y;barHeight=initPositions.barHeight;x=initPositions.x;barWidth=initPositions.barWidth;xDivision=initPositions.xDivision;zeroH=initPositions.zeroH;xArrj.push(x+barWidth/2);// eldatalabels
var elDataLabelsWrap=graphics.group({"class":'apexcharts-datalabels','data:realIndex':realIndex});for(var j=0;j<w.globals.dataPoints;j++){var strokeWidth=this.barHelpers.getStrokeWidth(i,j,realIndex);var color=void 0;var paths=this.drawCandleStickPaths({indexes:{i:i,j:j,realIndex:realIndex},x:x,y:y,xDivision:xDivision,barWidth:barWidth,zeroH:zeroH,strokeWidth:strokeWidth,elSeries:elSeries});y=paths.y;x=paths.x;color=paths.color;// push current X
if(j>0){xArrj.push(x+barWidth/2);}yArrj.push(y);var pathFill=fill.fillPath({seriesNumber:realIndex,dataPointIndex:j,color:color,value:series[i][j]});var lineFill=this.candlestickOptions.wick.useFillColor?color:undefined;this.renderSeries({realIndex:realIndex,pathFill:pathFill,lineFill:lineFill,j:j,i:i,pathFrom:paths.pathFrom,pathTo:paths.pathTo,strokeWidth:strokeWidth,elSeries:elSeries,x:x,y:y,series:series,barHeight:barHeight,barWidth:barWidth,elDataLabelsWrap:elDataLabelsWrap,visibleSeries:this.visibleI,type:'candlestick'});}// push all x val arrays into main xArr
w.globals.seriesXvalues[realIndex]=xArrj;w.globals.seriesYvalues[realIndex]=yArrj;ret.add(elSeries);}return ret;}},{key:"drawCandleStickPaths",value:function drawCandleStickPaths(_ref){var indexes=_ref.indexes,x=_ref.x,y=_ref.y,xDivision=_ref.xDivision,barWidth=_ref.barWidth,zeroH=_ref.zeroH,strokeWidth=_ref.strokeWidth;var w=this.w;var graphics=new Graphics(this.ctx);var i=indexes.i;var j=indexes.j;var isPositive=true;var colorPos=w.config.plotOptions.candlestick.colors.upward;var colorNeg=w.config.plotOptions.candlestick.colors.downward;var yRatio=this.yRatio[this.yaxisIndex];var realIndex=indexes.realIndex;var ohlc=this.getOHLCValue(realIndex,j);var l1=zeroH;var l2=zeroH;if(ohlc.o>ohlc.c){isPositive=false;}var y1=Math.min(ohlc.o,ohlc.c);var y2=Math.max(ohlc.o,ohlc.c);if(w.globals.isXNumeric){x=(w.globals.seriesX[realIndex][j]-w.globals.minX)/this.xRatio-barWidth/2;}var barXPosition=x+barWidth*this.visibleI;if(typeof this.series[i][j]==='undefined'||this.series[i][j]===null){y1=zeroH;}else{y1=zeroH-y1/yRatio;y2=zeroH-y2/yRatio;l1=zeroH-ohlc.h/yRatio;l2=zeroH-ohlc.l/yRatio;}var pathTo=graphics.move(barXPosition,zeroH);var pathFrom=graphics.move(barXPosition,y1);if(w.globals.previousPaths.length>0){pathFrom=this.getPreviousPath(realIndex,j,true);}pathTo=graphics.move(barXPosition,y2)+graphics.line(barXPosition+barWidth/2,y2)+graphics.line(barXPosition+barWidth/2,l1)+graphics.line(barXPosition+barWidth/2,y2)+graphics.line(barXPosition+barWidth,y2)+graphics.line(barXPosition+barWidth,y1)+graphics.line(barXPosition+barWidth/2,y1)+graphics.line(barXPosition+barWidth/2,l2)+graphics.line(barXPosition+barWidth/2,y1)+graphics.line(barXPosition,y1)+graphics.line(barXPosition,y2-strokeWidth/2);pathFrom=pathFrom+graphics.move(barXPosition,y1);if(!w.globals.isXNumeric){x=x+xDivision;}return{pathTo:pathTo,pathFrom:pathFrom,x:x,y:y2,barXPosition:barXPosition,color:isPositive?colorPos:colorNeg};}},{key:"getOHLCValue",value:function getOHLCValue(i,j){var w=this.w;return{o:w.globals.seriesCandleO[i][j],h:w.globals.seriesCandleH[i][j],l:w.globals.seriesCandleL[i][j],c:w.globals.seriesCandleC[i][j]};}}]);return CandleStick;}(Bar);/**
   * ApexCharts HeatMap Class.
   * @module HeatMap
   **/var HeatMap=/*#__PURE__*/function(){function HeatMap(ctx,xyRatios){_classCallCheck(this,HeatMap);this.ctx=ctx;this.w=ctx.w;this.xRatio=xyRatios.xRatio;this.yRatio=xyRatios.yRatio;this.negRange=false;this.dynamicAnim=this.w.config.chart.animations.dynamicAnimation;this.rectRadius=this.w.config.plotOptions.heatmap.radius;this.strokeWidth=this.w.config.stroke.show?this.w.config.stroke.width:0;}_createClass(HeatMap,[{key:"draw",value:function draw(series){var w=this.w;var graphics=new Graphics(this.ctx);var ret=graphics.group({"class":'apexcharts-heatmap'});ret.attr('clip-path',"url(#gridRectMask".concat(w.globals.cuid,")"));// width divided into equal parts
var xDivision=w.globals.gridWidth/w.globals.dataPoints;var yDivision=w.globals.gridHeight/w.globals.series.length;var y1=0;var rev=false;this.checkColorRange();var heatSeries=series.slice();if(w.config.yaxis[0].reversed){rev=true;heatSeries.reverse();}for(var i=rev?0:heatSeries.length-1;rev?i<heatSeries.length:i>=0;rev?i++:i--){// el to which series will be drawn
var elSeries=graphics.group({"class":"apexcharts-series apexcharts-heatmap-series",seriesName:Utils.escapeString(w.globals.seriesNames[i]),rel:i+1,'data:realIndex':i});if(w.config.chart.dropShadow.enabled){var shadow=w.config.chart.dropShadow;var filters=new Filters(this.ctx);filters.dropShadow(elSeries,shadow,i);}var x1=0;for(var j=0;j<heatSeries[i].length;j++){var colorShadePercent=1;var shadeIntensity=w.config.plotOptions.heatmap.shadeIntensity;var heatColorProps=this.determineHeatColor(i,j);if(w.globals.hasNegs||this.negRange){if(w.config.plotOptions.heatmap.reverseNegativeShade){if(heatColorProps.percent<0){colorShadePercent=heatColorProps.percent/100*(shadeIntensity*1.25);}else{colorShadePercent=(1-heatColorProps.percent/100)*(shadeIntensity*1.25);}}else{if(heatColorProps.percent<=0){colorShadePercent=1-(1+heatColorProps.percent/100)*shadeIntensity;}else{colorShadePercent=(1-heatColorProps.percent/100)*shadeIntensity;}}}else{colorShadePercent=1-heatColorProps.percent/100;}var color=heatColorProps.color;var utils=new Utils();if(w.config.plotOptions.heatmap.enableShades){if(colorShadePercent<0)colorShadePercent=0;color=Utils.hexToRgba(utils.shadeColor(colorShadePercent,heatColorProps.color),w.config.fill.opacity);}if(w.config.fill.type==='image'){var fill=new Fill(this.ctx);color=fill.fillPath({seriesNumber:i,dataPointIndex:j,opacity:w.globals.hasNegs?heatColorProps.percent<0?1-(1+heatColorProps.percent/100):shadeIntensity+heatColorProps.percent/100:heatColorProps.percent/100,patternID:Utils.randomId(),width:w.config.fill.image.width?w.config.fill.image.width:xDivision,height:w.config.fill.image.height?w.config.fill.image.height:yDivision});}var radius=this.rectRadius;var rect=graphics.drawRect(x1,y1,xDivision,yDivision,radius);rect.attr({cx:x1,cy:y1});rect.node.classList.add('apexcharts-heatmap-rect');elSeries.add(rect);rect.attr({fill:color,i:i,index:i,j:j,val:heatSeries[i][j],'stroke-width':this.strokeWidth,stroke:w.config.plotOptions.heatmap.useFillColorAsStroke?color:w.globals.stroke.colors[0],color:color});rect.node.addEventListener('mouseenter',graphics.pathMouseEnter.bind(this,rect));rect.node.addEventListener('mouseleave',graphics.pathMouseLeave.bind(this,rect));rect.node.addEventListener('mousedown',graphics.pathMouseDown.bind(this,rect));if(w.config.chart.animations.enabled&&!w.globals.dataChanged){var speed=1;if(!w.globals.resized){speed=w.config.chart.animations.speed;}this.animateHeatMap(rect,x1,y1,xDivision,yDivision,speed);}if(w.globals.dataChanged){var _speed=1;if(this.dynamicAnim.enabled&&w.globals.shouldAnimate){_speed=this.dynamicAnim.speed;var colorFrom=w.globals.previousPaths[i]&&w.globals.previousPaths[i][j]&&w.globals.previousPaths[i][j].color;if(!colorFrom)colorFrom='rgba(255, 255, 255, 0)';this.animateHeatColor(rect,Utils.isColorHex(colorFrom)?colorFrom:Utils.rgb2hex(colorFrom),Utils.isColorHex(color)?color:Utils.rgb2hex(color),_speed);}}var dataLabels=this.calculateHeatmapDataLabels({x:x1,y:y1,i:i,j:j,heatColorProps:heatColorProps,series:heatSeries,rectHeight:yDivision,rectWidth:xDivision});if(dataLabels!==null){elSeries.add(dataLabels);}x1=x1+xDivision;}y1=y1+yDivision;ret.add(elSeries);}// adjust yaxis labels for heatmap
var yAxisScale=w.globals.yAxisScale[0].result.slice();if(w.config.yaxis[0].reversed){yAxisScale.unshift('');}else{yAxisScale.push('');}w.globals.yAxisScale[0].result=yAxisScale;var divisor=w.globals.gridHeight/w.globals.series.length;w.config.yaxis[0].labels.offsetY=-(divisor/2);return ret;}},{key:"checkColorRange",value:function checkColorRange(){var _this=this;var w=this.w;var heatmap=w.config.plotOptions.heatmap;if(heatmap.colorScale.ranges.length>0){heatmap.colorScale.ranges.map(function(range,index){if(range.from<=0){_this.negRange=true;}});}}},{key:"determineHeatColor",value:function determineHeatColor(i,j){var w=this.w;var val=w.globals.series[i][j];var heatmap=w.config.plotOptions.heatmap;var seriesNumber=heatmap.colorScale.inverse?j:i;var color=w.globals.colors[seriesNumber];var foreColor=null;var min=Math.min.apply(Math,_toConsumableArray(w.globals.series[i]));var max=Math.max.apply(Math,_toConsumableArray(w.globals.series[i]));if(!heatmap.distributed){min=w.globals.minY;max=w.globals.maxY;}if(typeof heatmap.colorScale.min!=='undefined'){min=heatmap.colorScale.min<w.globals.minY?heatmap.colorScale.min:w.globals.minY;max=heatmap.colorScale.max>w.globals.maxY?heatmap.colorScale.max:w.globals.maxY;}var total=Math.abs(max)+Math.abs(min);var percent=100*val/(total===0?total-0.000001:total);if(heatmap.colorScale.ranges.length>0){var colorRange=heatmap.colorScale.ranges;colorRange.map(function(range,index){if(val>=range.from&&val<=range.to){color=range.color;foreColor=range.foreColor?range.foreColor:null;min=range.from;max=range.to;var rTotal=Math.abs(max)+Math.abs(min);percent=100*val/(rTotal===0?rTotal-0.000001:rTotal);}});}return{color:color,foreColor:foreColor,percent:percent};}},{key:"calculateHeatmapDataLabels",value:function calculateHeatmapDataLabels(_ref){var x=_ref.x,y=_ref.y,i=_ref.i,j=_ref.j,heatColorProps=_ref.heatColorProps,series=_ref.series,rectHeight=_ref.rectHeight,rectWidth=_ref.rectWidth;var w=this.w;// let graphics = new Graphics(this.ctx)
var dataLabelsConfig=w.config.dataLabels;var graphics=new Graphics(this.ctx);var dataLabels=new DataLabels(this.ctx);var formatter=dataLabelsConfig.formatter;var elDataLabelsWrap=null;if(dataLabelsConfig.enabled){elDataLabelsWrap=graphics.group({"class":'apexcharts-data-labels'});var offX=dataLabelsConfig.offsetX;var offY=dataLabelsConfig.offsetY;var dataLabelsX=x+rectWidth/2+offX;var dataLabelsY=y+rectHeight/2+parseFloat(dataLabelsConfig.style.fontSize)/3+offY;var text=formatter(w.globals.series[i][j],{seriesIndex:i,dataPointIndex:j,w:w});dataLabels.plotDataLabelsText({x:dataLabelsX,y:dataLabelsY,text:text,i:i,j:j,color:heatColorProps.foreColor,parent:elDataLabelsWrap,dataLabelsConfig:dataLabelsConfig});}return elDataLabelsWrap;}},{key:"animateHeatMap",value:function animateHeatMap(el,x,y,width,height,speed){var animations=new Animations(this.ctx);animations.animateRect(el,{x:x+width/2,y:y+height/2,width:0,height:0},{x:x,y:y,width:width,height:height},speed,function(){animations.animationCompleted(el);});}},{key:"animateHeatColor",value:function animateHeatColor(el,colorFrom,colorTo,speed){el.attr({fill:colorFrom}).animate(speed).attr({fill:colorTo});}}]);return HeatMap;}();/**
   * ApexCharts Radar Class for Spider/Radar Charts.
   * @module Radar
   **/var Radar=/*#__PURE__*/function(){function Radar(ctx){_classCallCheck(this,Radar);this.ctx=ctx;this.w=ctx.w;this.chartType=this.w.config.chart.type;this.initialAnim=this.w.config.chart.animations.enabled;this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled;this.animDur=0;var w=this.w;this.graphics=new Graphics(this.ctx);this.lineColorArr=w.globals.stroke.colors!==undefined?w.globals.stroke.colors:w.globals.colors;this.defaultSize=w.globals.svgHeight<w.globals.svgWidth?w.globals.gridHeight+w.globals.goldenPadding*1.5:w.globals.gridWidth;this.maxValue=this.w.globals.maxY;this.minValue=this.w.globals.minY;this.polygons=w.config.plotOptions.radar.polygons;var longestXaxisLabel=w.globals.labels.slice().sort(function(a,b){return b.length-a.length;})[0];var labelWidth=this.graphics.getTextRects(longestXaxisLabel,w.config.xaxis.labels.style.fontSize);this.strokeWidth=w.config.stroke.show?w.config.stroke.width:0;this.size=this.defaultSize/2.1-this.strokeWidth-w.config.chart.dropShadow.blur;if(w.config.xaxis.labels.show){this.size=this.size-labelWidth.width/1.75;}if(w.config.plotOptions.radar.size!==undefined){this.size=w.config.plotOptions.radar.size;}this.dataRadiusOfPercent=[];this.dataRadius=[];this.angleArr=[];this.yaxisLabelsTextsPos=[];}_createClass(Radar,[{key:"draw",value:function draw(series){var _this=this;var w=this.w;var fill=new Fill(this.ctx);var allSeries=[];var dataLabels=new DataLabels(this.ctx);if(series.length){this.dataPointsLen=series[w.globals.maxValsInArrayIndex].length;}this.disAngle=Math.PI*2/this.dataPointsLen;var halfW=w.globals.gridWidth/2;var halfH=w.globals.gridHeight/2;var translateX=halfW+w.config.plotOptions.radar.offsetX;var translateY=halfH+w.config.plotOptions.radar.offsetY;var ret=this.graphics.group({"class":'apexcharts-radar-series apexcharts-plot-series',transform:"translate(".concat(translateX||0,", ").concat(translateY||0,")")});var dataPointsPos=[];var elPointsMain=null;var elDataPointsMain=null;this.yaxisLabels=this.graphics.group({"class":'apexcharts-yaxis'});series.forEach(function(s,i){var longestSeries=s.length===w.globals.dataPoints;// el to which series will be drawn
var elSeries=_this.graphics.group().attr({"class":"apexcharts-series",'data:longestSeries':longestSeries,seriesName:Utils.escapeString(w.globals.seriesNames[i]),rel:i+1,'data:realIndex':i});_this.dataRadiusOfPercent[i]=[];_this.dataRadius[i]=[];_this.angleArr[i]=[];s.forEach(function(dv,j){var range=Math.abs(_this.maxValue-_this.minValue);dv=dv+Math.abs(_this.minValue);_this.dataRadiusOfPercent[i][j]=dv/range;_this.dataRadius[i][j]=_this.dataRadiusOfPercent[i][j]*_this.size;_this.angleArr[i][j]=j*_this.disAngle;});dataPointsPos=_this.getDataPointsPos(_this.dataRadius[i],_this.angleArr[i]);var paths=_this.createPaths(dataPointsPos,{x:0,y:0});// points
elPointsMain=_this.graphics.group({"class":'apexcharts-series-markers-wrap apexcharts-element-hidden'});// datapoints
elDataPointsMain=_this.graphics.group({"class":"apexcharts-datalabels",'data:realIndex':i});w.globals.delayedElements.push({el:elPointsMain.node,index:i});var defaultRenderedPathOptions={i:i,realIndex:i,animationDelay:i,initialSpeed:w.config.chart.animations.speed,dataChangeSpeed:w.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-radar",shouldClipToGrid:false,bindEventsOnPaths:false,stroke:w.globals.stroke.colors[i],strokeLineCap:w.config.stroke.lineCap};var pathFrom=null;if(w.globals.previousPaths.length>0){pathFrom=_this.getPreviousPath(i);}for(var p=0;p<paths.linePathsTo.length;p++){var renderedLinePath=_this.graphics.renderPaths(_objectSpread2({},defaultRenderedPathOptions,{pathFrom:pathFrom===null?paths.linePathsFrom[p]:pathFrom,pathTo:paths.linePathsTo[p],strokeWidth:Array.isArray(_this.strokeWidth)?_this.strokeWidth[i]:_this.strokeWidth,fill:'none',drawShadow:false}));elSeries.add(renderedLinePath);var pathFill=fill.fillPath({seriesNumber:i});var renderedAreaPath=_this.graphics.renderPaths(_objectSpread2({},defaultRenderedPathOptions,{pathFrom:pathFrom===null?paths.areaPathsFrom[p]:pathFrom,pathTo:paths.areaPathsTo[p],strokeWidth:0,fill:pathFill,drawShadow:false}));if(w.config.chart.dropShadow.enabled){var filters=new Filters(_this.ctx);var shadow=w.config.chart.dropShadow;filters.dropShadow(renderedAreaPath,Object.assign({},shadow,{noUserSpaceOnUse:true}),i);}elSeries.add(renderedAreaPath);}s.forEach(function(sj,j){var markers=new Markers(_this.ctx);var opts=markers.getMarkerConfig('apexcharts-marker',i,j);var point=_this.graphics.drawMarker(dataPointsPos[j].x,dataPointsPos[j].y,opts);point.attr('rel',j);point.attr('j',j);point.attr('index',i);point.node.setAttribute('default-marker-size',opts.pSize);var elPointsWrap=_this.graphics.group({"class":'apexcharts-series-markers'});if(elPointsWrap){elPointsWrap.add(point);}elPointsMain.add(elPointsWrap);elSeries.add(elPointsMain);if(w.config.dataLabels.enabled){var dataLabelsConfig=w.config.dataLabels;dataLabels.plotDataLabelsText({x:dataPointsPos[j].x,y:dataPointsPos[j].y,text:w.globals.series[i][j],textAnchor:'middle',i:i,j:i,parent:elDataPointsMain,offsetCorrection:false,dataLabelsConfig:_objectSpread2({},dataLabelsConfig)});}elSeries.add(elDataPointsMain);});allSeries.push(elSeries);});this.drawPolygons({parent:ret});if(w.config.xaxis.labels.show){var xaxisTexts=this.drawXAxisTexts();ret.add(xaxisTexts);}ret.add(this.yaxisLabels);allSeries.forEach(function(elS){ret.add(elS);});return ret;}},{key:"drawPolygons",value:function drawPolygons(opts){var _this2=this;var w=this.w;var parent=opts.parent;var yaxisTexts=w.globals.yAxisScale[0].result.reverse();var layers=yaxisTexts.length;var radiusSizes=[];var layerDis=this.size/(layers-1);for(var i=0;i<layers;i++){radiusSizes[i]=layerDis*i;}radiusSizes.reverse();var polygonStrings=[];var lines=[];radiusSizes.forEach(function(radiusSize,r){var polygon=_this2.getPolygonPos(radiusSize);var string='';polygon.forEach(function(p,i){if(r===0){var line=_this2.graphics.drawLine(p.x,p.y,0,0,Array.isArray(_this2.polygons.connectorColors)?_this2.polygons.connectorColors[i]:_this2.polygons.connectorColors);lines.push(line);}if(i===0){_this2.yaxisLabelsTextsPos.push({x:p.x,y:p.y});}string+=p.x+','+p.y+' ';});polygonStrings.push(string);});polygonStrings.forEach(function(p,i){var strokeColors=_this2.polygons.strokeColors;var polygon=_this2.graphics.drawPolygon(p,Array.isArray(strokeColors)?strokeColors[i]:strokeColors,w.globals.radarPolygons.fill.colors[i]);parent.add(polygon);});lines.forEach(function(l){parent.add(l);});if(w.config.yaxis[0].show){this.yaxisLabelsTextsPos.forEach(function(p,i){var yText=_this2.drawYAxisTexts(p.x,p.y,i,yaxisTexts[i]);_this2.yaxisLabels.add(yText);});}}},{key:"drawYAxisTexts",value:function drawYAxisTexts(x,y,i,text){var w=this.w;var yaxisConfig=w.config.yaxis[0];var formatter=w.globals.yLabelFormatters[0];var yaxisLabel=this.graphics.drawText({x:x+yaxisConfig.labels.offsetX,y:y+yaxisConfig.labels.offsetY,text:formatter(text,i),textAnchor:'middle',fontSize:yaxisConfig.labels.style.fontSize,fontFamily:yaxisConfig.labels.style.fontFamily,foreColor:yaxisConfig.labels.style.color});return yaxisLabel;}},{key:"drawXAxisTexts",value:function drawXAxisTexts(){var _this3=this;var w=this.w;var xaxisLabelsConfig=w.config.xaxis.labels;var elXAxisWrap=this.graphics.group({"class":'apexcharts-xaxis'});var polygonPos=this.getPolygonPos(this.size);w.globals.labels.forEach(function(label,i){var formatter=w.config.xaxis.labels.formatter;var dataLabels=new DataLabels(_this3.ctx);if(polygonPos[i]){var textPos=_this3.getTextPos(polygonPos[i],_this3.size);var text=formatter(label,{seriesIndex:-1,dataPointIndex:i,w:w});dataLabels.plotDataLabelsText({x:textPos.newX,y:textPos.newY,text:text,textAnchor:textPos.textAnchor,i:i,j:i,parent:elXAxisWrap,color:xaxisLabelsConfig.style.colors[i]?xaxisLabelsConfig.style.colors[i]:'#757575',dataLabelsConfig:_objectSpread2({textAnchor:textPos.textAnchor,dropShadow:{enabled:false}},xaxisLabelsConfig),offsetCorrection:false});}});return elXAxisWrap;}},{key:"createPaths",value:function createPaths(pos,origin){var _this4=this;var linePathsTo=[];var linePathsFrom=[];var areaPathsTo=[];var areaPathsFrom=[];if(pos.length){linePathsFrom=[this.graphics.move(origin.x,origin.y)];areaPathsFrom=[this.graphics.move(origin.x,origin.y)];var linePathTo=this.graphics.move(pos[0].x,pos[0].y);var areaPathTo=this.graphics.move(pos[0].x,pos[0].y);pos.forEach(function(p,i){linePathTo+=_this4.graphics.line(p.x,p.y);areaPathTo+=_this4.graphics.line(p.x,p.y);if(i===pos.length-1){linePathTo+='Z';areaPathTo+='Z';}});linePathsTo.push(linePathTo);areaPathsTo.push(areaPathTo);}return{linePathsFrom:linePathsFrom,linePathsTo:linePathsTo,areaPathsFrom:areaPathsFrom,areaPathsTo:areaPathsTo};}},{key:"getTextPos",value:function getTextPos(pos,polygonSize){var limit=10;var textAnchor='middle';var newX=pos.x;var newY=pos.y;if(Math.abs(pos.x)>=limit){if(pos.x>0){textAnchor='start';newX+=10;}else if(pos.x<0){textAnchor='end';newX-=10;}}else{textAnchor='middle';}if(Math.abs(pos.y)>=polygonSize-limit){if(pos.y<0){newY-=10;}else if(pos.y>0){newY+=10;}}return{textAnchor:textAnchor,newX:newX,newY:newY};}},{key:"getPreviousPath",value:function getPreviousPath(realIndex){var w=this.w;var pathFrom=null;for(var pp=0;pp<w.globals.previousPaths.length;pp++){var gpp=w.globals.previousPaths[pp];if(gpp.paths.length>0&&parseInt(gpp.realIndex,10)===parseInt(realIndex,10)){if(typeof w.globals.previousPaths[pp].paths[0]!=='undefined'){pathFrom=w.globals.previousPaths[pp].paths[0].d;}}}return pathFrom;}},{key:"getDataPointsPos",value:function getDataPointsPos(dataRadiusArr,angleArr){var dataPointsLen=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.dataPointsLen;dataRadiusArr=dataRadiusArr||[];angleArr=angleArr||[];var dataPointsPosArray=[];for(var j=0;j<dataPointsLen;j++){var curPointPos={};curPointPos.x=dataRadiusArr[j]*Math.sin(angleArr[j]);curPointPos.y=-dataRadiusArr[j]*Math.cos(angleArr[j]);dataPointsPosArray.push(curPointPos);}return dataPointsPosArray;}},{key:"getPolygonPos",value:function getPolygonPos(size){var dotsArray=[];var angle=Math.PI*2/this.dataPointsLen;for(var i=0;i<this.dataPointsLen;i++){var curPos={};curPos.x=size*Math.sin(i*angle);curPos.y=-size*Math.cos(i*angle);dotsArray.push(curPos);}return dotsArray;}}]);return Radar;}();/**
   * ApexCharts Radial Class for drawing Circle / Semi Circle Charts.
   * @module Radial
   **/var Radial=/*#__PURE__*/function(_Pie){_inherits(Radial,_Pie);function Radial(ctx){var _this;_classCallCheck(this,Radial);_this=_possibleConstructorReturn(this,_getPrototypeOf(Radial).call(this,ctx));_this.ctx=ctx;_this.w=ctx.w;_this.animBeginArr=[0];_this.animDur=0;var w=_this.w;_this.startAngle=w.config.plotOptions.radialBar.startAngle;_this.endAngle=w.config.plotOptions.radialBar.endAngle;_this.totalAngle=Math.abs(w.config.plotOptions.radialBar.endAngle-w.config.plotOptions.radialBar.startAngle);_this.trackStartAngle=w.config.plotOptions.radialBar.track.startAngle;_this.trackEndAngle=w.config.plotOptions.radialBar.track.endAngle;_this.radialDataLabels=w.config.plotOptions.radialBar.dataLabels;if(!_this.trackStartAngle)_this.trackStartAngle=_this.startAngle;if(!_this.trackEndAngle)_this.trackEndAngle=_this.endAngle;if(_this.endAngle===360)_this.endAngle=359.99;_this.fullAngle=360-w.config.plotOptions.radialBar.endAngle-w.config.plotOptions.radialBar.startAngle;_this.margin=parseInt(w.config.plotOptions.radialBar.track.margin,10);return _this;}_createClass(Radial,[{key:"draw",value:function draw(series){var w=this.w;var graphics=new Graphics(this.ctx);var ret=graphics.group({"class":'apexcharts-radialbar'});if(w.globals.noData)return ret;var elSeries=graphics.group();var centerY=this.defaultSize/2;var centerX=w.globals.gridWidth/2;var size=this.defaultSize/2.05;if(!w.config.chart.sparkline.enabled){size=size-w.config.stroke.width-w.config.chart.dropShadow.blur;}var colorArr=w.globals.fill.colors;if(w.config.plotOptions.radialBar.track.show){var elTracks=this.drawTracks({size:size,centerX:centerX,centerY:centerY,colorArr:colorArr,series:series});elSeries.add(elTracks);}var elG=this.drawArcs({size:size,centerX:centerX,centerY:centerY,colorArr:colorArr,series:series});var totalAngle=360;if(w.config.plotOptions.radialBar.startAngle<0){totalAngle=this.totalAngle;}var angleRatio=(360-totalAngle)/360;w.globals.radialSize=size-size*angleRatio;if(this.radialDataLabels.value.show){var offset=Math.max(this.radialDataLabels.value.offsetY,this.radialDataLabels.name.offsetY);w.globals.radialSize+=offset*angleRatio;}elSeries.add(elG.g);if(w.config.plotOptions.radialBar.hollow.position==='front'){elG.g.add(elG.elHollow);if(elG.dataLabels){elG.g.add(elG.dataLabels);}}ret.add(elSeries);return ret;}},{key:"drawTracks",value:function drawTracks(opts){var w=this.w;var graphics=new Graphics(this.ctx);var g=graphics.group({"class":'apexcharts-tracks'});var filters=new Filters(this.ctx);var fill=new Fill(this.ctx);var strokeWidth=this.getStrokeWidth(opts);opts.size=opts.size-strokeWidth/2;for(var i=0;i<opts.series.length;i++){var elRadialBarTrack=graphics.group({"class":'apexcharts-radialbar-track apexcharts-track'});g.add(elRadialBarTrack);elRadialBarTrack.attr({rel:i+1});opts.size=opts.size-strokeWidth-this.margin;var trackConfig=w.config.plotOptions.radialBar.track;var pathFill=fill.fillPath({seriesNumber:0,size:opts.size,fillColors:Array.isArray(trackConfig.background)?trackConfig.background[i]:trackConfig.background,solid:true});var startAngle=this.trackStartAngle;var endAngle=this.trackEndAngle;if(Math.abs(endAngle)+Math.abs(startAngle)>=360)endAngle=360-Math.abs(this.startAngle)-0.1;var elPath=graphics.drawPath({d:'',stroke:pathFill,strokeWidth:strokeWidth*parseInt(trackConfig.strokeWidth,10)/100,fill:'none',strokeOpacity:trackConfig.opacity,classes:'apexcharts-radialbar-area'});if(trackConfig.dropShadow.enabled){var shadow=trackConfig.dropShadow;filters.dropShadow(elPath,shadow);}elRadialBarTrack.add(elPath);elPath.attr('id','apexcharts-radialbarTrack-'+i);this.animatePaths(elPath,{centerX:opts.centerX,centerY:opts.centerY,endAngle:endAngle,startAngle:startAngle,size:opts.size,i:i,totalItems:2,animBeginArr:0,dur:0,isTrack:true,easing:w.globals.easing});}return g;}},{key:"drawArcs",value:function drawArcs(opts){var w=this.w;// size, donutSize, centerX, centerY, colorArr, lineColorArr, sectorAngleArr, series
var graphics=new Graphics(this.ctx);var fill=new Fill(this.ctx);var filters=new Filters(this.ctx);var g=graphics.group();var strokeWidth=this.getStrokeWidth(opts);opts.size=opts.size-strokeWidth/2;var hollowFillID=w.config.plotOptions.radialBar.hollow.background;var hollowSize=opts.size-strokeWidth*opts.series.length-this.margin*opts.series.length-strokeWidth*parseInt(w.config.plotOptions.radialBar.track.strokeWidth,10)/100/2;var hollowRadius=hollowSize-w.config.plotOptions.radialBar.hollow.margin;if(w.config.plotOptions.radialBar.hollow.image!==undefined){hollowFillID=this.drawHollowImage(opts,g,hollowSize,hollowFillID);}var elHollow=this.drawHollow({size:hollowRadius,centerX:opts.centerX,centerY:opts.centerY,fill:hollowFillID?hollowFillID:'transparent'});if(w.config.plotOptions.radialBar.hollow.dropShadow.enabled){var shadow=w.config.plotOptions.radialBar.hollow.dropShadow;filters.dropShadow(elHollow,shadow);}var shown=1;if(!this.radialDataLabels.total.show&&w.globals.series.length>1){shown=0;}var dataLabels=null;if(this.radialDataLabels.show){dataLabels=this.renderInnerDataLabels(this.radialDataLabels,{hollowSize:hollowSize,centerX:opts.centerX,centerY:opts.centerY,opacity:shown});}if(w.config.plotOptions.radialBar.hollow.position==='back'){g.add(elHollow);if(dataLabels){g.add(dataLabels);}}var reverseLoop=false;if(w.config.plotOptions.radialBar.inverseOrder){reverseLoop=true;}for(var i=reverseLoop?opts.series.length-1:0;reverseLoop?i>=0:i<opts.series.length;reverseLoop?i--:i++){var elRadialBarArc=graphics.group({"class":"apexcharts-series apexcharts-radial-series",seriesName:Utils.escapeString(w.globals.seriesNames[i])});g.add(elRadialBarArc);elRadialBarArc.attr({rel:i+1,'data:realIndex':i});this.ctx.series.addCollapsedClassToSeries(elRadialBarArc,i);opts.size=opts.size-strokeWidth-this.margin;var pathFill=fill.fillPath({seriesNumber:i,size:opts.size,value:opts.series[i]});var startAngle=this.startAngle;var prevStartAngle=void 0;// if data exceeds 100, make it 100
var dataValue=Utils.negToZero(opts.series[i]>100?100:opts.series[i])/100;var endAngle=Math.round(this.totalAngle*dataValue)+this.startAngle;var prevEndAngle=void 0;if(w.globals.dataChanged){prevStartAngle=this.startAngle;prevEndAngle=Math.round(this.totalAngle*Utils.negToZero(w.globals.previousPaths[i])/100)+prevStartAngle;}var currFullAngle=Math.abs(endAngle)+Math.abs(startAngle);if(currFullAngle>=360){endAngle=endAngle-0.01;}var prevFullAngle=Math.abs(prevEndAngle)+Math.abs(prevStartAngle);if(prevFullAngle>=360){prevEndAngle=prevEndAngle-0.01;}var angle=endAngle-startAngle;var dashArray=Array.isArray(w.config.stroke.dashArray)?w.config.stroke.dashArray[i]:w.config.stroke.dashArray;var elPath=graphics.drawPath({d:'',stroke:pathFill,strokeWidth:strokeWidth,fill:'none',fillOpacity:w.config.fill.opacity,classes:'apexcharts-radialbar-area apexcharts-radialbar-slice-'+i,strokeDashArray:dashArray});Graphics.setAttrs(elPath.node,{'data:angle':angle,'data:value':opts.series[i]});if(w.config.chart.dropShadow.enabled){var _shadow=w.config.chart.dropShadow;filters.dropShadow(elPath,_shadow,i);}this.addListeners(elPath,this.radialDataLabels);elRadialBarArc.add(elPath);elPath.attr({index:0,j:i});var dur=0;if(this.initialAnim&&!w.globals.resized&&!w.globals.dataChanged){dur=(endAngle-startAngle)/360*w.config.chart.animations.speed;this.animDur=dur/(opts.series.length*1.2)+this.animDur;this.animBeginArr.push(this.animDur);}if(w.globals.dataChanged){dur=(endAngle-startAngle)/360*w.config.chart.animations.dynamicAnimation.speed;this.animDur=dur/(opts.series.length*1.2)+this.animDur;this.animBeginArr.push(this.animDur);}this.animatePaths(elPath,{centerX:opts.centerX,centerY:opts.centerY,endAngle:endAngle,startAngle:startAngle,prevEndAngle:prevEndAngle,prevStartAngle:prevStartAngle,size:opts.size,i:i,totalItems:2,animBeginArr:this.animBeginArr,dur:dur,shouldSetPrevPaths:true,easing:w.globals.easing});}return{g:g,elHollow:elHollow,dataLabels:dataLabels};}},{key:"drawHollow",value:function drawHollow(opts){var graphics=new Graphics(this.ctx);var circle=graphics.drawCircle(opts.size*2);circle.attr({"class":'apexcharts-radialbar-hollow',cx:opts.centerX,cy:opts.centerY,r:opts.size,fill:opts.fill});return circle;}},{key:"drawHollowImage",value:function drawHollowImage(opts,g,hollowSize,hollowFillID){var w=this.w;var fill=new Fill(this.ctx);var randID=Utils.randomId();var hollowFillImg=w.config.plotOptions.radialBar.hollow.image;if(w.config.plotOptions.radialBar.hollow.imageClipped){fill.clippedImgArea({width:hollowSize,height:hollowSize,image:hollowFillImg,patternID:"pattern".concat(w.globals.cuid).concat(randID)});hollowFillID="url(#pattern".concat(w.globals.cuid).concat(randID,")");}else{var imgWidth=w.config.plotOptions.radialBar.hollow.imageWidth;var imgHeight=w.config.plotOptions.radialBar.hollow.imageHeight;if(imgWidth===undefined&&imgHeight===undefined){var image=w.globals.dom.Paper.image(hollowFillImg).loaded(function(loader){this.move(opts.centerX-loader.width/2+w.config.plotOptions.radialBar.hollow.imageOffsetX,opts.centerY-loader.height/2+w.config.plotOptions.radialBar.hollow.imageOffsetY);});g.add(image);}else{var _image=w.globals.dom.Paper.image(hollowFillImg).loaded(function(loader){this.move(opts.centerX-imgWidth/2+w.config.plotOptions.radialBar.hollow.imageOffsetX,opts.centerY-imgHeight/2+w.config.plotOptions.radialBar.hollow.imageOffsetY);this.size(imgWidth,imgHeight);});g.add(_image);}}return hollowFillID;}},{key:"getStrokeWidth",value:function getStrokeWidth(opts){var w=this.w;return opts.size*(100-parseInt(w.config.plotOptions.radialBar.hollow.size,10))/100/(opts.series.length+1)-this.margin;}}]);return Radial;}(Pie);/**
   * ApexCharts RangeBar Class responsible for drawing Range/Timeline Bars.
   *
   * @module RangeBar
   **/var RangeBar=/*#__PURE__*/function(_Bar){_inherits(RangeBar,_Bar);function RangeBar(){_classCallCheck(this,RangeBar);return _possibleConstructorReturn(this,_getPrototypeOf(RangeBar).apply(this,arguments));}_createClass(RangeBar,[{key:"draw",value:function draw(series,seriesIndex){var w=this.w;var graphics=new Graphics(this.ctx);this.rangeBarOptions=this.w.config.plotOptions.rangeBar;this.series=series;this.seriesRangeStart=w.globals.seriesRangeStart;this.seriesRangeEnd=w.globals.seriesRangeEnd;this.barHelpers.initVariables(series);var ret=graphics.group({"class":'apexcharts-rangebar-series apexcharts-plot-series'});for(var i=0;i<series.length;i++){var x=void 0,y=void 0,xDivision=void 0,// xDivision is the GRIDWIDTH divided by number of datapoints (columns)
yDivision=void 0,// yDivision is the GRIDHEIGHT divided by number of datapoints (bars)
zeroH=void 0,// zeroH is the baseline where 0 meets y axis
zeroW=void 0;// zeroW is the baseline where 0 meets x axis
var realIndex=w.globals.comboCharts?seriesIndex[i]:i;// el to which series will be drawn
var elSeries=graphics.group({"class":"apexcharts-series",seriesName:Utils.escapeString(w.globals.seriesNames[realIndex]),rel:i+1,'data:realIndex':realIndex});if(series[i].length>0){this.visibleI=this.visibleI+1;}var barHeight=0;var barWidth=0;if(this.yRatio.length>1){this.yaxisIndex=realIndex;}var initPositions=this.barHelpers.initialPositions();y=initPositions.y;zeroW=initPositions.zeroW;x=initPositions.x;barWidth=initPositions.barWidth;xDivision=initPositions.xDivision;zeroH=initPositions.zeroH;// eldatalabels
var elDataLabelsWrap=graphics.group({"class":'apexcharts-datalabels','data:realIndex':realIndex});for(var j=0;j<w.globals.dataPoints;j++){var strokeWidth=this.barHelpers.getStrokeWidth(i,j,realIndex);var y1=this.seriesRangeStart[i][j];var y2=this.seriesRangeEnd[i][j];var paths=null;var barYPosition=null;var params={x:x,y:y,strokeWidth:strokeWidth,elSeries:elSeries};yDivision=initPositions.yDivision;barHeight=initPositions.barHeight;if(this.isHorizontal){barYPosition=y+barHeight*this.visibleI;var srty=(yDivision-barHeight*this.seriesLen)/2;if(typeof w.config.series[i].data[j]==='undefined'){// no data exists for further indexes, hence we need to get out the innr loop.
// As we are iterating over total datapoints, there is a possiblity the series might not have data for j index
break;}if(this.isTimelineBar&&w.config.series[i].data[j].x){var positions=this.detectOverlappingBars({i:i,j:j,barYPosition:barYPosition,srty:srty,barHeight:barHeight,yDivision:yDivision,initPositions:initPositions});barHeight=positions.barHeight;barYPosition=positions.barYPosition;}paths=this.drawRangeBarPaths(_objectSpread2({indexes:{i:i,j:j,realIndex:realIndex},barHeight:barHeight,barYPosition:barYPosition,zeroW:zeroW,yDivision:yDivision,y1:y1,y2:y2},params));barWidth=paths.barWidth;}else{paths=this.drawRangeColumnPaths(_objectSpread2({indexes:{i:i,j:j,realIndex:realIndex},zeroH:zeroH,barWidth:barWidth,xDivision:xDivision},params));barHeight=paths.barHeight;}y=paths.y;x=paths.x;var pathFill=this.barHelpers.getPathFillColor(series,i,j,realIndex);var lineFill=w.globals.stroke.colors[realIndex];this.renderSeries({realIndex:realIndex,pathFill:pathFill,lineFill:lineFill,j:j,i:i,x:x,y:y,y1:y1,y2:y2,pathFrom:paths.pathFrom,pathTo:paths.pathTo,strokeWidth:strokeWidth,elSeries:elSeries,series:series,barHeight:barHeight,barYPosition:barYPosition,barWidth:barWidth,elDataLabelsWrap:elDataLabelsWrap,visibleSeries:this.visibleI,type:'rangebar'});}ret.add(elSeries);}return ret;}},{key:"detectOverlappingBars",value:function detectOverlappingBars(_ref){var i=_ref.i,j=_ref.j,barYPosition=_ref.barYPosition,srty=_ref.srty,barHeight=_ref.barHeight,yDivision=_ref.yDivision,initPositions=_ref.initPositions;var w=this.w;var overlaps=[];var rangeName=w.config.series[i].data[j].rangeName;var labelX=w.config.series[i].data[j].x;var rowIndex=w.globals.labels.indexOf(labelX);var overlappedIndex=w.globals.seriesRangeBarTimeline[i].findIndex(function(tx){return tx.x===labelX&&tx.overlaps.length>0;});barYPosition=srty+barHeight*this.visibleI+yDivision*rowIndex;if(overlappedIndex>-1){overlaps=w.globals.seriesRangeBarTimeline[i][overlappedIndex].overlaps;if(overlaps.indexOf(rangeName)>-1){barHeight=initPositions.barHeight/overlaps.length;barYPosition=barHeight*this.visibleI+yDivision*(100-parseInt(this.barOptions.barHeight,10))/100/2+barHeight*(this.visibleI+overlaps.indexOf(rangeName))+yDivision*rowIndex;}}return{barYPosition:barYPosition,barHeight:barHeight};}},{key:"drawRangeColumnPaths",value:function drawRangeColumnPaths(_ref2){var indexes=_ref2.indexes,x=_ref2.x,strokeWidth=_ref2.strokeWidth,xDivision=_ref2.xDivision,barWidth=_ref2.barWidth,zeroH=_ref2.zeroH;var w=this.w;var i=indexes.i;var j=indexes.j;var yRatio=this.yRatio[this.yaxisIndex];var realIndex=indexes.realIndex;var range=this.getRangeValue(realIndex,j);var y1=Math.min(range.start,range.end);var y2=Math.max(range.start,range.end);if(w.globals.isXNumeric){x=(w.globals.seriesX[i][j]-w.globals.minX)/this.xRatio-barWidth/2;}var barXPosition=x+barWidth*this.visibleI;if(typeof this.series[i][j]==='undefined'||this.series[i][j]===null){y1=zeroH;}else{y1=zeroH-y1/yRatio;y2=zeroH-y2/yRatio;}var barHeight=Math.abs(y2-y1);var paths=this.barHelpers.getColumnPaths({barXPosition:barXPosition,barWidth:barWidth,y1:y1,y2:y2,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,i:realIndex,j:j,w:w});if(!w.globals.isXNumeric){x=x+xDivision;}return{pathTo:paths.pathTo,pathFrom:paths.pathFrom,barHeight:barHeight,x:x,y:y2,barXPosition:barXPosition};}},{key:"drawRangeBarPaths",value:function drawRangeBarPaths(_ref3){var indexes=_ref3.indexes,y=_ref3.y,y1=_ref3.y1,y2=_ref3.y2,yDivision=_ref3.yDivision,barHeight=_ref3.barHeight,barYPosition=_ref3.barYPosition,zeroW=_ref3.zeroW;var w=this.w;var x1=zeroW+y1/this.invertedYRatio;var x2=zeroW+y2/this.invertedYRatio;var barWidth=Math.abs(x2-x1);var paths=this.barHelpers.getBarpaths({barYPosition:barYPosition,barHeight:barHeight,x1:x1,x2:x2,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,i:indexes.realIndex,j:indexes.j,w:w});if(!w.globals.isXNumeric){y=y+yDivision;}return{pathTo:paths.pathTo,pathFrom:paths.pathFrom,barWidth:barWidth,x:x2,y:y};}},{key:"getRangeValue",value:function getRangeValue(i,j){var w=this.w;return{start:w.globals.seriesRangeStart[i][j],end:w.globals.seriesRangeEnd[i][j]};}}]);return RangeBar;}(Bar);var Helpers$4=/*#__PURE__*/function(){function Helpers(lineCtx){_classCallCheck(this,Helpers);this.w=lineCtx.w;this.lineCtx=lineCtx;}_createClass(Helpers,[{key:"sameValueSeriesFix",value:function sameValueSeriesFix(i,series){var w=this.w;if(w.config.chart.type==='line'&&(w.config.fill.type==='gradient'||w.config.fill.type[i]==='gradient')){var coreUtils=new CoreUtils(this.lineCtx.ctx,w);// a small adjustment to allow gradient line to draw correctly for all same values
/* #fix https://github.com/apexcharts/apexcharts.js/issues/358 */if(coreUtils.seriesHaveSameValues(i)){var gSeries=series[i].slice();gSeries[gSeries.length-1]=gSeries[gSeries.length-1]+0.000001;series[i]=gSeries;}}return series;}},{key:"calculatePoints",value:function calculatePoints(_ref){var series=_ref.series,realIndex=_ref.realIndex,x=_ref.x,y=_ref.y,i=_ref.i,j=_ref.j,prevY=_ref.prevY;var w=this.w;var ptX=[];var ptY=[];if(j===0){var xPT1st=this.lineCtx.categoryAxisCorrection+w.config.markers.offsetX;// the first point for line series
// we need to check whether it's not a time series, because a time series may
// start from the middle of the x axis
if(w.globals.isXNumeric){xPT1st=(w.globals.seriesX[realIndex][0]-w.globals.minX)/this.lineCtx.xRatio+w.config.markers.offsetX;}// push 2 points for the first data values
ptX.push(xPT1st);ptY.push(Utils.isNumber(series[i][0])?prevY+w.config.markers.offsetY:null);ptX.push(x+w.config.markers.offsetX);ptY.push(Utils.isNumber(series[i][j+1])?y+w.config.markers.offsetY:null);}else{ptX.push(x+w.config.markers.offsetX);ptY.push(Utils.isNumber(series[i][j+1])?y+w.config.markers.offsetY:null);}var pointsPos={x:ptX,y:ptY};return pointsPos;}},{key:"checkPreviousPaths",value:function checkPreviousPaths(_ref2){var pathFromLine=_ref2.pathFromLine,pathFromArea=_ref2.pathFromArea,realIndex=_ref2.realIndex;var w=this.w;for(var pp=0;pp<w.globals.previousPaths.length;pp++){var gpp=w.globals.previousPaths[pp];if((gpp.type==='line'||gpp.type==='area')&&gpp.paths.length>0&&parseInt(gpp.realIndex,10)===parseInt(realIndex,10)){if(gpp.type==='line'){this.lineCtx.appendPathFrom=false;pathFromLine=w.globals.previousPaths[pp].paths[0].d;}else if(gpp.type==='area'){this.lineCtx.appendPathFrom=false;pathFromArea=w.globals.previousPaths[pp].paths[0].d;if(w.config.stroke.show&&w.globals.previousPaths[pp].paths[1]){pathFromLine=w.globals.previousPaths[pp].paths[1].d;}}}}return{pathFromLine:pathFromLine,pathFromArea:pathFromArea};}},{key:"determineFirstPrevY",value:function determineFirstPrevY(_ref3){var i=_ref3.i,series=_ref3.series,prevY=_ref3.prevY,lineYPosition=_ref3.lineYPosition;var w=this.w;if(typeof series[i][0]!=='undefined'){if(w.config.chart.stacked){if(i>0){// 1st y value of previous series
lineYPosition=this.lineCtx.prevSeriesY[i-1][0];}else{// the first series will not have prevY values
lineYPosition=this.lineCtx.zeroY;}}else{lineYPosition=this.lineCtx.zeroY;}prevY=lineYPosition-series[i][0]/this.lineCtx.yRatio[this.lineCtx.yaxisIndex]+(this.lineCtx.isReversed?series[i][0]/this.lineCtx.yRatio[this.lineCtx.yaxisIndex]:0)*2;}else{// the first value in the current series is null
if(w.config.chart.stacked&&i>0&&typeof series[i][0]==='undefined'){// check for undefined value (undefined value will occur when we clear the series while user clicks on legend to hide serieses)
for(var s=i-1;s>=0;s--){// for loop to get to 1st previous value until we get it
if(series[s][0]!==null&&typeof series[s][0]!=='undefined'){lineYPosition=this.lineCtx.prevSeriesY[s][0];prevY=lineYPosition;break;}}}}return{prevY:prevY,lineYPosition:lineYPosition};}}]);return Helpers;}();/**
   * ApexCharts Line Class responsible for drawing Line / Area Charts.
   * This class is also responsible for generating values for Bubble/Scatter charts, so need to rename it to Axis Charts to avoid confusions
   * @module Line
   **/var Line=/*#__PURE__*/function(){function Line(ctx,xyRatios,isPointsChart){_classCallCheck(this,Line);this.ctx=ctx;this.w=ctx.w;this.xyRatios=xyRatios;this.pointsChart=!(this.w.config.chart.type!=='bubble'&&this.w.config.chart.type!=='scatter')||isPointsChart;this.scatter=new Scatter(this.ctx);this.noNegatives=this.w.globals.minX===Number.MAX_VALUE;this.lineHelpers=new Helpers$4(this);this.markers=new Markers(this.ctx);this.prevSeriesY=[];this.categoryAxisCorrection=0;this.yaxisIndex=0;}_createClass(Line,[{key:"draw",value:function draw(series,ptype,seriesIndex){var w=this.w;var graphics=new Graphics(this.ctx);var type=w.globals.comboCharts?ptype:w.config.chart.type;var ret=graphics.group({"class":"apexcharts-".concat(type,"-series apexcharts-plot-series")});var coreUtils=new CoreUtils(this.ctx,w);this.yRatio=this.xyRatios.yRatio;this.zRatio=this.xyRatios.zRatio;this.xRatio=this.xyRatios.xRatio;this.baseLineY=this.xyRatios.baseLineY;series=coreUtils.getLogSeries(series);this.yRatio=coreUtils.getLogYRatios(this.yRatio);// push all series in an array, so we can draw in reverse order (for stacked charts)
var allSeries=[];for(var i=0;i<series.length;i++){series=this.lineHelpers.sameValueSeriesFix(i,series);var realIndex=w.globals.comboCharts?seriesIndex[i]:i;this._initSerieVariables(series,i,realIndex);var yArrj=[];// hold y values of current iterating series
var xArrj=[];// hold x values of current iterating series
var x=w.globals.padHorizontal+this.categoryAxisCorrection;var y=1;var linePaths=[];var areaPaths=[];this.ctx.series.addCollapsedClassToSeries(this.elSeries,realIndex);if(w.globals.isXNumeric&&w.globals.seriesX.length>0){x=(w.globals.seriesX[realIndex][0]-w.globals.minX)/this.xRatio;}xArrj.push(x);var pX=x;var pY=void 0;var prevX=pX;var prevY=this.zeroY;var lineYPosition=0;// the first value in the current series is not null or undefined
var firstPrevY=this.lineHelpers.determineFirstPrevY({i:i,series:series,prevY:prevY,lineYPosition:lineYPosition});prevY=firstPrevY.prevY;yArrj.push(prevY);pY=prevY;var pathsFrom=this._calculatePathsFrom({series:series,i:i,realIndex:realIndex,prevX:prevX,prevY:prevY});var paths=this._iterateOverDataPoints({series:series,realIndex:realIndex,i:i,x:x,y:y,pX:pX,pY:pY,pathsFrom:pathsFrom,linePaths:linePaths,areaPaths:areaPaths,seriesIndex:seriesIndex,lineYPosition:lineYPosition,xArrj:xArrj,yArrj:yArrj});this._handlePaths({type:type,realIndex:realIndex,i:i,paths:paths});this.elSeries.add(this.elPointsMain);this.elSeries.add(this.elDataLabelsWrap);allSeries.push(this.elSeries);}for(var s=allSeries.length;s>0;s--){ret.add(allSeries[s-1]);}return ret;}},{key:"_initSerieVariables",value:function _initSerieVariables(series,i,realIndex){var w=this.w;var graphics=new Graphics(this.ctx);// width divided into equal parts
this.xDivision=w.globals.gridWidth/(w.globals.dataPoints-(w.config.xaxis.tickPlacement==='on'?1:0));this.strokeWidth=Array.isArray(w.config.stroke.width)?w.config.stroke.width[realIndex]:w.config.stroke.width;if(this.yRatio.length>1){this.yaxisIndex=realIndex;}this.isReversed=w.config.yaxis[this.yaxisIndex]&&w.config.yaxis[this.yaxisIndex].reversed;// zeroY is the 0 value in y series which can be used in negative charts
this.zeroY=w.globals.gridHeight-this.baseLineY[this.yaxisIndex]-(this.isReversed?w.globals.gridHeight:0)+(this.isReversed?this.baseLineY[this.yaxisIndex]*2:0);this.areaBottomY=this.zeroY;if(this.zeroY>w.globals.gridHeight){this.areaBottomY=w.globals.gridHeight;}this.categoryAxisCorrection=this.xDivision/2;// el to which series will be drawn
this.elSeries=graphics.group({"class":"apexcharts-series",seriesName:Utils.escapeString(w.globals.seriesNames[realIndex])});// points
this.elPointsMain=graphics.group({"class":'apexcharts-series-markers-wrap','data:realIndex':realIndex});// eldatalabels
this.elDataLabelsWrap=graphics.group({"class":'apexcharts-datalabels','data:realIndex':realIndex});var longestSeries=series[i].length===w.globals.dataPoints;this.elSeries.attr({'data:longestSeries':longestSeries,rel:i+1,'data:realIndex':realIndex});this.appendPathFrom=true;}},{key:"_calculatePathsFrom",value:function _calculatePathsFrom(_ref){var series=_ref.series,i=_ref.i,realIndex=_ref.realIndex,prevX=_ref.prevX,prevY=_ref.prevY;var w=this.w;var graphics=new Graphics(this.ctx);var linePath,areaPath,pathFromLine,pathFromArea;if(series[i][0]===null){// when the first value itself is null, we need to move the pointer to a location where a null value is not found
for(var s=0;s<series[i].length;s++){if(series[i][s]!==null){prevX=this.xDivision*s;prevY=this.zeroY-series[i][s]/this.yRatio[this.yaxisIndex];linePath=graphics.move(prevX,prevY);areaPath=graphics.move(prevX,this.areaBottomY);break;}}}else{linePath=graphics.move(prevX,prevY);areaPath=graphics.move(prevX,this.areaBottomY)+graphics.line(prevX,prevY);}pathFromLine=graphics.move(-1,this.zeroY)+graphics.line(-1,this.zeroY);pathFromArea=graphics.move(-1,this.zeroY)+graphics.line(-1,this.zeroY);if(w.globals.previousPaths.length>0){var pathFrom=this.lineHelpers.checkPreviousPaths({pathFromLine:pathFromLine,pathFromArea:pathFromArea,realIndex:realIndex});pathFromLine=pathFrom.pathFromLine;pathFromArea=pathFrom.pathFromArea;}return{prevX:prevX,prevY:prevY,linePath:linePath,areaPath:areaPath,pathFromLine:pathFromLine,pathFromArea:pathFromArea};}},{key:"_handlePaths",value:function _handlePaths(_ref2){var type=_ref2.type,realIndex=_ref2.realIndex,i=_ref2.i,paths=_ref2.paths;var w=this.w;var graphics=new Graphics(this.ctx);var fill=new Fill(this.ctx);// push all current y values array to main PrevY Array
this.prevSeriesY.push(paths.yArrj);// push all x val arrays into main xArr
w.globals.seriesXvalues[realIndex]=paths.xArrj;w.globals.seriesYvalues[realIndex]=paths.yArrj;// these elements will be shown after area path animation completes
if(!this.pointsChart){w.globals.delayedElements.push({el:this.elPointsMain.node,index:realIndex});}var defaultRenderedPathOptions={i:i,realIndex:realIndex,animationDelay:i,initialSpeed:w.config.chart.animations.speed,dataChangeSpeed:w.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-".concat(type)};if(type==='area'){var pathFill=fill.fillPath({seriesNumber:realIndex});for(var p=0;p<paths.areaPaths.length;p++){var renderedPath=graphics.renderPaths(_objectSpread2({},defaultRenderedPathOptions,{pathFrom:paths.pathFromArea,pathTo:paths.areaPaths[p],stroke:'none',strokeWidth:0,strokeLineCap:null,fill:pathFill}));this.elSeries.add(renderedPath);}}if(w.config.stroke.show&&!this.pointsChart){var lineFill=null;if(type==='line'){// fillable lines only for lineChart
lineFill=fill.fillPath({seriesNumber:realIndex,i:i});}else{lineFill=w.globals.stroke.colors[realIndex];}for(var _p=0;_p<paths.linePaths.length;_p++){var _renderedPath=graphics.renderPaths(_objectSpread2({},defaultRenderedPathOptions,{pathFrom:paths.pathFromLine,pathTo:paths.linePaths[_p],stroke:lineFill,strokeWidth:this.strokeWidth,strokeLineCap:w.config.stroke.lineCap,fill:'none'}));this.elSeries.add(_renderedPath);}}}},{key:"_iterateOverDataPoints",value:function _iterateOverDataPoints(_ref3){var series=_ref3.series,realIndex=_ref3.realIndex,i=_ref3.i,x=_ref3.x,y=_ref3.y,pX=_ref3.pX,pY=_ref3.pY,pathsFrom=_ref3.pathsFrom,linePaths=_ref3.linePaths,areaPaths=_ref3.areaPaths,seriesIndex=_ref3.seriesIndex,lineYPosition=_ref3.lineYPosition,xArrj=_ref3.xArrj,yArrj=_ref3.yArrj;var w=this.w;var graphics=new Graphics(this.ctx);var yRatio=this.yRatio;var prevY=pathsFrom.prevY,linePath=pathsFrom.linePath,areaPath=pathsFrom.areaPath,pathFromLine=pathsFrom.pathFromLine,pathFromArea=pathsFrom.pathFromArea;var minY=Utils.isNumber(w.globals.minYArr[realIndex])?w.globals.minYArr[realIndex]:w.globals.minY;var iterations=w.globals.dataPoints>1?w.globals.dataPoints-1:w.globals.dataPoints;for(var j=0;j<iterations;j++){var isNull=typeof series[i][j+1]==='undefined'||series[i][j+1]===null;if(w.globals.isXNumeric){var sX=w.globals.seriesX[realIndex][j+1];if(typeof w.globals.seriesX[realIndex][j+1]==='undefined'){/* fix #374 */sX=w.globals.seriesX[realIndex][iterations-1];}x=(sX-w.globals.minX)/this.xRatio;}else{x=x+this.xDivision;}if(w.config.chart.stacked){if(i>0&&w.globals.collapsedSeries.length<w.config.series.length-1){lineYPosition=this.prevSeriesY[i-1][j+1];}else{// the first series will not have prevY values
lineYPosition=this.zeroY;}}else{lineYPosition=this.zeroY;}if(isNull){y=lineYPosition-minY/yRatio[this.yaxisIndex]+(this.isReversed?minY/yRatio[this.yaxisIndex]:0)*2;}else{y=lineYPosition-series[i][j+1]/yRatio[this.yaxisIndex]+(this.isReversed?series[i][j+1]/yRatio[this.yaxisIndex]:0)*2;}// push current X
xArrj.push(x);// push current Y that will be used as next series's bottom position
yArrj.push(y);var pointsPos=this.lineHelpers.calculatePoints({series:series,x:x,y:y,realIndex:realIndex,i:i,j:j,prevY:prevY});var calculatedPaths=this._createPaths({series:series,i:i,realIndex:realIndex,j:j,x:x,y:y,pX:pX,pY:pY,linePath:linePath,areaPath:areaPath,linePaths:linePaths,areaPaths:areaPaths,seriesIndex:seriesIndex});areaPaths=calculatedPaths.areaPaths;linePaths=calculatedPaths.linePaths;pX=calculatedPaths.pX;pY=calculatedPaths.pY;areaPath=calculatedPaths.areaPath;linePath=calculatedPaths.linePath;if(this.appendPathFrom){pathFromLine=pathFromLine+graphics.line(x,this.zeroY);pathFromArea=pathFromArea+graphics.line(x,this.zeroY);}this.handleNullDataPoints(series,pointsPos,i,j,realIndex);this._handleMarkersAndLabels({pointsPos:pointsPos,series:series,x:x,y:y,prevY:prevY,i:i,j:j,realIndex:realIndex});}return{yArrj:yArrj,xArrj:xArrj,pathFromArea:pathFromArea,areaPaths:areaPaths,pathFromLine:pathFromLine,linePaths:linePaths};}},{key:"_handleMarkersAndLabels",value:function _handleMarkersAndLabels(_ref4){var pointsPos=_ref4.pointsPos,series=_ref4.series,x=_ref4.x,y=_ref4.y,prevY=_ref4.prevY,i=_ref4.i,j=_ref4.j,realIndex=_ref4.realIndex;var w=this.w;var dataLabels=new DataLabels(this.ctx);if(!this.pointsChart){if(w.globals.series[i].length>1){this.elPointsMain.node.classList.add('apexcharts-element-hidden');}var elPointsWrap=this.markers.plotChartMarkers(pointsPos,realIndex,j+1);if(elPointsWrap!==null){this.elPointsMain.add(elPointsWrap);}}else{// scatter / bubble chart points creation
this.scatter.draw(this.elSeries,j,{realIndex:realIndex,pointsPos:pointsPos,zRatio:this.zRatio,elParent:this.elPointsMain});}var drawnLabels=dataLabels.drawDataLabel(pointsPos,realIndex,j+1,null);if(drawnLabels!==null){this.elDataLabelsWrap.add(drawnLabels);}}},{key:"_createPaths",value:function _createPaths(_ref5){var series=_ref5.series,i=_ref5.i,realIndex=_ref5.realIndex,j=_ref5.j,x=_ref5.x,y=_ref5.y,pX=_ref5.pX,pY=_ref5.pY,linePath=_ref5.linePath,areaPath=_ref5.areaPath,linePaths=_ref5.linePaths,areaPaths=_ref5.areaPaths,seriesIndex=_ref5.seriesIndex;var w=this.w;var graphics=new Graphics(this.ctx);var curve=w.config.stroke.curve;var areaBottomY=this.areaBottomY;if(Array.isArray(w.config.stroke.curve)){if(Array.isArray(seriesIndex)){curve=w.config.stroke.curve[seriesIndex[i]];}else{curve=w.config.stroke.curve[i];}}// logic of smooth curve derived from chartist
// CREDITS: https://gionkunz.github.io/chartist-js/
if(curve==='smooth'){var length=(x-pX)*0.35;if(w.globals.hasNullValues){if(series[i][j]!==null){if(series[i][j+1]!==null){linePath=graphics.move(pX,pY)+graphics.curve(pX+length,pY,x-length,y,x+1,y);areaPath=graphics.move(pX+1,pY)+graphics.curve(pX+length,pY,x-length,y,x+1,y)+graphics.line(x,areaBottomY)+graphics.line(pX,areaBottomY)+'z';}else{linePath=graphics.move(pX,pY);areaPath=graphics.move(pX,pY)+'z';}}linePaths.push(linePath);areaPaths.push(areaPath);}else{linePath=linePath+graphics.curve(pX+length,pY,x-length,y,x,y);areaPath=areaPath+graphics.curve(pX+length,pY,x-length,y,x,y);}pX=x;pY=y;if(j===series[i].length-2){// last loop, close path
areaPath=areaPath+graphics.curve(pX,pY,x,y,x,areaBottomY)+graphics.move(x,y)+'z';if(!w.globals.hasNullValues){linePaths.push(linePath);areaPaths.push(areaPath);}}}else{if(series[i][j+1]===null){linePath=linePath+graphics.move(x,y);var numericOrCatX=w.globals.isXNumeric?(w.globals.seriesX[realIndex][j]-w.globals.minX)/this.xRatio:x-this.xDivision;areaPath=areaPath+graphics.line(numericOrCatX,areaBottomY)+graphics.move(x,y)+'z';}if(series[i][j]===null){linePath=linePath+graphics.move(x,y);areaPath=areaPath+graphics.move(x,areaBottomY);}if(curve==='stepline'){linePath=linePath+graphics.line(x,null,'H')+graphics.line(null,y,'V');areaPath=areaPath+graphics.line(x,null,'H')+graphics.line(null,y,'V');}else if(curve==='straight'){linePath=linePath+graphics.line(x,y);areaPath=areaPath+graphics.line(x,y);}if(j===series[i].length-2){// last loop, close path
areaPath=areaPath+graphics.line(x,areaBottomY)+graphics.move(x,y)+'z';linePaths.push(linePath);areaPaths.push(areaPath);}}return{linePaths:linePaths,areaPaths:areaPaths,pX:pX,pY:pY,linePath:linePath,areaPath:areaPath};}},{key:"handleNullDataPoints",value:function handleNullDataPoints(series,pointsPos,i,j,realIndex){var w=this.w;if(series[i][j]===null&&w.config.markers.showNullDataPoints||series[i].length===1){// fixes apexcharts.js#1282, #1252
var elPointsWrap=this.markers.plotChartMarkers(pointsPos,realIndex,j+1,this.strokeWidth-w.config.markers.strokeWidth/2,true);if(elPointsWrap!==null){this.elPointsMain.add(elPointsWrap);}}}}]);return Line;}();/**
   * ApexCharts TimeScale Class for generating time ticks for x-axis.
   *
   * @module TimeScale
   **/var TimeScale=/*#__PURE__*/function(){function TimeScale(ctx){_classCallCheck(this,TimeScale);this.ctx=ctx;this.w=ctx.w;this.timeScaleArray=[];this.utc=this.w.config.xaxis.labels.datetimeUTC;}_createClass(TimeScale,[{key:"calculateTimeScaleTicks",value:function calculateTimeScaleTicks(minX,maxX){var _this=this;var w=this.w;// null check when no series to show
if(w.globals.allSeriesCollapsed){w.globals.labels=[];w.globals.timescaleLabels=[];return[];}var dt=new DateTime(this.ctx);var daysDiff=(maxX-minX)/(1000*60*60*24);this.determineInterval(daysDiff);w.globals.disableZoomIn=false;w.globals.disableZoomOut=false;if(daysDiff<0.005){w.globals.disableZoomIn=true;}else if(daysDiff>50000){w.globals.disableZoomOut=true;}var timeIntervals=dt.getTimeUnitsfromTimestamp(minX,maxX,this.utc);var daysWidthOnXAxis=w.globals.gridWidth/daysDiff;var hoursWidthOnXAxis=daysWidthOnXAxis/24;var minutesWidthOnXAxis=hoursWidthOnXAxis/60;var numberOfHours=Math.floor(daysDiff*24);var numberOfMinutes=Math.floor(daysDiff*24*60);var numberOfDays=Math.floor(daysDiff);var numberOfMonths=Math.floor(daysDiff/30);var numberOfYears=Math.floor(daysDiff/365);var firstVal={minMinute:timeIntervals.minMinute,minHour:timeIntervals.minHour,minDate:timeIntervals.minDate,minMonth:timeIntervals.minMonth,minYear:timeIntervals.minYear};var currentMinute=firstVal.minMinute;var currentHour=firstVal.minHour;var currentMonthDate=firstVal.minDate;var currentDate=firstVal.minDate;var currentMonth=firstVal.minMonth;var currentYear=firstVal.minYear;var params={firstVal:firstVal,currentMinute:currentMinute,currentHour:currentHour,currentMonthDate:currentMonthDate,currentDate:currentDate,currentMonth:currentMonth,currentYear:currentYear,daysWidthOnXAxis:daysWidthOnXAxis,hoursWidthOnXAxis:hoursWidthOnXAxis,minutesWidthOnXAxis:minutesWidthOnXAxis,numberOfMinutes:numberOfMinutes,numberOfHours:numberOfHours,numberOfDays:numberOfDays,numberOfMonths:numberOfMonths,numberOfYears:numberOfYears};switch(this.tickInterval){case'years':{this.generateYearScale(params);break;}case'months':case'half_year':{this.generateMonthScale(params);break;}case'months_days':case'months_fortnight':case'days':case'week_days':{this.generateDayScale(params);break;}case'hours':{this.generateHourScale(params);break;}case'minutes':this.generateMinuteScale(params);break;}// first, we will adjust the month values index
// as in the upper function, it is starting from 0
// we will start them from 1
var adjustedMonthInTimeScaleArray=this.timeScaleArray.map(function(ts){var defaultReturn={position:ts.position,unit:ts.unit,year:ts.year,day:ts.day?ts.day:1,hour:ts.hour?ts.hour:0,month:ts.month+1};if(ts.unit==='month'){return _objectSpread2({},defaultReturn,{day:1,value:ts.value+1});}else if(ts.unit==='day'||ts.unit==='hour'){return _objectSpread2({},defaultReturn,{value:ts.value});}else if(ts.unit==='minute'){return _objectSpread2({},defaultReturn,{value:ts.value,minute:ts.value});}return ts;});var filteredTimeScale=adjustedMonthInTimeScaleArray.filter(function(ts){var modulo=1;var ticks=Math.ceil(w.globals.gridWidth/120);var value=ts.value;if(w.config.xaxis.tickAmount!==undefined){ticks=w.config.xaxis.tickAmount;}if(adjustedMonthInTimeScaleArray.length>ticks){modulo=Math.floor(adjustedMonthInTimeScaleArray.length/ticks);}var shouldNotSkipUnit=false;// there is a big change in unit i.e days to months
var shouldNotPrint=false;// should skip these values
switch(_this.tickInterval){case'years':// make years label denser
if(ts.unit==='year'){shouldNotSkipUnit=true;}break;case'half_year':modulo=7;if(ts.unit==='year'){shouldNotSkipUnit=true;}break;case'months':modulo=1;if(ts.unit==='year'){shouldNotSkipUnit=true;}break;case'months_fortnight':modulo=15;if(ts.unit==='year'||ts.unit==='month'){shouldNotSkipUnit=true;}if(value===30){shouldNotPrint=true;}break;case'months_days':modulo=10;if(ts.unit==='month'){shouldNotSkipUnit=true;}if(value===30){shouldNotPrint=true;}break;case'week_days':modulo=8;if(ts.unit==='month'){shouldNotSkipUnit=true;}break;case'days':modulo=1;if(ts.unit==='month'){shouldNotSkipUnit=true;}break;case'hours':if(ts.unit==='day'){shouldNotSkipUnit=true;}break;case'minutes':if(value%5!==0){shouldNotPrint=true;}break;}if(_this.tickInterval==='minutes'||_this.tickInterval==='hours'){if(!shouldNotPrint){return true;}}else{if((value%modulo===0||shouldNotSkipUnit)&&!shouldNotPrint){return true;}}});return filteredTimeScale;}},{key:"recalcDimensionsBasedOnFormat",value:function recalcDimensionsBasedOnFormat(filteredTimeScale,inverted){var w=this.w;var reformattedTimescaleArray=this.formatDates(filteredTimeScale);var removedOverlappingTS=this.removeOverlappingTS(reformattedTimescaleArray);w.globals.timescaleLabels=removedOverlappingTS.slice();// at this stage, we need to re-calculate coords of the grid as timeline labels may have altered the xaxis labels coords
// The reason we can't do this prior to this stage is because timeline labels depends on gridWidth, and as the ticks are calculated based on available gridWidth, there can be unknown number of ticks generated for different minX and maxX
// Dependency on Dimensions(), need to refactor correctly
// TODO - find an alternate way to avoid calling this Heavy method twice
var dimensions=new Dimensions(this.ctx);dimensions.plotCoords();}},{key:"determineInterval",value:function determineInterval(daysDiff){switch(true){case daysDiff>1825:// difference is more than 5 years
this.tickInterval='years';break;case daysDiff>800&&daysDiff<=1825:this.tickInterval='half_year';break;case daysDiff>180&&daysDiff<=800:this.tickInterval='months';break;case daysDiff>90&&daysDiff<=180:this.tickInterval='months_fortnight';break;case daysDiff>60&&daysDiff<=90:this.tickInterval='months_days';break;case daysDiff>30&&daysDiff<=60:this.tickInterval='week_days';break;case daysDiff>2&&daysDiff<=30:this.tickInterval='days';break;case daysDiff>0.1&&daysDiff<=2:// less than  2 days
this.tickInterval='hours';break;case daysDiff<0.1:this.tickInterval='minutes';break;default:this.tickInterval='days';break;}}},{key:"generateYearScale",value:function generateYearScale(_ref){var firstVal=_ref.firstVal,currentMonth=_ref.currentMonth,currentYear=_ref.currentYear,daysWidthOnXAxis=_ref.daysWidthOnXAxis,numberOfYears=_ref.numberOfYears;var firstTickValue=firstVal.minYear;var firstTickPosition=0;var dt=new DateTime(this.ctx);var unit='year';if(firstVal.minDate>1&&firstVal.minMonth>0){var remainingDays=dt.determineRemainingDaysOfYear(firstVal.minYear,firstVal.minMonth,firstVal.minDate);// remainingDaysofFirstMonth is used to reacht the 2nd tick position
var remainingDaysOfFirstYear=dt.determineDaysOfYear(firstVal.minYear)-remainingDays+1;// calculate the first tick position
firstTickPosition=remainingDaysOfFirstYear*daysWidthOnXAxis;firstTickValue=firstVal.minYear+1;// push the first tick in the array
this.timeScaleArray.push({position:firstTickPosition,value:firstTickValue,unit:unit,year:firstTickValue,month:Utils.monthMod(currentMonth+1)});}else if(firstVal.minDate===1&&firstVal.minMonth===0){// push the first tick in the array
this.timeScaleArray.push({position:firstTickPosition,value:firstTickValue,unit:unit,year:currentYear,month:Utils.monthMod(currentMonth+1)});}var year=firstTickValue;var pos=firstTickPosition;// keep drawing rest of the ticks
for(var i=0;i<numberOfYears;i++){year++;pos=dt.determineDaysOfYear(year-1)*daysWidthOnXAxis+pos;this.timeScaleArray.push({position:pos,value:year,unit:unit,year:year,month:1});}}},{key:"generateMonthScale",value:function generateMonthScale(_ref2){var firstVal=_ref2.firstVal,currentMonthDate=_ref2.currentMonthDate,currentMonth=_ref2.currentMonth,currentYear=_ref2.currentYear,daysWidthOnXAxis=_ref2.daysWidthOnXAxis,numberOfMonths=_ref2.numberOfMonths;var firstTickValue=currentMonth;var firstTickPosition=0;var dt=new DateTime(this.ctx);var unit='month';var yrCounter=0;if(firstVal.minDate>1){// remainingDaysofFirstMonth is used to reacht the 2nd tick position
var remainingDaysOfFirstMonth=dt.determineDaysOfMonths(currentMonth+1,firstVal.minYear)-currentMonthDate+1;// calculate the first tick position
firstTickPosition=remainingDaysOfFirstMonth*daysWidthOnXAxis;firstTickValue=Utils.monthMod(currentMonth+1);var year=currentYear+yrCounter;var _month=Utils.monthMod(firstTickValue);var value=firstTickValue;// it's Jan, so update the year
if(firstTickValue===0){unit='year';value=year;_month=1;yrCounter+=1;year=year+yrCounter;}// push the first tick in the array
this.timeScaleArray.push({position:firstTickPosition,value:value,unit:unit,year:year,month:_month});}else{// push the first tick in the array
this.timeScaleArray.push({position:firstTickPosition,value:firstTickValue,unit:unit,year:currentYear,month:Utils.monthMod(currentMonth)});}var month=firstTickValue+1;var pos=firstTickPosition;// keep drawing rest of the ticks
for(var i=0,j=1;i<numberOfMonths;i++,j++){month=Utils.monthMod(month);if(month===0){unit='year';yrCounter+=1;}else{unit='month';}var _year=this._getYear(currentYear,month,yrCounter);pos=dt.determineDaysOfMonths(month,_year)*daysWidthOnXAxis+pos;var monthVal=month===0?_year:month;this.timeScaleArray.push({position:pos,value:monthVal,unit:unit,year:_year,month:month===0?1:month});month++;}}},{key:"generateDayScale",value:function generateDayScale(_ref3){var firstVal=_ref3.firstVal,currentMonth=_ref3.currentMonth,currentYear=_ref3.currentYear,hoursWidthOnXAxis=_ref3.hoursWidthOnXAxis,numberOfDays=_ref3.numberOfDays;var dt=new DateTime(this.ctx);var unit='day';var firstTickValue=firstVal.minDate+1;var date=firstTickValue;var changeMonth=function changeMonth(dateVal,month,year){var monthdays=dt.determineDaysOfMonths(month+1,year);if(dateVal>monthdays){month=month+1;date=1;unit='month';val=month;return month;}return month;};var remainingHours=24-firstVal.minHour;var yrCounter=0;// calculate the first tick position
var firstTickPosition=remainingHours*hoursWidthOnXAxis;var val=firstTickValue;var month=changeMonth(date,currentMonth,currentYear);if(firstVal.minHour===0&&firstVal.minDate===1){// the first value is the first day of month
firstTickPosition=0;val=Utils.monthMod(firstVal.minMonth);unit='month';date=firstVal.minDate;numberOfDays++;}// push the first tick in the array
this.timeScaleArray.push({position:firstTickPosition,value:val,unit:unit,year:this._getYear(currentYear,month,yrCounter),month:Utils.monthMod(month),day:date});var pos=firstTickPosition;// keep drawing rest of the ticks
for(var i=0;i<numberOfDays;i++){date+=1;unit='day';month=changeMonth(date,month,this._getYear(currentYear,month,yrCounter));var year=this._getYear(currentYear,month,yrCounter);pos=24*hoursWidthOnXAxis+pos;var value=date===1?Utils.monthMod(month):date;this.timeScaleArray.push({position:pos,value:value,unit:unit,year:year,month:Utils.monthMod(month),day:value});}}},{key:"generateHourScale",value:function generateHourScale(_ref4){var firstVal=_ref4.firstVal,currentDate=_ref4.currentDate,currentMonth=_ref4.currentMonth,currentYear=_ref4.currentYear,minutesWidthOnXAxis=_ref4.minutesWidthOnXAxis,numberOfHours=_ref4.numberOfHours;var dt=new DateTime(this.ctx);var yrCounter=0;var unit='hour';var changeDate=function changeDate(dateVal,month){var monthdays=dt.determineDaysOfMonths(month+1,currentYear);if(dateVal>monthdays){date=1;month=month+1;}return{month:month,date:date};};var changeMonth=function changeMonth(dateVal,month){var monthdays=dt.determineDaysOfMonths(month+1,currentYear);if(dateVal>monthdays){month=month+1;return month;}return month;};var remainingMins=60-firstVal.minMinute;var firstTickPosition=remainingMins*minutesWidthOnXAxis;var firstTickValue=firstVal.minHour+1;var hour=firstTickValue+1;if(remainingMins===60){firstTickPosition=0;firstTickValue=firstVal.minHour;hour=firstTickValue+1;}var date=currentDate;var month=changeMonth(date,currentMonth);// push the first tick in the array
this.timeScaleArray.push({position:firstTickPosition,value:firstTickValue,unit:unit,day:date,hour:hour,year:currentYear,month:Utils.monthMod(month)});var pos=firstTickPosition;// keep drawing rest of the ticks
for(var i=0;i<numberOfHours;i++){unit='hour';if(hour>=24){hour=0;date+=1;unit='day';var checkNextMonth=changeDate(date,month);month=checkNextMonth.month;month=changeMonth(date,month);}var year=this._getYear(currentYear,month,yrCounter);pos=hour===0&&i===0?remainingMins*minutesWidthOnXAxis:60*minutesWidthOnXAxis+pos;var val=hour===0?date:hour;this.timeScaleArray.push({position:pos,value:val,unit:unit,hour:hour,day:date,year:year,month:Utils.monthMod(month)});hour++;}}},{key:"generateMinuteScale",value:function generateMinuteScale(_ref5){var firstVal=_ref5.firstVal,currentMinute=_ref5.currentMinute,currentHour=_ref5.currentHour,currentDate=_ref5.currentDate,currentMonth=_ref5.currentMonth,currentYear=_ref5.currentYear,minutesWidthOnXAxis=_ref5.minutesWidthOnXAxis,numberOfMinutes=_ref5.numberOfMinutes;var yrCounter=0;var unit='minute';var remainingMins=currentMinute-firstVal.minMinute;var firstTickPosition=minutesWidthOnXAxis-remainingMins;var firstTickValue=firstVal.minMinute+1;var minute=firstTickValue+1;var date=currentDate;var month=currentMonth;var year=currentYear;var hour=currentHour;// push the first tick in the array
this.timeScaleArray.push({position:firstTickPosition,value:firstTickValue,unit:unit,day:date,hour:hour,minute:minute,year:year,month:Utils.monthMod(month)});var pos=firstTickPosition;// keep drawing rest of the ticks
for(var i=0;i<numberOfMinutes;i++){if(minute>=60){minute=0;hour+=1;if(hour===24){hour=0;}}pos=minutesWidthOnXAxis+pos;this.timeScaleArray.push({position:pos,value:minute,unit:unit,hour:hour,minute:minute,day:date,year:this._getYear(currentYear,month,yrCounter),month:Utils.monthMod(month)});minute++;}}},{key:"createRawDateString",value:function createRawDateString(ts,value){var raw=ts.year;raw+='-'+('0'+ts.month.toString()).slice(-2);// unit is day
if(ts.unit==='day'){raw+=ts.unit==='day'?'-'+('0'+value).slice(-2):'-01';}else{raw+='-'+('0'+(ts.day?ts.day:'1')).slice(-2);}// unit is hour
if(ts.unit==='hour'){raw+=ts.unit==='hour'?'T'+('0'+value).slice(-2):'T00';}else{raw+='T'+('0'+(ts.hour?ts.hour:'0')).slice(-2);}// unit is minute
raw+=ts.unit==='minute'?':'+('0'+value).slice(-2)+':00':':00:00';if(this.utc){raw+='.000Z';}return raw;}},{key:"formatDates",value:function formatDates(filteredTimeScale){var _this2=this;var w=this.w;var reformattedTimescaleArray=filteredTimeScale.map(function(ts){var value=ts.value.toString();var dt=new DateTime(_this2.ctx);var raw=_this2.createRawDateString(ts,value);var dateToFormat=dt.getDate(raw);if(w.config.xaxis.labels.format===undefined){var customFormat='dd MMM';var dtFormatter=w.config.xaxis.labels.datetimeFormatter;if(ts.unit==='year')customFormat=dtFormatter.year;if(ts.unit==='month')customFormat=dtFormatter.month;if(ts.unit==='day')customFormat=dtFormatter.day;if(ts.unit==='hour')customFormat=dtFormatter.hour;if(ts.unit==='minute')customFormat=dtFormatter.minute;value=dt.formatDate(dateToFormat,customFormat);}else{value=dt.formatDate(dateToFormat,w.config.xaxis.labels.format);}return{dateString:raw,position:ts.position,value:value,unit:ts.unit,year:ts.year,month:ts.month};});return reformattedTimescaleArray;}},{key:"removeOverlappingTS",value:function removeOverlappingTS(arr){var _this3=this;var graphics=new Graphics(this.ctx);var equalLabelLengthFlag=false;// These labels got same length?
var constantLabelWidth;// If true, what is the constant length to use
if(arr.length>0&&// check arr length
arr[0].value&&// check arr[0] contains value
arr.every(function(lb){return lb.value.length===arr[0].value.length;})// check every arr label value is the same as the first one
){equalLabelLengthFlag=true;// These labels got same length
constantLabelWidth=graphics.getTextRects(arr[0].value).width;// The constant label width to use
}var lastDrawnIndex=0;var filteredArray=arr.map(function(item,index){if(index>0&&_this3.w.config.xaxis.labels.hideOverlappingLabels){var prevLabelWidth=!equalLabelLengthFlag// if vary in label length
?graphics.getTextRects(arr[lastDrawnIndex].value).width// get individual length
:constantLabelWidth;// else: use constant length
var prevPos=arr[lastDrawnIndex].position;var pos=item.position;if(pos>prevPos+prevLabelWidth+10){lastDrawnIndex=index;return item;}else{return null;}}else{return item;}});filteredArray=filteredArray.filter(function(f){return f!==null;});return filteredArray;}},{key:"_getYear",value:function _getYear(currentYear,month,yrCounter){return currentYear+Math.floor(month/12)+yrCounter;}}]);return TimeScale;}();/**
   * ApexCharts Core Class responsible for major calculations and creating elements.
   *
   * @module Core
   **/var Core=/*#__PURE__*/function(){function Core(el,ctx){_classCallCheck(this,Core);this.ctx=ctx;this.w=ctx.w;this.el=el;}// get data and store into appropriate vars
_createClass(Core,[{key:"setupElements",value:function setupElements(){var gl=this.w.globals;var cnf=this.w.config;// const graphics = new Graphics(this.ctx)
var ct=cnf.chart.type;var axisChartsArrTypes=['line','area','bar','rangeBar','candlestick','scatter','bubble','radar','heatmap'];var xyChartsArrTypes=['line','area','bar','rangeBar','candlestick','scatter','bubble'];gl.axisCharts=axisChartsArrTypes.indexOf(ct)>-1;gl.xyCharts=xyChartsArrTypes.indexOf(ct)>-1;gl.isBarHorizontal=(cnf.chart.type==='bar'||cnf.chart.type==='rangeBar')&&cnf.plotOptions.bar.horizontal;gl.chartClass='.apexcharts'+gl.cuid;gl.dom.baseEl=this.el;gl.dom.elWrap=document.createElement('div');Graphics.setAttrs(gl.dom.elWrap,{id:gl.chartClass.substring(1),"class":'apexcharts-canvas '+gl.chartClass.substring(1)});this.el.appendChild(gl.dom.elWrap);gl.dom.Paper=new window.SVG.Doc(gl.dom.elWrap);gl.dom.Paper.attr({"class":'apexcharts-svg','xmlns:data':'ApexChartsNS',transform:"translate(".concat(cnf.chart.offsetX,", ").concat(cnf.chart.offsetY,")")});gl.dom.Paper.node.style.background=cnf.chart.background;this.setSVGDimensions();gl.dom.elGraphical=gl.dom.Paper.group().attr({"class":'apexcharts-inner apexcharts-graphical'});gl.dom.elAnnotations=gl.dom.Paper.group().attr({"class":'apexcharts-annotations'});gl.dom.elDefs=gl.dom.Paper.defs();gl.dom.elLegendWrap=document.createElement('div');gl.dom.elLegendWrap.classList.add('apexcharts-legend');gl.dom.elWrap.appendChild(gl.dom.elLegendWrap);gl.dom.Paper.add(gl.dom.elGraphical);gl.dom.elGraphical.add(gl.dom.elDefs);}},{key:"plotChartType",value:function plotChartType(ser,xyRatios){var w=this.w;var cnf=w.config;var gl=w.globals;var lineSeries={series:[],i:[]};var areaSeries={series:[],i:[]};var scatterSeries={series:[],i:[]};var bubbleSeries={series:[],i:[]};var columnSeries={series:[],i:[]};var candlestickSeries={series:[],i:[]};gl.series.map(function(series,st){// if user has specified a particular type for particular series
if(typeof ser[st].type!=='undefined'){if(ser[st].type==='column'||ser[st].type==='bar'){if(gl.series.length>1&&cnf.plotOptions.bar.horizontal){// horizontal bars not supported in mixed charts, hence show a warning
console.warn('Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`');}columnSeries.series.push(series);columnSeries.i.push(st);w.globals.columnSeries=columnSeries.series;}else if(ser[st].type==='area'){areaSeries.series.push(series);areaSeries.i.push(st);}else if(ser[st].type==='line'){lineSeries.series.push(series);lineSeries.i.push(st);}else if(ser[st].type==='scatter'){scatterSeries.series.push(series);scatterSeries.i.push(st);}else if(ser[st].type==='bubble'){bubbleSeries.series.push(series);bubbleSeries.i.push(st);}else if(ser[st].type==='candlestick'){candlestickSeries.series.push(series);candlestickSeries.i.push(st);}else{// user has specified type, but it is not valid (other than line/area/column)
console.warn('You have specified an unrecognized chart type. Available types for this propery are line/area/column/bar/scatter/bubble');}gl.comboCharts=true;}else{lineSeries.series.push(series);lineSeries.i.push(st);}});var line=new Line(this.ctx,xyRatios);var candlestick=new CandleStick(this.ctx,xyRatios);var pie=new Pie(this.ctx);var radialBar=new Radial(this.ctx);var rangeBar=new RangeBar(this.ctx,xyRatios);var radar=new Radar(this.ctx);var elGraph=[];if(gl.comboCharts){if(areaSeries.series.length>0){elGraph.push(line.draw(areaSeries.series,'area',areaSeries.i));}if(columnSeries.series.length>0){if(w.config.chart.stacked){var barStacked=new BarStacked(this.ctx,xyRatios);elGraph.push(barStacked.draw(columnSeries.series,columnSeries.i));}else{var bar=new Bar(this.ctx,xyRatios);elGraph.push(bar.draw(columnSeries.series,columnSeries.i));}}if(lineSeries.series.length>0){elGraph.push(line.draw(lineSeries.series,'line',lineSeries.i));}if(candlestickSeries.series.length>0){elGraph.push(candlestick.draw(candlestickSeries.series,candlestickSeries.i));}if(scatterSeries.series.length>0){var scatterLine=new Line(this.ctx,xyRatios,true);elGraph.push(scatterLine.draw(scatterSeries.series,'scatter',scatterSeries.i));}if(bubbleSeries.series.length>0){var bubbleLine=new Line(this.ctx,xyRatios,true);elGraph.push(bubbleLine.draw(bubbleSeries.series,'bubble',bubbleSeries.i));}}else{switch(cnf.chart.type){case'line':elGraph=line.draw(gl.series,'line');break;case'area':elGraph=line.draw(gl.series,'area');break;case'bar':if(cnf.chart.stacked){var _barStacked=new BarStacked(this.ctx,xyRatios);elGraph=_barStacked.draw(gl.series);}else{var _bar=new Bar(this.ctx,xyRatios);elGraph=_bar.draw(gl.series);}break;case'candlestick':var candleStick=new CandleStick(this.ctx,xyRatios);elGraph=candleStick.draw(gl.series);break;case'rangeBar':elGraph=rangeBar.draw(gl.series);break;case'heatmap':var heatmap=new HeatMap(this.ctx,xyRatios);elGraph=heatmap.draw(gl.series);break;case'pie':case'donut':elGraph=pie.draw(gl.series);break;case'radialBar':elGraph=radialBar.draw(gl.series);break;case'radar':elGraph=radar.draw(gl.series);break;default:elGraph=line.draw(gl.series);}}return elGraph;}},{key:"setSVGDimensions",value:function setSVGDimensions(){var gl=this.w.globals;var cnf=this.w.config;gl.svgWidth=cnf.chart.width;gl.svgHeight=cnf.chart.height;var elDim=Utils.getDimensions(this.el);var widthUnit=cnf.chart.width.toString().split(/[0-9]+/g).pop();if(widthUnit==='%'){if(Utils.isNumber(elDim[0])){if(elDim[0].width===0){elDim=Utils.getDimensions(this.el.parentNode);}gl.svgWidth=elDim[0]*parseInt(cnf.chart.width,10)/100;}}else if(widthUnit==='px'||widthUnit===''){gl.svgWidth=parseInt(cnf.chart.width,10);}if(gl.svgHeight!=='auto'&&gl.svgHeight!==''){var heightUnit=cnf.chart.height.toString().split(/[0-9]+/g).pop();if(heightUnit==='%'){var elParentDim=Utils.getDimensions(this.el.parentNode);gl.svgHeight=elParentDim[1]*parseInt(cnf.chart.height,10)/100;}else{gl.svgHeight=parseInt(cnf.chart.height,10);}}else{if(gl.axisCharts){gl.svgHeight=gl.svgWidth/1.61;}else{gl.svgHeight=gl.svgWidth/1.2;}}if(gl.svgWidth<0)gl.svgWidth=0;if(gl.svgHeight<0)gl.svgHeight=0;Graphics.setAttrs(gl.dom.Paper.node,{width:gl.svgWidth,height:gl.svgHeight});// gl.dom.Paper.node.parentNode.parentNode.style.minWidth = gl.svgWidth + "px";
var offsetY=cnf.chart.sparkline.enabled?0:gl.axisCharts?cnf.chart.parentHeightOffset:0;gl.dom.Paper.node.parentNode.parentNode.style.minHeight=gl.svgHeight+offsetY+'px';gl.dom.elWrap.style.width=gl.svgWidth+'px';gl.dom.elWrap.style.height=gl.svgHeight+'px';}},{key:"shiftGraphPosition",value:function shiftGraphPosition(){var gl=this.w.globals;var tY=gl.translateY;var tX=gl.translateX;var scalingAttrs={transform:'translate('+tX+', '+tY+')'};Graphics.setAttrs(gl.dom.elGraphical.node,scalingAttrs);gl.x2SpaceAvailable=gl.svgWidth-gl.dom.elGraphical.x()-gl.gridWidth;}// To prevent extra spacings in the bottom of the chart, we need to recalculate the height for pie/donut/radialbar charts
},{key:"resizeNonAxisCharts",value:function resizeNonAxisCharts(){var w=this.w;var gl=w.globals;var legendHeight=0;var offY=w.config.chart.sparkline.enabled?1:15;offY=offY+w.config.grid.padding.bottom;if((w.config.legend.position==='top'||w.config.legend.position==='bottom')&&w.config.legend.show&&!w.config.legend.floating){legendHeight=new Legend(this.ctx).legendHelpers.getLegendBBox().clwh+10;}var radialEl=w.globals.dom.baseEl.querySelector('.apexcharts-radialbar');var chartInnerDimensions=w.globals.radialSize*2.05;if(radialEl&&!w.config.chart.sparkline.enabled){var elRadialRect=Utils.getBoundingClientRect(radialEl);chartInnerDimensions=elRadialRect.bottom;var maxHeight=elRadialRect.bottom-elRadialRect.top;chartInnerDimensions=Math.max(w.globals.radialSize*2.05,maxHeight);}var newHeight=chartInnerDimensions+gl.translateY+legendHeight+offY;if(gl.dom.elLegendForeign){gl.dom.elLegendForeign.setAttribute('height',newHeight);}gl.dom.elWrap.style.height=newHeight+'px';Graphics.setAttrs(gl.dom.Paper.node,{height:newHeight});gl.dom.Paper.node.parentNode.parentNode.style.minHeight=newHeight+'px';}/*
       ** All the calculations for setting range in charts will be done here
       */},{key:"coreCalculations",value:function coreCalculations(){var range=new Range$1(this.ctx);range.init();}},{key:"resetGlobals",value:function resetGlobals(){var _this=this;var resetxyValues=function resetxyValues(){return _this.w.config.series.map(function(s){return[];});};var globalObj=new Globals();var gl=this.w.globals;globalObj.initGlobalVars(gl);gl.seriesXvalues=resetxyValues();gl.seriesYvalues=resetxyValues();}},{key:"isMultipleY",value:function isMultipleY(){// user has supplied an array in yaxis property. So, turn on multipleYAxis flag
if(this.w.config.yaxis.constructor===Array&&this.w.config.yaxis.length>1){this.w.globals.isMultipleYAxis=true;return true;}}},{key:"xySettings",value:function xySettings(){var xyRatios=null;var w=this.w;if(w.globals.axisCharts){if(w.config.xaxis.crosshairs.position==='back'){var crosshairs=new Crosshairs(this.ctx);crosshairs.drawXCrosshairs();}if(w.config.yaxis[0].crosshairs.position==='back'){var _crosshairs=new Crosshairs(this.ctx);_crosshairs.drawYCrosshairs();}if(w.config.xaxis.type==='datetime'&&w.config.xaxis.labels.formatter===undefined){var ts=new TimeScale(this.ctx);var formattedTimeScale=[];if(isFinite(w.globals.minX)&&isFinite(w.globals.maxX)&&!w.globals.isBarHorizontal){formattedTimeScale=ts.calculateTimeScaleTicks(w.globals.minX,w.globals.maxX);}else if(w.globals.isBarHorizontal){formattedTimeScale=ts.calculateTimeScaleTicks(w.globals.minY,w.globals.maxY);}ts.recalcDimensionsBasedOnFormat(formattedTimeScale);}var coreUtils=new CoreUtils(this.ctx);xyRatios=coreUtils.getCalculatedRatios();}return xyRatios;}},{key:"setupBrushHandler",value:function setupBrushHandler(){var _this2=this;var w=this.w;// only for brush charts
if(!w.config.chart.brush.enabled){return;}// if user has not defined a custom function for selection - we handle the brush chart
// otherwise we leave it to the user to define the functionality for selection
if(typeof w.config.chart.events.selection!=='function'){var targets=w.config.chart.brush.targets||[w.config.chart.brush.target];// retro compatibility with single target option
targets.forEach(function(target){var targetChart=ApexCharts.getChartByID(target);targetChart.w.globals.brushSource=_this2.ctx;var updateSourceChart=function updateSourceChart(){_this2.ctx.updateHelpers._updateOptions({chart:{selection:{xaxis:{min:targetChart.w.globals.minX,max:targetChart.w.globals.maxX}}}},false,false);};if(typeof targetChart.w.config.chart.events.zoomed!=='function'){targetChart.w.config.chart.events.zoomed=function(){updateSourceChart();};}if(typeof targetChart.w.config.chart.events.scrolled!=='function'){targetChart.w.config.chart.events.scrolled=function(){updateSourceChart();};}});w.config.chart.events.selection=function(chart,e){targets.forEach(function(target){var targetChart=ApexCharts.getChartByID(target);var yaxis=Utils.clone(w.config.yaxis);if(w.config.chart.brush.autoScaleYaxis&&targetChart.w.globals.series.length===1){var scale=new Range(targetChart);yaxis=scale.autoScaleY(targetChart,yaxis,e);}targetChart.ctx.updateHelpers._updateOptions({xaxis:{min:e.xaxis.min,max:e.xaxis.max},yaxis:_objectSpread2({},targetChart.w.config.yaxis[0],{min:yaxis[0].min,max:yaxis[0].max})},false,false,false,false);});};}}}]);return Core;}();var UpdateHelpers=/*#__PURE__*/function(){function UpdateHelpers(ctx){_classCallCheck(this,UpdateHelpers);this.ctx=ctx;this.w=ctx.w;}/**
     * private method to update Options.
     *
     * @param {object} options - A new config object can be passed which will be merged with the existing config object
     * @param {boolean} redraw - should redraw from beginning or should use existing paths and redraw from there
     * @param {boolean} animate - should animate or not on updating Options
     * @param {boolean} overwriteInitialConfig - should update the initial config or not
     */_createClass(UpdateHelpers,[{key:"_updateOptions",value:function _updateOptions(options){var _this=this;var redraw=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var animate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var updateSyncedCharts=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var overwriteInitialConfig=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var charts=[this.ctx];if(updateSyncedCharts){charts=this.ctx.getSyncedCharts();}if(this.ctx.w.globals.isExecCalled){// If the user called exec method, we don't want to get grouped charts as user specifically provided a chartID to update
charts=[this.ctx];this.ctx.w.globals.isExecCalled=false;}charts.forEach(function(ch){var w=ch.w;w.globals.shouldAnimate=animate;if(!redraw){w.globals.resized=true;w.globals.dataChanged=true;if(animate){ch.series.getPreviousPaths();}}if(options&&_typeof(options)==='object'){ch.config=new Config(options);options=CoreUtils.extendArrayProps(ch.config,options);// fixes #914, #623
if(ch.w.globals.chartID!==_this.ctx.w.globals.chartID){// don't overwrite series of synchronized charts
delete options.series;}w.config=Utils.extend(w.config,options);if(overwriteInitialConfig){// we need to forget the lastXAxis and lastYAxis is user forcefully overwriteInitialConfig. If we do not do this, and next time when user zooms the chart after setting yaxis.min/max or xaxis.min/max - the stored lastXAxis will never allow the chart to use the updated min/max by user.
w.globals.lastXAxis=[];w.globals.lastYAxis=[];// After forgetting lastAxes, we need to restore the new config in initialConfig/initialSeries
w.globals.initialConfig=Utils.extend({},w.config);w.globals.initialSeries=JSON.parse(JSON.stringify(w.config.series));}}return ch.update(options);});}/**
       * Private method to update Series.
       *
       * @param {array} series - New series which will override the existing
       */},{key:"_updateSeries",value:function _updateSeries(newSeries,animate){var _this2=this;var overwriteInitialSeries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var w=this.w;w.globals.shouldAnimate=animate;w.globals.dataChanged=true;if(animate){this.ctx.series.getPreviousPaths();}var existingSeries;// axis charts
if(w.globals.axisCharts){existingSeries=newSeries.map(function(s,i){return _this2._extendSeries(s,i);});if(existingSeries.length===0){existingSeries=[{data:[]}];}w.config.series=existingSeries;}else{// non-axis chart (pie/radialbar)
w.config.series=newSeries.slice();}if(overwriteInitialSeries){w.globals.initialConfig.series=JSON.parse(JSON.stringify(w.config.series));w.globals.initialSeries=JSON.parse(JSON.stringify(w.config.series));}return this.ctx.update();}},{key:"_extendSeries",value:function _extendSeries(s,i){var w=this.w;return _objectSpread2({},w.config.series[i],{name:s.name?s.name:w.config.series[i]&&w.config.series[i].name,type:s.type?s.type:w.config.series[i]&&w.config.series[i].type,data:s.data?s.data:w.config.series[i]&&w.config.series[i].data});}},{key:"toggleDataPointSelection",value:function toggleDataPointSelection(seriesIndex,dataPointIndex){var w=this.w;var elPath=null;var parent=".apexcharts-series[data\\:realIndex='".concat(seriesIndex,"']");if(w.globals.axisCharts){elPath=w.globals.dom.Paper.select("".concat(parent," path[j='").concat(dataPointIndex,"'], ").concat(parent," circle[j='").concat(dataPointIndex,"'], ").concat(parent," rect[j='").concat(dataPointIndex,"']")).members[0];}else{// dataPointIndex will be undefined here, hence using seriesIndex
if(typeof dataPointIndex==='undefined'){elPath=w.globals.dom.Paper.select("".concat(parent," path[j='").concat(seriesIndex,"']")).members[0];if(w.config.chart.type==='pie'||w.config.chart.type==='donut'){var pie=new Pie(this.ctx);pie.pieClicked(seriesIndex);}}}if(elPath){var graphics=new Graphics(this.ctx);graphics.pathMouseDown(elPath,null);}else{console.warn('toggleDataPointSelection: Element not found');return null;}return elPath.node?elPath.node:null;}},{key:"forceXAxisUpdate",value:function forceXAxisUpdate(options){var w=this.w;var minmax=['min','max'];minmax.forEach(function(a){if(typeof options.xaxis[a]!=='undefined'){w.config.xaxis[a]=options.xaxis[a];w.globals.lastXAxis[a]=options.xaxis[a];}});if(options.xaxis.categories&&options.xaxis.categories.length){w.config.xaxis.categories=options.xaxis.categories;}if(w.config.xaxis.convertedCatToNumeric){var defaults=new Defaults(options);options=defaults.convertCatToNumericXaxis(options,this.ctx);}return options;}},{key:"forceYAxisUpdate",value:function forceYAxisUpdate(options){var w=this.w;if(w.config.chart.stacked&&w.config.chart.stackType==='100%'){if(Array.isArray(options.yaxis)){options.yaxis.forEach(function(yaxe,index){options.yaxis[index].min=0;options.yaxis[index].max=100;});}else{options.yaxis.min=0;options.yaxis.max=100;}}return options;}/**
       * This function reverts the yaxis and xaxis min/max values to what it was when the chart was defined.
       * This function fixes an important bug where a user might load a new series after zooming in/out of previous series which resulted in wrong min/max
       * Also, this should never be called internally on zoom/pan - the reset should only happen when user calls the updateSeries() function externally
       */},{key:"revertDefaultAxisMinMax",value:function revertDefaultAxisMinMax(){var _this3=this;var w=this.w;w.config.xaxis.min=w.globals.lastXAxis.min;w.config.xaxis.max=w.globals.lastXAxis.max;w.config.yaxis.map(function(yaxe,index){if(w.globals.zoomed){// user has zoomed, check the last yaxis
if(typeof w.globals.lastYAxis[index]!=='undefined'){yaxe.min=w.globals.lastYAxis[index].min;yaxe.max=w.globals.lastYAxis[index].max;}}else{// user hasn't zoomed, check the original yaxis
if(typeof _this3.ctx.opts.yaxis[index]!=='undefined'){yaxe.min=_this3.ctx.opts.yaxis[index].min;yaxe.max=_this3.ctx.opts.yaxis[index].max;}}});}}]);return UpdateHelpers;}();(function(root,factory){/* istanbul ignore next */if(true){!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return factory(root,root.document);}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));/* below check fixes #412 */}else {}})(true?window:undefined,function(window,document){// Find global reference - uses 'this' by default when available,
// falls back to 'window' otherwise (for bundlers like Webpack)
var globalRef=typeof this!=='undefined'?this:window;// The main wrapping element
var SVG=globalRef.SVG=function(element){if(SVG.supported){element=new SVG.Doc(element);if(!SVG.parser.draw){SVG.prepare();}return element;}};// Default namespaces
SVG.ns='http://www.w3.org/2000/svg';SVG.xmlns='http://www.w3.org/2000/xmlns/';SVG.xlink='http://www.w3.org/1999/xlink';SVG.svgjs='http://svgjs.com/svgjs';// Svg support test
SVG.supported=function(){return true;// !!document.createElementNS &&
//     !! document.createElementNS(SVG.ns,'svg').createSVGRect
}();// Don't bother to continue if SVG is not supported
if(!SVG.supported)return false;// Element id sequence
SVG.did=1000;// Get next named element id
SVG.eid=function(name){return'Svgjs'+capitalize(name)+SVG.did++;};// Method for element creation
SVG.create=function(name){// create element
var element=document.createElementNS(this.ns,name);// apply unique id
element.setAttribute('id',this.eid(name));return element;};// Method for extending objects
SVG.extend=function(){var modules,methods;// Get list of modules
modules=[].slice.call(arguments);// Get object with extensions
methods=modules.pop();for(var i=modules.length-1;i>=0;i--){if(modules[i]){for(var key in methods){modules[i].prototype[key]=methods[key];}}}// Make sure SVG.Set inherits any newly added methods
if(SVG.Set&&SVG.Set.inherit){SVG.Set.inherit();}};// Invent new element
SVG.invent=function(config){// Create element initializer
var initializer=typeof config.create==='function'?config.create:function(){this.constructor.call(this,SVG.create(config.create));};// Inherit prototype
if(config.inherit){initializer.prototype=new config.inherit();}// Extend with methods
if(config.extend){SVG.extend(initializer,config.extend);}// Attach construct method to parent
if(config.construct){SVG.extend(config.parent||SVG.Container,config.construct);}return initializer;};// Adopt existing svg elements
SVG.adopt=function(node){// check for presence of node
if(!node)return null;// make sure a node isn't already adopted
if(node.instance)return node.instance;// initialize variables
var element;// adopt with element-specific settings
if(node.nodeName=='svg'){element=node.parentNode instanceof window.SVGElement?new SVG.Nested():new SVG.Doc();}else if(node.nodeName=='linearGradient'){element=new SVG.Gradient('linear');}else if(node.nodeName=='radialGradient'){element=new SVG.Gradient('radial');}else if(SVG[capitalize(node.nodeName)]){element=new SVG[capitalize(node.nodeName)]();}else{element=new SVG.Element(node);}// ensure references
element.type=node.nodeName;element.node=node;node.instance=element;// SVG.Class specific preparations
if(element instanceof SVG.Doc){element.namespace().defs();}// pull svgjs data from the dom (getAttributeNS doesn't work in html5)
element.setData(JSON.parse(node.getAttribute('svgjs:data'))||{});return element;};// Initialize parsing element
SVG.prepare=function(){// Select document body and create invisible svg element
var body=document.getElementsByTagName('body')[0],draw=(body?new SVG.Doc(body):SVG.adopt(document.documentElement).nested()).size(2,0);// Create parser object
SVG.parser={body:body||document.documentElement,draw:draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node,poly:draw.polyline().node,path:draw.path().node,"native":SVG.create('svg')};};SVG.parser={"native":SVG.create('svg')};document.addEventListener('DOMContentLoaded',function(){if(!SVG.parser.draw){SVG.prepare();}},false);// Storage for regular expressions
SVG.regex={// Parse unit value
numberAndUnit:/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,// Parse hex value
hex:/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,// Parse rgb value
rgb:/rgb\((\d+),(\d+),(\d+)\)/,// Parse reference id
reference:/#([a-z0-9\-_]+)/i,// splits a transformation chain
transforms:/\)\s*,?\s*/,// Whitespace
whitespace:/\s/g,// Test hex value
isHex:/^#[a-f0-9]{3,6}$/i,// Test rgb value
isRgb:/^rgb\(/,// Test css declaration
isCss:/[^:]+:[^;]+;?/,// Test for blank string
isBlank:/^(\s+)?$/,// Test for numeric string
isNumber:/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,// Test for percent value
isPercent:/^-?[\d\.]+%$/,// Test for image url
isImage:/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,// split at whitespace and comma
delimiter:/[\s,]+/,// The following regex are used to parse the d attribute of a path
// Matches all hyphens which are not after an exponent
hyphen:/([^e])\-/gi,// Replaces and tests for all path letters
pathLetters:/[MLHVCSQTAZ]/gi,// yes we need this one, too
isPathLetter:/[MLHVCSQTAZ]/i,// matches 0.154.23.45
numbersWithDots:/((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,// matches .
dots:/\./g};SVG.utils={// Map function
map:function map(array,block){var il=array.length,result=[];for(var i=0;i<il;i++){result.push(block(array[i]));}return result;},// Filter function
filter:function filter(array,block){var il=array.length,result=[];for(var i=0;i<il;i++){if(block(array[i])){result.push(array[i]);}}return result;},filterSVGElements:function filterSVGElements(nodes){return this.filter(nodes,function(el){return el instanceof window.SVGElement;});}};SVG.defaults={// Default attribute values
attrs:{// fill and stroke
'fill-opacity':1,'stroke-opacity':1,'stroke-width':0,'stroke-linejoin':'miter','stroke-linecap':'butt',fill:'#000000',stroke:'#000000',opacity:1,// position
x:0,y:0,cx:0,cy:0,// size
width:0,height:0,// radius
r:0,rx:0,ry:0,// gradient
offset:0,'stop-opacity':1,'stop-color':'#000000',// text
'font-size':16,'font-family':'inherit','text-anchor':'start'}};// Module for color convertions
SVG.Color=function(color){var match;// initialize defaults
this.r=0;this.g=0;this.b=0;if(!color)return;// parse color
if(typeof color==='string'){if(SVG.regex.isRgb.test(color)){// get rgb values
match=SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''));// parse numeric values
this.r=parseInt(match[1]);this.g=parseInt(match[2]);this.b=parseInt(match[3]);}else if(SVG.regex.isHex.test(color)){// get hex values
match=SVG.regex.hex.exec(fullHex(color));// parse numeric values
this.r=parseInt(match[1],16);this.g=parseInt(match[2],16);this.b=parseInt(match[3],16);}}else if(_typeof(color)==='object'){this.r=color.r;this.g=color.g;this.b=color.b;}};SVG.extend(SVG.Color,{// Default to hex conversion
toString:function toString(){return this.toHex();},// Build hex value
toHex:function toHex(){return'#'+compToHex(this.r)+compToHex(this.g)+compToHex(this.b);},// Build rgb value
toRgb:function toRgb(){return'rgb('+[this.r,this.g,this.b].join()+')';},// Calculate true brightness
brightness:function brightness(){return this.r/255*0.30+this.g/255*0.59+this.b/255*0.11;},// Make color morphable
morph:function morph(color){this.destination=new SVG.Color(color);return this;},// Get morphed color at given position
at:function at(pos){// make sure a destination is defined
if(!this.destination)return this;// normalise pos
pos=pos<0?0:pos>1?1:pos;// generate morphed color
return new SVG.Color({r:~~(this.r+(this.destination.r-this.r)*pos),g:~~(this.g+(this.destination.g-this.g)*pos),b:~~(this.b+(this.destination.b-this.b)*pos)});}});// Testers
// Test if given value is a color string
SVG.Color.test=function(color){color+='';return SVG.regex.isHex.test(color)||SVG.regex.isRgb.test(color);};// Test if given value is a rgb object
SVG.Color.isRgb=function(color){return color&&typeof color.r==='number'&&typeof color.g==='number'&&typeof color.b==='number';};// Test if given value is a color
SVG.Color.isColor=function(color){return SVG.Color.isRgb(color)||SVG.Color.test(color);};// Module for array conversion
SVG.Array=function(array,fallback){array=(array||[]).valueOf();// if array is empty and fallback is provided, use fallback
if(array.length==0&&fallback){array=fallback.valueOf();}// parse array
this.value=this.parse(array);};SVG.extend(SVG.Array,{// Convert array to string
toString:function toString(){return this.value.join(' ');},// Real value
valueOf:function valueOf(){return this.value;},// Parse whitespace separated string
parse:function parse(array){array=array.valueOf();// if already is an array, no need to parse it
if(Array.isArray(array))return array;return this.split(array);}});// Poly points array
SVG.PointArray=function(array,fallback){SVG.Array.call(this,array,fallback||[[0,0]]);};// Inherit from SVG.Array
SVG.PointArray.prototype=new SVG.Array();SVG.PointArray.prototype.constructor=SVG.PointArray;var pathHandlers={M:function M(c,p,p0){p.x=p0.x=c[0];p.y=p0.y=c[1];return['M',p.x,p.y];},L:function L(c,p){p.x=c[0];p.y=c[1];return['L',c[0],c[1]];},H:function H(c,p){p.x=c[0];return['H',c[0]];},V:function V(c,p){p.y=c[0];return['V',c[0]];},C:function C(c,p){p.x=c[4];p.y=c[5];return['C',c[0],c[1],c[2],c[3],c[4],c[5]];},Q:function Q(c,p){p.x=c[2];p.y=c[3];return['Q',c[0],c[1],c[2],c[3]];},Z:function Z(c,p,p0){p.x=p0.x;p.y=p0.y;return['Z'];}};var mlhvqtcsa='mlhvqtcsaz'.split('');for(var i=0,il=mlhvqtcsa.length;i<il;++i){pathHandlers[mlhvqtcsa[i]]=function(i){return function(c,p,p0){if(i=='H')c[0]=c[0]+p.x;else if(i=='V')c[0]=c[0]+p.y;else if(i=='A'){c[5]=c[5]+p.x,c[6]=c[6]+p.y;}else{for(var j=0,jl=c.length;j<jl;++j){c[j]=c[j]+(j%2?p.y:p.x);}}return pathHandlers[i](c,p,p0);};}(mlhvqtcsa[i].toUpperCase());}// Path points array
SVG.PathArray=function(array,fallback){SVG.Array.call(this,array,fallback||[['M',0,0]]);};// Inherit from SVG.Array
SVG.PathArray.prototype=new SVG.Array();SVG.PathArray.prototype.constructor=SVG.PathArray;SVG.extend(SVG.PathArray,{// Convert array to string
toString:function toString(){return arrayToString(this.value);},// Move path string
move:function move(x,y){// get bounding box of current situation
var box=this.bbox();// get relative offset
x-=box.x;y-=box.y;return this;},// Get morphed path array at given position
at:function at(pos){// make sure a destination is defined
if(!this.destination)return this;var sourceArray=this.value,destinationArray=this.destination.value,array=[],pathArray=new SVG.PathArray(),il,jl;// Animate has specified in the SVG spec
// See: https://www.w3.org/TR/SVG11/paths.html#PathElement
for(var i=0,il=sourceArray.length;i<il;i++){array[i]=[sourceArray[i][0]];for(var j=1,jl=sourceArray[i].length;j<jl;j++){array[i][j]=sourceArray[i][j]+(destinationArray[i][j]-sourceArray[i][j])*pos;}// For the two flags of the elliptical arc command, the SVG spec say:
// Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true
// Elliptical arc command as an array followed by corresponding indexes:
// ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]
//   0    1   2        3                 4             5      6  7
if(array[i][0]==='A'){array[i][4]=+(array[i][4]!=0);array[i][5]=+(array[i][5]!=0);}}// Directly modify the value of a path array, this is done this way for performance
pathArray.value=array;return pathArray;},// Absolutize and parse path to array
parse:function parse(array){// if it's already a patharray, no need to parse it
if(array instanceof SVG.PathArray)return array.valueOf();// prepare for parsing
var s,arr,paramCnt={'M':2,'L':2,'H':1,'V':1,'C':6,'S':4,'Q':4,'T':2,'A':7,'Z':0};if(typeof array==='string'){array=array.replace(SVG.regex.numbersWithDots,pathRegReplace)// convert 45.123.123 to 45.123 .123
.replace(SVG.regex.pathLetters,' $& ')// put some room between letters and numbers
.replace(SVG.regex.hyphen,'$1 -')// add space before hyphen
.trim()// trim
.split(SVG.regex.delimiter);// split into array
}else{array=array.reduce(function(prev,curr){return[].concat.call(prev,curr);},[]);}// array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]
var arr=[],p=new SVG.Point(),p0=new SVG.Point(),index=0,len=array.length;do{// Test if we have a path letter
if(SVG.regex.isPathLetter.test(array[index])){s=array[index];++index;// If last letter was a move command and we got no new, it defaults to [L]ine
}else if(s=='M'){s='L';}else if(s=='m'){s='l';}arr.push(pathHandlers[s].call(null,array.slice(index,index=index+paramCnt[s.toUpperCase()]).map(parseFloat),p,p0));}while(len>index);return arr;},// Get bounding box of path
bbox:function bbox(){if(!SVG.parser.draw){SVG.prepare();}SVG.parser.path.setAttribute('d',this.toString());return SVG.parser.path.getBBox();}});// Module for unit convertions
SVG.Number=SVG.invent({// Initialize
create:function create(value,unit){// initialize defaults
this.value=0;this.unit=unit||'';// parse value
if(typeof value==='number'){// ensure a valid numeric value
this.value=isNaN(value)?0:!isFinite(value)?value<0?-3.4e+38:+3.4e+38:value;}else if(typeof value==='string'){unit=value.match(SVG.regex.numberAndUnit);if(unit){// make value numeric
this.value=parseFloat(unit[1]);// normalize
if(unit[5]=='%'){this.value/=100;}else if(unit[5]=='s'){this.value*=1000;}// store unit
this.unit=unit[5];}}else{if(value instanceof SVG.Number){this.value=value.valueOf();this.unit=value.unit;}}},// Add methods
extend:{// Stringalize
toString:function toString(){return(this.unit=='%'?~~(this.value*1e8)/1e6:this.unit=='s'?this.value/1e3:this.value)+this.unit;},toJSON:function toJSON(){return this.toString();},// Convert to primitive
valueOf:function valueOf(){return this.value;},// Add number
plus:function plus(number){number=new SVG.Number(number);return new SVG.Number(this+number,this.unit||number.unit);},// Subtract number
minus:function minus(number){number=new SVG.Number(number);return new SVG.Number(this-number,this.unit||number.unit);},// Multiply number
times:function times(number){number=new SVG.Number(number);return new SVG.Number(this*number,this.unit||number.unit);},// Divide number
divide:function divide(number){number=new SVG.Number(number);return new SVG.Number(this/number,this.unit||number.unit);},// Convert to different unit
to:function to(unit){var number=new SVG.Number(this);if(typeof unit==='string'){number.unit=unit;}return number;},// Make number morphable
morph:function morph(number){this.destination=new SVG.Number(number);if(number.relative){this.destination.value+=this.value;}return this;},// Get morphed number at given position
at:function at(pos){// Make sure a destination is defined
if(!this.destination)return this;// Generate new morphed number
return new SVG.Number(this.destination).minus(this).times(pos).plus(this);}}});SVG.Element=SVG.invent({// Initialize node
create:function create(node){// make stroke value accessible dynamically
this._stroke=SVG.defaults.attrs.stroke;this._event=null;// initialize data object
this.dom={};// create circular reference
if(this.node=node){this.type=node.nodeName;this.node.instance=this;// store current attribute value
this._stroke=node.getAttribute('stroke')||this._stroke;}},// Add class methods
extend:{// Move over x-axis
x:function x(_x){return this.attr('x',_x);},// Move over y-axis
y:function y(_y){return this.attr('y',_y);},// Move by center over x-axis
cx:function cx(x){return x==null?this.x()+this.width()/2:this.x(x-this.width()/2);},// Move by center over y-axis
cy:function cy(y){return y==null?this.y()+this.height()/2:this.y(y-this.height()/2);},// Move element to given x and y values
move:function move(x,y){return this.x(x).y(y);},// Move element by its center
center:function center(x,y){return this.cx(x).cy(y);},// Set width of element
width:function width(_width){return this.attr('width',_width);},// Set height of element
height:function height(_height){return this.attr('height',_height);},// Set element size to given width and height
size:function size(width,height){var p=proportionalSize(this,width,height);return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));},// Clone element
clone:function clone(parent){// write dom data to the dom so the clone can pickup the data
this.writeDataToDom();// clone element and assign new id
var clone=assignNewId(this.node.cloneNode(true));// insert the clone in the given parent or after myself
if(parent)parent.add(clone);else this.after(clone);return clone;},// Remove element
remove:function remove(){if(this.parent()){this.parent().removeElement(this);}return this;},// Replace element
replace:function replace(element){this.after(element).remove();return element;},// Add element to given container and return self
addTo:function addTo(parent){return parent.put(this);},// Add element to given container and return container
putIn:function putIn(parent){return parent.add(this);},// Get / set id
id:function id(_id){return this.attr('id',_id);},// Show element
show:function show(){return this.style('display','');},// Hide element
hide:function hide(){return this.style('display','none');},// Is element visible?
visible:function visible(){return this.style('display')!='none';},// Return id on string conversion
toString:function toString(){return this.attr('id');},// Return array of classes on the node
classes:function classes(){var attr=this.attr('class');return attr==null?[]:attr.trim().split(SVG.regex.delimiter);},// Return true if class exists on the node, false otherwise
hasClass:function hasClass(name){return this.classes().indexOf(name)!=-1;},// Add class to the node
addClass:function addClass(name){if(!this.hasClass(name)){var array=this.classes();array.push(name);this.attr('class',array.join(' '));}return this;},// Remove class from the node
removeClass:function removeClass(name){if(this.hasClass(name)){this.attr('class',this.classes().filter(function(c){return c!=name;}).join(' '));}return this;},// Toggle the presence of a class on the node
toggleClass:function toggleClass(name){return this.hasClass(name)?this.removeClass(name):this.addClass(name);},// Get referenced element form attribute value
reference:function reference(attr){return SVG.get(this.attr(attr));},// Returns the parent element instance
parent:function parent(type){var parent=this;// check for parent
if(!parent.node.parentNode)return null;// get parent element
parent=SVG.adopt(parent.node.parentNode);if(!type)return parent;// loop trough ancestors if type is given
while(parent&&parent.node instanceof window.SVGElement){if(typeof type==='string'?parent.matches(type):parent instanceof type)return parent;if(!parent.node.parentNode||parent.node.parentNode.nodeName=='#document')return null;// #759, #720
parent=SVG.adopt(parent.node.parentNode);}},// Get parent document
doc:function doc(){return this instanceof SVG.Doc?this:this.parent(SVG.Doc);},// return array of all ancestors of given type up to the root svg
parents:function parents(type){var parents=[],parent=this;do{parent=parent.parent(type);if(!parent||!parent.node)break;parents.push(parent);}while(parent.parent);return parents;},// matches the element vs a css selector
matches:function matches(selector){return _matches(this.node,selector);},// Returns the svg node to call native svg methods on it
"native":function _native(){return this.node;},// Import raw svg
svg:function svg(_svg){// create temporary holder
var well=document.createElement('svg');// act as a setter if svg is given
if(_svg&&this instanceof SVG.Parent){// dump raw svg
well.innerHTML='<svg>'+_svg.replace(/\n/,'').replace(/<([\w:-]+)([^<]+?)\/>/g,'<$1$2></$1>')+'</svg>';// transplant nodes
for(var i=0,il=well.firstChild.childNodes.length;i<il;i++){this.node.appendChild(well.firstChild.firstChild);}// otherwise act as a getter
}else{// create a wrapping svg element in case of partial content
well.appendChild(_svg=document.createElement('svg'));// write svgjs data to the dom
this.writeDataToDom();// insert a copy of this node
_svg.appendChild(this.node.cloneNode(true));// return target element
return well.innerHTML.replace(/^<svg>/,'').replace(/<\/svg>$/,'');}return this;},// write svgjs data to the dom
writeDataToDom:function writeDataToDom(){// dump variables recursively
if(this.each||this.lines){var fn=this.each?this:this.lines();fn.each(function(){this.writeDataToDom();});}// remove previously set data
this.node.removeAttribute('svgjs:data');if(Object.keys(this.dom).length){this.node.setAttribute('svgjs:data',JSON.stringify(this.dom));}// see #428
return this;},// set given data to the elements data property
setData:function setData(o){this.dom=o;return this;},is:function is(obj){return _is(this,obj);}}});SVG.easing={'-':function _(pos){return pos;},'<>':function _(pos){return-Math.cos(pos*Math.PI)/2+0.5;},'>':function _(pos){return Math.sin(pos*Math.PI/2);},'<':function _(pos){return-Math.cos(pos*Math.PI/2)+1;}};SVG.morph=function(pos){return function(from,to){return new SVG.MorphObj(from,to).at(pos);};};SVG.Situation=SVG.invent({create:function create(o){this.init=false;this.reversed=false;this.reversing=false;this.duration=new SVG.Number(o.duration).valueOf();this.delay=new SVG.Number(o.delay).valueOf();this.start=+new Date()+this.delay;this.finish=this.start+this.duration;this.ease=o.ease;// this.loop is incremented from 0 to this.loops
// it is also incremented when in an infinite loop (when this.loops is true)
this.loop=0;this.loops=false;this.animations={// functionToCall: [list of morphable objects]
// e.g. move: [SVG.Number, SVG.Number]
};this.attrs={// holds all attributes which are not represented from a function svg.js provides
// e.g. someAttr: SVG.Number
};this.styles={// holds all styles which should be animated
// e.g. fill-color: SVG.Color
};this.transforms=[// holds all transformations as transformation objects
// e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]
];this.once={// functions to fire at a specific position
// e.g. "0.5": function foo(){}
};}});SVG.FX=SVG.invent({create:function create(element){this._target=element;this.situations=[];this.active=false;this.situation=null;this.paused=false;this.lastPos=0;this.pos=0;// The absolute position of an animation is its position in the context of its complete duration (including delay and loops)
// When performing a delay, absPos is below 0 and when performing a loop, its value is above 1
this.absPos=0;this._speed=1;},extend:{/**
         * sets or returns the target of this animation
         * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation
         * @param ease function || string Function which should be used for easing or easing keyword
         * @param delay Number indicating the delay before the animation starts
         * @return target || this
         */animate:function animate(o,ease,delay){if(_typeof(o)==='object'){ease=o.ease;delay=o.delay;o=o.duration;}var situation=new SVG.Situation({duration:o||1000,delay:delay||0,ease:SVG.easing[ease||'-']||ease});this.queue(situation);return this;},/**
        * sets a delay before the next element of the queue is called
        * @param delay Duration of delay in milliseconds
        * @return this.target()
        */ /**
        * sets or returns the target of this animation
        * @param null || target SVG.Element which should be set as new target
        * @return target || this
        */target:function target(_target){if(_target&&_target instanceof SVG.Element){this._target=_target;return this;}return this._target;},// returns the absolute position at a given time
timeToAbsPos:function timeToAbsPos(timestamp){return(timestamp-this.situation.start)/(this.situation.duration/this._speed);},// returns the timestamp from a given absolute positon
absPosToTime:function absPosToTime(absPos){return this.situation.duration/this._speed*absPos+this.situation.start;},// starts the animationloop
startAnimFrame:function startAnimFrame(){this.stopAnimFrame();this.animationFrame=window.requestAnimationFrame(function(){this.step();}.bind(this));},// cancels the animationframe
stopAnimFrame:function stopAnimFrame(){window.cancelAnimationFrame(this.animationFrame);},// kicks off the animation - only does something when the queue is currently not active and at least one situation is set
start:function start(){// dont start if already started
if(!this.active&&this.situation){this.active=true;this.startCurrent();}return this;},// start the current situation
startCurrent:function startCurrent(){this.situation.start=+new Date()+this.situation.delay/this._speed;this.situation.finish=this.situation.start+this.situation.duration/this._speed;return this.initAnimations().step();},/**
        * adds a function / Situation to the animation queue
        * @param fn function / situation to add
        * @return this
        */queue:function queue(fn){if(typeof fn==='function'||fn instanceof SVG.Situation){this.situations.push(fn);}if(!this.situation)this.situation=this.situations.shift();return this;},/**
        * pulls next element from the queue and execute it
        * @return this
        */dequeue:function dequeue(){// stop current animation
this.stop();// get next animation from queue
this.situation=this.situations.shift();if(this.situation){if(this.situation instanceof SVG.Situation){this.start();}else{// If it is not a SVG.Situation, then it is a function, we execute it
this.situation.call(this);}}return this;},// updates all animations to the current state of the element
// this is important when one property could be changed from another property
initAnimations:function initAnimations(){var source;var s=this.situation;if(s.init)return this;for(var i in s.animations){source=this.target()[i]();if(!Array.isArray(source)){source=[source];}if(!Array.isArray(s.animations[i])){s.animations[i]=[s.animations[i]];}// if(s.animations[i].length > source.length) {
//  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))
// }
for(var j=source.length;j--;){// The condition is because some methods return a normal number instead
// of a SVG.Number
if(s.animations[i][j]instanceof SVG.Number){source[j]=new SVG.Number(source[j]);}s.animations[i][j]=source[j].morph(s.animations[i][j]);}}for(var i in s.attrs){s.attrs[i]=new SVG.MorphObj(this.target().attr(i),s.attrs[i]);}for(var i in s.styles){s.styles[i]=new SVG.MorphObj(this.target().style(i),s.styles[i]);}s.initialTransformation=this.target().matrixify();s.init=true;return this;},clearQueue:function clearQueue(){this.situations=[];return this;},clearCurrent:function clearCurrent(){this.situation=null;return this;},/** stops the animation immediately
        * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.
        * @param clearQueue A Boolean indicating whether to remove queued animation as well.
        * @return this
        */stop:function stop(jumpToEnd,clearQueue){var active=this.active;this.active=false;if(clearQueue){this.clearQueue();}if(jumpToEnd&&this.situation){// initialize the situation if it was not
!active&&this.startCurrent();this.atEnd();}this.stopAnimFrame();return this.clearCurrent();},after:function after(fn){var c=this.last(),wrapper=function wrapper(e){if(e.detail.situation==c){fn.call(this,c);this.off('finished.fx',wrapper);// prevent memory leak
}};this.target().on('finished.fx',wrapper);return this._callStart();},// adds a callback which is called whenever one animation step is performed
during:function during(fn){var c=this.last(),wrapper=function wrapper(e){if(e.detail.situation==c){fn.call(this,e.detail.pos,SVG.morph(e.detail.pos),e.detail.eased,c);}};// see above
this.target().off('during.fx',wrapper).on('during.fx',wrapper);this.after(function(){this.off('during.fx',wrapper);});return this._callStart();},// calls after ALL animations in the queue are finished
afterAll:function afterAll(fn){var wrapper=function wrapper(e){fn.call(this);this.off('allfinished.fx',wrapper);};// see above
this.target().off('allfinished.fx',wrapper).on('allfinished.fx',wrapper);return this._callStart();},last:function last(){return this.situations.length?this.situations[this.situations.length-1]:this.situation;},// adds one property to the animations
add:function add(method,args,type){this.last()[type||'animations'][method]=args;return this._callStart();},/** perform one step of the animation
        *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time
        *  @return this
        */step:function step(ignoreTime){// convert current time to an absolute position
if(!ignoreTime)this.absPos=this.timeToAbsPos(+new Date());// This part convert an absolute position to a position
if(this.situation.loops!==false){var absPos,absPosInt,lastLoop;// If the absolute position is below 0, we just treat it as if it was 0
absPos=Math.max(this.absPos,0);absPosInt=Math.floor(absPos);if(this.situation.loops===true||absPosInt<this.situation.loops){this.pos=absPos-absPosInt;lastLoop=this.situation.loop;this.situation.loop=absPosInt;}else{this.absPos=this.situation.loops;this.pos=1;// The -1 here is because we don't want to toggle reversed when all the loops have been completed
lastLoop=this.situation.loop-1;this.situation.loop=this.situation.loops;}if(this.situation.reversing){// Toggle reversed if an odd number of loops as occured since the last call of step
this.situation.reversed=this.situation.reversed!=Boolean((this.situation.loop-lastLoop)%2);}}else{// If there are no loop, the absolute position must not be above 1
this.absPos=Math.min(this.absPos,1);this.pos=this.absPos;}// while the absolute position can be below 0, the position must not be below 0
if(this.pos<0)this.pos=0;if(this.situation.reversed)this.pos=1-this.pos;// apply easing
var eased=this.situation.ease(this.pos);// call once-callbacks
for(var i in this.situation.once){if(i>this.lastPos&&i<=eased){this.situation.once[i].call(this.target(),this.pos,eased);delete this.situation.once[i];}}// fire during callback with position, eased position and current situation as parameter
if(this.active)this.target().fire('during',{pos:this.pos,eased:eased,fx:this,situation:this.situation});// the user may call stop or finish in the during callback
// so make sure that we still have a valid situation
if(!this.situation){return this;}// apply the actual animation to every property
this.eachAt();// do final code when situation is finished
if(this.pos==1&&!this.situation.reversed||this.situation.reversed&&this.pos==0){// stop animation callback
this.stopAnimFrame();// fire finished callback with current situation as parameter
this.target().fire('finished',{fx:this,situation:this.situation});if(!this.situations.length){this.target().fire('allfinished');// Recheck the length since the user may call animate in the afterAll callback
if(!this.situations.length){this.target().off('.fx');// there shouldnt be any binding left, but to make sure...
this.active=false;}}// start next animation
if(this.active)this.dequeue();else this.clearCurrent();}else if(!this.paused&&this.active){// we continue animating when we are not at the end
this.startAnimFrame();}// save last eased position for once callback triggering
this.lastPos=eased;return this;},// calculates the step for every property and calls block with it
eachAt:function eachAt(){var len,at,self=this,target=this.target(),s=this.situation;// apply animations which can be called trough a method
for(var i in s.animations){at=[].concat(s.animations[i]).map(function(el){return typeof el!=='string'&&el.at?el.at(s.ease(self.pos),self.pos):el;});target[i].apply(target,at);}// apply animation which has to be applied with attr()
for(var i in s.attrs){at=[i].concat(s.attrs[i]).map(function(el){return typeof el!=='string'&&el.at?el.at(s.ease(self.pos),self.pos):el;});target.attr.apply(target,at);}// apply animation which has to be applied with style()
for(var i in s.styles){at=[i].concat(s.styles[i]).map(function(el){return typeof el!=='string'&&el.at?el.at(s.ease(self.pos),self.pos):el;});target.style.apply(target,at);}// animate initialTransformation which has to be chained
if(s.transforms.length){// get initial initialTransformation
at=s.initialTransformation;for(var i=0,len=s.transforms.length;i<len;i++){// get next transformation in chain
var a=s.transforms[i];// multiply matrix directly
if(a instanceof SVG.Matrix){if(a.relative){at=at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));}else{at=at.morph(a).at(s.ease(this.pos));}continue;}// when transformation is absolute we have to reset the needed transformation first
if(!a.relative){a.undo(at.extract());}// and reapply it after
at=at.multiply(a.at(s.ease(this.pos)));}// set new matrix on element
target.matrix(at);}return this;},// adds an once-callback which is called at a specific position and never again
once:function once(pos,fn,isEased){var c=this.last();if(!isEased)pos=c.ease(pos);c.once[pos]=fn;return this;},_callStart:function _callStart(){setTimeout(function(){this.start();}.bind(this),0);return this;}},parent:SVG.Element,// Add method to parent elements
construct:{// Get fx module or create a new one, then animate with given duration and ease
animate:function animate(o,ease,delay){return(this.fx||(this.fx=new SVG.FX(this))).animate(o,ease,delay);},delay:function delay(_delay){return(this.fx||(this.fx=new SVG.FX(this))).delay(_delay);},stop:function stop(jumpToEnd,clearQueue){if(this.fx){this.fx.stop(jumpToEnd,clearQueue);}return this;},finish:function finish(){if(this.fx){this.fx.finish();}return this;}}});// MorphObj is used whenever no morphable object is given
SVG.MorphObj=SVG.invent({create:function create(from,to){// prepare color for morphing
if(SVG.Color.isColor(to))return new SVG.Color(from).morph(to);// check if we have a list of values
if(SVG.regex.delimiter.test(from)){// prepare path for morphing
if(SVG.regex.pathLetters.test(from))return new SVG.PathArray(from).morph(to);// prepare value list for morphing
else return new SVG.Array(from).morph(to);}// prepare number for morphing
if(SVG.regex.numberAndUnit.test(to))return new SVG.Number(from).morph(to);// prepare for plain morphing
this.value=from;this.destination=to;},extend:{at:function at(pos,real){return real<1?this.value:this.destination;},valueOf:function valueOf(){return this.value;}}});SVG.extend(SVG.FX,{// Add animatable attributes
attr:function attr(a,v,relative){// apply attributes individually
if(_typeof(a)==='object'){for(var key in a){this.attr(key,a[key]);}}else{this.add(a,v,'attrs');}return this;},// Add animatable plot
plot:function plot(a,b,c,d){// Lines can be plotted with 4 arguments
if(arguments.length==4){return this.plot([a,b,c,d]);}return this.add('plot',new(this.target().morphArray)(a));}});SVG.Box=SVG.invent({create:function create(x,y,width,height){if(_typeof(x)==='object'&&!(x instanceof SVG.Element)){// chromes getBoundingClientRect has no x and y property
return SVG.Box.call(this,x.left!=null?x.left:x.x,x.top!=null?x.top:x.y,x.width,x.height);}else if(arguments.length==4){this.x=x;this.y=y;this.width=width;this.height=height;}// add center, right, bottom...
fullBox(this);}});SVG.BBox=SVG.invent({// Initialize
create:function create(element){SVG.Box.apply(this,[].slice.call(arguments));// get values if element is given
if(element instanceof SVG.Element){var box;// yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered
try{if(!document.documentElement.contains){// This is IE - it does not support contains() for top-level SVGs
var topParent=element.node;while(topParent.parentNode){topParent=topParent.parentNode;}if(topParent!=document)throw new Error('Element not in the dom');}else{}// the element is NOT in the dom, throw error
// disabling the check below which fixes issue #76
// if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')
// find native bbox
box=element.node.getBBox();}catch(e){if(element instanceof SVG.Shape){if(!SVG.parser.draw){// fixes apexcharts/vue-apexcharts #14
SVG.prepare();}var clone=element.clone(SVG.parser.draw.instance).show();box=clone.node.getBBox();clone.remove();}else{box={x:element.node.clientLeft,y:element.node.clientTop,width:element.node.clientWidth,height:element.node.clientHeight};}}SVG.Box.call(this,box);}},// Define ancestor
inherit:SVG.Box,// Define Parent
parent:SVG.Element,// Constructor
construct:{// Get bounding box
bbox:function bbox(){return new SVG.BBox(this);}}});SVG.BBox.prototype.constructor=SVG.BBox;SVG.Matrix=SVG.invent({// Initialize
create:function create(source){var base=arrayToMatrix([1,0,0,1,0,0]);// ensure source as object
source=source instanceof SVG.Element?source.matrixify():typeof source==='string'?arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)):arguments.length==6?arrayToMatrix([].slice.call(arguments)):Array.isArray(source)?arrayToMatrix(source):_typeof(source)==='object'?source:base;// merge source
for(var i=abcdef.length-1;i>=0;--i){this[abcdef[i]]=source[abcdef[i]]!=null?source[abcdef[i]]:base[abcdef[i]];}},// Add methods
extend:{// Extract individual transformations
extract:function extract(){// find delta transform points
var px=deltaTransformPoint(this,0,1),py=deltaTransformPoint(this,1,0),skewX=180/Math.PI*Math.atan2(px.y,px.x)-90;return{// translation
x:this.e,y:this.f,transformedX:(this.e*Math.cos(skewX*Math.PI/180)+this.f*Math.sin(skewX*Math.PI/180))/Math.sqrt(this.a*this.a+this.b*this.b),transformedY:(this.f*Math.cos(skewX*Math.PI/180)+this.e*Math.sin(-skewX*Math.PI/180))/Math.sqrt(this.c*this.c+this.d*this.d),// rotation
rotation:skewX,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f,matrix:new SVG.Matrix(this)};},// Clone matrix
clone:function clone(){return new SVG.Matrix(this);},// Morph one matrix into another
morph:function morph(matrix){// store new destination
this.destination=new SVG.Matrix(matrix);return this;},// Multiplies by given matrix
multiply:function multiply(matrix){return new SVG.Matrix(this["native"]().multiply(parseMatrix(matrix)["native"]()));},// Inverses matrix
inverse:function inverse(){return new SVG.Matrix(this["native"]().inverse());},// Translate matrix
translate:function translate(x,y){return new SVG.Matrix(this["native"]().translate(x||0,y||0));},// Convert to native SVGMatrix
"native":function _native2(){// create new matrix
var matrix=SVG.parser["native"].createSVGMatrix();// update with current values
for(var i=abcdef.length-1;i>=0;i--){matrix[abcdef[i]]=this[abcdef[i]];}return matrix;},// Convert matrix to string
toString:function toString(){// Construct the matrix directly, avoid values that are too small
return'matrix('+float32String(this.a)+','+float32String(this.b)+','+float32String(this.c)+','+float32String(this.d)+','+float32String(this.e)+','+float32String(this.f)+')';}},// Define parent
parent:SVG.Element,// Add parent method
construct:{// Get current matrix
ctm:function ctm(){return new SVG.Matrix(this.node.getCTM());},// Get current screen matrix
screenCTM:function screenCTM(){/* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537
             This is needed because FF does not return the transformation matrix
             for the inner coordinate system when getScreenCTM() is called on nested svgs.
             However all other Browsers do that */if(this instanceof SVG.Nested){var rect=this.rect(1,1);var m=rect.node.getScreenCTM();rect.remove();return new SVG.Matrix(m);}return new SVG.Matrix(this.node.getScreenCTM());}}});SVG.Point=SVG.invent({// Initialize
create:function create(x,y){var source,base={x:0,y:0};// ensure source as object
source=Array.isArray(x)?{x:x[0],y:x[1]}:_typeof(x)==='object'?{x:x.x,y:x.y}:x!=null?{x:x,y:y!=null?y:x}:base;// If y has no value, then x is used has its value
// merge source
this.x=source.x;this.y=source.y;},// Add methods
extend:{// Clone point
clone:function clone(){return new SVG.Point(this);},// Morph one point into another
morph:function morph(x,y){// store new destination
this.destination=new SVG.Point(x,y);return this;}}});SVG.extend(SVG.Element,{// Get point
point:function point(x,y){return new SVG.Point(x,y).transform(this.screenCTM().inverse());}});SVG.extend(SVG.Element,{// Set svg element attribute
attr:function attr(a,v,n){// act as full getter
if(a==null){// get an object of attributes
a={};v=this.node.attributes;for(var n=v.length-1;n>=0;n--){a[v[n].nodeName]=SVG.regex.isNumber.test(v[n].nodeValue)?parseFloat(v[n].nodeValue):v[n].nodeValue;}return a;}else if(_typeof(a)==='object'){// apply every attribute individually if an object is passed
for(var v_ in a){this.attr(v_,a[v_]);}}else if(v===null){// remove value
this.node.removeAttribute(a);}else if(v==null){// act as a getter if the first and only argument is not an object
v=this.node.getAttribute(a);return v==null?SVG.defaults.attrs[a]:SVG.regex.isNumber.test(v)?parseFloat(v):v;}else{// BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0
if(a=='stroke-width'){this.attr('stroke',parseFloat(v)>0?this._stroke:null);}else if(a=='stroke'){this._stroke=v;}// convert image fill and stroke to patterns
if(a=='fill'||a=='stroke'){if(SVG.regex.isImage.test(v)){v=this.doc().defs().image(v,0,0);}if(v instanceof SVG.Image){v=this.doc().defs().pattern(0,0,function(){this.add(v);});}}// ensure correct numeric values (also accepts NaN and Infinity)
if(typeof v==='number'){v=new SVG.Number(v);}// ensure full hex color
else if(SVG.Color.isColor(v)){v=new SVG.Color(v);}// parse array values
else if(Array.isArray(v)){v=new SVG.Array(v);}// if the passed attribute is leading...
if(a=='leading'){// ... call the leading method instead
if(this.leading){this.leading(v);}}else{// set given attribute on node
typeof n==='string'?this.node.setAttributeNS(n,a,v.toString()):this.node.setAttribute(a,v.toString());}// rebuild if required
if(this.rebuild&&(a=='font-size'||a=='x')){this.rebuild(a,v);}}return this;}});SVG.extend(SVG.Element,{// Add transformations
transform:function transform(o,relative){// get target in case of the fx module, otherwise reference this
var target=this,matrix;// act as a getter
if(_typeof(o)!=='object'){// get current matrix
matrix=new SVG.Matrix(target).extract();return typeof o==='string'?matrix[o]:matrix;}// get current matrix
matrix=new SVG.Matrix(target);// ensure relative flag
relative=!!relative||!!o.relative;// act on matrix
if(o.a!=null){matrix=relative// relative
?matrix.multiply(new SVG.Matrix(o))// absolute
:new SVG.Matrix(o);}return this.attr('transform',matrix);}});SVG.extend(SVG.Element,{// Reset all transformations
untransform:function untransform(){return this.attr('transform',null);},// merge the whole transformation chain into one matrix and returns it
matrixify:function matrixify(){var matrix=(this.attr('transform')||'').// split transformations
split(SVG.regex.transforms).slice(0,-1).map(function(str){// generate key => value pairs
var kv=str.trim().split('(');return[kv[0],kv[1].split(SVG.regex.delimiter).map(function(str){return parseFloat(str);})];})// merge every transformation into one matrix
.reduce(function(matrix,transform){if(transform[0]=='matrix')return matrix.multiply(arrayToMatrix(transform[1]));return matrix[transform[0]].apply(matrix,transform[1]);},new SVG.Matrix());return matrix;},// add an element to another parent without changing the visual representation on the screen
toParent:function toParent(parent){if(this==parent)return this;var ctm=this.screenCTM();var pCtm=parent.screenCTM().inverse();this.addTo(parent).untransform().transform(pCtm.multiply(ctm));return this;},// same as above with parent equals root-svg
toDoc:function toDoc(){return this.toParent(this.doc());}});SVG.Transformation=SVG.invent({create:function create(source,inversed){if(arguments.length>1&&typeof inversed!=='boolean'){return this.constructor.call(this,[].slice.call(arguments));}if(Array.isArray(source)){for(var i=0,len=this.arguments.length;i<len;++i){this[this.arguments[i]]=source[i];}}else if(_typeof(source)==='object'){for(var i=0,len=this.arguments.length;i<len;++i){this[this.arguments[i]]=source[this.arguments[i]];}}this.inversed=false;if(inversed===true){this.inversed=true;}}});SVG.Translate=SVG.invent({parent:SVG.Matrix,inherit:SVG.Transformation,create:function create(source,inversed){this.constructor.apply(this,[].slice.call(arguments));},extend:{arguments:['transformedX','transformedY'],method:'translate'}});SVG.extend(SVG.Element,{// Dynamic style generator
style:function style(s,v){if(arguments.length==0){// get full style
return this.node.style.cssText||'';}else if(arguments.length<2){// apply every style individually if an object is passed
if(_typeof(s)==='object'){for(var v_ in s){this.style(v_,s[v_]);}}else if(SVG.regex.isCss.test(s)){// parse css string
s=s.split(/\s*;\s*/)// filter out suffix ; and stuff like ;;
.filter(function(e){return!!e;}).map(function(e){return e.split(/\s*:\s*/);});// apply every definition individually
while(v=s.pop()){this.style(v[0],v[1]);}}else{// act as a getter if the first and only argument is not an object
return this.node.style[camelCase(s)];}}else{this.node.style[camelCase(s)]=v===null||SVG.regex.isBlank.test(v)?'':v;}return this;}});SVG.Parent=SVG.invent({// Initialize node
create:function create(element){this.constructor.call(this,element);},// Inherit from
inherit:SVG.Element,// Add class methods
extend:{// Returns all child elements
children:function children(){return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes),function(node){return SVG.adopt(node);});},// Add given element at a position
add:function add(element,i){if(i==null){this.node.appendChild(element.node);}else if(element.node!=this.node.childNodes[i]){this.node.insertBefore(element.node,this.node.childNodes[i]);}return this;},// Basically does the same as `add()` but returns the added element instead
put:function put(element,i){this.add(element,i);return element;},// Checks if the given element is a child
has:function has(element){return this.index(element)>=0;},// Gets index of given element
index:function index(element){return[].slice.call(this.node.childNodes).indexOf(element.node);},// Get a element at the given index
get:function get(i){return SVG.adopt(this.node.childNodes[i]);},// Get first child
first:function first(){return this.get(0);},// Get the last child
last:function last(){return this.get(this.node.childNodes.length-1);},// Iterates over all children and invokes a given block
each:function each(block,deep){var il,children=this.children();for(var i=0,il=children.length;i<il;i++){if(children[i]instanceof SVG.Element){block.apply(children[i],[i,children]);}if(deep&&children[i]instanceof SVG.Container){children[i].each(block,deep);}}return this;},// Remove a given child
removeElement:function removeElement(element){this.node.removeChild(element.node);return this;},// Remove all elements in this container
clear:function clear(){// remove children
while(this.node.hasChildNodes()){this.node.removeChild(this.node.lastChild);}// remove defs reference
delete this._defs;return this;},// Get defs
defs:function defs(){return this.doc().defs();}}});SVG.extend(SVG.Parent,{ungroup:function ungroup(parent,depth){if(depth===0||this instanceof SVG.Defs||this.node==SVG.parser.draw)return this;parent=parent||(this instanceof SVG.Doc?this:this.parent(SVG.Parent));depth=depth||Infinity;this.each(function(){if(this instanceof SVG.Defs)return this;if(this instanceof SVG.Parent)return this.ungroup(parent,depth-1);return this.toParent(parent);});this.node.firstChild||this.remove();return this;},flatten:function flatten(parent,depth){return this.ungroup(parent,depth);}});SVG.Container=SVG.invent({// Initialize node
create:function create(element){this.constructor.call(this,element);},// Inherit from
inherit:SVG.Parent});SVG.ViewBox=SVG.invent({// Define parent
parent:SVG.Container,// Add parent method
construct:{}})// Add events to elements
;['click','dblclick','mousedown','mouseup','mouseover','mouseout','mousemove',// , 'mouseenter' -> not supported by IE
// , 'mouseleave' -> not supported by IE
'touchstart','touchmove','touchleave','touchend','touchcancel'].forEach(function(event){// add event to SVG.Element
SVG.Element.prototype[event]=function(f){// bind event to element rather than element node
SVG.on(this.node,event,f);return this;};});// Initialize listeners stack
SVG.listeners=[];SVG.handlerMap=[];SVG.listenerId=0;// Add event binder in the SVG namespace
SVG.on=function(node,event,listener,binding,options){// create listener, get object-index
var l=listener.bind(binding||node.instance||node),index=(SVG.handlerMap.indexOf(node)+1||SVG.handlerMap.push(node))-1,ev=event.split('.')[0],ns=event.split('.')[1]||'*';// ensure valid object
SVG.listeners[index]=SVG.listeners[index]||{};SVG.listeners[index][ev]=SVG.listeners[index][ev]||{};SVG.listeners[index][ev][ns]=SVG.listeners[index][ev][ns]||{};if(!listener._svgjsListenerId){listener._svgjsListenerId=++SVG.listenerId;}// reference listener
SVG.listeners[index][ev][ns][listener._svgjsListenerId]=l;// add listener
node.addEventListener(ev,l,options||false);};// Add event unbinder in the SVG namespace
SVG.off=function(node,event,listener){var index=SVG.handlerMap.indexOf(node),ev=event&&event.split('.')[0],ns=event&&event.split('.')[1],namespace='';if(index==-1)return;if(listener){if(typeof listener==='function')listener=listener._svgjsListenerId;if(!listener)return;// remove listener reference
if(SVG.listeners[index][ev]&&SVG.listeners[index][ev][ns||'*']){// remove listener
node.removeEventListener(ev,SVG.listeners[index][ev][ns||'*'][listener],false);delete SVG.listeners[index][ev][ns||'*'][listener];}}else if(ns&&ev){// remove all listeners for a namespaced event
if(SVG.listeners[index][ev]&&SVG.listeners[index][ev][ns]){for(var listener_ in SVG.listeners[index][ev][ns]){SVG.off(node,[ev,ns].join('.'),listener_);}delete SVG.listeners[index][ev][ns];}}else if(ns){// remove all listeners for a specific namespace
for(var event_ in SVG.listeners[index]){for(var namespace in SVG.listeners[index][event_]){if(ns===namespace){SVG.off(node,[event_,ns].join('.'));}}}}else if(ev){// remove all listeners for the event
if(SVG.listeners[index][ev]){for(var namespace in SVG.listeners[index][ev]){SVG.off(node,[ev,namespace].join('.'));}delete SVG.listeners[index][ev];}}else{// remove all listeners on a given node
for(var event_ in SVG.listeners[index]){SVG.off(node,event_);}delete SVG.listeners[index];delete SVG.handlerMap[index];}};//
SVG.extend(SVG.Element,{// Bind given event to listener
on:function on(event,listener,binding,options){SVG.on(this.node,event,listener,binding,options);return this;},// Unbind event from listener
off:function off(event,listener){SVG.off(this.node,event,listener);return this;},// Fire given event
fire:function fire(event,data){// Dispatch event
if(event instanceof window.Event){this.node.dispatchEvent(event);}else{this.node.dispatchEvent(event=new SVG.CustomEvent(event,{detail:data,cancelable:true}));}this._event=event;return this;},event:function event(){return this._event;}});SVG.Defs=SVG.invent({// Initialize node
create:'defs',// Inherit from
inherit:SVG.Container});SVG.G=SVG.invent({// Initialize node
create:'g',// Inherit from
inherit:SVG.Container,// Add class methods
extend:{// Move over x-axis
x:function x(_x2){return _x2==null?this.transform('x'):this.transform({x:_x2-this.x()},true);}},// Add parent method
construct:{// Create a group element
group:function group(){return this.put(new SVG.G());}}});SVG.Doc=SVG.invent({// Initialize node
create:function create(element){if(element){// ensure the presence of a dom element
element=typeof element==='string'?document.getElementById(element):element;// If the target is an svg element, use that element as the main wrapper.
// This allows svg.js to work with svg documents as well.
if(element.nodeName=='svg'){this.constructor.call(this,element);}else{this.constructor.call(this,SVG.create('svg'));element.appendChild(this.node);this.size('100%','100%');}// set svg element attributes and ensure defs node
this.namespace().defs();}},// Inherit from
inherit:SVG.Container,// Add class methods
extend:{// Add namespaces
namespace:function namespace(){return this.attr({xmlns:SVG.ns,version:'1.1'}).attr('xmlns:xlink',SVG.xlink,SVG.xmlns).attr('xmlns:svgjs',SVG.svgjs,SVG.xmlns);},// Creates and returns defs element
defs:function defs(){if(!this._defs){var defs;// Find or create a defs element in this instance
if(defs=this.node.getElementsByTagName('defs')[0]){this._defs=SVG.adopt(defs);}else{this._defs=new SVG.Defs();}// Make sure the defs node is at the end of the stack
this.node.appendChild(this._defs.node);}return this._defs;},// custom parent method
parent:function parent(){if(!this.node.parentNode||this.node.parentNode.nodeName=='#document')return null;return this.node.parentNode;},// Removes the doc from the DOM
remove:function remove(){if(this.parent()){this.parent().removeChild(this.node);}return this;},clear:function clear(){// remove children
while(this.node.hasChildNodes()){this.node.removeChild(this.node.lastChild);}// remove defs reference
delete this._defs;// add back parser
if(SVG.parser.draw&&!SVG.parser.draw.parentNode){this.node.appendChild(SVG.parser.draw);}return this;},clone:function clone(parent){// write dom data to the dom so the clone can pickup the data
this.writeDataToDom();// get reference to node
var node=this.node;// clone element and assign new id
var clone=assignNewId(node.cloneNode(true));// insert the clone in the given parent or after myself
if(parent){(parent.node||parent).appendChild(clone.node);}else{node.parentNode.insertBefore(clone.node,node.nextSibling);}return clone;}}});// ### This module adds backward / forward functionality to elements.
//
SVG.extend(SVG.Element,{// Get all siblings, including myself
});SVG.Gradient=SVG.invent({// Initialize node
create:function create(type){this.constructor.call(this,SVG.create(type+'Gradient'));// store type
this.type=type;},// Inherit from
inherit:SVG.Container,// Add class methods
extend:{// Add a color stop
at:function at(offset,color,opacity){return this.put(new SVG.Stop()).update(offset,color,opacity);},// Update gradient
update:function update(block){// remove all stops
this.clear();// invoke passed block
if(typeof block==='function'){block.call(this,this);}return this;},// Return the fill id
fill:function fill(){return'url(#'+this.id()+')';},// Alias string convertion to fill
toString:function toString(){return this.fill();},// custom attr to handle transform
attr:function attr(a,b,c){if(a=='transform')a='gradientTransform';return SVG.Container.prototype.attr.call(this,a,b,c);}},// Add parent method
construct:{// Create gradient element in defs
gradient:function gradient(type,block){return this.defs().gradient(type,block);}}});// Add animatable methods to both gradient and fx module
SVG.extend(SVG.Gradient,SVG.FX,{// From position
from:function from(x,y){return(this._target||this).type=='radial'?this.attr({fx:new SVG.Number(x),fy:new SVG.Number(y)}):this.attr({x1:new SVG.Number(x),y1:new SVG.Number(y)});},// To position
to:function to(x,y){return(this._target||this).type=='radial'?this.attr({cx:new SVG.Number(x),cy:new SVG.Number(y)}):this.attr({x2:new SVG.Number(x),y2:new SVG.Number(y)});}});// Base gradient generation
SVG.extend(SVG.Defs,{// define gradient
gradient:function gradient(type,block){return this.put(new SVG.Gradient(type)).update(block);}});SVG.Stop=SVG.invent({// Initialize node
create:'stop',// Inherit from
inherit:SVG.Element,// Add class methods
extend:{// add color stops
update:function update(o){if(typeof o==='number'||o instanceof SVG.Number){o={offset:arguments[0],color:arguments[1],opacity:arguments[2]};}// set attributes
if(o.opacity!=null)this.attr('stop-opacity',o.opacity);if(o.color!=null)this.attr('stop-color',o.color);if(o.offset!=null)this.attr('offset',new SVG.Number(o.offset));return this;}}});SVG.Pattern=SVG.invent({// Initialize node
create:'pattern',// Inherit from
inherit:SVG.Container,// Add class methods
extend:{// Return the fill id
fill:function fill(){return'url(#'+this.id()+')';},// Update pattern by rebuilding
update:function update(block){// remove content
this.clear();// invoke passed block
if(typeof block==='function'){block.call(this,this);}return this;},// Alias string convertion to fill
toString:function toString(){return this.fill();},// custom attr to handle transform
attr:function attr(a,b,c){if(a=='transform')a='patternTransform';return SVG.Container.prototype.attr.call(this,a,b,c);}},// Add parent method
construct:{// Create pattern element in defs
pattern:function pattern(width,height,block){return this.defs().pattern(width,height,block);}}});SVG.extend(SVG.Defs,{// Define gradient
pattern:function pattern(width,height,block){return this.put(new SVG.Pattern()).update(block).attr({x:0,y:0,width:width,height:height,patternUnits:'userSpaceOnUse'});}});SVG.Shape=SVG.invent({// Initialize node
create:function create(element){this.constructor.call(this,element);},// Inherit from
inherit:SVG.Element});SVG.Symbol=SVG.invent({// Initialize node
create:'symbol',// Inherit from
inherit:SVG.Container,construct:{// create symbol
symbol:function symbol(){return this.put(new SVG.Symbol());}}});SVG.Use=SVG.invent({// Initialize node
create:'use',// Inherit from
inherit:SVG.Shape,// Add class methods
extend:{// Use element as a reference
element:function element(_element,file){// Set lined element
return this.attr('href',(file||'')+'#'+_element,SVG.xlink);}},// Add parent method
construct:{// Create a use element
use:function use(element,file){return this.put(new SVG.Use()).element(element,file);}}});SVG.Rect=SVG.invent({// Initialize node
create:'rect',// Inherit from
inherit:SVG.Shape,// Add parent method
construct:{// Create a rect element
rect:function rect(width,height){return this.put(new SVG.Rect()).size(width,height);}}});SVG.Circle=SVG.invent({// Initialize node
create:'circle',// Inherit from
inherit:SVG.Shape,// Add parent method
construct:{// Create circle element, based on ellipse
circle:function circle(size){return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0,0);}}});SVG.extend(SVG.Circle,SVG.FX,{// Radius x value
rx:function rx(_rx){return this.attr('r',_rx);},// Alias radius x value
ry:function ry(_ry){return this.rx(_ry);}});SVG.Ellipse=SVG.invent({// Initialize node
create:'ellipse',// Inherit from
inherit:SVG.Shape,// Add parent method
construct:{// Create an ellipse
ellipse:function ellipse(width,height){return this.put(new SVG.Ellipse()).size(width,height).move(0,0);}}});SVG.extend(SVG.Ellipse,SVG.Rect,SVG.FX,{// Radius x value
rx:function rx(_rx2){return this.attr('rx',_rx2);},// Radius y value
ry:function ry(_ry2){return this.attr('ry',_ry2);}});// Add common method
SVG.extend(SVG.Circle,SVG.Ellipse,{// Move over x-axis
x:function x(_x3){return _x3==null?this.cx()-this.rx():this.cx(_x3+this.rx());},// Move over y-axis
y:function y(_y2){return _y2==null?this.cy()-this.ry():this.cy(_y2+this.ry());},// Move by center over x-axis
cx:function cx(x){return x==null?this.attr('cx'):this.attr('cx',x);},// Move by center over y-axis
cy:function cy(y){return y==null?this.attr('cy'):this.attr('cy',y);},// Set width of element
width:function width(_width2){return _width2==null?this.rx()*2:this.rx(new SVG.Number(_width2).divide(2));},// Set height of element
height:function height(_height2){return _height2==null?this.ry()*2:this.ry(new SVG.Number(_height2).divide(2));},// Custom size function
size:function size(width,height){var p=proportionalSize(this,width,height);return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));}});SVG.Line=SVG.invent({// Initialize node
create:'line',// Inherit from
inherit:SVG.Shape,// Add class methods
extend:{// Get array
array:function array(){return new SVG.PointArray([[this.attr('x1'),this.attr('y1')],[this.attr('x2'),this.attr('y2')]]);},// Overwrite native plot() method
plot:function plot(x1,y1,x2,y2){if(x1==null){return this.array();}else if(typeof y1!=='undefined'){x1={x1:x1,y1:y1,x2:x2,y2:y2};}else{x1=new SVG.PointArray(x1).toLine();}return this.attr(x1);},// Move by left top corner
move:function move(x,y){return this.attr(this.array().move(x,y).toLine());},// Set element size to given width and height
size:function size(width,height){var p=proportionalSize(this,width,height);return this.attr(this.array().size(p.width,p.height).toLine());}},// Add parent method
construct:{// Create a line element
line:function line(x1,y1,x2,y2){// make sure plot is called as a setter
// x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray
return SVG.Line.prototype.plot.apply(this.put(new SVG.Line()),x1!=null?[x1,y1,x2,y2]:[0,0,0,0]);}}});SVG.Polyline=SVG.invent({// Initialize node
create:'polyline',// Inherit from
inherit:SVG.Shape,// Add parent method
construct:{// Create a wrapped polyline element
polyline:function polyline(p){// make sure plot is called as a setter
return this.put(new SVG.Polyline()).plot(p||new SVG.PointArray());}}});SVG.Polygon=SVG.invent({// Initialize node
create:'polygon',// Inherit from
inherit:SVG.Shape,// Add parent method
construct:{// Create a wrapped polygon element
polygon:function polygon(p){// make sure plot is called as a setter
return this.put(new SVG.Polygon()).plot(p||new SVG.PointArray());}}});// Add polygon-specific functions
SVG.extend(SVG.Polyline,SVG.Polygon,{// Get array
array:function array(){return this._array||(this._array=new SVG.PointArray(this.attr('points')));},// Plot new path
plot:function plot(p){return p==null?this.array():this.clear().attr('points',typeof p==='string'?p:this._array=new SVG.PointArray(p));},// Clear array cache
clear:function clear(){delete this._array;return this;},// Move by left top corner
move:function move(x,y){return this.attr('points',this.array().move(x,y));},// Set element size to given width and height
size:function size(width,height){var p=proportionalSize(this,width,height);return this.attr('points',this.array().size(p.width,p.height));}});// unify all point to point elements
SVG.extend(SVG.Line,SVG.Polyline,SVG.Polygon,{// Define morphable array
morphArray:SVG.PointArray,// Move by left top corner over x-axis
x:function x(_x4){return _x4==null?this.bbox().x:this.move(_x4,this.bbox().y);},// Move by left top corner over y-axis
y:function y(_y3){return _y3==null?this.bbox().y:this.move(this.bbox().x,_y3);},// Set width of element
width:function width(_width3){var b=this.bbox();return _width3==null?b.width:this.size(_width3,b.height);},// Set height of element
height:function height(_height3){var b=this.bbox();return _height3==null?b.height:this.size(b.width,_height3);}});SVG.Path=SVG.invent({// Initialize node
create:'path',// Inherit from
inherit:SVG.Shape,// Add class methods
extend:{// Define morphable array
morphArray:SVG.PathArray,// Get array
array:function array(){return this._array||(this._array=new SVG.PathArray(this.attr('d')));},// Plot new path
plot:function plot(d){return d==null?this.array():this.clear().attr('d',typeof d==='string'?d:this._array=new SVG.PathArray(d));},// Clear array cache
clear:function clear(){delete this._array;return this;}},// Add parent method
construct:{// Create a wrapped path element
path:function path(d){// make sure plot is called as a setter
return this.put(new SVG.Path()).plot(d||new SVG.PathArray());}}});SVG.Image=SVG.invent({// Initialize node
create:'image',// Inherit from
inherit:SVG.Shape,// Add class methods
extend:{// (re)load image
load:function load(url){if(!url)return this;var self=this,img=new window.Image();// preload image
SVG.on(img,'load',function(){SVG.off(img);var p=self.parent(SVG.Pattern);if(p===null)return;// ensure image size
if(self.width()==0&&self.height()==0){self.size(img.width,img.height);}// ensure pattern size if not set
if(p&&p.width()==0&&p.height()==0){p.size(self.width(),self.height());}// callback
if(typeof self._loaded==='function'){self._loaded.call(self,{width:img.width,height:img.height,ratio:img.width/img.height,url:url});}});SVG.on(img,'error',function(e){SVG.off(img);if(typeof self._error==='function'){self._error.call(self,e);}});return this.attr('href',img.src=this.src=url,SVG.xlink);},// Add loaded callback
loaded:function loaded(_loaded){this._loaded=_loaded;return this;},error:function error(_error){this._error=_error;return this;}},// Add parent method
construct:{// create image element, load image and set its size
image:function image(source,width,height){return this.put(new SVG.Image()).load(source).size(width||0,height||width||0);}}});SVG.Text=SVG.invent({// Initialize node
create:function create(){this.constructor.call(this,SVG.create('text'));this.dom.leading=new SVG.Number(1.3);// store leading value for rebuilding
this._rebuild=true;// enable automatic updating of dy values
this._build=false;// disable build mode for adding multiple lines
// set default font
this.attr('font-family',SVG.defaults.attrs['font-family']);},// Inherit from
inherit:SVG.Shape,// Add class methods
extend:{// Move over x-axis
x:function x(_x5){// act as getter
if(_x5==null){return this.attr('x');}return this.attr('x',_x5);},// Set the text content
text:function text(_text){// act as getter
if(typeof _text==='undefined'){var _text='';var children=this.node.childNodes;for(var i=0,len=children.length;i<len;++i){// add newline if its not the first child and newLined is set to true
if(i!=0&&children[i].nodeType!=3&&SVG.adopt(children[i]).dom.newLined==true){_text+='\n';}// add content of this node
_text+=children[i].textContent;}return _text;}// remove existing content
this.clear().build(true);if(typeof _text==='function'){// call block
_text.call(this,this);}else{// store text and make sure text is not blank
_text=_text.split('\n');// build new lines
for(var i=0,il=_text.length;i<il;i++){this.tspan(_text[i]).newLine();}}// disable build mode and rebuild lines
return this.build(false).rebuild();},// Set font size
size:function size(_size){return this.attr('font-size',_size).rebuild();},// Set / get leading
leading:function leading(value){// act as getter
if(value==null){return this.dom.leading;}// act as setter
this.dom.leading=new SVG.Number(value);return this.rebuild();},// Get all the first level lines
lines:function lines(){var node=(this.textPath&&this.textPath()||this).node;// filter tspans and map them to SVG.js instances
var lines=SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes),function(el){return SVG.adopt(el);});// return an instance of SVG.set
return new SVG.Set(lines);},// Rebuild appearance type
rebuild:function rebuild(_rebuild){// store new rebuild flag if given
if(typeof _rebuild==='boolean'){this._rebuild=_rebuild;}// define position of all lines
if(this._rebuild){var self=this,blankLineOffset=0,dy=this.dom.leading*new SVG.Number(this.attr('font-size'));this.lines().each(function(){if(this.dom.newLined){if(!self.textPath()){this.attr('x',self.attr('x'));}if(this.text()=='\n'){blankLineOffset+=dy;}else{this.attr('dy',dy+blankLineOffset);blankLineOffset=0;}}});this.fire('rebuild');}return this;},// Enable / disable build mode
build:function build(_build){this._build=!!_build;return this;},// overwrite method from parent to set data properly
setData:function setData(o){this.dom=o;this.dom.leading=new SVG.Number(o.leading||1.3);return this;}},// Add parent method
construct:{// Create text element
text:function text(_text2){return this.put(new SVG.Text()).text(_text2);},// Create plain text element
plain:function plain(text){return this.put(new SVG.Text()).plain(text);}}});SVG.Tspan=SVG.invent({// Initialize node
create:'tspan',// Inherit from
inherit:SVG.Shape,// Add class methods
extend:{// Set text content
text:function text(_text3){if(_text3==null)return this.node.textContent+(this.dom.newLined?'\n':'');typeof _text3==='function'?_text3.call(this,this):this.plain(_text3);return this;},// Shortcut dx
dx:function dx(_dx){return this.attr('dx',_dx);},// Shortcut dy
dy:function dy(_dy){return this.attr('dy',_dy);},// Create new line
newLine:function newLine(){// fetch text parent
var t=this.parent(SVG.Text);// mark new line
this.dom.newLined=true;// apply new hy¡n
return this.dy(t.dom.leading*t.attr('font-size')).attr('x',t.x());}}});SVG.extend(SVG.Text,SVG.Tspan,{// Create plain text node
plain:function plain(text){// clear if build mode is disabled
if(this._build===false){this.clear();}// create text node
this.node.appendChild(document.createTextNode(text));return this;},// Create a tspan
tspan:function tspan(text){var node=(this.textPath&&this.textPath()||this).node,tspan=new SVG.Tspan();// clear if build mode is disabled
if(this._build===false){this.clear();}// add new tspan
node.appendChild(tspan.node);return tspan.text(text);},// Clear all lines
clear:function clear(){var node=(this.textPath&&this.textPath()||this).node;// remove existing child nodes
while(node.hasChildNodes()){node.removeChild(node.lastChild);}return this;},// Get length of text element
length:function length(){return this.node.getComputedTextLength();}});SVG.TextPath=SVG.invent({// Initialize node
create:'textPath',// Inherit from
inherit:SVG.Parent,// Define parent class
parent:SVG.Text,// Add parent method
construct:{morphArray:SVG.PathArray,// return the array of the path track element
array:function array(){var track=this.track();return track?track.array():null;},// Plot path if any
plot:function plot(d){var track=this.track(),pathArray=null;if(track){pathArray=track.plot(d);}return d==null?pathArray:this;},// Get the path track element
track:function track(){var path=this.textPath();if(path){return path.reference('href');}},// Get the textPath child
textPath:function textPath(){if(this.node.firstChild&&this.node.firstChild.nodeName=='textPath'){return SVG.adopt(this.node.firstChild);}}}});SVG.Nested=SVG.invent({// Initialize node
create:function create(){this.constructor.call(this,SVG.create('svg'));this.style('overflow','visible');},// Inherit from
inherit:SVG.Container,// Add parent method
construct:{// Create nested svg document
nested:function nested(){return this.put(new SVG.Nested());}}});// Define list of available attributes for stroke and fill
var sugar={stroke:['color','width','opacity','linecap','linejoin','miterlimit','dasharray','dashoffset'],fill:['color','opacity','rule'],prefix:function prefix(t,a){return a=='color'?t:t+'-'+a;}}// Add sugar for fill and stroke
;['fill','stroke'].forEach(function(m){var extension={};extension[m]=function(o){if(typeof o==='undefined'){return this;}if(typeof o==='string'||SVG.Color.isRgb(o)||o&&typeof o.fill==='function'){this.attr(m,o);}else// set all attributes from sugar.fill and sugar.stroke list
{for(var i=sugar[m].length-1;i>=0;i--){if(o[sugar[m][i]]!=null){this.attr(sugar.prefix(m,sugar[m][i]),o[sugar[m][i]]);}}}return this;};SVG.extend(SVG.Element,SVG.FX,extension);});SVG.extend(SVG.Element,SVG.FX,{// Map translate to transform
translate:function translate(x,y){return this.transform({x:x,y:y});},// Map matrix to transform
matrix:function matrix(m){return this.attr('transform',new SVG.Matrix(arguments.length==6?[].slice.call(arguments):m));},// Opacity
opacity:function opacity(value){return this.attr('opacity',value);},// Relative move over x axis
dx:function dx(x){return this.x(new SVG.Number(x).plus(this instanceof SVG.FX?0:this.x()),true);},// Relative move over y axis
dy:function dy(y){return this.y(new SVG.Number(y).plus(this instanceof SVG.FX?0:this.y()),true);}});SVG.extend(SVG.Path,{// Get path length
length:function length(){return this.node.getTotalLength();},// Get point at length
pointAt:function pointAt(length){return this.node.getPointAtLength(length);}});SVG.Set=SVG.invent({// Initialize
create:function create(members){// Set initial state
Array.isArray(members)?this.members=members:this.clear();},// Add class methods
extend:{// Add element to set
add:function add(){var il,elements=[].slice.call(arguments);for(var i=0,il=elements.length;i<il;i++){this.members.push(elements[i]);}return this;},// Remove element from set
remove:function remove(element){var i=this.index(element);// remove given child
if(i>-1){this.members.splice(i,1);}return this;},// Iterate over all members
each:function each(block){for(var i=0,il=this.members.length;i<il;i++){block.apply(this.members[i],[i,this.members]);}return this;},// Restore to defaults
clear:function clear(){// initialize store
this.members=[];return this;},// Get the length of a set
length:function length(){return this.members.length;},// Checks if a given element is present in set
has:function has(element){return this.index(element)>=0;},// retuns index of given element in set
index:function index(element){return this.members.indexOf(element);},// Get member at given index
get:function get(i){return this.members[i];},// Get first member
first:function first(){return this.get(0);},// Get last member
last:function last(){return this.get(this.members.length-1);},// Default value
valueOf:function valueOf(){return this.members;}},// Add parent method
construct:{// Create a new set
set:function set(members){return new SVG.Set(members);}}});SVG.FX.Set=SVG.invent({// Initialize node
create:function create(set){// store reference to set
this.set=set;}});// Alias methods
SVG.Set.inherit=function(){var methods=[];// gather shape methods
for(var m in SVG.Shape.prototype){if(typeof SVG.Shape.prototype[m]==='function'&&typeof SVG.Set.prototype[m]!=='function'){methods.push(m);}}// apply shape aliasses
methods.forEach(function(method){SVG.Set.prototype[method]=function(){for(var i=0,il=this.members.length;i<il;i++){if(this.members[i]&&typeof this.members[i][method]==='function'){this.members[i][method].apply(this.members[i],arguments);}}return method=='animate'?this.fx||(this.fx=new SVG.FX.Set(this)):this;};});// clear methods for the next round
methods=[];// gather fx methods
for(var m in SVG.FX.prototype){if(typeof SVG.FX.prototype[m]==='function'&&typeof SVG.FX.Set.prototype[m]!=='function'){methods.push(m);}}// apply fx aliasses
methods.forEach(function(method){SVG.FX.Set.prototype[method]=function(){for(var i=0,il=this.set.members.length;i<il;i++){this.set.members[i].fx[method].apply(this.set.members[i].fx,arguments);}return this;};});};SVG.extend(SVG.Element,{});SVG.extend(SVG.Element,{// Remember arbitrary data
remember:function remember(k,v){// remember every item in an object individually
if(_typeof(arguments[0])==='object'){for(var v_ in k){this.remember(v_,k[v_]);}}// retrieve memory
else if(arguments.length==1){return this.memory()[k];}// store memory
else{this.memory()[k]=v;}return this;},// Erase a given memory
forget:function forget(){if(arguments.length==0){this._memory={};}else{for(var i=arguments.length-1;i>=0;i--){delete this.memory()[arguments[i]];}}return this;},// Initialize or return local memory object
memory:function memory(){return this._memory||(this._memory={});}});// Method for getting an element by id
SVG.get=function(id){var node=document.getElementById(idFromReference(id)||id);return SVG.adopt(node);};// Select elements by query string
SVG.select=function(query,parent){return new SVG.Set(SVG.utils.map((parent||document).querySelectorAll(query),function(node){return SVG.adopt(node);}));};SVG.extend(SVG.Parent,{// Scoped select method
select:function select(query){return SVG.select(query,this.node);}});function pathRegReplace(a,b,c,d){return c+d.replace(SVG.regex.dots,' .');}// creates deep clone of array
function _is(el,obj){return el instanceof obj;}// tests if a given selector matches an element
function _matches(el,selector){return(el.matches||el.matchesSelector||el.msMatchesSelector||el.mozMatchesSelector||el.webkitMatchesSelector||el.oMatchesSelector).call(el,selector);}// Convert dash-separated-string to camelCase
function camelCase(s){return s.toLowerCase().replace(/-(.)/g,function(m,g){return g.toUpperCase();});}// Capitalize first letter of a string
function capitalize(s){return s.charAt(0).toUpperCase()+s.slice(1);}// Ensure to six-based hex
function fullHex(hex){return hex.length==4?['#',hex.substring(1,2),hex.substring(1,2),hex.substring(2,3),hex.substring(2,3),hex.substring(3,4),hex.substring(3,4)].join(''):hex;}// Component to hex value
function compToHex(comp){var hex=comp.toString(16);return hex.length==1?'0'+hex:hex;}// Calculate proportional width and height values when necessary
function proportionalSize(element,width,height){if(width==null||height==null){var box=element.bbox();if(width==null){width=box.width/box.height*height;}else if(height==null){height=box.height/box.width*width;}}return{width:width,height:height};}// Delta transform point
function deltaTransformPoint(matrix,x,y){return{x:x*matrix.a+y*matrix.c+0,y:x*matrix.b+y*matrix.d+0};}// Map matrix array to object
function arrayToMatrix(a){return{a:a[0],b:a[1],c:a[2],d:a[3],e:a[4],f:a[5]};}// Parse matrix if required
function parseMatrix(matrix){if(!(matrix instanceof SVG.Matrix)){matrix=new SVG.Matrix(matrix);}return matrix;}// Add centre point to transform object
function arrayToString(a){for(var i=0,il=a.length,s='';i<il;i++){s+=a[i][0];if(a[i][1]!=null){s+=a[i][1];if(a[i][2]!=null){s+=' ';s+=a[i][2];if(a[i][3]!=null){s+=' ';s+=a[i][3];s+=' ';s+=a[i][4];if(a[i][5]!=null){s+=' ';s+=a[i][5];s+=' ';s+=a[i][6];if(a[i][7]!=null){s+=' ';s+=a[i][7];}}}}}}return s+' ';}// Deep new id assignment
function assignNewId(node){// do the same for SVG child nodes as well
for(var i=node.childNodes.length-1;i>=0;i--){if(node.childNodes[i]instanceof window.SVGElement){assignNewId(node.childNodes[i]);}}return SVG.adopt(node).id(SVG.eid(node.nodeName));}// Add more bounding box properties
function fullBox(b){if(b.x==null){b.x=0;b.y=0;b.width=0;b.height=0;}b.w=b.width;b.h=b.height;b.x2=b.x+b.width;b.y2=b.y+b.height;b.cx=b.x+b.width/2;b.cy=b.y+b.height/2;return b;}// Get id from reference string
function idFromReference(url){var m=(url||'').toString().match(SVG.regex.reference);if(m)return m[1];}// If values like 1e-88 are passed, this is not a valid 32 bit float,
// but in those cases, we are so close to 0 that 0 works well!
function float32String(v){return Math.abs(v)>1e-37?v:0;}// Create matrix array for looping
var abcdef='abcdef'.split('');// Add CustomEvent to IE9 and IE10
if(typeof window.CustomEvent!=='function'){// Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent
var CustomEventPoly=function CustomEventPoly(event,options){options=options||{bubbles:false,cancelable:false,detail:undefined};var e=document.createEvent('CustomEvent');e.initCustomEvent(event,options.bubbles,options.cancelable,options.detail);return e;};CustomEventPoly.prototype=window.Event.prototype;SVG.CustomEvent=CustomEventPoly;}else{SVG.CustomEvent=window.CustomEvent;}return SVG;});/*! svg.filter.js - v2.0.2 - 2016-02-24
  * https://github.com/wout/svg.filter.js
  * Copyright (c) 2016 Wout Fierens; Licensed MIT */(function(){// Main filter class
SVG.Filter=SVG.invent({create:'filter',inherit:SVG.Parent,extend:{// Static strings
source:'SourceGraphic',sourceAlpha:'SourceAlpha',background:'BackgroundImage',backgroundAlpha:'BackgroundAlpha',fill:'FillPaint',stroke:'StrokePaint',autoSetIn:true,// Custom put method for leaner code
put:function put(element,i){this.add(element,i);if(!element.attr('in')&&this.autoSetIn){element.attr('in',this.source);}if(!element.attr('result')){element.attr('result',element);}return element;},// Blend effect
blend:function blend(in1,in2,mode){return this.put(new SVG.BlendEffect(in1,in2,mode));},// ColorMatrix effect
colorMatrix:function colorMatrix(type,values){return this.put(new SVG.ColorMatrixEffect(type,values));},// ConvolveMatrix effect
convolveMatrix:function convolveMatrix(matrix){return this.put(new SVG.ConvolveMatrixEffect(matrix));},// ComponentTransfer effect
componentTransfer:function componentTransfer(components){return this.put(new SVG.ComponentTransferEffect(components));},// Composite effect
composite:function composite(in1,in2,operator){return this.put(new SVG.CompositeEffect(in1,in2,operator));},// Flood effect
flood:function flood(color,opacity){return this.put(new SVG.FloodEffect(color,opacity));},// Offset effect
offset:function offset(x,y){return this.put(new SVG.OffsetEffect(x,y));},// Image effect
image:function image(src){return this.put(new SVG.ImageEffect(src));},// Merge effect
merge:function merge(){//pass the array of arguments to the constructor because we dont know if the user gave us an array as the first arguemnt or wether they listed the effects in the arguments
var args=[undefined];for(var i in arguments){args.push(arguments[i]);}return this.put(new(SVG.MergeEffect.bind.apply(SVG.MergeEffect,args))());},// Gaussian Blur effect
gaussianBlur:function gaussianBlur(x,y){return this.put(new SVG.GaussianBlurEffect(x,y));},// Morphology effect
morphology:function morphology(operator,radius){return this.put(new SVG.MorphologyEffect(operator,radius));},// DiffuseLighting effect
diffuseLighting:function diffuseLighting(surfaceScale,diffuseConstant,kernelUnitLength){return this.put(new SVG.DiffuseLightingEffect(surfaceScale,diffuseConstant,kernelUnitLength));},// DisplacementMap effect
displacementMap:function displacementMap(in1,in2,scale,xChannelSelector,yChannelSelector){return this.put(new SVG.DisplacementMapEffect(in1,in2,scale,xChannelSelector,yChannelSelector));},// SpecularLighting effect
specularLighting:function specularLighting(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength){return this.put(new SVG.SpecularLightingEffect(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength));},// Tile effect
tile:function tile(){return this.put(new SVG.TileEffect());},// Turbulence effect
turbulence:function turbulence(baseFrequency,numOctaves,seed,stitchTiles,type){return this.put(new SVG.TurbulenceEffect(baseFrequency,numOctaves,seed,stitchTiles,type));},// Default string value
toString:function toString(){return'url(#'+this.attr('id')+')';}}});//add .filter function
SVG.extend(SVG.Defs,{// Define filter
filter:function filter(block){var filter=this.put(new SVG.Filter());/* invoke passed block */if(typeof block==='function')block.call(filter,filter);return filter;}});SVG.extend(SVG.Container,{// Define filter on defs
filter:function filter(block){return this.defs().filter(block);}});SVG.extend(SVG.Element,SVG.G,SVG.Nested,{// Create filter element in defs and store reference
filter:function filter(block){this.filterer=block instanceof SVG.Element?block:this.doc().filter(block);if(this.doc()&&this.filterer.doc()!==this.doc()){this.doc().defs().add(this.filterer);}this.attr('filter',this.filterer);return this.filterer;},// Remove filter
unfilter:function unfilter(remove){/* also remove the filter node */if(this.filterer&&remove===true)this.filterer.remove();/* delete reference to filterer */delete this.filterer;/* remove filter attribute */return this.attr('filter',null);}});// Create SVG.Effect class
SVG.Effect=SVG.invent({create:function create(){this.constructor.call(this);},inherit:SVG.Element,extend:{// Set in attribute
"in":function _in(effect){return effect==null?this.parent()&&this.parent().select('[result="'+this.attr('in')+'"]').get(0)||this.attr('in'):this.attr('in',effect);},// Named result
result:function result(_result){return _result==null?this.attr('result'):this.attr('result',_result);},// Stringification
toString:function toString(){return this.result();}}});// create class for parent effects like merge
// Inherit from SVG.Parent
SVG.ParentEffect=SVG.invent({create:function create(){this.constructor.call(this);},inherit:SVG.Parent,extend:{// Set in attribute
"in":function _in(effect){return effect==null?this.parent()&&this.parent().select('[result="'+this.attr('in')+'"]').get(0)||this.attr('in'):this.attr('in',effect);},// Named result
result:function result(_result2){return _result2==null?this.attr('result'):this.attr('result',_result2);},// Stringification
toString:function toString(){return this.result();}}});//chaining
var chainingEffects={// Blend effect
blend:function blend(in2,mode){return this.parent()&&this.parent().blend(this,in2,mode);//pass this as the first input
},// ColorMatrix effect
colorMatrix:function colorMatrix(type,values){return this.parent()&&this.parent().colorMatrix(type,values)["in"](this);},// ConvolveMatrix effect
convolveMatrix:function convolveMatrix(matrix){return this.parent()&&this.parent().convolveMatrix(matrix)["in"](this);},// ComponentTransfer effect
componentTransfer:function componentTransfer(components){return this.parent()&&this.parent().componentTransfer(components)["in"](this);},// Composite effect
composite:function composite(in2,operator){return this.parent()&&this.parent().composite(this,in2,operator);//pass this as the first input
},// Flood effect
flood:function flood(color,opacity){return this.parent()&&this.parent().flood(color,opacity);//this effect dont have inputs
},// Offset effect
offset:function offset(x,y){return this.parent()&&this.parent().offset(x,y)["in"](this);},// Image effect
image:function image(src){return this.parent()&&this.parent().image(src);//this effect dont have inputs
},// Merge effect
merge:function merge(){return this.parent()&&this.parent().merge.apply(this.parent(),[this].concat(arguments));//pass this as the first argument
},// Gaussian Blur effect
gaussianBlur:function gaussianBlur(x,y){return this.parent()&&this.parent().gaussianBlur(x,y)["in"](this);},// Morphology effect
morphology:function morphology(operator,radius){return this.parent()&&this.parent().morphology(operator,radius)["in"](this);},// DiffuseLighting effect
diffuseLighting:function diffuseLighting(surfaceScale,diffuseConstant,kernelUnitLength){return this.parent()&&this.parent().diffuseLighting(surfaceScale,diffuseConstant,kernelUnitLength)["in"](this);},// DisplacementMap effect
displacementMap:function displacementMap(in2,scale,xChannelSelector,yChannelSelector){return this.parent()&&this.parent().displacementMap(this,in2,scale,xChannelSelector,yChannelSelector);//pass this as the first input
},// SpecularLighting effect
specularLighting:function specularLighting(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength){return this.parent()&&this.parent().specularLighting(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength)["in"](this);},// Tile effect
tile:function tile(){return this.parent()&&this.parent().tile()["in"](this);},// Turbulence effect
turbulence:function turbulence(baseFrequency,numOctaves,seed,stitchTiles,type){return this.parent()&&this.parent().turbulence(baseFrequency,numOctaves,seed,stitchTiles,type)["in"](this);}};SVG.extend(SVG.Effect,chainingEffects);SVG.extend(SVG.ParentEffect,chainingEffects);//crea class for child effects, like MergeNode, FuncR and lights
SVG.ChildEffect=SVG.invent({create:function create(){this.constructor.call(this);},inherit:SVG.Element,extend:{"in":function _in(effect){this.attr('in',effect);}//dont include any "result" functions because these types of nodes dont have them
}});// Create all different effects
var effects={blend:function blend(in1,in2,mode){this.attr({"in":in1,in2:in2,mode:mode||'normal'});},colorMatrix:function colorMatrix(type,values){if(type=='matrix')values=normaliseMatrix(values);this.attr({type:type,values:typeof values=='undefined'?null:values});},convolveMatrix:function convolveMatrix(matrix){matrix=normaliseMatrix(matrix);this.attr({order:Math.sqrt(matrix.split(' ').length),kernelMatrix:matrix});},composite:function composite(in1,in2,operator){this.attr({"in":in1,in2:in2,operator:operator});},flood:function flood(color,opacity){this.attr('flood-color',color);if(opacity!=null)this.attr('flood-opacity',opacity);},offset:function offset(x,y){this.attr({dx:x,dy:y});},image:function image(src){this.attr('href',src,SVG.xlink);},displacementMap:function displacementMap(in1,in2,scale,xChannelSelector,yChannelSelector){this.attr({"in":in1,in2:in2,scale:scale,xChannelSelector:xChannelSelector,yChannelSelector:yChannelSelector});},gaussianBlur:function gaussianBlur(x,y){if(x!=null||y!=null)this.attr('stdDeviation',listString(Array.prototype.slice.call(arguments)));else this.attr('stdDeviation','0 0');},morphology:function morphology(operator,radius){this.attr({operator:operator,radius:radius});},tile:function tile(){},turbulence:function turbulence(baseFrequency,numOctaves,seed,stitchTiles,type){this.attr({numOctaves:numOctaves,seed:seed,stitchTiles:stitchTiles,baseFrequency:baseFrequency,type:type});}};// Create all parent effects
var parentEffects={merge:function merge(){var children;//test to see if we have a set
if(arguments[0]instanceof SVG.Set){var that=this;arguments[0].each(function(i){if(this instanceof SVG.MergeNode)that.put(this);else if(this instanceof SVG.Effect||this instanceof SVG.ParentEffect)that.put(new SVG.MergeNode(this));});}else{//if the first argument is an array use it
if(Array.isArray(arguments[0]))children=arguments[0];else children=arguments;for(var i=0;i<children.length;i++){if(children[i]instanceof SVG.MergeNode){this.put(children[i]);}else this.put(new SVG.MergeNode(children[i]));}}},componentTransfer:function componentTransfer(compontents){/* create rgb set */this.rgb=new SVG.Set()/* create components */;['r','g','b','a'].forEach(function(c){/* create component */this[c]=new SVG['Func'+c.toUpperCase()]('identity');/* store component in set */this.rgb.add(this[c]);/* add component node */this.node.appendChild(this[c].node);}.bind(this));//lost context in foreach
/* set components */if(compontents){if(compontents.rgb){['r','g','b'].forEach(function(c){this[c].attr(compontents.rgb);}.bind(this));delete compontents.rgb;}/* set individual components */for(var c in compontents){this[c].attr(compontents[c]);}}},diffuseLighting:function diffuseLighting(surfaceScale,diffuseConstant,kernelUnitLength){this.attr({surfaceScale:surfaceScale,diffuseConstant:diffuseConstant,kernelUnitLength:kernelUnitLength});},specularLighting:function specularLighting(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength){this.attr({surfaceScale:surfaceScale,diffuseConstant:diffuseConstant,specularExponent:specularExponent,kernelUnitLength:kernelUnitLength});}};// Create child effects like PointLight and MergeNode
var childEffects={distantLight:function distantLight(azimuth,elevation){this.attr({azimuth:azimuth,elevation:elevation});},pointLight:function pointLight(x,y,z){this.attr({x:x,y:y,z:z});},spotLight:function spotLight(x,y,z,pointsAtX,pointsAtY,pointsAtZ){this.attr({x:x,y:y,z:z,pointsAtX:pointsAtX,pointsAtY:pointsAtY,pointsAtZ:pointsAtZ});},mergeNode:function mergeNode(in1){this.attr('in',in1);}}// Create compontent functions
;['r','g','b','a'].forEach(function(c){/* create class */childEffects['Func'+c.toUpperCase()]=function(type){this.attr('type',type);// take diffent arguments based on the type
switch(type){case'table':this.attr('tableValues',arguments[1]);break;case'linear':this.attr('slope',arguments[1]);this.attr('intercept',arguments[2]);break;case'gamma':this.attr('amplitude',arguments[1]);this.attr('exponent',arguments[2]);this.attr('offset',arguments[2]);break;}};});//create effects
foreach(effects,function(effect,i){/* capitalize name */var name=i.charAt(0).toUpperCase()+i.slice(1);var proto={};/* create class */SVG[name+'Effect']=SVG.invent({create:function create(){//call super
this.constructor.call(this,SVG.create('fe'+name));//call constructor for this effect
effect.apply(this,arguments);//set the result
this.result(this.attr('id')+'Out');},inherit:SVG.Effect,extend:proto});});//create parent effects
foreach(parentEffects,function(effect,i){/* capitalize name */var name=i.charAt(0).toUpperCase()+i.slice(1);var proto={};/* create class */SVG[name+'Effect']=SVG.invent({create:function create(){//call super
this.constructor.call(this,SVG.create('fe'+name));//call constructor for this effect
effect.apply(this,arguments);//set the result
this.result(this.attr('id')+'Out');},inherit:SVG.ParentEffect,extend:proto});});//create child effects
foreach(childEffects,function(effect,i){/* capitalize name */var name=i.charAt(0).toUpperCase()+i.slice(1);var proto={};/* create class */SVG[name]=SVG.invent({create:function create(){//call super
this.constructor.call(this,SVG.create('fe'+name));//call constructor for this effect
effect.apply(this,arguments);},inherit:SVG.ChildEffect,extend:proto});});// Effect-specific extensions
SVG.extend(SVG.MergeEffect,{"in":function _in(effect){if(effect instanceof SVG.MergeNode)this.add(effect,0);else this.add(new SVG.MergeNode(effect),0);return this;}});SVG.extend(SVG.CompositeEffect,SVG.BlendEffect,SVG.DisplacementMapEffect,{in2:function in2(effect){return effect==null?this.parent()&&this.parent().select('[result="'+this.attr('in2')+'"]').get(0)||this.attr('in2'):this.attr('in2',effect);}});// Presets
SVG.filter={sepiatone:[.343,.669,.119,0,0,.249,.626,.130,0,0,.172,.334,.111,0,0,.000,.000,.000,1,0]};// Helpers
function normaliseMatrix(matrix){/* convert possible array value to string */if(Array.isArray(matrix))matrix=new SVG.Array(matrix);/* ensure there are no leading, tailing or double spaces */return matrix.toString().replace(/^\s+/,'').replace(/\s+$/,'').replace(/\s+/g,' ');}function listString(list){if(!Array.isArray(list))return list;for(var i=0,l=list.length,s=[];i<l;i++){s.push(list[i]);}return s.join(' ');}function foreach(){//loops through mutiple objects
var fn=function fn(){};if(typeof arguments[arguments.length-1]=='function'){fn=arguments[arguments.length-1];Array.prototype.splice.call(arguments,arguments.length-1,1);}for(var k in arguments){for(var i in arguments[k]){fn(arguments[k][i],i,arguments[k]);}}}}).call(undefined);(function(){SVG.extend(SVG.PathArray,{morph:function morph(array){var startArr=this.value,destArr=this.parse(array);var startOffsetM=0,destOffsetM=0;var startOffsetNextM=false,destOffsetNextM=false;while(true){// stop if there is no M anymore
if(startOffsetM===false&&destOffsetM===false)break;// find the next M in path array
startOffsetNextM=findNextM(startArr,startOffsetM===false?false:startOffsetM+1);destOffsetNextM=findNextM(destArr,destOffsetM===false?false:destOffsetM+1);// We have to add one M to the startArray
if(startOffsetM===false){var bbox=new SVG.PathArray(result.start).bbox();// when the last block had no bounding box we simply take the first M we got
if(bbox.height==0||bbox.width==0){startOffsetM=startArr.push(startArr[0])-1;}else{// we take the middle of the bbox instead when we got one
startOffsetM=startArr.push(['M',bbox.x+bbox.width/2,bbox.y+bbox.height/2])-1;}}// We have to add one M to the destArray
if(destOffsetM===false){var bbox=new SVG.PathArray(result.dest).bbox();if(bbox.height==0||bbox.width==0){destOffsetM=destArr.push(destArr[0])-1;}else{destOffsetM=destArr.push(['M',bbox.x+bbox.width/2,bbox.y+bbox.height/2])-1;}}// handle block from M to next M
var result=handleBlock(startArr,startOffsetM,startOffsetNextM,destArr,destOffsetM,destOffsetNextM);// update the arrays to their new values
startArr=startArr.slice(0,startOffsetM).concat(result.start,startOffsetNextM===false?[]:startArr.slice(startOffsetNextM));destArr=destArr.slice(0,destOffsetM).concat(result.dest,destOffsetNextM===false?[]:destArr.slice(destOffsetNextM));// update offsets
startOffsetM=startOffsetNextM===false?false:startOffsetM+result.start.length;destOffsetM=destOffsetNextM===false?false:destOffsetM+result.dest.length;}// copy back arrays
this.value=startArr;this.destination=new SVG.PathArray();this.destination.value=destArr;return this;}});// sorry for the long declaration
// slices out one block (from M to M) and syncronize it so the types and length match
function handleBlock(startArr,startOffsetM,startOffsetNextM,destArr,destOffsetM,destOffsetNextM,undefined$1){// slice out the block we need
var startArrTemp=startArr.slice(startOffsetM,startOffsetNextM||undefined$1),destArrTemp=destArr.slice(destOffsetM,destOffsetNextM||undefined$1);var i=0,posStart={pos:[0,0],start:[0,0]},posDest={pos:[0,0],start:[0,0]};do{// convert shorthand types to long form
startArrTemp[i]=simplyfy.call(posStart,startArrTemp[i]);destArrTemp[i]=simplyfy.call(posDest,destArrTemp[i]);// check if both shape types match
// 2 elliptical arc curve commands ('A'), are considered different if the
// flags (large-arc-flag, sweep-flag) don't match
if(startArrTemp[i][0]!=destArrTemp[i][0]||startArrTemp[i][0]=='M'||startArrTemp[i][0]=='A'&&(startArrTemp[i][4]!=destArrTemp[i][4]||startArrTemp[i][5]!=destArrTemp[i][5])){// if not, convert shapes to beziere
Array.prototype.splice.apply(startArrTemp,[i,1].concat(toBeziere.call(posStart,startArrTemp[i])));Array.prototype.splice.apply(destArrTemp,[i,1].concat(toBeziere.call(posDest,destArrTemp[i])));}else{// only update positions otherwise
startArrTemp[i]=setPosAndReflection.call(posStart,startArrTemp[i]);destArrTemp[i]=setPosAndReflection.call(posDest,destArrTemp[i]);}// we are at the end at both arrays. stop here
if(++i==startArrTemp.length&&i==destArrTemp.length)break;// destArray is longer. Add one element
if(i==startArrTemp.length){startArrTemp.push(['C',posStart.pos[0],posStart.pos[1],posStart.pos[0],posStart.pos[1],posStart.pos[0],posStart.pos[1]]);}// startArr is longer. Add one element
if(i==destArrTemp.length){destArrTemp.push(['C',posDest.pos[0],posDest.pos[1],posDest.pos[0],posDest.pos[1],posDest.pos[0],posDest.pos[1]]);}}while(true);// return the updated block
return{start:startArrTemp,dest:destArrTemp};}// converts shorthand types to long form
function simplyfy(val){switch(val[0]){case'z':// shorthand line to start
case'Z':val[0]='L';val[1]=this.start[0];val[2]=this.start[1];break;case'H':// shorthand horizontal line
val[0]='L';val[2]=this.pos[1];break;case'V':// shorthand vertical line
val[0]='L';val[2]=val[1];val[1]=this.pos[0];break;case'T':// shorthand quadratic beziere
val[0]='Q';val[3]=val[1];val[4]=val[2];val[1]=this.reflection[1];val[2]=this.reflection[0];break;case'S':// shorthand cubic beziere
val[0]='C';val[6]=val[4];val[5]=val[3];val[4]=val[2];val[3]=val[1];val[2]=this.reflection[1];val[1]=this.reflection[0];break;}return val;}// updates reflection point and current position
function setPosAndReflection(val){var len=val.length;this.pos=[val[len-2],val[len-1]];if('SCQT'.indexOf(val[0])!=-1)this.reflection=[2*this.pos[0]-val[len-4],2*this.pos[1]-val[len-3]];return val;}// converts all types to cubic beziere
function toBeziere(val){var retVal=[val];switch(val[0]){case'M':// special handling for M
this.pos=this.start=[val[1],val[2]];return retVal;case'L':val[5]=val[3]=val[1];val[6]=val[4]=val[2];val[1]=this.pos[0];val[2]=this.pos[1];break;case'Q':val[6]=val[4];val[5]=val[3];val[4]=val[4]*1/3+val[2]*2/3;val[3]=val[3]*1/3+val[1]*2/3;val[2]=this.pos[1]*1/3+val[2]*2/3;val[1]=this.pos[0]*1/3+val[1]*2/3;break;case'A':retVal=arcToBeziere(this.pos,val);val=retVal[0];break;}val[0]='C';this.pos=[val[5],val[6]];this.reflection=[2*val[5]-val[3],2*val[6]-val[4]];return retVal;}// finds the next position of type M
function findNextM(arr,offset){if(offset===false)return false;for(var i=offset,len=arr.length;i<len;++i){if(arr[i][0]=='M')return i;}return false;}// Convert an arc segment into equivalent cubic Bezier curves
// Depending on the arc, up to 4 curves might be used to represent it since a
// curve gives a good approximation for only a quarter of an ellipse
// The curves are returned as an array of SVG curve commands:
// [ ['C', x1, y1, x2, y2, x, y] ... ]
function arcToBeziere(pos,val){// Parameters extraction, handle out-of-range parameters as specified in the SVG spec
// See: https://www.w3.org/TR/SVG11/implnote.html#ArcOutOfRangeParameters
var rx=Math.abs(val[1]),ry=Math.abs(val[2]),xAxisRotation=val[3]%360,largeArcFlag=val[4],sweepFlag=val[5],x=val[6],y=val[7],A=new SVG.Point(pos),B=new SVG.Point(x,y),primedCoord,lambda,mat,k,c,cSquare,t,O,OA,OB,tetaStart,tetaEnd,deltaTeta,nbSectors,f,arcSegPoints,angle,sinAngle,cosAngle,pt,i,il,retVal=[],x1,y1,x2,y2;// Ensure radii are non-zero
if(rx===0||ry===0||A.x===B.x&&A.y===B.y){// treat this arc as a straight line segment
return[['C',A.x,A.y,B.x,B.y,B.x,B.y]];}// Ensure radii are large enough using the algorithm provided in the SVG spec
// See: https://www.w3.org/TR/SVG11/implnote.html#ArcCorrectionOutOfRangeRadii
primedCoord=new SVG.Point((A.x-B.x)/2,(A.y-B.y)/2).transform(new SVG.Matrix().rotate(xAxisRotation));lambda=primedCoord.x*primedCoord.x/(rx*rx)+primedCoord.y*primedCoord.y/(ry*ry);if(lambda>1){lambda=Math.sqrt(lambda);rx=lambda*rx;ry=lambda*ry;}// To simplify calculations, we make the arc part of a unit circle (rayon is 1) instead of an ellipse
mat=new SVG.Matrix().rotate(xAxisRotation).scale(1/rx,1/ry).rotate(-xAxisRotation);A=A.transform(mat);B=B.transform(mat);// Calculate the horizontal and vertical distance between the initial and final point of the arc
k=[B.x-A.x,B.y-A.y];// Find the length of the chord formed by A and B
cSquare=k[0]*k[0]+k[1]*k[1];c=Math.sqrt(cSquare);// Calculate the ratios of the horizontal and vertical distance on the length of the chord
k[0]/=c;k[1]/=c;// Calculate the distance between the circle center and the chord midpoint
// using this formula: t = sqrt(r^2 - c^2 / 4)
// where t is the distance between the cirle center and the chord midpoint,
//       r is the rayon of the circle and c is the chord length
// From: http://www.ajdesigner.com/phpcircle/circle_segment_chord_t.php
// Because of the imprecision of floating point numbers, cSquare might end
// up being slightly above 4 which would result in a negative radicand
// To prevent that, a test is made before computing the square root
t=cSquare<4?Math.sqrt(1-cSquare/4):0;// For most situations, there are actually two different ellipses that
// satisfy the constraints imposed by the points A and B, the radii rx and ry,
// and the xAxisRotation
// When the flags largeArcFlag and sweepFlag are equal, it means that the
// second ellipse is used as a solution
// See: https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands
if(largeArcFlag===sweepFlag){t*=-1;}// Calculate the coordinates of the center of the circle from the midpoint of the chord
// This is done by multiplying the ratios calculated previously by the distance between
// the circle center and the chord midpoint and using these values to go from the midpoint
// to the center of the circle
// The negative of the vertical distance ratio is used to modify the x coordinate while
// the horizontal distance ratio is used to modify the y coordinate
// That is because the center of the circle is perpendicular to the chord and perpendicular
// lines are negative reciprocals
O=new SVG.Point((B.x+A.x)/2+t*-k[1],(B.y+A.y)/2+t*k[0]);// Move the center of the circle at the origin
OA=new SVG.Point(A.x-O.x,A.y-O.y);OB=new SVG.Point(B.x-O.x,B.y-O.y);// Calculate the start and end angle
tetaStart=Math.acos(OA.x/Math.sqrt(OA.x*OA.x+OA.y*OA.y));if(OA.y<0){tetaStart*=-1;}tetaEnd=Math.acos(OB.x/Math.sqrt(OB.x*OB.x+OB.y*OB.y));if(OB.y<0){tetaEnd*=-1;}// If sweep-flag is '1', then the arc will be drawn in a "positive-angle" direction,
// make sure that the end angle is above the start angle
if(sweepFlag&&tetaStart>tetaEnd){tetaEnd+=2*Math.PI;}// If sweep-flag is '0', then the arc will be drawn in a "negative-angle" direction,
// make sure that the end angle is below the start angle
if(!sweepFlag&&tetaStart<tetaEnd){tetaEnd-=2*Math.PI;}// Find the number of Bezier curves that are required to represent the arc
// A cubic Bezier curve gives a good enough approximation when representing at most a quarter of a circle
nbSectors=Math.ceil(Math.abs(tetaStart-tetaEnd)*2/Math.PI);// Calculate the coordinates of the points of all the Bezier curves required to represent the arc
// For an in-depth explanation of this part see: http://pomax.github.io/bezierinfo/#circles_cubic
arcSegPoints=[];angle=tetaStart;deltaTeta=(tetaEnd-tetaStart)/nbSectors;f=4*Math.tan(deltaTeta/4)/3;for(i=0;i<=nbSectors;i++){// The <= is because a Bezier curve have a start and a endpoint
cosAngle=Math.cos(angle);sinAngle=Math.sin(angle);pt=new SVG.Point(O.x+cosAngle,O.y+sinAngle);arcSegPoints[i]=[new SVG.Point(pt.x+f*sinAngle,pt.y-f*cosAngle),pt,new SVG.Point(pt.x-f*sinAngle,pt.y+f*cosAngle)];angle+=deltaTeta;}// Remove the first control point of the first segment point and remove the second control point of the last segment point
// These two control points are not used in the approximation of the arc, that is why they are removed
arcSegPoints[0][0]=arcSegPoints[0][1].clone();arcSegPoints[arcSegPoints.length-1][2]=arcSegPoints[arcSegPoints.length-1][1].clone();// Revert the transformation that was applied to make the arc part of a unit circle instead of an ellipse
mat=new SVG.Matrix().rotate(xAxisRotation).scale(rx,ry).rotate(-xAxisRotation);for(i=0,il=arcSegPoints.length;i<il;i++){arcSegPoints[i][0]=arcSegPoints[i][0].transform(mat);arcSegPoints[i][1]=arcSegPoints[i][1].transform(mat);arcSegPoints[i][2]=arcSegPoints[i][2].transform(mat);}// Convert the segments points to SVG curve commands
for(i=1,il=arcSegPoints.length;i<il;i++){pt=arcSegPoints[i-1][2];x1=pt.x;y1=pt.y;pt=arcSegPoints[i][0];x2=pt.x;y2=pt.y;pt=arcSegPoints[i][1];x=pt.x;y=pt.y;retVal.push(['C',x1,y1,x2,y2,x,y]);}return retVal;}})();/*! svg.draggable.js - v2.2.2 - 2019-01-08
  * https://github.com/svgdotjs/svg.draggable.js
  * Copyright (c) 2019 Wout Fierens; Licensed MIT */(function(){// creates handler, saves it
function DragHandler(el){el.remember('_draggable',this);this.el=el;}// Sets new parameter, starts dragging
DragHandler.prototype.init=function(constraint,val){var _this=this;this.constraint=constraint;this.value=val;this.el.on('mousedown.drag',function(e){_this.start(e);});this.el.on('touchstart.drag',function(e){_this.start(e);});};// transforms one point from screen to user coords
DragHandler.prototype.transformPoint=function(event,offset){event=event||window.event;var touches=event.changedTouches&&event.changedTouches[0]||event;this.p.x=touches.clientX-(offset||0);this.p.y=touches.clientY;return this.p.matrixTransform(this.m);};// gets elements bounding box with special handling of groups, nested and use
DragHandler.prototype.getBBox=function(){var box=this.el.bbox();if(this.el instanceof SVG.Nested)box=this.el.rbox();if(this.el instanceof SVG.G||this.el instanceof SVG.Use||this.el instanceof SVG.Nested){box.x=this.el.x();box.y=this.el.y();}return box;};// start dragging
DragHandler.prototype.start=function(e){// check for left button
if(e.type=='click'||e.type=='mousedown'||e.type=='mousemove'){if((e.which||e.buttons)!=1){return;}}var _this=this;// fire beforedrag event
this.el.fire('beforedrag',{event:e,handler:this});if(this.el.event().defaultPrevented)return;// prevent browser drag behavior as soon as possible
e.preventDefault();// prevent propagation to a parent that might also have dragging enabled
e.stopPropagation();// search for parent on the fly to make sure we can call
// draggable() even when element is not in the dom currently
this.parent=this.parent||this.el.parent(SVG.Nested)||this.el.parent(SVG.Doc);this.p=this.parent.node.createSVGPoint();// save current transformation matrix
this.m=this.el.node.getScreenCTM().inverse();var box=this.getBBox();var anchorOffset;// fix text-anchor in text-element (#37)
if(this.el instanceof SVG.Text){anchorOffset=this.el.node.getComputedTextLength();switch(this.el.attr('text-anchor')){case'middle':anchorOffset/=2;break;case'start':anchorOffset=0;break;}}this.startPoints={// We take absolute coordinates since we are just using a delta here
point:this.transformPoint(e,anchorOffset),box:box,transform:this.el.transform()};// add drag and end events to window
SVG.on(window,'mousemove.drag',function(e){_this.drag(e);});SVG.on(window,'touchmove.drag',function(e){_this.drag(e);});SVG.on(window,'mouseup.drag',function(e){_this.end(e);});SVG.on(window,'touchend.drag',function(e){_this.end(e);});// fire dragstart event
this.el.fire('dragstart',{event:e,p:this.startPoints.point,m:this.m,handler:this});};// while dragging
DragHandler.prototype.drag=function(e){var box=this.getBBox(),p=this.transformPoint(e),x=this.startPoints.box.x+p.x-this.startPoints.point.x,y=this.startPoints.box.y+p.y-this.startPoints.point.y,c=this.constraint,gx=p.x-this.startPoints.point.x,gy=p.y-this.startPoints.point.y;this.el.fire('dragmove',{event:e,p:p,m:this.m,handler:this});if(this.el.event().defaultPrevented)return p;// move the element to its new position, if possible by constraint
if(typeof c=='function'){var coord=c.call(this.el,x,y,this.m);// bool, just show us if movement is allowed or not
if(typeof coord=='boolean'){coord={x:coord,y:coord};}// if true, we just move. If !false its a number and we move it there
if(coord.x===true){this.el.x(x);}else if(coord.x!==false){this.el.x(coord.x);}if(coord.y===true){this.el.y(y);}else if(coord.y!==false){this.el.y(coord.y);}}else if(typeof c=='object'){// keep element within constrained box
if(c.minX!=null&&x<c.minX){x=c.minX;gx=x-this.startPoints.box.x;}else if(c.maxX!=null&&x>c.maxX-box.width){x=c.maxX-box.width;gx=x-this.startPoints.box.x;}if(c.minY!=null&&y<c.minY){y=c.minY;gy=y-this.startPoints.box.y;}else if(c.maxY!=null&&y>c.maxY-box.height){y=c.maxY-box.height;gy=y-this.startPoints.box.y;}if(c.snapToGrid!=null){x=x-x%c.snapToGrid;y=y-y%c.snapToGrid;gx=gx-gx%c.snapToGrid;gy=gy-gy%c.snapToGrid;}if(this.el instanceof SVG.G)this.el.matrix(this.startPoints.transform).transform({x:gx,y:gy},true);else this.el.move(x,y);}// so we can use it in the end-method, too
return p;};DragHandler.prototype.end=function(e){// final drag
var p=this.drag(e);// fire dragend event
this.el.fire('dragend',{event:e,p:p,m:this.m,handler:this});// unbind events
SVG.off(window,'mousemove.drag');SVG.off(window,'touchmove.drag');SVG.off(window,'mouseup.drag');SVG.off(window,'touchend.drag');};SVG.extend(SVG.Element,{// Make element draggable
// Constraint might be an object (as described in readme.md) or a function in the form "function (x, y)" that gets called before every move.
// The function can return a boolean or an object of the form {x, y}, to which the element will be moved. "False" skips moving, true moves to raw x, y.
draggable:function draggable(value,constraint){// Check the parameters and reassign if needed
if(typeof value=='function'||typeof value=='object'){constraint=value;value=true;}var dragHandler=this.remember('_draggable')||new DragHandler(this);// When no parameter is given, value is true
value=typeof value==='undefined'?true:value;if(value)dragHandler.init(constraint||{},value);else{this.off('mousedown.drag');this.off('touchstart.drag');}return this;}});}).call(undefined);(function(){function SelectHandler(el){this.el=el;el.remember('_selectHandler',this);this.pointSelection={isSelected:false};this.rectSelection={isSelected:false};// helper list with position settings of each type of point
this.pointsList={lt:[0,0],rt:['width',0],rb:['width','height'],lb:[0,'height'],t:['width',0],r:['width','height'],b:['width','height'],l:[0,'height']};// helper function to get point coordinates based on settings above and an object (bbox in our case)
this.pointCoord=function(setting,object,isPointCentered){var coord=typeof setting!=='string'?setting:object[setting];// Top, bottom, right and left points are placed in the center of element width/height
return isPointCentered?coord/2:coord;};this.pointCoords=function(point,object){var settings=this.pointsList[point];return{x:this.pointCoord(settings[0],object,point==='t'||point==='b'),y:this.pointCoord(settings[1],object,point==='r'||point==='l')};};}SelectHandler.prototype.init=function(value,options){var bbox=this.el.bbox();this.options={};// store defaults list of points in order to verify users config
var points=this.el.selectize.defaults.points;// Merging the defaults and the options-object together
for(var i in this.el.selectize.defaults){this.options[i]=this.el.selectize.defaults[i];if(options[i]!==undefined){this.options[i]=options[i];}}// prepare & validate list of points to be added (or excluded)
var pointsLists=['points','pointsExclude'];for(var i in pointsLists){var option=this.options[pointsLists[i]];if(typeof option==='string'){if(option.length>0){// if set as comma separated string list => convert it into an array
option=option.split(/\s*,\s*/i);}else{option=[];}}else if(typeof option==='boolean'&&pointsLists[i]==='points'){// this is not needed, but let's have it for legacy support
option=option?points:[];}this.options[pointsLists[i]]=option;}// intersect correct all points options with users config (exclude unwanted points)
// ES5 -> NO arrow functions nor Array.includes()
this.options.points=[points,this.options.points].reduce(function(a,b){return a.filter(function(c){return b.indexOf(c)>-1;});});// exclude pointsExclude, if wanted
this.options.points=[this.options.points,this.options.pointsExclude].reduce(function(a,b){return a.filter(function(c){return b.indexOf(c)<0;});});this.parent=this.el.parent();this.nested=this.nested||this.parent.group();this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x,bbox.y));// When deepSelect is enabled and the element is a line/polyline/polygon, draw only points for moving
if(this.options.deepSelect&&['line','polyline','polygon'].indexOf(this.el.type)!==-1){this.selectPoints(value);}else{this.selectRect(value);}this.observe();this.cleanup();};SelectHandler.prototype.selectPoints=function(value){this.pointSelection.isSelected=value;// When set is already there we dont have to create one
if(this.pointSelection.set){return this;}// Create our set of elements
this.pointSelection.set=this.parent.set();// draw the points and mark the element as selected
this.drawPoints();return this;};// create the point-array which contains the 2 points of a line or simply the points-array of polyline/polygon
SelectHandler.prototype.getPointArray=function(){var bbox=this.el.bbox();return this.el.array().valueOf().map(function(el){return[el[0]-bbox.x,el[1]-bbox.y];});};// Draws a points
SelectHandler.prototype.drawPoints=function(){var _this=this,array=this.getPointArray();// go through the array of points
for(var i=0,len=array.length;i<len;++i){var curriedEvent=function(k){return function(ev){ev=ev||window.event;ev.preventDefault?ev.preventDefault():ev.returnValue=false;ev.stopPropagation();var x=ev.pageX||ev.touches[0].pageX;var y=ev.pageY||ev.touches[0].pageY;_this.el.fire('point',{x:x,y:y,i:k,event:ev});};}(i);// add every point to the set
// add css-classes and a touchstart-event which fires our event for moving points
var point=this.drawPoint(array[i][0],array[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints+'_point').on('touchstart',curriedEvent).on('mousedown',curriedEvent);this.pointSelection.set.add(point);}};// The function to draw single point
SelectHandler.prototype.drawPoint=function(cx,cy){var pointType=this.options.pointType;switch(pointType){case'circle':return this.drawCircle(cx,cy);case'rect':return this.drawRect(cx,cy);default:if(typeof pointType==='function'){return pointType.call(this,cx,cy);}throw new Error('Unknown '+pointType+' point type!');}};// The function to draw the circle point
SelectHandler.prototype.drawCircle=function(cx,cy){return this.nested.circle(this.options.pointSize).center(cx,cy);};// The function to draw the rect point
SelectHandler.prototype.drawRect=function(cx,cy){return this.nested.rect(this.options.pointSize,this.options.pointSize).center(cx,cy);};// every time a point is moved, we have to update the positions of our point
SelectHandler.prototype.updatePointSelection=function(){var array=this.getPointArray();this.pointSelection.set.each(function(i){if(this.cx()===array[i][0]&&this.cy()===array[i][1]){return;}this.center(array[i][0],array[i][1]);});};SelectHandler.prototype.updateRectSelection=function(){var _this=this,bbox=this.el.bbox();this.rectSelection.set.get(0).attr({width:bbox.width,height:bbox.height});// set.get(1) is always in the upper left corner. no need to move it
if(this.options.points.length){this.options.points.map(function(point,index){var coords=_this.pointCoords(point,bbox);_this.rectSelection.set.get(index+1).center(coords.x,coords.y);});}if(this.options.rotationPoint){var length=this.rectSelection.set.length();this.rectSelection.set.get(length-1).center(bbox.width/2,20);}};SelectHandler.prototype.selectRect=function(value){var _this=this,bbox=this.el.bbox();this.rectSelection.isSelected=value;// when set is already p
this.rectSelection.set=this.rectSelection.set||this.parent.set();// helperFunction to create a mouse-down function which triggers the event specified in `eventName`
function getMoseDownFunc(eventName){return function(ev){ev=ev||window.event;ev.preventDefault?ev.preventDefault():ev.returnValue=false;ev.stopPropagation();var x=ev.pageX||ev.touches[0].pageX;var y=ev.pageY||ev.touches[0].pageY;_this.el.fire(eventName,{x:x,y:y,event:ev});};}// create the selection-rectangle and add the css-class
if(!this.rectSelection.set.get(0)){this.rectSelection.set.add(this.nested.rect(bbox.width,bbox.height).addClass(this.options.classRect));}// Draw Points at the edges, if enabled
if(this.options.points.length&&this.rectSelection.set.length()<2){var ename="touchstart",mname="mousedown";this.options.points.map(function(point,index){var coords=_this.pointCoords(point,bbox);var pointElement=_this.drawPoint(coords.x,coords.y).attr('class',_this.options.classPoints+'_'+point).on(mname,getMoseDownFunc(point)).on(ename,getMoseDownFunc(point));_this.rectSelection.set.add(pointElement);});this.rectSelection.set.each(function(){this.addClass(_this.options.classPoints);});}// draw rotationPint, if enabled
if(this.options.rotationPoint&&(this.options.points&&!this.rectSelection.set.get(9)||!this.options.points&&!this.rectSelection.set.get(1))){var curriedEvent=function curriedEvent(ev){ev=ev||window.event;ev.preventDefault?ev.preventDefault():ev.returnValue=false;ev.stopPropagation();var x=ev.pageX||ev.touches[0].pageX;var y=ev.pageY||ev.touches[0].pageY;_this.el.fire('rot',{x:x,y:y,event:ev});};var pointElement=this.drawPoint(bbox.width/2,20).attr('class',this.options.classPoints+'_rot').on("touchstart",curriedEvent).on("mousedown",curriedEvent);this.rectSelection.set.add(pointElement);}};SelectHandler.prototype.handler=function(){var bbox=this.el.bbox();this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x,bbox.y));if(this.rectSelection.isSelected){this.updateRectSelection();}if(this.pointSelection.isSelected){this.updatePointSelection();}};SelectHandler.prototype.observe=function(){var _this=this;if(MutationObserver){if(this.rectSelection.isSelected||this.pointSelection.isSelected){this.observerInst=this.observerInst||new MutationObserver(function(){_this.handler();});this.observerInst.observe(this.el.node,{attributes:true});}else{try{this.observerInst.disconnect();delete this.observerInst;}catch(e){}}}else{this.el.off('DOMAttrModified.select');if(this.rectSelection.isSelected||this.pointSelection.isSelected){this.el.on('DOMAttrModified.select',function(){_this.handler();});}}};SelectHandler.prototype.cleanup=function(){//var _this = this;
if(!this.rectSelection.isSelected&&this.rectSelection.set){// stop watching the element, remove the selection
this.rectSelection.set.each(function(){this.remove();});this.rectSelection.set.clear();delete this.rectSelection.set;}if(!this.pointSelection.isSelected&&this.pointSelection.set){// Remove all points, clear the set, stop watching the element
this.pointSelection.set.each(function(){this.remove();});this.pointSelection.set.clear();delete this.pointSelection.set;}if(!this.pointSelection.isSelected&&!this.rectSelection.isSelected){this.nested.remove();delete this.nested;}};SVG.extend(SVG.Element,{// Select element with mouse
selectize:function selectize(value,options){// Check the parameters and reassign if needed
if(typeof value==='object'){options=value;value=true;}var selectHandler=this.remember('_selectHandler')||new SelectHandler(this);selectHandler.init(value===undefined?true:value,options||{});return this;}});SVG.Element.prototype.selectize.defaults={points:['lt','rt','rb','lb','t','r','b','l'],// which points to draw, default all
pointsExclude:[],// easier option if to exclude few than rewrite all
classRect:'svg_select_boundingRect',// Css-class added to the rect
classPoints:'svg_select_points',// Css-class added to the points
pointSize:7,// size of point
rotationPoint:true,// If true, rotation point is drawn. Needed for rotation!
deepSelect:false,// If true, moving of single points is possible (only line, polyline, polyon)
pointType:'circle'// Point type: circle or rect, default circle
};})();(function(){(function(){function ResizeHandler(el){el.remember('_resizeHandler',this);this.el=el;this.parameters={};this.lastUpdateCall=null;this.p=el.doc().node.createSVGPoint();}ResizeHandler.prototype.transformPoint=function(x,y,m){this.p.x=x-(this.offset.x-window.pageXOffset);this.p.y=y-(this.offset.y-window.pageYOffset);return this.p.matrixTransform(m||this.m);};ResizeHandler.prototype._extractPosition=function(event){// Extract a position from a mouse/touch event.
// Returns { x: .., y: .. }
return{x:event.clientX!=null?event.clientX:event.touches[0].clientX,y:event.clientY!=null?event.clientY:event.touches[0].clientY};};ResizeHandler.prototype.init=function(options){var _this=this;this.stop();if(options==='stop'){return;}this.options={};// Merge options and defaults
for(var i in this.el.resize.defaults){this.options[i]=this.el.resize.defaults[i];if(typeof options[i]!=='undefined'){this.options[i]=options[i];}}// We listen to all these events which are specifying different edges
this.el.on('lt.resize',function(e){_this.resize(e||window.event);});// Left-Top
this.el.on('rt.resize',function(e){_this.resize(e||window.event);});// Right-Top
this.el.on('rb.resize',function(e){_this.resize(e||window.event);});// Right-Bottom
this.el.on('lb.resize',function(e){_this.resize(e||window.event);});// Left-Bottom
this.el.on('t.resize',function(e){_this.resize(e||window.event);});// Top
this.el.on('r.resize',function(e){_this.resize(e||window.event);});// Right
this.el.on('b.resize',function(e){_this.resize(e||window.event);});// Bottom
this.el.on('l.resize',function(e){_this.resize(e||window.event);});// Left
this.el.on('rot.resize',function(e){_this.resize(e||window.event);});// Rotation
this.el.on('point.resize',function(e){_this.resize(e||window.event);});// Point-Moving
// This call ensures, that the plugin reacts to a change of snapToGrid immediately
this.update();};ResizeHandler.prototype.stop=function(){this.el.off('lt.resize');this.el.off('rt.resize');this.el.off('rb.resize');this.el.off('lb.resize');this.el.off('t.resize');this.el.off('r.resize');this.el.off('b.resize');this.el.off('l.resize');this.el.off('rot.resize');this.el.off('point.resize');return this;};ResizeHandler.prototype.resize=function(event){var _this=this;this.m=this.el.node.getScreenCTM().inverse();this.offset={x:window.pageXOffset,y:window.pageYOffset};var txPt=this._extractPosition(event.detail.event);this.parameters={type:this.el.type,// the type of element
p:this.transformPoint(txPt.x,txPt.y),x:event.detail.x,// x-position of the mouse when resizing started
y:event.detail.y,// y-position of the mouse when resizing started
box:this.el.bbox(),// The bounding-box of the element
rotation:this.el.transform().rotation// The current rotation of the element
};// Add font-size parameter if the element type is text
if(this.el.type==="text"){this.parameters.fontSize=this.el.attr()["font-size"];}// the i-param in the event holds the index of the point which is moved, when using `deepSelect`
if(event.detail.i!==undefined){// get the point array
var array=this.el.array().valueOf();// Save the index and the point which is moved
this.parameters.i=event.detail.i;this.parameters.pointCoords=[array[event.detail.i][0],array[event.detail.i][1]];}// Lets check which edge of the bounding-box was clicked and resize the this.el according to this
switch(event.type){// Left-Top-Edge
case'lt':// We build a calculating function for every case which gives us the new position of the this.el
this.calc=function(diffX,diffY){// The procedure is always the same
// First we snap the edge to the given grid (snapping to 1px grid is normal resizing)
var snap=this.snapToGrid(diffX,diffY);// Now we check if the new height and width still valid (> 0)
if(this.parameters.box.width-snap[0]>0&&this.parameters.box.height-snap[1]>0){// ...if valid, we resize the this.el (which can include moving because the coord-system starts at the left-top and this edge is moving sometimes when resized)
/*
                           * but first check if the element is text box, so we can change the font size instead of
                           * the width and height
                           */if(this.parameters.type==="text"){this.el.move(this.parameters.box.x+snap[0],this.parameters.box.y);this.el.attr("font-size",this.parameters.fontSize-snap[0]);return;}snap=this.checkAspectRatio(snap);this.el.move(this.parameters.box.x+snap[0],this.parameters.box.y+snap[1]).size(this.parameters.box.width-snap[0],this.parameters.box.height-snap[1]);}};break;// Right-Top
case'rt':// s.a.
this.calc=function(diffX,diffY){var snap=this.snapToGrid(diffX,diffY,1<<1);if(this.parameters.box.width+snap[0]>0&&this.parameters.box.height-snap[1]>0){if(this.parameters.type==="text"){this.el.move(this.parameters.box.x-snap[0],this.parameters.box.y);this.el.attr("font-size",this.parameters.fontSize+snap[0]);return;}snap=this.checkAspectRatio(snap,true);this.el.move(this.parameters.box.x,this.parameters.box.y+snap[1]).size(this.parameters.box.width+snap[0],this.parameters.box.height-snap[1]);}};break;// Right-Bottom
case'rb':// s.a.
this.calc=function(diffX,diffY){var snap=this.snapToGrid(diffX,diffY,0);if(this.parameters.box.width+snap[0]>0&&this.parameters.box.height+snap[1]>0){if(this.parameters.type==="text"){this.el.move(this.parameters.box.x-snap[0],this.parameters.box.y);this.el.attr("font-size",this.parameters.fontSize+snap[0]);return;}snap=this.checkAspectRatio(snap);this.el.move(this.parameters.box.x,this.parameters.box.y).size(this.parameters.box.width+snap[0],this.parameters.box.height+snap[1]);}};break;// Left-Bottom
case'lb':// s.a.
this.calc=function(diffX,diffY){var snap=this.snapToGrid(diffX,diffY,1);if(this.parameters.box.width-snap[0]>0&&this.parameters.box.height+snap[1]>0){if(this.parameters.type==="text"){this.el.move(this.parameters.box.x+snap[0],this.parameters.box.y);this.el.attr("font-size",this.parameters.fontSize-snap[0]);return;}snap=this.checkAspectRatio(snap,true);this.el.move(this.parameters.box.x+snap[0],this.parameters.box.y).size(this.parameters.box.width-snap[0],this.parameters.box.height+snap[1]);}};break;// Top
case't':// s.a.
this.calc=function(diffX,diffY){var snap=this.snapToGrid(diffX,diffY,1<<1);if(this.parameters.box.height-snap[1]>0){// Disable the font-resizing if it is not from the corner of bounding-box
if(this.parameters.type==="text"){return;}this.el.move(this.parameters.box.x,this.parameters.box.y+snap[1]).height(this.parameters.box.height-snap[1]);}};break;// Right
case'r':// s.a.
this.calc=function(diffX,diffY){var snap=this.snapToGrid(diffX,diffY,0);if(this.parameters.box.width+snap[0]>0){if(this.parameters.type==="text"){return;}this.el.move(this.parameters.box.x,this.parameters.box.y).width(this.parameters.box.width+snap[0]);}};break;// Bottom
case'b':// s.a.
this.calc=function(diffX,diffY){var snap=this.snapToGrid(diffX,diffY,0);if(this.parameters.box.height+snap[1]>0){if(this.parameters.type==="text"){return;}this.el.move(this.parameters.box.x,this.parameters.box.y).height(this.parameters.box.height+snap[1]);}};break;// Left
case'l':// s.a.
this.calc=function(diffX,diffY){var snap=this.snapToGrid(diffX,diffY,1);if(this.parameters.box.width-snap[0]>0){if(this.parameters.type==="text"){return;}this.el.move(this.parameters.box.x+snap[0],this.parameters.box.y).width(this.parameters.box.width-snap[0]);}};break;// Rotation
case'rot':// s.a.
this.calc=function(diffX,diffY){// yes this is kinda stupid but we need the mouse coords back...
var current={x:diffX+this.parameters.p.x,y:diffY+this.parameters.p.y};// start minus middle
var sAngle=Math.atan2(this.parameters.p.y-this.parameters.box.y-this.parameters.box.height/2,this.parameters.p.x-this.parameters.box.x-this.parameters.box.width/2);// end minus middle
var pAngle=Math.atan2(current.y-this.parameters.box.y-this.parameters.box.height/2,current.x-this.parameters.box.x-this.parameters.box.width/2);var angle=this.parameters.rotation+(pAngle-sAngle)*180/Math.PI+this.options.snapToAngle/2;// We have to move the element to the center of the box first and change the rotation afterwards
// because rotation always works around a rotation-center, which is changed when moving the element
// We also set the new rotation center to the center of the box.
this.el.center(this.parameters.box.cx,this.parameters.box.cy).rotate(angle-angle%this.options.snapToAngle,this.parameters.box.cx,this.parameters.box.cy);};break;// Moving one single Point (needed when an element is deepSelected which means you can move every single point of the object)
case'point':this.calc=function(diffX,diffY){// Snapping the point to the grid
var snap=this.snapToGrid(diffX,diffY,this.parameters.pointCoords[0],this.parameters.pointCoords[1]);// Get the point array
var array=this.el.array().valueOf();// Changing the moved point in the array
array[this.parameters.i][0]=this.parameters.pointCoords[0]+snap[0];array[this.parameters.i][1]=this.parameters.pointCoords[1]+snap[1];// And plot the new this.el
this.el.plot(array);};}this.el.fire('resizestart',{dx:this.parameters.x,dy:this.parameters.y,event:event});// When resizing started, we have to register events for...
// Touches.
SVG.on(window,'touchmove.resize',function(e){_this.update(e||window.event);});SVG.on(window,'touchend.resize',function(){_this.done();});// Mouse.
SVG.on(window,'mousemove.resize',function(e){_this.update(e||window.event);});SVG.on(window,'mouseup.resize',function(){_this.done();});};// The update-function redraws the element every time the mouse is moving
ResizeHandler.prototype.update=function(event){if(!event){if(this.lastUpdateCall){this.calc(this.lastUpdateCall[0],this.lastUpdateCall[1]);}return;}// Calculate the difference between the mouseposition at start and now
var txPt=this._extractPosition(event);var p=this.transformPoint(txPt.x,txPt.y);var diffX=p.x-this.parameters.p.x,diffY=p.y-this.parameters.p.y;this.lastUpdateCall=[diffX,diffY];// Calculate the new position and height / width of the element
this.calc(diffX,diffY);// Emit an event to say we have changed.
this.el.fire('resizing',{dx:diffX,dy:diffY,event:event});};// Is called on mouseup.
// Removes the update-function from the mousemove event
ResizeHandler.prototype.done=function(){this.lastUpdateCall=null;SVG.off(window,'mousemove.resize');SVG.off(window,'mouseup.resize');SVG.off(window,'touchmove.resize');SVG.off(window,'touchend.resize');this.el.fire('resizedone');};// The flag is used to determine whether the resizing is used with a left-Point (first bit) and top-point (second bit)
// In this cases the temp-values are calculated differently
ResizeHandler.prototype.snapToGrid=function(diffX,diffY,flag,pointCoordsY){var temp;// If `pointCoordsY` is given, a single Point has to be snapped (deepSelect). That's why we need a different temp-value
if(typeof pointCoordsY!=='undefined'){// Note that flag = pointCoordsX in this case
temp=[(flag+diffX)%this.options.snapToGrid,(pointCoordsY+diffY)%this.options.snapToGrid];}else{// We check if the flag is set and if not we set a default-value (both bits set - which means upper-left-edge)
flag=flag==null?1|1<<1:flag;temp=[(this.parameters.box.x+diffX+(flag&1?0:this.parameters.box.width))%this.options.snapToGrid,(this.parameters.box.y+diffY+(flag&1<<1?0:this.parameters.box.height))%this.options.snapToGrid];}if(diffX<0){temp[0]-=this.options.snapToGrid;}if(diffY<0){temp[1]-=this.options.snapToGrid;}diffX-=Math.abs(temp[0])<this.options.snapToGrid/2?temp[0]:temp[0]-(diffX<0?-this.options.snapToGrid:this.options.snapToGrid);diffY-=Math.abs(temp[1])<this.options.snapToGrid/2?temp[1]:temp[1]-(diffY<0?-this.options.snapToGrid:this.options.snapToGrid);return this.constraintToBox(diffX,diffY,flag,pointCoordsY);};// keep element within constrained box
ResizeHandler.prototype.constraintToBox=function(diffX,diffY,flag,pointCoordsY){//return [diffX, diffY]
var c=this.options.constraint||{};var orgX,orgY;if(typeof pointCoordsY!=='undefined'){orgX=flag;orgY=pointCoordsY;}else{orgX=this.parameters.box.x+(flag&1?0:this.parameters.box.width);orgY=this.parameters.box.y+(flag&1<<1?0:this.parameters.box.height);}if(typeof c.minX!=='undefined'&&orgX+diffX<c.minX){diffX=c.minX-orgX;}if(typeof c.maxX!=='undefined'&&orgX+diffX>c.maxX){diffX=c.maxX-orgX;}if(typeof c.minY!=='undefined'&&orgY+diffY<c.minY){diffY=c.minY-orgY;}if(typeof c.maxY!=='undefined'&&orgY+diffY>c.maxY){diffY=c.maxY-orgY;}return[diffX,diffY];};ResizeHandler.prototype.checkAspectRatio=function(snap,isReverse){if(!this.options.saveAspectRatio){return snap;}var updatedSnap=snap.slice();var aspectRatio=this.parameters.box.width/this.parameters.box.height;var newW=this.parameters.box.width+snap[0];var newH=this.parameters.box.height-snap[1];var newAspectRatio=newW/newH;if(newAspectRatio<aspectRatio){// Height is too big. Adapt it
updatedSnap[1]=newW/aspectRatio-this.parameters.box.height;isReverse&&(updatedSnap[1]=-updatedSnap[1]);}else if(newAspectRatio>aspectRatio){// Width is too big. Adapt it
updatedSnap[0]=this.parameters.box.width-newH*aspectRatio;isReverse&&(updatedSnap[0]=-updatedSnap[0]);}return updatedSnap;};SVG.extend(SVG.Element,{// Resize element with mouse
resize:function resize(options){(this.remember('_resizeHandler')||new ResizeHandler(this)).init(options||{});return this;}});SVG.Element.prototype.resize.defaults={snapToAngle:0.1,// Specifies the speed the rotation is happening when moving the mouse
snapToGrid:1,// Snaps to a grid of `snapToGrid` Pixels
constraint:{},// keep element within constrained box
saveAspectRatio:false// Save aspect ratio when resizing using lt, rt, rb or lb points
};}).call(this);})();function styleInject(css,ref){if(ref===void 0)ref={};var insertAt=ref.insertAt;if(!css||typeof document==='undefined'){return;}var head=document.head||document.getElementsByTagName('head')[0];var style=document.createElement('style');style.type='text/css';if(insertAt==='top'){if(head.firstChild){head.insertBefore(style,head.firstChild);}else{head.appendChild(style);}}else{head.appendChild(style);}if(style.styleSheet){style.styleSheet.cssText=css;}else{style.appendChild(document.createTextNode(css));}}var css="";styleInject(css);/**
   * Detect Element Resize
   *
   * https://github.com/sdecima/javascript-detect-element-resize
   * Sebastian Decima
   *
   * version: 0.5.3
   **/(function(){function resetTriggers(element){var triggers=element.__resizeTriggers__,expand=triggers.firstElementChild,contract=triggers.lastElementChild,expandChild=expand?expand.firstElementChild:null;if(contract){contract.scrollLeft=contract.scrollWidth;contract.scrollTop=contract.scrollHeight;}if(expandChild){expandChild.style.width=expand.offsetWidth+1+'px';expandChild.style.height=expand.offsetHeight+1+'px';}if(expand){expand.scrollLeft=expand.scrollWidth;expand.scrollTop=expand.scrollHeight;}}function checkTriggers(element){return element.offsetWidth!=element.__resizeLast__.width||element.offsetHeight!=element.__resizeLast__.height;}function scrollListener(e){var element=this;resetTriggers(this);if(this.__resizeRAF__)cancelFrame(this.__resizeRAF__);this.__resizeRAF__=requestFrame(function(){if(checkTriggers(element)){element.__resizeLast__.width=element.offsetWidth;element.__resizeLast__.height=element.offsetHeight;element.__resizeListeners__.forEach(function(fn){fn.call(e);});}});}var requestFrame=function(){var raf=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||function(fn){return window.setTimeout(fn,20);};return function(fn){return raf(fn);};}();var cancelFrame=function(){var cancel=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.clearTimeout;return function(id){return cancel(id);};}();/* Detect CSS Animations support to detect element display/re-attach */var animation=false,animationstartevent='animationstart',domPrefixes='Webkit Moz O ms'.split(' '),startEvents='webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' ');{var elm=document.createElement('fakeelement');if(elm.style.animationName!==undefined){animation=true;}if(animation===false){for(var i=0;i<domPrefixes.length;i++){if(elm.style[domPrefixes[i]+'AnimationName']!==undefined){animationstartevent=startEvents[i];break;}}}}var animationName='resizeanim';window.addResizeListener=function(element,fn){if(!element.__resizeTriggers__){if(getComputedStyle(element).position=='static')element.style.position='relative';element.__resizeLast__={};element.__resizeListeners__=[];(element.__resizeTriggers__=document.createElement('div')).className='resize-triggers';element.__resizeTriggers__.innerHTML='<div class="expand-trigger"><div></div></div>'+'<div class="contract-trigger"></div>';element.appendChild(element.__resizeTriggers__);resetTriggers(element);element.addEventListener('scroll',scrollListener,true);/* Listen for a css animation to detect element display/re-attach */animationstartevent&&element.__resizeTriggers__.addEventListener(animationstartevent,function(e){if(e.animationName==animationName){resetTriggers(element);}});}element.__resizeListeners__.push(fn);};window.removeResizeListener=function(element,fn){if(element){element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn),1);if(!element.__resizeListeners__.length){element.removeEventListener('scroll',scrollListener);if(element.__resizeTriggers__.parentNode){element.__resizeTriggers__=!element.removeChild(element.__resizeTriggers__);}}}};})();window.Apex={};var InitCtxVariables=/*#__PURE__*/function(){function InitCtxVariables(ctx){_classCallCheck(this,InitCtxVariables);this.ctx=ctx;this.w=ctx.w;}_createClass(InitCtxVariables,[{key:"initModules",value:function initModules(){this.ctx.publicMethods=['updateOptions','updateSeries','appendData','appendSeries','toggleSeries','showSeries','hideSeries','setLocale','resetSeries','toggleDataPointSelection','dataURI','addXaxisAnnotation','addYaxisAnnotation','addPointAnnotation','clearAnnotations','removeAnnotation','paper','destroy'];this.ctx.eventList=['click','mousedown','mousemove','touchstart','touchmove','mouseup','touchend'];this.ctx.animations=new Animations(this.ctx);this.ctx.axes=new Axes(this.ctx);this.ctx.core=new Core(this.ctx.el,this.ctx);this.ctx.config=new Config({});this.ctx.data=new Data(this.ctx);this.ctx.grid=new Grid(this.ctx);this.ctx.graphics=new Graphics(this.ctx);this.ctx.coreUtils=new CoreUtils(this.ctx);this.ctx.crosshairs=new Crosshairs(this.ctx);this.ctx.events=new Events(this.ctx);this.ctx.exports=new Exports(this.ctx);this.ctx.localization=new Localization(this.ctx);this.ctx.options=new Options();this.ctx.responsive=new Responsive(this.ctx);this.ctx.series=new Series(this.ctx);this.ctx.theme=new Theme(this.ctx);this.ctx.formatters=new Formatters(this.ctx);this.ctx.titleSubtitle=new TitleSubtitle(this.ctx);this.ctx.legend=new Legend(this.ctx);this.ctx.toolbar=new Toolbar(this.ctx);this.ctx.dimensions=new Dimensions(this.ctx);this.ctx.updateHelpers=new UpdateHelpers(this.ctx);this.ctx.zoomPanSelection=new ZoomPanSelection(this.ctx);this.ctx.w.globals.tooltip=new Tooltip(this.ctx);}}]);return InitCtxVariables;}();var Destroy=/*#__PURE__*/function(){function Destroy(ctx){_classCallCheck(this,Destroy);this.ctx=ctx;this.w=ctx.w;}_createClass(Destroy,[{key:"clear",value:function clear(){if(this.ctx.zoomPanSelection){this.ctx.zoomPanSelection.destroy();}if(this.ctx.toolbar){this.ctx.toolbar.destroy();}this.ctx.animations=null;this.ctx.axes=null;this.ctx.annotations=null;this.ctx.core=null;this.ctx.data=null;this.ctx.grid=null;this.ctx.series=null;this.ctx.responsive=null;this.ctx.theme=null;this.ctx.formatters=null;this.ctx.titleSubtitle=null;this.ctx.legend=null;this.ctx.dimensions=null;this.ctx.options=null;this.ctx.crosshairs=null;this.ctx.zoomPanSelection=null;this.ctx.updateHelpers=null;this.ctx.toolbar=null;this.ctx.localization=null;this.ctx.w.globals.tooltip=null;this.clearDomElements();}},{key:"killSVG",value:function killSVG(draw){draw.each(function(i,children){this.removeClass('*');this.off();this.stop();},true);draw.ungroup();draw.clear();}},{key:"clearDomElements",value:function clearDomElements(){var _this=this;// detach document event
this.ctx.eventList.forEach(function(event){document.removeEventListener(event,_this.ctx.events.documentEvent);});var domEls=this.w.globals.dom;if(this.ctx.el!==null){// remove all child elements - resetting the whole chart
while(this.ctx.el.firstChild){this.ctx.el.removeChild(this.ctx.el.firstChild);}}this.killSVG(domEls.Paper);domEls.Paper.remove();domEls.elWrap=null;domEls.elGraphical=null;domEls.elAnnotations=null;domEls.elLegendWrap=null;domEls.baseEl=null;domEls.elGridRect=null;domEls.elGridRectMask=null;domEls.elGridRectMarkerMask=null;domEls.elDefs=null;}}]);return Destroy;}();/**
   *
   * @module ApexCharts
   **/var ApexCharts$1=/*#__PURE__*/function(){function ApexCharts(el,opts){_classCallCheck(this,ApexCharts);this.opts=opts;this.ctx=this;// Pass the user supplied options to the Base Class where these options will be extended with defaults. The returned object from Base Class will become the config object in the entire codebase.
this.w=new Base(opts).init();this.el=el;this.w.globals.cuid=Utils.randomId();this.w.globals.chartID=this.w.config.chart.id?this.w.config.chart.id:this.w.globals.cuid;var initCtx=new InitCtxVariables(this);initCtx.initModules();this.create=Utils.bind(this.create,this);this.windowResizeHandler=this._windowResize.bind(this);}/**
     * The primary method user will call to render the chart.
     */_createClass(ApexCharts,[{key:"render",value:function render(){var _this=this;// main method
return new Promise(function(resolve,reject){// only draw chart, if element found
if(_this.el!==null){if(typeof Apex._chartInstances==='undefined'){Apex._chartInstances=[];}if(_this.w.config.chart.id){Apex._chartInstances.push({id:_this.w.globals.chartID,group:_this.w.config.chart.group,chart:_this});}// set the locale here
_this.setLocale(_this.w.config.chart.defaultLocale);var beforeMount=_this.w.config.chart.events.beforeMount;if(typeof beforeMount==='function'){beforeMount(_this,_this.w);}_this.events.fireEvent('beforeMount',[_this,_this.w]);window.addEventListener('resize',_this.windowResizeHandler);window.addResizeListener(_this.el.parentNode,_this._parentResizeCallback.bind(_this));var graphData=_this.create(_this.w.config.series,{});if(!graphData)return resolve(_this);_this.mount(graphData).then(function(){if(typeof _this.w.config.chart.events.mounted==='function'){_this.w.config.chart.events.mounted(_this,_this.w);}_this.events.fireEvent('mounted',[_this,_this.w]);resolve(graphData);})["catch"](function(e){reject(e);// handle error in case no data or element not found
});}else{reject(new Error('Element not found'));}});}},{key:"create",value:function create(ser,opts){var w=this.w;var initCtx=new InitCtxVariables(this);initCtx.initModules();var gl=this.w.globals;gl.noData=false;gl.animationEnded=false;this.responsive.checkResponsiveConfig(opts);if(w.config.xaxis.convertedCatToNumeric){var defaults=new Defaults(w.config);defaults.convertCatToNumericXaxis(w.config,this.ctx);}if(this.el===null){gl.animationEnded=true;return null;}this.core.setupElements();if(gl.svgWidth===0){// if the element is hidden, skip drawing
gl.animationEnded=true;return null;}var combo=CoreUtils.checkComboSeries(ser);gl.comboCharts=combo.comboCharts;gl.comboBarCount=combo.comboBarCount;if(ser.length===0||ser.length===1&&ser[0].data&&ser[0].data.length===0){this.series.handleNoData();}this.events.setupEventHandlers();// Handle the data inputted by user and set some of the global variables (for eg, if data is datetime / numeric / category). Don't calculate the range / min / max at this time
this.data.parseData(ser);// this is a good time to set theme colors first
this.theme.init();// as markers accepts array, we need to setup global markers for easier access
var markers=new Markers(this);markers.setGlobalMarkerSize();// labelFormatters should be called before dimensions as in dimensions we need text labels width
this.formatters.setLabelFormatters();this.titleSubtitle.draw();// legend is calculated here before coreCalculations because it affects the plottable area
// if there is some data to show or user collapsed all series, then proceed drawing legend
if(!gl.noData||gl.collapsedSeries.length===gl.series.length){this.legend.init();}// check whether in multiple series, all series share the same X
this.series.hasAllSeriesEqualX();// coreCalculations will give the min/max range and yaxis/axis values. It should be called here to set series variable from config to globals
if(gl.axisCharts){this.core.coreCalculations();if(w.config.xaxis.type!=='category'){// as we have minX and maxX values, determine the default DateTimeFormat for time series
this.formatters.setLabelFormatters();}}// we need to generate yaxis for heatmap separately as we are not showing numerics there, but seriesNames. There are some tweaks which are required for heatmap to align labels correctly which are done in below function
// Also we need to do this before calcuting Dimentions plotCoords() method of Dimensions
this.formatters.heatmapLabelFormatters();// We got plottable area here, next task would be to calculate axis areas
this.dimensions.plotCoords();var xyRatios=this.core.xySettings();this.grid.createGridMask();var elGraph=this.core.plotChartType(ser,xyRatios);var dataLabels=new DataLabels(this);dataLabels.bringForward();if(w.config.dataLabels.background.enabled){dataLabels.dataLabelsBackground();}// after all the drawing calculations, shift the graphical area (actual charts/bars) excluding legends
this.core.shiftGraphPosition();var dim={plot:{left:w.globals.translateX,top:w.globals.translateY,width:w.globals.gridWidth,height:w.globals.gridHeight}};return{elGraph:elGraph,xyRatios:xyRatios,elInner:w.globals.dom.elGraphical,dimensions:dim};}},{key:"mount",value:function mount(){var _this2=this;var graphData=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var me=this;var w=me.w;return new Promise(function(resolve,reject){// no data to display
if(me.el===null){return reject(new Error('Not enough data to display or target element not found'));}else if(graphData===null||w.globals.allSeriesCollapsed){me.series.handleNoData();}me.axes.drawAxis(w.config.chart.type,graphData.xyRatios);me.grid=new Grid(me);var elgrid=me.grid.drawGrid();me.annotations=new Annotations(me);me.annotations.drawShapeAnnos();me.annotations.drawImageAnnos();me.annotations.drawTextAnnos();if(w.config.grid.position==='back'&&elgrid){w.globals.dom.elGraphical.add(elgrid.el);}var xAxis=new XAxis(_this2.ctx);var yaxis=new YAxis(_this2.ctx);if(elgrid!==null){xAxis.xAxisLabelCorrections(elgrid.xAxisTickWidth);yaxis.setYAxisTextAlignments();}if(w.config.annotations.position==='back'){w.globals.dom.Paper.add(w.globals.dom.elAnnotations);me.annotations.drawAxesAnnotations();}if(graphData.elGraph instanceof Array){for(var g=0;g<graphData.elGraph.length;g++){w.globals.dom.elGraphical.add(graphData.elGraph[g]);}}else{w.globals.dom.elGraphical.add(graphData.elGraph);}if(w.config.grid.position==='front'&&elgrid){w.globals.dom.elGraphical.add(elgrid.el);}if(w.config.xaxis.crosshairs.position==='front'){me.crosshairs.drawXCrosshairs();}if(w.config.yaxis[0].crosshairs.position==='front'){me.crosshairs.drawYCrosshairs();}if(w.config.annotations.position==='front'){w.globals.dom.Paper.add(w.globals.dom.elAnnotations);me.annotations.drawAxesAnnotations();}if(!w.globals.noData){// draw tooltips at the end
if(w.config.tooltip.enabled&&!w.globals.noData){me.w.globals.tooltip.drawTooltip(graphData.xyRatios);}if(w.globals.axisCharts&&(w.globals.isXNumeric||w.config.xaxis.convertedCatToNumeric)){if(w.config.chart.zoom.enabled||w.config.chart.selection&&w.config.chart.selection.enabled||w.config.chart.pan&&w.config.chart.pan.enabled){me.zoomPanSelection.init({xyRatios:graphData.xyRatios});}}else{var tools=w.config.chart.toolbar.tools;var toolsArr=['zoom','zoomin','zoomout','selection','pan','reset'];toolsArr.forEach(function(t){tools[t]=false;});}if(w.config.chart.toolbar.show&&!w.globals.allSeriesCollapsed){me.toolbar.createToolbar();}}if(w.globals.memory.methodsToExec.length>0){w.globals.memory.methodsToExec.forEach(function(fn){fn.method(fn.params,false,fn.context);});}if(!w.globals.axisCharts&&!w.globals.noData){me.core.resizeNonAxisCharts();}resolve(me);});}/**
       * Destroy the chart instance by removing all elements which also clean up event listeners on those elements.
       */},{key:"destroy",value:function destroy(){window.removeEventListener('resize',this.windowResizeHandler);window.removeResizeListener(this.el.parentNode,this._parentResizeCallback.bind(this));// remove the chart's instance from the global Apex._chartInstances
var chartID=this.w.config.chart.id;if(chartID){Apex._chartInstances.forEach(function(c,i){if(c.id===chartID){Apex._chartInstances.splice(i,1);}});}new Destroy(this.ctx).clear();}/**
       * Allows users to update Options after the chart has rendered.
       *
       * @param {object} options - A new config object can be passed which will be merged with the existing config object
       * @param {boolean} redraw - should redraw from beginning or should use existing paths and redraw from there
       * @param {boolean} animate - should animate or not on updating Options
       */},{key:"updateOptions",value:function updateOptions(options){var _this3=this;var redraw=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var animate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var updateSyncedCharts=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var overwriteInitialConfig=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;var w=this.w;if(options.series){this.series.resetSeries(false,true,false);if(options.series.length&&options.series[0].data){options.series=options.series.map(function(s,i){return _this3.updateHelpers._extendSeries(s,i);});}// user updated the series via updateOptions() function.
// Hence, we need to reset axis min/max to avoid zooming issues
this.updateHelpers.revertDefaultAxisMinMax();}// user has set x-axis min/max externally - hence we need to forcefully set the xaxis min/max
if(options.xaxis){options=this.updateHelpers.forceXAxisUpdate(options);}if(options.yaxis){options=this.updateHelpers.forceYAxisUpdate(options);}if(w.globals.collapsedSeriesIndices.length>0){this.series.clearPreviousPaths();}/* update theme mode#459 */if(options.theme){options=this.theme.updateThemeOptions(options);}return this.updateHelpers._updateOptions(options,redraw,animate,updateSyncedCharts,overwriteInitialConfig);}/**
       * Allows users to update Series after the chart has rendered.
       *
       * @param {array} series - New series which will override the existing
       */},{key:"updateSeries",value:function updateSeries(){var newSeries=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var animate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var overwriteInitialSeries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;this.series.resetSeries(false);this.updateHelpers.revertDefaultAxisMinMax();return this.updateHelpers._updateSeries(newSeries,animate,overwriteInitialSeries);}/**
       * Allows users to append a new series after the chart has rendered.
       *
       * @param {array} newSerie - New serie which will be appended to the existing series
       */},{key:"appendSeries",value:function appendSeries(newSerie){var animate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var overwriteInitialSeries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var newSeries=this.w.config.series.slice();newSeries.push(newSerie);this.series.resetSeries(false);this.updateHelpers.revertDefaultAxisMinMax();return this.updateHelpers._updateSeries(newSeries,animate,overwriteInitialSeries);}/**
       * Allows users to append Data to series.
       *
       * @param {array} newData - New data in the same format as series
       */},{key:"appendData",value:function appendData(newData){var overwriteInitialSeries=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this;me.w.globals.dataChanged=true;me.series.getPreviousPaths();var newSeries=me.w.config.series.slice();for(var i=0;i<newSeries.length;i++){if(typeof newData[i]!=='undefined'){for(var j=0;j<newData[i].data.length;j++){newSeries[i].data.push(newData[i].data[j]);}}}me.w.config.series=newSeries;if(overwriteInitialSeries){me.w.globals.initialSeries=JSON.parse(JSON.stringify(me.w.config.series));}return this.update();}},{key:"update",value:function update(options){var _this4=this;return new Promise(function(resolve,reject){new Destroy(_this4.ctx).clear();var graphData=_this4.create(_this4.w.config.series,options);if(!graphData)return resolve(_this4);_this4.mount(graphData).then(function(){if(typeof _this4.w.config.chart.events.updated==='function'){_this4.w.config.chart.events.updated(_this4,_this4.w);}_this4.events.fireEvent('updated',[_this4,_this4.w]);_this4.w.globals.isDirty=true;resolve(_this4);})["catch"](function(e){reject(e);});});}/**
       * Get all charts in the same "group" (including the instance which is called upon) to sync them when user zooms in/out or pan.
       */},{key:"getSyncedCharts",value:function getSyncedCharts(){var chartGroups=this.getGroupedCharts();var allCharts=[this];if(chartGroups.length){allCharts=[];chartGroups.forEach(function(ch){allCharts.push(ch);});}return allCharts;}/**
       * Get charts in the same "group" (excluding the instance which is called upon) to perform operations on the other charts of the same group (eg., tooltip hovering)
       */},{key:"getGroupedCharts",value:function getGroupedCharts(){var _this5=this;return Apex._chartInstances.filter(function(ch){if(ch.group){return true;}}).map(function(ch){return _this5.w.config.chart.group===ch.group?ch.chart:_this5;});}},{key:"toggleSeries",value:function toggleSeries(seriesName){return this.series.toggleSeries(seriesName);}},{key:"showSeries",value:function showSeries(seriesName){this.series.showSeries(seriesName);}},{key:"hideSeries",value:function hideSeries(seriesName){this.series.hideSeries(seriesName);}},{key:"resetSeries",value:function resetSeries(){var shouldUpdateChart=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;this.series.resetSeries(shouldUpdateChart);}// Public method to add event listener on chart context
},{key:"addEventListener",value:function addEventListener(name,handler){this.events.addEventListener(name,handler);}// Public method to remove event listener on chart context
},{key:"removeEventListener",value:function removeEventListener(name,handler){this.events.removeEventListener(name,handler);}},{key:"addXaxisAnnotation",value:function addXaxisAnnotation(opts){var pushToMemory=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;var me=this;if(context){me=context;}me.annotations.addXaxisAnnotationExternal(opts,pushToMemory,me);}},{key:"addYaxisAnnotation",value:function addYaxisAnnotation(opts){var pushToMemory=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;var me=this;if(context){me=context;}me.annotations.addYaxisAnnotationExternal(opts,pushToMemory,me);}},{key:"addPointAnnotation",value:function addPointAnnotation(opts){var pushToMemory=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;var me=this;if(context){me=context;}me.annotations.addPointAnnotationExternal(opts,pushToMemory,me);}},{key:"clearAnnotations",value:function clearAnnotations(){var context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:undefined;var me=this;if(context){me=context;}me.annotations.clearAnnotations(me);}},{key:"removeAnnotation",value:function removeAnnotation(id){var context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;var me=this;if(context){me=context;}me.annotations.removeAnnotation(me,id);}},{key:"getChartArea",value:function getChartArea(){var el=this.w.globals.dom.baseEl.querySelector('.apexcharts-inner');return el;}},{key:"getSeriesTotalXRange",value:function getSeriesTotalXRange(minX,maxX){return this.coreUtils.getSeriesTotalsXRange(minX,maxX);}},{key:"getHighestValueInSeries",value:function getHighestValueInSeries(){var seriesIndex=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var range=new Range$1(this.ctx);return range.getMinYMaxY(seriesIndex).highestY;}},{key:"getLowestValueInSeries",value:function getLowestValueInSeries(){var seriesIndex=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var range=new Range$1(this.ctx);return range.getMinYMaxY(seriesIndex).lowestY;}},{key:"getSeriesTotal",value:function getSeriesTotal(){return this.w.globals.seriesTotals;}},{key:"toggleDataPointSelection",value:function toggleDataPointSelection(seriesIndex,dataPointIndex){return this.updateHelpers.toggleDataPointSelection(seriesIndex,dataPointIndex);}},{key:"setLocale",value:function setLocale(localeName){this.localization.setCurrentLocaleValues(localeName);}},{key:"dataURI",value:function dataURI(){var exp=new Exports(this.ctx);return exp.dataURI();}},{key:"paper",value:function paper(){return this.w.globals.dom.Paper;}},{key:"_parentResizeCallback",value:function _parentResizeCallback(){if(!this.w.globals.noData&&this.w.globals.animationEnded&&this.w.config.chart.redrawOnParentResize){this._windowResize();}}/**
       * Handle window resize and re-draw the whole chart.
       */},{key:"_windowResize",value:function _windowResize(){var _this6=this;clearTimeout(this.w.globals.resizeTimer);this.w.globals.resizeTimer=window.setTimeout(function(){_this6.w.globals.resized=true;_this6.w.globals.dataChanged=false;// we need to redraw the whole chart on window resize (with a small delay).
_this6.ctx.update();},150);}}],[{key:"getChartByID",value:function getChartByID(chartID){var c=Apex._chartInstances.filter(function(ch){return ch.id===chartID;})[0];return c&&c.chart;}/**
       * Allows the user to provide data attrs in the element and the chart will render automatically when this method is called by searching for the elements containing 'data-apexcharts' attribute
       */},{key:"initOnLoad",value:function initOnLoad(){var els=document.querySelectorAll('[data-apexcharts]');for(var i=0;i<els.length;i++){var el=els[i];var options=JSON.parse(els[i].getAttribute('data-options'));var apexChart=new ApexCharts(el,options);apexChart.render();}}/**
       * This static method allows users to call chart methods without necessarily from the
       * instance of the chart in case user has assigned chartID to the targetted chart.
       * The chartID is used for mapping the instance stored in Apex._chartInstances global variable
       *
       * This is helpful in cases when you don't have reference of the chart instance
       * easily and need to call the method from anywhere.
       * For eg, in React/Vue applications when you have many parent/child components,
       * and need easy reference to other charts for performing dynamic operations
       *
       * @param {string} chartID - The unique identifier which will be used to call methods
       * on that chart instance
       * @param {function} fn - The method name to call
       * @param {object} opts - The parameters which are accepted in the original method will be passed here in the same order.
       */},{key:"exec",value:function exec(chartID,fn){var chart=this.getChartByID(chartID);if(!chart)return;// turn on the global exec flag to indicate this method was called
chart.w.globals.isExecCalled=true;var ret=null;if(chart.publicMethods.indexOf(fn)!==-1){for(var _len=arguments.length,opts=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){opts[_key-2]=arguments[_key];}ret=chart[fn].apply(chart,opts);}return ret;}},{key:"merge",value:function merge(target,source){return Utils.extend(target,source);}}]);return ApexCharts;}();return ApexCharts$1;});

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./src/modules/apexcharts/react-apexcharts.jsx":
/*!*****************************************************!*\
  !*** ./src/modules/apexcharts/react-apexcharts.jsx ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _apexcharts__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./apexcharts */ "./src/modules/apexcharts/apexcharts.js");
/* harmony import */ var _apexcharts__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_apexcharts__WEBPACK_IMPORTED_MODULE_9__);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }




window.ApexCharts = _apexcharts__WEBPACK_IMPORTED_MODULE_9___default.a;

var Charts = /*#__PURE__*/function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__["default"])(Charts, _React$Component);

  var _super = _createSuper(Charts);

  function Charts(props) {
    var _this;

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, Charts);

    _this = _super.call(this, props);

    if (react__WEBPACK_IMPORTED_MODULE_7___default.a.createRef) {
      _this.chartRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7___default.a.createRef();
    } else {
      _this.setRef = function (el) {
        return _this.chartRef = el;
      };
    }

    _this.chart = null;
    return _this;
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Charts, [{
    key: "render",
    value: function render() {
      var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.props);

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("div", _objectSpread({
        ref: react__WEBPACK_IMPORTED_MODULE_7___default.a.createRef ? this.chartRef : this.setRef
      }, props));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var current = react__WEBPACK_IMPORTED_MODULE_7___default.a.createRef ? this.chartRef.current : this.chartRef;
      this.chart = new _apexcharts__WEBPACK_IMPORTED_MODULE_9___default.a(current, this.getConfig());
      this.chart.render();
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      var _this$props = this.props,
          type = _this$props.type,
          height = _this$props.height,
          width = _this$props.width,
          series = _this$props.series,
          options = _this$props.options;
      var newOptions = {
        chart: {
          type: type,
          height: height,
          width: width
        },
        series: series
      };
      return this.extend(options, newOptions);
    }
  }, {
    key: "isObject",
    value: function isObject(item) {
      return item && typeof item === "object" && !Array.isArray(item) && item != null;
    }
  }, {
    key: "extend",
    value: function extend(target, source) {
      var _this2 = this;

      if (typeof Object.assign !== "function") {
        ;

        (function () {
          Object.assign = function (target) {
            // We must check against these specific cases.
            if (target === undefined || target === null) {
              throw new TypeError("Cannot convert undefined or null to object");
            }

            var output = Object(target);

            for (var index = 1; index < arguments.length; index++) {
              var _source = arguments[index];

              if (_source !== undefined && _source !== null) {
                for (var nextKey in _source) {
                  if (_source.hasOwnProperty(nextKey)) {
                    output[nextKey] = _source[nextKey];
                  }
                }
              }
            }

            return output;
          };
        })();
      }

      var output = Object.assign({}, target);

      if (this.isObject(target) && this.isObject(source)) {
        Object.keys(source).forEach(function (key) {
          if (_this2.isObject(source[key])) {
            if (!(key in target)) {
              Object.assign(output, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, key, source[key]));
            } else {
              output[key] = _this2.extend(target[key], source[key]);
            }
          } else {
            Object.assign(output, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, key, source[key]));
          }
        });
      }

      return output;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      console.log(this.chart);

      if (prevProps !== this.props) {
        this.chart.updateOptions(this.getConfig());
        this.chart.updateSeries(this.props.series);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.chart && typeof this.chart.destroy === "function") this.chart.destroy();
    }
  }]);

  return Charts;
}(react__WEBPACK_IMPORTED_MODULE_7___default.a.Component);

Charts.propTypes = {
  type: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string.isRequired,
  width: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.any,
  height: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.any,
  series: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.array.isRequired,
  options: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.object.isRequired
};
Charts.defaultProps = {
  type: "line",
  width: "100%",
  height: "auto"
};
/* harmony default export */ __webpack_exports__["default"] = (Charts);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL21vZHVsZXMvYXBleGNoYXJ0cy9hcGV4Y2hhcnRzLmpzIiwid2VicGFjazovL19OX0UvLi9zcmMvbW9kdWxlcy9hcGV4Y2hhcnRzL3JlYWN0LWFwZXhjaGFydHMuanN4Il0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZDIiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJfZ2V0UHJvdG90eXBlT2YiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJjYWxsIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIkFycmF5IiwiaXNBcnJheSIsImFycjIiLCJpdGVyIiwidG9TdHJpbmciLCJmcm9tIiwiVXRpbHMiLCJzaGFkZVJHQkNvbG9yIiwicGVyY2VudCIsImNvbG9yIiwiZiIsInNwbGl0IiwidCIsIlIiLCJwYXJzZUludCIsInNsaWNlIiwiRyIsIkIiLCJNYXRoIiwicm91bmQiLCJzaGFkZUhleENvbG9yIiwic2hhZGVDb2xvciIsImJpbmQiLCJmbiIsIm1lIiwiaXNPYmplY3QiLCJpdGVtIiwibGlzdFRvQXJyYXkiLCJsaXN0IiwiYXJyYXkiLCJleHRlbmQiLCJfdGhpcyIsImFzc2lnbiIsInVuZGVmaW5lZCIsIm91dHB1dCIsImluZGV4IiwiX3NvdXJjZSIsIm5leHRLZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImV4dGVuZEFycmF5IiwiYXJyVG9FeHRlbmQiLCJyZXN1bHRBcnIiLCJleHRlbmRlZEFyciIsIm1hcCIsIm1vbnRoTW9kIiwibW9udGgiLCJjbG9uZSIsImNsb25lUmVzdWx0IiwiX2Nsb25lUmVzdWx0IiwicHJvcCIsImxvZzEwIiwieCIsImxvZyIsIkxOMTAiLCJyb3VuZFRvQmFzZTEwIiwicG93IiwiZmxvb3IiLCJyb3VuZFRvQmFzZSIsImJhc2UiLCJwYXJzZU51bWJlciIsInZhbCIsInBhcnNlRmxvYXQiLCJyYW5kb21JZCIsIkRhdGUiLCJub0V4cG9uZW50cyIsImRhdGEiLCJTdHJpbmciLCJ6Iiwic2lnbiIsInN0ciIsInJlcGxhY2UiLCJtYWciLCJOdW1iZXIiLCJnZXREaW1lbnNpb25zIiwiZWwiLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJldCIsImVsZW1lbnRIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJlbGVtZW50V2lkdGgiLCJjbGllbnRXaWR0aCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtZW50IiwicmVjdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwieSIsImdldExhcmdlc3RTdHJpbmdGcm9tQXJyIiwicmVkdWNlIiwiYSIsImIiLCJhYSIsImJiIiwiaGV4VG9SZ2JhIiwiaGV4Iiwib3BhY2l0eSIsInN1YnN0cmluZyIsImgiLCJtYXRjaCIsIlJlZ0V4cCIsImpvaW4iLCJnZXRPcGFjaXR5RnJvbVJHQkEiLCJyZ2JhIiwicmdiMmhleCIsInJnYiIsImlzQ29sb3JIZXgiLCJ0ZXN0IiwicG9sYXJUb0NhcnRlc2lhbiIsImNlbnRlclgiLCJjZW50ZXJZIiwicmFkaXVzIiwiYW5nbGVJbkRlZ3JlZXMiLCJhbmdsZUluUmFkaWFucyIsIlBJIiwiY29zIiwic2luIiwiZXNjYXBlU3RyaW5nIiwiZXNjYXBlV2l0aCIsIm5ld1N0ciIsIm5lZ1RvWmVybyIsIm1vdmVJbmRleEluQXJyYXkiLCJvbGRfaW5kZXgiLCJuZXdfaW5kZXgiLCJrIiwic3BsaWNlIiwiZXh0cmFjdE51bWJlciIsInMiLCJmaW5kQW5jZXN0b3IiLCJjbHMiLCJwYXJlbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJzZXRFTHN0eWxlcyIsInN0eWxlcyIsInN0eWxlIiwiaXNOdW1iZXIiLCJpc05hTiIsImlzRmxvYXQiLCJuIiwiaXNTYWZhcmkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0ZpcmVmb3giLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJpc0lFMTEiLCJ3aW5kb3ciLCJhcHBWZXJzaW9uIiwiaXNJRSIsInVhIiwibXNpZSIsInRyaWRlbnQiLCJydiIsImVkZ2UiLCJGaWx0ZXJzIiwiY3R4IiwidyIsImdldERlZmF1bHRGaWx0ZXIiLCJ1bmZpbHRlciIsIlNWRyIsIkZpbHRlciIsInNpemUiLCJjb25maWciLCJzdGF0ZXMiLCJub3JtYWwiLCJhcHBseUZpbHRlciIsInR5cGUiLCJjaGFydCIsImRyb3BTaGFkb3ciLCJlbmFibGVkIiwiYWRkTm9ybWFsRmlsdGVyIiwibm9kZSIsImFkZExpZ2h0ZW5GaWx0ZXIiLCJhdHRycyIsImludGVuc2l0eSIsImFkZCIsInNoYWRvd0F0dHIiLCJhZGRTaGFkb3ciLCJjb21wb25lbnRUcmFuc2ZlciIsInNsb3BlIiwiaW50ZXJjZXB0IiwiZmlsdGVyZXIiLCJzZXRBdHRyaWJ1dGUiLCJfc2NhbGVGaWx0ZXJTaXplIiwiYWRkRGFya2VuRmlsdGVyIiwiX3RoaXMyIiwiYmx1ciIsInNoYWRvd0JsdXIiLCJmbG9vZCIsImNvbXBvc2l0ZSIsInNvdXJjZUFscGhhIiwib2Zmc2V0IiwiZ2F1c3NpYW5CbHVyIiwibWVyZ2UiLCJibGVuZCIsIm5vVXNlclNwYWNlT25Vc2UiLCJzZXRTZWxlY3Rpb25GaWx0ZXIiLCJyZWFsSW5kZXgiLCJkYXRhUG9pbnRJbmRleCIsImdsb2JhbHMiLCJzZWxlY3RlZERhdGFQb2ludHMiLCJhY3RpdmVGaWx0ZXIiLCJhY3RpdmUiLCJzZXRBdHRyaWJ1dGVzIiwiQW5pbWF0aW9ucyIsInNldEVhc2luZ0Z1bmN0aW9ucyIsImVhc2luZyIsInVzZXJEZWZpbmVkRWFzaW5nIiwiYW5pbWF0aW9ucyIsInBvcyIsImFuaW1hdGVMaW5lIiwidG8iLCJzcGVlZCIsImF0dHIiLCJhbmltYXRlIiwiYW5pbWF0ZUNpcmNsZVJhZGl1cyIsImNiIiwiciIsImFmdGVyQWxsIiwiYW5pbWF0ZUNpcmNsZSIsImN4IiwiY3kiLCJhbmltYXRlUmVjdCIsImFuaW1hdGVQYXRoc0dyYWR1YWxseSIsInBhcmFtcyIsImoiLCJmaWxsIiwicGF0aEZyb20iLCJwYXRoVG8iLCJkZWxheSIsImRlbGF5RmFjdG9yIiwiYW5pbWF0ZUdyYWR1YWxseSIsImR5bmFtaWNBbmltYXRpb24iLCJkYXRhQ2hhbmdlZCIsIm1vcnBoU1ZHIiwiY29tYm9DaGFydHMiLCJzaG93RGVsYXllZEVsZW1lbnRzIiwiZGVsYXllZEVsZW1lbnRzIiwiZCIsImVsZSIsInJlbW92ZSIsImFuaW1hdGlvbkNvbXBsZXRlZCIsImFuaW1hdGlvbkVuZGVkIiwiZXZlbnRzIiwiYW5pbWF0aW9uRW5kIiwiZGlzYWJsZUFuaW1hdGlvbkZvckNvcnJ1cFBhdGgiLCJwYXRoIiwiY29uY2F0IiwiZ3JpZEhlaWdodCIsInNob3VsZEFuaW1hdGUiLCJwbG90Iiwic2VyaWVzIiwibWF4VmFsc0luQXJyYXlJbmRleCIsIkdyYXBoaWNzIiwiZHJhd0xpbmUiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImxpbmVDb2xvciIsImRhc2hBcnJheSIsInN0cm9rZVdpZHRoIiwibGluZSIsImRvbSIsIlBhcGVyIiwic3Ryb2tlIiwiZHJhd1JlY3QiLCJzdHJva2VDb2xvciIsInN0cm9rZURhc2hBcnJheSIsInJ4IiwicnkiLCJkcmF3UG9seWdvbiIsInBvbHlnb25TdHJpbmciLCJwb2x5Z29uIiwiZHJhd0NpcmNsZSIsImMiLCJjaXJjbGUiLCJkcmF3UGF0aCIsIl9yZWYiLCJfcmVmJGQiLCJfcmVmJHN0cm9rZSIsIl9yZWYkc3Ryb2tlV2lkdGgiLCJfcmVmJGZpbGxPcGFjaXR5IiwiZmlsbE9wYWNpdHkiLCJfcmVmJHN0cm9rZU9wYWNpdHkiLCJzdHJva2VPcGFjaXR5IiwiY2xhc3NlcyIsIl9yZWYkc3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVjYXAiLCJfcmVmJHN0cm9rZURhc2hBcnJheSIsImxpbmVDYXAiLCJncm91cCIsImciLCJtb3ZlIiwiaE9SdiIsImN1cnZlIiwicXVhZHJhdGljQ3VydmUiLCJhcmMiLCJheGlzUm90YXRpb24iLCJsYXJnZUFyY0ZsYWciLCJzd2VlcEZsYWciLCJyZWxhdGl2ZSIsImNvb3JkIiwicmVuZGVyUGF0aHMiLCJfcmVmMiIsImFuaW1hdGlvbkRlbGF5IiwiaW5pdGlhbFNwZWVkIiwiZGF0YUNoYW5nZVNwZWVkIiwiY2xhc3NOYW1lIiwiX3JlZjIkc2hvdWxkQ2xpcFRvR3JpIiwic2hvdWxkQ2xpcFRvR3JpZCIsIl9yZWYyJGJpbmRFdmVudHNPblBhdCIsImJpbmRFdmVudHNPblBhdGhzIiwiX3JlZjIkZHJhd1NoYWRvdyIsImRyYXdTaGFkb3ciLCJmaWx0ZXJzIiwiYW5pbSIsImluaXRpYWxBbmltIiwiZHluYW1pY0FuaW0iLCJyZXNpemVkIiwic3Ryb2tlRGFzaEFycmF5T3B0IiwiY3VpZCIsImVuYWJsZWRPblNlcmllcyIsInNoYWRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXRoTW91c2VFbnRlciIsInBhdGhNb3VzZUxlYXZlIiwicGF0aE1vdXNlRG93biIsImRlZmF1bHRBbmltYXRlT3B0cyIsImRyYXdQYXR0ZXJuIiwicGF0dGVybiIsImRyYXdHcmFkaWVudCIsImdmcm9tIiwiZ3RvIiwib3BhY2l0eUZyb20iLCJvcGFjaXR5VG8iLCJzdG9wcyIsImNvbG9yU3RvcHMiLCJzdG9wMSIsInN0b3AyIiwic3RvcDMiLCJzdG9wNCIsInJhZGlhbCIsImdyYWRpZW50Iiwic3RvcCIsImF0IiwiZ3JhZGllbnRTdG9wcyIsIm9mZngiLCJncmlkV2lkdGgiLCJvZmZ5IiwiZ3JhZGllbnRVbml0cyIsImZ4IiwiZnkiLCJkcmF3VGV4dCIsIl9yZWYzIiwidGV4dCIsInRleHRBbmNob3IiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJmb250V2VpZ2h0IiwiZm9yZUNvbG9yIiwiX3JlZjMkY3NzQ2xhc3MiLCJjc3NDbGFzcyIsIl9yZWYzJGlzUGxhaW5UZXh0IiwiaXNQbGFpblRleHQiLCJlbFRleHQiLCJ0c3BhbiIsIm5ld0xpbmUiLCJwbGFpbiIsImRyYXdNYXJrZXIiLCJvcHRzIiwicFNpemUiLCJlbFBvaW50Iiwic2hhcGUiLCJwUmFkaXVzIiwiblNpemUiLCJwb2ludEZpbGxDb2xvciIsInBvaW50RmlsbE9wYWNpdHkiLCJwb2ludFN0cm9rZUNvbG9yIiwicFdpZHRoIiwicG9pbnRTdHJva2VPcGFjaXR5IiwiZSIsImdldEF0dHJpYnV0ZSIsImRhdGFQb2ludE1vdXNlRW50ZXIiLCJzZXJpZXNJbmRleCIsImZpcmVFdmVudCIsImhvdmVyIiwiaXNUb3VjaERldmljZSIsImhvdmVyRmlsdGVyIiwiZGF0YVBvaW50TW91c2VMZWF2ZSIsInNlbGVjdGVkIiwiYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb24iLCJlbFBhdGhzIiwic2VsZWN0IiwibWVtYmVycyIsImVsQ2lyY2xlcyIsImRlU2VsZWN0IiwiZWxzIiwiZGF0YVBvaW50U2VsZWN0aW9uIiwicm90YXRlQXJvdW5kQ2VudGVyIiwiZ2V0QkJveCIsImdldFRleHRSZWN0cyIsInRyYW5zZm9ybSIsInVzZUJCb3giLCJ2aXJ0dWFsVGV4dCIsImJib3giLCJwbGFjZVRleHRXaXRoRWxsaXBzaXMiLCJ0ZXh0T2JqIiwidGV4dFN0cmluZyIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsInRleHRDb250ZW50IiwiZ2V0U3ViU3RyaW5nTGVuZ3RoIiwic2V0QXR0cnMiLCJIZWxwZXJzIiwiYW5ub0N0eCIsInNldE9yaWVudGF0aW9ucyIsImFubm8iLCJhbm5vSW5kZXgiLCJsYWJlbCIsIm9yaWVudGF0aW9uIiwieEFubm8iLCJiYXNlRWwiLCJxdWVyeVNlbGVjdG9yIiwieEFubm9Db29yZCIsInBvc2l0aW9uIiwiYW5ub1JvdGF0aW5nQ2VudGVyIiwiZ3JhcGhpY3MiLCJhZGRCYWNrZ3JvdW5kVG9Bbm5vIiwiYW5ub0VsIiwidHJpbSIsImVsR3JpZFJlY3QiLCJjb29yZHMiLCJwbGVmdCIsInBhZGRpbmciLCJwcmlnaHQiLCJwdG9wIiwicGJvdHRvbSIsImVsUmVjdCIsImJhY2tncm91bmQiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiaWQiLCJhbm5vdGF0aW9uc0JhY2tncm91bmQiLCJhbm5vTGFiZWwiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiYW5ub3RhdGlvbnMiLCJ4YXhpcyIsInlheGlzIiwicG9pbnRzIiwibWFrZUFubm90YXRpb25EcmFnZ2FibGUiLCJhbm5vVHlwZSIsImRyYWdnYWJsZSIsIm9uIiwiZGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzZWxlY3RpemUiLCJwb2ludFNpemUiLCJyb3RhdGlvblBvaW50IiwicG9pbnRUeXBlIiwicmVzaXplIiwicmUiLCJnZXRTdHJpbmdYIiwiclgiLCJjb252ZXJ0ZWRDYXRUb051bWVyaWMiLCJjYXRlZ29yeUxhYmVscyIsImNhdEluZGV4IiwibGFiZWxzIiwieExhYmVsIiwiWEFubm90YXRpb25zIiwiaW52ZXJ0QXhpcyIsImFkZFhheGlzQW5ub3RhdGlvbiIsIm1pbiIsIm1pblkiLCJtaW5YIiwibWF4IiwibWF4WSIsIm1heFgiLCJyYW5nZSIsInlSYW5nZSIsInhSYW5nZSIsImludmVyc2VkUmV2ZXJzZWRBeGlzIiwiZGF0YUZvcm1hdFhOdW1lcmljIiwiaGVscGVycyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYXBwZW5kQ2hpbGQiLCJ0ZW1wIiwiZmlsbENvbG9yIiwidGV4dFkiLCJ0ZXh0UmVjdHMiLCJyZWwiLCJkcmF3WEF4aXNBbm5vdGF0aW9ucyIsImVsZyIsIllBbm5vdGF0aW9ucyIsImFkZFlheGlzQW5ub3RhdGlvbiIsIl9nZXRZMVkyIiwidGV4dFgiLCJ5UCIsIm1pbllBcnIiLCJ5QXhpc0luZGV4IiwicmV2ZXJzZWQiLCJkcmF3WUF4aXNBbm5vdGF0aW9ucyIsIlBvaW50QW5ub3RhdGlvbnMiLCJhZGRQb2ludEFubm90YXRpb24iLCJwb2ludFkiLCJjb25zb2xlIiwid2FybiIsImFubm9ZIiwibWFya2VyIiwib3B0c1BvaW50cyIsInBvaW50IiwiY3VzdG9tU1ZHIiwiaW5uZXJIVE1MIiwiaW1hZ2UiLCJpbWdXaWR0aCIsImltZ0hlaWdodCIsImFkZEltYWdlIiwiYXBwZW5kVG8iLCJkcmF3UG9pbnRBbm5vdGF0aW9ucyIsIm5hbWUiLCJvcHRpb25zIiwibW9udGhzIiwic2hvcnRNb250aHMiLCJkYXlzIiwic2hvcnREYXlzIiwidG9vbGJhciIsImV4cG9ydFRvU1ZHIiwiZXhwb3J0VG9QTkciLCJleHBvcnRUb0NTViIsIm1lbnUiLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25ab29tIiwiem9vbUluIiwiem9vbU91dCIsInBhbiIsInJlc2V0IiwiZW4iLCJPcHRpb25zIiwieUF4aXMiLCJzaG93Iiwic2hvd0Fsd2F5cyIsInNob3dGb3JOdWxsU2VyaWVzIiwic2VyaWVzTmFtZSIsIm9wcG9zaXRlIiwibG9nYXJpdGhtaWMiLCJ0aWNrQW1vdW50IiwiZm9yY2VOaWNlU2NhbGUiLCJmbG9hdGluZyIsImRlY2ltYWxzSW5GbG9hdCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJhbGlnbiIsInJvdGF0ZSIsImNvbG9ycyIsImZvcm1hdHRlciIsImF4aXNCb3JkZXIiLCJheGlzVGlja3MiLCJ0aXRsZSIsInRvb2x0aXAiLCJjcm9zc2hhaXJzIiwicG9pbnRBbm5vdGF0aW9uIiwieUF4aXNBbm5vdGF0aW9uIiwieEF4aXNBbm5vdGF0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwiaW5pdCIsInRleHRzIiwiaW1hZ2VzIiwic2hhcGVzIiwibG9jYWxlcyIsImRlZmF1bHRMb2NhbGUiLCJiZWZvcmVNb3VudCIsIm1vdW50ZWQiLCJ1cGRhdGVkIiwiY2xpY2siLCJtb3VzZU1vdmUiLCJsZWdlbmRDbGljayIsIm1hcmtlckNsaWNrIiwiYmVmb3JlWm9vbSIsInpvb21lZCIsInNjcm9sbGVkIiwicGFyZW50SGVpZ2h0T2Zmc2V0IiwicmVkcmF3T25QYXJlbnRSZXNpemUiLCJzcGFya2xpbmUiLCJicnVzaCIsImF1dG9TY2FsZVlheGlzIiwic3RhY2tlZCIsInN0YWNrVHlwZSIsInRvb2xzIiwiZG93bmxvYWQiLCJ6b29tIiwiem9vbWluIiwiem9vbW91dCIsImN1c3RvbUljb25zIiwiYXV0b1NlbGVjdGVkIiwiem9vbWVkQXJlYSIsInBsb3RPcHRpb25zIiwiYmFyIiwiaG9yaXpvbnRhbCIsImNvbHVtbldpZHRoIiwiYmFySGVpZ2h0IiwiZGlzdHJpYnV0ZWQiLCJzdGFydGluZ1NoYXBlIiwiZW5kaW5nU2hhcGUiLCJyYW5nZXMiLCJiYWNrZ3JvdW5kQmFyQ29sb3JzIiwiYmFja2dyb3VuZEJhck9wYWNpdHkiLCJiYWNrZ3JvdW5kQmFyUmFkaXVzIiwiZGF0YUxhYmVscyIsIm1heEl0ZW1zIiwiaGlkZU92ZXJmbG93aW5nTGFiZWxzIiwiYnViYmxlIiwibWluQnViYmxlUmFkaXVzIiwibWF4QnViYmxlUmFkaXVzIiwiY2FuZGxlc3RpY2siLCJ1cHdhcmQiLCJkb3dud2FyZCIsIndpY2siLCJ1c2VGaWxsQ29sb3IiLCJoZWF0bWFwIiwiZW5hYmxlU2hhZGVzIiwic2hhZGVJbnRlbnNpdHkiLCJyZXZlcnNlTmVnYXRpdmVTaGFkZSIsInVzZUZpbGxDb2xvckFzU3Ryb2tlIiwiY29sb3JTY2FsZSIsImludmVyc2UiLCJyYWRpYWxCYXIiLCJpbnZlcnNlT3JkZXIiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJob2xsb3ciLCJtYXJnaW4iLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJpbWFnZU9mZnNldFgiLCJpbWFnZU9mZnNldFkiLCJpbWFnZUNsaXBwZWQiLCJ0cmFjayIsInRvdGFsIiwic2VyaWVzVG90YWxzIiwicGllIiwiY3VzdG9tU2NhbGUiLCJleHBhbmRPbkNsaWNrIiwibWluQW5nbGVUb1Nob3dMYWJlbCIsImRvbnV0IiwicmFkYXIiLCJwb2x5Z29ucyIsInN0cm9rZUNvbG9ycyIsImNvbm5lY3RvckNvbG9ycyIsInNoYWRlIiwiZ3JhZGllbnRUb0NvbG9ycyIsImludmVyc2VDb2xvcnMiLCJzcmMiLCJncmlkIiwibGluZXMiLCJyb3ciLCJjb2x1bW4iLCJsZWdlbmQiLCJzaG93Rm9yU2luZ2xlU2VyaWVzIiwic2hvd0Zvclplcm9TZXJpZXMiLCJob3Jpem9udGFsQWxpZ24iLCJ0b29sdGlwSG92ZXJGb3JtYXR0ZXIiLCJ1c2VTZXJpZXNDb2xvcnMiLCJtYXJrZXJzIiwiZmlsbENvbG9ycyIsImN1c3RvbUhUTUwiLCJvbkNsaWNrIiwiaXRlbU1hcmdpbiIsInZlcnRpY2FsIiwib25JdGVtQ2xpY2siLCJ0b2dnbGVEYXRhU2VyaWVzIiwib25JdGVtSG92ZXIiLCJoaWdobGlnaHREYXRhU2VyaWVzIiwiZGlzY3JldGUiLCJvbkRibENsaWNrIiwic2hvd051bGxEYXRhUG9pbnRzIiwic2l6ZU9mZnNldCIsIm5vRGF0YSIsInZlcnRpY2FsQWxpZ24iLCJyZXNwb25zaXZlIiwic3VidGl0bGUiLCJzaGFyZWQiLCJmb2xsb3dDdXJzb3IiLCJpbnRlcnNlY3QiLCJjdXN0b20iLCJmaWxsU2VyaWVzQ29sb3IiLCJ0aGVtZSIsIm9uRGF0YXNldEhvdmVyIiwiZm9ybWF0IiwiaXRlbXMiLCJkaXNwbGF5IiwiZml4ZWQiLCJjYXRlZ29yaWVzIiwicm90YXRlQWx3YXlzIiwiaGlkZU92ZXJsYXBwaW5nTGFiZWxzIiwibWluSGVpZ2h0IiwibWF4SGVpZ2h0Iiwic2hvd0R1cGxpY2F0ZXMiLCJkYXRldGltZVVUQyIsImRhdGV0aW1lRm9ybWF0dGVyIiwieWVhciIsImRheSIsImhvdXIiLCJtaW51dGUiLCJ0aWNrUGxhY2VtZW50IiwiY29sb3JGcm9tIiwiY29sb3JUbyIsIm1vZGUiLCJwYWxldHRlIiwibW9ub2Nocm9tZSIsInNoYWRlVG8iLCJBbm5vdGF0aW9ucyIsImlzQmFySG9yaXpvbnRhbCIsInhBeGlzQW5ub3RhdGlvbnMiLCJ5QXhpc0Fubm90YXRpb25zIiwicG9pbnRzQW5ub3RhdGlvbnMiLCJ4RGl2aXNpb24iLCJkYXRhUG9pbnRzIiwiZHJhd0F4ZXNBbm5vdGF0aW9ucyIsImF4aXNDaGFydHMiLCJ5QW5ub3RhdGlvbnMiLCJ4QW5ub3RhdGlvbnMiLCJwb2ludEFubm90YXRpb25zIiwiYW5ub0FycmF5IiwiYW5ub0VsQXJyYXkiLCJlbEdyYXBoaWNhbCIsImRyYXdTaGFwZUFubm9zIiwiYWRkU2hhcGUiLCJkcmF3SW1hZ2VBbm5vcyIsImRyYXdUZXh0QW5ub3MiLCJfdGhpczMiLCJhZGRUZXh0IiwiX3BhcmFtcyRhcHBlbmRUbyIsIl9wYXJhbXMkcGFkZGluZ0xlZnQiLCJfcGFyYW1zJHBhZGRpbmdSaWdodCIsIl9wYXJhbXMkcGFkZGluZ0JvdHRvbSIsIl9wYXJhbXMkcGFkZGluZ1RvcCIsInRleHRSZWN0IiwiY2lyY2xlUmFkaXVzIiwic3ZnV2lkdGgiLCJlbFNoYXBlIiwiX3BhcmFtcyR4IiwiX3BhcmFtcyR5IiwiX3BhcmFtcyR3aWR0aCIsIl9wYXJhbXMkaGVpZ2h0IiwiX3BhcmFtcyRhcHBlbmRUbzIiLCJpbWciLCJhZGRYYXhpc0Fubm90YXRpb25FeHRlcm5hbCIsInB1c2hUb01lbW9yeSIsImNvbnRleHQiLCJhZGRBbm5vdGF0aW9uRXh0ZXJuYWwiLCJjb250ZXh0TWV0aG9kIiwiYWRkWWF4aXNBbm5vdGF0aW9uRXh0ZXJuYWwiLCJhZGRQb2ludEFubm90YXRpb25FeHRlcm5hbCIsImNoaWxkTm9kZXMiLCJheGVzQW5ubyIsImF4ZXNBbm5vTGFiZWwiLCJtZW1vcnkiLCJtZXRob2RzVG9FeGVjIiwibWV0aG9kIiwiY2xlYXJBbm5vdGF0aW9ucyIsImFubm9zIiwicXVlcnlTZWxlY3RvckFsbCIsIm0iLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVBbm5vdGF0aW9uIiwiRGF0ZVRpbWUiLCJtb250aHMzMSIsIm1vbnRoczMwIiwiZGF5c0NudE9mWWVhciIsImlzVmFsaWREYXRlIiwiZGF0ZSIsInBhcnNlRGF0ZSIsImdldFRpbWVTdGFtcCIsImRhdGVTdHIiLCJwYXJzZSIsInV0YyIsImdldFRpbWUiLCJ0b0lTT1N0cmluZyIsInN1YnN0ciIsImdldERhdGUiLCJ0aW1lc3RhbXAiLCJ0b1VUQ1N0cmluZyIsInBhcnNlZCIsImZvcm1hdERhdGUiLCJsb2NhbGUiLCJNTU1NIiwiTU1NIiwiZGRkZCIsImRkZCIsImlpIiwibGVuIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRGdWxsWWVhciIsIk0iLCJnZXRVVENNb250aCIsImdldE1vbnRoIiwiZ2V0VVRDRGF0ZSIsIkgiLCJnZXRVVENIb3VycyIsImdldEhvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldE1pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIlQiLCJjaGFyQXQiLCJ0eiIsImdldFRpbWV6b25lT2Zmc2V0IiwiSyIsImFicyIsInR6SHJzIiwidHpNaW4iLCJnZXRVVENEYXkiLCJnZXREYXkiLCJnZXRUaW1lVW5pdHNmcm9tVGltZXN0YW1wIiwidHNNaW4iLCJ0c01heCIsIm1pbkQiLCJtYXhEIiwibWluTWludXRlIiwibWF4TWludXRlIiwibWluSG91ciIsIm1heEhvdXIiLCJtaW5EYXRlIiwibWF4RGF0ZSIsIm1pbk1vbnRoIiwibWF4TW9udGgiLCJtaW5ZZWFyIiwibWF4WWVhciIsImlzTGVhcFllYXIiLCJjYWxjdWxjYXRlTGFzdERheXNPZk1vbnRoIiwic3VidHJhY3QiLCJkZXRlcm1pbmVEYXlzT2ZNb250aHMiLCJkZXRlcm1pbmVEYXlzT2ZZZWFyIiwiZGV0ZXJtaW5lUmVtYWluaW5nRGF5c09mWWVhciIsImRheU9mWWVhciIsIkRlZmF1bHRzIiwiZGVmYXVsdHMiLCJzZXJpZXNDYW5kbGVPIiwic2VyaWVzQ2FuZGxlSCIsImwiLCJzZXJpZXNDYW5kbGVMIiwic2VyaWVzQ2FuZGxlQyIsInJhbmdlQmFyIiwic3RhcnQiLCJzZXJpZXNSYW5nZVN0YXJ0IiwiZW5kIiwic2VyaWVzUmFuZ2VFbmQiLCJ5bGFiZWwiLCJ5TGJGb3JtYXR0ZXIiLCJ5TGJUaXRsZUZvcm1hdHRlciIsInN0YXJ0VmFsIiwiZW5kVmFsIiwiZGF0ZXRpbWVPYmoiLCJhcmVhIiwic3RhY2tlZDEwMCIsImV4aXN0aW5nRGF0YUxhYmVsRm9ybWF0dGVyIiwieWF4ZSIsImlzQmFyIiwidG9GaXhlZCIsImNvbnZlcnRDYXRUb051bWVyaWMiLCJjb252ZXJ0Q2F0VG9OdW1lcmljWGF4aXMiLCJjYXRzIiwiZGVmYXVsdEZvcm1hdHRlciIsInNjYXR0ZXIiLCJDb25maWciLCJyZXNwb25zaXZlT3ZlcnJpZGUiLCJjaGFydFR5cGUiLCJleHRlbmRZQXhpcyIsImV4dGVuZEFubm90YXRpb25zIiwibmV3RGVmYXVsdHMiLCJjaGFydERlZmF1bHRzIiwiY2hhcnRUeXBlcyIsImNoZWNrRm9yRGFya1RoZW1lIiwiQXBleCIsImNoZWNrRm9yQ2F0VG9OdW1lcmljWEF4aXMiLCJtZXJnZWRXaXRoRGVmYXVsdENvbmZpZyIsImhhbmRsZVVzZXJJbnB1dEVycm9ycyIsInVuc3VwcG9ydGVkWm9vbSIsIm5vdE51bWVyaWNYQXhpcyIsImlzTG9nWSIsIm5ld1lheGlzIiwiZXh0ZW5kWUF4aXNBbm5vdGF0aW9ucyIsImV4dGVuZFhBeGlzQW5ub3RhdGlvbnMiLCJleHRlbmRQb2ludEFubm90YXRpb25zIiwiRXJyb3IiLCJHbG9iYWxzIiwiaW5pdEdsb2JhbFZhcnMiLCJnbCIsInNlcmllc1JhbmdlQmFyVGltZWxpbmUiLCJzZXJpZXNQZXJjZW50Iiwic2VyaWVzWCIsInNlcmllc1oiLCJzZXJpZXNOYW1lcyIsInNlcmllc0xvZyIsInN0YWNrZWRTZXJpZXNUb3RhbHMiLCJzZXJpZXNYdmFsdWVzIiwic2VyaWVzWXZhbHVlcyIsInRpbWVzY2FsZUxhYmVscyIsIm5vTGFiZWxzUHJvdmlkZWQiLCJyZXNpemVUaW1lciIsInNlbGVjdGlvblJlc2l6ZVRpbWVyIiwicG9pbnRzQXJyYXkiLCJkYXRhTGFiZWxzUmVjdHMiLCJpc1hOdW1lcmljIiwieGF4aXNMYWJlbHNDb3VudCIsInNraXBMYXN0VGltZWxpbmVsYWJlbCIsInNraXBGaXJzdFRpbWVsaW5lbGFiZWwiLCJ4MlNwYWNlQXZhaWxhYmxlIiwiaXNEYXRhWFlaIiwiaXNNdWx0aUxpbmVYIiwiaXNNdWx0aXBsZVlBeGlzIiwiTUFYX1ZBTFVFIiwiTUlOX1ZBTFVFIiwibWF4WUFyciIsImluaXRpYWxNYXhYIiwiaW5pdGlhbE1pblgiLCJtaW5aIiwibWF4WiIsIm1pblhEaWZmIiwieUF4aXNTY2FsZSIsInhBeGlzU2NhbGUiLCJ4QXhpc1RpY2tzUG9zaXRpb25zIiwieUxhYmVsc0Nvb3JkcyIsInlUaXRsZUNvb3JkcyIsImJhclBhZEZvck51bWVyaWNBeGlzIiwicGFkSG9yaXpvbnRhbCIsInpSYW5nZSIsInhUaWNrQW1vdW50IiwiZ2xvYmFsVmFycyIsImNoYXJ0SUQiLCJjbGlja2VkIiwiY2xpZW50WCIsImNsaWVudFkiLCJyYWRhclBvbHlnb25zIiwibGFyZ2VzdFNpemUiLCJtc01heFRvdWNoUG9pbnRzIiwiaXNEaXJ0eSIsImlzRXhlY0NhbGxlZCIsImluaXRpYWxDb25maWciLCJsYXN0WEF4aXMiLCJsYXN0WUF4aXMiLCJjb2x1bW5TZXJpZXMiLCJhbGxTZXJpZXNDb2xsYXBzZWQiLCJjb2xsYXBzZWRTZXJpZXMiLCJjb2xsYXBzZWRTZXJpZXNJbmRpY2VzIiwiYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzIiwiYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzSW5kaWNlcyIsInJpc2luZ1NlcmllcyIsImNhcHR1cmVkU2VyaWVzSW5kZXgiLCJjYXB0dXJlZERhdGFQb2ludEluZGV4IiwiZ29sZGVuUGFkZGluZyIsImludmFsaWRMb2dTY2FsZSIsImlnbm9yZVlBeGlzSW5kZXhlcyIsInlBeGlzU2FtZVNjYWxlSW5kaWNlcyIsInJhZGlhbFNpemUiLCJ6b29tRW5hYmxlZCIsInBhbkVuYWJsZWQiLCJzZWxlY3Rpb25FbmFibGVkIiwibW91c2Vkb3duIiwibGFzdENsaWVudFBvc2l0aW9uIiwidmlzaWJsZVhSYW5nZSIsInlWYWx1ZURlY2ltYWwiLCJTVkdOUyIsInN2Z0hlaWdodCIsInByZXZpb3VzUGF0aHMiLCJhbGxTZXJpZXNIYXNFcXVhbFgiLCJsYXN0RHJhd25EYXRhTGFiZWxzSW5kZXhlcyIsImhhc051bGxWYWx1ZXMiLCJyb3RhdGVYTGFiZWxzIiwiZGVmYXVsdExhYmVscyIsInhMYWJlbEZvcm1hdHRlciIsInlMYWJlbEZvcm1hdHRlcnMiLCJ4YXhpc1Rvb2x0aXBGb3JtYXR0ZXIiLCJ0dEtleUZvcm1hdHRlciIsInR0VmFsIiwidHRaRm9ybWF0dGVyIiwiTElORV9IRUlHSFRfUkFUSU8iLCJ4QXhpc0xhYmVsc0hlaWdodCIsInlBeGlzTGFiZWxzV2lkdGgiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVlBeGlzWCIsInlBeGlzV2lkdGhzIiwidHJhbnNsYXRlWEF4aXNZIiwidHJhbnNsYXRlWEF4aXNYIiwiaW5pdGlhbFNlcmllcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJCYXNlIiwiQ29yZVV0aWxzIiwiZ2V0U3RhY2tlZFNlcmllc1RvdGFscyIsImdldFNlcmllc1RvdGFsQnlJbmRleCIsImFjYyIsImN1ciIsImlzU2VyaWVzTnVsbCIsInNlcmllc0hhdmVTYW1lVmFsdWVzIiwiZXZlcnkiLCJnZXRDYXRlZ29yeUxhYmVscyIsImNhdExhYmVscyIsImdldExhcmdlc3RTZXJpZXMiLCJnZXRMYXJnZXN0TWFya2VyU2l6ZSIsImdldFNlcmllc1RvdGFscyIsInNlciIsImdldFNlcmllc1RvdGFsc1hSYW5nZSIsInNlcmllc1RvdGFsc1hSYW5nZSIsImdldFBlcmNlbnRTZXJpZXMiLCJfdG90YWwiLCJfcGVyY2VudCIsImdldENhbGN1bGF0ZWRSYXRpb3MiLCJ5UmF0aW8iLCJpbnZlcnRlZFlSYXRpbyIsInhSYXRpbyIsImluaXRpYWxYUmF0aW8iLCJpbnZlcnRlZFhSYXRpbyIsInpSYXRpbyIsImJhc2VMaW5lWSIsImJhc2VMaW5lSW52ZXJ0ZWRZIiwiYmFzZUxpbmVYIiwiX2kiLCJoYXNOZWdzIiwiX2kyIiwiZ2V0TG9nU2VyaWVzIiwibG9nVmFsIiwiZ2V0TG9nWVJhdGlvcyIsInlMb2dSYXRpbyIsImxvZ1lSYW5nZSIsInNpIiwidiIsImNoZWNrQ29tYm9TZXJpZXMiLCJjb21ib0JhckNvdW50IiwiZXh0ZW5kQXJyYXlQcm9wcyIsImNvbmZpZ0luc3RhbmNlIiwiRmlsbCIsImNsaXBwZWRJbWdBcmVhIiwiY25mIiwic3ZnVyIsInN2Z0giLCJmaWxsSW1nIiwiZWxQYXR0ZXJuIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJwYXR0ZXJuSUQiLCJwYXR0ZXJuVW5pdHMiLCJlbEltYWdlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGluayIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJlbERlZnMiLCJnZXRTZXJpZXNJbmRleCIsInNlcmllc051bWJlciIsImZpbGxQYXRoIiwicGF0aEZpbGwiLCJwYXR0ZXJuRmlsbCIsImdyYWRpZW50RmlsbCIsImdldEZpbGxDb2xvcnMiLCJmaWxsVHlwZSIsImdldEZpbGxUeXBlIiwiZGVmYXVsdENvbG9yIiwiaGFuZGxlUGF0dGVybkZpbGwiLCJoYW5kbGVHcmFkaWVudEZpbGwiLCJpbWdTcmMiLCJzb2xpZCIsInBhdHRlcm5TdHJva2VXaWR0aCIsInBhdHRlcm5MaW5lQ29sb3IiLCJwZiIsInV0aWxzIiwiZ3JhZGllbnRGcm9tIiwiZ3JhZGllbnRUbyIsIk1hcmtlcnMiLCJzZXRHbG9iYWxNYXJrZXJTaXplIiwicGxvdENoYXJ0TWFya2VycyIsInBvaW50c1BvcyIsImFsd2F5c0RyYXdNYXJrZXIiLCJlbFBvaW50c1dyYXAiLCJxIiwiUG9pbnRDbGFzc2VzIiwic2hvdWxkTWFya2VyRHJhdyIsImdldE1hcmtlckNvbmZpZyIsImFkZEV2ZW50cyIsInBTdHlsZSIsImdldE1hcmtlclN0eWxlIiwicG9pbnRTdHJva2VEYXNoQXJyYXkiLCJwYXNzaXZlIiwiU2NhdHRlciIsImRyYXciLCJlbFNlcmllcyIsImVsUG9pbnRzTWFpbiIsImVsUGFyZW50Iiwic2hvdWxkRHJhdyIsImZpbmlzaFJhZGl1cyIsIkluZmluaXR5IiwiZHJhd1BvaW50IiwibWFya2VyQ29uZmlnIiwicGF0aEZpbGxDaXJjbGUiLCJzZXRUaW1lb3V0IiwiX3NwZWVkIiwicHJldlgiLCJwcmV2WSIsInByZXZSIiwicHJldlBhdGhKIiwiY3MiLCJjZW50ZXJUZXh0SW5CdWJibGUiLCJEYXRhTGFiZWxzIiwiZGF0YUxhYmVsc0NvcnJlY3Rpb24iLCJhbHdheXNEcmF3RGF0YUxhYmVsIiwiZHJhd25leHRMYWJlbCIsImxhc3REcmF3bkluZGV4IiwibGFzdERhdGFMYWJlbFJlY3QiLCJkcmF3RGF0YUxhYmVsIiwiZGF0YUxhYmVsc0NvbmZpZyIsImVsRGF0YUxhYmVsc1dyYXAiLCJnZXRUZXh0IiwiY2VudGVyVGV4dEluQnViYmxlQ29vcmRzIiwicGxvdERhdGFMYWJlbHNUZXh0Iiwib2Zmc2V0Q29ycmVjdGlvbiIsImNvcnJlY3RlZExhYmVscyIsImRhdGFMYWJlbENvbG9yIiwib2ZmWCIsIm9mZlkiLCJkYXRhTGFiZWxUZXh0IiwidGV4dFNoYWRvdyIsImFkZEJhY2tncm91bmRUb0RhdGFMYWJlbCIsImJDbmYiLCJwYWRkaW5nSCIsInBhZGRpbmdWIiwiZGF0YUxhYmVsc0JhY2tncm91bmQiLCJlbERhdGFMYWJlbHMiLCJzaG91bGRBbmltIiwiYnJpbmdGb3J3YXJkIiwiZWxEYXRhTGFiZWxzTm9kZXMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwibmV4dFNpYmxpbmciLCJTZXJpZXMiLCJsZWdlbmRJbmFjdGl2ZUNsYXNzIiwiZ2V0QWxsU2VyaWVzRWxzIiwiZ2V0U2VyaWVzQnlOYW1lIiwiaXNTZXJpZXNIaWRkZW4iLCJ0YXJnZXRFbGVtZW50IiwiaXNIaWRkZW4iLCJhZGRDb2xsYXBzZWRDbGFzc1RvU2VyaWVzIiwiaXRlcmF0ZU9uQWxsQ29sbGFwc2VkU2VyaWVzIiwidG9nZ2xlU2VyaWVzIiwibGVnZW5kSGVscGVycyIsInNob3dTZXJpZXMiLCJoaWRlU2VyaWVzIiwicmVzZXRTZXJpZXMiLCJzaG91bGRVcGRhdGVDaGFydCIsInNob3VsZFJlc2V0Wm9vbSIsInNob3VsZFJlc2V0Q29sbGFwc2VkIiwidXBkYXRlSGVscGVycyIsInJldmVydERlZmF1bHRBeGlzTWluTWF4IiwiX3VwZGF0ZVNlcmllcyIsInRvZ2dsZVNlcmllc09uSG92ZXIiLCJhbGxTZXJpZXNFbHMiLCJzZXJpZXNDbnQiLCJzZXJpZXNFbCIsImRhdGFMYWJlbEVsIiwic2UiLCJfc2UiLCJoaWdobGlnaHRSYW5nZUluU2VyaWVzIiwiYWxsSGVhdE1hcEVsZW1lbnRzIiwiYWN0aXZlSW5hY3RpdmUiLCJhY3Rpb24iLCJyZW1vdmVJbmFjdGl2ZUNsYXNzRnJvbUhvdmVyZWRSYW5nZSIsImdldEFjdGl2ZUNvbmZpZ1Nlcmllc0luZGV4IiwiaWdub3JlQmFycyIsImFjdGl2ZUluZGV4IiwiZmlyc3RBY3RpdmVTZXJpZXNJbmRleCIsImhhc0JhcnMiLCJnZXRQcmV2aW91c1BhdGhzIiwicHVzaFBhdGhzIiwic2VyaWVzRWxzIiwicGF0aHMiLCJkQXJyIiwiaGFzQXR0cmlidXRlIiwiZ2V0UGF0aHMiLCJoYW5kbGVQcmV2QnViYmxlU2NhdHRlclBhdGhzIiwiaGVhdG1hcENvbG9ycyIsImNsZWFyUHJldmlvdXNQYXRocyIsImhhbmRsZU5vRGF0YSIsIm5vRGF0YU9wdHMiLCJ0aXRsZVRleHQiLCJzZXROdWxsU2VyaWVzVG9aZXJvVmFsdWVzIiwic2wiLCJoYXNBbGxTZXJpZXNFcXVhbFgiLCJlcXVhbExlbiIsImZpbHRlcmVkU2VyWCIsImZpbHRlcmVkU2VyaWVzWCIsIkRhdGEiLCJ0d29EU2VyaWVzIiwidGhyZWVEU2VyaWVzIiwidHdvRFNlcmllc1giLCJjb3JlVXRpbHMiLCJpc011bHRpRm9ybWF0IiwiaXNGb3JtYXRYWSIsImlzRm9ybWF0MkRBcnJheSIsInNyIiwiYWN0aXZlU2VyaWVzSW5kZXgiLCJoYW5kbGVGb3JtYXQyREFycmF5IiwidHMiLCJfaiIsImhhbmRsZUZvcm1hdFhZIiwiZHQiLCJhY3RpdmVJIiwiX2oyIiwiaXNYU3RyaW5nIiwiaXNYQXJyIiwiaXNYRGF0ZSIsImlzUmFuZ2VEYXRhIiwiZmFsbGJhY2tUb0NhdGVnb3J5IiwiaGFuZGxlUmFuZ2VEYXRhIiwiaGFuZGxlUmFuZ2VEYXRhRm9ybWF0IiwicmFuZ2VVbmlxdWVzIiwic2FyciIsInNhcnJpIiwiYXJyaSIsInNyaSIsInJhbmdlMXkxIiwicmFuZ2UxeTIiLCJyYW5nZTJ5MSIsInJhbmdlMnkyIiwib3ZlcmxhcHMiLCJyYW5nZU5hbWUiLCJoYW5kbGVDYW5kbGVTdGlja0RhdGEiLCJvaGxjIiwiaGFuZGxlQ2FuZGxlU3RpY2tEYXRhRm9ybWF0IiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwidW5pcXVlS2V5cyIsInRoaW5nIiwiZmluZEluZGV4IiwiZXJyIiwic2VyT2JqIiwiX2xvb3AiLCJfajMiLCJ1SSIsInNlck8iLCJzZXJIIiwic2VyTCIsInNlckMiLCJfajQiLCJfajUiLCJwYXJzZURhdGFBeGlzQ2hhcnRzIiwieGxhYmVscyIsImhhbmRsZURhdGVzIiwiaXNEYXRlIiwiZXJyb3IiLCJzaW5nbGVBcnJheSIsInBhcnNlRGF0YU5vbkF4aXNDaGFydHMiLCJoYW5kbGVFeHRlcm5hbExhYmVsc0RhdGEiLCJzcnQiLCJlbGVtIiwiX2dlbmVyYXRlRXh0ZXJuYWxMYWJlbHMiLCJsYWJlbEFyciIsImdscyIsImdsc2kiLCJwYXJzZURhdGEiLCJleGNsdWRlQ29sbGFwc2VkU2VyaWVzSW5ZQXhpcyIsImNvcmUiLCJyZXNldEdsb2JhbHMiLCJpc011bHRpcGxlWSIsImNvbGxhcHNlZCIsIkZvcm1hdHRlcnMiLCJ0b29sdGlwS2V5Rm9ybWF0IiwieExhYmVsRm9ybWF0IiwiZGVmYXVsdEdlbmVyYWxGb3JtYXR0ZXIiLCJkZWZhdWx0WUZvcm1hdHRlciIsInNldExhYmVsRm9ybWF0dGVycyIsImxlZ2VuZEZvcm1hdHRlciIsInh5Q2hhcnRzIiwiaGVhdG1hcExhYmVsRm9ybWF0dGVycyIsInJlc3VsdCIsImxvbmdlc3QiLCJuaWNlTWF4IiwibmljZU1pbiIsIkF4ZXNVdGlscyIsImdldExhYmVsIiwiZHJhd25MYWJlbHMiLCJyYXdMYWJlbCIsInhsYkZvcm1hdHRlciIsImN1c3RvbUZvcm1hdHRlciIsImlzQm9sZCIsInhGb3JtYXQiLCJkZXRlcm1pbmVIaWdoZXN0VW5pdCIsInVuaXQiLCJoaWdoZXN0VW5pdCIsImNoZWNrRm9yT3ZlcmZsb3dpbmdMYWJlbHMiLCJsYWJlbHNMZW4iLCJkcmF3bkxhYmVsc1JlY3RzIiwicHJldiIsImNoZWNrRm9yUmV2ZXJzZWRMYWJlbHMiLCJyZXZlcnNlIiwiaXNZQXhpc0hpZGRlbiIsImRyYXdZQXhpc1RpY2tzIiwibGFiZWxzRGl2aWRlciIsImVsWWF4aXMiLCJ0WSIsImVsVGljayIsIkV4cG9ydHMiLCJmaXhTdmdTdHJpbmdGb3JJZTExIiwic3ZnRGF0YSIsIm5YbWxuc1NlZW4iLCJnZXRTdmdTdHJpbmciLCJzdmdTdHJpbmciLCJzdmciLCJjbGVhbnVwIiwieGNyb3NzaGFpcnMiLCJ5Y3Jvc3NoYWlycyIsInpvb21TZWxlY3Rpb25SZWN0cyIsInN2Z1VybCIsInN2Z0Jsb2IiLCJCbG9iIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZGF0YVVSSSIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImVsV3JhcCIsImNhbnZhc0JnIiwiZ2V0Q29udGV4dCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY2FudmciLCJDYW52ZyIsImZyb21TdHJpbmciLCJpZ25vcmVDbGVhciIsImlnbm9yZURpbWVuc2lvbnMiLCJibG9iIiwibXNUb0Jsb2IiLCJlbmNvZGVVUklDb21wb25lbnQiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwib25sb2FkIiwiZHJhd0ltYWdlIiwiX2Jsb2IiLCJpbWdVUkkiLCJ0b0RhdGFVUkwiLCJ0cmlnZ2VyRG93bmxvYWQiLCJleHBvcnRUb1BuZyIsInRoZW4iLCJtc1NhdmVPck9wZW5CbG9iIiwiX3JlZjIkY29sdW1uRGVsaW1pdGVyIiwiY29sdW1uRGVsaW1pdGVyIiwiX3JlZjIkbGluZURlbGltaXRlciIsImxpbmVEZWxpbWl0ZXIiLCJjb2x1bW5zIiwicm93cyIsImRhdGFGb3JtYXQiLCJheGVzVXRpbHMiLCJnZXRDYXQiLCJjYXQiLCJsYkZvcm1hdHRlciIsImFjdGl2ZVNlcmllcyIsImhhbmRsZUF4aXNSb3dzQ29sdW1ucyIsInNJIiwiY2kiLCJwb3AiLCJlbmNvZGVVUkkiLCJocmVmIiwiZXh0IiwiZG93bmxvYWRMaW5rIiwiYm9keSIsIlhBeGlzIiwieGF4aXNMYWJlbHMiLCJpc0NhdGVnb3J5QmFySG9yaXpvbnRhbCIsInhheGlzRm9udFNpemUiLCJ4YXhpc0ZvbnRGYW1pbHkiLCJ4YXhpc0ZvcmVDb2xvcnMiLCJ4YXhpc0JvcmRlcldpZHRoIiwieGF4aXNCb3JkZXJIZWlnaHQiLCJkcmF3WGF4aXMiLCJlbFhheGlzIiwiZWxYYXhpc1RleHRzIiwiY29sV2lkdGgiLCJ4UG9zIiwib2Zmc2V0WUNvcnJlY3Rpb24iLCJnZXRDYXRGb3JlQ29sb3IiLCJ4QXhpc0hlaWdodCIsImVsVG9vbHRpcFRpdGxlIiwiZWxYYXhpc1RpdGxlIiwiZWxYQXhpc1RpdGxlVGV4dCIsImxpbmVDb3JyZWN0aW9uIiwiZWxIb3J6TGluZSIsImRyYXdYYXhpc0ludmVyc2VkIiwiZWxZYXhpc1RleHRzIiwiY29sSGVpZ2h0IiwieVBvcyIsInlsYWJlbHMiLCJtdWx0aVkiLCJlbExhYmVsIiwibGFiZWxSb3RhdGluZ0NlbnRlciIsImVsVmVydGljYWxMaW5lIiwiZHJhd1hheGlzVGlja3MiLCJhcHBlbmRUb0VsZW1lbnQiLCJnZXRYQXhpc1RpY2tzUG9zaXRpb25zIiwieENvdW50IiwieENvdW50Rm9yQ2F0ZWdvcnlDaGFydHMiLCJfaTMiLCJ4MUNvdW50IiwieEF4aXNMYWJlbENvcnJlY3Rpb25zIiwieEF4aXMiLCJ4QXhpc1RleHRzIiwieUF4aXNUZXh0c0ludmVyc2VkIiwieEF4aXNUZXh0c0ludmVyc2VkIiwieGF0IiwidGV4dFJvdGF0aW5nQ2VudGVyIiwib2Zmc2V0SGVpZ2h0IiwidFNwYW4iLCJfeGF0IiwiX3RTcGFuIiwiZmlyc3RMYWJlbFBvc1giLCJsYXN0TGFiZWxQb3NYIiwiX3hhdDIiLCJHcmlkIiwiaXNUaW1lbGluZUJhciIsImRyYXdHcmlkQXJlYSIsImVsR3JpZCIsImRyYXdHcmlkIiwiZWxncmlkIiwicmVuZGVyR3JpZCIsImNyZWF0ZUdyaWRNYXNrIiwic3Ryb2tlU2l6ZSIsInN0cm9rZU1heFNpemUiLCJlbEdyaWRSZWN0TWFzayIsImVsR3JpZFJlY3RNYXJrZXJNYXNrIiwiaGFzQmFyIiwiYmFyV2lkdGhMZWZ0IiwiYmFyV2lkdGhSaWdodCIsIm1hcmtlclNpemUiLCJlbEdyaWRSZWN0TWFya2VyIiwiZGVmcyIsIl9kcmF3R3JpZExpbmVzIiwiX2RyYXdHcmlkTGluZSIsIl9kcmF3R3JpZEJhbmRSZWN0IiwiX2RyYXdYWUxpbmVzIiwiX3JlZjQiLCJkYXRldGltZUxpbmVzIiwiX3JlZjUiLCJ4QyIsImVsZ3JpZExpbmVzViIsImNhdGVnb3J5TGluZXMiLCJfcmVmNiIsIl94IiwiX3kiLCJfeTIiLCJfeDIiLCJ0QSIsImVsZ3JpZExpbmVzSCIsIl9kcmF3SW52ZXJ0ZWRYWUxpbmVzIiwiX3JlZjciLCJfeDMiLCJfeTMiLCJfeTQiLCJfeDQiLCJoaWRlIiwieVRpY2tBbW91bnQiLCJkcmF3R3JpZEJhbmRzIiwieEF4aXNUaWNrV2lkdGgiLCJ4YyIsIl94NSIsIl95NSIsIl94NiIsIl95NiIsIl9jIiwiUmFuZ2UiLCJuaWNlU2NhbGUiLCJ5TWluIiwieU1heCIsImRpZmYiLCJ0aWNrcyIsIk5PX01JTl9NQVhfUFJPVklERUQiLCJsaW5lYXJTY2FsZSIsInRpa3MiLCJ0ZW1wU3RlcCIsIm1hZ1BvdyIsIm1hZ01zZCIsInN0ZXBTaXplIiwibGIiLCJ1YiIsImNlaWwiLCJ2YWx1ZXNEaXZpZGVyIiwic3RlcCIsImxvZ2FyaXRobWljU2NhbGUiLCJsb2dzIiwibmljZU51bWJlciIsInNjYWxlIiwic2V0WVNjYWxlRm9ySW5kZXgiLCJub01pbk1heFByb3ZpZGVkIiwic2V0WFNjYWxlIiwic2V0TXVsdGlwbGVZU2NhbGVzIiwic2NhbGVzSW5kaWNlcyIsInNpbWlsYXJJbmRleCIsImFscmVhZHlFeGlzdHMiLCJzYW1lU2NhbGVJbk11bHRpcGxlQXhlcyIsInNpbWlsYXJJbmRpY2VzIiwic2oiLCJ1bmlxdWVTaW1pbGFySW5kaWNlcyIsInNvcnRlZEluZGljZXMiLCJzb3J0IiwiaW5kaWNlcyIsInN0cmluZ0luZGljZXMiLCJpbmQiLCJzYW1lU2NhbGVNaW5ZQXJyIiwic2FtZVNjYWxlTWF4WUFyciIsIm1pbllWYWx1ZSIsInlpIiwic2FtZVNjYWxlTWluIiwidmFsdWVPZiIsInNhbWVTY2FsZU1heCIsInNjIiwiYXV0b1NjYWxlWSIsImlzU3RhY2tlZCIsImZpcnN0WEluZGV4IiwieGkiLCJpbml0aWFsTWluIiwiaW5pdGlhbE1heCIsInN0YWNrZWRTZXIiLCJzZXJpZSIsImZpcnN0VmFsdWUiLCJ5SSIsInZhbE1pbiIsInZhbE1heCIsIndTIiwid1NJIiwiUmFuZ2UkMSIsInNjYWxlcyIsInNldFlSYW5nZSIsInNldFhSYW5nZSIsInNldFpSYW5nZSIsImdldE1pbllNYXhZIiwic3RhcnRpbmdJbmRleCIsImxvd2VzdFkiLCJoaWdoZXN0WSIsInNlcmllc01pbiIsInNlcmllc01heCIsImxvd2VzdFlJbkFsbFNlcmllcyIsIm1pbllNYXhZQXJyIiwibWluWU1heFkiLCJfc2V0U3RhY2tlZE1pbk1heCIsIm1pbm1heCIsImdldEluaXRpYWxNaW5YTWF4WCIsImNhdFNjYWxlIiwiX2hhbmRsZVNpbmdsZURhdGFQb2ludCIsIl9nZXRNaW5YRGlmZiIsIm5ld01pblgiLCJzZXRVVENEYXRlIiwibmV3TWF4WCIsInNYIiwieERpZmYiLCJzdGFja2VkUG9zcyIsInN0YWNrZWROZWdzIiwicG9zcyIsIm5lZ3MiLCJZQXhpcyIsImF4aXNGb250RmFtaWx5IiwieEF4aXNvZmZYIiwiZHJhd1lheGlzIiwieWF4aXNTdHlsZSIsInlheGlzRm9udFNpemUiLCJ5YXhpc0ZvbnRGYW1pbHkiLCJ5YXhpc0ZvbnRXZWlnaHQiLCJmaXJzdExhYmVsIiwieFBhZCIsImdldEZvcmVDb2xvciIsImZpcnN0YWJlbFJvdGF0aW5nQ2VudGVyIiwiZWxZYXhpc1RpdGxlIiwiZWxZQXhpc1RpdGxlVGV4dCIsImRyYXdZYXhpc0ludmVyc2VkIiwidGwiLCJpbnZlcnNlZFlBeGlzVGl0bGVUZXh0IiwiaW52ZXJzZWRZQXhpc0JvcmRlciIsInlBeGlzVGl0bGVSb3RhdGUiLCJ5QXhpc09wcG9zaXRlIiwieUF4aXNMYWJlbHNDb29yZCIsInlBeGlzVGl0bGVDb29yZCIsImVsWUF4aXNMYWJlbHNXcmFwIiwieUF4aXNUaXRsZSIsInhQYWRkaW5nRm9yWUF4aXNUaXRsZSIsInRpdGxlUm90YXRpbmdDZW50ZXIiLCJvcHBvc2l0ZUF4aXNDb3VudCIsInBhZGQiLCJzZXRZQXhpc1hQb3NpdGlvbiIsInlheGlzTGFiZWxDb29yZHMiLCJ4TGVmdCIsInhSaWdodCIsImxlZnRPZmZzZXRYIiwicmlnaHRPZmZzZXRYIiwibXVsdGlwbGVZcyIsInNob3VsZE5vdERyYXdBeGlzIiwiYXhpc1dpZHRoIiwic2V0WUF4aXNUZXh0QWxpZ25tZW50cyIsInlBeGlzSW5uZXIiLCJ5QXhpc1RleHRzIiwibEkiLCJFdmVudHMiLCJkb2N1bWVudEV2ZW50IiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhcmdzIiwiZXZzIiwic2V0dXBFdmVudEhhbmRsZXJzIiwiY2xpY2thYmxlQXJlYSIsImNoYXJ0Q2xhc3MiLCJldmVudExpc3QiLCJldmVudCIsIndoaWNoIiwiY2FwdHVyZSIsInNldHVwQnJ1c2hIYW5kbGVyIiwiZWxNZW51IiwiZWxBbm5vcyIsInRvdWNoZXMiLCJMb2NhbGl6YXRpb24iLCJzZXRDdXJyZW50TG9jYWxlVmFsdWVzIiwibG9jYWxlTmFtZSIsInNlbGVjdGVkTG9jYWxlIiwiQXhlcyIsImRyYXdBeGlzIiwieHlSYXRpb3MiLCJDcm9zc2hhaXJzIiwiZHJhd1hDcm9zc2hhaXJzIiwiY3Jvc3NoYWlyR3JhZGllbnQiLCJjcm9zc2hhaXJTaGFkb3ciLCJzaGFkb3dMZWZ0Iiwic2hhZG93VG9wIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPcGFjaXR5IiwieGNyb3NzaGFpcnNGaWxsIiwiZHJhd1lDcm9zc2hhaXJzIiwiY3Jvc3NoYWlyIiwieWNyb3NzaGFpcnNIaWRkZW4iLCJSZXNwb25zaXZlIiwiY2hlY2tSZXNwb25zaXZlQ29uZmlnIiwicmVzIiwiYnJlYWtwb2ludCIsIml0ZXJhdGVSZXNwb25zaXZlT3B0aW9ucyIsIm5ld09wdGlvbnMiLCJsYXJnZXN0QnJlYWtwb2ludCIsImlubmVyV2lkdGgiLCJzY3JlZW4iLCJvdmVycmlkZVJlc3BvbnNpdmVPcHRpb25zIiwibmV3Q29uZmlnIiwiVGhlbWUiLCJpc0NvbG9yRm4iLCJpc0JhckRpc3RyaWJ1dGVkIiwic2V0RGVmYXVsdENvbG9ycyIsInByZWRlZmluZWQiLCJtb25vQXJyIiwiZ2xzQ250IiwibWFpbkNvbG9yIiwicGFydCIsImdzbCIsIm5ld0NvbG9yIiwiZGVmYXVsdENvbG9ycyIsInB1c2hFeHRyYUNvbG9ycyIsImNvbG9yVHlwZXMiLCJjb2xvclNlcmllcyIsInVwZGF0ZVRoZW1lT3B0aW9ucyIsIlRpdGxlU3VidGl0bGUiLCJkcmF3VGl0bGVTdWJ0aXRsZSIsInRzQ29uZmlnIiwiSGVscGVycyQxIiwiZEN0eCIsImdldFRpdGxlU3VidGl0bGVDb29yZHMiLCJnZXRMZWdlbmRzUmVjdCIsImVsTGVnZW5kV3JhcCIsImxnUmVjdCIsImdldExhcmdlc3RTdHJpbmdGcm9tTXVsdGlBcnIiLCJ2YWxBcnIiLCJtYXhBcnJzIiwieGwiLCJpZHgiLCJtYXhBcnJMZW4iLCJtYXhBcnJJbmRleCIsIkRpbVhBeGlzIiwiZ2V0eEF4aXNMYWJlbHNDb29yZHMiLCJnZXR4QXhpc1RpbWVTY2FsZUxhYmVsc0Nvb3JkcyIsImxnV2lkdGhGb3JTaWRlTGVnZW5kcyIsImRpbUhlbHBlcnMiLCJ4TGFiZWxyZWN0IiwieEFyckxhYmVscmVjdCIsInlBeGlzV2lkdGgiLCJncmlkUGFkIiwiZ2V0Um90YXRlZFRleHRSZWN0cyIsImdldHhBeGlzVGl0bGVDb29yZHMiLCJ0b3RhbFdpZHRoUm90YXRlZCIsIm92ZXJsYXBwaW5nWExhYmVscyIsImFkZGl0aW9uYWxQYWRkaW5nWExhYmVscyIsInhheGlzTGFiZWxDb29yZHMiLCJ4dHlwZSIsImxiV2lkdGgiLCJpc0Jhck9wcG9zaXRlIiwiaXNDb2xsYXBzZWQiLCJyaWdodFBhZCIsImZpcnN0aW1lc2NhbGVMYWJlbCIsImxhc3RUaW1lc2NhbGVMYWJlbCIsImxhc3RMYWJlbFBvc2l0aW9uIiwieUF4aXNXaWR0aFJpZ2h0IiwiZmlyc3RMYWJlbFBvc2l0aW9uIiwieUF4aXNXaWR0aExlZnQiLCJ4UGFkUmlnaHQiLCJwYWRZQXhlIiwieFBhZExlZnQiLCJEaW1ZQXhpcyIsImdldHlBeGlzTGFiZWxzQ29vcmRzIiwibGFiZWxQYWQiLCJiYXJZYXhpc0xhYmVscyIsImFyckxhYmVscmVjdCIsImdldHlBeGlzVGl0bGVDb29yZHMiLCJnZXRUb3RhbFlBeGlzV2lkdGgiLCJpc0hpZGRlbllBeGlzIiwicGFkRm9yTGFiZWxUaXRsZSIsInlMYWJlbENvb3JkIiwieVRpdGxlQ29vcmQiLCJEaW1HcmlkIiwiZ3JpZFBhZEZvckNvbHVtbnNJbk51bWVyaWNBeGlzIiwiYmFyV2lkdGgiLCJzZXJpZXNMZW4iLCJncmlkUGFkRm9ydGl0bGVTdWJ0aXRsZSIsImdyaWRTaHJpbmtPZmZzZXQiLCJpc1NwYXJrbGluZSIsInRpdGxlU3VidGl0bGUiLCJub25BeGlzT3JNdWx0aVNlcmllc0NoYXJ0cyIsInRpdGxlQ29vcmRzIiwic3VidGl0bGVDb29yZHMiLCJzZXRHcmlkWFBvc0ZvckR1YWxZQXhpcyIsIkRpbWVuc2lvbnMiLCJkaW1ZQXhpcyIsImRpbVhBeGlzIiwiZGltR3JpZCIsInBsb3RDb29yZHMiLCJzZXREaW1lbnNpb25zRm9yQXhpc0NoYXJ0cyIsInNldERpbWVuc2lvbnNGb3JOb25BeGlzQ2hhcnRzIiwieHRpdGxlQ29vcmRzIiwiY29uZGl0aW9uYWxDaGVja3NGb3JBeGlzQ29vcmRzIiwieEF4aXNXaWR0aCIsImxlZ2VuZFRvcEJvdHRvbSIsIm9ianlBeGlzIiwibWluWUF4aXNXaWR0aCIsIm1heFlBeGlzV2lkdGgiLCJQaWUiLCJhbmltQmVnaW5BcnIiLCJhbmltRHVyIiwiZG9udXREYXRhTGFiZWxzIiwibGluZUNvbG9yQXJyIiwiZGVmYXVsdFNpemUiLCJmdWxsQW5nbGUiLCJkb251dFNpemUiLCJzbGljZUxhYmVscyIsInByZXZTZWN0b3JBbmdsZUFyciIsInNlY3RvckFuZ2xlQXJyIiwiYW5nbGUiLCJwcmV2VG90YWwiLCJfayIsInByZXZpb3VzQW5nbGUiLCJzY2FsZVNpemUiLCJoYWxmVyIsImhhbGZIIiwiZWxHIiwiZHJhd0FyY3MiLCJyZW5kZXJJbm5lckRhdGFMYWJlbHMiLCJob2xsb3dTaXplIiwicHJldlN0YXJ0QW5nbGUiLCJwcmV2RW5kQW5nbGUiLCJlbFBpZUFyYyIsImdldENoYW5nZWRQYXRoIiwiZWxQYXRoIiwiYWRkTGlzdGVuZXJzIiwibGFiZWxQb3NpdGlvbiIsImR1ciIsImFuaW1hdGVQYXRocyIsImFuaW1hdGVTdGFydGluZ1BvcyIsInNob3VsZFNldFByZXZQYXRocyIsInRvdGFsSXRlbXMiLCJwaWVDbGlja2VkIiwiZWxQaWVMYWJlbCIsInJldmVydERhdGFMYWJlbHNJbm5lciIsInByaW50RGF0YUxhYmVsc0lubmVyIiwicHJldkFuZ2xlIiwiZnJvbVN0YXJ0QW5nbGUiLCJ0b1N0YXJ0QW5nbGUiLCJhbmltYXRlQXJjIiwiY3VyckFuZ2xlIiwiZnJvbUFuZ2xlIiwiZ2V0UGllUGF0aCIsImR1cmluZyIsImlzVHJhY2siLCJvcmlnUGF0aCIsImFsbEVscyIsInBpZVNsaWNlIiwic3RhcnREZWciLCJzdGFydFJhZGlhbnMiLCJlbmREZWciLCJlbmRSYWRpYW5zIiwic3RhcnRJbm5lciIsImVuZElubmVyIiwibGFyZ2VBcmMiLCJwYXRoQmVnaW5uaW5nIiwic2hvd1RvdGFsIiwibGFiZWxDb2xvciIsInZhbHVlQ29sb3IiLCJsYWJlbEZvbnRTaXplIiwibGFiZWxGb250RmFtaWx5IiwibGFiZWxGb250V2VpZ2h0IiwidmFsT2Zmc2V0IiwiZWxWYWx1ZSIsInByaW50SW5uZXJMYWJlbHMiLCJsYWJlbHNDb25maWciLCJpc1RvdGFsIiwiZGF0YUxhYmVsc0dyb3VwIiwic2xpY2VPdXQiLCJzbGljZXMiLCJzZWxlY3RTbGljZSIsIm1ha2VTbGljZU91dCIsInByaW50TGFiZWwiLCJIZWxwZXJzJDIiLCJsZ0N0eCIsImdldExlZ2VuZFN0eWxlcyIsInN0eWxlc2hlZXQiLCJydWxlcyIsImNyZWF0ZVRleHROb2RlIiwiZ2V0TGVnZW5kQkJveCIsImN1cnJMZWdlbmRzV3JhcCIsImN1cnJMZWdlbmRzV3JhcFJlY3QiLCJjdXJyTGVnZW5kc1dyYXBXaWR0aCIsImN1cnJMZWdlbmRzV3JhcEhlaWdodCIsImNsd2giLCJjbHd3IiwiYXBwZW5kVG9Gb3JlaWduT2JqZWN0IiwiZWxMZWdlbmRGb3JlaWduIiwiZWxGb3JlaWduIiwic2VyaWVzVG9NYWtlVmlzaWJsZSIsImNzaSIsInJpc2VDb2xsYXBzZWRTZXJpZXMiLCJfc2VyaWVzRWwiLCJmaXJlIiwic2hvdWxkTm90SGlkZVlBeGlzIiwiYmFzZVZhbCIsInJlbW92ZUluZGV4T2ZSaXNpbmciLCJzZXJpZXNDaGlsZHJlbiIsInNlcmllc0luZGljZXMiLCJMZWdlbmQiLCJvbkxlZ2VuZENsaWNrIiwib25MZWdlbmRIb3ZlcmVkIiwiaXNCYXJzRGlzdHJpYnV0ZWQiLCJzaG93TGVnZW5kQWx3YXlzIiwiZHJhd0xlZ2VuZHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlZ2VuZEFsaWduSG9yaXpvbnRhbCIsImxlZ2VuZEFsaWduVmVydGljYWwiLCJsZWdlbmROYW1lcyIsImZpbGxjb2xvciIsImlzTGVnZW5kSW52ZXJzZWQiLCJlbE1hcmtlciIsIm1PZmZzZXRYIiwibU9mZnNldFkiLCJtSGVpZ2h0IiwibVdpZHRoIiwibUJvcmRlcldpZHRoIiwibUJvcmRlckNvbG9yIiwibUJvcmRlclJhZGl1cyIsIm1TdHlsZSIsImVsTGVnZW5kIiwiZWxMZWdlbmRUZXh0IiwidGV4dENvbG9yIiwiY2xpY2tBbGxvd2VkIiwic2V0TGVnZW5kV3JhcFhZIiwibGVnZW5kUmVjdCIsImRpbSIsInRpdGxlSCIsInN1YnRpdGxlSCIsImZpeGVkSGVpZ3RoV2lkdGgiLCJodyIsImxSZWN0IiwiZGltZW5zaW9ucyIsInRpdGxlUmVjdCIsInN1YnRpdGxlUmVjdCIsImhvdmVyT3ZlckxlZ2VuZCIsIl9zZXJpZXMiLCJpY29QYW4iLCJpY29ab29tIiwiaWNvUmVzZXQiLCJpY29ab29tSW4iLCJpY29ab29tT3V0IiwiaWNvU2VsZWN0IiwiaWNvTWVudSIsIlRvb2xiYXIiLCJldiIsInNlbGVjdGVkQ2xhc3MiLCJsb2NhbGVWYWx1ZXMiLCJjcmVhdGVUb29sYmFyIiwiY3JlYXRlRGl2IiwiZWxUb29sYmFyV3JhcCIsImVsWm9vbSIsImVsWm9vbUluIiwiZWxab29tT3V0IiwiZWxQYW4iLCJlbFNlbGVjdGlvbiIsImVsWm9vbVJlc2V0IiwiZWxNZW51SWNvbiIsImVsQ3VzdG9tSWNvbnMiLCJ0b29sYmFyQ29udHJvbHMiLCJhcHBlbmRab29tQ29udHJvbCIsImljbyIsInRvb2wiLCJpY29uIiwiem9vbVNlbGVjdGlvbkN0cmxzIiwiX2NyZWF0ZUhhbWJ1cmdlck1lbnUiLCJhZGRUb29sYmFyRXZlbnRMaXN0ZW5lcnMiLCJlbE1lbnVJdGVtcyIsIm1lbnVJdGVtcyIsImhhbmRsZVpvb21SZXNldCIsInRvZ2dsZVpvb21TZWxlY3Rpb24iLCJoYW5kbGVab29tSW4iLCJoYW5kbGVab29tT3V0IiwidG9nZ2xlUGFubmluZyIsInRvZ2dsZU1lbnUiLCJoYW5kbGVEb3dubG9hZCIsInRvZ2dsZU90aGVyQ29udHJvbHMiLCJlbmFibGVkVHlwZSIsImdldFRvb2xiYXJJY29uc1JlZmVyZW5jZSIsImVuYWJsZVpvb21QYW5Gcm9tVG9vbGJhciIsImVsMiIsInRvZ2dsZUVscyIsIm5ld01pblhNYXhYIiwiX2dldE5ld01pblhNYXhYIiwiZGlzYWJsZVpvb21JbiIsInpvb21VcGRhdGVPcHRpb25zIiwiZGlzYWJsZVpvb21PdXQiLCJzaG91bGRGbG9vciIsImJlZm9yZVpvb21SYW5nZSIsImdldEJlZm9yZVpvb21SYW5nZSIsIl91cGRhdGVPcHRpb25zIiwiem9vbUNhbGxiYWNrIiwibmV3UmFuZ2UiLCJfdGhpczQiLCJleHBydCIsIl90aGlzNSIsImNoYXJ0cyIsImdldFN5bmNlZENoYXJ0cyIsImNoIiwiZGVzdHJveSIsIlpvb21QYW5TZWxlY3Rpb24iLCJfVG9vbGJhciIsImRyYWdnZWQiLCJzdGFydFgiLCJlbmRYIiwiZHJhZ1giLCJzdGFydFkiLCJlbmRZIiwiZHJhZ1kiLCJtb3ZlRGlyZWN0aW9uIiwiem9vbVJlY3QiLCJzZWxlY3Rpb25SZWN0IiwiZ3JpZFJlY3QiLCJzbERyYWdnYWJsZVJlY3QiLCJzZWxlY3Rpb25EcmFnZ2luZyIsInByZXNlbGVjdGVkU2VsZWN0aW9uIiwiaG92ZXJBcmVhIiwic3ZnTW91c2VFdmVudHMiLCJvZmYiLCJ6b29tdHlwZSIsInNoaWZ0S2V5Iiwic2hpZnRXYXNQcmVzc2VkIiwiZmFsc2VQb3NpdGl2ZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImdyaWRSZWN0RGltIiwicGFuRHJhZ2dpbmciLCJzZWxlY3Rpb25EcmF3aW5nIiwiX2dyaWRSZWN0RGltIiwic2VsZWN0aW9uRHJhd24iLCJkZWxheWVkUGFuU2Nyb2xsZWQiLCJoaWRlU2VsZWN0aW9uUmVjdCIsIm1ha2VTZWxlY3Rpb25SZWN0RHJhZ2dhYmxlIiwicmVjdERpbSIsImNvbnN0cmFpbnQiLCJkcmF3U2VsZWN0aW9uUmVjdCIsInNjYWxpbmdBdHRycyIsInNlbGVjdGlvbldpZHRoIiwic2VsZWN0aW9uSGVpZ2h0Iiwic2VsUmVjdCIsInRpbWVySW50ZXJ2YWwiLCJjbGVhclRpbWVvdXQiLCJ0ZW1wWCIsInRlbXBZIiwieExvd2VzdFZhbHVlIiwieEhpZ2hlc3RWYWx1ZSIsInlIaWdoZXN0VmFsdWUiLCJ5TG93ZXN0VmFsdWUiLCJfeWF4aXMiLCJfeGF4aXMiLCJkZWx0YVgiLCJkZWx0YVkiLCJwYW5TY3JvbGxlZCIsInVwZGF0ZVNjcm9sbGVkQ2hhcnQiLCJVdGlscyQxIiwidG9vbHRpcENvbnRleHQiLCJ0dEN0eCIsImdldE5lYXJlc3RWYWx1ZXMiLCJob3ZlcldpZHRoIiwieERpdmlzb3IiLCJzZXJpZXNCb3VuZCIsImhvdmVyWCIsImhvdmVyWSIsIm5vdEluUmVjdCIsImNhcHR1cmVkU2VyaWVzIiwiY2xvc2VzdCIsInNlcmllc1hWYWxBcnIiLCJzZXJpZXNZVmFsQXJyIiwic2VyaWVzWFZhbCIsInNlcmllc1lWYWwiLCJjbG9zZXN0SW5NdWx0aUFycmF5IiwiY2xvc2VzdEluQXJyYXkiLCJYYXJyYXlzIiwiWWFycmF5cyIsImN1cnJJbmRleCIsImdldEZpcnN0QWN0aXZlWEFycmF5IiwiY3VyclkiLCJjdXJyWCIsImRpZmZYIiwiZGlmZlkiLCJhcnJZIiwiYXJySW5kZXgiLCJpbm5lcktleSIsIm5ld2RpZmZZIiwibmV3ZGlmZlgiLCJuZXdkaWZmIiwieGFyciIsImN1cnIiLCJpc1hvdmVybGFwIiwieFNhbWVGb3JBbGxTZXJpZXNKQXJyIiwiaXNJbml0aWFsU2VyaWVzU2FtZUxlbiIsInNhbWVMZW4iLCJnZXRCYXJzSGVpZ2h0IiwiYWxsYmFycyIsImJhcnMiLCJ0b3RhbEhlaWdodCIsImdldEVsTWFya2VycyIsImdldEFsbE1hcmtlcnMiLCJtYXJrZXJzV3JhcHMiLCJoYXNNYXJrZXJzIiwiZ2V0RWxCYXJzIiwiZ2V0SG92ZXJNYXJrZXJTaXplIiwiaG92ZXJTaXplIiwidG9nZ2xlQWxsVG9vbHRpcFNlcmllc0dyb3VwcyIsInN0YXRlIiwiYWxsVG9vbHRpcFNlcmllc0dyb3VwcyIsIkxhYmVscyIsInRvb2x0aXBVdGlsIiwiZHJhd1Nlcmllc1RleHRzIiwiX3JlZiRzaGFyZWQiLCJ0dEl0ZW1zIiwiX3JlZiRpIiwiX3JlZiRqIiwiaGFuZGxlQ3VzdG9tVG9vbHRpcCIsInRvZ2dsZUFjdGl2ZUluYWN0aXZlU2VyaWVzIiwidmFsdWVzIiwiZ2V0VmFsdWVzVG9QcmludCIsInByaW50TGFiZWxzIiwidG9vbHRpcEVsIiwiZ2V0RWxUb29sdGlwIiwidG9vbHRpcFJlY3QiLCJ0dFdpZHRoIiwidHRIZWlnaHQiLCJ4VmFsIiwielZhbCIsInhBeGlzVFRWYWwiLCJwQ29sb3IiLCJpbnZlcnNldCIsImdldEZvcm1hdHRlcnMiLCJnZXRTZXJpZXNOYW1lIiwidEluZGV4IiwiZ2VuZXJhbEZvcm1hdHRlciIsIkRPTUhhbmRsaW5nIiwidHRJdGVtc0NoaWxkcmVuIiwiY2hpbGRyZW4iLCJzaG93VG9vbHRpcFRpdGxlIiwidG9vbHRpcFRpdGxlIiwiYmx4YXhpc1Rvb2x0aXAiLCJ4YXhpc1Rvb2x0aXBUZXh0IiwidHRZTGFiZWwiLCJ0dFlWYWwiLCJ0dFpMYWJlbCIsInR0WlZhbCIsImZpcnN0VG9vbHRpcFNlcmllc0dyb3VwIiwiY3VzdG9tRm9ybWF0dGVyT3B0cyIsInpGb3JtYXR0ZXIiLCJidWZmZXJYVmFsIiwiUG9zaXRpb24iLCJtb3ZlWENyb3NzaGFpcnMiLCJnZXRFbFhDcm9zc2hhaXJzIiwieGNyb3NzaGFpcnNXaWR0aCIsInR4IiwibW92ZVhBeGlzVG9vbHRpcCIsIm1vdmVZQ3Jvc3NoYWlycyIsInhheGlzVG9vbHRpcCIsInhheGlzT2ZmWSIsInhheGlzVFRUZXh0IiwieGF4aXNUVFRleHRXaWR0aCIsIm1vdmVZQXhpc1Rvb2x0aXAiLCJ5YXhpc1RURWxzIiwieWNyb3NzaGFpcnNIaWRkZW5SZWN0WTEiLCJ5QXhpc1RUUmVjdCIsInlBeGlzVFRIZWlnaHQiLCJtb3ZlVG9vbHRpcCIsInBvaW50UiIsImdldEVsR3JpZCIsIm5ld1Bvc2l0aW9ucyIsInBvc2l0aW9uQ2hlY2tzIiwibW92ZU1hcmtlcnMiLCJhbGxQb2ludHMiLCJyZXNldFBvaW50c1NpemUiLCJlbmxhcmdlQ3VycmVudFBvaW50IiwibW92ZUR5bmFtaWNQb2ludE9uSG92ZXIiLCJwb2ludHNBcnIiLCJzZXJUeXBlIiwiZml4ZWRUb29sdGlwIiwibW92ZUR5bmFtaWNQb2ludHNPbkhvdmVyIiwicG9pbnRBcnIiLCJwY3kiLCJ0Y3kiLCJtb3ZlU3RpY2t5VG9vbHRpcE92ZXJCYXJzIiwiYmFyTGVuIiwiakJhciIsImJjeCIsImJjeSIsImJ3IiwiZGF0YVBvaW50c0RpdmlkZWRXaWR0aCIsIk1hcmtlciIsInRvb2x0aXBQb3NpdGlvbiIsImRyYXdEeW5hbWljUG9pbnRzIiwiZWxzU2VyaWVzIiwicG9pbnRzTWFpbiIsInJhbmRvbSIsImVsUG9pbnRPcHRpb25zIiwiZWxQb2ludHNHIiwibmV3UG9pbnRTaXplIiwiZW5sYXJnZVBvaW50cyIsImNvbCIsIm5ld1NpemUiLCJvbGRQb2ludFNpemUiLCJsYXN0Q2hpbGQiLCJJbnRlcnNlY3QiLCJnZXRBdHRyIiwiaGFuZGxlSGVhdFRvb2x0aXAiLCJvcHQiLCJ0b29sdGlwTGFiZWxzIiwiaGFuZGxlTWFya2VyVG9vbHRpcCIsInNob3dPbkludGVyc2VjdCIsImhhbmRsZUJhclRvb2x0aXAiLCJieCIsImJhclhZIiwiZ2V0QmFyVG9vbHRpcFhZIiwiaXNSZXZlcnNlZCIsImNsIiwiYmFyUmVjdCIsImJoIiwiZGF0YVBvaW50c0RpdmlkZWRIZWlnaHQiLCJBeGVzVG9vbHRpcCIsImRyYXdYYXhpc1Rvb2x0aXAiLCJpc0JvdHRvbSIsInRvb2x0aXBDc3NDbGFzcyIsInJlbmRlclRvIiwiZHJhd1lheGlzVG9vbHRpcCIsImlzUmlnaHQiLCJ5YXhpc09mZlgiLCJzYW1lc2NhbGVzIiwic3NpIiwiYmx5YXhpc1Rvb2x0aXAiLCJ5YXhpc1Rvb2x0aXAiLCJ5YXhpc1Rvb2x0aXBUZXh0Iiwic2V0WENyb3NzaGFpcldpZHRoIiwiY291bnQiLCJfYmFyIiwiX2JhcldpZHRoIiwiX2NvdW50IiwiaGFuZGxlWUNyb3NzaGFpciIsImRyYXdZYXhpc1Rvb2x0aXBUZXh0IiwiVG9vbHRpcCIsInRDb25maWciLCJheGVzVG9vbHRpcCIsImlzQmFyU2hhcmVkIiwiZHJhd1Rvb2x0aXAiLCJ0dEl0ZW1zQ250IiwibGVnZW5kTGFiZWxzIiwiY3JlYXRlVFRFbGVtZW50cyIsImFkZFNWR0V2ZW50cyIsImdUeHQiLCJnWVoiLCJnWVZhbFRleHQiLCJ0eHRMYWJlbCIsInR4dFZhbHVlIiwiZ1pWYWxUZXh0IiwidHh0WkxhYmVsIiwidHh0WlZhbHVlIiwiY29tbW9uQmFyIiwiY2hhcnRXaXRobWFya2VycyIsInRvb2x0aXBZIiwidG9vbHRpcFgiLCJzZXJpZXNIb3ZlclBhcmFtcyIsInZhbGlkU2hhcmVkQ2hhcnRUeXBlcyIsImFkZFBhdGhzRXZlbnRMaXN0ZW5lcnMiLCJhZGREYXRhcG9pbnRFdmVudHNMaXN0ZW5lcnMiLCJzZXJpZXNBbGwiLCJsaW5lQXJlYVBvaW50cyIsImRyYXdGaXhlZFRvb2x0aXBSZWN0IiwiZXh0ZW5kZWRPcHRzIiwic2VyaWVzSG92ZXIiLCJjaGFydEdyb3VwcyIsImdldEdyb3VwZWRDaGFydHMiLCJuZXdPcHRzIiwic2VyaWVzSG92ZXJCeUNvbnRleHQiLCJjaGFydEN0eCIsImF4aXNDaGFydHNUb29sdGlwcyIsIm5vbkF4aXNDaGFydHNUb29sdGlwcyIsImhhbmRsZU1vdXNlT3V0IiwiaXNTdGlja3lUb29sdGlwIiwiaGFuZGxlU3RpY2t5VG9vbHRpcCIsIm1hcmtlclhZIiwieXQiLCJjYXBqIiwiaGFuZGxlU3RpY2t5Q2FwdHVyZWRTZXJpZXMiLCJpZ25vcmVOdWxsIiwiZGVhY3RpdmF0ZUhvdmVyRmlsdGVyIiwiYWxsUGF0aHMiLCJkZWZhdWx0VGV4dCIsImRlY29kZVVSSUNvbXBvbmVudCIsImxlZ2VuZE5hbWUiLCJsc0luZGV4IiwiYmFyU2VyaWVzSGVpZ2h0IiwiQmFyRGF0YUxhYmVscyIsImJhckN0eCIsImhhbmRsZUJhckRhdGFMYWJlbHMiLCJiYXJZUG9zaXRpb24iLCJ2aXNpYmxlU2VyaWVzIiwicmVuZGVyZWRQYXRoIiwiZGF0YUxhYmVsc1giLCJkYXRhTGFiZWxzWSIsImRhdGFMYWJlbHNQb3MiLCJiYXJEYXRhTGFiZWxzQ29uZmlnIiwiYmFyT3B0aW9ucyIsImlzSG9yaXpvbnRhbCIsImNhbGN1bGF0ZUJhcnNEYXRhTGFiZWxzUG9zaXRpb24iLCJjYWxjdWxhdGVDb2x1bW5zRGF0YUxhYmVsc1Bvc2l0aW9uIiwiZHJhd0NhbGN1bGF0ZWREYXRhTGFiZWxzIiwib2Zmc2V0RExYIiwidmFsSXNOZWdhdGl2ZSIsIm5ld1giLCJpc1Nlcmllc05vdENvbGxhcHNlZCIsInR4UmVjdCIsInlheGlzSW5kZXgiLCJtb2RpZmllZERhdGFMYWJlbHNDb25maWciLCJIZWxwZXJzJDMiLCJpbml0VmFyaWFibGVzIiwidmlzaWJsZUkiLCJ2aXNpYmxlSXRlbXMiLCJpbml0aWFsUG9zaXRpb25zIiwieURpdmlzaW9uIiwiemVyb0giLCJ6ZXJvVyIsImdldFBhdGhGaWxsQ29sb3IiLCJjb2xvclJhbmdlIiwiZ2V0U3Ryb2tlV2lkdGgiLCJpc051bGxWYWx1ZSIsImJhckJhY2tncm91bmQiLCJiYyIsImJjb2xvciIsImdldENvbHVtblBhdGhzIiwiYmFyWFBvc2l0aW9uIiwic2hhcGVPcHRzIiwibmV3UGF0aCIsImdldFJvdW5kZWRCYXJzIiwiZ2V0UHJldmlvdXNQYXRoIiwiZW5kaW5nUGF0aCIsInN0YXJ0aW5nUGF0aCIsImdldEJhcnBhdGhzIiwiZVgiLCJfZW5kaW5nU2hhcGUiLCJfc3RhcnRpbmdTaGFwZSIsIl9pbnZlcnNlIiwiZVkiLCJCYXIiLCJiYXJIZWxwZXJzIiwieUFycmoiLCJ4QXJyaiIsImluaXRQb3NpdGlvbnMiLCJwYXRoc1BhcmFtcyIsImluZGV4ZXMiLCJkcmF3QmFyUGF0aHMiLCJkcmF3Q29sdW1uUGF0aHMiLCJyZW5kZXJTZXJpZXMiLCJsaW5lRmlsbCIsInN0cm9rZUxpbmVDYXAiLCJiYXJEYXRhTGFiZWxzIiwic3hJIiwicHAiLCJncHAiLCJCYXJTdGFja2VkIiwiX0JhciIsInByZXZZRiIsInByZXZYRiIsInByZXZZVmFsIiwicHJldlhWYWwiLCJ4QXJyakYiLCJ4QXJyalZhbCIsInlBcnJqRiIsInlBcnJqVmFsIiwieEFyclZhbHVlcyIsInlBcnJWYWx1ZXMiLCJjb21tb25QYXRoT3B0cyIsImRyYXdTdGFja2VkQmFyUGF0aHMiLCJkcmF3U3RhY2tlZENvbHVtblBhdGhzIiwicHJldkJhclciLCJiWFAiLCJzZXJpZXNWYWwiLCJwcmV2QmFySCIsImJZUCIsInByZXZZVmFsdWUiLCJfaWkiLCJDYW5kbGVTdGljayIsImNhbmRsZXN0aWNrT3B0aW9ucyIsImRyYXdDYW5kbGVTdGlja1BhdGhzIiwiaXNQb3NpdGl2ZSIsImNvbG9yUG9zIiwiY29sb3JOZWciLCJnZXRPSExDVmFsdWUiLCJsMSIsImwyIiwiSGVhdE1hcCIsIm5lZ1JhbmdlIiwicmVjdFJhZGl1cyIsInJldiIsImNoZWNrQ29sb3JSYW5nZSIsImhlYXRTZXJpZXMiLCJjb2xvclNoYWRlUGVyY2VudCIsImhlYXRDb2xvclByb3BzIiwiZGV0ZXJtaW5lSGVhdENvbG9yIiwiYW5pbWF0ZUhlYXRNYXAiLCJhbmltYXRlSGVhdENvbG9yIiwiY2FsY3VsYXRlSGVhdG1hcERhdGFMYWJlbHMiLCJyZWN0SGVpZ2h0IiwicmVjdFdpZHRoIiwidW5zaGlmdCIsImRpdmlzb3IiLCJyVG90YWwiLCJSYWRhciIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJsb25nZXN0WGF4aXNMYWJlbCIsImxhYmVsV2lkdGgiLCJkYXRhUmFkaXVzT2ZQZXJjZW50IiwiZGF0YVJhZGl1cyIsImFuZ2xlQXJyIiwieWF4aXNMYWJlbHNUZXh0c1BvcyIsImFsbFNlcmllcyIsImRhdGFQb2ludHNMZW4iLCJkaXNBbmdsZSIsImRhdGFQb2ludHNQb3MiLCJlbERhdGFQb2ludHNNYWluIiwieWF4aXNMYWJlbHMiLCJsb25nZXN0U2VyaWVzIiwiZHYiLCJnZXREYXRhUG9pbnRzUG9zIiwiY3JlYXRlUGF0aHMiLCJkZWZhdWx0UmVuZGVyZWRQYXRoT3B0aW9ucyIsImxpbmVQYXRoc1RvIiwicmVuZGVyZWRMaW5lUGF0aCIsImxpbmVQYXRoc0Zyb20iLCJyZW5kZXJlZEFyZWFQYXRoIiwiYXJlYVBhdGhzRnJvbSIsImFyZWFQYXRoc1RvIiwiZHJhd1BvbHlnb25zIiwieGF4aXNUZXh0cyIsImRyYXdYQXhpc1RleHRzIiwiZWxTIiwieWF4aXNUZXh0cyIsImxheWVycyIsInJhZGl1c1NpemVzIiwibGF5ZXJEaXMiLCJwb2x5Z29uU3RyaW5ncyIsInJhZGl1c1NpemUiLCJnZXRQb2x5Z29uUG9zIiwic3RyaW5nIiwieVRleHQiLCJkcmF3WUF4aXNUZXh0cyIsInlheGlzQ29uZmlnIiwieWF4aXNMYWJlbCIsInhheGlzTGFiZWxzQ29uZmlnIiwiZWxYQXhpc1dyYXAiLCJwb2x5Z29uUG9zIiwidGV4dFBvcyIsImdldFRleHRQb3MiLCJuZXdZIiwib3JpZ2luIiwibGluZVBhdGhUbyIsImFyZWFQYXRoVG8iLCJwb2x5Z29uU2l6ZSIsImxpbWl0IiwiZGF0YVJhZGl1c0FyciIsImRhdGFQb2ludHNQb3NBcnJheSIsImN1clBvaW50UG9zIiwiZG90c0FycmF5IiwiY3VyUG9zIiwiUmFkaWFsIiwiX1BpZSIsInRvdGFsQW5nbGUiLCJ0cmFja1N0YXJ0QW5nbGUiLCJ0cmFja0VuZEFuZ2xlIiwicmFkaWFsRGF0YUxhYmVscyIsImNvbG9yQXJyIiwiZWxUcmFja3MiLCJkcmF3VHJhY2tzIiwiYW5nbGVSYXRpbyIsImVsSG9sbG93IiwiZWxSYWRpYWxCYXJUcmFjayIsInRyYWNrQ29uZmlnIiwiaG9sbG93RmlsbElEIiwiaG9sbG93UmFkaXVzIiwiZHJhd0hvbGxvd0ltYWdlIiwiZHJhd0hvbGxvdyIsInNob3duIiwicmV2ZXJzZUxvb3AiLCJlbFJhZGlhbEJhckFyYyIsImRhdGFWYWx1ZSIsImN1cnJGdWxsQW5nbGUiLCJwcmV2RnVsbEFuZ2xlIiwiX3NoYWRvdyIsInJhbmRJRCIsImhvbGxvd0ZpbGxJbWciLCJsb2FkZWQiLCJsb2FkZXIiLCJfaW1hZ2UiLCJSYW5nZUJhciIsInJhbmdlQmFyT3B0aW9ucyIsInNydHkiLCJwb3NpdGlvbnMiLCJkZXRlY3RPdmVybGFwcGluZ0JhcnMiLCJkcmF3UmFuZ2VCYXJQYXRocyIsImRyYXdSYW5nZUNvbHVtblBhdGhzIiwibGFiZWxYIiwicm93SW5kZXgiLCJvdmVybGFwcGVkSW5kZXgiLCJnZXRSYW5nZVZhbHVlIiwiSGVscGVycyQ0IiwibGluZUN0eCIsInNhbWVWYWx1ZVNlcmllc0ZpeCIsImdTZXJpZXMiLCJjYWxjdWxhdGVQb2ludHMiLCJwdFgiLCJwdFkiLCJ4UFQxc3QiLCJjYXRlZ29yeUF4aXNDb3JyZWN0aW9uIiwiY2hlY2tQcmV2aW91c1BhdGhzIiwicGF0aEZyb21MaW5lIiwicGF0aEZyb21BcmVhIiwiYXBwZW5kUGF0aEZyb20iLCJkZXRlcm1pbmVGaXJzdFByZXZZIiwibGluZVlQb3NpdGlvbiIsInByZXZTZXJpZXNZIiwiemVyb1kiLCJMaW5lIiwiaXNQb2ludHNDaGFydCIsInBvaW50c0NoYXJ0Iiwibm9OZWdhdGl2ZXMiLCJsaW5lSGVscGVycyIsInB0eXBlIiwiX2luaXRTZXJpZVZhcmlhYmxlcyIsImxpbmVQYXRocyIsImFyZWFQYXRocyIsInBYIiwicFkiLCJmaXJzdFByZXZZIiwicGF0aHNGcm9tIiwiX2NhbGN1bGF0ZVBhdGhzRnJvbSIsIl9pdGVyYXRlT3ZlckRhdGFQb2ludHMiLCJfaGFuZGxlUGF0aHMiLCJhcmVhQm90dG9tWSIsImxpbmVQYXRoIiwiYXJlYVBhdGgiLCJfcCIsIl9yZW5kZXJlZFBhdGgiLCJpdGVyYXRpb25zIiwiaXNOdWxsIiwiY2FsY3VsYXRlZFBhdGhzIiwiX2NyZWF0ZVBhdGhzIiwiaGFuZGxlTnVsbERhdGFQb2ludHMiLCJfaGFuZGxlTWFya2Vyc0FuZExhYmVscyIsIm51bWVyaWNPckNhdFgiLCJUaW1lU2NhbGUiLCJ0aW1lU2NhbGVBcnJheSIsImNhbGN1bGF0ZVRpbWVTY2FsZVRpY2tzIiwiZGF5c0RpZmYiLCJkZXRlcm1pbmVJbnRlcnZhbCIsInRpbWVJbnRlcnZhbHMiLCJkYXlzV2lkdGhPblhBeGlzIiwiaG91cnNXaWR0aE9uWEF4aXMiLCJtaW51dGVzV2lkdGhPblhBeGlzIiwibnVtYmVyT2ZIb3VycyIsIm51bWJlck9mTWludXRlcyIsIm51bWJlck9mRGF5cyIsIm51bWJlck9mTW9udGhzIiwibnVtYmVyT2ZZZWFycyIsImZpcnN0VmFsIiwiY3VycmVudE1pbnV0ZSIsImN1cnJlbnRIb3VyIiwiY3VycmVudE1vbnRoRGF0ZSIsImN1cnJlbnREYXRlIiwiY3VycmVudE1vbnRoIiwiY3VycmVudFllYXIiLCJ0aWNrSW50ZXJ2YWwiLCJnZW5lcmF0ZVllYXJTY2FsZSIsImdlbmVyYXRlTW9udGhTY2FsZSIsImdlbmVyYXRlRGF5U2NhbGUiLCJnZW5lcmF0ZUhvdXJTY2FsZSIsImdlbmVyYXRlTWludXRlU2NhbGUiLCJhZGp1c3RlZE1vbnRoSW5UaW1lU2NhbGVBcnJheSIsImRlZmF1bHRSZXR1cm4iLCJmaWx0ZXJlZFRpbWVTY2FsZSIsIm1vZHVsbyIsInNob3VsZE5vdFNraXBVbml0Iiwic2hvdWxkTm90UHJpbnQiLCJyZWNhbGNEaW1lbnNpb25zQmFzZWRPbkZvcm1hdCIsImludmVydGVkIiwicmVmb3JtYXR0ZWRUaW1lc2NhbGVBcnJheSIsImZvcm1hdERhdGVzIiwicmVtb3ZlZE92ZXJsYXBwaW5nVFMiLCJyZW1vdmVPdmVybGFwcGluZ1RTIiwiZmlyc3RUaWNrVmFsdWUiLCJmaXJzdFRpY2tQb3NpdGlvbiIsInJlbWFpbmluZ0RheXMiLCJyZW1haW5pbmdEYXlzT2ZGaXJzdFllYXIiLCJ5ckNvdW50ZXIiLCJyZW1haW5pbmdEYXlzT2ZGaXJzdE1vbnRoIiwiX21vbnRoIiwiX3llYXIiLCJfZ2V0WWVhciIsIm1vbnRoVmFsIiwiY2hhbmdlTW9udGgiLCJkYXRlVmFsIiwibW9udGhkYXlzIiwicmVtYWluaW5nSG91cnMiLCJjaGFuZ2VEYXRlIiwicmVtYWluaW5nTWlucyIsImNoZWNrTmV4dE1vbnRoIiwiY3JlYXRlUmF3RGF0ZVN0cmluZyIsInJhdyIsImRhdGVUb0Zvcm1hdCIsImN1c3RvbUZvcm1hdCIsImR0Rm9ybWF0dGVyIiwiZGF0ZVN0cmluZyIsImVxdWFsTGFiZWxMZW5ndGhGbGFnIiwiY29uc3RhbnRMYWJlbFdpZHRoIiwiZmlsdGVyZWRBcnJheSIsInByZXZMYWJlbFdpZHRoIiwicHJldlBvcyIsIkNvcmUiLCJzZXR1cEVsZW1lbnRzIiwiY3QiLCJheGlzQ2hhcnRzQXJyVHlwZXMiLCJ4eUNoYXJ0c0FyclR5cGVzIiwiRG9jIiwic2V0U1ZHRGltZW5zaW9ucyIsImVsQW5ub3RhdGlvbnMiLCJwbG90Q2hhcnRUeXBlIiwibGluZVNlcmllcyIsImFyZWFTZXJpZXMiLCJzY2F0dGVyU2VyaWVzIiwiYnViYmxlU2VyaWVzIiwiY2FuZGxlc3RpY2tTZXJpZXMiLCJzdCIsImVsR3JhcGgiLCJiYXJTdGFja2VkIiwic2NhdHRlckxpbmUiLCJidWJibGVMaW5lIiwiX2JhclN0YWNrZWQiLCJjYW5kbGVTdGljayIsImVsRGltIiwid2lkdGhVbml0IiwiaGVpZ2h0VW5pdCIsImVsUGFyZW50RGltIiwic2hpZnRHcmFwaFBvc2l0aW9uIiwidFgiLCJyZXNpemVOb25BeGlzQ2hhcnRzIiwibGVnZW5kSGVpZ2h0IiwicmFkaWFsRWwiLCJjaGFydElubmVyRGltZW5zaW9ucyIsImVsUmFkaWFsUmVjdCIsIm5ld0hlaWdodCIsImNvcmVDYWxjdWxhdGlvbnMiLCJyZXNldHh5VmFsdWVzIiwiZ2xvYmFsT2JqIiwieHlTZXR0aW5ncyIsIl9jcm9zc2hhaXJzIiwiZm9ybWF0dGVkVGltZVNjYWxlIiwiaXNGaW5pdGUiLCJ0YXJnZXRzIiwidGFyZ2V0Q2hhcnQiLCJBcGV4Q2hhcnRzIiwiZ2V0Q2hhcnRCeUlEIiwiYnJ1c2hTb3VyY2UiLCJ1cGRhdGVTb3VyY2VDaGFydCIsIlVwZGF0ZUhlbHBlcnMiLCJyZWRyYXciLCJ1cGRhdGVTeW5jZWRDaGFydHMiLCJvdmVyd3JpdGVJbml0aWFsQ29uZmlnIiwidXBkYXRlIiwibmV3U2VyaWVzIiwib3ZlcndyaXRlSW5pdGlhbFNlcmllcyIsImV4aXN0aW5nU2VyaWVzIiwiX2V4dGVuZFNlcmllcyIsInRvZ2dsZURhdGFQb2ludFNlbGVjdGlvbiIsImZvcmNlWEF4aXNVcGRhdGUiLCJmb3JjZVlBeGlzVXBkYXRlIiwicm9vdCIsImRlZmluZSIsImdsb2JhbFJlZiIsInN1cHBvcnRlZCIsInBhcnNlciIsInByZXBhcmUiLCJucyIsInhtbG5zIiwic3ZnanMiLCJkaWQiLCJlaWQiLCJjYXBpdGFsaXplIiwibW9kdWxlcyIsIm1ldGhvZHMiLCJTZXQiLCJpbmhlcml0IiwiaW52ZW50IiwiaW5pdGlhbGl6ZXIiLCJjb25zdHJ1Y3QiLCJDb250YWluZXIiLCJhZG9wdCIsIm5vZGVOYW1lIiwiU1ZHRWxlbWVudCIsIk5lc3RlZCIsIkdyYWRpZW50IiwiRWxlbWVudCIsIm5hbWVzcGFjZSIsInNldERhdGEiLCJkb2N1bWVudEVsZW1lbnQiLCJuZXN0ZWQiLCJwb2x5IiwicG9seWxpbmUiLCJyZWdleCIsIm51bWJlckFuZFVuaXQiLCJyZWZlcmVuY2UiLCJ0cmFuc2Zvcm1zIiwid2hpdGVzcGFjZSIsImlzSGV4IiwiaXNSZ2IiLCJpc0NzcyIsImlzQmxhbmsiLCJpc1BlcmNlbnQiLCJpc0ltYWdlIiwiZGVsaW1pdGVyIiwiaHlwaGVuIiwicGF0aExldHRlcnMiLCJpc1BhdGhMZXR0ZXIiLCJudW1iZXJzV2l0aERvdHMiLCJkb3RzIiwiYmxvY2siLCJpbCIsImZpbHRlclNWR0VsZW1lbnRzIiwibm9kZXMiLCJDb2xvciIsImV4ZWMiLCJmdWxsSGV4IiwidG9IZXgiLCJjb21wVG9IZXgiLCJ0b1JnYiIsImJyaWdodG5lc3MiLCJtb3JwaCIsImRlc3RpbmF0aW9uIiwiaXNDb2xvciIsImZhbGxiYWNrIiwiUG9pbnRBcnJheSIsInBhdGhIYW5kbGVycyIsInAwIiwiTCIsIlYiLCJDIiwiUSIsIloiLCJtbGh2cXRjc2EiLCJqbCIsInRvVXBwZXJDYXNlIiwiUGF0aEFycmF5IiwiYXJyYXlUb1N0cmluZyIsImJveCIsInNvdXJjZUFycmF5IiwiZGVzdGluYXRpb25BcnJheSIsInBhdGhBcnJheSIsInBhcmFtQ250IiwicGF0aFJlZ1JlcGxhY2UiLCJQb2ludCIsInRvSlNPTiIsInBsdXMiLCJudW1iZXIiLCJtaW51cyIsInRpbWVzIiwiZGl2aWRlIiwiX3N0cm9rZSIsIl9ldmVudCIsImNlbnRlciIsIl93aWR0aCIsIl9oZWlnaHQiLCJwcm9wb3J0aW9uYWxTaXplIiwid3JpdGVEYXRhVG9Eb20iLCJhc3NpZ25OZXdJZCIsImNsb25lTm9kZSIsImFmdGVyIiwicmVtb3ZlRWxlbWVudCIsImFkZFRvIiwicHV0IiwicHV0SW4iLCJfaWQiLCJ2aXNpYmxlIiwiaGFzQ2xhc3MiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJnZXQiLCJtYXRjaGVzIiwiZG9jIiwicGFyZW50cyIsInNlbGVjdG9yIiwiX21hdGNoZXMiLCJuYXRpdmUiLCJfc3ZnIiwid2VsbCIsIlBhcmVudCIsImVhY2giLCJyZW1vdmVBdHRyaWJ1dGUiLCJpcyIsIl9pcyIsIl8iLCJNb3JwaE9iaiIsIlNpdHVhdGlvbiIsInJldmVyc2luZyIsImR1cmF0aW9uIiwiZmluaXNoIiwiZWFzZSIsImxvb3AiLCJsb29wcyIsIm9uY2UiLCJGWCIsIl90YXJnZXQiLCJzaXR1YXRpb25zIiwic2l0dWF0aW9uIiwicGF1c2VkIiwibGFzdFBvcyIsImFic1BvcyIsInF1ZXVlIiwidGltZVRvQWJzUG9zIiwiYWJzUG9zVG9UaW1lIiwic3RhcnRBbmltRnJhbWUiLCJzdG9wQW5pbUZyYW1lIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInN0YXJ0Q3VycmVudCIsImluaXRBbmltYXRpb25zIiwic2hpZnQiLCJkZXF1ZXVlIiwiaW5pdGlhbFRyYW5zZm9ybWF0aW9uIiwibWF0cml4aWZ5IiwiY2xlYXJRdWV1ZSIsImNsZWFyQ3VycmVudCIsImp1bXBUb0VuZCIsImF0RW5kIiwibGFzdCIsIndyYXBwZXIiLCJkZXRhaWwiLCJfY2FsbFN0YXJ0IiwiZWFzZWQiLCJpZ25vcmVUaW1lIiwiYWJzUG9zSW50IiwibGFzdExvb3AiLCJCb29sZWFuIiwiZWFjaEF0IiwiTWF0cml4IiwibXVsdGlwbHkiLCJ1bmRvIiwiZXh0cmFjdCIsIm1hdHJpeCIsImlzRWFzZWQiLCJfZGVsYXkiLCJyZWFsIiwibW9ycGhBcnJheSIsIkJveCIsImZ1bGxCb3giLCJCQm94IiwidG9wUGFyZW50IiwiU2hhcGUiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiYXJyYXlUb01hdHJpeCIsImFiY2RlZiIsInB4IiwiZGVsdGFUcmFuc2Zvcm1Qb2ludCIsInB5Iiwic2tld1giLCJhdGFuMiIsInRyYW5zZm9ybWVkWCIsInNxcnQiLCJ0cmFuc2Zvcm1lZFkiLCJyb3RhdGlvbiIsInBhcnNlTWF0cml4IiwidHJhbnNsYXRlIiwiY3JlYXRlU1ZHTWF0cml4IiwiZmxvYXQzMlN0cmluZyIsImN0bSIsImdldENUTSIsInNjcmVlbkNUTSIsImdldFNjcmVlbkNUTSIsImF0dHJpYnV0ZXMiLCJub2RlVmFsdWUiLCJ2XyIsImxlYWRpbmciLCJyZWJ1aWxkIiwidW50cmFuc2Zvcm0iLCJrdiIsInRvUGFyZW50IiwicEN0bSIsInRvRG9jIiwiVHJhbnNmb3JtYXRpb24iLCJpbnZlcnNlZCIsIlRyYW5zbGF0ZSIsImNzc1RleHQiLCJjYW1lbENhc2UiLCJoYXMiLCJmaXJzdCIsImRlZXAiLCJjbGVhciIsImhhc0NoaWxkTm9kZXMiLCJfZGVmcyIsInVuZ3JvdXAiLCJkZXB0aCIsIkRlZnMiLCJmbGF0dGVuIiwiVmlld0JveCIsImxpc3RlbmVycyIsImhhbmRsZXJNYXAiLCJsaXN0ZW5lcklkIiwibGlzdGVuZXIiLCJiaW5kaW5nIiwiX3N2Z2pzTGlzdGVuZXJJZCIsImxpc3RlbmVyXyIsImV2ZW50XyIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiY2FuY2VsYWJsZSIsImdldEVsZW1lbnRCeUlkIiwidmVyc2lvbiIsIlN0b3AiLCJQYXR0ZXJuIiwic3ltYm9sIiwiVXNlIiwiX2VsZW1lbnQiLCJmaWxlIiwidXNlIiwiUmVjdCIsIkNpcmNsZSIsIl9yeCIsIl9yeSIsIkVsbGlwc2UiLCJlbGxpcHNlIiwiX3J4MiIsIl9yeTIiLCJfd2lkdGgyIiwiX2hlaWdodDIiLCJ0b0xpbmUiLCJQb2x5bGluZSIsIlBvbHlnb24iLCJfYXJyYXkiLCJfd2lkdGgzIiwiX2hlaWdodDMiLCJQYXRoIiwibG9hZCIsInVybCIsIl9sb2FkZWQiLCJyYXRpbyIsIl9lcnJvciIsIlRleHQiLCJfcmVidWlsZCIsIl9idWlsZCIsIl90ZXh0Iiwibm9kZVR5cGUiLCJuZXdMaW5lZCIsImJ1aWxkIiwiX3NpemUiLCJ0ZXh0UGF0aCIsImJsYW5rTGluZU9mZnNldCIsImR5IiwiX3RleHQyIiwiVHNwYW4iLCJfdGV4dDMiLCJkeCIsIl9keCIsIl9keSIsIlRleHRQYXRoIiwic3VnYXIiLCJwcmVmaXgiLCJleHRlbnNpb24iLCJnZXRUb3RhbExlbmd0aCIsInBvaW50QXQiLCJnZXRQb2ludEF0TGVuZ3RoIiwiZWxlbWVudHMiLCJzZXQiLCJyZW1lbWJlciIsImZvcmdldCIsIl9tZW1vcnkiLCJpZEZyb21SZWZlcmVuY2UiLCJxdWVyeSIsIm1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsImNvbXAiLCJDdXN0b21FdmVudFBvbHkiLCJidWJibGVzIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJiYWNrZ3JvdW5kQWxwaGEiLCJhdXRvU2V0SW4iLCJpbjEiLCJpbjIiLCJCbGVuZEVmZmVjdCIsImNvbG9yTWF0cml4IiwiQ29sb3JNYXRyaXhFZmZlY3QiLCJjb252b2x2ZU1hdHJpeCIsIkNvbnZvbHZlTWF0cml4RWZmZWN0IiwiY29tcG9uZW50cyIsIkNvbXBvbmVudFRyYW5zZmVyRWZmZWN0Iiwib3BlcmF0b3IiLCJDb21wb3NpdGVFZmZlY3QiLCJGbG9vZEVmZmVjdCIsIk9mZnNldEVmZmVjdCIsIkltYWdlRWZmZWN0IiwiTWVyZ2VFZmZlY3QiLCJHYXVzc2lhbkJsdXJFZmZlY3QiLCJtb3JwaG9sb2d5IiwiTW9ycGhvbG9neUVmZmVjdCIsImRpZmZ1c2VMaWdodGluZyIsInN1cmZhY2VTY2FsZSIsImRpZmZ1c2VDb25zdGFudCIsImtlcm5lbFVuaXRMZW5ndGgiLCJEaWZmdXNlTGlnaHRpbmdFZmZlY3QiLCJkaXNwbGFjZW1lbnRNYXAiLCJ4Q2hhbm5lbFNlbGVjdG9yIiwieUNoYW5uZWxTZWxlY3RvciIsIkRpc3BsYWNlbWVudE1hcEVmZmVjdCIsInNwZWN1bGFyTGlnaHRpbmciLCJzcGVjdWxhckV4cG9uZW50IiwiU3BlY3VsYXJMaWdodGluZ0VmZmVjdCIsInRpbGUiLCJUaWxlRWZmZWN0IiwidHVyYnVsZW5jZSIsImJhc2VGcmVxdWVuY3kiLCJudW1PY3RhdmVzIiwic2VlZCIsInN0aXRjaFRpbGVzIiwiVHVyYnVsZW5jZUVmZmVjdCIsIkVmZmVjdCIsImVmZmVjdCIsIlBhcmVudEVmZmVjdCIsImNoYWluaW5nRWZmZWN0cyIsIkNoaWxkRWZmZWN0IiwiZWZmZWN0cyIsIm5vcm1hbGlzZU1hdHJpeCIsIm9yZGVyIiwia2VybmVsTWF0cml4IiwibGlzdFN0cmluZyIsInBhcmVudEVmZmVjdHMiLCJ0aGF0IiwiTWVyZ2VOb2RlIiwiY29tcG9udGVudHMiLCJjaGlsZEVmZmVjdHMiLCJkaXN0YW50TGlnaHQiLCJhemltdXRoIiwiZWxldmF0aW9uIiwicG9pbnRMaWdodCIsInNwb3RMaWdodCIsInBvaW50c0F0WCIsInBvaW50c0F0WSIsInBvaW50c0F0WiIsIm1lcmdlTm9kZSIsImZvcmVhY2giLCJwcm90byIsInNlcGlhdG9uZSIsInN0YXJ0QXJyIiwiZGVzdEFyciIsInN0YXJ0T2Zmc2V0TSIsImRlc3RPZmZzZXRNIiwic3RhcnRPZmZzZXROZXh0TSIsImRlc3RPZmZzZXROZXh0TSIsImZpbmROZXh0TSIsImRlc3QiLCJoYW5kbGVCbG9jayIsInVuZGVmaW5lZCQxIiwic3RhcnRBcnJUZW1wIiwiZGVzdEFyclRlbXAiLCJwb3NTdGFydCIsInBvc0Rlc3QiLCJzaW1wbHlmeSIsInRvQmV6aWVyZSIsInNldFBvc0FuZFJlZmxlY3Rpb24iLCJyZWZsZWN0aW9uIiwicmV0VmFsIiwiYXJjVG9CZXppZXJlIiwieEF4aXNSb3RhdGlvbiIsIkEiLCJwcmltZWRDb29yZCIsImxhbWJkYSIsIm1hdCIsImNTcXVhcmUiLCJPIiwiT0EiLCJPQiIsInRldGFTdGFydCIsInRldGFFbmQiLCJkZWx0YVRldGEiLCJuYlNlY3RvcnMiLCJhcmNTZWdQb2ludHMiLCJzaW5BbmdsZSIsImNvc0FuZ2xlIiwicHQiLCJhY29zIiwidGFuIiwiRHJhZ0hhbmRsZXIiLCJ0cmFuc2Zvcm1Qb2ludCIsIm1hdHJpeFRyYW5zZm9ybSIsInJib3giLCJidXR0b25zIiwiZGVmYXVsdFByZXZlbnRlZCIsInByZXZlbnREZWZhdWx0IiwiY3JlYXRlU1ZHUG9pbnQiLCJhbmNob3JPZmZzZXQiLCJzdGFydFBvaW50cyIsImRyYWciLCJneCIsImd5Iiwic25hcFRvR3JpZCIsImRyYWdIYW5kbGVyIiwiU2VsZWN0SGFuZGxlciIsInBvaW50U2VsZWN0aW9uIiwiaXNTZWxlY3RlZCIsInJlY3RTZWxlY3Rpb24iLCJwb2ludHNMaXN0IiwibHQiLCJydCIsInJiIiwicG9pbnRDb29yZCIsInNldHRpbmciLCJpc1BvaW50Q2VudGVyZWQiLCJwb2ludENvb3JkcyIsInNldHRpbmdzIiwicG9pbnRzTGlzdHMiLCJvcHRpb24iLCJwb2ludHNFeGNsdWRlIiwiZGVlcFNlbGVjdCIsInNlbGVjdFBvaW50cyIsInNlbGVjdFJlY3QiLCJvYnNlcnZlIiwiZHJhd1BvaW50cyIsImdldFBvaW50QXJyYXkiLCJjdXJyaWVkRXZlbnQiLCJyZXR1cm5WYWx1ZSIsInBhZ2VYIiwicGFnZVkiLCJjbGFzc1BvaW50cyIsInVwZGF0ZVBvaW50U2VsZWN0aW9uIiwidXBkYXRlUmVjdFNlbGVjdGlvbiIsImdldE1vc2VEb3duRnVuYyIsImV2ZW50TmFtZSIsImNsYXNzUmVjdCIsImVuYW1lIiwibW5hbWUiLCJwb2ludEVsZW1lbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZXJJbnN0IiwiZGlzY29ubmVjdCIsInNlbGVjdEhhbmRsZXIiLCJSZXNpemVIYW5kbGVyIiwicGFyYW1ldGVycyIsImxhc3RVcGRhdGVDYWxsIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsIl9leHRyYWN0UG9zaXRpb24iLCJ0eFB0IiwiY2FsYyIsInNuYXAiLCJjaGVja0FzcGVjdFJhdGlvIiwiY3VycmVudCIsInNBbmdsZSIsInBBbmdsZSIsInNuYXBUb0FuZ2xlIiwiZG9uZSIsImZsYWciLCJwb2ludENvb3Jkc1kiLCJjb25zdHJhaW50VG9Cb3giLCJvcmdYIiwib3JnWSIsImlzUmV2ZXJzZSIsInNhdmVBc3BlY3RSYXRpbyIsInVwZGF0ZWRTbmFwIiwiYXNwZWN0UmF0aW8iLCJuZXdXIiwibmV3SCIsIm5ld0FzcGVjdFJhdGlvIiwic3R5bGVJbmplY3QiLCJjc3MiLCJyZWYiLCJpbnNlcnRBdCIsImhlYWQiLCJzdHlsZVNoZWV0IiwicmVzZXRUcmlnZ2VycyIsInRyaWdnZXJzIiwiX19yZXNpemVUcmlnZ2Vyc19fIiwiZXhwYW5kIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjb250cmFjdCIsImxhc3RFbGVtZW50Q2hpbGQiLCJleHBhbmRDaGlsZCIsInNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsIm9mZnNldFdpZHRoIiwiY2hlY2tUcmlnZ2VycyIsIl9fcmVzaXplTGFzdF9fIiwic2Nyb2xsTGlzdGVuZXIiLCJfX3Jlc2l6ZVJBRl9fIiwiY2FuY2VsRnJhbWUiLCJyZXF1ZXN0RnJhbWUiLCJfX3Jlc2l6ZUxpc3RlbmVyc19fIiwicmFmIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsImFuaW1hdGlvbiIsImFuaW1hdGlvbnN0YXJ0ZXZlbnQiLCJkb21QcmVmaXhlcyIsInN0YXJ0RXZlbnRzIiwiZWxtIiwiYW5pbWF0aW9uTmFtZSIsImFkZFJlc2l6ZUxpc3RlbmVyIiwicmVtb3ZlUmVzaXplTGlzdGVuZXIiLCJJbml0Q3R4VmFyaWFibGVzIiwiaW5pdE1vZHVsZXMiLCJwdWJsaWNNZXRob2RzIiwiYXhlcyIsImxvY2FsaXphdGlvbiIsImZvcm1hdHRlcnMiLCJ6b29tUGFuU2VsZWN0aW9uIiwiRGVzdHJveSIsImNsZWFyRG9tRWxlbWVudHMiLCJraWxsU1ZHIiwiZG9tRWxzIiwiQXBleENoYXJ0cyQxIiwiaW5pdEN0eCIsIndpbmRvd1Jlc2l6ZUhhbmRsZXIiLCJfd2luZG93UmVzaXplIiwicmVuZGVyIiwicmVqZWN0IiwiX2NoYXJ0SW5zdGFuY2VzIiwic2V0TG9jYWxlIiwiX3BhcmVudFJlc2l6ZUNhbGxiYWNrIiwiZ3JhcGhEYXRhIiwibW91bnQiLCJjb21ibyIsImVsSW5uZXIiLCJ0b29sc0FyciIsInVwZGF0ZU9wdGlvbnMiLCJ1cGRhdGVTZXJpZXMiLCJhcHBlbmRTZXJpZXMiLCJuZXdTZXJpZSIsImFwcGVuZERhdGEiLCJuZXdEYXRhIiwiYWxsQ2hhcnRzIiwiZ2V0Q2hhcnRBcmVhIiwiZ2V0U2VyaWVzVG90YWxYUmFuZ2UiLCJnZXRIaWdoZXN0VmFsdWVJblNlcmllcyIsImdldExvd2VzdFZhbHVlSW5TZXJpZXMiLCJnZXRTZXJpZXNUb3RhbCIsImV4cCIsInBhcGVyIiwiX3RoaXM2IiwiaW5pdE9uTG9hZCIsImFwZXhDaGFydCIsIl9sZW4iLCJfa2V5IiwiQ2hhcnRzIiwiUmVhY3QiLCJjcmVhdGVSZWYiLCJjaGFydFJlZiIsInNldFJlZiIsImdldENvbmZpZyIsInByZXZQcm9wcyIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImlzUmVxdWlyZWQiLCJhbnkiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQyxVQUFVQSxNQUFWLENBQWtCQyxPQUFsQixDQUEyQixDQUMxQixNQUErREMsTUFBTSxDQUFDQyxPQUFQLENBQWlCRixPQUFPLEVBQXZGLENBQ0EsU0FEQSxDQUdELENBSkEsRUFJQyxJQUpELENBSVEsVUFBWSxDQUFFLGFBRXJCLFFBQVNHLFFBQVQsQ0FBaUJDLEdBQWpCLENBQXNCLENBQ3BCLDBCQUVBLEdBQUksTUFBT0MsT0FBUCxHQUFrQixVQUFsQixFQUFnQyxNQUFPQSxPQUFNLENBQUNDLFFBQWQsR0FBMkIsUUFBL0QsQ0FBeUUsQ0FDdkVILE9BQU8sQ0FBRyxpQkFBVUMsR0FBVixDQUFlLENBQ3ZCLE1BQU8sT0FBT0EsSUFBZCxDQUNELENB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Z0IsS0FBZCxDQUFvQnNCLE9BQWxDLENBQTJDO0FBRTNDLE9BQVFBLE9BQVIsRUFDRSxJQUFLLFVBQUwsQ0FDRSxLQUFLM0osTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENBQUMsU0FBRCxDQUFZLFNBQVosQ0FBdUIsU0FBdkIsQ0FBa0MsU0FBbEMsQ0FBNkMsU0FBN0MsQ0FBZCxDQUNBLE1BRUYsSUFBSyxVQUFMLENBQ0UsS0FBS0EsTUFBTCxDQUFjLENB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S2pCeG9GLFNBQU8sRUFBRXVvRixpREFBUyxDQUFDL3JHLE1BQVYsQ0FBaUJnc0c7QUFMVCxDQUFuQjtBQVFBVixNQUFNLENBQUNZLFlBQVAsR0FBc0I7QUFDcEI5K0YsTUFBSSxFQUFFLE1BRGM7QUFFcEJsRixPQUFLLEVBQUUsTUFGYTtBQUdwQkMsUUFBTSxFQUFFO0FBSFksQ0FBdEI7QUFNZW1qRyxxRUFBZiIsImZpbGUiOiJzdGF0aWMvY2h1bmtzLzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFwZXhDaGFydHMgdjMuMTcuMFxuICogKGMpIDIwMTgtMjAyMCBKdW5lZCBDaGhpcGFcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5BcGV4Q2hhcnRzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3R5cGVvZihvYmopO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgICAgaWYgKGkgJSAyKSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgICByZXR1cm4gbztcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICAgIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgIHJldHVybiBjYWxsO1xuICAgIH1cblxuICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICAgIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICAgIHJldHVybiBhcnIyO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICAgIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xuICB9XG5cbiAgLypcbiAgICoqIEdlbmVyaWMgZnVuY3Rpb25zIHdoaWNoIGFyZSBub3QgZGVwZW5kZW50IG9uIEFwZXhDaGFydHNcbiAgICovXG4gIHZhciBVdGlscyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXRpbHMoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXRpbHMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhVdGlscywgW3tcbiAgICAgIGtleTogXCJzaGFkZVJHQkNvbG9yXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hhZGVSR0JDb2xvcihwZXJjZW50LCBjb2xvcikge1xuICAgICAgICB2YXIgZiA9IGNvbG9yLnNwbGl0KCcsJyksXG4gICAgICAgICAgICB0ID0gcGVyY2VudCA8IDAgPyAwIDogMjU1LFxuICAgICAgICAgICAgcCA9IHBlcmNlbnQgPCAwID8gcGVyY2VudCAqIC0xIDogcGVyY2VudCxcbiAgICAgICAgICAgIFIgPSBwYXJzZUludChmWzBdLnNsaWNlKDQpLCAxMCksXG4gICAgICAgICAgICBHID0gcGFyc2VJbnQoZlsxXSwgMTApLFxuICAgICAgICAgICAgQiA9IHBhcnNlSW50KGZbMl0sIDEwKTtcbiAgICAgICAgcmV0dXJuICdyZ2IoJyArIChNYXRoLnJvdW5kKCh0IC0gUikgKiBwKSArIFIpICsgJywnICsgKE1hdGgucm91bmQoKHQgLSBHKSAqIHApICsgRykgKyAnLCcgKyAoTWF0aC5yb3VuZCgodCAtIEIpICogcCkgKyBCKSArICcpJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2hhZGVIZXhDb2xvclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNoYWRlSGV4Q29sb3IocGVyY2VudCwgY29sb3IpIHtcbiAgICAgICAgdmFyIGYgPSBwYXJzZUludChjb2xvci5zbGljZSgxKSwgMTYpLFxuICAgICAgICAgICAgdCA9IHBlcmNlbnQgPCAwID8gMCA6IDI1NSxcbiAgICAgICAgICAgIHAgPSBwZXJjZW50IDwgMCA/IHBlcmNlbnQgKiAtMSA6IHBlcmNlbnQsXG4gICAgICAgICAgICBSID0gZiA+PiAxNixcbiAgICAgICAgICAgIEcgPSBmID4+IDggJiAweDAwZmYsXG4gICAgICAgICAgICBCID0gZiAmIDB4MDAwMGZmO1xuICAgICAgICByZXR1cm4gJyMnICsgKDB4MTAwMDAwMCArIChNYXRoLnJvdW5kKCh0IC0gUikgKiBwKSArIFIpICogMHgxMDAwMCArIChNYXRoLnJvdW5kKCh0IC0gRykgKiBwKSArIEcpICogMHgxMDAgKyAoTWF0aC5yb3VuZCgodCAtIEIpICogcCkgKyBCKSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xuICAgICAgfSAvLyBiZWF1dGlmdWwgY29sb3Igc2hhZGluZyBibGVuZGluZyBjb2RlXG4gICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU1NjAyNDgvcHJvZ3JhbW1hdGljYWxseS1saWdodGVuLW9yLWRhcmtlbi1hLWhleC1jb2xvci1vci1yZ2ItYW5kLWJsZW5kLWNvbG9yc1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInNoYWRlQ29sb3JcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaGFkZUNvbG9yKHAsIGNvbG9yKSB7XG4gICAgICAgIGlmIChjb2xvci5sZW5ndGggPiA3KSByZXR1cm4gdGhpcy5zaGFkZVJHQkNvbG9yKHAsIGNvbG9yKTtlbHNlIHJldHVybiB0aGlzLnNoYWRlSGV4Q29sb3IocCwgY29sb3IpO1xuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiBcImJpbmRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBiaW5kKGZuLCBtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNPYmplY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc09iamVjdChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICYmIF90eXBlb2YoaXRlbSkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGl0ZW0pICYmIGl0ZW0gIT0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGlzdFRvQXJyYXlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0VG9BcnJheShsaXN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgYXJyYXkgPSBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFycmF5W2ldID0gbGlzdFtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0gLy8gdG8gZXh0ZW5kIGRlZmF1bHRzIHdpdGggdXNlciBvcHRpb25zXG4gICAgICAvLyBjcmVkaXQ6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc5MzY3NzIvZGVlcC1vYmplY3QtbWVyZ2luZy1pbi1lczYtZXM3I2Fuc3dlci0zNDc0OTg3M1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImV4dGVuZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG5cbiAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuXG4gICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9zb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgaWYgKF9zb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBfc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIF9zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9zb3VyY2UuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBfc291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXRwdXQgPSBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzT2JqZWN0KHRhcmdldCkgJiYgdGhpcy5pc09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc09iamVjdChzb3VyY2Vba2V5XSkpIHtcbiAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG91dHB1dCwgX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIHNvdXJjZVtrZXldKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBfdGhpcy5leHRlbmQodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCBzb3VyY2Vba2V5XSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZXh0ZW5kQXJyYXlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRBcnJheShhcnJUb0V4dGVuZCwgcmVzdWx0QXJyKSB7XG4gICAgICAgIHZhciBleHRlbmRlZEFyciA9IFtdO1xuICAgICAgICBhcnJUb0V4dGVuZC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBleHRlbmRlZEFyci5wdXNoKFV0aWxzLmV4dGVuZChyZXN1bHRBcnIsIGl0ZW0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFyclRvRXh0ZW5kID0gZXh0ZW5kZWRBcnI7XG4gICAgICAgIHJldHVybiBhcnJUb0V4dGVuZDtcbiAgICAgIH0gLy8gSWYgbW9udGggY291bnRlciBleGNlZWRzIDEyLCBpdCBzdGFydHMgYWdhaW4gZnJvbSAxXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibW9udGhNb2RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb250aE1vZChtb250aCkge1xuICAgICAgICByZXR1cm4gbW9udGggJSAxMjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xvbmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZShzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzb3VyY2UpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgICAgdmFyIGNsb25lUmVzdWx0ID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2xvbmVSZXN1bHRbaV0gPSB0aGlzLmNsb25lKHNvdXJjZVtpXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKF90eXBlb2Yoc291cmNlKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB2YXIgX2Nsb25lUmVzdWx0ID0ge307XG5cbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICBfY2xvbmVSZXN1bHRbcHJvcF0gPSB0aGlzLmNsb25lKHNvdXJjZVtwcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9jbG9uZVJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxvZzEwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgICAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJvdW5kVG9CYXNlMTBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByb3VuZFRvQmFzZTEwKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nMTAoeCkpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicm91bmRUb0Jhc2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByb3VuZFRvQmFzZSh4LCBiYXNlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhiYXNlLCBNYXRoLmZsb29yKE1hdGgubG9nKHgpIC8gTWF0aC5sb2coYmFzZSkpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFyc2VOdW1iZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU51bWJlcih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuIHZhbDtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmFuZG9tSWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByYW5kb21JZCgpIHtcbiAgICAgICAgcmV0dXJuIChuZXcgRGF0ZSgpICUgOWU2KS50b1N0cmluZygxNik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm5vRXhwb25lbnRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbm9FeHBvbmVudHModmFsKSB7XG4gICAgICAgIHZhciBkYXRhID0gU3RyaW5nKHZhbCkuc3BsaXQoL1tlRV0vKTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAxKSByZXR1cm4gZGF0YVswXTtcbiAgICAgICAgdmFyIHogPSAnJyxcbiAgICAgICAgICAgIHNpZ24gPSB2YWwgPCAwID8gJy0nIDogJycsXG4gICAgICAgICAgICBzdHIgPSBkYXRhWzBdLnJlcGxhY2UoJy4nLCAnJyksXG4gICAgICAgICAgICBtYWcgPSBOdW1iZXIoZGF0YVsxXSkgKyAxO1xuXG4gICAgICAgIGlmIChtYWcgPCAwKSB7XG4gICAgICAgICAgeiA9IHNpZ24gKyAnMC4nO1xuXG4gICAgICAgICAgd2hpbGUgKG1hZysrKSB7XG4gICAgICAgICAgICB6ICs9ICcwJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4geiArIHN0ci5yZXBsYWNlKC9eLS8sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hZyAtPSBzdHIubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChtYWctLSkge1xuICAgICAgICAgIHogKz0gJzAnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0ciArIHo7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldERpbWVuc2lvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREaW1lbnNpb25zKGVsKSB7XG4gICAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgdmFyIGVsZW1lbnRIZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIHZhciBlbGVtZW50V2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgICAgICAgZWxlbWVudEhlaWdodCAtPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUucGFkZGluZ1RvcCkgKyBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUucGFkZGluZ0JvdHRvbSk7XG4gICAgICAgIGVsZW1lbnRXaWR0aCAtPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUucGFkZGluZ0xlZnQpICsgcGFyc2VGbG9hdChjb21wdXRlZFN0eWxlLnBhZGRpbmdSaWdodCk7XG4gICAgICAgIHJldC5wdXNoKGVsZW1lbnRXaWR0aCk7XG4gICAgICAgIHJldC5wdXNoKGVsZW1lbnRIZWlnaHQpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICAgICAgICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICAgICAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgICB3aWR0aDogZWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgIHg6IHJlY3QubGVmdCxcbiAgICAgICAgICB5OiByZWN0LnRvcFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRMYXJnZXN0U3RyaW5nRnJvbUFyclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhcmdlc3RTdHJpbmdGcm9tQXJyKGFycikge1xuICAgICAgICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICBiID0gYi5yZWR1Y2UoZnVuY3Rpb24gKGFhLCBiYikge1xuICAgICAgICAgICAgICByZXR1cm4gYWEubGVuZ3RoID4gYmIubGVuZ3RoID8gYWEgOiBiYjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhLmxlbmd0aCA+IGIubGVuZ3RoID8gYSA6IGI7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU2MjM4MzgvcmdiLXRvLWhleC1hbmQtaGV4LXRvLXJnYiNhbnN3ZXItMTIzNDIyNzVcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoZXhUb1JnYmFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoZXhUb1JnYmEoKSB7XG4gICAgICAgIHZhciBoZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcjOTk5OTk5JztcbiAgICAgICAgdmFyIG9wYWNpdHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDAuNjtcblxuICAgICAgICBpZiAoaGV4LnN1YnN0cmluZygwLCAxKSAhPT0gJyMnKSB7XG4gICAgICAgICAgaGV4ID0gJyM5OTk5OTknO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGggPSBoZXgucmVwbGFjZSgnIycsICcnKTtcbiAgICAgICAgaCA9IGgubWF0Y2gobmV3IFJlZ0V4cCgnKC57JyArIGgubGVuZ3RoIC8gMyArICd9KScsICdnJykpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGhbaV0gPSBwYXJzZUludChoW2ldLmxlbmd0aCA9PT0gMSA/IGhbaV0gKyBoW2ldIDogaFtpXSwgMTYpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcGFjaXR5ICE9PSAndW5kZWZpbmVkJykgaC5wdXNoKG9wYWNpdHkpO1xuICAgICAgICByZXR1cm4gJ3JnYmEoJyArIGguam9pbignLCcpICsgJyknO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRPcGFjaXR5RnJvbVJHQkFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcGFjaXR5RnJvbVJHQkEocmdiYSkge1xuICAgICAgICByZ2JhID0gcmdiYS5tYXRjaCgvXnJnYmE/W1xccytdP1xcKFtcXHMrXT8oXFxkKylbXFxzK10/LFtcXHMrXT8oXFxkKylbXFxzK10/LFtcXHMrXT8oXFxkKylbXFxzK10/L2kpO1xuICAgICAgICByZXR1cm4gcmdiYVszXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmdiMmhleFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJnYjJoZXgocmdiKSB7XG4gICAgICAgIHJnYiA9IHJnYi5tYXRjaCgvXnJnYmE/W1xccytdP1xcKFtcXHMrXT8oXFxkKylbXFxzK10/LFtcXHMrXT8oXFxkKylbXFxzK10/LFtcXHMrXT8oXFxkKylbXFxzK10/L2kpO1xuICAgICAgICByZXR1cm4gcmdiICYmIHJnYi5sZW5ndGggPT09IDQgPyAnIycgKyAoJzAnICsgcGFyc2VJbnQocmdiWzFdLCAxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgKyAoJzAnICsgcGFyc2VJbnQocmdiWzJdLCAxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgKyAoJzAnICsgcGFyc2VJbnQocmdiWzNdLCAxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgOiAnJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNDb2xvckhleFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ29sb3JIZXgoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIC8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCkvaS50ZXN0KGNvbG9yKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicG9sYXJUb0NhcnRlc2lhblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBvbGFyVG9DYXJ0ZXNpYW4oY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCBhbmdsZUluRGVncmVlcykge1xuICAgICAgICB2YXIgYW5nbGVJblJhZGlhbnMgPSAoYW5nbGVJbkRlZ3JlZXMgLSA5MCkgKiBNYXRoLlBJIC8gMTgwLjA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogY2VudGVyWCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlSW5SYWRpYW5zKSxcbiAgICAgICAgICB5OiBjZW50ZXJZICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGVJblJhZGlhbnMpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVzY2FwZVN0cmluZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVzY2FwZVN0cmluZyhzdHIpIHtcbiAgICAgICAgdmFyIGVzY2FwZVdpdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd4JztcbiAgICAgICAgdmFyIG5ld1N0ciA9IHN0ci50b1N0cmluZygpLnNsaWNlKCk7XG4gICAgICAgIG5ld1N0ciA9IG5ld1N0ci5yZXBsYWNlKC9bYCB+IUAjJCVeJiooKV98K1xcLT0/OzonXCIsLjw+e31bXFxdXFxcXC9dL2dpLCBlc2NhcGVXaXRoKTtcbiAgICAgICAgcmV0dXJuIG5ld1N0cjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibmVnVG9aZXJvXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbmVnVG9aZXJvKHZhbCkge1xuICAgICAgICByZXR1cm4gdmFsIDwgMCA/IDAgOiB2YWw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vdmVJbmRleEluQXJyYXlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlSW5kZXhJbkFycmF5KGFyciwgb2xkX2luZGV4LCBuZXdfaW5kZXgpIHtcbiAgICAgICAgaWYgKG5ld19pbmRleCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGsgPSBuZXdfaW5kZXggLSBhcnIubGVuZ3RoICsgMTtcblxuICAgICAgICAgIHdoaWxlIChrLS0pIHtcbiAgICAgICAgICAgIGFyci5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXJyLnNwbGljZShuZXdfaW5kZXgsIDAsIGFyci5zcGxpY2Uob2xkX2luZGV4LCAxKVswXSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImV4dHJhY3ROdW1iZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0TnVtYmVyKHMpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocy5yZXBsYWNlKC9bXlxcZC5dKi9nLCAnJykpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmaW5kQW5jZXN0b3JcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQW5jZXN0b3IoZWwsIGNscykge1xuICAgICAgICB3aGlsZSAoKGVsID0gZWwucGFyZW50RWxlbWVudCkgJiYgIWVsLmNsYXNzTGlzdC5jb250YWlucyhjbHMpKSB7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldEVMc3R5bGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RUxzdHlsZXMoZWwsIHN0eWxlcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgICAgICAgaWYgKHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBlbC5zdHlsZS5rZXkgPSBzdHlsZXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNOdW1iZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiBwYXJzZUZsb2F0KE51bWJlcih2YWx1ZSkpID09PSB2YWx1ZSAmJiAhaXNOYU4ocGFyc2VJbnQodmFsdWUsIDEwKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzRmxvYXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0Zsb2F0KG4pIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSAhPT0gMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNTYWZhcmlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICAgICAgcmV0dXJuIC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzRmlyZWZveFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmlyZWZveCgpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgPiAtMTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNJRTExXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNJRTExKCkge1xuICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRScpICE9PSAtMSB8fCB3aW5kb3cubmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignVHJpZGVudC8nKSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNJRVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzSUUoKSB7XG4gICAgICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICB2YXIgbXNpZSA9IHVhLmluZGV4T2YoJ01TSUUgJyk7XG5cbiAgICAgICAgaWYgKG1zaWUgPiAwKSB7XG4gICAgICAgICAgLy8gSUUgMTAgb3Igb2xkZXIgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhtc2llICsgNSwgdWEuaW5kZXhPZignLicsIG1zaWUpKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyaWRlbnQgPSB1YS5pbmRleE9mKCdUcmlkZW50LycpO1xuXG4gICAgICAgIGlmICh0cmlkZW50ID4gMCkge1xuICAgICAgICAgIC8vIElFIDExID0+IHJldHVybiB2ZXJzaW9uIG51bWJlclxuICAgICAgICAgIHZhciBydiA9IHVhLmluZGV4T2YoJ3J2OicpO1xuICAgICAgICAgIHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcocnYgKyAzLCB1YS5pbmRleE9mKCcuJywgcnYpKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVkZ2UgPSB1YS5pbmRleE9mKCdFZGdlLycpO1xuXG4gICAgICAgIGlmIChlZGdlID4gMCkge1xuICAgICAgICAgIC8vIEVkZ2UgKElFIDEyKykgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhlZGdlICsgNSwgdWEuaW5kZXhPZignLicsIGVkZ2UpKSwgMTApO1xuICAgICAgICB9IC8vIG90aGVyIGJyb3dzZXJcblxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVXRpbHM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBGaWx0ZXJzIENsYXNzIGZvciBzZXR0aW5nIGhvdmVyL2FjdGl2ZSBzdGF0ZXMgb24gdGhlIHBhdGhzLlxuICAgKlxuICAgKiBAbW9kdWxlIEZvcm1hdHRlcnNcbiAgICoqL1xuXG4gIHZhciBGaWx0ZXJzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaWx0ZXJzKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbHRlcnMpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgIH0gLy8gY3JlYXRlIGEgcmUtdXNhYmxlIGZpbHRlciB3aGljaCBjYW4gYmUgYXBwZW5kZWQgb3RoZXIgZmlsdGVyIGVmZmVjdHMgYW5kIGFwcGxpZWQgdG8gbXVsdGlwbGUgZWxlbWVudHNcblxuXG4gICAgX2NyZWF0ZUNsYXNzKEZpbHRlcnMsIFt7XG4gICAgICBrZXk6IFwiZ2V0RGVmYXVsdEZpbHRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRGaWx0ZXIoZWwsIGkpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIGVsLnVuZmlsdGVyKHRydWUpO1xuICAgICAgICB2YXIgZmlsdGVyID0gbmV3IHdpbmRvdy5TVkcuRmlsdGVyKCk7XG4gICAgICAgIGZpbHRlci5zaXplKCcxMjAlJywgJzE4MCUnLCAnLTUlJywgJy00MCUnKTtcblxuICAgICAgICBpZiAody5jb25maWcuc3RhdGVzLm5vcm1hbC5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgICAgIHRoaXMuYXBwbHlGaWx0ZXIoZWwsIGksIHcuY29uZmlnLnN0YXRlcy5ub3JtYWwuZmlsdGVyLnR5cGUsIHcuY29uZmlnLnN0YXRlcy5ub3JtYWwuZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRyb3BTaGFkb3coZWwsIHcuY29uZmlnLmNoYXJ0LmRyb3BTaGFkb3csIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGROb3JtYWxGaWx0ZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGROb3JtYWxGaWx0ZXIoZWwsIGkpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIHJldmVydCBzaGFkb3cgaWYgaXQgd2FzIHRoZXJlXG4gICAgICAgIC8vIGJ1dCwgaWdub3JlIG1hcmtlciBhcyBtYXJrZXIgZG9uJ3QgaGF2ZSBkcm9wc2hhZG93IHlldFxuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5kcm9wU2hhZG93LmVuYWJsZWQgJiYgIWVsLm5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcGV4Y2hhcnRzLW1hcmtlcicpKSB7XG4gICAgICAgICAgdGhpcy5kcm9wU2hhZG93KGVsLCB3LmNvbmZpZy5jaGFydC5kcm9wU2hhZG93LCBpKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBhcHBlbmRzIGRyb3BTaGFkb3cgdG8gdGhlIGZpbHRlciBvYmplY3Qgd2hpY2ggY2FuIGJlIGNoYWluZWQgd2l0aCBvdGhlciBmaWx0ZXIgZWZmZWN0c1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZExpZ2h0ZW5GaWx0ZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaWdodGVuRmlsdGVyKGVsLCBpLCBhdHRycykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgaW50ZW5zaXR5ID0gYXR0cnMuaW50ZW5zaXR5O1xuXG4gICAgICAgIGlmIChVdGlscy5pc0ZpcmVmb3goKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsLnVuZmlsdGVyKHRydWUpO1xuICAgICAgICB2YXIgZmlsdGVyID0gbmV3IHdpbmRvdy5TVkcuRmlsdGVyKCk7XG4gICAgICAgIGVsLmZpbHRlcihmdW5jdGlvbiAoYWRkKSB7XG4gICAgICAgICAgdmFyIHNoYWRvd0F0dHIgPSB3LmNvbmZpZy5jaGFydC5kcm9wU2hhZG93O1xuXG4gICAgICAgICAgaWYgKHNoYWRvd0F0dHIuZW5hYmxlZCkge1xuICAgICAgICAgICAgZmlsdGVyID0gX3RoaXMuYWRkU2hhZG93KGFkZCwgaSwgc2hhZG93QXR0cik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbHRlciA9IGFkZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWx0ZXIuY29tcG9uZW50VHJhbnNmZXIoe1xuICAgICAgICAgICAgcmdiOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgICAgICAgICAgICBzbG9wZTogMS41LFxuICAgICAgICAgICAgICBpbnRlcmNlcHQ6IGludGVuc2l0eVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZWwuZmlsdGVyZXIubm9kZS5zZXRBdHRyaWJ1dGUoJ2ZpbHRlclVuaXRzJywgJ3VzZXJTcGFjZU9uVXNlJyk7XG5cbiAgICAgICAgdGhpcy5fc2NhbGVGaWx0ZXJTaXplKGVsLmZpbHRlcmVyLm5vZGUpO1xuICAgICAgfSAvLyBhcHBlbmRzIGRyb3BTaGFkb3cgdG8gdGhlIGZpbHRlciBvYmplY3Qgd2hpY2ggY2FuIGJlIGNoYWluZWQgd2l0aCBvdGhlciBmaWx0ZXIgZWZmZWN0c1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZERhcmtlbkZpbHRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZERhcmtlbkZpbHRlcihlbCwgaSwgYXR0cnMpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBpbnRlbnNpdHkgPSBhdHRycy5pbnRlbnNpdHk7XG5cbiAgICAgICAgaWYgKFV0aWxzLmlzRmlyZWZveCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwudW5maWx0ZXIodHJ1ZSk7XG4gICAgICAgIHZhciBmaWx0ZXIgPSBuZXcgd2luZG93LlNWRy5GaWx0ZXIoKTtcbiAgICAgICAgZWwuZmlsdGVyKGZ1bmN0aW9uIChhZGQpIHtcbiAgICAgICAgICB2YXIgc2hhZG93QXR0ciA9IHcuY29uZmlnLmNoYXJ0LmRyb3BTaGFkb3c7XG5cbiAgICAgICAgICBpZiAoc2hhZG93QXR0ci5lbmFibGVkKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBfdGhpczIuYWRkU2hhZG93KGFkZCwgaSwgc2hhZG93QXR0cik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbHRlciA9IGFkZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWx0ZXIuY29tcG9uZW50VHJhbnNmZXIoe1xuICAgICAgICAgICAgcmdiOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgICAgICAgICAgICBzbG9wZTogaW50ZW5zaXR5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5maWx0ZXJlci5ub2RlLnNldEF0dHJpYnV0ZSgnZmlsdGVyVW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKTtcblxuICAgICAgICB0aGlzLl9zY2FsZUZpbHRlclNpemUoZWwuZmlsdGVyZXIubm9kZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFwcGx5RmlsdGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlGaWx0ZXIoZWwsIGksIGZpbHRlcikge1xuICAgICAgICB2YXIgaW50ZW5zaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwLjU7XG5cbiAgICAgICAgc3dpdGNoIChmaWx0ZXIpIHtcbiAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGhpcy5hZGROb3JtYWxGaWx0ZXIoZWwsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2xpZ2h0ZW4nOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aGlzLmFkZExpZ2h0ZW5GaWx0ZXIoZWwsIGksIHtcbiAgICAgICAgICAgICAgICBpbnRlbnNpdHk6IGludGVuc2l0eVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdkYXJrZW4nOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aGlzLmFkZERhcmtlbkZpbHRlcihlbCwgaSwge1xuICAgICAgICAgICAgICAgIGludGVuc2l0eTogaW50ZW5zaXR5XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBhcHBlbmRzIGRyb3BTaGFkb3cgdG8gdGhlIGZpbHRlciBvYmplY3Qgd2hpY2ggY2FuIGJlIGNoYWluZWQgd2l0aCBvdGhlciBmaWx0ZXIgZWZmZWN0c1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFNoYWRvd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNoYWRvdyhhZGQsIGksIGF0dHJzKSB7XG4gICAgICAgIHZhciBibHVyID0gYXR0cnMuYmx1cixcbiAgICAgICAgICAgIHRvcCA9IGF0dHJzLnRvcCxcbiAgICAgICAgICAgIGxlZnQgPSBhdHRycy5sZWZ0LFxuICAgICAgICAgICAgY29sb3IgPSBhdHRycy5jb2xvcixcbiAgICAgICAgICAgIG9wYWNpdHkgPSBhdHRycy5vcGFjaXR5O1xuICAgICAgICB2YXIgc2hhZG93Qmx1ciA9IGFkZC5mbG9vZChBcnJheS5pc0FycmF5KGNvbG9yKSA/IGNvbG9yW2ldIDogY29sb3IsIG9wYWNpdHkpLmNvbXBvc2l0ZShhZGQuc291cmNlQWxwaGEsICdpbicpLm9mZnNldChsZWZ0LCB0b3ApLmdhdXNzaWFuQmx1cihibHVyKS5tZXJnZShhZGQuc291cmNlKTtcbiAgICAgICAgcmV0dXJuIGFkZC5ibGVuZChhZGQuc291cmNlLCBzaGFkb3dCbHVyKTtcbiAgICAgIH0gLy8gZGlyZWN0bHkgYWRkcyBkcm9wU2hhZG93IHRvIHRoZSBlbGVtZW50IGFuZCByZXR1cm5zIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAgICAvLyB0aGUgb25seSB3YXkgaXQgaXMgZGlmZmVyZW50IGZyb20gdGhlIGFkZFNoYWRvdygpIGZ1bmN0aW9uIGlzIHRoYXQgYWRkU2hhZG93IGlzIGNoYWluYWJsZSB0byBvdGhlciBmaWx0ZXJzLCB3aGlsZSB0aGlzIGZ1bmN0aW9uIGRpc2NhcmRzIGFsbCBmaWx0ZXJzIGFuZCBhZGQgZHJvcFNoYWRvd1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImRyb3BTaGFkb3dcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcm9wU2hhZG93KGVsLCBhdHRycykge1xuICAgICAgICB2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgICAgICAgdmFyIHRvcCA9IGF0dHJzLnRvcCxcbiAgICAgICAgICAgIGxlZnQgPSBhdHRycy5sZWZ0LFxuICAgICAgICAgICAgYmx1ciA9IGF0dHJzLmJsdXIsXG4gICAgICAgICAgICBjb2xvciA9IGF0dHJzLmNvbG9yLFxuICAgICAgICAgICAgb3BhY2l0eSA9IGF0dHJzLm9wYWNpdHksXG4gICAgICAgICAgICBub1VzZXJTcGFjZU9uVXNlID0gYXR0cnMubm9Vc2VyU3BhY2VPblVzZTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIGVsLnVuZmlsdGVyKHRydWUpO1xuXG4gICAgICAgIGlmIChVdGlscy5pc0lFKCkgJiYgdy5jb25maWcuY2hhcnQudHlwZSA9PT0gJ3JhZGlhbEJhcicpIHtcbiAgICAgICAgICAvLyBpbiByYWRpYWxiYXIgY2hhcnRzLCBkcm9wc2hhZG93IGlzIGNsaXBwaW5nIGFjdHVhbCBkcmF3aW5nIGluIElFXG4gICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29sb3IgPSBBcnJheS5pc0FycmF5KGNvbG9yKSA/IGNvbG9yW2ldIDogY29sb3I7XG4gICAgICAgIGVsLmZpbHRlcihmdW5jdGlvbiAoYWRkKSB7XG4gICAgICAgICAgdmFyIHNoYWRvd0JsdXIgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKFV0aWxzLmlzU2FmYXJpKCkgfHwgVXRpbHMuaXNGaXJlZm94KCkgfHwgVXRpbHMuaXNJRSgpKSB7XG4gICAgICAgICAgICAvLyBzYWZhcmkvZmlyZWZveCBoYXMgc29tZSBhbHRlcm5hdGl2ZSB3YXkgdG8gdXNlIHRoaXMgZmlsdGVyXG4gICAgICAgICAgICBzaGFkb3dCbHVyID0gYWRkLmZsb29kKGNvbG9yLCBvcGFjaXR5KS5jb21wb3NpdGUoYWRkLnNvdXJjZUFscGhhLCAnaW4nKS5vZmZzZXQobGVmdCwgdG9wKS5nYXVzc2lhbkJsdXIoYmx1cik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYWRvd0JsdXIgPSBhZGQuZmxvb2QoY29sb3IsIG9wYWNpdHkpLmNvbXBvc2l0ZShhZGQuc291cmNlQWxwaGEsICdpbicpLm9mZnNldChsZWZ0LCB0b3ApLmdhdXNzaWFuQmx1cihibHVyKS5tZXJnZShhZGQuc291cmNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZGQuYmxlbmQoYWRkLnNvdXJjZSwgc2hhZG93Qmx1cik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghbm9Vc2VyU3BhY2VPblVzZSkge1xuICAgICAgICAgIGVsLmZpbHRlcmVyLm5vZGUuc2V0QXR0cmlidXRlKCdmaWx0ZXJVbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2NhbGVGaWx0ZXJTaXplKGVsLmZpbHRlcmVyLm5vZGUpO1xuXG4gICAgICAgIHJldHVybiBlbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0U2VsZWN0aW9uRmlsdGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0aW9uRmlsdGVyKGVsLCByZWFsSW5kZXgsIGRhdGFQb2ludEluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygdy5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50c1tyZWFsSW5kZXhdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuc2VsZWN0ZWREYXRhUG9pbnRzW3JlYWxJbmRleF0uaW5kZXhPZihkYXRhUG9pbnRJbmRleCkgPiAtMSkge1xuICAgICAgICAgICAgZWwubm9kZS5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB2YXIgYWN0aXZlRmlsdGVyID0gdy5jb25maWcuc3RhdGVzLmFjdGl2ZS5maWx0ZXI7XG5cbiAgICAgICAgICAgIGlmIChhY3RpdmVGaWx0ZXIgIT09ICdub25lJykge1xuICAgICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVyKGVsLCByZWFsSW5kZXgsIGFjdGl2ZUZpbHRlci50eXBlLCBhY3RpdmVGaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2NhbGVGaWx0ZXJTaXplXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NjYWxlRmlsdGVyU2l6ZShlbCkge1xuICAgICAgICB2YXIgc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoYXR0cnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICAgIGlmIChhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICB3aWR0aDogJzIwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzIwMCUnLFxuICAgICAgICAgIHg6ICctNTAlJyxcbiAgICAgICAgICB5OiAnLTUwJSdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEZpbHRlcnM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBBbmltYXRpb24gQ2xhc3MuXG4gICAqXG4gICAqIEBtb2R1bGUgQW5pbWF0aW9uc1xuICAgKiovXG5cbiAgdmFyIEFuaW1hdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbnMoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0aW9ucyk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgICB0aGlzLnNldEVhc2luZ0Z1bmN0aW9ucygpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhBbmltYXRpb25zLCBbe1xuICAgICAga2V5OiBcInNldEVhc2luZ0Z1bmN0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEVhc2luZ0Z1bmN0aW9ucygpIHtcbiAgICAgICAgdmFyIGVhc2luZztcbiAgICAgICAgaWYgKHRoaXMudy5nbG9iYWxzLmVhc2luZykgcmV0dXJuO1xuICAgICAgICB2YXIgdXNlckRlZmluZWRFYXNpbmcgPSB0aGlzLncuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZWFzaW5nO1xuXG4gICAgICAgIHN3aXRjaCAodXNlckRlZmluZWRFYXNpbmcpIHtcbiAgICAgICAgICBjYXNlICdsaW5lYXInOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlYXNpbmcgPSAnLSc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAnZWFzZWluJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZWFzaW5nID0gJzwnO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2Vhc2VvdXQnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlYXNpbmcgPSAnPic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAnZWFzZWlub3V0JzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZWFzaW5nID0gJzw+JztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdzd2luZyc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVhc2luZyA9IGZ1bmN0aW9uIGVhc2luZyhwb3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgICAgICAgICAgICAgdmFyIHJldCA9IChwb3MgLT0gMSkgKiBwb3MgKiAoKHMgKyAxKSAqIHBvcyArIHMpICsgMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAnYm91bmNlJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZWFzaW5nID0gZnVuY3Rpb24gZWFzaW5nKHBvcykge1xuICAgICAgICAgICAgICAgIHZhciByZXQgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmIChwb3MgPCAxIC8gMi43NSkge1xuICAgICAgICAgICAgICAgICAgcmV0ID0gNy41NjI1ICogcG9zICogcG9zO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocG9zIDwgMiAvIDIuNzUpIHtcbiAgICAgICAgICAgICAgICAgIHJldCA9IDcuNTYyNSAqIChwb3MgLT0gMS41IC8gMi43NSkgKiBwb3MgKyAwLjc1O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocG9zIDwgMi41IC8gMi43NSkge1xuICAgICAgICAgICAgICAgICAgcmV0ID0gNy41NjI1ICogKHBvcyAtPSAyLjI1IC8gMi43NSkgKiBwb3MgKyAwLjkzNzU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldCA9IDcuNTYyNSAqIChwb3MgLT0gMi42MjUgLyAyLjc1KSAqIHBvcyArIDAuOTg0Mzc1O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdlbGFzdGljJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZWFzaW5nID0gZnVuY3Rpb24gZWFzaW5nKHBvcykge1xuICAgICAgICAgICAgICAgIGlmIChwb3MgPT09ICEhcG9zKSByZXR1cm4gcG9zO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdygyLCAtMTAgKiBwb3MpICogTWF0aC5zaW4oKHBvcyAtIDAuMDc1KSAqICgyICogTWF0aC5QSSkgLyAwLjMpICsgMTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVhc2luZyA9ICc8Pic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLncuZ2xvYmFscy5lYXNpbmcgPSBlYXNpbmc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFuaW1hdGVMaW5lXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYW5pbWF0ZUxpbmUoZWwsIGZyb20sIHRvLCBzcGVlZCkge1xuICAgICAgICBlbC5hdHRyKGZyb20pLmFuaW1hdGUoc3BlZWQpLmF0dHIodG8pO1xuICAgICAgfVxuICAgICAgLypcbiAgICAgICAqKiBBbmltYXRlIHJhZGl1cyBvZiBhIGNpcmNsZSBlbGVtZW50XG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhbmltYXRlQ2lyY2xlUmFkaXVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYW5pbWF0ZUNpcmNsZVJhZGl1cyhlbCwgZnJvbSwgdG8sIHNwZWVkLCBlYXNpbmcsIGNiKSB7XG4gICAgICAgIGlmICghZnJvbSkgZnJvbSA9IDA7XG4gICAgICAgIGVsLmF0dHIoe1xuICAgICAgICAgIHI6IGZyb21cbiAgICAgICAgfSkuYW5pbWF0ZShzcGVlZCwgZWFzaW5nKS5hdHRyKHtcbiAgICAgICAgICByOiB0b1xuICAgICAgICB9KS5hZnRlckFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2IoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKlxuICAgICAgICoqIEFuaW1hdGUgcmFkaXVzIGFuZCBwb3NpdGlvbiBvZiBhIGNpcmNsZSBlbGVtZW50XG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhbmltYXRlQ2lyY2xlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYW5pbWF0ZUNpcmNsZShlbCwgZnJvbSwgdG8sIHNwZWVkLCBlYXNpbmcpIHtcbiAgICAgICAgZWwuYXR0cih7XG4gICAgICAgICAgcjogZnJvbS5yLFxuICAgICAgICAgIGN4OiBmcm9tLmN4LFxuICAgICAgICAgIGN5OiBmcm9tLmN5XG4gICAgICAgIH0pLmFuaW1hdGUoc3BlZWQsIGVhc2luZykuYXR0cih7XG4gICAgICAgICAgcjogdG8ucixcbiAgICAgICAgICBjeDogdG8uY3gsXG4gICAgICAgICAgY3k6IHRvLmN5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLypcbiAgICAgICAqKiBBbmltYXRlIHJlY3QgcHJvcGVydGllc1xuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYW5pbWF0ZVJlY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbmltYXRlUmVjdChlbCwgZnJvbSwgdG8sIHNwZWVkLCBmbikge1xuICAgICAgICBlbC5hdHRyKGZyb20pLmFuaW1hdGUoc3BlZWQpLmF0dHIodG8pLmFmdGVyQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFuaW1hdGVQYXRoc0dyYWR1YWxseVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFuaW1hdGVQYXRoc0dyYWR1YWxseShwYXJhbXMpIHtcbiAgICAgICAgdmFyIGVsID0gcGFyYW1zLmVsLFxuICAgICAgICAgICAgcmVhbEluZGV4ID0gcGFyYW1zLnJlYWxJbmRleCxcbiAgICAgICAgICAgIGogPSBwYXJhbXMuaixcbiAgICAgICAgICAgIGZpbGwgPSBwYXJhbXMuZmlsbCxcbiAgICAgICAgICAgIHBhdGhGcm9tID0gcGFyYW1zLnBhdGhGcm9tLFxuICAgICAgICAgICAgcGF0aFRvID0gcGFyYW1zLnBhdGhUbyxcbiAgICAgICAgICAgIHNwZWVkID0gcGFyYW1zLnNwZWVkLFxuICAgICAgICAgICAgZGVsYXkgPSBwYXJhbXMuZGVsYXk7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZGVsYXlGYWN0b3IgPSAwO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmFuaW1hdGVHcmFkdWFsbHkuZW5hYmxlZCkge1xuICAgICAgICAgIGRlbGF5RmFjdG9yID0gdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5hbmltYXRlR3JhZHVhbGx5LmRlbGF5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5lbmFibGVkICYmIHcuZ2xvYmFscy5kYXRhQ2hhbmdlZCAmJiB3LmNvbmZpZy5jaGFydC50eXBlICE9PSAnYmFyJykge1xuICAgICAgICAgIC8vIGRpc2FibGVkIGR1ZSB0byB0aGlzIGJ1ZyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGV4Y2hhcnRzL3Z1ZS1hcGV4Y2hhcnRzL2lzc3Vlcy83NVxuICAgICAgICAgIGRlbGF5RmFjdG9yID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLm1vcnBoU1ZHKGVsLCByZWFsSW5kZXgsIGosIHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdsaW5lJyAmJiAhdy5nbG9iYWxzLmNvbWJvQ2hhcnRzID8gJ3N0cm9rZScgOiBmaWxsLCBwYXRoRnJvbSwgcGF0aFRvLCBzcGVlZCwgZGVsYXkgKiBkZWxheUZhY3Rvcik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNob3dEZWxheWVkRWxlbWVudHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93RGVsYXllZEVsZW1lbnRzKCkge1xuICAgICAgICB0aGlzLncuZ2xvYmFscy5kZWxheWVkRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHZhciBlbGUgPSBkLmVsO1xuICAgICAgICAgIGVsZS5jbGFzc0xpc3QucmVtb3ZlKCdhcGV4Y2hhcnRzLWVsZW1lbnQtaGlkZGVuJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhbmltYXRpb25Db21wbGV0ZWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbmltYXRpb25Db21wbGV0ZWQoZWwpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIGlmICh3Lmdsb2JhbHMuYW5pbWF0aW9uRW5kZWQpIHJldHVybjtcbiAgICAgICAgdy5nbG9iYWxzLmFuaW1hdGlvbkVuZGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5hbmltYXRpb25FbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB3LmNvbmZpZy5jaGFydC5ldmVudHMuYW5pbWF0aW9uRW5kKHRoaXMuY3R4LCB7XG4gICAgICAgICAgICBlbDogZWwsXG4gICAgICAgICAgICB3OiB3XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gU1ZHLmpzIGFuaW1hdGlvbiBmb3IgbW9ycGhpbmcgb25lIHBhdGggdG8gYW5vdGhlclxuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vcnBoU1ZHXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW9ycGhTVkcoZWwsIHJlYWxJbmRleCwgaiwgZmlsbCwgcGF0aEZyb20sIHBhdGhUbywgc3BlZWQsIGRlbGF5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKCFwYXRoRnJvbSkge1xuICAgICAgICAgIHBhdGhGcm9tID0gZWwuYXR0cigncGF0aEZyb20nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF0aFRvKSB7XG4gICAgICAgICAgcGF0aFRvID0gZWwuYXR0cigncGF0aFRvJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGlzYWJsZUFuaW1hdGlvbkZvckNvcnJ1cFBhdGggPSBmdW5jdGlvbiBkaXNhYmxlQW5pbWF0aW9uRm9yQ29ycnVwUGF0aChwYXRoKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdyYWRhcicpIHtcbiAgICAgICAgICAgIC8vIHJhZGFyIGNoYXJ0IGRyb3BzIHRoZSBwYXRoIHRvIGJvdHRvbSBhbmQgaGVuY2UgYSBjb3JydXAgcGF0aCBsb29rcyB1Z2x5XG4gICAgICAgICAgICAvLyB0aGVyZWZvcmUsIGRpc2FibGUgYW5pbWF0aW9uIGZvciBzdWNoIGEgY2FzZVxuICAgICAgICAgICAgc3BlZWQgPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBcIk0gMCBcIi5jb25jYXQody5nbG9iYWxzLmdyaWRIZWlnaHQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghcGF0aEZyb20gfHwgcGF0aEZyb20uaW5kZXhPZigndW5kZWZpbmVkJykgPiAtMSB8fCBwYXRoRnJvbS5pbmRleE9mKCdOYU4nKSA+IC0xKSB7XG4gICAgICAgICAgcGF0aEZyb20gPSBkaXNhYmxlQW5pbWF0aW9uRm9yQ29ycnVwUGF0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGhUby5pbmRleE9mKCd1bmRlZmluZWQnKSA+IC0xIHx8IHBhdGhUby5pbmRleE9mKCdOYU4nKSA+IC0xKSB7XG4gICAgICAgICAgcGF0aFRvID0gZGlzYWJsZUFuaW1hdGlvbkZvckNvcnJ1cFBhdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdy5nbG9iYWxzLnNob3VsZEFuaW1hdGUpIHtcbiAgICAgICAgICBzcGVlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBlbC5wbG90KHBhdGhGcm9tKS5hbmltYXRlKDEsIHcuZ2xvYmFscy5lYXNpbmcsIGRlbGF5KS5wbG90KHBhdGhGcm9tKS5hbmltYXRlKHNwZWVkLCB3Lmdsb2JhbHMuZWFzaW5nLCBkZWxheSkucGxvdChwYXRoVG8pLmFmdGVyQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBhIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgb3JpZ2luYWwgbW91bnQgZnVuY3Rpb24gY2FuIHJldHVybiB0cnVlIG5vdyBhcyBhbmltYXRpb24gZmluaXNoZWQgaGVyZVxuICAgICAgICAgIGlmIChVdGlscy5pc051bWJlcihqKSkge1xuICAgICAgICAgICAgaWYgKGogPT09IHcuZ2xvYmFscy5zZXJpZXNbdy5nbG9iYWxzLm1heFZhbHNJbkFycmF5SW5kZXhdLmxlbmd0aCAtIDIgJiYgdy5nbG9iYWxzLnNob3VsZEFuaW1hdGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uQ29tcGxldGVkKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGZpbGwgIT09ICdub25lJyAmJiB3Lmdsb2JhbHMuc2hvdWxkQW5pbWF0ZSkge1xuICAgICAgICAgICAgaWYgKCF3Lmdsb2JhbHMuY29tYm9DaGFydHMgJiYgcmVhbEluZGV4ID09PSB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aCAtIDEgfHwgdy5nbG9iYWxzLmNvbWJvQ2hhcnRzKSB7XG4gICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbkNvbXBsZXRlZChlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuc2hvd0RlbGF5ZWRFbGVtZW50cygpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQW5pbWF0aW9ucztcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIEdyYXBoaWNzIENsYXNzIGZvciBhbGwgZHJhd2luZyBvcGVyYXRpb25zLlxuICAgKlxuICAgKiBAbW9kdWxlIEdyYXBoaWNzXG4gICAqKi9cblxuICB2YXIgR3JhcGhpY3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyYXBoaWNzKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyYXBoaWNzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoR3JhcGhpY3MsIFt7XG4gICAgICBrZXk6IFwiZHJhd0xpbmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3TGluZSh4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICB2YXIgbGluZUNvbG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAnIzc1NzU3NSc7XG4gICAgICAgIHZhciBkYXNoQXJyYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG4gICAgICAgIHZhciBzdHJva2VXaWR0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogbnVsbDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBsaW5lID0gdy5nbG9iYWxzLmRvbS5QYXBlci5saW5lKCkuYXR0cih7XG4gICAgICAgICAgeDE6IHgxLFxuICAgICAgICAgIHkxOiB5MSxcbiAgICAgICAgICB4MjogeDIsXG4gICAgICAgICAgeTI6IHkyLFxuICAgICAgICAgIHN0cm9rZTogbGluZUNvbG9yLFxuICAgICAgICAgICdzdHJva2UtZGFzaGFycmF5JzogZGFzaEFycmF5LFxuICAgICAgICAgICdzdHJva2Utd2lkdGgnOiBzdHJva2VXaWR0aFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdSZWN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1JlY3QoKSB7XG4gICAgICAgIHZhciB4MSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgICAgdmFyIHkxID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgICAgICB2YXIgeDIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gICAgICAgIHZhciB5MiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMDtcbiAgICAgICAgdmFyIGNvbG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAnI2ZlZmVmZSc7XG4gICAgICAgIHZhciBvcGFjaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiAxO1xuICAgICAgICB2YXIgc3Ryb2tlV2lkdGggPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6IG51bGw7XG4gICAgICAgIHZhciBzdHJva2VDb2xvciA9IGFyZ3VtZW50cy5sZW5ndGggPiA4ICYmIGFyZ3VtZW50c1s4XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzhdIDogbnVsbDtcbiAgICAgICAgdmFyIHN0cm9rZURhc2hBcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiA5ICYmIGFyZ3VtZW50c1s5XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzldIDogMDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciByZWN0ID0gdy5nbG9iYWxzLmRvbS5QYXBlci5yZWN0KCk7XG4gICAgICAgIHJlY3QuYXR0cih7XG4gICAgICAgICAgeDogeDEsXG4gICAgICAgICAgeTogeTEsXG4gICAgICAgICAgd2lkdGg6IHgyID4gMCA/IHgyIDogMCxcbiAgICAgICAgICBoZWlnaHQ6IHkyID4gMCA/IHkyIDogMCxcbiAgICAgICAgICByeDogcmFkaXVzLFxuICAgICAgICAgIHJ5OiByYWRpdXMsXG4gICAgICAgICAgZmlsbDogY29sb3IsXG4gICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSxcbiAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogc3Ryb2tlV2lkdGggIT09IG51bGwgPyBzdHJva2VXaWR0aCA6IDAsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2VDb2xvciAhPT0gbnVsbCA/IHN0cm9rZUNvbG9yIDogJ25vbmUnLFxuICAgICAgICAgICdzdHJva2UtZGFzaGFycmF5Jzogc3Ryb2tlRGFzaEFycmF5XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVjdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1BvbHlnb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3UG9seWdvbihwb2x5Z29uU3RyaW5nKSB7XG4gICAgICAgIHZhciBzdHJva2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcjZTFlMWUxJztcbiAgICAgICAgdmFyIGZpbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdub25lJztcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBwb2x5Z29uID0gdy5nbG9iYWxzLmRvbS5QYXBlci5wb2x5Z29uKHBvbHlnb25TdHJpbmcpLmF0dHIoe1xuICAgICAgICAgIGZpbGw6IGZpbGwsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwb2x5Z29uO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3Q2lyY2xlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0NpcmNsZShyYWRpdXMpIHtcbiAgICAgICAgdmFyIGF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGMgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLmNpcmNsZShyYWRpdXMgKiAyKTtcblxuICAgICAgICBpZiAoYXR0cnMgIT09IG51bGwpIHtcbiAgICAgICAgICBjLmF0dHIoYXR0cnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdQYXRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1BhdGgoX3JlZikge1xuICAgICAgICB2YXIgX3JlZiRkID0gX3JlZi5kLFxuICAgICAgICAgICAgZCA9IF9yZWYkZCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJGQsXG4gICAgICAgICAgICBfcmVmJHN0cm9rZSA9IF9yZWYuc3Ryb2tlLFxuICAgICAgICAgICAgc3Ryb2tlID0gX3JlZiRzdHJva2UgPT09IHZvaWQgMCA/ICcjNzU3NTc1JyA6IF9yZWYkc3Ryb2tlLFxuICAgICAgICAgICAgX3JlZiRzdHJva2VXaWR0aCA9IF9yZWYuc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICBzdHJva2VXaWR0aCA9IF9yZWYkc3Ryb2tlV2lkdGggPT09IHZvaWQgMCA/IDEgOiBfcmVmJHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgZmlsbCA9IF9yZWYuZmlsbCxcbiAgICAgICAgICAgIF9yZWYkZmlsbE9wYWNpdHkgPSBfcmVmLmZpbGxPcGFjaXR5LFxuICAgICAgICAgICAgZmlsbE9wYWNpdHkgPSBfcmVmJGZpbGxPcGFjaXR5ID09PSB2b2lkIDAgPyAxIDogX3JlZiRmaWxsT3BhY2l0eSxcbiAgICAgICAgICAgIF9yZWYkc3Ryb2tlT3BhY2l0eSA9IF9yZWYuc3Ryb2tlT3BhY2l0eSxcbiAgICAgICAgICAgIHN0cm9rZU9wYWNpdHkgPSBfcmVmJHN0cm9rZU9wYWNpdHkgPT09IHZvaWQgMCA/IDEgOiBfcmVmJHN0cm9rZU9wYWNpdHksXG4gICAgICAgICAgICBjbGFzc2VzID0gX3JlZi5jbGFzc2VzLFxuICAgICAgICAgICAgX3JlZiRzdHJva2VMaW5lY2FwID0gX3JlZi5zdHJva2VMaW5lY2FwLFxuICAgICAgICAgICAgc3Ryb2tlTGluZWNhcCA9IF9yZWYkc3Ryb2tlTGluZWNhcCA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYkc3Ryb2tlTGluZWNhcCxcbiAgICAgICAgICAgIF9yZWYkc3Ryb2tlRGFzaEFycmF5ID0gX3JlZi5zdHJva2VEYXNoQXJyYXksXG4gICAgICAgICAgICBzdHJva2VEYXNoQXJyYXkgPSBfcmVmJHN0cm9rZURhc2hBcnJheSA9PT0gdm9pZCAwID8gMCA6IF9yZWYkc3Ryb2tlRGFzaEFycmF5O1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcblxuICAgICAgICBpZiAoc3Ryb2tlTGluZWNhcCA9PT0gbnVsbCkge1xuICAgICAgICAgIHN0cm9rZUxpbmVjYXAgPSB3LmNvbmZpZy5zdHJva2UubGluZUNhcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkLmluZGV4T2YoJ3VuZGVmaW5lZCcpID4gLTEgfHwgZC5pbmRleE9mKCdOYU4nKSA+IC0xKSB7XG4gICAgICAgICAgZCA9IFwiTSAwIFwiLmNvbmNhdCh3Lmdsb2JhbHMuZ3JpZEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcCA9IHcuZ2xvYmFscy5kb20uUGFwZXIucGF0aChkKS5hdHRyKHtcbiAgICAgICAgICBmaWxsOiBmaWxsLFxuICAgICAgICAgICdmaWxsLW9wYWNpdHknOiBmaWxsT3BhY2l0eSxcbiAgICAgICAgICBzdHJva2U6IHN0cm9rZSxcbiAgICAgICAgICAnc3Ryb2tlLW9wYWNpdHknOiBzdHJva2VPcGFjaXR5LFxuICAgICAgICAgICdzdHJva2UtbGluZWNhcCc6IHN0cm9rZUxpbmVjYXAsXG4gICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgICdzdHJva2UtZGFzaGFycmF5Jzogc3Ryb2tlRGFzaEFycmF5LFxuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ3JvdXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cCgpIHtcbiAgICAgICAgdmFyIGF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGcgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLmdyb3VwKCk7XG5cbiAgICAgICAgaWYgKGF0dHJzICE9PSBudWxsKSB7XG4gICAgICAgICAgZy5hdHRyKGF0dHJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtb3ZlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZSh4LCB5KSB7XG4gICAgICAgIHZhciBtb3ZlID0gWydNJywgeCwgeV0uam9pbignICcpO1xuICAgICAgICByZXR1cm4gbW92ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGluZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmUoeCwgeSkge1xuICAgICAgICB2YXIgaE9SdiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgICAgICAgdmFyIGxpbmUgPSBudWxsO1xuXG4gICAgICAgIGlmIChoT1J2ID09PSBudWxsKSB7XG4gICAgICAgICAgbGluZSA9IFsnTCcsIHgsIHldLmpvaW4oJyAnKTtcbiAgICAgICAgfSBlbHNlIGlmIChoT1J2ID09PSAnSCcpIHtcbiAgICAgICAgICBsaW5lID0gWydIJywgeF0uam9pbignICcpO1xuICAgICAgICB9IGVsc2UgaWYgKGhPUnYgPT09ICdWJykge1xuICAgICAgICAgIGxpbmUgPSBbJ1YnLCB5XS5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3VydmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjdXJ2ZSh4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgICAgICB2YXIgY3VydmUgPSBbJ0MnLCB4MSwgeTEsIHgyLCB5MiwgeCwgeV0uam9pbignICcpO1xuICAgICAgICByZXR1cm4gY3VydmU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInF1YWRyYXRpY0N1cnZlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcXVhZHJhdGljQ3VydmUoeDEsIHkxLCB4LCB5KSB7XG4gICAgICAgIHZhciBjdXJ2ZSA9IFsnUScsIHgxLCB5MSwgeCwgeV0uam9pbignICcpO1xuICAgICAgICByZXR1cm4gY3VydmU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFyY1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFyYyhyeCwgcnksIGF4aXNSb3RhdGlvbiwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIHtcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiBmYWxzZTtcbiAgICAgICAgdmFyIGNvb3JkID0gJ0EnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIGNvb3JkID0gJ2EnO1xuICAgICAgICB2YXIgYXJjID0gW2Nvb3JkLCByeCwgcnksIGF4aXNSb3RhdGlvbiwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHldLmpvaW4oJyAnKTtcbiAgICAgICAgcmV0dXJuIGFyYztcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIEdyYXBoaWNzXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH1cbiAgICAgICAqICBpID0gc2VyaWVzJ3MgaW5kZXhcbiAgICAgICAqICByZWFsSW5kZXggPSByZWFsSW5kZXggaXMgc2VyaWVzJ3MgYWN0dWFsIGluZGV4IHdoZW4gaXQgd2FzIGRyYXduIHRpbWUuIEFmdGVyIHNldmVyYWwgcmVkcmF3cywgdGhlIGl0ZXJhdGluZyBcImlcIiBtYXkgY2hhbmdlIGluIGxvb3BzLCBidXQgcmVhbEluZGV4IGRvZXNuJ3RcbiAgICAgICAqICBwYXRoRnJvbSA9IGV4aXN0aW5nIHBhdGhGcm9tIHRvIGFuaW1hdGVUb1xuICAgICAgICogIHBhdGhUbyA9IG5ldyBQYXRoIHRvIHdoaWNoIGQgYXR0ciB3aWxsIGJlIGFuaW1hdGVkIGZyb20gcGF0aEZyb20gdG8gcGF0aFRvXG4gICAgICAgKiAgc3Ryb2tlID0gbGluZSBDb2xvclxuICAgICAgICogIHN0cm9rZVdpZHRoID0gd2lkdGggb2YgcGF0aCBMaW5lXG4gICAgICAgKiAgZmlsbCA9IGl0IGNhbiBiZSBncmFkaWVudCwgc2luZ2xlIGNvbG9yLCBwYXR0ZXJuIG9yIGltYWdlXG4gICAgICAgKiAgYW5pbWF0aW9uRGVsYXkgPSBob3cgbXVjaCB0byBkZWxheSB3aGVuIHN0YXJ0aW5nIGFuaW1hdGlvbiAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAgICogIGRhdGFDaGFuZ2VTcGVlZCA9IGZvciBkeW5hbWljIGFuaW1hdGlvbnMsIHdoZW4gZGF0YSBjaGFuZ2VzXG4gICAgICAgKiAgY2xhc3NOYW1lID0gY2xhc3MgYXR0cmlidXRlIHRvIGFkZFxuICAgICAgICogQHJldHVybiB7b2JqZWN0fSBzdmcuanMgcGF0aCBvYmplY3RcbiAgICAgICAqKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW5kZXJQYXRoc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclBhdGhzKF9yZWYyKSB7XG4gICAgICAgIHZhciBqID0gX3JlZjIuaixcbiAgICAgICAgICAgIHJlYWxJbmRleCA9IF9yZWYyLnJlYWxJbmRleCxcbiAgICAgICAgICAgIHBhdGhGcm9tID0gX3JlZjIucGF0aEZyb20sXG4gICAgICAgICAgICBwYXRoVG8gPSBfcmVmMi5wYXRoVG8sXG4gICAgICAgICAgICBzdHJva2UgPSBfcmVmMi5zdHJva2UsXG4gICAgICAgICAgICBzdHJva2VXaWR0aCA9IF9yZWYyLnN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgc3Ryb2tlTGluZWNhcCA9IF9yZWYyLnN0cm9rZUxpbmVjYXAsXG4gICAgICAgICAgICBmaWxsID0gX3JlZjIuZmlsbCxcbiAgICAgICAgICAgIGFuaW1hdGlvbkRlbGF5ID0gX3JlZjIuYW5pbWF0aW9uRGVsYXksXG4gICAgICAgICAgICBpbml0aWFsU3BlZWQgPSBfcmVmMi5pbml0aWFsU3BlZWQsXG4gICAgICAgICAgICBkYXRhQ2hhbmdlU3BlZWQgPSBfcmVmMi5kYXRhQ2hhbmdlU3BlZWQsXG4gICAgICAgICAgICBjbGFzc05hbWUgPSBfcmVmMi5jbGFzc05hbWUsXG4gICAgICAgICAgICBfcmVmMiRzaG91bGRDbGlwVG9HcmkgPSBfcmVmMi5zaG91bGRDbGlwVG9HcmlkLFxuICAgICAgICAgICAgc2hvdWxkQ2xpcFRvR3JpZCA9IF9yZWYyJHNob3VsZENsaXBUb0dyaSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZENsaXBUb0dyaSxcbiAgICAgICAgICAgIF9yZWYyJGJpbmRFdmVudHNPblBhdCA9IF9yZWYyLmJpbmRFdmVudHNPblBhdGhzLFxuICAgICAgICAgICAgYmluZEV2ZW50c09uUGF0aHMgPSBfcmVmMiRiaW5kRXZlbnRzT25QYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRiaW5kRXZlbnRzT25QYXQsXG4gICAgICAgICAgICBfcmVmMiRkcmF3U2hhZG93ID0gX3JlZjIuZHJhd1NoYWRvdyxcbiAgICAgICAgICAgIGRyYXdTaGFkb3cgPSBfcmVmMiRkcmF3U2hhZG93ID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkZHJhd1NoYWRvdztcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICB2YXIgYW5pbSA9IG5ldyBBbmltYXRpb25zKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGluaXRpYWxBbmltID0gdGhpcy53LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmVuYWJsZWQ7XG4gICAgICAgIHZhciBkeW5hbWljQW5pbSA9IGluaXRpYWxBbmltICYmIHRoaXMudy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5keW5hbWljQW5pbWF0aW9uLmVuYWJsZWQ7XG4gICAgICAgIHZhciBkO1xuICAgICAgICB2YXIgc2hvdWxkQW5pbWF0ZSA9ICEhKGluaXRpYWxBbmltICYmICF3Lmdsb2JhbHMucmVzaXplZCB8fCBkeW5hbWljQW5pbSAmJiB3Lmdsb2JhbHMuZGF0YUNoYW5nZWQgJiYgdy5nbG9iYWxzLnNob3VsZEFuaW1hdGUpO1xuXG4gICAgICAgIGlmIChzaG91bGRBbmltYXRlKSB7XG4gICAgICAgICAgZCA9IHBhdGhGcm9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGQgPSBwYXRoVG87XG4gICAgICAgICAgdy5nbG9iYWxzLmFuaW1hdGlvbkVuZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHJva2VEYXNoQXJyYXlPcHQgPSB3LmNvbmZpZy5zdHJva2UuZGFzaEFycmF5O1xuICAgICAgICB2YXIgc3Ryb2tlRGFzaEFycmF5ID0gMDtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHJva2VEYXNoQXJyYXlPcHQpKSB7XG4gICAgICAgICAgc3Ryb2tlRGFzaEFycmF5ID0gc3Ryb2tlRGFzaEFycmF5T3B0W3JlYWxJbmRleF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Ryb2tlRGFzaEFycmF5ID0gdy5jb25maWcuc3Ryb2tlLmRhc2hBcnJheTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbCA9IHRoaXMuZHJhd1BhdGgoe1xuICAgICAgICAgIGQ6IGQsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2UsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgIGZpbGw6IGZpbGwsXG4gICAgICAgICAgZmlsbE9wYWNpdHk6IDEsXG4gICAgICAgICAgY2xhc3NlczogY2xhc3NOYW1lLFxuICAgICAgICAgIHN0cm9rZUxpbmVjYXA6IHN0cm9rZUxpbmVjYXAsXG4gICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiBzdHJva2VEYXNoQXJyYXlcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmF0dHIoJ2luZGV4JywgcmVhbEluZGV4KTtcblxuICAgICAgICBpZiAoc2hvdWxkQ2xpcFRvR3JpZCkge1xuICAgICAgICAgIGVsLmF0dHIoe1xuICAgICAgICAgICAgJ2NsaXAtcGF0aCc6IFwidXJsKCNncmlkUmVjdE1hc2tcIi5jb25jYXQody5nbG9iYWxzLmN1aWQsIFwiKVwiKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIGNvbnN0IGRlZmF1bHRGaWx0ZXIgPSBlbC5maWx0ZXJlclxuXG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnN0YXRlcy5ub3JtYWwuZmlsdGVyLnR5cGUgIT09ICdub25lJykge1xuICAgICAgICAgIGZpbHRlcnMuZ2V0RGVmYXVsdEZpbHRlcihlbCwgcmVhbEluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkICYmIGRyYXdTaGFkb3cpIHtcbiAgICAgICAgICAgIGlmICghdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkT25TZXJpZXMgfHwgdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkT25TZXJpZXMgJiYgdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkT25TZXJpZXMuaW5kZXhPZihyZWFsSW5kZXgpICE9PSAtMSkge1xuICAgICAgICAgICAgICB2YXIgc2hhZG93ID0gdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdztcbiAgICAgICAgICAgICAgZmlsdGVycy5kcm9wU2hhZG93KGVsLCBzaGFkb3csIHJlYWxJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpbmRFdmVudHNPblBhdGhzKSB7XG4gICAgICAgICAgZWwubm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5wYXRoTW91c2VFbnRlci5iaW5kKHRoaXMsIGVsKSk7XG4gICAgICAgICAgZWwubm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5wYXRoTW91c2VMZWF2ZS5iaW5kKHRoaXMsIGVsKSk7XG4gICAgICAgICAgZWwubm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnBhdGhNb3VzZURvd24uYmluZCh0aGlzLCBlbCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwuYXR0cih7XG4gICAgICAgICAgcGF0aFRvOiBwYXRoVG8sXG4gICAgICAgICAgcGF0aEZyb206IHBhdGhGcm9tXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZGVmYXVsdEFuaW1hdGVPcHRzID0ge1xuICAgICAgICAgIGVsOiBlbCxcbiAgICAgICAgICBqOiBqLFxuICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgIHBhdGhGcm9tOiBwYXRoRnJvbSxcbiAgICAgICAgICBwYXRoVG86IHBhdGhUbyxcbiAgICAgICAgICBmaWxsOiBmaWxsLFxuICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcbiAgICAgICAgICBkZWxheTogYW5pbWF0aW9uRGVsYXlcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaW5pdGlhbEFuaW0gJiYgIXcuZ2xvYmFscy5yZXNpemVkICYmICF3Lmdsb2JhbHMuZGF0YUNoYW5nZWQpIHtcbiAgICAgICAgICBhbmltLmFuaW1hdGVQYXRoc0dyYWR1YWxseShfb2JqZWN0U3ByZWFkMih7fSwgZGVmYXVsdEFuaW1hdGVPcHRzLCB7XG4gICAgICAgICAgICBzcGVlZDogaW5pdGlhbFNwZWVkXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh3Lmdsb2JhbHMucmVzaXplZCB8fCAhdy5nbG9iYWxzLmRhdGFDaGFuZ2VkKSB7XG4gICAgICAgICAgICBhbmltLnNob3dEZWxheWVkRWxlbWVudHMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5nbG9iYWxzLmRhdGFDaGFuZ2VkICYmIGR5bmFtaWNBbmltICYmIHNob3VsZEFuaW1hdGUpIHtcbiAgICAgICAgICBhbmltLmFuaW1hdGVQYXRoc0dyYWR1YWxseShfb2JqZWN0U3ByZWFkMih7fSwgZGVmYXVsdEFuaW1hdGVPcHRzLCB7XG4gICAgICAgICAgICBzcGVlZDogZGF0YUNoYW5nZVNwZWVkXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3UGF0dGVyblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdQYXR0ZXJuKHN0eWxlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBzdHJva2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICcjNzU3NTc1JztcbiAgICAgICAgdmFyIHN0cm9rZVdpZHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAwO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHAgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLnBhdHRlcm4od2lkdGgsIGhlaWdodCwgZnVuY3Rpb24gKGFkZCkge1xuICAgICAgICAgIGlmIChzdHlsZSA9PT0gJ2hvcml6b250YWxMaW5lcycpIHtcbiAgICAgICAgICAgIGFkZC5saW5lKDAsIDAsIGhlaWdodCwgMCkuc3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IHN0cm9rZSxcbiAgICAgICAgICAgICAgd2lkdGg6IHN0cm9rZVdpZHRoICsgMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gJ3ZlcnRpY2FsTGluZXMnKSB7XG4gICAgICAgICAgICBhZGQubGluZSgwLCAwLCAwLCB3aWR0aCkuc3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IHN0cm9rZSxcbiAgICAgICAgICAgICAgd2lkdGg6IHN0cm9rZVdpZHRoICsgMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gJ3NsYW50ZWRMaW5lcycpIHtcbiAgICAgICAgICAgIGFkZC5saW5lKDAsIDAsIHdpZHRoLCBoZWlnaHQpLnN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiBzdHJva2UsXG4gICAgICAgICAgICAgIHdpZHRoOiBzdHJva2VXaWR0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gJ3NxdWFyZXMnKSB7XG4gICAgICAgICAgICBhZGQucmVjdCh3aWR0aCwgaGVpZ2h0KS5maWxsKCdub25lJykuc3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IHN0cm9rZSxcbiAgICAgICAgICAgICAgd2lkdGg6IHN0cm9rZVdpZHRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0eWxlID09PSAnY2lyY2xlcycpIHtcbiAgICAgICAgICAgIGFkZC5jaXJjbGUod2lkdGgpLmZpbGwoJ25vbmUnKS5zdHJva2Uoe1xuICAgICAgICAgICAgICBjb2xvcjogc3Ryb2tlLFxuICAgICAgICAgICAgICB3aWR0aDogc3Ryb2tlV2lkdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3R3JhZGllbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3R3JhZGllbnQoc3R5bGUsIGdmcm9tLCBndG8sIG9wYWNpdHlGcm9tLCBvcGFjaXR5VG8pIHtcbiAgICAgICAgdmFyIHNpemUgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IG51bGw7XG4gICAgICAgIHZhciBzdG9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogbnVsbDtcbiAgICAgICAgdmFyIGNvbG9yU3RvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6IG51bGw7XG4gICAgICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCA+IDggJiYgYXJndW1lbnRzWzhdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbOF0gOiAwO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGc7XG4gICAgICAgIGdmcm9tID0gVXRpbHMuaGV4VG9SZ2JhKGdmcm9tLCBvcGFjaXR5RnJvbSk7XG4gICAgICAgIGd0byA9IFV0aWxzLmhleFRvUmdiYShndG8sIG9wYWNpdHlUbyk7XG4gICAgICAgIHZhciBzdG9wMSA9IDA7XG4gICAgICAgIHZhciBzdG9wMiA9IDE7XG4gICAgICAgIHZhciBzdG9wMyA9IDE7XG4gICAgICAgIHZhciBzdG9wNCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHN0b3BzICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RvcDEgPSB0eXBlb2Ygc3RvcHNbMF0gIT09ICd1bmRlZmluZWQnID8gc3RvcHNbMF0gLyAxMDAgOiAwO1xuICAgICAgICAgIHN0b3AyID0gdHlwZW9mIHN0b3BzWzFdICE9PSAndW5kZWZpbmVkJyA/IHN0b3BzWzFdIC8gMTAwIDogMTtcbiAgICAgICAgICBzdG9wMyA9IHR5cGVvZiBzdG9wc1syXSAhPT0gJ3VuZGVmaW5lZCcgPyBzdG9wc1syXSAvIDEwMCA6IDE7XG4gICAgICAgICAgc3RvcDQgPSB0eXBlb2Ygc3RvcHNbM10gIT09ICd1bmRlZmluZWQnID8gc3RvcHNbM10gLyAxMDAgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJhZGlhbCA9ICEhKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdkb251dCcgfHwgdy5jb25maWcuY2hhcnQudHlwZSA9PT0gJ3BpZScgfHwgdy5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2J1YmJsZScpO1xuXG4gICAgICAgIGlmIChjb2xvclN0b3BzID09PSBudWxsIHx8IGNvbG9yU3RvcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZyA9IHcuZ2xvYmFscy5kb20uUGFwZXIuZ3JhZGllbnQocmFkaWFsID8gJ3JhZGlhbCcgOiAnbGluZWFyJywgZnVuY3Rpb24gKHN0b3ApIHtcbiAgICAgICAgICAgIHN0b3AuYXQoc3RvcDEsIGdmcm9tLCBvcGFjaXR5RnJvbSk7XG4gICAgICAgICAgICBzdG9wLmF0KHN0b3AyLCBndG8sIG9wYWNpdHlUbyk7XG4gICAgICAgICAgICBzdG9wLmF0KHN0b3AzLCBndG8sIG9wYWNpdHlUbyk7XG5cbiAgICAgICAgICAgIGlmIChzdG9wNCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBzdG9wLmF0KHN0b3A0LCBnZnJvbSwgb3BhY2l0eUZyb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGcgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLmdyYWRpZW50KHJhZGlhbCA/ICdyYWRpYWwnIDogJ2xpbmVhcicsIGZ1bmN0aW9uIChzdG9wKSB7XG4gICAgICAgICAgICB2YXIgZ3JhZGllbnRTdG9wcyA9IEFycmF5LmlzQXJyYXkoY29sb3JTdG9wc1tpXSkgPyBjb2xvclN0b3BzW2ldIDogY29sb3JTdG9wcztcbiAgICAgICAgICAgIGdyYWRpZW50U3RvcHMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICBzdG9wLmF0KHMub2Zmc2V0IC8gMTAwLCBzLmNvbG9yLCBzLm9wYWNpdHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJhZGlhbCkge1xuICAgICAgICAgIGlmIChzdHlsZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgZy5mcm9tKDAsIDApLnRvKDAsIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3R5bGUgPT09ICdkaWFnb25hbCcpIHtcbiAgICAgICAgICAgIGcuZnJvbSgwLCAwKS50bygxLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0eWxlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIGcuZnJvbSgwLCAxKS50bygxLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0eWxlID09PSAnZGlhZ29uYWwyJykge1xuICAgICAgICAgICAgZy5mcm9tKDEsIDApLnRvKDAsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb2ZmeCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLyAyO1xuICAgICAgICAgIHZhciBvZmZ5ID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQgLyAyO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgIT09ICdidWJibGUnKSB7XG4gICAgICAgICAgICBnLmF0dHIoe1xuICAgICAgICAgICAgICBncmFkaWVudFVuaXRzOiAndXNlclNwYWNlT25Vc2UnLFxuICAgICAgICAgICAgICBjeDogb2ZmeCxcbiAgICAgICAgICAgICAgY3k6IG9mZnksXG4gICAgICAgICAgICAgIHI6IHNpemVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnLmF0dHIoe1xuICAgICAgICAgICAgICBjeDogMC41LFxuICAgICAgICAgICAgICBjeTogMC41LFxuICAgICAgICAgICAgICByOiAwLjgsXG4gICAgICAgICAgICAgIGZ4OiAwLjIsXG4gICAgICAgICAgICAgIGZ5OiAwLjJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3VGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUZXh0KF9yZWYzKSB7XG4gICAgICAgIHZhciB4ID0gX3JlZjMueCxcbiAgICAgICAgICAgIHkgPSBfcmVmMy55LFxuICAgICAgICAgICAgdGV4dCA9IF9yZWYzLnRleHQsXG4gICAgICAgICAgICB0ZXh0QW5jaG9yID0gX3JlZjMudGV4dEFuY2hvcixcbiAgICAgICAgICAgIGZvbnRTaXplID0gX3JlZjMuZm9udFNpemUsXG4gICAgICAgICAgICBmb250RmFtaWx5ID0gX3JlZjMuZm9udEZhbWlseSxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQgPSBfcmVmMy5mb250V2VpZ2h0LFxuICAgICAgICAgICAgZm9yZUNvbG9yID0gX3JlZjMuZm9yZUNvbG9yLFxuICAgICAgICAgICAgb3BhY2l0eSA9IF9yZWYzLm9wYWNpdHksXG4gICAgICAgICAgICBfcmVmMyRjc3NDbGFzcyA9IF9yZWYzLmNzc0NsYXNzLFxuICAgICAgICAgICAgY3NzQ2xhc3MgPSBfcmVmMyRjc3NDbGFzcyA9PT0gdm9pZCAwID8gJycgOiBfcmVmMyRjc3NDbGFzcyxcbiAgICAgICAgICAgIF9yZWYzJGlzUGxhaW5UZXh0ID0gX3JlZjMuaXNQbGFpblRleHQsXG4gICAgICAgICAgICBpc1BsYWluVGV4dCA9IF9yZWYzJGlzUGxhaW5UZXh0ID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkaXNQbGFpblRleHQ7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB0ZXh0ID0gJyc7XG5cbiAgICAgICAgaWYgKCF0ZXh0QW5jaG9yKSB7XG4gICAgICAgICAgdGV4dEFuY2hvciA9ICdzdGFydCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZvcmVDb2xvciB8fCAhZm9yZUNvbG9yLmxlbmd0aCkge1xuICAgICAgICAgIGZvcmVDb2xvciA9IHcuY29uZmlnLmNoYXJ0LmZvcmVDb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvbnRGYW1pbHkgPSBmb250RmFtaWx5IHx8IHcuY29uZmlnLmNoYXJ0LmZvbnRGYW1pbHk7XG4gICAgICAgIGZvbnRXZWlnaHQgPSBmb250V2VpZ2h0IHx8ICdyZWd1bGFyJztcbiAgICAgICAgdmFyIGVsVGV4dDtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0ZXh0KSkge1xuICAgICAgICAgIGVsVGV4dCA9IHcuZ2xvYmFscy5kb20uUGFwZXIudGV4dChmdW5jdGlvbiAoYWRkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaSA9PT0gMCA/IGFkZC50c3Bhbih0ZXh0W2ldKSA6IGFkZC50c3Bhbih0ZXh0W2ldKS5uZXdMaW5lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxUZXh0ID0gaXNQbGFpblRleHQgPyB3Lmdsb2JhbHMuZG9tLlBhcGVyLnBsYWluKHRleHQpIDogdy5nbG9iYWxzLmRvbS5QYXBlci50ZXh0KGZ1bmN0aW9uIChhZGQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGQudHNwYW4odGV4dCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbFRleHQuYXR0cih7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5LFxuICAgICAgICAgICd0ZXh0LWFuY2hvcic6IHRleHRBbmNob3IsXG4gICAgICAgICAgJ2RvbWluYW50LWJhc2VsaW5lJzogJ2F1dG8nLFxuICAgICAgICAgICdmb250LXNpemUnOiBmb250U2l6ZSxcbiAgICAgICAgICAnZm9udC1mYW1pbHknOiBmb250RmFtaWx5LFxuICAgICAgICAgICdmb250LXdlaWdodCc6IGZvbnRXZWlnaHQsXG4gICAgICAgICAgZmlsbDogZm9yZUNvbG9yLFxuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy10ZXh0ICcgKyBjc3NDbGFzc1xuICAgICAgICB9KTtcbiAgICAgICAgZWxUZXh0Lm5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XG4gICAgICAgIGVsVGV4dC5ub2RlLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5O1xuICAgICAgICByZXR1cm4gZWxUZXh0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3TWFya2VyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd01hcmtlcih4LCB5LCBvcHRzKSB7XG4gICAgICAgIHggPSB4IHx8IDA7XG4gICAgICAgIHZhciBzaXplID0gb3B0cy5wU2l6ZSB8fCAwO1xuICAgICAgICB2YXIgZWxQb2ludCA9IG51bGw7XG5cbiAgICAgICAgaWYgKG9wdHMuc2hhcGUgPT09ICdzcXVhcmUnKSB7XG4gICAgICAgICAgdmFyIHJhZGl1cyA9IG9wdHMucFJhZGl1cyA9PT0gdW5kZWZpbmVkID8gc2l6ZSAvIDIgOiBvcHRzLnBSYWRpdXM7XG5cbiAgICAgICAgICBpZiAoeSA9PT0gbnVsbCB8fCAhc2l6ZSkge1xuICAgICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgICByYWRpdXMgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBuU2l6ZSA9IHNpemUgKiAxLjIgKyByYWRpdXM7XG4gICAgICAgICAgdmFyIHAgPSB0aGlzLmRyYXdSZWN0KG5TaXplLCBuU2l6ZSwgblNpemUsIG5TaXplLCByYWRpdXMpO1xuICAgICAgICAgIHAuYXR0cih7XG4gICAgICAgICAgICB4OiB4IC0gblNpemUgLyAyLFxuICAgICAgICAgICAgeTogeSAtIG5TaXplIC8gMixcbiAgICAgICAgICAgIGN4OiB4LFxuICAgICAgICAgICAgY3k6IHksXG4gICAgICAgICAgICBjbGFzczogb3B0cy5jbGFzcyA/IG9wdHMuY2xhc3MgOiAnJyxcbiAgICAgICAgICAgIGZpbGw6IG9wdHMucG9pbnRGaWxsQ29sb3IsXG4gICAgICAgICAgICAnZmlsbC1vcGFjaXR5Jzogb3B0cy5wb2ludEZpbGxPcGFjaXR5ID8gb3B0cy5wb2ludEZpbGxPcGFjaXR5IDogMSxcbiAgICAgICAgICAgIHN0cm9rZTogb3B0cy5wb2ludFN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IG9wdHMucFdpZHRoID8gb3B0cy5wV2lkdGggOiAwLFxuICAgICAgICAgICAgJ3N0cm9rZS1vcGFjaXR5Jzogb3B0cy5wb2ludFN0cm9rZU9wYWNpdHkgPyBvcHRzLnBvaW50U3Ryb2tlT3BhY2l0eSA6IDFcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbFBvaW50ID0gcDtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRzLnNoYXBlID09PSAnY2lyY2xlJyB8fCAhb3B0cy5zaGFwZSkge1xuICAgICAgICAgIGlmICghVXRpbHMuaXNOdW1iZXIoeSkpIHtcbiAgICAgICAgICAgIHNpemUgPSAwO1xuICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgfSAvLyBsZXQgblNpemUgPSBzaXplIC0gb3B0cy5wUmFkaXVzIC8gMiA8IDAgPyAwIDogc2l6ZSAtIG9wdHMucFJhZGl1cyAvIDJcblxuXG4gICAgICAgICAgZWxQb2ludCA9IHRoaXMuZHJhd0NpcmNsZShzaXplLCB7XG4gICAgICAgICAgICBjeDogeCxcbiAgICAgICAgICAgIGN5OiB5LFxuICAgICAgICAgICAgY2xhc3M6IG9wdHMuY2xhc3MgPyBvcHRzLmNsYXNzIDogJycsXG4gICAgICAgICAgICBzdHJva2U6IG9wdHMucG9pbnRTdHJva2VDb2xvcixcbiAgICAgICAgICAgIGZpbGw6IG9wdHMucG9pbnRGaWxsQ29sb3IsXG4gICAgICAgICAgICAnZmlsbC1vcGFjaXR5Jzogb3B0cy5wb2ludEZpbGxPcGFjaXR5ID8gb3B0cy5wb2ludEZpbGxPcGFjaXR5IDogMSxcbiAgICAgICAgICAgICdzdHJva2Utd2lkdGgnOiBvcHRzLnBXaWR0aCA/IG9wdHMucFdpZHRoIDogMCxcbiAgICAgICAgICAgICdzdHJva2Utb3BhY2l0eSc6IG9wdHMucG9pbnRTdHJva2VPcGFjaXR5ID8gb3B0cy5wb2ludFN0cm9rZU9wYWNpdHkgOiAxXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxQb2ludDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGF0aE1vdXNlRW50ZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXRoTW91c2VFbnRlcihwYXRoLCBlKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZmlsdGVycyA9IG5ldyBGaWx0ZXJzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGkgPSBwYXJzZUludChwYXRoLm5vZGUuZ2V0QXR0cmlidXRlKCdpbmRleCcpLCAxMCk7XG4gICAgICAgIHZhciBqID0gcGFyc2VJbnQocGF0aC5ub2RlLmdldEF0dHJpYnV0ZSgnaicpLCAxMCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy5jaGFydC5ldmVudHMuZGF0YVBvaW50TW91c2VFbnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5kYXRhUG9pbnRNb3VzZUVudGVyKGUsIHRoaXMuY3R4LCB7XG4gICAgICAgICAgICBzZXJpZXNJbmRleDogaSxcbiAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBqLFxuICAgICAgICAgICAgdzogd1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdHguZXZlbnRzLmZpcmVFdmVudCgnZGF0YVBvaW50TW91c2VFbnRlcicsIFtlLCB0aGlzLmN0eCwge1xuICAgICAgICAgIHNlcmllc0luZGV4OiBpLFxuICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBqLFxuICAgICAgICAgIHc6IHdcbiAgICAgICAgfV0pO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5zdGF0ZXMuYWN0aXZlLmZpbHRlci50eXBlICE9PSAnbm9uZScpIHtcbiAgICAgICAgICBpZiAocGF0aC5ub2RlLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnN0YXRlcy5ob3Zlci5maWx0ZXIudHlwZSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLnN0YXRlcy5hY3RpdmUuZmlsdGVyLnR5cGUgIT09ICdub25lJyAmJiAhdy5nbG9iYWxzLmlzVG91Y2hEZXZpY2UpIHtcbiAgICAgICAgICAgIHZhciBob3ZlckZpbHRlciA9IHcuY29uZmlnLnN0YXRlcy5ob3Zlci5maWx0ZXI7XG4gICAgICAgICAgICBmaWx0ZXJzLmFwcGx5RmlsdGVyKHBhdGgsIGksIGhvdmVyRmlsdGVyLnR5cGUsIGhvdmVyRmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGF0aE1vdXNlTGVhdmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXRoTW91c2VMZWF2ZShwYXRoLCBlKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZmlsdGVycyA9IG5ldyBGaWx0ZXJzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGkgPSBwYXJzZUludChwYXRoLm5vZGUuZ2V0QXR0cmlidXRlKCdpbmRleCcpLCAxMCk7XG4gICAgICAgIHZhciBqID0gcGFyc2VJbnQocGF0aC5ub2RlLmdldEF0dHJpYnV0ZSgnaicpLCAxMCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy5jaGFydC5ldmVudHMuZGF0YVBvaW50TW91c2VMZWF2ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5kYXRhUG9pbnRNb3VzZUxlYXZlKGUsIHRoaXMuY3R4LCB7XG4gICAgICAgICAgICBzZXJpZXNJbmRleDogaSxcbiAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBqLFxuICAgICAgICAgICAgdzogd1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdHguZXZlbnRzLmZpcmVFdmVudCgnZGF0YVBvaW50TW91c2VMZWF2ZScsIFtlLCB0aGlzLmN0eCwge1xuICAgICAgICAgIHNlcmllc0luZGV4OiBpLFxuICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBqLFxuICAgICAgICAgIHc6IHdcbiAgICAgICAgfV0pO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5zdGF0ZXMuYWN0aXZlLmZpbHRlci50eXBlICE9PSAnbm9uZScpIHtcbiAgICAgICAgICBpZiAocGF0aC5ub2RlLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnN0YXRlcy5ob3Zlci5maWx0ZXIudHlwZSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgZmlsdGVycy5nZXREZWZhdWx0RmlsdGVyKHBhdGgsIGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhdGhNb3VzZURvd25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXRoTW91c2VEb3duKHBhdGgsIGUpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICB2YXIgaSA9IHBhcnNlSW50KHBhdGgubm9kZS5nZXRBdHRyaWJ1dGUoJ2luZGV4JyksIDEwKTtcbiAgICAgICAgdmFyIGogPSBwYXJzZUludChwYXRoLm5vZGUuZ2V0QXR0cmlidXRlKCdqJyksIDEwKTtcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gJ2ZhbHNlJztcblxuICAgICAgICBpZiAocGF0aC5ub2RlLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgcGF0aC5ub2RlLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuc2VsZWN0ZWREYXRhUG9pbnRzW2ldLmluZGV4T2YoaikgPiAtMSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gdy5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50c1tpXS5pbmRleE9mKGopO1xuICAgICAgICAgICAgdy5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50c1tpXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXcuY29uZmlnLnN0YXRlcy5hY3RpdmUuYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb24gJiYgdy5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3Lmdsb2JhbHMuc2VsZWN0ZWREYXRhUG9pbnRzID0gW107XG4gICAgICAgICAgICB2YXIgZWxQYXRocyA9IHcuZ2xvYmFscy5kb20uUGFwZXIuc2VsZWN0KCcuYXBleGNoYXJ0cy1zZXJpZXMgcGF0aCcpLm1lbWJlcnM7XG4gICAgICAgICAgICB2YXIgZWxDaXJjbGVzID0gdy5nbG9iYWxzLmRvbS5QYXBlci5zZWxlY3QoJy5hcGV4Y2hhcnRzLXNlcmllcyBjaXJjbGUsIC5hcGV4Y2hhcnRzLXNlcmllcyByZWN0JykubWVtYmVycztcblxuICAgICAgICAgICAgdmFyIGRlU2VsZWN0ID0gZnVuY3Rpb24gZGVTZWxlY3QoZWxzKSB7XG4gICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWxzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBlbC5ub2RlLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzLmdldERlZmF1bHRGaWx0ZXIoZWwsIGkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRlU2VsZWN0KGVsUGF0aHMpO1xuICAgICAgICAgICAgZGVTZWxlY3QoZWxDaXJjbGVzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoLm5vZGUuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICd0cnVlJyk7XG4gICAgICAgICAgc2VsZWN0ZWQgPSAndHJ1ZSc7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHcuZ2xvYmFscy5zZWxlY3RlZERhdGFQb2ludHNbaV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB3Lmdsb2JhbHMuc2VsZWN0ZWREYXRhUG9pbnRzW2ldID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdy5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50c1tpXS5wdXNoKGopO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkID09PSAndHJ1ZScpIHtcbiAgICAgICAgICB2YXIgYWN0aXZlRmlsdGVyID0gdy5jb25maWcuc3RhdGVzLmFjdGl2ZS5maWx0ZXI7XG5cbiAgICAgICAgICBpZiAoYWN0aXZlRmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgIGZpbHRlcnMuYXBwbHlGaWx0ZXIocGF0aCwgaSwgYWN0aXZlRmlsdGVyLnR5cGUsIGFjdGl2ZUZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh3LmNvbmZpZy5zdGF0ZXMuYWN0aXZlLmZpbHRlci50eXBlICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgIGZpbHRlcnMuZ2V0RGVmYXVsdEZpbHRlcihwYXRoLCBpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5kYXRhUG9pbnRTZWxlY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB3LmNvbmZpZy5jaGFydC5ldmVudHMuZGF0YVBvaW50U2VsZWN0aW9uKGUsIHRoaXMuY3R4LCB7XG4gICAgICAgICAgICBzZWxlY3RlZERhdGFQb2ludHM6IHcuZ2xvYmFscy5zZWxlY3RlZERhdGFQb2ludHMsXG4gICAgICAgICAgICBzZXJpZXNJbmRleDogaSxcbiAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBqLFxuICAgICAgICAgICAgdzogd1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICB0aGlzLmN0eC5ldmVudHMuZmlyZUV2ZW50KCdkYXRhUG9pbnRTZWxlY3Rpb24nLCBbZSwgdGhpcy5jdHgsIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRGF0YVBvaW50czogdy5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50cyxcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiBpLFxuICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGosXG4gICAgICAgICAgICB3OiB3XG4gICAgICAgICAgfV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJvdGF0ZUFyb3VuZENlbnRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJvdGF0ZUFyb3VuZENlbnRlcihlbCkge1xuICAgICAgICB2YXIgY29vcmQgPSBlbC5nZXRCQm94KCk7XG4gICAgICAgIHZhciB4ID0gY29vcmQueCArIGNvb3JkLndpZHRoIC8gMjtcbiAgICAgICAgdmFyIHkgPSBjb29yZC55ICsgY29vcmQuaGVpZ2h0IC8gMjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0VGV4dFJlY3RzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGV4dFJlY3RzKHRleHQsIGZvbnRTaXplLCBmb250RmFtaWx5LCB0cmFuc2Zvcm0pIHtcbiAgICAgICAgdmFyIHVzZUJCb3ggPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHRydWU7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdmlydHVhbFRleHQgPSB0aGlzLmRyYXdUZXh0KHtcbiAgICAgICAgICB4OiAtMjAwLFxuICAgICAgICAgIHk6IC0yMDAsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICB0ZXh0QW5jaG9yOiAnc3RhcnQnLFxuICAgICAgICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICAgICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgICAgIGZvcmVDb2xvcjogJyNmZmYnLFxuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgIHZpcnR1YWxUZXh0LmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICB3Lmdsb2JhbHMuZG9tLlBhcGVyLmFkZCh2aXJ0dWFsVGV4dCk7XG4gICAgICAgIHZhciByZWN0ID0gdmlydHVhbFRleHQuYmJveCgpO1xuXG4gICAgICAgIGlmICghdXNlQkJveCkge1xuICAgICAgICAgIHJlY3QgPSB2aXJ0dWFsVGV4dC5ub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmlydHVhbFRleHQucmVtb3ZlKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBhcHBlbmQgLi4uIHRvIGxvbmcgdGV4dFxuICAgICAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85MjQxMzE1L3RyaW1taW5nLXRleHQtdG8tYS1naXZlbi1waXhlbC13aWR0aC1pbi1zdmdcbiAgICAgICAqIEBtZW1iZXJvZiBHcmFwaGljc1xuICAgICAgICoqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInBsYWNlVGV4dFdpdGhFbGxpcHNpc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlVGV4dFdpdGhFbGxpcHNpcyh0ZXh0T2JqLCB0ZXh0U3RyaW5nLCB3aWR0aCkge1xuICAgICAgICBpZiAodHlwZW9mIHRleHRPYmouZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gICAgICAgIHRleHRPYmoudGV4dENvbnRlbnQgPSB0ZXh0U3RyaW5nO1xuXG4gICAgICAgIGlmICh0ZXh0U3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBlbGxpcHNpcyBpcyBuZWVkZWRcbiAgICAgICAgICBpZiAodGV4dE9iai5nZXRDb21wdXRlZFRleHRMZW5ndGgoKSA+PSB3aWR0aCAvIDAuOCkge1xuICAgICAgICAgICAgZm9yICh2YXIgeCA9IHRleHRTdHJpbmcubGVuZ3RoIC0gMzsgeCA+IDA7IHggLT0gMykge1xuICAgICAgICAgICAgICBpZiAodGV4dE9iai5nZXRTdWJTdHJpbmdMZW5ndGgoMCwgeCkgPD0gd2lkdGggLyAwLjgpIHtcbiAgICAgICAgICAgICAgICB0ZXh0T2JqLnRleHRDb250ZW50ID0gdGV4dFN0cmluZy5zdWJzdHJpbmcoMCwgeCkgKyAnLi4uJztcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGV4dE9iai50ZXh0Q29udGVudCA9ICcuJzsgLy8gY2FuJ3QgcGxhY2UgYXQgYWxsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwic2V0QXR0cnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBdHRycyhlbCwgYXR0cnMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgICAgICAgaWYgKGF0dHJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBHcmFwaGljcztcbiAgfSgpO1xuXG4gIHZhciBIZWxwZXJzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIZWxwZXJzKGFubm9DdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWxwZXJzKTtcblxuICAgICAgdGhpcy53ID0gYW5ub0N0eC53O1xuICAgICAgdGhpcy5hbm5vQ3R4ID0gYW5ub0N0eDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSGVscGVycywgW3tcbiAgICAgIGtleTogXCJzZXRPcmllbnRhdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcmllbnRhdGlvbnMoYW5ubykge1xuICAgICAgICB2YXIgYW5ub0luZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcblxuICAgICAgICBpZiAoYW5uby5sYWJlbC5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgIHZhciBpID0gYW5ub0luZGV4ICE9PSBudWxsID8gYW5ub0luZGV4IDogMDtcbiAgICAgICAgICB2YXIgeEFubm8gPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMteGF4aXMtYW5ub3RhdGlvbnMgLmFwZXhjaGFydHMteGF4aXMtYW5ub3RhdGlvbi1sYWJlbFtyZWw9J1wiLmNvbmNhdChpLCBcIiddXCIpKTtcblxuICAgICAgICAgIGlmICh4QW5ubyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHhBbm5vQ29vcmQgPSB4QW5uby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHhBbm5vLnNldEF0dHJpYnV0ZSgneCcsIHBhcnNlRmxvYXQoeEFubm8uZ2V0QXR0cmlidXRlKCd4JykpIC0geEFubm9Db29yZC5oZWlnaHQgKyA0KTtcblxuICAgICAgICAgICAgaWYgKGFubm8ubGFiZWwucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgIHhBbm5vLnNldEF0dHJpYnV0ZSgneScsIHBhcnNlRmxvYXQoeEFubm8uZ2V0QXR0cmlidXRlKCd5JykpICsgeEFubm9Db29yZC53aWR0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB4QW5uby5zZXRBdHRyaWJ1dGUoJ3knLCBwYXJzZUZsb2F0KHhBbm5vLmdldEF0dHJpYnV0ZSgneScpKSAtIHhBbm5vQ29vcmQud2lkdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYW5ub1JvdGF0aW5nQ2VudGVyID0gdGhpcy5hbm5vQ3R4LmdyYXBoaWNzLnJvdGF0ZUFyb3VuZENlbnRlcih4QW5ubyk7XG4gICAgICAgICAgICB2YXIgeCA9IGFubm9Sb3RhdGluZ0NlbnRlci54O1xuICAgICAgICAgICAgdmFyIHkgPSBhbm5vUm90YXRpbmdDZW50ZXIueTtcbiAgICAgICAgICAgIHhBbm5vLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgXCJyb3RhdGUoLTkwIFwiLmNvbmNhdCh4LCBcIiBcIikuY29uY2F0KHksIFwiKVwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZEJhY2tncm91bmRUb0Fubm9cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRCYWNrZ3JvdW5kVG9Bbm5vKGFubm9FbCwgYW5ubykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgaWYgKCFhbm5vLmxhYmVsLnRleHQgfHwgYW5uby5sYWJlbC50ZXh0ICYmICFhbm5vLmxhYmVsLnRleHQudHJpbSgpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIGVsR3JpZFJlY3QgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy1ncmlkJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBjb29yZHMgPSBhbm5vRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBwbGVmdCA9IGFubm8ubGFiZWwuc3R5bGUucGFkZGluZy5sZWZ0O1xuICAgICAgICB2YXIgcHJpZ2h0ID0gYW5uby5sYWJlbC5zdHlsZS5wYWRkaW5nLnJpZ2h0O1xuICAgICAgICB2YXIgcHRvcCA9IGFubm8ubGFiZWwuc3R5bGUucGFkZGluZy50b3A7XG4gICAgICAgIHZhciBwYm90dG9tID0gYW5uby5sYWJlbC5zdHlsZS5wYWRkaW5nLmJvdHRvbTtcblxuICAgICAgICBpZiAoYW5uby5sYWJlbC5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgIHB0b3AgPSBhbm5vLmxhYmVsLnN0eWxlLnBhZGRpbmcubGVmdDtcbiAgICAgICAgICBwYm90dG9tID0gYW5uby5sYWJlbC5zdHlsZS5wYWRkaW5nLnJpZ2h0O1xuICAgICAgICAgIHBsZWZ0ID0gYW5uby5sYWJlbC5zdHlsZS5wYWRkaW5nLnRvcDtcbiAgICAgICAgICBwcmlnaHQgPSBhbm5vLmxhYmVsLnN0eWxlLnBhZGRpbmcuYm90dG9tO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHgxID0gY29vcmRzLmxlZnQgLSBlbEdyaWRSZWN0LmxlZnQgLSBwbGVmdDtcbiAgICAgICAgdmFyIHkxID0gY29vcmRzLnRvcCAtIGVsR3JpZFJlY3QudG9wIC0gcHRvcDtcbiAgICAgICAgdmFyIGVsUmVjdCA9IHRoaXMuYW5ub0N0eC5ncmFwaGljcy5kcmF3UmVjdCh4MSwgeTEsIGNvb3Jkcy53aWR0aCArIHBsZWZ0ICsgcHJpZ2h0LCBjb29yZHMuaGVpZ2h0ICsgcHRvcCArIHBib3R0b20sIDAsIGFubm8ubGFiZWwuc3R5bGUuYmFja2dyb3VuZCwgMSwgYW5uby5sYWJlbC5ib3JkZXJXaWR0aCwgYW5uby5sYWJlbC5ib3JkZXJDb2xvciwgMCk7XG5cbiAgICAgICAgaWYgKGFubm8uaWQpIHtcbiAgICAgICAgICBlbFJlY3Qubm9kZS5jbGFzc0xpc3QuYWRkKGFubm8uaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsUmVjdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYW5ub3RhdGlvbnNCYWNrZ3JvdW5kXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYW5ub3RhdGlvbnNCYWNrZ3JvdW5kKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIHZhciBhZGQgPSBmdW5jdGlvbiBhZGQoYW5ubywgaSwgdHlwZSkge1xuICAgICAgICAgIHZhciBhbm5vTGFiZWwgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtXCIuY29uY2F0KHR5cGUsIFwiLWFubm90YXRpb25zIC5hcGV4Y2hhcnRzLVwiKS5jb25jYXQodHlwZSwgXCItYW5ub3RhdGlvbi1sYWJlbFtyZWw9J1wiKS5jb25jYXQoaSwgXCInXVwiKSk7XG5cbiAgICAgICAgICBpZiAoYW5ub0xhYmVsKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gYW5ub0xhYmVsLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgIHZhciBlbFJlY3QgPSBfdGhpcy5hZGRCYWNrZ3JvdW5kVG9Bbm5vKGFubm9MYWJlbCwgYW5ubyk7XG5cbiAgICAgICAgICAgIGlmIChlbFJlY3QpIHtcbiAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShlbFJlY3Qubm9kZSwgYW5ub0xhYmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdy5jb25maWcuYW5ub3RhdGlvbnMueGF4aXMubWFwKGZ1bmN0aW9uIChhbm5vLCBpKSB7XG4gICAgICAgICAgYWRkKGFubm8sIGksICd4YXhpcycpO1xuICAgICAgICB9KTtcbiAgICAgICAgdy5jb25maWcuYW5ub3RhdGlvbnMueWF4aXMubWFwKGZ1bmN0aW9uIChhbm5vLCBpKSB7XG4gICAgICAgICAgYWRkKGFubm8sIGksICd5YXhpcycpO1xuICAgICAgICB9KTtcbiAgICAgICAgdy5jb25maWcuYW5ub3RhdGlvbnMucG9pbnRzLm1hcChmdW5jdGlvbiAoYW5ubywgaSkge1xuICAgICAgICAgIGFkZChhbm5vLCBpLCAncG9pbnQnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm1ha2VBbm5vdGF0aW9uRHJhZ2dhYmxlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbWFrZUFubm90YXRpb25EcmFnZ2FibGUoZWwsIGFubm9UeXBlLCBpbmRleCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGFubm8gPSB3LmNvbmZpZy5hbm5vdGF0aW9uc1thbm5vVHlwZV1baW5kZXhdOyAvLyBpbiB0aGUgZHJhZ2dhYmxlIGFubm90YXRpb25zLCB3ZSB3aWxsIG11dGF0ZSB0aGUgb3JpZ2luYWwgY29uZmlnXG4gICAgICAgIC8vIG9iamVjdCBhbmQgc3RvcmUgdGhlIHZhbHVlcyBkaXJlY3RseSB0aGVyZVxuXG4gICAgICAgIGVsLmRyYWdnYWJsZSgpLm9uKCdkcmFnZW5kJywgZnVuY3Rpb24gKGRlKSB7XG4gICAgICAgICAgdmFyIHggPSBkZS50YXJnZXQuZ2V0QXR0cmlidXRlKCd4Jyk7XG4gICAgICAgICAgdmFyIHkgPSBkZS50YXJnZXQuZ2V0QXR0cmlidXRlKCd5Jyk7XG4gICAgICAgICAgdmFyIGN4ID0gZGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnY3gnKTtcbiAgICAgICAgICB2YXIgY3kgPSBkZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdjeScpO1xuICAgICAgICAgIGFubm8ueCA9IHg7XG4gICAgICAgICAgYW5uby55ID0geTtcblxuICAgICAgICAgIGlmIChjeCAmJiBjeSkge1xuICAgICAgICAgICAgYW5uby54ID0gY3g7XG4gICAgICAgICAgICBhbm5vLnkgPSBjeTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlbC5zZWxlY3RpemUoe1xuICAgICAgICAgICAgcG9pbnRTaXplOiA4LFxuICAgICAgICAgICAgcm90YXRpb25Qb2ludDogZmFsc2UsXG4gICAgICAgICAgICBwb2ludFR5cGU6ICdyZWN0J1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsLnJlc2l6ZSgpLm9uKCdyZXNpemVkb25lJywgZnVuY3Rpb24gKHJlKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSByZS50YXJnZXQuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgICAgICAgICAgdmFyIHIgPSByZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdyJyk7XG4gICAgICAgICAgICBhbm5vLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBhbm5vLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgYW5uby5yYWRpdXMgPSByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0U3RyaW5nWFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0cmluZ1goeCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHJYID0geDtcblxuICAgICAgICBpZiAody5jb25maWcueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljICYmIHcuZ2xvYmFscy5jYXRlZ29yeUxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgICB4ID0gdy5nbG9iYWxzLmNhdGVnb3J5TGFiZWxzLmluZGV4T2YoeCkgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNhdEluZGV4ID0gdy5nbG9iYWxzLmxhYmVscy5pbmRleE9mKHgpO1xuICAgICAgICB2YXIgeExhYmVsID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMteGF4aXMtdGV4dHMtZyB0ZXh0Om50aC1jaGlsZCgnICsgKGNhdEluZGV4ICsgMSkgKyAnKScpO1xuXG4gICAgICAgIGlmICh4TGFiZWwpIHtcbiAgICAgICAgICByWCA9IHBhcnNlRmxvYXQoeExhYmVsLmdldEF0dHJpYnV0ZSgneCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByWDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSGVscGVycztcbiAgfSgpO1xuXG4gIHZhciBYQW5ub3RhdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFhBbm5vdGF0aW9ucyhhbm5vQ3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWEFubm90YXRpb25zKTtcblxuICAgICAgdGhpcy53ID0gYW5ub0N0eC53O1xuICAgICAgdGhpcy5hbm5vQ3R4ID0gYW5ub0N0eDtcbiAgICAgIHRoaXMuaW52ZXJ0QXhpcyA9IHRoaXMuYW5ub0N0eC5pbnZlcnRBeGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhYQW5ub3RhdGlvbnMsIFt7XG4gICAgICBrZXk6IFwiYWRkWGF4aXNBbm5vdGF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkWGF4aXNBbm5vdGF0aW9uKGFubm8sIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBtaW4gPSB0aGlzLmludmVydEF4aXMgPyB3Lmdsb2JhbHMubWluWSA6IHcuZ2xvYmFscy5taW5YO1xuICAgICAgICB2YXIgbWF4ID0gdGhpcy5pbnZlcnRBeGlzID8gdy5nbG9iYWxzLm1heFkgOiB3Lmdsb2JhbHMubWF4WDtcbiAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5pbnZlcnRBeGlzID8gdy5nbG9iYWxzLnlSYW5nZVswXSA6IHcuZ2xvYmFscy54UmFuZ2U7XG4gICAgICAgIHZhciB4MSA9IChhbm5vLnggLSBtaW4pIC8gKHJhbmdlIC8gdy5nbG9iYWxzLmdyaWRXaWR0aCk7XG5cbiAgICAgICAgaWYgKHRoaXMuYW5ub0N0eC5pbnZlcnNlZFJldmVyc2VkQXhpcykge1xuICAgICAgICAgIHgxID0gKG1heCAtIGFubm8ueCkgLyAocmFuZ2UgLyB3Lmdsb2JhbHMuZ3JpZFdpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZXh0ID0gYW5uby5sYWJlbC50ZXh0O1xuXG4gICAgICAgIGlmICgody5jb25maWcueGF4aXMudHlwZSA9PT0gJ2NhdGVnb3J5JyB8fCB3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpICYmICF0aGlzLmludmVydEF4aXMgJiYgIXcuZ2xvYmFscy5kYXRhRm9ybWF0WE51bWVyaWMpIHtcbiAgICAgICAgICB4MSA9IHRoaXMuYW5ub0N0eC5oZWxwZXJzLmdldFN0cmluZ1goYW5uby54KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHJva2VEYXNoQXJyYXkgPSBhbm5vLnN0cm9rZURhc2hBcnJheTtcbiAgICAgICAgaWYgKCFVdGlscy5pc051bWJlcih4MSkpIHJldHVybjtcblxuICAgICAgICBpZiAoYW5uby54MiA9PT0gbnVsbCB8fCB0eXBlb2YgYW5uby54MiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YXIgbGluZSA9IHRoaXMuYW5ub0N0eC5ncmFwaGljcy5kcmF3TGluZSh4MSArIGFubm8ub2Zmc2V0WCwgLy8geDFcbiAgICAgICAgICAwICsgYW5uby5vZmZzZXRZLCAvLyB5MVxuICAgICAgICAgIHgxICsgYW5uby5vZmZzZXRYLCAvLyB4MlxuICAgICAgICAgIHcuZ2xvYmFscy5ncmlkSGVpZ2h0ICsgYW5uby5vZmZzZXRZLCAvLyB5MlxuICAgICAgICAgIGFubm8uYm9yZGVyQ29sb3IsIC8vIGxpbmVDb2xvclxuICAgICAgICAgIHN0cm9rZURhc2hBcnJheSwgLy9kYXNoQXJyYXlcbiAgICAgICAgICBhbm5vLmJvcmRlcldpZHRoKTtcbiAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQobGluZS5ub2RlKTtcblxuICAgICAgICAgIGlmIChhbm5vLmlkKSB7XG4gICAgICAgICAgICBsaW5lLm5vZGUuY2xhc3NMaXN0LmFkZChhbm5vLmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHgyID0gKGFubm8ueDIgLSBtaW4pIC8gKHJhbmdlIC8gdy5nbG9iYWxzLmdyaWRXaWR0aCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5hbm5vQ3R4LmludmVyc2VkUmV2ZXJzZWRBeGlzKSB7XG4gICAgICAgICAgICB4MiA9IChtYXggLSBhbm5vLngyKSAvIChyYW5nZSAvIHcuZ2xvYmFscy5ncmlkV2lkdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgody5jb25maWcueGF4aXMudHlwZSA9PT0gJ2NhdGVnb3J5JyB8fCB3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpICYmICF0aGlzLmludmVydEF4aXMgJiYgIXcuZ2xvYmFscy5kYXRhRm9ybWF0WE51bWVyaWMpIHtcbiAgICAgICAgICAgIHgyID0gdGhpcy5hbm5vQ3R4LmhlbHBlcnMuZ2V0U3RyaW5nWChhbm5vLngyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoeDIgPCB4MSkge1xuICAgICAgICAgICAgdmFyIHRlbXAgPSB4MTtcbiAgICAgICAgICAgIHgxID0geDI7XG4gICAgICAgICAgICB4MiA9IHRlbXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlY3QgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZHJhd1JlY3QoeDEgKyBhbm5vLm9mZnNldFgsIC8vIHgxXG4gICAgICAgICAgMCArIGFubm8ub2Zmc2V0WSwgLy8geTFcbiAgICAgICAgICB4MiAtIHgxLCAvLyB4MlxuICAgICAgICAgIHcuZ2xvYmFscy5ncmlkSGVpZ2h0ICsgYW5uby5vZmZzZXRZLCAvLyB5MlxuICAgICAgICAgIDAsIC8vIHJhZGl1c1xuICAgICAgICAgIGFubm8uZmlsbENvbG9yLCAvLyBjb2xvclxuICAgICAgICAgIGFubm8ub3BhY2l0eSwgLy8gb3BhY2l0eSxcbiAgICAgICAgICAxLCAvLyBzdHJva2VXaWR0aFxuICAgICAgICAgIGFubm8uYm9yZGVyQ29sb3IsIC8vIHN0cm9rZUNvbG9yXG4gICAgICAgICAgc3Ryb2tlRGFzaEFycmF5IC8vIHN0b2tlRGFzaEFycmF5XG4gICAgICAgICAgKTtcbiAgICAgICAgICByZWN0Lm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1hbm5vdGF0aW9uLXJlY3QnKTtcbiAgICAgICAgICByZWN0LmF0dHIoJ2NsaXAtcGF0aCcsIFwidXJsKCNncmlkUmVjdE1hc2tcIi5jb25jYXQody5nbG9iYWxzLmN1aWQsIFwiKVwiKSk7XG4gICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHJlY3Qubm9kZSk7XG5cbiAgICAgICAgICBpZiAoYW5uby5pZCkge1xuICAgICAgICAgICAgcmVjdC5ub2RlLmNsYXNzTGlzdC5hZGQoYW5uby5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHRZID0gYW5uby5sYWJlbC5wb3NpdGlvbiA9PT0gJ3RvcCcgPyA0IDogdy5nbG9iYWxzLmdyaWRIZWlnaHQ7XG4gICAgICAgIHZhciB0ZXh0UmVjdHMgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKHRleHQsIHBhcnNlRmxvYXQoYW5uby5sYWJlbC5zdHlsZS5mb250U2l6ZSkpO1xuICAgICAgICB2YXIgZWxUZXh0ID0gdGhpcy5hbm5vQ3R4LmdyYXBoaWNzLmRyYXdUZXh0KHtcbiAgICAgICAgICB4OiB4MSArIGFubm8ubGFiZWwub2Zmc2V0WCxcbiAgICAgICAgICB5OiB0ZXh0WSArIGFubm8ubGFiZWwub2Zmc2V0WSAtIChhbm5vLmxhYmVsLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gYW5uby5sYWJlbC5wb3NpdGlvbiA9PT0gJ3RvcCcgPyB0ZXh0UmVjdHMud2lkdGggLyAyIC0gMTIgOiAtdGV4dFJlY3RzLndpZHRoIC8gMiA6IDApLFxuICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgdGV4dEFuY2hvcjogYW5uby5sYWJlbC50ZXh0QW5jaG9yLFxuICAgICAgICAgIGZvbnRTaXplOiBhbm5vLmxhYmVsLnN0eWxlLmZvbnRTaXplLFxuICAgICAgICAgIGZvbnRGYW1pbHk6IGFubm8ubGFiZWwuc3R5bGUuZm9udEZhbWlseSxcbiAgICAgICAgICBmb250V2VpZ2h0OiBhbm5vLmxhYmVsLnN0eWxlLmZvbnRXZWlnaHQsXG4gICAgICAgICAgZm9yZUNvbG9yOiBhbm5vLmxhYmVsLnN0eWxlLmNvbG9yLFxuICAgICAgICAgIGNzc0NsYXNzOiBcImFwZXhjaGFydHMteGF4aXMtYW5ub3RhdGlvbi1sYWJlbCBcIi5jb25jYXQoYW5uby5sYWJlbC5zdHlsZS5jc3NDbGFzcywgXCIgXCIpLmNvbmNhdChhbm5vLmlkID8gYW5uby5pZCA6ICcnKVxuICAgICAgICB9KTtcbiAgICAgICAgZWxUZXh0LmF0dHIoe1xuICAgICAgICAgIHJlbDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbFRleHQubm9kZSk7IC8vIGFmdGVyIHBsYWNpbmcgdGhlIGFubm90YXRpb25zIG9uIHN2Zywgc2V0IGFueSB2ZXJ0aWNhbGx5IHBsYWNlZCBhbm5vdGF0aW9uc1xuXG4gICAgICAgIHRoaXMuYW5ub0N0eC5oZWxwZXJzLnNldE9yaWVudGF0aW9ucyhhbm5vLCBpbmRleCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdYQXhpc0Fubm90YXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1hBeGlzQW5ub3RhdGlvbnMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBlbGcgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy14YXhpcy1hbm5vdGF0aW9ucydcbiAgICAgICAgfSk7XG4gICAgICAgIHcuY29uZmlnLmFubm90YXRpb25zLnhheGlzLm1hcChmdW5jdGlvbiAoYW5ubywgaW5kZXgpIHtcbiAgICAgICAgICBfdGhpcy5hZGRYYXhpc0Fubm90YXRpb24oYW5ubywgZWxnLm5vZGUsIGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBlbGc7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFhBbm5vdGF0aW9ucztcbiAgfSgpO1xuXG4gIHZhciBZQW5ub3RhdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFlBbm5vdGF0aW9ucyhhbm5vQ3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWUFubm90YXRpb25zKTtcblxuICAgICAgdGhpcy53ID0gYW5ub0N0eC53O1xuICAgICAgdGhpcy5hbm5vQ3R4ID0gYW5ub0N0eDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoWUFubm90YXRpb25zLCBbe1xuICAgICAga2V5OiBcImFkZFlheGlzQW5ub3RhdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFlheGlzQW5ub3RhdGlvbihhbm5vLCBwYXJlbnQsIGluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgc3Ryb2tlRGFzaEFycmF5ID0gYW5uby5zdHJva2VEYXNoQXJyYXk7XG5cbiAgICAgICAgdmFyIHkxID0gdGhpcy5fZ2V0WTFZMigneTEnLCBhbm5vKTtcblxuICAgICAgICB2YXIgeTI7XG4gICAgICAgIHZhciB0ZXh0ID0gYW5uby5sYWJlbC50ZXh0O1xuXG4gICAgICAgIGlmIChhbm5vLnkyID09PSBudWxsIHx8IHR5cGVvZiBhbm5vLnkyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciBsaW5lID0gdGhpcy5hbm5vQ3R4LmdyYXBoaWNzLmRyYXdMaW5lKDAgKyBhbm5vLm9mZnNldFgsIC8vIHgxXG4gICAgICAgICAgeTEgKyBhbm5vLm9mZnNldFksIC8vIHkxXG4gICAgICAgICAgdy5nbG9iYWxzLmdyaWRXaWR0aCArIGFubm8ub2Zmc2V0WCwgLy8geDJcbiAgICAgICAgICB5MSArIGFubm8ub2Zmc2V0WSwgLy8geTJcbiAgICAgICAgICBhbm5vLmJvcmRlckNvbG9yLCAvLyBsaW5lQ29sb3JcbiAgICAgICAgICBzdHJva2VEYXNoQXJyYXksIC8vIGRhc2hBcnJheVxuICAgICAgICAgIGFubm8uYm9yZGVyV2lkdGgpO1xuICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChsaW5lLm5vZGUpO1xuXG4gICAgICAgICAgaWYgKGFubm8uaWQpIHtcbiAgICAgICAgICAgIGxpbmUubm9kZS5jbGFzc0xpc3QuYWRkKGFubm8uaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5MiA9IHRoaXMuX2dldFkxWTIoJ3kyJywgYW5ubyk7XG5cbiAgICAgICAgICBpZiAoeTIgPiB5MSkge1xuICAgICAgICAgICAgdmFyIHRlbXAgPSB5MTtcbiAgICAgICAgICAgIHkxID0geTI7XG4gICAgICAgICAgICB5MiA9IHRlbXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlY3QgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZHJhd1JlY3QoMCArIGFubm8ub2Zmc2V0WCwgLy8geDFcbiAgICAgICAgICB5MiArIGFubm8ub2Zmc2V0WSwgLy8geTFcbiAgICAgICAgICB3Lmdsb2JhbHMuZ3JpZFdpZHRoICsgYW5uby5vZmZzZXRYLCAvLyB4MlxuICAgICAgICAgIHkxIC0geTIsIC8vIHkyXG4gICAgICAgICAgMCwgLy8gcmFkaXVzXG4gICAgICAgICAgYW5uby5maWxsQ29sb3IsIC8vIGNvbG9yXG4gICAgICAgICAgYW5uby5vcGFjaXR5LCAvLyBvcGFjaXR5LFxuICAgICAgICAgIDEsIC8vIHN0cm9rZVdpZHRoXG4gICAgICAgICAgYW5uby5ib3JkZXJDb2xvciwgLy8gc3Ryb2tlQ29sb3JcbiAgICAgICAgICBzdHJva2VEYXNoQXJyYXkgLy8gc3Rva2VEYXNoQXJyYXlcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlY3Qubm9kZS5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLWFubm90YXRpb24tcmVjdCcpO1xuICAgICAgICAgIHJlY3QuYXR0cignY2xpcC1wYXRoJywgXCJ1cmwoI2dyaWRSZWN0TWFza1wiLmNvbmNhdCh3Lmdsb2JhbHMuY3VpZCwgXCIpXCIpKTtcbiAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQocmVjdC5ub2RlKTtcblxuICAgICAgICAgIGlmIChhbm5vLmlkKSB7XG4gICAgICAgICAgICByZWN0Lm5vZGUuY2xhc3NMaXN0LmFkZChhbm5vLmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4dFggPSBhbm5vLmxhYmVsLnBvc2l0aW9uID09PSAncmlnaHQnID8gdy5nbG9iYWxzLmdyaWRXaWR0aCA6IDA7XG4gICAgICAgIHZhciBlbFRleHQgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgIHg6IHRleHRYICsgYW5uby5sYWJlbC5vZmZzZXRYLFxuICAgICAgICAgIHk6ICh5MiB8fCB5MSkgKyBhbm5vLmxhYmVsLm9mZnNldFkgLSAzLFxuICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgdGV4dEFuY2hvcjogYW5uby5sYWJlbC50ZXh0QW5jaG9yLFxuICAgICAgICAgIGZvbnRTaXplOiBhbm5vLmxhYmVsLnN0eWxlLmZvbnRTaXplLFxuICAgICAgICAgIGZvbnRGYW1pbHk6IGFubm8ubGFiZWwuc3R5bGUuZm9udEZhbWlseSxcbiAgICAgICAgICBmb250V2VpZ2h0OiBhbm5vLmxhYmVsLnN0eWxlLmZvbnRXZWlnaHQsXG4gICAgICAgICAgZm9yZUNvbG9yOiBhbm5vLmxhYmVsLnN0eWxlLmNvbG9yLFxuICAgICAgICAgIGNzc0NsYXNzOiBcImFwZXhjaGFydHMteWF4aXMtYW5ub3RhdGlvbi1sYWJlbCBcIi5jb25jYXQoYW5uby5sYWJlbC5zdHlsZS5jc3NDbGFzcywgXCIgXCIpLmNvbmNhdChhbm5vLmlkID8gYW5uby5pZCA6ICcnKVxuICAgICAgICB9KTtcbiAgICAgICAgZWxUZXh0LmF0dHIoe1xuICAgICAgICAgIHJlbDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbFRleHQubm9kZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRZMVkyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFkxWTIodHlwZSwgYW5ubykge1xuICAgICAgICB2YXIgeSA9IHR5cGUgPT09ICd5MScgPyBhbm5vLnkgOiBhbm5vLnkyO1xuICAgICAgICB2YXIgeVA7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh0aGlzLmFubm9DdHguaW52ZXJ0QXhpcykge1xuICAgICAgICAgIHZhciBjYXRJbmRleCA9IHcuZ2xvYmFscy5sYWJlbHMuaW5kZXhPZih5KTtcblxuICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICAgIGNhdEluZGV4ID0gdy5nbG9iYWxzLmNhdGVnb3J5TGFiZWxzLmluZGV4T2YoeSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHhMYWJlbCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLXlheGlzLXRleHRzLWcgdGV4dDpudGgtY2hpbGQoJyArIChjYXRJbmRleCArIDEpICsgJyknKTtcblxuICAgICAgICAgIGlmICh4TGFiZWwpIHtcbiAgICAgICAgICAgIHlQID0gcGFyc2VGbG9hdCh4TGFiZWwuZ2V0QXR0cmlidXRlKCd5JykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5UCA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC0gKHkgLSB3Lmdsb2JhbHMubWluWUFyclthbm5vLnlBeGlzSW5kZXhdKSAvICh3Lmdsb2JhbHMueVJhbmdlW2Fubm8ueUF4aXNJbmRleF0gLyB3Lmdsb2JhbHMuZ3JpZEhlaWdodCk7XG5cbiAgICAgICAgICBpZiAody5jb25maWcueWF4aXNbYW5uby55QXhpc0luZGV4XSAmJiB3LmNvbmZpZy55YXhpc1thbm5vLnlBeGlzSW5kZXhdLnJldmVyc2VkKSB7XG4gICAgICAgICAgICB5UCA9ICh5IC0gdy5nbG9iYWxzLm1pbllBcnJbYW5uby55QXhpc0luZGV4XSkgLyAody5nbG9iYWxzLnlSYW5nZVthbm5vLnlBeGlzSW5kZXhdIC8gdy5nbG9iYWxzLmdyaWRIZWlnaHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB5UDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1lBeGlzQW5ub3RhdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3WUF4aXNBbm5vdGF0aW9ucygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGVsZyA9IHRoaXMuYW5ub0N0eC5ncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXlheGlzLWFubm90YXRpb25zJ1xuICAgICAgICB9KTtcbiAgICAgICAgdy5jb25maWcuYW5ub3RhdGlvbnMueWF4aXMubWFwKGZ1bmN0aW9uIChhbm5vLCBpbmRleCkge1xuICAgICAgICAgIF90aGlzLmFkZFlheGlzQW5ub3RhdGlvbihhbm5vLCBlbGcubm9kZSwgaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVsZztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gWUFubm90YXRpb25zO1xuICB9KCk7XG5cbiAgdmFyIFBvaW50QW5ub3RhdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBvaW50QW5ub3RhdGlvbnMoYW5ub0N0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvaW50QW5ub3RhdGlvbnMpO1xuXG4gICAgICB0aGlzLncgPSBhbm5vQ3R4Lnc7XG4gICAgICB0aGlzLmFubm9DdHggPSBhbm5vQ3R4O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQb2ludEFubm90YXRpb25zLCBbe1xuICAgICAga2V5OiBcImFkZFBvaW50QW5ub3RhdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFBvaW50QW5ub3RhdGlvbihhbm5vLCBwYXJlbnQsIGluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgeCA9IDA7XG4gICAgICAgIHZhciB5ID0gMDtcbiAgICAgICAgdmFyIHBvaW50WSA9IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuYW5ub0N0eC5pbnZlcnRBeGlzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdQb2ludCBhbm5vdGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gaG9yaXpvbnRhbCBiYXIgY2hhcnRzLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhbm5vLnggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdmFyIGNhdEluZGV4ID0gdy5nbG9iYWxzLmxhYmVscy5pbmRleE9mKGFubm8ueCk7XG5cbiAgICAgICAgICBpZiAody5jb25maWcueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljKSB7XG4gICAgICAgICAgICBjYXRJbmRleCA9IHcuZ2xvYmFscy5jYXRlZ29yeUxhYmVscy5pbmRleE9mKGFubm8ueCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeCA9IHRoaXMuYW5ub0N0eC5oZWxwZXJzLmdldFN0cmluZ1goYW5uby54KTtcbiAgICAgICAgICB2YXIgYW5ub1kgPSBhbm5vLnk7XG5cbiAgICAgICAgICBpZiAoYW5uby55ID09PSBudWxsKSB7XG4gICAgICAgICAgICBhbm5vWSA9IHcuZ2xvYmFscy5zZXJpZXNbYW5uby5zZXJpZXNJbmRleF1bY2F0SW5kZXhdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHkgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAtIChhbm5vWSAtIHcuZ2xvYmFscy5taW5ZQXJyW2Fubm8ueUF4aXNJbmRleF0pIC8gKHcuZ2xvYmFscy55UmFuZ2VbYW5uby55QXhpc0luZGV4XSAvIHcuZ2xvYmFscy5ncmlkSGVpZ2h0KSAtIHBhcnNlRmxvYXQoYW5uby5sYWJlbC5zdHlsZS5mb250U2l6ZSkgLSBhbm5vLm1hcmtlci5zaXplO1xuICAgICAgICAgIHBvaW50WSA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC0gKGFubm9ZIC0gdy5nbG9iYWxzLm1pbllBcnJbYW5uby55QXhpc0luZGV4XSkgLyAody5nbG9iYWxzLnlSYW5nZVthbm5vLnlBeGlzSW5kZXhdIC8gdy5nbG9iYWxzLmdyaWRIZWlnaHQpO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLnlheGlzW2Fubm8ueUF4aXNJbmRleF0gJiYgdy5jb25maWcueWF4aXNbYW5uby55QXhpc0luZGV4XS5yZXZlcnNlZCkge1xuICAgICAgICAgICAgeSA9IChhbm5vWSAtIHcuZ2xvYmFscy5taW5ZQXJyW2Fubm8ueUF4aXNJbmRleF0pIC8gKHcuZ2xvYmFscy55UmFuZ2VbYW5uby55QXhpc0luZGV4XSAvIHcuZ2xvYmFscy5ncmlkSGVpZ2h0KSArIHBhcnNlRmxvYXQoYW5uby5sYWJlbC5zdHlsZS5mb250U2l6ZSkgKyBhbm5vLm1hcmtlci5zaXplO1xuICAgICAgICAgICAgcG9pbnRZID0gKGFubm9ZIC0gdy5nbG9iYWxzLm1pbllBcnJbYW5uby55QXhpc0luZGV4XSkgLyAody5nbG9iYWxzLnlSYW5nZVthbm5vLnlBeGlzSW5kZXhdIC8gdy5nbG9iYWxzLmdyaWRIZWlnaHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4ID0gKGFubm8ueCAtIHcuZ2xvYmFscy5taW5YKSAvICh3Lmdsb2JhbHMueFJhbmdlIC8gdy5nbG9iYWxzLmdyaWRXaWR0aCk7XG4gICAgICAgICAgeSA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC0gKHBhcnNlRmxvYXQoYW5uby55KSAtIHcuZ2xvYmFscy5taW5ZQXJyW2Fubm8ueUF4aXNJbmRleF0pIC8gKHcuZ2xvYmFscy55UmFuZ2VbYW5uby55QXhpc0luZGV4XSAvIHcuZ2xvYmFscy5ncmlkSGVpZ2h0KSAtIHBhcnNlRmxvYXQoYW5uby5sYWJlbC5zdHlsZS5mb250U2l6ZSkgLSBhbm5vLm1hcmtlci5zaXplO1xuICAgICAgICAgIHBvaW50WSA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC0gKGFubm8ueSAtIHcuZ2xvYmFscy5taW5ZQXJyW2Fubm8ueUF4aXNJbmRleF0pIC8gKHcuZ2xvYmFscy55UmFuZ2VbYW5uby55QXhpc0luZGV4XSAvIHcuZ2xvYmFscy5ncmlkSGVpZ2h0KTtcblxuICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1thbm5vLnlBeGlzSW5kZXhdICYmIHcuY29uZmlnLnlheGlzW2Fubm8ueUF4aXNJbmRleF0ucmV2ZXJzZWQpIHtcbiAgICAgICAgICAgIHkgPSAocGFyc2VGbG9hdChhbm5vLnkpIC0gdy5nbG9iYWxzLm1pbllBcnJbYW5uby55QXhpc0luZGV4XSkgLyAody5nbG9iYWxzLnlSYW5nZVthbm5vLnlBeGlzSW5kZXhdIC8gdy5nbG9iYWxzLmdyaWRIZWlnaHQpIC0gcGFyc2VGbG9hdChhbm5vLmxhYmVsLnN0eWxlLmZvbnRTaXplKSAtIGFubm8ubWFya2VyLnNpemU7XG4gICAgICAgICAgICBwb2ludFkgPSAoYW5uby55IC0gdy5nbG9iYWxzLm1pbllBcnJbYW5uby55QXhpc0luZGV4XSkgLyAody5nbG9iYWxzLnlSYW5nZVthbm5vLnlBeGlzSW5kZXhdIC8gdy5nbG9iYWxzLmdyaWRIZWlnaHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghVXRpbHMuaXNOdW1iZXIoeCkpIHJldHVybjtcbiAgICAgICAgdmFyIG9wdHNQb2ludHMgPSB7XG4gICAgICAgICAgcFNpemU6IGFubm8ubWFya2VyLnNpemUsXG4gICAgICAgICAgcFdpZHRoOiBhbm5vLm1hcmtlci5zdHJva2VXaWR0aCxcbiAgICAgICAgICBwb2ludEZpbGxDb2xvcjogYW5uby5tYXJrZXIuZmlsbENvbG9yLFxuICAgICAgICAgIHBvaW50U3Ryb2tlQ29sb3I6IGFubm8ubWFya2VyLnN0cm9rZUNvbG9yLFxuICAgICAgICAgIHNoYXBlOiBhbm5vLm1hcmtlci5zaGFwZSxcbiAgICAgICAgICBwUmFkaXVzOiBhbm5vLm1hcmtlci5yYWRpdXMsXG4gICAgICAgICAgY2xhc3M6IFwiYXBleGNoYXJ0cy1wb2ludC1hbm5vdGF0aW9uLW1hcmtlciBcIi5jb25jYXQoYW5uby5tYXJrZXIuY3NzQ2xhc3MsIFwiIFwiKS5jb25jYXQoYW5uby5pZCA/IGFubm8uaWQgOiAnJylcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvaW50ID0gdGhpcy5hbm5vQ3R4LmdyYXBoaWNzLmRyYXdNYXJrZXIoeCArIGFubm8ubWFya2VyLm9mZnNldFgsIHBvaW50WSArIGFubm8ubWFya2VyLm9mZnNldFksIG9wdHNQb2ludHMpO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQocG9pbnQubm9kZSk7XG4gICAgICAgIHZhciB0ZXh0ID0gYW5uby5sYWJlbC50ZXh0ID8gYW5uby5sYWJlbC50ZXh0IDogJyc7XG4gICAgICAgIHZhciBlbFRleHQgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgIHg6IHggKyBhbm5vLmxhYmVsLm9mZnNldFgsXG4gICAgICAgICAgeTogeSArIGFubm8ubGFiZWwub2Zmc2V0WSxcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgIHRleHRBbmNob3I6IGFubm8ubGFiZWwudGV4dEFuY2hvcixcbiAgICAgICAgICBmb250U2l6ZTogYW5uby5sYWJlbC5zdHlsZS5mb250U2l6ZSxcbiAgICAgICAgICBmb250RmFtaWx5OiBhbm5vLmxhYmVsLnN0eWxlLmZvbnRGYW1pbHksXG4gICAgICAgICAgZm9udFdlaWdodDogYW5uby5sYWJlbC5zdHlsZS5mb250V2VpZ2h0LFxuICAgICAgICAgIGZvcmVDb2xvcjogYW5uby5sYWJlbC5zdHlsZS5jb2xvcixcbiAgICAgICAgICBjc3NDbGFzczogXCJhcGV4Y2hhcnRzLXBvaW50LWFubm90YXRpb24tbGFiZWwgXCIuY29uY2F0KGFubm8ubGFiZWwuc3R5bGUuY3NzQ2xhc3MsIFwiIFwiKS5jb25jYXQoYW5uby5pZCA/IGFubm8uaWQgOiAnJylcbiAgICAgICAgfSk7XG4gICAgICAgIGVsVGV4dC5hdHRyKHtcbiAgICAgICAgICByZWw6IGluZGV4XG4gICAgICAgIH0pO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxUZXh0Lm5vZGUpOyAvLyBUT0RPOiBkZXByZWNhdGUgdGhpcyBhcyB3ZSB3aWxsIHVzZSBjdXN0b21cblxuICAgICAgICBpZiAoYW5uby5jdXN0b21TVkcuU1ZHKSB7XG4gICAgICAgICAgdmFyIGcgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXBvaW50LWFubm90YXRpb25zLWN1c3RvbS1zdmcgJyArIGFubm8uY3VzdG9tU1ZHLmNzc0NsYXNzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZy5hdHRyKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHggKyBhbm5vLmN1c3RvbVNWRy5vZmZzZXRYLCBcIiwgXCIpLmNvbmNhdCh5ICsgYW5uby5jdXN0b21TVkcub2Zmc2V0WSwgXCIpXCIpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZy5ub2RlLmlubmVySFRNTCA9IGFubm8uY3VzdG9tU1ZHLlNWRztcbiAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZy5ub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbm5vLmltYWdlLnBhdGgpIHtcbiAgICAgICAgICB2YXIgaW1nV2lkdGggPSBhbm5vLmltYWdlLndpZHRoID8gYW5uby5pbWFnZS53aWR0aCA6IDIwO1xuICAgICAgICAgIHZhciBpbWdIZWlnaHQgPSBhbm5vLmltYWdlLmhlaWdodCA/IGFubm8uaW1hZ2UuaGVpZ2h0IDogMjA7XG4gICAgICAgICAgdGhpcy5hbm5vQ3R4LmFkZEltYWdlKHtcbiAgICAgICAgICAgIHg6IHggKyBhbm5vLmltYWdlLm9mZnNldFggLSBpbWdXaWR0aCAvIDIsXG4gICAgICAgICAgICB5OiB5ICsgYW5uby5pbWFnZS5vZmZzZXRZIC0gaW1nSGVpZ2h0IC8gMixcbiAgICAgICAgICAgIHdpZHRoOiBpbWdXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaW1nSGVpZ2h0LFxuICAgICAgICAgICAgcGF0aDogYW5uby5pbWFnZS5wYXRoLFxuICAgICAgICAgICAgYXBwZW5kVG86IHBhcmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdQb2ludEFubm90YXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1BvaW50QW5ub3RhdGlvbnMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBlbGcgPSB0aGlzLmFubm9DdHguZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1wb2ludC1hbm5vdGF0aW9ucydcbiAgICAgICAgfSk7XG4gICAgICAgIHcuY29uZmlnLmFubm90YXRpb25zLnBvaW50cy5tYXAoZnVuY3Rpb24gKGFubm8sIGluZGV4KSB7XG4gICAgICAgICAgX3RoaXMuYWRkUG9pbnRBbm5vdGF0aW9uKGFubm8sIGVsZy5ub2RlLCBpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZWxnO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBQb2ludEFubm90YXRpb25zO1xuICB9KCk7XG5cbiAgdmFyIG5hbWUgPSBcImVuXCI7XG4gIHZhciBvcHRpb25zID0ge1xuICBcdG1vbnRoczogW1xuICBcdFx0XCJKYW51YXJ5XCIsXG4gIFx0XHRcIkZlYnJ1YXJ5XCIsXG4gIFx0XHRcIk1hcmNoXCIsXG4gIFx0XHRcIkFwcmlsXCIsXG4gIFx0XHRcIk1heVwiLFxuICBcdFx0XCJKdW5lXCIsXG4gIFx0XHRcIkp1bHlcIixcbiAgXHRcdFwiQXVndXN0XCIsXG4gIFx0XHRcIlNlcHRlbWJlclwiLFxuICBcdFx0XCJPY3RvYmVyXCIsXG4gIFx0XHRcIk5vdmVtYmVyXCIsXG4gIFx0XHRcIkRlY2VtYmVyXCJcbiAgXHRdLFxuICBcdHNob3J0TW9udGhzOiBbXG4gIFx0XHRcIkphblwiLFxuICBcdFx0XCJGZWJcIixcbiAgXHRcdFwiTWFyXCIsXG4gIFx0XHRcIkFwclwiLFxuICBcdFx0XCJNYXlcIixcbiAgXHRcdFwiSnVuXCIsXG4gIFx0XHRcIkp1bFwiLFxuICBcdFx0XCJBdWdcIixcbiAgXHRcdFwiU2VwXCIsXG4gIFx0XHRcIk9jdFwiLFxuICBcdFx0XCJOb3ZcIixcbiAgXHRcdFwiRGVjXCJcbiAgXHRdLFxuICBcdGRheXM6IFtcbiAgXHRcdFwiU3VuZGF5XCIsXG4gIFx0XHRcIk1vbmRheVwiLFxuICBcdFx0XCJUdWVzZGF5XCIsXG4gIFx0XHRcIldlZG5lc2RheVwiLFxuICBcdFx0XCJUaHVyc2RheVwiLFxuICBcdFx0XCJGcmlkYXlcIixcbiAgXHRcdFwiU2F0dXJkYXlcIlxuICBcdF0sXG4gIFx0c2hvcnREYXlzOiBbXG4gIFx0XHRcIlN1blwiLFxuICBcdFx0XCJNb25cIixcbiAgXHRcdFwiVHVlXCIsXG4gIFx0XHRcIldlZFwiLFxuICBcdFx0XCJUaHVcIixcbiAgXHRcdFwiRnJpXCIsXG4gIFx0XHRcIlNhdFwiXG4gIFx0XSxcbiAgXHR0b29sYmFyOiB7XG4gIFx0XHRleHBvcnRUb1NWRzogXCJEb3dubG9hZCBTVkdcIixcbiAgXHRcdGV4cG9ydFRvUE5HOiBcIkRvd25sb2FkIFBOR1wiLFxuICBcdFx0ZXhwb3J0VG9DU1Y6IFwiRG93bmxvYWQgQ1NWXCIsXG4gIFx0XHRtZW51OiBcIk1lbnVcIixcbiAgXHRcdHNlbGVjdGlvbjogXCJTZWxlY3Rpb25cIixcbiAgXHRcdHNlbGVjdGlvblpvb206IFwiU2VsZWN0aW9uIFpvb21cIixcbiAgXHRcdHpvb21JbjogXCJab29tIEluXCIsXG4gIFx0XHR6b29tT3V0OiBcIlpvb20gT3V0XCIsXG4gIFx0XHRwYW46IFwiUGFubmluZ1wiLFxuICBcdFx0cmVzZXQ6IFwiUmVzZXQgWm9vbVwiXG4gIFx0fVxuICB9O1xuICB2YXIgZW4gPSB7XG4gIFx0bmFtZTogbmFtZSxcbiAgXHRvcHRpb25zOiBvcHRpb25zXG4gIH07XG5cbiAgdmFyIE9wdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9wdGlvbnMoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3B0aW9ucyk7XG5cbiAgICAgIHRoaXMueUF4aXMgPSB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIHNob3dBbHdheXM6IGZhbHNlLFxuICAgICAgICBzaG93Rm9yTnVsbFNlcmllczogdHJ1ZSxcbiAgICAgICAgc2VyaWVzTmFtZTogdW5kZWZpbmVkLFxuICAgICAgICBvcHBvc2l0ZTogZmFsc2UsXG4gICAgICAgIHJldmVyc2VkOiBmYWxzZSxcbiAgICAgICAgbG9nYXJpdGhtaWM6IGZhbHNlLFxuICAgICAgICB0aWNrQW1vdW50OiB1bmRlZmluZWQsXG4gICAgICAgIGZvcmNlTmljZVNjYWxlOiBmYWxzZSxcbiAgICAgICAgbWF4OiB1bmRlZmluZWQsXG4gICAgICAgIG1pbjogdW5kZWZpbmVkLFxuICAgICAgICBmbG9hdGluZzogZmFsc2UsXG4gICAgICAgIGRlY2ltYWxzSW5GbG9hdDogdW5kZWZpbmVkLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgICAgIG1heFdpZHRoOiAxNjAsXG4gICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgIGFsaWduOiB1bmRlZmluZWQsXG4gICAgICAgICAgcm90YXRlOiAwLFxuICAgICAgICAgIHBhZGRpbmc6IDIwLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjb2xvcnM6IFtdLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNzc0NsYXNzOiAnJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgIGNvbG9yOiAnI2VlZWVlZScsXG4gICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgIGNvbG9yOiAnI2VlZWVlZScsXG4gICAgICAgICAgd2lkdGg6IDYsXG4gICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJvdGF0ZTogOTAsXG4gICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNzc0NsYXNzOiAnJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIG9mZnNldFg6IDBcbiAgICAgICAgfSxcbiAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICBjb2xvcjogJyNiZGJkYmQnLFxuICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICBkYXNoQXJyYXk6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnBvaW50QW5ub3RhdGlvbiA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogbnVsbCxcbiAgICAgICAgeUF4aXNJbmRleDogMCxcbiAgICAgICAgc2VyaWVzSW5kZXg6IDAsXG4gICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgIHNpemU6IDQsXG4gICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjNDI0MjQyJyxcbiAgICAgICAgICBzaGFwZTogJ2NpcmNsZScsXG4gICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgIHJhZGl1czogMixcbiAgICAgICAgICBjc3NDbGFzczogJydcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICBib3JkZXJDb2xvcjogJyNlZWVlZWUnLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgIG9mZnNldFk6IC0xNSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICBmb250RmFtaWx5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICBjc3NDbGFzczogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgIGxlZnQ6IDUsXG4gICAgICAgICAgICAgIHJpZ2h0OiA1LFxuICAgICAgICAgICAgICB0b3A6IDIsXG4gICAgICAgICAgICAgIGJvdHRvbTogMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3VzdG9tU1ZHOiB7XG4gICAgICAgICAgLy8gdGhpcyB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBhcyBpdCBpcyBnb2luZyB0byBiZSByZXBsYWNlZCB3aXRoIGEgYmV0dGVyIGFsdGVybmF0aXZlIGJlbG93XG4gICAgICAgICAgU1ZHOiB1bmRlZmluZWQsXG4gICAgICAgICAgY3NzQ2xhc3M6IHVuZGVmaW5lZCxcbiAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgIG9mZnNldFk6IDBcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2U6IHtcbiAgICAgICAgICBwYXRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IDIwLFxuICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnlBeGlzQW5ub3RhdGlvbiA9IHtcbiAgICAgICAgeTogMCxcbiAgICAgICAgeTI6IG51bGwsXG4gICAgICAgIHN0cm9rZURhc2hBcnJheTogMSxcbiAgICAgICAgZmlsbENvbG9yOiAnI2VlZWVlZScsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI2VlZWVlZScsXG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgIHlBeGlzSW5kZXg6IDAsXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZWVlZWVlJyxcbiAgICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgdGV4dEFuY2hvcjogJ2VuZCcsXG4gICAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXG4gICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICBvZmZzZXRZOiAtMyxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICBmb250RmFtaWx5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICBjc3NDbGFzczogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgIGxlZnQ6IDUsXG4gICAgICAgICAgICAgIHJpZ2h0OiA1LFxuICAgICAgICAgICAgICB0b3A6IDIsXG4gICAgICAgICAgICAgIGJvdHRvbTogMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMueEF4aXNBbm5vdGF0aW9uID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB4MjogbnVsbCxcbiAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiAxLFxuICAgICAgICBmaWxsQ29sb3I6ICcjZWVlZWVlJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZWVlZWVlJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIG9wYWNpdHk6IDAuMyxcbiAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICBib3JkZXJDb2xvcjogJyNlZWVlZWUnLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgIGNzc0NsYXNzOiAnJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgbGVmdDogNSxcbiAgICAgICAgICAgICAgcmlnaHQ6IDUsXG4gICAgICAgICAgICAgIHRvcDogMixcbiAgICAgICAgICAgICAgYm90dG9tOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy50ZXh0ID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgdGV4dEFuY2hvcjogJ3N0YXJ0JyxcbiAgICAgICAgZm9yZUNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgICBhcHBlbmRUbzogJy5hcGV4Y2hhcnRzLWFubm90YXRpb25zJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJDb2xvcjogJyNlZWVlZWUnLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICBwYWRkaW5nTGVmdDogNCxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA0LFxuICAgICAgICBwYWRkaW5nVG9wOiAyLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAyXG4gICAgICB9O1xuICAgICAgdGhpcy5zaGFwZSA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgdHlwZTogJ3JlY3QnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAvLyBhY2NlcHRzIHBlcmNlbnRhZ2UgYXMgd2VsbCBhcyBmaXhlZCBudW1iZXJzXG4gICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgIGFwcGVuZFRvOiAnLmFwZXhjaGFydHMtYW5ub3RhdGlvbnMnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZWVlZWVlJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoT3B0aW9ucywgW3tcbiAgICAgIGtleTogXCJpbml0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhbm5vdGF0aW9uczoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICB5YXhpczogW3RoaXMueUF4aXNBbm5vdGF0aW9uXSxcbiAgICAgICAgICAgIHhheGlzOiBbdGhpcy54QXhpc0Fubm90YXRpb25dLFxuICAgICAgICAgICAgcG9pbnRzOiBbdGhpcy5wb2ludEFubm90YXRpb25dLFxuICAgICAgICAgICAgdGV4dHM6IFtdLFxuICAgICAgICAgICAgaW1hZ2VzOiBbXSxcbiAgICAgICAgICAgIHNoYXBlczogW11cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgIGVhc2luZzogJ2Vhc2Vpbm91dCcsXG4gICAgICAgICAgICAgIC8vIGxpbmVhciwgZWFzZW91dCwgZWFzZWluLCBlYXNlaW5vdXQsIHN3aW5nLCBib3VuY2UsIGVsYXN0aWNcbiAgICAgICAgICAgICAgc3BlZWQ6IDgwMCxcbiAgICAgICAgICAgICAgYW5pbWF0ZUdyYWR1YWxseToge1xuICAgICAgICAgICAgICAgIGRlbGF5OiAxNTAsXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkeW5hbWljQW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzcGVlZDogMzUwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgbG9jYWxlczogW2VuXSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGU6ICdlbicsXG4gICAgICAgICAgICBkcm9wU2hhZG93OiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdG9wOiAyLFxuICAgICAgICAgICAgICBsZWZ0OiAyLFxuICAgICAgICAgICAgICBibHVyOiA0LFxuICAgICAgICAgICAgICBjb2xvcjogJyMwMDAnLFxuICAgICAgICAgICAgICBvcGFjaXR5OiAwLjM1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvbkVuZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBiZWZvcmVNb3VudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBtb3VudGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHVwZGF0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgY2xpY2s6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbW91c2VNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxlZ2VuZENsaWNrOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIG1hcmtlckNsaWNrOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHNlbGVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBkYXRhUG9pbnRTZWxlY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgZGF0YVBvaW50TW91c2VFbnRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBkYXRhUG9pbnRNb3VzZUxlYXZlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGJlZm9yZVpvb206IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgem9vbWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHNjcm9sbGVkOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JlQ29sb3I6ICcjNDI0MjQyJyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgcGFyZW50SGVpZ2h0T2Zmc2V0OiAxNSxcbiAgICAgICAgICAgIHJlZHJhd09uUGFyZW50UmVzaXplOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdyb3VwOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgdHlwZTogJ3gnLFxuICAgICAgICAgICAgICAvLyBzZWxlY3RlZFBvaW50czogdW5kZWZpbmVkLCAvLyBkZWZhdWx0IGRhdGFwb2ludHMgdGhhdCBzaG91bGQgYmUgc2VsZWN0ZWQgYXV0b21hdGljYWxseVxuICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICcjOWU5ZTllJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjFcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjOWU5ZTllJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjQsXG4gICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgbWluOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbWF4OiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBtYXg6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJ1c2g6IHtcbiAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgIGF1dG9TY2FsZVlheGlzOiB0cnVlLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YWNrZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhY2tUeXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgdG9vbHM6IHtcbiAgICAgICAgICAgICAgICBkb3dubG9hZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246IHRydWUsXG4gICAgICAgICAgICAgICAgem9vbTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB6b29taW46IHRydWUsXG4gICAgICAgICAgICAgICAgem9vbW91dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYW46IHRydWUsXG4gICAgICAgICAgICAgICAgcmVzZXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY3VzdG9tSWNvbnM6IFtdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGF1dG9TZWxlY3RlZDogJ3pvb20nIC8vIGFjY2VwdHMgLT4gem9vbSwgcGFuLCBzZWxlY3Rpb25cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgIHR5cGU6ICd4JyxcbiAgICAgICAgICAgICAgYXV0b1NjYWxlWWF4aXM6IGZhbHNlLFxuICAgICAgICAgICAgICB6b29tZWRBcmVhOiB7XG4gICAgICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMjE5NmYzJyxcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuM1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyMyMTk2ZjMnLFxuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC42NSxcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogJzcwJScsXG4gICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBpbiBwZXJjZW50IDAgLSAxMDBcbiAgICAgICAgICAgICAgYmFySGVpZ2h0OiAnNzAlJyxcbiAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGluIHBlcmNlbnQgMCAtIDEwMFxuICAgICAgICAgICAgICBkaXN0cmlidXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgIHN0YXJ0aW5nU2hhcGU6ICdmbGF0JyxcbiAgICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdmbGF0JyxcbiAgICAgICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAgICAgcmFuZ2VzOiBbXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQmFyQ29sb3JzOiBbXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQmFyT3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQmFyUmFkaXVzOiAwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgLy8gdG9wLCBjZW50ZXIsIGJvdHRvbVxuICAgICAgICAgICAgICAgIG1heEl0ZW1zOiAxMDAsXG4gICAgICAgICAgICAgICAgaGlkZU92ZXJmbG93aW5nTGFiZWxzOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcgLy8gVE9ETzogcHJvdmlkZSBzdGFja2VkTGFiZWxzIGZvciBzdGFja2VkIGNoYXJ0cyB3aGljaCBnaXZlcyBhZGRpdGlvbnMgb2YgdmFsdWVzXG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJ1YmJsZToge1xuICAgICAgICAgICAgICBtaW5CdWJibGVSYWRpdXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbWF4QnViYmxlUmFkaXVzOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5kbGVzdGljazoge1xuICAgICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICB1cHdhcmQ6ICcjNGNhZjUwJyxcbiAgICAgICAgICAgICAgICBkb3dud2FyZDogJyNmNDQzMzYnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHdpY2s6IHtcbiAgICAgICAgICAgICAgICB1c2VGaWxsQ29sb3I6IHRydWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYXRtYXA6IHtcbiAgICAgICAgICAgICAgcmFkaXVzOiAyLFxuICAgICAgICAgICAgICBlbmFibGVTaGFkZXM6IHRydWUsXG4gICAgICAgICAgICAgIHNoYWRlSW50ZW5zaXR5OiAwLjUsXG4gICAgICAgICAgICAgIHJldmVyc2VOZWdhdGl2ZVNoYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgZGlzdHJpYnV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICB1c2VGaWxsQ29sb3JBc1N0cm9rZTogZmFsc2UsXG4gICAgICAgICAgICAgIGNvbG9yU2NhbGU6IHtcbiAgICAgICAgICAgICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByYW5nZXM6IFtdLFxuICAgICAgICAgICAgICAgIG1pbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG1heDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByYWRpYWxCYXI6IHtcbiAgICAgICAgICAgICAgaW52ZXJzZU9yZGVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgICAgICAgICAgZW5kQW5nbGU6IDM2MCxcbiAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgaG9sbG93OiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiA1LFxuICAgICAgICAgICAgICAgIHNpemU6ICc1MCUnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgaW1hZ2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBpbWFnZVdpZHRoOiAxNTAsXG4gICAgICAgICAgICAgICAgaW1hZ2VIZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgICAgICBpbWFnZU9mZnNldFg6IDAsXG4gICAgICAgICAgICAgICAgaW1hZ2VPZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgIGltYWdlQ2xpcHBlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcbiAgICAgICAgICAgICAgICBkcm9wU2hhZG93OiB7XG4gICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICBibHVyOiAzLFxuICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDAwJyxcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdHJhY2s6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZjVmNWY1JyxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogJzk3JScsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBtYXJnaW46IDUsXG4gICAgICAgICAgICAgICAgLy8gbWFyZ2luIGlzIGluIHBpeGVsc1xuICAgICAgICAgICAgICAgIGRyb3BTaGFkb3c6IHtcbiAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgIGJsdXI6IDMsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDAnLFxuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC41XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcbiAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMTYsXG4gICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbCArICclJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvdGFsOiB7XG4gICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVG90YWwnLFxuICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih3KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3Lmdsb2JhbHMuc2VyaWVzVG90YWxzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgYjtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCkgLyB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aCArICclJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwaWU6IHtcbiAgICAgICAgICAgICAgY3VzdG9tU2NhbGU6IDEsXG4gICAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICAgIGV4cGFuZE9uQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAvLyBUaGVzZSBhcmUgdGhlIHBlcmNlbnRhZ2UgdmFsdWVzIHdoaWNoIGFyZSBkaXNwbGF5ZWQgb24gc2xpY2VcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgLy8gb2Zmc2V0IGJ5IHdoaWNoIGxhYmVscyB3aWxsIG1vdmUgb3V0c2lkZVxuICAgICAgICAgICAgICAgIG1pbkFuZ2xlVG9TaG93TGFiZWw6IDEwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbnV0OiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogJzY1JScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGFyZSB0aGUgaW5uZXIgbGFiZWxzIGFwcGVhcmluZyBpbnNpZGUgZG9udXRcbiAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEwLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxOXB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDEwLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdG90YWw6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNob3dBbHdheXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RvdGFsJyxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogNTAwLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKHcpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdy5nbG9iYWxzLnNlcmllc1RvdGFscy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgYjtcbiAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJhZGFyOiB7XG4gICAgICAgICAgICAgIHNpemU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgcG9seWdvbnM6IHtcbiAgICAgICAgICAgICAgICAvLyBzdHJva2VDb2xvcjogJyNlMGUwZTAnLCAvLyBzaG91bGQgYmUgZGVwcmVjYXRlZCBpbiB0aGUgbWlub3IgdmVyc2lvbiBpLmUgMy4yXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3JzOiAnI2UwZTBlMCcsXG4gICAgICAgICAgICAgICAgY29ubmVjdG9yQ29sb3JzOiAnI2UwZTBlMCcsXG4gICAgICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgICAgY29sb3JzOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbG9yczogdW5kZWZpbmVkLFxuICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKHZhbCkge1xuICAgICAgICAgICAgICByZXR1cm4gdmFsICE9PSBudWxsID8gdmFsIDogJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG4gICAgICAgICAgICBkaXN0cmlidXRlZDogZmFsc2UsXG4gICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNjAwLFxuICAgICAgICAgICAgICBjb2xvcnM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgZm9yZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMixcbiAgICAgICAgICAgICAgcGFkZGluZzogNCxcbiAgICAgICAgICAgICAgb3BhY2l0eTogMC45LFxuICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgICAgZHJvcFNoYWRvdzoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRvcDogMSxcbiAgICAgICAgICAgICAgICBsZWZ0OiAxLFxuICAgICAgICAgICAgICAgIGJsdXI6IDEsXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjMDAwJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjQ1XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkcm9wU2hhZG93OiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICB0b3A6IDEsXG4gICAgICAgICAgICAgIGxlZnQ6IDEsXG4gICAgICAgICAgICAgIGJsdXI6IDEsXG4gICAgICAgICAgICAgIGNvbG9yOiAnIzAwMCcsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IDAuNDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBjb2xvcnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIC8vIGFycmF5IG9mIGNvbG9yc1xuICAgICAgICAgICAgb3BhY2l0eTogMC44NSxcbiAgICAgICAgICAgIGdyYWRpZW50OiB7XG4gICAgICAgICAgICAgIHNoYWRlOiAnZGFyaycsXG4gICAgICAgICAgICAgIHR5cGU6ICdob3Jpem9udGFsJyxcbiAgICAgICAgICAgICAgc2hhZGVJbnRlbnNpdHk6IDAuNSxcbiAgICAgICAgICAgICAgZ3JhZGllbnRUb0NvbG9yczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBpbnZlcnNlQ29sb3JzOiB0cnVlLFxuICAgICAgICAgICAgICBvcGFjaXR5RnJvbTogMSxcbiAgICAgICAgICAgICAgb3BhY2l0eVRvOiAxLFxuICAgICAgICAgICAgICBzdG9wczogWzAsIDUwLCAxMDBdLFxuICAgICAgICAgICAgICBjb2xvclN0b3BzOiBbXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltYWdlOiB7XG4gICAgICAgICAgICAgIHNyYzogW10sXG4gICAgICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgICAgICAgIGhlaWdodDogdW5kZWZpbmVkIC8vIG9wdGlvbmFsXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXR0ZXJuOiB7XG4gICAgICAgICAgICAgIHN0eWxlOiAnc3F1YXJlcycsXG4gICAgICAgICAgICAgIC8vIFN0cmluZyB8IEFycmF5IG9mIFN0cmluZ3NcbiAgICAgICAgICAgICAgd2lkdGg6IDYsXG4gICAgICAgICAgICAgIGhlaWdodDogNixcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogJyNlZWVlZWUnLFxuICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiAwLFxuICAgICAgICAgICAgcG9zaXRpb246ICdiYWNrJyxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm93OiB7XG4gICAgICAgICAgICAgIGNvbG9yczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAvLyB0YWtlcyBhcyBhcnJheSB3aGljaCB3aWxsIGJlIHJlcGVhdGVkIG9uIHJvd3NcbiAgICAgICAgICAgICAgb3BhY2l0eTogMC41XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sdW1uOiB7XG4gICAgICAgICAgICAgIGNvbG9yczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAvLyB0YWtlcyBhbiBhcnJheSB3aGljaCB3aWxsIGJlIHJlcGVhdGVkIG9uIGNvbHVtbnNcbiAgICAgICAgICAgICAgb3BhY2l0eTogMC41XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgIHJpZ2h0OiAxMCxcbiAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICBsZWZ0OiAxMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBzaG93Rm9yU2luZ2xlU2VyaWVzOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dGb3JOdWxsU2VyaWVzOiB0cnVlLFxuICAgICAgICAgICAgc2hvd0Zvclplcm9TZXJpZXM6IHRydWUsXG4gICAgICAgICAgICBmbG9hdGluZzogZmFsc2UsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgICAgICAgICAvLyB3aGV0aGVyIHRvIHBvc2l0aW9uIGxlZ2VuZHMgaW4gMSBvZiA0XG4gICAgICAgICAgICAvLyBkaXJlY3Rpb24gLSB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHRcbiAgICAgICAgICAgIGhvcml6b250YWxBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAvLyB3aGVuIHBvc2l0aW9uIHRvcC9ib3R0b20sIHlvdSBjYW4gc3BlY2lmeSB3aGV0aGVyIHRvIGFsaWduIGxlZ2VuZHMgbGVmdCwgcmlnaHQgb3IgY2VudGVyXG4gICAgICAgICAgICBpbnZlcnNlT3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdG9vbHRpcEhvdmVyRm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvZmZzZXRYOiAtMjAsXG4gICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgIGNvbG9yczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICB1c2VTZXJpZXNDb2xvcnM6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICB3aWR0aDogMTIsXG4gICAgICAgICAgICAgIGhlaWdodDogMTIsXG4gICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAwLFxuICAgICAgICAgICAgICBmaWxsQ29sb3JzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICAgIHJhZGl1czogMTIsXG4gICAgICAgICAgICAgIGN1c3RvbUhUTUw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgb25DbGljazogdW5kZWZpbmVkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXRlbU1hcmdpbjoge1xuICAgICAgICAgICAgICBob3Jpem9udGFsOiA1LFxuICAgICAgICAgICAgICB2ZXJ0aWNhbDogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uSXRlbUNsaWNrOiB7XG4gICAgICAgICAgICAgIHRvZ2dsZURhdGFTZXJpZXM6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkl0ZW1Ib3Zlcjoge1xuICAgICAgICAgICAgICBoaWdobGlnaHREYXRhU2VyaWVzOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICBkaXNjcmV0ZTogW10sXG4gICAgICAgICAgICBzaXplOiAwLFxuICAgICAgICAgICAgY29sb3JzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvL3N0cm9rZUNvbG9yOiAnI2ZmZicsIC8vIFRPRE86IGRlcHJlY2F0ZSBpbiBtYWpvciB2ZXJzaW9uIDQuMFxuICAgICAgICAgICAgc3Ryb2tlQ29sb3JzOiAnI2ZmZicsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogMixcbiAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogMCxcbiAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAxLFxuICAgICAgICAgICAgc2hhcGU6ICdjaXJjbGUnLFxuICAgICAgICAgICAgcmFkaXVzOiAyLFxuICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICBvbkNsaWNrOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvbkRibENsaWNrOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzaG93TnVsbERhdGFQb2ludHM6IHRydWUsXG4gICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICBzaXplOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHNpemVPZmZzZXQ6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG5vRGF0YToge1xuICAgICAgICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzcG9uc2l2ZTogW10sXG4gICAgICAgICAgLy8gYnJlYWtwb2ludHMgc2hvdWxkIGZvbGxvdyBhc2NlbmRpbmcgb3JkZXIgNDAwLCB0aGVuIDcwMCwgdGhlbiAxMDAwXG4gICAgICAgICAgc2VyaWVzOiB1bmRlZmluZWQsXG4gICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGlnaHRlbicsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDAuMTVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXJrZW4nLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwLjY1XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgbWFyZ2luOiA1LFxuICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICBmbG9hdGluZzogZmFsc2UsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgY29sb3I6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VidGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICBtYXJnaW46IDUsXG4gICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgb2Zmc2V0WTogMzAsXG4gICAgICAgICAgICBmbG9hdGluZzogZmFsc2UsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgY29sb3I6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgLy8gXCJzbW9vdGhcIiAvIFwic3RyYWlnaHRcIiAvIFwic3RlcGxpbmVcIlxuICAgICAgICAgICAgbGluZUNhcDogJ2J1dHQnLFxuICAgICAgICAgICAgLy8gcm91bmQsIGJ1dHQgLCBzcXVhcmVcbiAgICAgICAgICAgIHdpZHRoOiAyLFxuICAgICAgICAgICAgY29sb3JzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvLyBhcnJheSBvZiBjb2xvcnNcbiAgICAgICAgICAgIGRhc2hBcnJheTogMCAvLyBzaW5nbGUgdmFsdWUgb3IgYXJyYXkgb2YgdmFsdWVzXG5cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0N1cnNvcjogZmFsc2UsXG4gICAgICAgICAgICAvLyB3aGVuIGRpc2FibGVkLCB0aGUgdG9vbHRpcCB3aWxsIHNob3cgb24gdG9wIG9mIHRoZSBzZXJpZXMgaW5zdGVhZCBvZiBtb3VzZSBwb3NpdGlvblxuICAgICAgICAgICAgaW50ZXJzZWN0OiBmYWxzZSxcbiAgICAgICAgICAgIC8vIHdoZW4gZW5hYmxlZCwgdG9vbHRpcCB3aWxsIG9ubHkgc2hvdyB3aGVuIHVzZXIgZGlyZWN0bHkgaG92ZXJzIG92ZXIgcG9pbnRcbiAgICAgICAgICAgIGludmVyc2VPcmRlcjogZmFsc2UsXG4gICAgICAgICAgICBjdXN0b206IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZpbGxTZXJpZXNDb2xvcjogZmFsc2UsXG4gICAgICAgICAgICB0aGVtZTogJ2xpZ2h0JyxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRGF0YXNldEhvdmVyOiB7XG4gICAgICAgICAgICAgIGhpZ2hsaWdodERhdGFTZXJpZXM6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAvLyB4IHZhbHVlXG4gICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgIGZvcm1hdDogJ2RkIE1NTScsXG4gICAgICAgICAgICAgIC8vIGRkL01NLCBkZCBNTU0geXksIGRkIE1NTSB5eXl5XG4gICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkIC8vIGEgY3VzdG9tIHVzZXIgc3VwcGxpZWQgZm9ybWF0dGVyIGZ1bmN0aW9uXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKHNlcmllc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZXJpZXNOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHo6IHtcbiAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHRpdGxlOiAnU2l6ZTogJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICBmaWxsQ29sb3JzOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaXhlZDoge1xuICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXG4gICAgICAgICAgICAgIC8vIHRvcFJpZ2h0LCB0b3BMZWZ0LCBib3R0b21SaWdodCwgYm90dG9tTGVmdFxuICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IFtdLFxuICAgICAgICAgICAgY29udmVydGVkQ2F0VG9OdW1lcmljOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIGludGVybmFsIHByb3BlcnR5IHdoaWNoIHNob3VsZCBub3QgYmUgYWx0ZXJlZCBvdXRzaWRlXG4gICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICByb3RhdGU6IC00NSxcbiAgICAgICAgICAgICAgcm90YXRlQWx3YXlzOiBmYWxzZSxcbiAgICAgICAgICAgICAgaGlkZU92ZXJsYXBwaW5nTGFiZWxzOiB0cnVlLFxuICAgICAgICAgICAgICB0cmltOiBmYWxzZSxcbiAgICAgICAgICAgICAgbWluSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIG1heEhlaWdodDogMTIwLFxuICAgICAgICAgICAgICBzaG93RHVwbGljYXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtdLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogNTAwLFxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjc3NDbGFzczogJydcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgZm9ybWF0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAvLyBjdXN0b20gZm9ybWF0dGVyIGZ1bmN0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgZm9ybWF0XG4gICAgICAgICAgICAgIGRhdGV0aW1lVVRDOiB0cnVlLFxuICAgICAgICAgICAgICBkYXRldGltZUZvcm1hdHRlcjoge1xuICAgICAgICAgICAgICAgIHllYXI6ICd5eXl5JyxcbiAgICAgICAgICAgICAgICBtb250aDogXCJNTU0gJ3l5XCIsXG4gICAgICAgICAgICAgICAgZGF5OiAnZGQgTU1NJyxcbiAgICAgICAgICAgICAgICBob3VyOiAnSEg6bW0nLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJ0hIOm1tOnNzJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICBjb2xvcjogJyNlZWVlZWUnLFxuICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICAgIG9mZnNldFk6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgY29sb3I6ICcjZWVlZWVlJyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiA2LFxuICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlja0Ftb3VudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGlja1BsYWNlbWVudDogJ29uJyxcbiAgICAgICAgICAgIG1pbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbWF4OiB1bmRlZmluZWQsXG4gICAgICAgICAgICByYW5nZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmxvYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAnJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgLy8gdGlja1dpZHRoL2JhcldpZHRoIG9yIGFuIGludGVnZXJcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdiYWNrJyxcbiAgICAgICAgICAgICAgb3BhY2l0eTogMC45LFxuICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNiZGJkYmQnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICAvLyBzb2xpZCwgZ3JhZGllbnRcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNlMGUwZTAnLFxuICAgICAgICAgICAgICAgIGdyYWRpZW50OiB7XG4gICAgICAgICAgICAgICAgICBjb2xvckZyb206ICcjRDhFM0YwJyxcbiAgICAgICAgICAgICAgICAgIGNvbG9yVG86ICcjQkVEMUU2JyxcbiAgICAgICAgICAgICAgICAgIHN0b3BzOiBbMCwgMTAwXSxcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAwLjQsXG4gICAgICAgICAgICAgICAgICBvcGFjaXR5VG86IDAuNVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZHJvcFNoYWRvdzoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIGJsdXI6IDEsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC40XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHlheGlzOiB0aGlzLnlBeGlzLFxuICAgICAgICAgIHRoZW1lOiB7XG4gICAgICAgICAgICBtb2RlOiAnbGlnaHQnLFxuICAgICAgICAgICAgcGFsZXR0ZTogJ3BhbGV0dGUxJyxcbiAgICAgICAgICAgIC8vIElmIGRlZmluZWQsIGl0IHdpbGwgb3ZlcndyaXRlIGdsb2JhbHMuY29sb3JzIHZhcmlhYmxlXG4gICAgICAgICAgICBtb25vY2hyb21lOiB7XG4gICAgICAgICAgICAgIC8vIG1vbm9jaHJvbWUgYWxsb3dzIHlvdSB0byBzZWxlY3QganVzdCAxIGNvbG9yIGFuZCBmaWxsIG91dCB0aGUgcmVzdCB3aXRoIGxpZ2h0L2Rhcmsgc2hhZGUgKGludGVuc2l0eSBjYW4gYmUgc2VsZWN0ZWQpXG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICBjb2xvcjogJyMyMTk2ZjMnLFxuICAgICAgICAgICAgICBzaGFkZVRvOiAnbGlnaHQnLFxuICAgICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMC42NVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gT3B0aW9ucztcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIEFubm90YXRpb25zIENsYXNzIGZvciBkcmF3aW5nIGxpbmVzL3JlY3RzIG9uIGJvdGggeGF4aXMgYW5kIHlheGlzLlxuICAgKlxuICAgKiBAbW9kdWxlIEFubm90YXRpb25zXG4gICAqKi9cblxuICB2YXIgQW5ub3RhdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFubm90YXRpb25zKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFubm90YXRpb25zKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHRoaXMuZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuXG4gICAgICBpZiAodGhpcy53Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsKSB7XG4gICAgICAgIHRoaXMuaW52ZXJ0QXhpcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGVscGVycyA9IG5ldyBIZWxwZXJzKHRoaXMpO1xuICAgICAgdGhpcy54QXhpc0Fubm90YXRpb25zID0gbmV3IFhBbm5vdGF0aW9ucyh0aGlzKTtcbiAgICAgIHRoaXMueUF4aXNBbm5vdGF0aW9ucyA9IG5ldyBZQW5ub3RhdGlvbnModGhpcyk7XG4gICAgICB0aGlzLnBvaW50c0Fubm90YXRpb25zID0gbmV3IFBvaW50QW5ub3RhdGlvbnModGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLncuZ2xvYmFscy5pc0Jhckhvcml6b250YWwgJiYgdGhpcy53LmNvbmZpZy55YXhpc1swXS5yZXZlcnNlZCkge1xuICAgICAgICB0aGlzLmludmVyc2VkUmV2ZXJzZWRBeGlzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy54RGl2aXNpb24gPSB0aGlzLncuZ2xvYmFscy5ncmlkV2lkdGggLyB0aGlzLncuZ2xvYmFscy5kYXRhUG9pbnRzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhBbm5vdGF0aW9ucywgW3tcbiAgICAgIGtleTogXCJkcmF3QXhlc0Fubm90YXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0F4ZXNBbm5vdGF0aW9ucygpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgdmFyIHlBbm5vdGF0aW9ucyA9IHRoaXMueUF4aXNBbm5vdGF0aW9ucy5kcmF3WUF4aXNBbm5vdGF0aW9ucygpO1xuICAgICAgICAgIHZhciB4QW5ub3RhdGlvbnMgPSB0aGlzLnhBeGlzQW5ub3RhdGlvbnMuZHJhd1hBeGlzQW5ub3RhdGlvbnMoKTtcbiAgICAgICAgICB2YXIgcG9pbnRBbm5vdGF0aW9ucyA9IHRoaXMucG9pbnRzQW5ub3RhdGlvbnMuZHJhd1BvaW50QW5ub3RhdGlvbnMoKTtcbiAgICAgICAgICB2YXIgaW5pdGlhbEFuaW0gPSB3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmVuYWJsZWQ7XG4gICAgICAgICAgdmFyIGFubm9BcnJheSA9IFt5QW5ub3RhdGlvbnMsIHhBbm5vdGF0aW9ucywgcG9pbnRBbm5vdGF0aW9uc107XG4gICAgICAgICAgdmFyIGFubm9FbEFycmF5ID0gW3hBbm5vdGF0aW9ucy5ub2RlLCB5QW5ub3RhdGlvbnMubm9kZSwgcG9pbnRBbm5vdGF0aW9ucy5ub2RlXTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsR3JhcGhpY2FsLmFkZChhbm5vQXJyYXlbaV0pO1xuXG4gICAgICAgICAgICBpZiAoaW5pdGlhbEFuaW0gJiYgIXcuZ2xvYmFscy5yZXNpemVkICYmICF3Lmdsb2JhbHMuZGF0YUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgLy8gZml4ZXMgYXBleGNoYXJ0cy9hcGV4Y2hhcnRzLmpzIzY4NVxuICAgICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSAhPT0gJ3NjYXR0ZXInICYmIHcuY29uZmlnLmNoYXJ0LnR5cGUgIT09ICdidWJibGUnICYmIHcuZ2xvYmFscy5kYXRhUG9pbnRzID4gMSkge1xuICAgICAgICAgICAgICAgIGFubm9FbEFycmF5W2ldLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtZWxlbWVudC1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3Lmdsb2JhbHMuZGVsYXllZEVsZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICBlbDogYW5ub0VsQXJyYXlbaV0sXG4gICAgICAgICAgICAgIGluZGV4OiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IC8vIGJhY2tncm91bmQgc2l6ZXMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCBhZnRlciB0ZXh0IGlzIGRyYXduLCBzbyBjYWxsaW5nIHRoZW0gbGFzdFxuXG5cbiAgICAgICAgICB0aGlzLmhlbHBlcnMuYW5ub3RhdGlvbnNCYWNrZ3JvdW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1NoYXBlQW5ub3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3U2hhcGVBbm5vcygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdy5jb25maWcuYW5ub3RhdGlvbnMuc2hhcGVzLm1hcChmdW5jdGlvbiAocywgaW5kZXgpIHtcbiAgICAgICAgICBfdGhpcy5hZGRTaGFwZShzLCBpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3SW1hZ2VBbm5vc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdJbWFnZUFubm9zKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdy5jb25maWcuYW5ub3RhdGlvbnMuaW1hZ2VzLm1hcChmdW5jdGlvbiAocywgaW5kZXgpIHtcbiAgICAgICAgICBfdGhpczIuYWRkSW1hZ2UocywgaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1RleHRBbm5vc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUZXh0QW5ub3MoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB3LmNvbmZpZy5hbm5vdGF0aW9ucy50ZXh0cy5tYXAoZnVuY3Rpb24gKHQsIGluZGV4KSB7XG4gICAgICAgICAgX3RoaXMzLmFkZFRleHQodCwgaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkWGF4aXNBbm5vdGF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkWGF4aXNBbm5vdGF0aW9uKGFubm8sIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy54QXhpc0Fubm90YXRpb25zLmFkZFhheGlzQW5ub3RhdGlvbihhbm5vLCBwYXJlbnQsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkWWF4aXNBbm5vdGF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkWWF4aXNBbm5vdGF0aW9uKGFubm8sIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy55QXhpc0Fubm90YXRpb25zLmFkZFlheGlzQW5ub3RhdGlvbihhbm5vLCBwYXJlbnQsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkUG9pbnRBbm5vdGF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUG9pbnRBbm5vdGF0aW9uKGFubm8sIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wb2ludHNBbm5vdGF0aW9ucy5hZGRQb2ludEFubm90YXRpb24oYW5ubywgcGFyZW50LCBpbmRleCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFRleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRUZXh0KHBhcmFtcywgaW5kZXgpIHtcbiAgICAgICAgdmFyIHggPSBwYXJhbXMueCxcbiAgICAgICAgICAgIHkgPSBwYXJhbXMueSxcbiAgICAgICAgICAgIHRleHQgPSBwYXJhbXMudGV4dCxcbiAgICAgICAgICAgIHRleHRBbmNob3IgPSBwYXJhbXMudGV4dEFuY2hvcixcbiAgICAgICAgICAgIGZvcmVDb2xvciA9IHBhcmFtcy5mb3JlQ29sb3IsXG4gICAgICAgICAgICBmb250U2l6ZSA9IHBhcmFtcy5mb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnRGYW1pbHkgPSBwYXJhbXMuZm9udEZhbWlseSxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQgPSBwYXJhbXMuZm9udFdlaWdodCxcbiAgICAgICAgICAgIGNzc0NsYXNzID0gcGFyYW1zLmNzc0NsYXNzLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gcGFyYW1zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGJvcmRlcldpZHRoID0gcGFyYW1zLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5ID0gcGFyYW1zLnN0cm9rZURhc2hBcnJheSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1cyA9IHBhcmFtcy5ib3JkZXJSYWRpdXMsXG4gICAgICAgICAgICBib3JkZXJDb2xvciA9IHBhcmFtcy5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIF9wYXJhbXMkYXBwZW5kVG8gPSBwYXJhbXMuYXBwZW5kVG8sXG4gICAgICAgICAgICBhcHBlbmRUbyA9IF9wYXJhbXMkYXBwZW5kVG8gPT09IHZvaWQgMCA/ICcuYXBleGNoYXJ0cy1hbm5vdGF0aW9ucycgOiBfcGFyYW1zJGFwcGVuZFRvLFxuICAgICAgICAgICAgX3BhcmFtcyRwYWRkaW5nTGVmdCA9IHBhcmFtcy5wYWRkaW5nTGVmdCxcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gX3BhcmFtcyRwYWRkaW5nTGVmdCA9PT0gdm9pZCAwID8gNCA6IF9wYXJhbXMkcGFkZGluZ0xlZnQsXG4gICAgICAgICAgICBfcGFyYW1zJHBhZGRpbmdSaWdodCA9IHBhcmFtcy5wYWRkaW5nUmlnaHQsXG4gICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBfcGFyYW1zJHBhZGRpbmdSaWdodCA9PT0gdm9pZCAwID8gNCA6IF9wYXJhbXMkcGFkZGluZ1JpZ2h0LFxuICAgICAgICAgICAgX3BhcmFtcyRwYWRkaW5nQm90dG9tID0gcGFyYW1zLnBhZGRpbmdCb3R0b20sXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tID0gX3BhcmFtcyRwYWRkaW5nQm90dG9tID09PSB2b2lkIDAgPyAyIDogX3BhcmFtcyRwYWRkaW5nQm90dG9tLFxuICAgICAgICAgICAgX3BhcmFtcyRwYWRkaW5nVG9wID0gcGFyYW1zLnBhZGRpbmdUb3AsXG4gICAgICAgICAgICBwYWRkaW5nVG9wID0gX3BhcmFtcyRwYWRkaW5nVG9wID09PSB2b2lkIDAgPyAyIDogX3BhcmFtcyRwYWRkaW5nVG9wO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGVsVGV4dCA9IHRoaXMuZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeSxcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgIHRleHRBbmNob3I6IHRleHRBbmNob3IgfHwgJ3N0YXJ0JyxcbiAgICAgICAgICBmb250U2l6ZTogZm9udFNpemUgfHwgJzEycHgnLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQgfHwgJ3JlZ3VsYXInLFxuICAgICAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHkgfHwgdy5jb25maWcuY2hhcnQuZm9udEZhbWlseSxcbiAgICAgICAgICBmb3JlQ29sb3I6IGZvcmVDb2xvciB8fCB3LmNvbmZpZy5jaGFydC5mb3JlQ29sb3IsXG4gICAgICAgICAgY3NzQ2xhc3M6ICdhcGV4Y2hhcnRzLXRleHQgJyArIGNzc0NsYXNzID8gY3NzQ2xhc3MgOiAnJ1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBhcmVudCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoYXBwZW5kVG8pO1xuXG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxUZXh0Lm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHRSZWN0ID0gZWxUZXh0LmJib3goKTtcblxuICAgICAgICBpZiAocGFyYW1zLmRyYWdnYWJsZSkge1xuICAgICAgICAgIHRoaXMuaGVscGVycy5tYWtlQW5ub3RhdGlvbkRyYWdnYWJsZShlbFRleHQsICd0ZXh0cycsIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgdmFyIGVsUmVjdCA9IHRoaXMuZ3JhcGhpY3MuZHJhd1JlY3QodGV4dFJlY3QueCAtIHBhZGRpbmdMZWZ0LCB0ZXh0UmVjdC55IC0gcGFkZGluZ1RvcCwgdGV4dFJlY3Qud2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCwgdGV4dFJlY3QuaGVpZ2h0ICsgcGFkZGluZ0JvdHRvbSArIHBhZGRpbmdUb3AsIGJvcmRlclJhZGl1cywgYmFja2dyb3VuZENvbG9yID8gYmFja2dyb3VuZENvbG9yIDogJ3RyYW5zcGFyZW50JywgMSwgYm9yZGVyV2lkdGgsIGJvcmRlckNvbG9yLCBzdHJva2VEYXNoQXJyYXkpO1xuICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWxSZWN0Lm5vZGUsIGVsVGV4dC5ub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRTaGFwZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNoYXBlKHBhcmFtcywgaW5kZXgpIHtcbiAgICAgICAgdmFyIG9wdHMgPSB7XG4gICAgICAgICAgdHlwZTogcGFyYW1zLnR5cGUsXG4gICAgICAgICAgeDogcGFyYW1zLnggfHwgMCxcbiAgICAgICAgICB5OiBwYXJhbXMueSB8fCAwLFxuICAgICAgICAgIHdpZHRoOiBwYXJhbXMud2lkdGggfHwgJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogcGFyYW1zLmhlaWdodCB8fCA1MCxcbiAgICAgICAgICBjaXJjbGVSYWRpdXM6IHBhcmFtcy5yYWRpdXMgfHwgMjUsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwYXJhbXMuYmFja2dyb3VuZENvbG9yIHx8ICcjZmZmJyxcbiAgICAgICAgICBvcGFjaXR5OiBwYXJhbXMub3BhY2l0eSB8fCAxLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiBwYXJhbXMuYm9yZGVyV2lkdGggfHwgMCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IHBhcmFtcy5ib3JkZXJSYWRpdXMgfHwgNCxcbiAgICAgICAgICBib3JkZXJDb2xvcjogcGFyYW1zLmJvcmRlckNvbG9yIHx8ICcjZWVlZWVlJyxcbiAgICAgICAgICBhcHBlbmRUbzogcGFyYW1zLmFwcGVuZFRvIHx8ICcuYXBleGNoYXJ0cy1hbm5vdGF0aW9ucydcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKFN0cmluZyhvcHRzLndpZHRoKS5pbmRleE9mKCclJykgPiAtMSkge1xuICAgICAgICAgIG9wdHMud2lkdGggPSBwYXJzZUludChvcHRzLndpZHRoLCAxMCkgKiBwYXJzZUludCh3Lmdsb2JhbHMuc3ZnV2lkdGgsIDEwKSAvIDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbFNoYXBlID0gbnVsbDtcblxuICAgICAgICBpZiAob3B0cy50eXBlID09PSAnY2lyY2xlJykge1xuICAgICAgICAgIGVsU2hhcGUgPSB0aGlzLmdyYXBoaWNzLmRyYXdDaXJjbGUob3B0cy5jaXJjbGVSYWRpdXMsIHtcbiAgICAgICAgICAgIGZpbGw6IG9wdHMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgc3Ryb2tlOiBvcHRzLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IG9wdHMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICBvcGFjaXR5OiBvcHRzLm9wYWNpdHksXG4gICAgICAgICAgICBjeDogb3B0cy54LFxuICAgICAgICAgICAgY3k6IG9wdHMueVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsU2hhcGUgPSB0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KG9wdHMueCwgb3B0cy55LCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCwgb3B0cy5ib3JkZXJSYWRpdXMsIG9wdHMuYmFja2dyb3VuZENvbG9yLCBvcHRzLm9wYWNpdHksIG9wdHMuYm9yZGVyV2lkdGgsIG9wdHMuYm9yZGVyQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmVudCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3Iob3B0cy5hcHBlbmRUbyk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbFNoYXBlLm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgICAgICB0aGlzLmhlbHBlcnMubWFrZUFubm90YXRpb25EcmFnZ2FibGUoZWxTaGFwZSwgJ3NoYXBlcycsIGluZGV4KTtcbiAgICAgICAgICBlbFNoYXBlLm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1yZXNpemFibGUtZWxlbWVudCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZEltYWdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSW1hZ2UocGFyYW1zLCBpbmRleCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHBhdGggPSBwYXJhbXMucGF0aCxcbiAgICAgICAgICAgIF9wYXJhbXMkeCA9IHBhcmFtcy54LFxuICAgICAgICAgICAgeCA9IF9wYXJhbXMkeCA9PT0gdm9pZCAwID8gMCA6IF9wYXJhbXMkeCxcbiAgICAgICAgICAgIF9wYXJhbXMkeSA9IHBhcmFtcy55LFxuICAgICAgICAgICAgeSA9IF9wYXJhbXMkeSA9PT0gdm9pZCAwID8gMCA6IF9wYXJhbXMkeSxcbiAgICAgICAgICAgIF9wYXJhbXMkd2lkdGggPSBwYXJhbXMud2lkdGgsXG4gICAgICAgICAgICB3aWR0aCA9IF9wYXJhbXMkd2lkdGggPT09IHZvaWQgMCA/IDIwIDogX3BhcmFtcyR3aWR0aCxcbiAgICAgICAgICAgIF9wYXJhbXMkaGVpZ2h0ID0gcGFyYW1zLmhlaWdodCxcbiAgICAgICAgICAgIGhlaWdodCA9IF9wYXJhbXMkaGVpZ2h0ID09PSB2b2lkIDAgPyAyMCA6IF9wYXJhbXMkaGVpZ2h0LFxuICAgICAgICAgICAgX3BhcmFtcyRhcHBlbmRUbzIgPSBwYXJhbXMuYXBwZW5kVG8sXG4gICAgICAgICAgICBhcHBlbmRUbyA9IF9wYXJhbXMkYXBwZW5kVG8yID09PSB2b2lkIDAgPyAnLmFwZXhjaGFydHMtYW5ub3RhdGlvbnMnIDogX3BhcmFtcyRhcHBlbmRUbzI7XG4gICAgICAgIHZhciBpbWcgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLmltYWdlKHBhdGgpO1xuICAgICAgICBpbWcuc2l6ZSh3aWR0aCwgaGVpZ2h0KS5tb3ZlKHgsIHkpO1xuICAgICAgICB2YXIgcGFyZW50ID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcihhcHBlbmRUbyk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChpbWcubm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmRyYWdnYWJsZSkge1xuICAgICAgICAgIHRoaXMuaGVscGVycy5tYWtlQW5ub3RhdGlvbkRyYWdnYWJsZShpbWcsICdpbWFnZXMnLCBpbmRleCk7XG4gICAgICAgICAgaW1nLm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1yZXNpemFibGUtZWxlbWVudCcpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFRoZSBhZGRYYXhpc0Fubm90YXRpb24gbWV0aG9kIHJlcXVpcmVzIGEgcGFyZW50IGNsYXNzLCBhbmQgdXNlciBjYWxsaW5nIHRoaXMgbWV0aG9kIGV4dGVybmFsbHkgb24gdGhlIGNoYXJ0IGluc3RhbmNlIG1heSBub3Qgc3BlY2lmeSBwYXJlbnQsIGhlbmNlIGEgZGlmZmVyZW50IG1ldGhvZFxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFhheGlzQW5ub3RhdGlvbkV4dGVybmFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkWGF4aXNBbm5vdGF0aW9uRXh0ZXJuYWwocGFyYW1zLCBwdXNoVG9NZW1vcnksIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5hZGRBbm5vdGF0aW9uRXh0ZXJuYWwoe1xuICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgIHB1c2hUb01lbW9yeTogcHVzaFRvTWVtb3J5LFxuICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgdHlwZTogJ3hheGlzJyxcbiAgICAgICAgICBjb250ZXh0TWV0aG9kOiBjb250ZXh0LmFkZFhheGlzQW5ub3RhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFlheGlzQW5ub3RhdGlvbkV4dGVybmFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkWWF4aXNBbm5vdGF0aW9uRXh0ZXJuYWwocGFyYW1zLCBwdXNoVG9NZW1vcnksIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5hZGRBbm5vdGF0aW9uRXh0ZXJuYWwoe1xuICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgIHB1c2hUb01lbW9yeTogcHVzaFRvTWVtb3J5LFxuICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgdHlwZTogJ3lheGlzJyxcbiAgICAgICAgICBjb250ZXh0TWV0aG9kOiBjb250ZXh0LmFkZFlheGlzQW5ub3RhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFBvaW50QW5ub3RhdGlvbkV4dGVybmFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUG9pbnRBbm5vdGF0aW9uRXh0ZXJuYWwocGFyYW1zLCBwdXNoVG9NZW1vcnksIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmludmVydEF4aXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5pbnZlcnRBeGlzID0gY29udGV4dC53Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZGRBbm5vdGF0aW9uRXh0ZXJuYWwoe1xuICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgIHB1c2hUb01lbW9yeTogcHVzaFRvTWVtb3J5LFxuICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgdHlwZTogJ3BvaW50JyxcbiAgICAgICAgICBjb250ZXh0TWV0aG9kOiBjb250ZXh0LmFkZFBvaW50QW5ub3RhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZEFubm90YXRpb25FeHRlcm5hbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEFubm90YXRpb25FeHRlcm5hbChfcmVmKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBfcmVmLnBhcmFtcyxcbiAgICAgICAgICAgIHB1c2hUb01lbW9yeSA9IF9yZWYucHVzaFRvTWVtb3J5LFxuICAgICAgICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgICAgICAgIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICAgICAgICBjb250ZXh0TWV0aG9kID0gX3JlZi5jb250ZXh0TWV0aG9kO1xuICAgICAgICB2YXIgbWUgPSBjb250ZXh0O1xuICAgICAgICB2YXIgdyA9IG1lLnc7XG4gICAgICAgIHZhciBwYXJlbnQgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtXCIuY29uY2F0KHR5cGUsIFwiLWFubm90YXRpb25zXCIpKTtcbiAgICAgICAgdmFyIGluZGV4ID0gcGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoICsgMTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXcgT3B0aW9ucygpO1xuICAgICAgICB2YXIgYXhlc0Fubm8gPSBPYmplY3QuYXNzaWduKHt9LCB0eXBlID09PSAneGF4aXMnID8gb3B0aW9ucy54QXhpc0Fubm90YXRpb24gOiB0eXBlID09PSAneWF4aXMnID8gb3B0aW9ucy55QXhpc0Fubm90YXRpb24gOiBvcHRpb25zLnBvaW50QW5ub3RhdGlvbik7XG4gICAgICAgIHZhciBhbm5vID0gVXRpbHMuZXh0ZW5kKGF4ZXNBbm5vLCBwYXJhbXMpO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3hheGlzJzpcbiAgICAgICAgICAgIHRoaXMuYWRkWGF4aXNBbm5vdGF0aW9uKGFubm8sIHBhcmVudCwgaW5kZXgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd5YXhpcyc6XG4gICAgICAgICAgICB0aGlzLmFkZFlheGlzQW5ub3RhdGlvbihhbm5vLCBwYXJlbnQsIGluZGV4KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICAgICAgdGhpcy5hZGRQb2ludEFubm90YXRpb24oYW5ubywgcGFyZW50LCBpbmRleCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBhZGQgYmFja2dyb3VuZFxuXG5cbiAgICAgICAgdmFyIGF4ZXNBbm5vTGFiZWwgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtXCIuY29uY2F0KHR5cGUsIFwiLWFubm90YXRpb25zIC5hcGV4Y2hhcnRzLVwiKS5jb25jYXQodHlwZSwgXCItYW5ub3RhdGlvbi1sYWJlbFtyZWw9J1wiKS5jb25jYXQoaW5kZXgsIFwiJ11cIikpO1xuICAgICAgICB2YXIgZWxSZWN0ID0gdGhpcy5oZWxwZXJzLmFkZEJhY2tncm91bmRUb0Fubm8oYXhlc0Fubm9MYWJlbCwgYW5ubyk7XG5cbiAgICAgICAgaWYgKGVsUmVjdCkge1xuICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWxSZWN0Lm5vZGUsIGF4ZXNBbm5vTGFiZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHB1c2hUb01lbW9yeSkge1xuICAgICAgICAgIHcuZ2xvYmFscy5tZW1vcnkubWV0aG9kc1RvRXhlYy5wdXNoKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IG1lLFxuICAgICAgICAgICAgaWQ6IGFubm8uaWQgPyBhbm5vLmlkIDogVXRpbHMucmFuZG9tSWQoKSxcbiAgICAgICAgICAgIG1ldGhvZDogY29udGV4dE1ldGhvZCxcbiAgICAgICAgICAgIGxhYmVsOiAnYWRkQW5ub3RhdGlvbicsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsZWFyQW5ub3RhdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckFubm90YXRpb25zKGN0eCkge1xuICAgICAgICB2YXIgdyA9IGN0eC53O1xuICAgICAgICB2YXIgYW5ub3MgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy15YXhpcy1hbm5vdGF0aW9ucywgLmFwZXhjaGFydHMteGF4aXMtYW5ub3RhdGlvbnMsIC5hcGV4Y2hhcnRzLXBvaW50LWFubm90YXRpb25zJyk7IC8vIGFubm90YXRpb25zIGFkZGVkIGV4dGVybmFsbHkgc2hvdWxkIGJlIGNsZWFyZWQgb3V0IHRvb1xuXG4gICAgICAgIHcuZ2xvYmFscy5tZW1vcnkubWV0aG9kc1RvRXhlYy5tYXAoZnVuY3Rpb24gKG0sIGkpIHtcbiAgICAgICAgICBpZiAobS5sYWJlbCA9PT0gJ2FkZFRleHQnIHx8IG0ubGFiZWwgPT09ICdhZGRBbm5vdGF0aW9uJykge1xuICAgICAgICAgICAgdy5nbG9iYWxzLm1lbW9yeS5tZXRob2RzVG9FeGVjLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhbm5vcyA9IFV0aWxzLmxpc3RUb0FycmF5KGFubm9zKTsgLy8gZGVsZXRlIHRoZSBET00gZWxlbWVudHNcblxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGFubm9zLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHdoaWxlIChhLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW1vdmVBbm5vdGF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQW5ub3RhdGlvbihjdHgsIGlkKSB7XG4gICAgICAgIHZhciB3ID0gY3R4Lnc7XG4gICAgICAgIHZhciBhbm5vcyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KGlkKSk7XG5cbiAgICAgICAgaWYgKGFubm9zKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLm1lbW9yeS5tZXRob2RzVG9FeGVjLm1hcChmdW5jdGlvbiAobSwgaSkge1xuICAgICAgICAgICAgaWYgKG0uaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgIHcuZ2xvYmFscy5tZW1vcnkubWV0aG9kc1RvRXhlYy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhbm5vcywgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGEucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBbm5vdGF0aW9ucztcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBEYXRlVGltZSBDbGFzcyB0byBtYW5pcHVsYXRlIGRhdGV0aW1lIHZhbHVlcy5cbiAgICpcbiAgICogQG1vZHVsZSBEYXRlVGltZVxuICAgKiovXG5cbiAgdmFyIERhdGVUaW1lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXRlVGltZShjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlVGltZSk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgICB0aGlzLm1vbnRoczMxID0gWzEsIDMsIDUsIDcsIDgsIDEwLCAxMl07XG4gICAgICB0aGlzLm1vbnRoczMwID0gWzIsIDQsIDYsIDksIDExXTtcbiAgICAgIHRoaXMuZGF5c0NudE9mWWVhciA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF07XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKERhdGVUaW1lLCBbe1xuICAgICAga2V5OiBcImlzVmFsaWREYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNWYWxpZERhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHRoaXMucGFyc2VEYXRlKGRhdGUpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0VGltZVN0YW1wXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGltZVN0YW1wKGRhdGVTdHIpIHtcbiAgICAgICAgaWYgKCFEYXRlLnBhcnNlKGRhdGVTdHIpKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGVTdHI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdXRjID0gdGhpcy53LmNvbmZpZy54YXhpcy5sYWJlbHMuZGF0ZXRpbWVVVEM7XG4gICAgICAgIHJldHVybiAhdXRjID8gbmV3IERhdGUoZGF0ZVN0cikuZ2V0VGltZSgpIDogbmV3IERhdGUobmV3IERhdGUoZGF0ZVN0cikudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMjUpKS5nZXRUaW1lKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldERhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRlKHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgdXRjID0gdGhpcy53LmNvbmZpZy54YXhpcy5sYWJlbHMuZGF0ZXRpbWVVVEM7XG4gICAgICAgIHJldHVybiB1dGMgPyBuZXcgRGF0ZShuZXcgRGF0ZSh0aW1lc3RhbXApLnRvVVRDU3RyaW5nKCkpIDogbmV3IERhdGUodGltZXN0YW1wKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFyc2VEYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGVTdHIpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9IERhdGUucGFyc2UoZGF0ZVN0cik7XG5cbiAgICAgICAgaWYgKCFpc05hTihwYXJzZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGltZVN0YW1wKGRhdGVTdHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG91dHB1dCA9IERhdGUucGFyc2UoZGF0ZVN0ci5yZXBsYWNlKC8tL2csICcvJykucmVwbGFjZSgvW2Etel0rL2dpLCAnICcpKTtcbiAgICAgICAgb3V0cHV0ID0gdGhpcy5nZXRUaW1lU3RhbXAob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgIH0gLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDYzODAxOC9jdXJyZW50LXRpbWUtZm9ybWF0dGluZy13aXRoLWphdmFzY3JpcHQjYW5zd2VyLTE0NjM4MTkxXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZm9ybWF0RGF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLncuZ2xvYmFscy5sb2NhbGU7XG4gICAgICAgIHZhciB1dGMgPSB0aGlzLncuY29uZmlnLnhheGlzLmxhYmVscy5kYXRldGltZVVUQztcbiAgICAgICAgdmFyIE1NTU0gPSBbJ1xceDAwJ10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShsb2NhbGUubW9udGhzKSk7XG4gICAgICAgIHZhciBNTU0gPSBbJ1xceDAxJ10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShsb2NhbGUuc2hvcnRNb250aHMpKTtcbiAgICAgICAgdmFyIGRkZGQgPSBbJ1xceDAyJ10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShsb2NhbGUuZGF5cykpO1xuICAgICAgICB2YXIgZGRkID0gWydcXHgwMyddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobG9jYWxlLnNob3J0RGF5cykpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGlpKGksIGxlbikge1xuICAgICAgICAgIHZhciBzID0gaSArICcnO1xuICAgICAgICAgIGxlbiA9IGxlbiB8fCAyO1xuXG4gICAgICAgICAgd2hpbGUgKHMubGVuZ3RoIDwgbGVuKSB7XG4gICAgICAgICAgICBzID0gJzAnICsgcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB5ID0gdXRjID8gZGF0ZS5nZXRVVENGdWxsWWVhcigpIDogZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSl5eXl5Ky9nLCAnJDEnICsgeSk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKXl5L2csICckMScgKyB5LnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIpKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhefFteXFxcXF0peS9nLCAnJDEnICsgeSk7XG4gICAgICAgIHZhciBNID0gKHV0YyA/IGRhdGUuZ2V0VVRDTW9udGgoKSA6IGRhdGUuZ2V0TW9udGgoKSkgKyAxO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSlNTU1NKy9nLCAnJDEnICsgTU1NTVswXSk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKU1NTS9nLCAnJDEnICsgTU1NWzBdKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhefFteXFxcXF0pTU0vZywgJyQxJyArIGlpKE0pKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhefFteXFxcXF0pTS9nLCAnJDEnICsgTSk7XG4gICAgICAgIHZhciBkID0gdXRjID8gZGF0ZS5nZXRVVENEYXRlKCkgOiBkYXRlLmdldERhdGUoKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhefFteXFxcXF0pZGRkZCsvZywgJyQxJyArIGRkZGRbMF0pO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSlkZGQvZywgJyQxJyArIGRkZFswXSk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKWRkL2csICckMScgKyBpaShkKSk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKWQvZywgJyQxJyArIGQpO1xuICAgICAgICB2YXIgSCA9IHV0YyA/IGRhdGUuZ2V0VVRDSG91cnMoKSA6IGRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhefFteXFxcXF0pSEgrL2csICckMScgKyBpaShIKSk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKUgvZywgJyQxJyArIEgpO1xuICAgICAgICB2YXIgaCA9IEggPiAxMiA/IEggLSAxMiA6IEggPT09IDAgPyAxMiA6IEg7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKWhoKy9nLCAnJDEnICsgaWkoaCkpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSloL2csICckMScgKyBoKTtcbiAgICAgICAgdmFyIG0gPSB1dGMgPyBkYXRlLmdldFVUQ01pbnV0ZXMoKSA6IGRhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSltbSsvZywgJyQxJyArIGlpKG0pKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhefFteXFxcXF0pbS9nLCAnJDEnICsgbSk7XG4gICAgICAgIHZhciBzID0gdXRjID8gZGF0ZS5nZXRVVENTZWNvbmRzKCkgOiBkYXRlLmdldFNlY29uZHMoKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhefFteXFxcXF0pc3MrL2csICckMScgKyBpaShzKSk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKXMvZywgJyQxJyArIHMpO1xuICAgICAgICB2YXIgZiA9IHV0YyA/IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSlmZmYrL2csICckMScgKyBpaShmLCAzKSk7XG4gICAgICAgIGYgPSBNYXRoLnJvdW5kKGYgLyAxMCk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKWZmL2csICckMScgKyBpaShmKSk7XG4gICAgICAgIGYgPSBNYXRoLnJvdW5kKGYgLyAxMCk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKWYvZywgJyQxJyArIGYpO1xuICAgICAgICB2YXIgVCA9IEggPCAxMiA/ICdBTScgOiAnUE0nO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSlUVCsvZywgJyQxJyArIFQpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSlUL2csICckMScgKyBULmNoYXJBdCgwKSk7XG4gICAgICAgIHZhciB0ID0gVC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSl0dCsvZywgJyQxJyArIHQpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvKF58W15cXFxcXSl0L2csICckMScgKyB0LmNoYXJBdCgwKSk7XG4gICAgICAgIHZhciB0eiA9IC1kYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgIHZhciBLID0gdXRjIHx8ICF0eiA/ICdaJyA6IHR6ID4gMCA/ICcrJyA6ICctJztcblxuICAgICAgICBpZiAoIXV0Yykge1xuICAgICAgICAgIHR6ID0gTWF0aC5hYnModHopO1xuICAgICAgICAgIHZhciB0ekhycyA9IE1hdGguZmxvb3IodHogLyA2MCk7XG4gICAgICAgICAgdmFyIHR6TWluID0gdHogJSA2MDtcbiAgICAgICAgICBLICs9IGlpKHR6SHJzKSArICc6JyArIGlpKHR6TWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXnxbXlxcXFxdKUsvZywgJyQxJyArIEspO1xuICAgICAgICB2YXIgZGF5ID0gKHV0YyA/IGRhdGUuZ2V0VVRDRGF5KCkgOiBkYXRlLmdldERheSgpKSArIDE7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKG5ldyBSZWdFeHAoZGRkZFswXSwgJ2cnKSwgZGRkZFtkYXldKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobmV3IFJlZ0V4cChkZGRbMF0sICdnJyksIGRkZFtkYXldKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobmV3IFJlZ0V4cChNTU1NWzBdLCAnZycpLCBNTU1NW01dKTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobmV3IFJlZ0V4cChNTU1bMF0sICdnJyksIE1NTVtNXSk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9cXFxcKC4pL2csICckMScpO1xuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRUaW1lVW5pdHNmcm9tVGltZXN0YW1wXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGltZVVuaXRzZnJvbVRpbWVzdGFtcChtaW5YLCBtYXhYLCB1dGMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbWluWCA9IHcuY29uZmlnLnhheGlzLm1pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5tYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG1heFggPSB3LmNvbmZpZy54YXhpcy5tYXg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHNNaW4gPSB0aGlzLmdldERhdGUobWluWCk7XG4gICAgICAgIHZhciB0c01heCA9IHRoaXMuZ2V0RGF0ZShtYXhYKTtcbiAgICAgICAgdmFyIG1pbkQgPSB0aGlzLmZvcm1hdERhdGUodHNNaW4sICd5eXl5IE1NIGRkIEhIIG1tJykuc3BsaXQoJyAnKTtcbiAgICAgICAgdmFyIG1heEQgPSB0aGlzLmZvcm1hdERhdGUodHNNYXgsICd5eXl5IE1NIGRkIEhIIG1tJykuc3BsaXQoJyAnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtaW5NaW51dGU6IHBhcnNlSW50KG1pbkRbNF0sIDEwKSxcbiAgICAgICAgICBtYXhNaW51dGU6IHBhcnNlSW50KG1heERbNF0sIDEwKSxcbiAgICAgICAgICBtaW5Ib3VyOiBwYXJzZUludChtaW5EWzNdLCAxMCksXG4gICAgICAgICAgbWF4SG91cjogcGFyc2VJbnQobWF4RFszXSwgMTApLFxuICAgICAgICAgIG1pbkRhdGU6IHBhcnNlSW50KG1pbkRbMl0sIDEwKSxcbiAgICAgICAgICBtYXhEYXRlOiBwYXJzZUludChtYXhEWzJdLCAxMCksXG4gICAgICAgICAgbWluTW9udGg6IHBhcnNlSW50KG1pbkRbMV0sIDEwKSAtIDEsXG4gICAgICAgICAgbWF4TW9udGg6IHBhcnNlSW50KG1heERbMV0sIDEwKSAtIDEsXG4gICAgICAgICAgbWluWWVhcjogcGFyc2VJbnQobWluRFswXSwgMTApLFxuICAgICAgICAgIG1heFllYXI6IHBhcnNlSW50KG1heERbMF0sIDEwKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0xlYXBZZWFyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiB5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNhbGN1bGNhdGVMYXN0RGF5c09mTW9udGhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxjYXRlTGFzdERheXNPZk1vbnRoKG1vbnRoLCB5ZWFyLCBzdWJ0cmFjdCkge1xuICAgICAgICB2YXIgZGF5cyA9IHRoaXMuZGV0ZXJtaW5lRGF5c09mTW9udGhzKG1vbnRoLCB5ZWFyKTsgLy8gd2hhdGV2ZXIgZGF5cyB3ZSBnZXQsIHN1YnRyYWN0IHRoZSBudW1iZXIgb2YgZGF5cyBhc2tlZFxuXG4gICAgICAgIHJldHVybiBkYXlzIC0gc3VidHJhY3Q7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRldGVybWluZURheXNPZlllYXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRlcm1pbmVEYXlzT2ZZZWFyKHllYXIpIHtcbiAgICAgICAgdmFyIGRheXMgPSAzNjU7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNMZWFwWWVhcih5ZWFyKSkge1xuICAgICAgICAgIGRheXMgPSAzNjY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF5cztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGV0ZXJtaW5lUmVtYWluaW5nRGF5c09mWWVhclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRldGVybWluZVJlbWFpbmluZ0RheXNPZlllYXIoeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9IHRoaXMuZGF5c0NudE9mWWVhclttb250aF0gKyBkYXRlO1xuICAgICAgICBpZiAobW9udGggPiAxICYmIHRoaXMuaXNMZWFwWWVhcigpKSBkYXlPZlllYXIrKztcbiAgICAgICAgcmV0dXJuIGRheU9mWWVhcjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGV0ZXJtaW5lRGF5c09mTW9udGhzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGV0ZXJtaW5lRGF5c09mTW9udGhzKG1vbnRoLCB5ZWFyKSB7XG4gICAgICAgIHZhciBkYXlzID0gMzA7XG4gICAgICAgIG1vbnRoID0gVXRpbHMubW9udGhNb2QobW9udGgpO1xuXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgIGNhc2UgdGhpcy5tb250aHMzMC5pbmRleE9mKG1vbnRoKSA+IC0xOlxuICAgICAgICAgICAgaWYgKG1vbnRoID09PSAyKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmlzTGVhcFllYXIoeWVhcikpIHtcbiAgICAgICAgICAgICAgICBkYXlzID0gMjk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF5cyA9IDI4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSB0aGlzLm1vbnRoczMxLmluZGV4T2YobW9udGgpID4gLTE6XG4gICAgICAgICAgICBkYXlzID0gMzE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBkYXlzID0gMzE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXlzO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEYXRlVGltZTtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIERlZmF1bHQgQ2xhc3MgZm9yIHNldHRpbmcgZGVmYXVsdCBvcHRpb25zIGZvciBhbGwgY2hhcnQgdHlwZXMuXG4gICAqXG4gICAqIEBtb2R1bGUgRGVmYXVsdHNcbiAgICoqL1xuXG4gIHZhciBEZWZhdWx0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmYXVsdHMob3B0cykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmF1bHRzKTtcblxuICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRGVmYXVsdHMsIFt7XG4gICAgICBrZXk6IFwibGluZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgZWFzaW5nOiAnc3dpbmcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICB3aWR0aDogNSxcbiAgICAgICAgICAgIGN1cnZlOiAnc3RyYWlnaHQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICBzaXplOiAwLFxuICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgc2l6ZU9mZnNldDogNlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNwYXJrbGluZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNwYXJrbGluZShkZWZhdWx0cykge1xuICAgICAgICB0aGlzLm9wdHMueWF4aXNbMF0uc2hvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9wdHMueWF4aXNbMF0udGl0bGUudGV4dCA9ICcnO1xuICAgICAgICB0aGlzLm9wdHMueWF4aXNbMF0uYXhpc0JvcmRlci5zaG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3B0cy55YXhpc1swXS5heGlzVGlja3Muc2hvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9wdHMueWF4aXNbMF0uZmxvYXRpbmcgPSB0cnVlO1xuICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcmV0KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmFyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYmFyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICBzdGFja2VkOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgZWFzaW5nOiAnc3dpbmcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgY29sb3JzOiBbJyNmZmYnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBsaW5lQ2FwOiAnc3F1YXJlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgb3BhY2l0eTogMC44NVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgIHNoYXBlOiAnc3F1YXJlJyxcbiAgICAgICAgICAgICAgcmFkaXVzOiAyLFxuICAgICAgICAgICAgICBzaXplOiA4XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBzaGFyZWQ6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpY2tQbGFjZW1lbnQ6ICdiZXR3ZWVuJyxcbiAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgd2lkdGg6ICdiYXJXaWR0aCcsXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiAnYmFjaycsXG4gICAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRyb3BTaGFkb3c6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjYW5kbGVzdGlja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmRsZXN0aWNrKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICBjb2xvcnM6IFsnIzQyNDI0MiddXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgc2hhcmVkOiB0cnVlLFxuICAgICAgICAgICAgY3VzdG9tOiBmdW5jdGlvbiBjdXN0b20oX3JlZikge1xuICAgICAgICAgICAgICB2YXIgc2VyaWVzSW5kZXggPSBfcmVmLnNlcmllc0luZGV4LFxuICAgICAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXggPSBfcmVmLmRhdGFQb2ludEluZGV4LFxuICAgICAgICAgICAgICAgICAgdyA9IF9yZWYudztcbiAgICAgICAgICAgICAgdmFyIG8gPSB3Lmdsb2JhbHMuc2VyaWVzQ2FuZGxlT1tzZXJpZXNJbmRleF1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICB2YXIgaCA9IHcuZ2xvYmFscy5zZXJpZXNDYW5kbGVIW3Nlcmllc0luZGV4XVtkYXRhUG9pbnRJbmRleF07XG4gICAgICAgICAgICAgIHZhciBsID0gdy5nbG9iYWxzLnNlcmllc0NhbmRsZUxbc2VyaWVzSW5kZXhdW2RhdGFQb2ludEluZGV4XTtcbiAgICAgICAgICAgICAgdmFyIGMgPSB3Lmdsb2JhbHMuc2VyaWVzQ2FuZGxlQ1tzZXJpZXNJbmRleF1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJhcGV4Y2hhcnRzLXRvb2x0aXAtY2FuZGxlc3RpY2tcIj4nICsgJzxkaXY+T3BlbjogPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPicgKyBvICsgJzwvc3Bhbj48L2Rpdj4nICsgJzxkaXY+SGlnaDogPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPicgKyBoICsgJzwvc3Bhbj48L2Rpdj4nICsgJzxkaXY+TG93OiA8c3BhbiBjbGFzcz1cInZhbHVlXCI+JyArIGwgKyAnPC9zcGFuPjwvZGl2PicgKyAnPGRpdj5DbG9zZTogPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPicgKyBjICsgJzwvc3Bhbj48L2Rpdj4nICsgJzwvZGl2Pic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJhbmdlQmFyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmFuZ2VCYXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgIGxpbmVDYXA6ICdzcXVhcmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih2YWwsIF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBjdHggPSBfcmVmMi5jdHgsXG4gICAgICAgICAgICAgICAgICBzZXJpZXNJbmRleCA9IF9yZWYyLnNlcmllc0luZGV4LFxuICAgICAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXggPSBfcmVmMi5kYXRhUG9pbnRJbmRleCxcbiAgICAgICAgICAgICAgICAgIHcgPSBfcmVmMi53O1xuICAgICAgICAgICAgICB2YXIgc3RhcnQgPSB3Lmdsb2JhbHMuc2VyaWVzUmFuZ2VTdGFydFtzZXJpZXNJbmRleF1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICB2YXIgZW5kID0gdy5nbG9iYWxzLnNlcmllc1JhbmdlRW5kW3Nlcmllc0luZGV4XVtkYXRhUG9pbnRJbmRleF07XG4gICAgICAgICAgICAgIHJldHVybiBlbmQgLSBzdGFydDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgY29sb3JzOiBbJyNmZmYnXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgc2hhcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGZvbGxvd0N1cnNvcjogdHJ1ZSxcbiAgICAgICAgICAgIGN1c3RvbTogZnVuY3Rpb24gY3VzdG9tKF9yZWYzKSB7XG4gICAgICAgICAgICAgIHZhciBjdHggPSBfcmVmMy5jdHgsXG4gICAgICAgICAgICAgICAgICBzZXJpZXNJbmRleCA9IF9yZWYzLnNlcmllc0luZGV4LFxuICAgICAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXggPSBfcmVmMy5kYXRhUG9pbnRJbmRleCxcbiAgICAgICAgICAgICAgICAgIHkxID0gX3JlZjMueTEsXG4gICAgICAgICAgICAgICAgICB5MiA9IF9yZWYzLnkyLFxuICAgICAgICAgICAgICAgICAgdyA9IF9yZWYzLnc7XG4gICAgICAgICAgICAgIHZhciBzdGFydCA9IHcuZ2xvYmFscy5zZXJpZXNSYW5nZVN0YXJ0W3Nlcmllc0luZGV4XVtkYXRhUG9pbnRJbmRleF07XG4gICAgICAgICAgICAgIHZhciBlbmQgPSB3Lmdsb2JhbHMuc2VyaWVzUmFuZ2VFbmRbc2VyaWVzSW5kZXhdW2RhdGFQb2ludEluZGV4XTtcbiAgICAgICAgICAgICAgdmFyIHlsYWJlbCA9IHcuZ2xvYmFscy5sYWJlbHNbZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICB2YXIgc2VyaWVzTmFtZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF0ubmFtZTtcbiAgICAgICAgICAgICAgdmFyIHlMYkZvcm1hdHRlciA9IHcuY29uZmlnLnRvb2x0aXAueS5mb3JtYXR0ZXI7XG4gICAgICAgICAgICAgIHZhciB5TGJUaXRsZUZvcm1hdHRlciA9IHcuY29uZmlnLnRvb2x0aXAueS50aXRsZS5mb3JtYXR0ZXI7XG4gICAgICAgICAgICAgIHZhciBvcHRzID0ge1xuICAgICAgICAgICAgICAgIHc6IHcsXG4gICAgICAgICAgICAgICAgc2VyaWVzSW5kZXg6IHNlcmllc0luZGV4LFxuICAgICAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBkYXRhUG9pbnRJbmRleFxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgeUxiVGl0bGVGb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNOYW1lID0geUxiVGl0bGVGb3JtYXR0ZXIoc2VyaWVzTmFtZSwgb3B0cyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoeTEgJiYgeTIpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHkxO1xuICAgICAgICAgICAgICAgIGVuZCA9IHkyO1xuXG4gICAgICAgICAgICAgICAgaWYgKHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF0uZGF0YVtkYXRhUG9pbnRJbmRleF0ueCkge1xuICAgICAgICAgICAgICAgICAgeWxhYmVsID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XS5kYXRhW2RhdGFQb2ludEluZGV4XS54ICsgJzonO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeUxiRm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICB5bGFiZWwgPSB5TGJGb3JtYXR0ZXIoeWxhYmVsLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgc3RhcnRWYWwgPSAnJztcbiAgICAgICAgICAgICAgdmFyIGVuZFZhbCA9ICcnO1xuICAgICAgICAgICAgICB2YXIgY29sb3IgPSB3Lmdsb2JhbHMuY29sb3JzW3Nlcmllc0luZGV4XTtcblxuICAgICAgICAgICAgICBpZiAody5jb25maWcudG9vbHRpcC54LmZvcm1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLnR5cGUgPT09ICdkYXRldGltZScpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBkYXRldGltZU9iaiA9IG5ldyBEYXRlVGltZShjdHgpO1xuICAgICAgICAgICAgICAgICAgc3RhcnRWYWwgPSBkYXRldGltZU9iai5mb3JtYXREYXRlKGRhdGV0aW1lT2JqLmdldERhdGUoc3RhcnQpLCB3LmNvbmZpZy50b29sdGlwLnguZm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgIGVuZFZhbCA9IGRhdGV0aW1lT2JqLmZvcm1hdERhdGUoZGF0ZXRpbWVPYmouZ2V0RGF0ZShlbmQpLCB3LmNvbmZpZy50b29sdGlwLnguZm9ybWF0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc3RhcnRWYWwgPSBzdGFydDtcbiAgICAgICAgICAgICAgICAgIGVuZFZhbCA9IGVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWwgPSB3LmNvbmZpZy50b29sdGlwLnguZm9ybWF0dGVyKHN0YXJ0KTtcbiAgICAgICAgICAgICAgICBlbmRWYWwgPSB3LmNvbmZpZy50b29sdGlwLnguZm9ybWF0dGVyKGVuZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJhcGV4Y2hhcnRzLXRvb2x0aXAtcmFuZ2ViYXJcIj4nICsgJzxkaXY+IDxzcGFuIGNsYXNzPVwic2VyaWVzLW5hbWVcIiBzdHlsZT1cImNvbG9yOiAnICsgY29sb3IgKyAnXCI+JyArIChzZXJpZXNOYW1lID8gc2VyaWVzTmFtZSA6ICcnKSArICc8L3NwYW4+PC9kaXY+JyArICc8ZGl2PiA8c3BhbiBjbGFzcz1cImNhdGVnb3J5XCI+JyArIHlsYWJlbCArICcgPC9zcGFuPiA8c3BhbiBjbGFzcz1cInZhbHVlIHN0YXJ0LXZhbHVlXCI+JyArIHN0YXJ0VmFsICsgJzwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJzZXBhcmF0b3JcIj4tPC9zcGFuPiA8c3BhbiBjbGFzcz1cInZhbHVlIGVuZC12YWx1ZVwiPicgKyBlbmRWYWwgKyAnPC9zcGFuPjwvZGl2PicgKyAnPC9kaXY+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICB0aWNrUGxhY2VtZW50OiAnYmV0d2VlbicsXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhcmVhXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYXJlYSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgIHdpZHRoOiA0XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICAgICAgaW52ZXJzZUNvbG9yczogZmFsc2UsXG4gICAgICAgICAgICAgIHNoYWRlOiAnbGlnaHQnLFxuICAgICAgICAgICAgICB0eXBlOiAndmVydGljYWwnLFxuICAgICAgICAgICAgICBvcGFjaXR5RnJvbTogMC42NSxcbiAgICAgICAgICAgICAgb3BhY2l0eVRvOiAwLjUsXG4gICAgICAgICAgICAgIHN0b3BzOiBbMCwgMTAwLCAxMDBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICBzaXplOiAwLFxuICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgc2l6ZU9mZnNldDogNlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgZm9sbG93Q3Vyc29yOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYnJ1c2hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBicnVzaChkZWZhdWx0cykge1xuICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgIGF1dG9TZWxlY3RlZDogJ3NlbGVjdGlvbicsXG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFV0aWxzLmV4dGVuZChkZWZhdWx0cywgcmV0KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhY2tlZDEwMFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YWNrZWQxMDAob3B0cykge1xuICAgICAgICBvcHRzLmRhdGFMYWJlbHMgPSBvcHRzLmRhdGFMYWJlbHMgfHwge307XG4gICAgICAgIG9wdHMuZGF0YUxhYmVscy5mb3JtYXR0ZXIgPSBvcHRzLmRhdGFMYWJlbHMuZm9ybWF0dGVyIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGV4aXN0aW5nRGF0YUxhYmVsRm9ybWF0dGVyID0gb3B0cy5kYXRhTGFiZWxzLmZvcm1hdHRlcjtcbiAgICAgICAgb3B0cy55YXhpcy5mb3JFYWNoKGZ1bmN0aW9uICh5YXhlLCBpbmRleCkge1xuICAgICAgICAgIG9wdHMueWF4aXNbaW5kZXhdLm1pbiA9IDA7XG4gICAgICAgICAgb3B0cy55YXhpc1tpbmRleF0ubWF4ID0gMTAwO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGlzQmFyID0gb3B0cy5jaGFydC50eXBlID09PSAnYmFyJztcblxuICAgICAgICBpZiAoaXNCYXIpIHtcbiAgICAgICAgICBvcHRzLmRhdGFMYWJlbHMuZm9ybWF0dGVyID0gZXhpc3RpbmdEYXRhTGFiZWxGb3JtYXR0ZXIgfHwgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWwgPyB2YWwudG9GaXhlZCgwKSArICclJyA6IHZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdHM7XG4gICAgICB9IC8vIFRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgbGVmdCBhbmQgcmlnaHQgc3BhY2luZyBpbiBjaGFydCBmb3IgbGluZS9hcmVhL3NjYXR0ZXIgaWYgeGF4aXMgdHlwZSA9IGNhdGVnb3J5IGZvciB0aG9zZSBjaGFydHMgYnkgY29udmVydGluZyB4YXhpcyA9IG51bWVyaWMuIE51bWVyaWMvRGF0ZXRpbWUgeGF4aXMgcHJldmVudHMgdGhlIHVubmVjZXNzYXJ5IHNwYWNpbmcgaW4gdGhlIGxlZnQvcmlnaHQgb2YgdGhlIGNoYXJ0IGFyZWFcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb252ZXJ0Q2F0VG9OdW1lcmljXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydENhdFRvTnVtZXJpYyhvcHRzKSB7XG4gICAgICAgIG9wdHMueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG9wdHM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbnZlcnRDYXRUb051bWVyaWNYYXhpc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRDYXRUb051bWVyaWNYYXhpcyhvcHRzLCBjdHgsIGNhdHMpIHtcbiAgICAgICAgb3B0cy54YXhpcy50eXBlID0gJ251bWVyaWMnO1xuICAgICAgICBvcHRzLnhheGlzLmxhYmVscyA9IG9wdHMueGF4aXMubGFiZWxzIHx8IHt9O1xuXG4gICAgICAgIG9wdHMueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IG9wdHMueGF4aXMubGFiZWxzLmZvcm1hdHRlciB8fCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgcmV0dXJuIFV0aWxzLmlzTnVtYmVyKHZhbCkgPyBNYXRoLmZsb29yKHZhbCkgOiB2YWw7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRlZmF1bHRGb3JtYXR0ZXIgPSBvcHRzLnhheGlzLmxhYmVscy5mb3JtYXR0ZXI7XG4gICAgICAgIHZhciBsYWJlbHMgPSBvcHRzLnhheGlzLmNhdGVnb3JpZXMgJiYgb3B0cy54YXhpcy5jYXRlZ29yaWVzLmxlbmd0aCA/IG9wdHMueGF4aXMuY2F0ZWdvcmllcyA6IG9wdHMubGFiZWxzO1xuXG4gICAgICAgIGlmIChjYXRzICYmIGNhdHMubGVuZ3RoKSB7XG4gICAgICAgICAgbGFiZWxzID0gY2F0cy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBjLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFiZWxzICYmIGxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgICBvcHRzLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gVXRpbHMuaXNOdW1iZXIodmFsKSA/IGRlZmF1bHRGb3JtYXR0ZXIobGFiZWxzW01hdGguZmxvb3IodmFsKSAtIDFdKSA6IGRlZmF1bHRGb3JtYXR0ZXIodmFsKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0cy54YXhpcy5jYXRlZ29yaWVzID0gW107XG4gICAgICAgIG9wdHMubGFiZWxzID0gW107XG4gICAgICAgIG9wdHMueGF4aXMudGlja0Ftb3VudCA9IG9wdHMueGF4aXMudGlja0Ftb3VudCB8fCAnZGF0YVBvaW50cyc7XG4gICAgICAgIHJldHVybiBvcHRzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJidWJibGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBidWJibGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgY29sb3JzOiBbJyNmZmYnXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgc2hhcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgICBzaGFkZTogJ2xpZ2h0JyxcbiAgICAgICAgICAgICAgaW52ZXJzZTogdHJ1ZSxcbiAgICAgICAgICAgICAgc2hhZGVJbnRlbnNpdHk6IDAuNTUsXG4gICAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAwLjQsXG4gICAgICAgICAgICAgIG9wYWNpdHlUbzogMC44XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzY2F0dGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2NhdHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgc2hhcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgc2l6ZTogNixcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAxLFxuICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgc2l6ZU9mZnNldDogMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGVhdG1hcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhlYXRtYXAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIHN0YWNrZWQ6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBjb2xvcnM6IFsnI2ZmZiddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgIGNvbG9yczogWycjZmZmJ11cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIGZvbGxvd0N1cnNvcjogdHJ1ZSxcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgcG9zaXRpb246ICd0b3AnLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICBzaGFwZTogJ3NxdWFyZScsXG4gICAgICAgICAgICAgIHNpemU6IDEwLFxuICAgICAgICAgICAgICBvZmZzZXRZOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgIHJpZ2h0OiAyMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGllXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGllKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgcGllOiB7XG4gICAgICAgICAgICAgIGRvbnV0OiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWwudG9GaXhlZCgxKSArICclJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBjb2xvcnM6IFsnI2ZmZiddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZHJvcFNoYWRvdzoge1xuICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgIGNvbG9yczogWycjZmZmJ11cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgICBzaGFkZTogJ2RhcmsnLFxuICAgICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMC4zNSxcbiAgICAgICAgICAgICAgaW52ZXJzZUNvbG9yczogZmFsc2UsXG4gICAgICAgICAgICAgIHN0b3BzOiBbMCwgMTAwLCAxMDBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICB0aGVtZTogJ2RhcmsnLFxuICAgICAgICAgICAgZmlsbFNlcmllc0NvbG9yOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkb251dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvbnV0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih2YWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbC50b0ZpeGVkKDEpICsgJyUnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGNvbG9yczogWycjZmZmJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkcm9wU2hhZG93OiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgY29sb3JzOiBbJyNmZmYnXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIGdyYWRpZW50OiB7XG4gICAgICAgICAgICAgIHNoYWRlOiAnZGFyaycsXG4gICAgICAgICAgICAgIHNoYWRlSW50ZW5zaXR5OiAwLjQsXG4gICAgICAgICAgICAgIGludmVyc2VDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICB0eXBlOiAndmVydGljYWwnLFxuICAgICAgICAgICAgICBvcGFjaXR5RnJvbTogMSxcbiAgICAgICAgICAgICAgb3BhY2l0eVRvOiAxLFxuICAgICAgICAgICAgICBzdG9wczogWzcwLCA5OCwgMTAwXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgdGhlbWU6ICdkYXJrJyxcbiAgICAgICAgICAgIGZpbGxTZXJpZXNDb2xvcjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0J1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmFkYXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByYWRhcigpIHtcbiAgICAgICAgdGhpcy5vcHRzLnlheGlzWzBdLmxhYmVscy5vZmZzZXRZID0gdGhpcy5vcHRzLnlheGlzWzBdLmxhYmVscy5vZmZzZXRZID8gdGhpcy5vcHRzLnlheGlzWzBdLmxhYmVscy5vZmZzZXRZIDogNjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgd2lkdGg6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgIHNpemU6IDMsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogMSxcbiAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgc2hhcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0N1cnNvcjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsnIzc1NzU3NSddLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjcm9zc2hhaXJzOiB7XG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyYWRpYWxCYXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByYWRpYWxCYXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgZHluYW1pY0FuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDgwMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICAgICAgc2hhZGU6ICdkYXJrJyxcbiAgICAgICAgICAgICAgc2hhZGVJbnRlbnNpdHk6IDAuNCxcbiAgICAgICAgICAgICAgaW52ZXJzZUNvbG9yczogZmFsc2UsXG4gICAgICAgICAgICAgIHR5cGU6ICdkaWFnb25hbDInLFxuICAgICAgICAgICAgICBvcGFjaXR5RnJvbTogMSxcbiAgICAgICAgICAgICAgb3BhY2l0eVRvOiAxLFxuICAgICAgICAgICAgICBzdG9wczogWzcwLCA5OCwgMTAwXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGZpbGxTZXJpZXNDb2xvcjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGVmYXVsdHM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBDb25maWcgQ2xhc3MgZm9yIGV4dGVuZGluZyB1c2VyIG9wdGlvbnMgd2l0aCBwcmUtZGVmaW5lZCBBcGV4Q2hhcnRzIGNvbmZpZy5cbiAgICpcbiAgICogQG1vZHVsZSBDb25maWdcbiAgICoqL1xuXG4gIHZhciBDb25maWcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbmZpZyhvcHRzKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uZmlnKTtcblxuICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29uZmlnLCBbe1xuICAgICAga2V5OiBcImluaXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KF9yZWYpIHtcbiAgICAgICAgdmFyIHJlc3BvbnNpdmVPdmVycmlkZSA9IF9yZWYucmVzcG9uc2l2ZU92ZXJyaWRlO1xuICAgICAgICB2YXIgb3B0cyA9IHRoaXMub3B0cztcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXcgT3B0aW9ucygpO1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSBuZXcgRGVmYXVsdHMob3B0cyk7XG4gICAgICAgIHRoaXMuY2hhcnRUeXBlID0gb3B0cy5jaGFydC50eXBlO1xuXG4gICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2hpc3RvZ3JhbScpIHtcbiAgICAgICAgICAvLyB0ZWNobmljYWxseSwgYSBoaXN0b2dyYW0gY2FuIGJlIGRyYXduIGJ5IGEgY29sdW1uIGNoYXJ0IHdpdGggbm8gc3BhY2VzIGluIGJldHdlZW5cbiAgICAgICAgICBvcHRzLmNoYXJ0LnR5cGUgPSAnYmFyJztcbiAgICAgICAgICBvcHRzID0gVXRpbHMuZXh0ZW5kKHtcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiAnOTkuOTklJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRzID0gdGhpcy5leHRlbmRZQXhpcyhvcHRzKTtcbiAgICAgICAgb3B0cyA9IHRoaXMuZXh0ZW5kQW5ub3RhdGlvbnMob3B0cyk7XG4gICAgICAgIHZhciBjb25maWcgPSBvcHRpb25zLmluaXQoKTtcbiAgICAgICAgdmFyIG5ld0RlZmF1bHRzID0ge307XG5cbiAgICAgICAgaWYgKG9wdHMgJiYgX3R5cGVvZihvcHRzKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB2YXIgY2hhcnREZWZhdWx0cyA9IHt9O1xuICAgICAgICAgIHZhciBjaGFydFR5cGVzID0gWydsaW5lJywgJ2FyZWEnLCAnYmFyJywgJ2NhbmRsZXN0aWNrJywgJ3JhbmdlQmFyJywgJ2hpc3RvZ3JhbScsICdidWJibGUnLCAnc2NhdHRlcicsICdoZWF0bWFwJywgJ3BpZScsICdkb251dCcsICdyYWRhcicsICdyYWRpYWxCYXInXTtcblxuICAgICAgICAgIGlmIChjaGFydFR5cGVzLmluZGV4T2Yob3B0cy5jaGFydC50eXBlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNoYXJ0RGVmYXVsdHMgPSBkZWZhdWx0c1tvcHRzLmNoYXJ0LnR5cGVdKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYXJ0RGVmYXVsdHMgPSBkZWZhdWx0cy5saW5lKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdHMuY2hhcnQuYnJ1c2ggJiYgb3B0cy5jaGFydC5icnVzaC5lbmFibGVkKSB7XG4gICAgICAgICAgICBjaGFydERlZmF1bHRzID0gZGVmYXVsdHMuYnJ1c2goY2hhcnREZWZhdWx0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdHMuY2hhcnQuc3RhY2tlZCAmJiBvcHRzLmNoYXJ0LnN0YWNrVHlwZSA9PT0gJzEwMCUnKSB7XG4gICAgICAgICAgICBvcHRzID0gZGVmYXVsdHMuc3RhY2tlZDEwMChvcHRzKTtcbiAgICAgICAgICB9IC8vIElmIHVzZXIgaGFzIHNwZWNpZmllZCBhIGRhcmsgdGhlbWUsIG1ha2UgdGhlIHRvb2x0aXAgZGFyayB0b29cblxuXG4gICAgICAgICAgdGhpcy5jaGVja0ZvckRhcmtUaGVtZSh3aW5kb3cuQXBleCk7IC8vIGNoZWNrIGdsb2JhbCB3aW5kb3cgQXBleCBvcHRpb25zXG5cbiAgICAgICAgICB0aGlzLmNoZWNrRm9yRGFya1RoZW1lKG9wdHMpOyAvLyBjaGVjayBsb2NhbGx5IHBhc3NlZCBvcHRpb25zXG5cbiAgICAgICAgICBvcHRzLnhheGlzID0gb3B0cy54YXhpcyB8fCB3aW5kb3cuQXBleC54YXhpcyB8fCB7fTsgLy8gYW4gaW1wb3J0YW50IGJvb2xlYW4gbmVlZHMgdG8gYmUgc2V0IGhlcmVcbiAgICAgICAgICAvLyBvdGhlcndpc2UgYWxsIHRoZSBjaGFydHMgd2lsbCBoYXZlIHRoaXMgZmxhZyBzZXQgdG8gdHJ1ZSB3aW5kb3cuQXBleC54YXhpcyBpcyBzZXQgZ2xvYmFsbHlcblxuICAgICAgICAgIGlmICghcmVzcG9uc2l2ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBvcHRzLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9wdHMgPSB0aGlzLmNoZWNrRm9yQ2F0VG9OdW1lcmljWEF4aXModGhpcy5jaGFydFR5cGUsIGNoYXJ0RGVmYXVsdHMsIG9wdHMpO1xuXG4gICAgICAgICAgaWYgKG9wdHMuY2hhcnQuc3BhcmtsaW5lICYmIG9wdHMuY2hhcnQuc3BhcmtsaW5lLmVuYWJsZWQgfHwgd2luZG93LkFwZXguY2hhcnQgJiYgd2luZG93LkFwZXguY2hhcnQuc3BhcmtsaW5lICYmIHdpbmRvdy5BcGV4LmNoYXJ0LnNwYXJrbGluZS5lbmFibGVkKSB7XG4gICAgICAgICAgICBjaGFydERlZmF1bHRzID0gZGVmYXVsdHMuc3BhcmtsaW5lKGNoYXJ0RGVmYXVsdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5ld0RlZmF1bHRzID0gVXRpbHMuZXh0ZW5kKGNvbmZpZywgY2hhcnREZWZhdWx0cyk7XG4gICAgICAgIH0gLy8gY29uZmlnIHNob3VsZCBjYXNjYWRlIGluIHRoaXMgZmFzaGlvblxuICAgICAgICAvLyBkZWZhdWx0LWNvbmZpZyA8IGdsb2JhbC1hcGV4LXZhcmlhYmxlLWNvbmZpZyA8IHVzZXItZGVmaW5lZC1jb25maWdcbiAgICAgICAgLy8gZ2V0IEdMT0JBTExZIGRlZmluZWQgb3B0aW9ucyBhbmQgbWVyZ2Ugd2l0aCB0aGUgZGVmYXVsdCBjb25maWdcblxuXG4gICAgICAgIHZhciBtZXJnZWRXaXRoRGVmYXVsdENvbmZpZyA9IFV0aWxzLmV4dGVuZChuZXdEZWZhdWx0cywgd2luZG93LkFwZXgpOyAvLyBnZXQgdGhlIG1lcmdlZCBjb25maWcgYW5kIGV4dGVuZCB3aXRoIHVzZXIgZGVmaW5lZCBjb25maWdcblxuICAgICAgICBjb25maWcgPSBVdGlscy5leHRlbmQobWVyZ2VkV2l0aERlZmF1bHRDb25maWcsIG9wdHMpOyAvLyBzb21lIGZlYXR1cmVzIGFyZSBub3Qgc3VwcG9ydGVkLiB0aG9zZSBtaXNtYXRjaGVzIHNob3VsZCBiZSBoYW5kbGVkXG5cbiAgICAgICAgY29uZmlnID0gdGhpcy5oYW5kbGVVc2VySW5wdXRFcnJvcnMoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2hlY2tGb3JDYXRUb051bWVyaWNYQXhpc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrRm9yQ2F0VG9OdW1lcmljWEF4aXMoY2hhcnRUeXBlLCBjaGFydERlZmF1bHRzLCBvcHRzKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cyhvcHRzKTtcbiAgICAgICAgdmFyIGlzQmFySG9yaXpvbnRhbCA9IGNoYXJ0VHlwZSA9PT0gJ2JhcicgJiYgb3B0cy5wbG90T3B0aW9ucyAmJiBvcHRzLnBsb3RPcHRpb25zLmJhciAmJiBvcHRzLnBsb3RPcHRpb25zLmJhci5ob3Jpem9udGFsO1xuICAgICAgICB2YXIgdW5zdXBwb3J0ZWRab29tID0gY2hhcnRUeXBlID09PSAncGllJyB8fCBjaGFydFR5cGUgPT09ICdkb251dCcgfHwgY2hhcnRUeXBlID09PSAncmFkYXInIHx8IGNoYXJ0VHlwZSA9PT0gJ3JhZGlhbEJhcicgfHwgY2hhcnRUeXBlID09PSAnaGVhdG1hcCc7XG4gICAgICAgIHZhciBub3ROdW1lcmljWEF4aXMgPSBvcHRzLnhheGlzLnR5cGUgIT09ICdkYXRldGltZScgJiYgb3B0cy54YXhpcy50eXBlICE9PSAnbnVtZXJpYyc7XG4gICAgICAgIHZhciB0aWNrUGxhY2VtZW50ID0gb3B0cy54YXhpcy50aWNrUGxhY2VtZW50ID8gb3B0cy54YXhpcy50aWNrUGxhY2VtZW50IDogY2hhcnREZWZhdWx0cy54YXhpcyAmJiBjaGFydERlZmF1bHRzLnhheGlzLnRpY2tQbGFjZW1lbnQ7XG5cbiAgICAgICAgaWYgKCFpc0Jhckhvcml6b250YWwgJiYgIXVuc3VwcG9ydGVkWm9vbSAmJiBub3ROdW1lcmljWEF4aXMgJiYgdGlja1BsYWNlbWVudCAhPT0gJ2JldHdlZW4nKSB7XG4gICAgICAgICAgb3B0cyA9IGRlZmF1bHRzLmNvbnZlcnRDYXRUb051bWVyaWMob3B0cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0cztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZXh0ZW5kWUF4aXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRZQXhpcyhvcHRzKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gbmV3IE9wdGlvbnMoKTtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdHMueWF4aXMgPT09ICd1bmRlZmluZWQnIHx8ICFvcHRzLnlheGlzIHx8IEFycmF5LmlzQXJyYXkob3B0cy55YXhpcykgJiYgb3B0cy55YXhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBvcHRzLnlheGlzID0ge307XG4gICAgICAgIH0gLy8gZXh0ZW5kIGdsb2JhbCB5YXhpcyBjb25maWcgKG9ubHkgaWYgb2JqZWN0IGlzIHByb3ZpZGVkIC8gbm90IGFuIGFycmF5KVxuXG5cbiAgICAgICAgaWYgKG9wdHMueWF4aXMuY29uc3RydWN0b3IgIT09IEFycmF5ICYmIHdpbmRvdy5BcGV4LnlheGlzICYmIHdpbmRvdy5BcGV4LnlheGlzLmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xuICAgICAgICAgIG9wdHMueWF4aXMgPSBVdGlscy5leHRlbmQob3B0cy55YXhpcywgd2luZG93LkFwZXgueWF4aXMpO1xuICAgICAgICB9IC8vIGFzIHdlIGNhbid0IGV4dGVuZCBuZXN0ZWQgb2JqZWN0J3MgYXJyYXkgd2l0aCBleHRlbmQsIHdlIG5lZWQgdG8gZG8gaXQgZmlyc3RcbiAgICAgICAgLy8gdXNlciBjYW4gcHJvdmlkZSBlaXRoZXIgYW4gYXJyYXkgb3Igb2JqZWN0IGluIHlheGlzIGNvbmZpZ1xuXG5cbiAgICAgICAgaWYgKG9wdHMueWF4aXMuY29uc3RydWN0b3IgIT09IEFycmF5KSB7XG4gICAgICAgICAgLy8gY29udmVydCB0aGUgeWF4aXMgdG8gYXJyYXkgaWYgdXNlciBzdXBwbGllZCBvYmplY3RcbiAgICAgICAgICBvcHRzLnlheGlzID0gW1V0aWxzLmV4dGVuZChvcHRpb25zLnlBeGlzLCBvcHRzLnlheGlzKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0cy55YXhpcyA9IFV0aWxzLmV4dGVuZEFycmF5KG9wdHMueWF4aXMsIG9wdGlvbnMueUF4aXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzTG9nWSA9IGZhbHNlO1xuICAgICAgICBvcHRzLnlheGlzLmZvckVhY2goZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICBpZiAoeS5sb2dhcml0aG1pYykge1xuICAgICAgICAgICAgaXNMb2dZID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pOyAvLyBBIGxvZ2FyaXRobWljIGNoYXJ0IHdvcmtzIGNvcnJlY3RseSB3aGVuIGVhY2ggc2VyaWVzIGhhcyBhIGNvcnJlc3BvbmRpbmcgeS1heGlzXG4gICAgICAgIC8vIElmIHRoaXMgaXMgbm90IHRoZSBjYXNlLCB3ZSBtYW51YWxseSBjcmVhdGUgeWF4aXMgZm9yIG11bHRpLXNlcmllcyBsb2cgY2hhcnRcblxuICAgICAgICBpZiAoaXNMb2dZICYmIG9wdHMuc2VyaWVzLmxlbmd0aCAhPT0gb3B0cy55YXhpcy5sZW5ndGggJiYgb3B0cy5zZXJpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgb3B0cy55YXhpcyA9IG9wdHMuc2VyaWVzLm1hcChmdW5jdGlvbiAocywgaSkge1xuICAgICAgICAgICAgaWYgKCFzLm5hbWUpIHtcbiAgICAgICAgICAgICAgb3B0cy5zZXJpZXNbaV0ubmFtZSA9IFwic2VyaWVzLVwiLmNvbmNhdChpICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRzLnlheGlzW2ldKSB7XG4gICAgICAgICAgICAgIG9wdHMueWF4aXNbaV0uc2VyaWVzTmFtZSA9IG9wdHMuc2VyaWVzW2ldLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBvcHRzLnlheGlzW2ldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIG5ld1lheGlzID0gVXRpbHMuZXh0ZW5kKG9wdGlvbnMueUF4aXMsIG9wdHMueWF4aXNbMF0pO1xuICAgICAgICAgICAgICBuZXdZYXhpcy5zaG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXdZYXhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0xvZ1kgJiYgb3B0cy5zZXJpZXMubGVuZ3RoID4gMSAmJiBvcHRzLnNlcmllcy5sZW5ndGggIT09IG9wdHMueWF4aXMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdBIG11bHRpLXNlcmllcyBsb2dhcml0aG1pYyBjaGFydCBzaG91bGQgaGF2ZSBlcXVhbCBudW1iZXIgb2Ygc2VyaWVzIGFuZCB5LWF4ZXMuIFBsZWFzZSBtYWtlIHN1cmUgdG8gZXF1YWxpemUgYm90aC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRzO1xuICAgICAgfSAvLyBhbm5vdGF0aW9ucyBhbHNvIGFjY2VwdHMgYXJyYXksIHNvIHdlIG5lZWQgdG8gZXh0ZW5kIHRoZW0gbWFudWFsbHlcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJleHRlbmRBbm5vdGF0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZEFubm90YXRpb25zKG9wdHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmFubm90YXRpb25zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIG9wdHMuYW5ub3RhdGlvbnMgPSB7fTtcbiAgICAgICAgICBvcHRzLmFubm90YXRpb25zLnlheGlzID0gW107XG4gICAgICAgICAgb3B0cy5hbm5vdGF0aW9ucy54YXhpcyA9IFtdO1xuICAgICAgICAgIG9wdHMuYW5ub3RhdGlvbnMucG9pbnRzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBvcHRzID0gdGhpcy5leHRlbmRZQXhpc0Fubm90YXRpb25zKG9wdHMpO1xuICAgICAgICBvcHRzID0gdGhpcy5leHRlbmRYQXhpc0Fubm90YXRpb25zKG9wdHMpO1xuICAgICAgICBvcHRzID0gdGhpcy5leHRlbmRQb2ludEFubm90YXRpb25zKG9wdHMpO1xuICAgICAgICByZXR1cm4gb3B0cztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZXh0ZW5kWUF4aXNBbm5vdGF0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZFlBeGlzQW5ub3RhdGlvbnMob3B0cykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IG5ldyBPcHRpb25zKCk7XG4gICAgICAgIG9wdHMuYW5ub3RhdGlvbnMueWF4aXMgPSBVdGlscy5leHRlbmRBcnJheSh0eXBlb2Ygb3B0cy5hbm5vdGF0aW9ucy55YXhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRzLmFubm90YXRpb25zLnlheGlzIDogW10sIG9wdGlvbnMueUF4aXNBbm5vdGF0aW9uKTtcbiAgICAgICAgcmV0dXJuIG9wdHM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImV4dGVuZFhBeGlzQW5ub3RhdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRYQXhpc0Fubm90YXRpb25zKG9wdHMpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXcgT3B0aW9ucygpO1xuICAgICAgICBvcHRzLmFubm90YXRpb25zLnhheGlzID0gVXRpbHMuZXh0ZW5kQXJyYXkodHlwZW9mIG9wdHMuYW5ub3RhdGlvbnMueGF4aXMgIT09ICd1bmRlZmluZWQnID8gb3B0cy5hbm5vdGF0aW9ucy54YXhpcyA6IFtdLCBvcHRpb25zLnhBeGlzQW5ub3RhdGlvbik7XG4gICAgICAgIHJldHVybiBvcHRzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJleHRlbmRQb2ludEFubm90YXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZXh0ZW5kUG9pbnRBbm5vdGF0aW9ucyhvcHRzKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gbmV3IE9wdGlvbnMoKTtcbiAgICAgICAgb3B0cy5hbm5vdGF0aW9ucy5wb2ludHMgPSBVdGlscy5leHRlbmRBcnJheSh0eXBlb2Ygb3B0cy5hbm5vdGF0aW9ucy5wb2ludHMgIT09ICd1bmRlZmluZWQnID8gb3B0cy5hbm5vdGF0aW9ucy5wb2ludHMgOiBbXSwgb3B0aW9ucy5wb2ludEFubm90YXRpb24pO1xuICAgICAgICByZXR1cm4gb3B0cztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2hlY2tGb3JEYXJrVGhlbWVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0ZvckRhcmtUaGVtZShvcHRzKSB7XG4gICAgICAgIGlmIChvcHRzLnRoZW1lICYmIG9wdHMudGhlbWUubW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgaWYgKCFvcHRzLnRvb2x0aXApIHtcbiAgICAgICAgICAgIG9wdHMudG9vbHRpcCA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvcHRzLnRvb2x0aXAudGhlbWUgIT09ICdsaWdodCcpIHtcbiAgICAgICAgICAgIG9wdHMudG9vbHRpcC50aGVtZSA9ICdkYXJrJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW9wdHMuY2hhcnQuZm9yZUNvbG9yKSB7XG4gICAgICAgICAgICBvcHRzLmNoYXJ0LmZvcmVDb2xvciA9ICcjZjZmN2Y4JztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW9wdHMudGhlbWUucGFsZXR0ZSkge1xuICAgICAgICAgICAgb3B0cy50aGVtZS5wYWxldHRlID0gJ3BhbGV0dGU0JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFuZGxlVXNlcklucHV0RXJyb3JzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlVXNlcklucHV0RXJyb3JzKG9wdHMpIHtcbiAgICAgICAgdmFyIGNvbmZpZyA9IG9wdHM7IC8vIGNvbmZsaWN0aW5nIHRvb2x0aXAgb3B0aW9uLiBpbnRlcnNlY3QgbWFrZXMgc3VyZSB0byBmb2N1cyBvbiAxIHBvaW50IGF0IGEgdGltZS4gU2hhcmVkIGNhbm5vdCBiZSB1c2VkIGFsb25nIHdpdGggaXRcblxuICAgICAgICBpZiAoY29uZmlnLnRvb2x0aXAuc2hhcmVkICYmIGNvbmZpZy50b29sdGlwLmludGVyc2VjdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndG9vbHRpcC5zaGFyZWQgY2Fubm90IGJlIGVuYWJsZWQgd2hlbiB0b29sdGlwLmludGVyc2VjdCBpcyB0cnVlLiBUdXJuIG9mZiBhbnkgb3RoZXIgb3B0aW9uIGJ5IHNldHRpbmcgaXQgdG8gZmFsc2UuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGNvbmZpZy5jaGFydC50eXBlID09PSAnYmFyJyB8fCBjb25maWcuY2hhcnQudHlwZSA9PT0gJ3JhbmdlQmFyJykgJiYgY29uZmlnLnBsb3RPcHRpb25zLmJhci5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgLy8gTm8gbXVsdGlwbGUgeWF4aXMgZm9yIGJhcnNcbiAgICAgICAgICBpZiAoY29uZmlnLnlheGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVsdGlwbGUgWSBBeGlzIGZvciBiYXJzIGFyZSBub3Qgc3VwcG9ydGVkLiBTd2l0Y2ggdG8gY29sdW1uIGNoYXJ0IGJ5IHNldHRpbmcgcGxvdE9wdGlvbnMuYmFyLmhvcml6b250YWw9ZmFsc2UnKTtcbiAgICAgICAgICB9IC8vIGlmIHlheGlzIGlzIHJldmVyc2VkIGluIGhvcml6b250YWwgYmFyIGNoYXJ0LCB5b3Ugc2hvdWxkIGRyYXcgdGhlIHktYXhpcyBvbiByaWdodCBzaWRlXG5cblxuICAgICAgICAgIGlmIChjb25maWcueWF4aXNbMF0ucmV2ZXJzZWQpIHtcbiAgICAgICAgICAgIGNvbmZpZy55YXhpc1swXS5vcHBvc2l0ZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uZmlnLnhheGlzLnRvb2x0aXAuZW5hYmxlZCA9IGZhbHNlOyAvLyBubyB4YXhpcyB0b29sdGlwIGZvciBob3Jpem9udGFsIGJhclxuXG4gICAgICAgICAgY29uZmlnLnlheGlzWzBdLnRvb2x0aXAuZW5hYmxlZCA9IGZhbHNlOyAvLyBubyB4YXhpcyB0b29sdGlwIGZvciBob3Jpem9udGFsIGJhclxuXG4gICAgICAgICAgY29uZmlnLmNoYXJ0Lnpvb20uZW5hYmxlZCA9IGZhbHNlOyAvLyBubyB6b29taW5nIGZvciBob3J6IGJhcnNcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuY2hhcnQudHlwZSA9PT0gJ2JhcicgfHwgY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdyYW5nZUJhcicpIHtcbiAgICAgICAgICBpZiAoY29uZmlnLnRvb2x0aXAuc2hhcmVkKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnhheGlzLmNyb3NzaGFpcnMud2lkdGggPT09ICdiYXJXaWR0aCcgJiYgY29uZmlnLnNlcmllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignY3Jvc3NoYWlycy53aWR0aCA9IFwiYmFyV2lkdGhcIiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBzaW5nbGUgc2VyaWVzLCBub3QgaW4gYSBtdWx0aS1zZXJpZXMgYmFyQ2hhcnQuJyk7XG4gICAgICAgICAgICAgIGNvbmZpZy54YXhpcy5jcm9zc2hhaXJzLndpZHRoID0gJ3RpY2tXaWR0aCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25maWcucGxvdE9wdGlvbnMuYmFyLmhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgY29uZmlnLnN0YXRlcy5ob3Zlci50eXBlID0gJ25vbmUnO1xuICAgICAgICAgICAgICBjb25maWcudG9vbHRpcC5zaGFyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjb25maWcudG9vbHRpcC5mb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdmb2xsb3dDdXJzb3Igb3B0aW9uIGluIHNoYXJlZCBjb2x1bW5zIGNhbm5vdCBiZSB0dXJuZWQgb2ZmLiBQbGVhc2Ugc2V0ICVjdG9vbHRpcC5mb2xsb3dDdXJzb3I6IHRydWUnLCAnY29sb3I6IGJsdWU7Jyk7XG4gICAgICAgICAgICAgIGNvbmZpZy50b29sdGlwLmZvbGxvd0N1cnNvciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5jaGFydC50eXBlID09PSAnY2FuZGxlc3RpY2snKSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy55YXhpc1swXS5yZXZlcnNlZCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdSZXZlcnNlZCB5LWF4aXMgaW4gY2FuZGxlc3RpY2sgY2hhcnQgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgICAgIGNvbmZpZy55YXhpc1swXS5yZXZlcnNlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuY2hhcnQuZ3JvdXAgJiYgY29uZmlnLnlheGlzWzBdLmxhYmVscy5taW5XaWR0aCA9PT0gMCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignSXQgbG9va3MgbGlrZSB5b3UgaGF2ZSBtdWx0aXBsZSBjaGFydHMgaW4gc3luY2hyb25pemF0aW9uLiBZb3UgbXVzdCBwcm92aWRlIHlheGlzLmxhYmVscy5taW5XaWR0aCB3aGljaCBtdXN0IGJlIEVRVUFMIGZvciBhbGwgZ3JvdXBlZCBjaGFydHMgdG8gcHJldmVudCBpbmNvcnJlY3QgYmVoYXZpb3VyLicpO1xuICAgICAgICB9IC8vIGlmIHVzZXIgc3VwcGxpZWQgYXJyYXkgZm9yIHN0cm9rZSB3aWR0aCwgaXQgd2lsbCBvbmx5IGJlIGFwcGxpY2FibGUgdG8gbGluZS9hcmVhIGNoYXJ0cywgZm9yIGFueSBvdGhlciBjaGFydHMsIHJldmVydCBiYWNrIHRvIE51bWJlclxuXG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLnN0cm9rZS53aWR0aCkpIHtcbiAgICAgICAgICBpZiAoY29uZmlnLmNoYXJ0LnR5cGUgIT09ICdsaW5lJyAmJiBjb25maWcuY2hhcnQudHlwZSAhPT0gJ2FyZWEnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ3N0cm9rZS53aWR0aCBvcHRpb24gYWNjZXB0cyBhcnJheSBvbmx5IGZvciBsaW5lIGFuZCBhcmVhIGNoYXJ0cy4gUmV2ZXJ0ZWQgYmFjayB0byBOdW1iZXInKTtcbiAgICAgICAgICAgIGNvbmZpZy5zdHJva2Uud2lkdGggPSBjb25maWcuc3Ryb2tlLndpZHRoWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENvbmZpZztcbiAgfSgpO1xuXG4gIHZhciBHbG9iYWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHbG9iYWxzKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbHMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhHbG9iYWxzLCBbe1xuICAgICAga2V5OiBcImluaXRHbG9iYWxWYXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdEdsb2JhbFZhcnMoZ2wpIHtcbiAgICAgICAgZ2wuc2VyaWVzID0gW107IC8vIHRoZSBNQUlOIHNlcmllcyBhcnJheSAoeSB2YWx1ZXMpXG5cbiAgICAgICAgZ2wuc2VyaWVzQ2FuZGxlTyA9IFtdO1xuICAgICAgICBnbC5zZXJpZXNDYW5kbGVIID0gW107XG4gICAgICAgIGdsLnNlcmllc0NhbmRsZUwgPSBbXTtcbiAgICAgICAgZ2wuc2VyaWVzQ2FuZGxlQyA9IFtdO1xuICAgICAgICBnbC5zZXJpZXNSYW5nZVN0YXJ0ID0gW107XG4gICAgICAgIGdsLnNlcmllc1JhbmdlRW5kID0gW107XG4gICAgICAgIGdsLnNlcmllc1JhbmdlQmFyVGltZWxpbmUgPSBbXTtcbiAgICAgICAgZ2wuc2VyaWVzUGVyY2VudCA9IFtdO1xuICAgICAgICBnbC5zZXJpZXNYID0gW107XG4gICAgICAgIGdsLnNlcmllc1ogPSBbXTtcbiAgICAgICAgZ2wuc2VyaWVzTmFtZXMgPSBbXTtcbiAgICAgICAgZ2wuc2VyaWVzVG90YWxzID0gW107XG4gICAgICAgIGdsLnNlcmllc0xvZyA9IFtdO1xuICAgICAgICBnbC5zdGFja2VkU2VyaWVzVG90YWxzID0gW107XG4gICAgICAgIGdsLnNlcmllc1h2YWx1ZXMgPSBbXTsgLy8gd2Ugd2lsbCBuZWVkIHRoaXMgaW4gdG9vbHRpcCAoaXQncyB4IHBvc2l0aW9uKVxuICAgICAgICAvLyB3aGVuIHdlIHdpbGwgaGF2ZSB1bmVxdWFsIHggdmFsdWVzLCB3ZSB3aWxsIG5lZWRcbiAgICAgICAgLy8gc29tZSB3YXkgdG8gZ2V0IHggdmFsdWUgZGVwZW5kaW5nIG9uIG1vdXNlIHBvaW50ZXJcblxuICAgICAgICBnbC5zZXJpZXNZdmFsdWVzID0gW107IC8vIHdlIHdpbGwgbmVlZCB0aGlzIHdoZW4gZGVjaWRpbmcgd2hpY2ggc2VyaWVzXG4gICAgICAgIC8vIHVzZXIgaG92ZXJlZCBvblxuXG4gICAgICAgIGdsLmxhYmVscyA9IFtdO1xuICAgICAgICBnbC5jYXRlZ29yeUxhYmVscyA9IFtdO1xuICAgICAgICBnbC50aW1lc2NhbGVMYWJlbHMgPSBbXTtcbiAgICAgICAgZ2wubm9MYWJlbHNQcm92aWRlZCA9IGZhbHNlO1xuICAgICAgICBnbC5yZXNpemVUaW1lciA9IG51bGw7XG4gICAgICAgIGdsLnNlbGVjdGlvblJlc2l6ZVRpbWVyID0gbnVsbDtcbiAgICAgICAgZ2wuZGVsYXllZEVsZW1lbnRzID0gW107XG4gICAgICAgIGdsLnBvaW50c0FycmF5ID0gW107XG4gICAgICAgIGdsLmRhdGFMYWJlbHNSZWN0cyA9IFtdO1xuICAgICAgICBnbC5pc1hOdW1lcmljID0gZmFsc2U7XG4gICAgICAgIGdsLnhheGlzTGFiZWxzQ291bnQgPSAwO1xuICAgICAgICBnbC5za2lwTGFzdFRpbWVsaW5lbGFiZWwgPSBmYWxzZTtcbiAgICAgICAgZ2wuc2tpcEZpcnN0VGltZWxpbmVsYWJlbCA9IGZhbHNlO1xuICAgICAgICBnbC54MlNwYWNlQXZhaWxhYmxlID0gMDtcbiAgICAgICAgZ2wuaXNEYXRhWFlaID0gZmFsc2U7XG4gICAgICAgIGdsLmlzTXVsdGlMaW5lWCA9IGZhbHNlO1xuICAgICAgICBnbC5pc011bHRpcGxlWUF4aXMgPSBmYWxzZTtcbiAgICAgICAgZ2wubWF4WSA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICBnbC5taW5ZID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgZ2wubWluWUFyciA9IFtdO1xuICAgICAgICBnbC5tYXhZQXJyID0gW107XG4gICAgICAgIGdsLm1heFggPSAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgZ2wubWluWCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIGdsLmluaXRpYWxNYXhYID0gLU51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIGdsLmluaXRpYWxNaW5YID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgZ2wubWF4RGF0ZSA9IDA7XG4gICAgICAgIGdsLm1pbkRhdGUgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICBnbC5taW5aID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgZ2wubWF4WiA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICBnbC5taW5YRGlmZiA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIGdsLnlBeGlzU2NhbGUgPSBbXTtcbiAgICAgICAgZ2wueEF4aXNTY2FsZSA9IG51bGw7XG4gICAgICAgIGdsLnhBeGlzVGlja3NQb3NpdGlvbnMgPSBbXTtcbiAgICAgICAgZ2wueUxhYmVsc0Nvb3JkcyA9IFtdO1xuICAgICAgICBnbC55VGl0bGVDb29yZHMgPSBbXTtcbiAgICAgICAgZ2wuYmFyUGFkRm9yTnVtZXJpY0F4aXMgPSAwO1xuICAgICAgICBnbC5wYWRIb3Jpem9udGFsID0gMDtcbiAgICAgICAgZ2wueFJhbmdlID0gMDtcbiAgICAgICAgZ2wueVJhbmdlID0gW107XG4gICAgICAgIGdsLnpSYW5nZSA9IDA7XG4gICAgICAgIGdsLmRhdGFQb2ludHMgPSAwO1xuICAgICAgICBnbC54VGlja0Ftb3VudCA9IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdsb2JhbFZhcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnbG9iYWxWYXJzKGNvbmZpZykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoYXJ0SUQ6IG51bGwsXG4gICAgICAgICAgLy8gY2hhcnQgSUQgLSBhcGV4Y2hhcnRzLWN1aWRcbiAgICAgICAgICBjdWlkOiBudWxsLFxuICAgICAgICAgIC8vIGNoYXJ0IElEIC0gcmFuZG9tIG51bWJlcnMgZXhjbHVkaW5nIFwiYXBleGNoYXJ0c1wiIHBhcnRcbiAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIGJlZm9yZU1vdW50OiBbXSxcbiAgICAgICAgICAgIG1vdW50ZWQ6IFtdLFxuICAgICAgICAgICAgdXBkYXRlZDogW10sXG4gICAgICAgICAgICBjbGlja2VkOiBbXSxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogW10sXG4gICAgICAgICAgICBkYXRhUG9pbnRTZWxlY3Rpb246IFtdLFxuICAgICAgICAgICAgem9vbWVkOiBbXSxcbiAgICAgICAgICAgIHNjcm9sbGVkOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29sb3JzOiBbXSxcbiAgICAgICAgICBjbGllbnRYOiBudWxsLFxuICAgICAgICAgIGNsaWVudFk6IG51bGwsXG4gICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgY29sb3JzOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICBjb2xvcnM6IFtdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBjb2xvcnM6IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByYWRhclBvbHlnb25zOiB7XG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgIGNvbG9yczogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgIGNvbG9yczogW10sXG4gICAgICAgICAgICBzaXplOiBjb25maWcubWFya2Vycy5zaXplLFxuICAgICAgICAgICAgbGFyZ2VzdFNpemU6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFuaW1hdGlvbkVuZGVkOiBmYWxzZSxcbiAgICAgICAgICBpc1RvdWNoRGV2aWNlOiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMsXG4gICAgICAgICAgaXNEaXJ0eTogZmFsc2UsXG4gICAgICAgICAgLy8gY2hhcnQgaGFzIGJlZW4gdXBkYXRlZCBhZnRlciB0aGUgaW5pdGlhbCByZW5kZXIuIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gZGF0YUNoYW5nZWQgcHJvcGVydHkuIGlzRGlydHkgbWVhbnMgdXNlciBtYW51YWxseSBjYWxsZWQgc29tZSBtZXRob2QgdG8gdXBkYXRlXG4gICAgICAgICAgaXNFeGVjQ2FsbGVkOiBmYWxzZSxcbiAgICAgICAgICAvLyB3aGV0aGVyIHVzZXIgdXBkYXRlZCB0aGUgY2hhcnQgdGhyb3VnaCB0aGUgZXhlYyBtZXRob2RcbiAgICAgICAgICBpbml0aWFsQ29uZmlnOiBudWxsLFxuICAgICAgICAgIC8vIHdlIHdpbGwgc3RvcmUgdGhlIGZpcnN0IGNvbmZpZyB1c2VyIGhhcyBzZXQgdG8gZ28gYmFjayB3aGVuIHVzZXIgZmluaXNoZXMgaW50ZXJhY3Rpb25zIGxpa2Ugem9vbWluZyBhbmQgY29tZSBvdXQgb2YgaXRcbiAgICAgICAgICBsYXN0WEF4aXM6IFtdLFxuICAgICAgICAgIGxhc3RZQXhpczogW10sXG4gICAgICAgICAgY29sdW1uU2VyaWVzOiBudWxsLFxuICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgLy8gc3RvcmUgdGhlIHRleHQgdG8gZHJhdyBvbiB4IGF4aXNcbiAgICAgICAgICAvLyBEb24ndCBtdXRhdGUgdGhlIGxhYmVscywgbWFueSB0aGluZ3MgaW5jbHVkaW5nIHRvb2x0aXBzIGRlcGVuZHMgb24gaXQhXG4gICAgICAgICAgdGltZXNjYWxlTGFiZWxzOiBbXSxcbiAgICAgICAgICAvLyBzdG9yZSB0aGUgdGltZXNjYWxlTGFiZWxzIExhYmVscyBpbiBhbm90aGVyIHZhcmlhYmxlXG4gICAgICAgICAgbm9MYWJlbHNQcm92aWRlZDogZmFsc2UsXG4gICAgICAgICAgLy8gaWYgdXNlciBkaWRuJ3QgcHJvdmlkZSBhbnkgY2F0ZWdvcmllcy9sYWJlbHMgb3IgeCB2YWx1ZXMsIGZhbGxiYWNrIHRvIDEsMiwzLDQuLi5cbiAgICAgICAgICBhbGxTZXJpZXNDb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgICAgIGNvbGxhcHNlZFNlcmllczogW10sXG4gICAgICAgICAgLy8gd2hlbiB1c2VyIGNvbGxhcHNlcyBhIHNlcmllcywgaXQgZ29lcyBpbnRvIHRoaXMgYXJyYXlcbiAgICAgICAgICBjb2xsYXBzZWRTZXJpZXNJbmRpY2VzOiBbXSxcbiAgICAgICAgICAvLyB0aGlzIHN0b3JlcyB0aGUgaW5kZXggb2YgdGhlIGNvbGxhcHNlZFNlcmllcyBpbnN0ZWFkIG9mIHdob2xlIG9iamVjdCBmb3IgcXVpY2sgYWNjZXNzXG4gICAgICAgICAgYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzOiBbXSxcbiAgICAgICAgICAvLyB3aGVuIHVzZXIgY29sbGFwc2VzIGFuIFwiYWx3YXlzVmlzaWJsZVwiIHNlcmllcywgaXQgZ29lcyBpbnRvIHRoaXMgYXJyYXlcbiAgICAgICAgICBhbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXNJbmRpY2VzOiBbXSxcbiAgICAgICAgICAvLyB0aGlzIHN0b3JlcyB0aGUgaW5kZXggb2YgdGhlIGFuY2lsbGFyeUNvbGxhcHNlZFNlcmllcyB3aG9zZSB5LWF4aXMgaXMgYWx3YXlzIHZpc2libGVcbiAgICAgICAgICByaXNpbmdTZXJpZXM6IFtdLFxuICAgICAgICAgIC8vIHdoZW4gdXNlciByZS1vcGVucyBhIGNvbGxhcHNlZCBzZXJpZXMsIGl0IGdvZXMgaGVyZVxuICAgICAgICAgIGRhdGFGb3JtYXRYTnVtZXJpYzogZmFsc2UsXG4gICAgICAgICAgLy8gYm9vbGVhbiB2YWx1ZSB0byBpbmRpY2F0ZSB1c2VyIGhhcyBwYXNzZWQgbnVtZXJpYyB4IHZhbHVlc1xuICAgICAgICAgIGNhcHR1cmVkU2VyaWVzSW5kZXg6IC0xLFxuICAgICAgICAgIGNhcHR1cmVkRGF0YVBvaW50SW5kZXg6IC0xLFxuICAgICAgICAgIHNlbGVjdGVkRGF0YVBvaW50czogW10sXG4gICAgICAgICAgZ29sZGVuUGFkZGluZzogMzUsXG4gICAgICAgICAgLy8gdGhpcyB2YWx1ZSBpcyB1c2VkIGF0IGEgbG90IG9mIHBsYWNlcyBmb3Igc3BhY2luZyBwdXJwb3NlXG4gICAgICAgICAgaW52YWxpZExvZ1NjYWxlOiBmYWxzZSxcbiAgICAgICAgICAvLyBpZiBhIHVzZXIgZW5hYmxlZCBsb2cgc2NhbGUgYnV0IHRoZSBkYXRhIHByb3ZpZGVkIGlzIG5vdCB2YWxpZCB0byBnZW5lcmF0ZSBhIGxvZyBzY2FsZSwgdHVybiBvbiB0aGlzIGZsYWdcbiAgICAgICAgICBpZ25vcmVZQXhpc0luZGV4ZXM6IFtdLFxuICAgICAgICAgIC8vIHdoZW4gc2VyaWVzIGFyZSBiZWluZyBjb2xsYXBzZWQgaW4gbXVsdGlwbGUgeSBheGVzLCBpZ25vcmUgY2VydGFpbiBpbmRleFxuICAgICAgICAgIHlBeGlzU2FtZVNjYWxlSW5kaWNlczogW10sXG4gICAgICAgICAgbWF4VmFsc0luQXJyYXlJbmRleDogMCxcbiAgICAgICAgICByYWRpYWxTaXplOiAwLFxuICAgICAgICAgIHpvb21FbmFibGVkOiBjb25maWcuY2hhcnQudG9vbGJhci5hdXRvU2VsZWN0ZWQgPT09ICd6b29tJyAmJiBjb25maWcuY2hhcnQudG9vbGJhci50b29scy56b29tICYmIGNvbmZpZy5jaGFydC56b29tLmVuYWJsZWQsXG4gICAgICAgICAgcGFuRW5hYmxlZDogY29uZmlnLmNoYXJ0LnRvb2xiYXIuYXV0b1NlbGVjdGVkID09PSAncGFuJyAmJiBjb25maWcuY2hhcnQudG9vbGJhci50b29scy5wYW4sXG4gICAgICAgICAgc2VsZWN0aW9uRW5hYmxlZDogY29uZmlnLmNoYXJ0LnRvb2xiYXIuYXV0b1NlbGVjdGVkID09PSAnc2VsZWN0aW9uJyAmJiBjb25maWcuY2hhcnQudG9vbGJhci50b29scy5zZWxlY3Rpb24sXG4gICAgICAgICAgeWF4aXM6IG51bGwsXG4gICAgICAgICAgbW91c2Vkb3duOiBmYWxzZSxcbiAgICAgICAgICBsYXN0Q2xpZW50UG9zaXRpb246IHt9LFxuICAgICAgICAgIC8vIGRvbid0IHJlc2V0IHRoaXMgdmFyaWFibGUgdGhpcyB0aGUgY2hhcnQgaXMgZGVzdHJveWVkLiBJdCBpcyB1c2VkIHRvIGRldGVjdCByaWdodCBvciBsZWZ0IG1vdXNlbW92ZSBpbiBwYW5uaW5nXG4gICAgICAgICAgdmlzaWJsZVhSYW5nZTogdW5kZWZpbmVkLFxuICAgICAgICAgIHlWYWx1ZURlY2ltYWw6IDAsXG4gICAgICAgICAgLy8gYXJlIHRoZXJlIGZsb2F0aW5nIG51bWJlcnMgaW4gdGhlIHNlcmllcy4gSWYgeWVzLCB0aGlzIHJlcHJlc2VudCB0aGUgbGVuIG9mIHRoZSBkZWNpbWFsc1xuICAgICAgICAgIHRvdGFsOiAwLFxuICAgICAgICAgIFNWR05TOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICAgICAgICAgIC8vIHN2ZyBuYW1lc3BhY2VcbiAgICAgICAgICBzdmdXaWR0aDogMCxcbiAgICAgICAgICAvLyB0aGUgd2hvbGUgc3ZnIHdpZHRoXG4gICAgICAgICAgc3ZnSGVpZ2h0OiAwLFxuICAgICAgICAgIC8vIHRoZSB3aG9sZSBzdmcgaGVpZ2h0XG4gICAgICAgICAgbm9EYXRhOiBmYWxzZSxcbiAgICAgICAgICAvLyB3aGV0aGVyIHRoZXJlIGlzIGFueSBkYXRhIHRvIGRpc3BsYXkgb3Igbm90XG4gICAgICAgICAgbG9jYWxlOiB7fSxcbiAgICAgICAgICAvLyB0aGUgY3VycmVudCBsb2NhbGUgdmFsdWVzIHdpbGwgYmUgcHJlc2VydmVkIGhlcmUgZm9yIGdsb2JhbCBhY2Nlc3NcbiAgICAgICAgICBkb206IHt9LFxuICAgICAgICAgIC8vIGZvciBzdG9yaW5nIGFsbCBkb20gbm9kZXMgaW4gdGhpcyBwYXJ0aWN1bGFyIHByb3BlcnR5XG4gICAgICAgICAgbWVtb3J5OiB7XG4gICAgICAgICAgICBtZXRob2RzVG9FeGVjOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2hvdWxkQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICBza2lwTGFzdFRpbWVsaW5lbGFiZWw6IGZhbHNlLFxuICAgICAgICAgIC8vIHdoZW4gbGFzdCBsYWJlbCBpcyBjcm9wcGVkLCBza2lwIGRyYXdpbmcgaXRcbiAgICAgICAgICBza2lwRmlyc3RUaW1lbGluZWxhYmVsOiBmYWxzZSxcbiAgICAgICAgICAvLyB3aGVuIGZpcnN0IGxhYmVsIGlzIGNyb3BwZWQsIHNraXAgZHJhd2luZyBpdFxuICAgICAgICAgIGRlbGF5ZWRFbGVtZW50czogW10sXG4gICAgICAgICAgLy8gZWxlbWVudCB3aGljaCBhcHBlYXIgYWZ0ZXIgYW5pbWF0aW9uIGhhcyBmaW5pc2hlZFxuICAgICAgICAgIGF4aXNDaGFydHM6IHRydWUsXG4gICAgICAgICAgLy8gY2hhcnQgdHlwZSA9IGxpbmUgb3IgYXJlYSBvciBiYXJcbiAgICAgICAgICAvLyAocmVmZXIgdGhlbSBhbHNvIGFzIHBsb3QgY2hhcnRzIGluIHRoZSBjb2RlKVxuICAgICAgICAgIGlzRGF0YVhZWjogZmFsc2UsXG4gICAgICAgICAgLy8gYm9vbDogZGF0YSB3YXMgcHJvdmlkZWQgaW4gYSB7W3gseSx6XX0gcGF0dGVyblxuICAgICAgICAgIHJlc2l6ZWQ6IGZhbHNlLFxuICAgICAgICAgIC8vIGJvb2w6IHVzZXIgaGFzIHJlc2l6ZWRcbiAgICAgICAgICByZXNpemVUaW1lcjogbnVsbCxcbiAgICAgICAgICAvLyB0aW1lb3V0IGZ1bmN0aW9uIHRvIG1ha2UgYSBzbWFsbCBkZWxheSBiZWZvcmVcbiAgICAgICAgICAvLyBkcmF3aW5nIHdoZW4gdXNlciByZXNpemVkXG4gICAgICAgICAgY29tYm9DaGFydHM6IGZhbHNlLFxuICAgICAgICAgIC8vIGJvb2w6IHdoZXRoZXIgaXQncyBhIGNvbWJpbmF0aW9uIG9mIGxpbmUvY29sdW1uXG4gICAgICAgICAgZGF0YUNoYW5nZWQ6IGZhbHNlLFxuICAgICAgICAgIC8vIGJvb2w6IGhhcyBkYXRhIGNoYW5nZWQgZHluYW1pY2FsbHlcbiAgICAgICAgICBwcmV2aW91c1BhdGhzOiBbXSxcbiAgICAgICAgICAvLyBhcnJheTogd2hlbiBkYXRhIGlzIGNoYW5nZWQsIGl0IHdpbGwgYW5pbWF0ZSBmcm9tXG4gICAgICAgICAgLy8gcHJldmlvdXMgcGF0aHNcbiAgICAgICAgICBhbGxTZXJpZXNIYXNFcXVhbFg6IHRydWUsXG4gICAgICAgICAgcG9pbnRzQXJyYXk6IFtdLFxuICAgICAgICAgIC8vIHN0b3JlIHRoZSBwb2ludHMgcG9zaXRpb25zIGhlcmUgdG8gZHJhdyBsYXRlciBvbiBob3ZlclxuICAgICAgICAgIC8vIGZvcm1hdCBpcyAtIFtbeCx5XSxbeCx5XS4uLiBbeCx5XV1cbiAgICAgICAgICBkYXRhTGFiZWxzUmVjdHM6IFtdLFxuICAgICAgICAgIC8vIHN0b3JlIHRoZSBwb3NpdGlvbnMgb2YgZGF0YWxhYmVscyB0byBwcmV2ZW50IGNvbGxpc2lvblxuICAgICAgICAgIGxhc3REcmF3bkRhdGFMYWJlbHNJbmRleGVzOiBbXSxcbiAgICAgICAgICB4MlNwYWNlQXZhaWxhYmxlOiAwLFxuICAgICAgICAgIC8vIHNwYWNlIGF2YWlsYWJsZSBvbiB0aGUgcmlnaHQgc2lkZSBhZnRlciBncmlkIGFyZWFcbiAgICAgICAgICBoYXNOdWxsVmFsdWVzOiBmYWxzZSxcbiAgICAgICAgICAvLyBib29sOiB3aGV0aGVyIHNlcmllcyBjb250YWlucyBudWxsIHZhbHVlc1xuICAgICAgICAgIGVhc2luZzogbnVsbCxcbiAgICAgICAgICAvLyBmdW5jdGlvbjogYW5pbWF0aW9uIGVmZmVjdCB0byBhcHBseVxuICAgICAgICAgIHpvb21lZDogZmFsc2UsXG4gICAgICAgICAgLy8gd2hldGhlciB1c2VyIGhhcyB6b29tZWQgb3Igbm90XG4gICAgICAgICAgZ3JpZFdpZHRoOiAwLFxuICAgICAgICAgIC8vIGRyYXdhYmxlIHdpZHRoIG9mIGFjdHVhbCBncmFwaHMgKHNlcmllcyBwYXRocylcbiAgICAgICAgICBncmlkSGVpZ2h0OiAwLFxuICAgICAgICAgIC8vIGRyYXdhYmxlIGhlaWdodCBvZiBhY3R1YWwgZ3JhcGhzIChzZXJpZXMgcGF0aHMpXG4gICAgICAgICAgcm90YXRlWExhYmVsczogZmFsc2UsXG4gICAgICAgICAgZGVmYXVsdExhYmVsczogZmFsc2UsXG4gICAgICAgICAgeExhYmVsRm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgLy8gZm9ybWF0dGVyIGZvciB4IGF4aXMgbGFiZWxzXG4gICAgICAgICAgeUxhYmVsRm9ybWF0dGVyczogW10sXG4gICAgICAgICAgeGF4aXNUb29sdGlwRm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgLy8gZm9ybWF0dGVyIGZvciB4IGF4aXMgdG9vbHRpcFxuICAgICAgICAgIHR0S2V5Rm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgdHRWYWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0dFpGb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICBMSU5FX0hFSUdIVF9SQVRJTzogMS42MTgsXG4gICAgICAgICAgeEF4aXNMYWJlbHNIZWlnaHQ6IDAsXG4gICAgICAgICAgeUF4aXNMYWJlbHNXaWR0aDogMCxcbiAgICAgICAgICBzY2FsZVg6IDEsXG4gICAgICAgICAgc2NhbGVZOiAxLFxuICAgICAgICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgICAgICAgdHJhbnNsYXRlWTogMCxcbiAgICAgICAgICB0cmFuc2xhdGVZQXhpc1g6IFtdLFxuICAgICAgICAgIHlBeGlzV2lkdGhzOiBbXSxcbiAgICAgICAgICB0cmFuc2xhdGVYQXhpc1k6IDAsXG4gICAgICAgICAgdHJhbnNsYXRlWEF4aXNYOiAwLFxuICAgICAgICAgIHRvb2x0aXA6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBnbG9iYWxzID0gdGhpcy5nbG9iYWxWYXJzKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuaW5pdEdsb2JhbFZhcnMoZ2xvYmFscyk7XG4gICAgICAgIGdsb2JhbHMuaW5pdGlhbENvbmZpZyA9IFV0aWxzLmV4dGVuZCh7fSwgY29uZmlnKTtcbiAgICAgICAgZ2xvYmFscy5pbml0aWFsU2VyaWVzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnbG9iYWxzLmluaXRpYWxDb25maWcuc2VyaWVzKSk7XG4gICAgICAgIGdsb2JhbHMubGFzdFhBeGlzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnbG9iYWxzLmluaXRpYWxDb25maWcueGF4aXMpKTtcbiAgICAgICAgZ2xvYmFscy5sYXN0WUF4aXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGdsb2JhbHMuaW5pdGlhbENvbmZpZy55YXhpcykpO1xuICAgICAgICByZXR1cm4gZ2xvYmFscztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gR2xvYmFscztcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIEJhc2UgQ2xhc3MgZm9yIGV4dGVuZGluZyB1c2VyIG9wdGlvbnMgd2l0aCBwcmUtZGVmaW5lZCBBcGV4Q2hhcnRzIGNvbmZpZy5cbiAgICpcbiAgICogQG1vZHVsZSBCYXNlXG4gICAqKi9cblxuICB2YXIgQmFzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFzZShvcHRzKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZSk7XG5cbiAgICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJhc2UsIFt7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBjb25maWcgPSBuZXcgQ29uZmlnKHRoaXMub3B0cykuaW5pdCh7XG4gICAgICAgICAgcmVzcG9uc2l2ZU92ZXJyaWRlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGdsb2JhbHMgPSBuZXcgR2xvYmFscygpLmluaXQoY29uZmlnKTtcbiAgICAgICAgdmFyIHcgPSB7XG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgZ2xvYmFsczogZ2xvYmFsc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQmFzZTtcbiAgfSgpO1xuXG4gIC8qXG4gICAqKiBVdGlsIGZ1bmN0aW9ucyB3aGljaCBhcmUgZGVwZW5kZW50IG9uIEFwZXhDaGFydHMgaW5zdGFuY2VcbiAgICovXG4gIHZhciBDb3JlVXRpbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvcmVVdGlscyhjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb3JlVXRpbHMpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDb3JlVXRpbHMsIFt7XG4gICAgICBrZXk6IFwiZ2V0U3RhY2tlZFNlcmllc1RvdGFsc1wiLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBDb3JlVXRpbHNcbiAgICAgICAqIHJldHVybnMgdGhlIHN1bSBvZiBhbGwgaW5kaXZpZHVhbCB2YWx1ZXMgaW4gYSBtdWx0aXBsZSBzdGFja2VkIHNlcmllc1xuICAgICAgICogRWcuIHcuZ2xvYmFscy5zZXJpZXMgPSBbWzMyLDMzLDQzLDEyXSwgWzIsMyw1LDFdXVxuICAgICAgICogIEByZXR1cm4gWzM0LDM2LDQ4LDEzXVxuICAgICAgICoqL1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0YWNrZWRTZXJpZXNUb3RhbHMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdG90YWwgPSBbXTtcbiAgICAgICAgaWYgKHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoID09PSAwKSByZXR1cm4gdG90YWw7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmdsb2JhbHMuc2VyaWVzW3cuZ2xvYmFscy5tYXhWYWxzSW5BcnJheUluZGV4XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0ID0gMDtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdy5nbG9iYWxzLnNlcmllcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3Lmdsb2JhbHMuc2VyaWVzW2pdW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB0ICs9IHcuZ2xvYmFscy5zZXJpZXNbal1baV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG90YWwucHVzaCh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHcuZ2xvYmFscy5zdGFja2VkU2VyaWVzVG90YWxzID0gdG90YWw7XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICAgIH0gLy8gZ2V0IHRvdGFsIG9mIHRoZSBhbGwgdmFsdWVzIGluc2lkZSBhbGwgc2VyaWVzXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0U2VyaWVzVG90YWxCeUluZGV4XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VyaWVzVG90YWxCeUluZGV4KCkge1xuICAgICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gbm9uLXBsb3QgY2hhcnQgdHlwZXMgLSBwaWUgLyBkb251dCAvIGNpcmNsZVxuICAgICAgICAgIHJldHVybiB0aGlzLncuY29uZmlnLnNlcmllcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjICsgY3VyO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGF4aXMgY2hhcnRzIC0gc3VwcG9ydGluZyBtdWx0aXBsZSBzZXJpZXNcbiAgICAgICAgICByZXR1cm4gdGhpcy53Lmdsb2JhbHMuc2VyaWVzW2luZGV4XS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjICsgY3VyO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzU2VyaWVzTnVsbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzU2VyaWVzTnVsbCgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgICB2YXIgciA9IFtdO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIG5vbi1wbG90IGNoYXJ0IHR5cGVzIC0gcGllIC8gZG9udXQgLyBjaXJjbGVcbiAgICAgICAgICByID0gdGhpcy53LmNvbmZpZy5zZXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZCAhPT0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBheGlzIGNoYXJ0cyAtIHN1cHBvcnRpbmcgbXVsdGlwbGUgc2VyaWVzXG4gICAgICAgICAgciA9IHRoaXMudy5nbG9iYWxzLnNlcmllc1tpbmRleF0uZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZCAhPT0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByLmxlbmd0aCA9PT0gMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2VyaWVzSGF2ZVNhbWVWYWx1ZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXJpZXNIYXZlU2FtZVZhbHVlcyhpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy53Lmdsb2JhbHMuc2VyaWVzW2luZGV4XS5ldmVyeShmdW5jdGlvbiAodmFsLCBpLCBhcnIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsID09PSBhcnJbMF07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRDYXRlZ29yeUxhYmVsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENhdGVnb3J5TGFiZWxzKGxhYmVscykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGNhdExhYmVscyA9IGxhYmVscy5zbGljZSgpO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICBjYXRMYWJlbHMgPSBsYWJlbHMubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gdy5jb25maWcueGF4aXMubGFiZWxzLmZvcm1hdHRlcihpIC0gdy5nbG9iYWxzLm1pblggKyAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYXRMYWJlbHM7XG4gICAgICB9IC8vIG1heFZhbHNJbkFycmF5SW5kZXggaXMgdGhlIGluZGV4IG9mIHNlcmllc1tdIHdoaWNoIGhhcyB0aGUgbGFyZ2VzdCBudW1iZXIgb2YgaXRlbXNcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRMYXJnZXN0U2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFyZ2VzdFNlcmllcygpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHcuZ2xvYmFscy5tYXhWYWxzSW5BcnJheUluZGV4ID0gdy5nbG9iYWxzLnNlcmllcy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gYS5sZW5ndGg7XG4gICAgICAgIH0pLmluZGV4T2YoTWF0aC5tYXguYXBwbHkoTWF0aCwgdy5nbG9iYWxzLnNlcmllcy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gYS5sZW5ndGg7XG4gICAgICAgIH0pKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldExhcmdlc3RNYXJrZXJTaXplXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFyZ2VzdE1hcmtlclNpemUoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgc2l6ZSA9IDA7XG4gICAgICAgIHcuZ2xvYmFscy5tYXJrZXJzLnNpemUuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHNpemUgPSBNYXRoLm1heChzaXplLCBtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHcuZ2xvYmFscy5tYXJrZXJzLmxhcmdlc3RTaXplID0gc2l6ZTtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBDb3JlXG4gICAgICAgKiByZXR1cm5zIHRoZSBzdW0gb2YgYWxsIHZhbHVlcyBpbiBhIHNlcmllc1xuICAgICAgICogRWcuIHcuZ2xvYmFscy5zZXJpZXMgPSBbWzMyLDMzLDQzLDEyXSwgWzIsMyw1LDFdXVxuICAgICAgICogIEByZXR1cm4gWzEyMCwgMTFdXG4gICAgICAgKiovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0U2VyaWVzVG90YWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VyaWVzVG90YWxzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdy5nbG9iYWxzLnNlcmllc1RvdGFscyA9IHcuZ2xvYmFscy5zZXJpZXMubWFwKGZ1bmN0aW9uIChzZXIsIGluZGV4KSB7XG4gICAgICAgICAgdmFyIHRvdGFsID0gMDtcblxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlcikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgIHRvdGFsICs9IHNlcltqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZm9yIHBpZS9kb251dHMvZ2F1Z2VzXG4gICAgICAgICAgICB0b3RhbCArPSBzZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0U2VyaWVzVG90YWxzWFJhbmdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VyaWVzVG90YWxzWFJhbmdlKG1pblgsIG1heFgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBzZXJpZXNUb3RhbHNYUmFuZ2UgPSB3Lmdsb2JhbHMuc2VyaWVzLm1hcChmdW5jdGlvbiAoc2VyLCBpbmRleCkge1xuICAgICAgICAgIHZhciB0b3RhbCA9IDA7XG5cbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlci5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5zZXJpZXNYW2luZGV4XVtqXSA+IG1pblggJiYgdy5nbG9iYWxzLnNlcmllc1hbaW5kZXhdW2pdIDwgbWF4WCkge1xuICAgICAgICAgICAgICB0b3RhbCArPSBzZXJbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNlcmllc1RvdGFsc1hSYW5nZTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIENvcmVVdGlsc1xuICAgICAgICogcmV0dXJucyB0aGUgcGVyY2VudGFnZSB2YWx1ZSBvZiBhbGwgaW5kaXZpZHVhbCB2YWx1ZXMgd2hpY2ggY2FuIGJlIHVzZWQgaW4gYSAxMDAlIHN0YWNrZWQgc2VyaWVzXG4gICAgICAgKiBFZy4gdy5nbG9iYWxzLnNlcmllcyA9IFtbMzIsIDMzLCA0MywgMTJdLCBbMiwgMywgNSwgMV1dXG4gICAgICAgKiAgQHJldHVybiBbWzk0LjExLCA5MS42NiwgODkuNTgsIDkyLjMwXSwgWzUuODgsIDguMzMsIDEwLjQxLCA3LjddXVxuICAgICAgICoqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFBlcmNlbnRTZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQZXJjZW50U2VyaWVzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdy5nbG9iYWxzLnNlcmllc1BlcmNlbnQgPSB3Lmdsb2JhbHMuc2VyaWVzLm1hcChmdW5jdGlvbiAoc2VyLCBpbmRleCkge1xuICAgICAgICAgIHZhciBzZXJpZXNQZXJjZW50ID0gW107XG5cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZXIpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlci5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICB2YXIgdG90YWwgPSB3Lmdsb2JhbHMuc3RhY2tlZFNlcmllc1RvdGFsc1tqXTtcbiAgICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSAwO1xuXG4gICAgICAgICAgICAgIGlmICh0b3RhbCkge1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDAgKiBzZXJbal0gLyB0b3RhbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNlcmllc1BlcmNlbnQucHVzaChwZXJjZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF90b3RhbCA9IHcuZ2xvYmFscy5zZXJpZXNUb3RhbHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHZhbCkge1xuICAgICAgICAgICAgICByZXR1cm4gYWNjICsgdmFsO1xuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgIHZhciBfcGVyY2VudCA9IDEwMCAqIHNlciAvIF90b3RhbDtcblxuICAgICAgICAgICAgc2VyaWVzUGVyY2VudC5wdXNoKF9wZXJjZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc2VyaWVzUGVyY2VudDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldENhbGN1bGF0ZWRSYXRpb3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDYWxjdWxhdGVkUmF0aW9zKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIHlSYXRpbyA9IFtdO1xuICAgICAgICB2YXIgaW52ZXJ0ZWRZUmF0aW8gPSAwO1xuICAgICAgICB2YXIgeFJhdGlvID0gMDtcbiAgICAgICAgdmFyIGluaXRpYWxYUmF0aW8gPSAwO1xuICAgICAgICB2YXIgaW52ZXJ0ZWRYUmF0aW8gPSAwO1xuICAgICAgICB2YXIgelJhdGlvID0gMDtcbiAgICAgICAgdmFyIGJhc2VMaW5lWSA9IFtdO1xuICAgICAgICB2YXIgYmFzZUxpbmVJbnZlcnRlZFkgPSAwLjE7XG4gICAgICAgIHZhciBiYXNlTGluZVggPSAwO1xuICAgICAgICBnbC55UmFuZ2UgPSBbXTtcblxuICAgICAgICBpZiAoZ2wuaXNNdWx0aXBsZVlBeGlzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbC5taW5ZQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBnbC55UmFuZ2UucHVzaChNYXRoLmFicyhnbC5taW5ZQXJyW2ldIC0gZ2wubWF4WUFycltpXSkpO1xuICAgICAgICAgICAgYmFzZUxpbmVZLnB1c2goMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdsLnlSYW5nZS5wdXNoKE1hdGguYWJzKGdsLm1pblkgLSBnbC5tYXhZKSk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC54UmFuZ2UgPSBNYXRoLmFicyhnbC5tYXhYIC0gZ2wubWluWCk7XG4gICAgICAgIGdsLnpSYW5nZSA9IE1hdGguYWJzKGdsLm1heFogLSBnbC5taW5aKTsgLy8gbXVsdGlwbGUgeSBheGlzXG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGdsLnlSYW5nZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICB5UmF0aW8ucHVzaChnbC55UmFuZ2VbX2ldIC8gZ2wuZ3JpZEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB4UmF0aW8gPSBnbC54UmFuZ2UgLyBnbC5ncmlkV2lkdGg7XG4gICAgICAgIGluaXRpYWxYUmF0aW8gPSBNYXRoLmFicyhnbC5pbml0aWFsTWF4WCAtIGdsLmluaXRpYWxNaW5YKSAvIGdsLmdyaWRXaWR0aDtcbiAgICAgICAgaW52ZXJ0ZWRZUmF0aW8gPSBnbC55UmFuZ2UgLyBnbC5ncmlkV2lkdGg7XG4gICAgICAgIGludmVydGVkWFJhdGlvID0gZ2wueFJhbmdlIC8gZ2wuZ3JpZEhlaWdodDtcbiAgICAgICAgelJhdGlvID0gZ2wuelJhbmdlIC8gZ2wuZ3JpZEhlaWdodCAqIDE2O1xuXG4gICAgICAgIGlmICghelJhdGlvKSB7XG4gICAgICAgICAgelJhdGlvID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnbC5taW5ZICE9PSBOdW1iZXIuTUlOX1ZBTFVFICYmIE1hdGguYWJzKGdsLm1pblkpICE9PSAwKSB7XG4gICAgICAgICAgLy8gTmVnYXRpdmUgbnVtYmVycyBwcmVzZW50IGluIHNlcmllc1xuICAgICAgICAgIGdsLmhhc05lZ3MgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsLmlzTXVsdGlwbGVZQXhpcykge1xuICAgICAgICAgIGJhc2VMaW5lWSA9IFtdOyAvLyBiYXNlbGluZSB2YXJpYWJsZXMgaXMgdGhlIDAgb2YgdGhlIHlheGlzIHdoaWNoIHdpbGwgYmUgbmVlZGVkIHdoZW4gdGhlcmUgYXJlIG5lZ2F0aXZlc1xuXG4gICAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgeVJhdGlvLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICAgIGJhc2VMaW5lWS5wdXNoKC1nbC5taW5ZQXJyW19pMl0gLyB5UmF0aW9bX2kyXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2VMaW5lWS5wdXNoKC1nbC5taW5ZIC8geVJhdGlvWzBdKTtcblxuICAgICAgICAgIGlmIChnbC5taW5ZICE9PSBOdW1iZXIuTUlOX1ZBTFVFICYmIE1hdGguYWJzKGdsLm1pblkpICE9PSAwKSB7XG4gICAgICAgICAgICBiYXNlTGluZUludmVydGVkWSA9IC1nbC5taW5ZIC8gaW52ZXJ0ZWRZUmF0aW87IC8vIHRoaXMgaXMgZm9yIGJhciBjaGFydFxuXG4gICAgICAgICAgICBiYXNlTGluZVggPSBnbC5taW5YIC8geFJhdGlvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeVJhdGlvOiB5UmF0aW8sXG4gICAgICAgICAgaW52ZXJ0ZWRZUmF0aW86IGludmVydGVkWVJhdGlvLFxuICAgICAgICAgIHpSYXRpbzogelJhdGlvLFxuICAgICAgICAgIHhSYXRpbzogeFJhdGlvLFxuICAgICAgICAgIGluaXRpYWxYUmF0aW86IGluaXRpYWxYUmF0aW8sXG4gICAgICAgICAgaW52ZXJ0ZWRYUmF0aW86IGludmVydGVkWFJhdGlvLFxuICAgICAgICAgIGJhc2VMaW5lSW52ZXJ0ZWRZOiBiYXNlTGluZUludmVydGVkWSxcbiAgICAgICAgICBiYXNlTGluZVk6IGJhc2VMaW5lWSxcbiAgICAgICAgICBiYXNlTGluZVg6IGJhc2VMaW5lWFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRMb2dTZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMb2dTZXJpZXMoc2VyaWVzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB3Lmdsb2JhbHMuc2VyaWVzTG9nID0gc2VyaWVzLm1hcChmdW5jdGlvbiAocywgaSkge1xuICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tpXSAmJiB3LmNvbmZpZy55YXhpc1tpXS5sb2dhcml0aG1pYykge1xuICAgICAgICAgICAgcmV0dXJuIHMubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgIGlmIChkID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgdmFyIGxvZ1ZhbCA9IChNYXRoLmxvZyhkKSAtIE1hdGgubG9nKHcuZ2xvYmFscy5taW5ZQXJyW2ldKSkgLyAoTWF0aC5sb2cody5nbG9iYWxzLm1heFlBcnJbaV0pIC0gTWF0aC5sb2cody5nbG9iYWxzLm1pbllBcnJbaV0pKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGxvZ1ZhbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdy5nbG9iYWxzLmludmFsaWRMb2dTY2FsZSA/IHNlcmllcyA6IHcuZ2xvYmFscy5zZXJpZXNMb2c7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldExvZ1lSYXRpb3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMb2dZUmF0aW9zKHlSYXRpbykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgZ2wueUxvZ1JhdGlvID0geVJhdGlvLnNsaWNlKCk7XG4gICAgICAgIGdsLmxvZ1lSYW5nZSA9IGdsLnlSYW5nZS5tYXAoZnVuY3Rpb24gKHlSYW5nZSwgaSkge1xuICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tpXSAmJiBfdGhpcy53LmNvbmZpZy55YXhpc1tpXS5sb2dhcml0aG1pYykge1xuICAgICAgICAgICAgdmFyIG1heFkgPSAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgICAgIHZhciBtaW5ZID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IDE7XG4gICAgICAgICAgICBnbC5zZXJpZXNMb2cuZm9yRWFjaChmdW5jdGlvbiAocywgc2kpIHtcbiAgICAgICAgICAgICAgcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHcuY29uZmlnLnlheGlzW3NpXSAmJiB3LmNvbmZpZy55YXhpc1tzaV0ubG9nYXJpdGhtaWMpIHtcbiAgICAgICAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heCh2LCBtYXhZKTtcbiAgICAgICAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbih2LCBtaW5ZKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByYW5nZSA9IE1hdGgucG93KGdsLnlSYW5nZVtpXSwgTWF0aC5hYnMobWluWSAtIG1heFkpIC8gZ2wueVJhbmdlW2ldKTtcbiAgICAgICAgICAgIGdsLnlMb2dSYXRpb1tpXSA9IHJhbmdlIC8gZ2wuZ3JpZEhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ2wuaW52YWxpZExvZ1NjYWxlID8geVJhdGlvLnNsaWNlKCkgOiBnbC55TG9nUmF0aW87XG4gICAgICB9IC8vIFNvbWUgY29uZmlnIG9iamVjdHMgY2FuIGJlIGFycmF5IC0gYW5kIHdlIG5lZWQgdG8gZXh0ZW5kIHRoZW0gY29ycmVjdGx5XG5cbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJjaGVja0NvbWJvU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tDb21ib1NlcmllcyhzZXJpZXMpIHtcbiAgICAgICAgdmFyIGNvbWJvQ2hhcnRzID0gZmFsc2U7XG4gICAgICAgIHZhciBjb21ib0JhckNvdW50ID0gMDsgLy8gaWYgdXNlciBzcGVjaWZpZWQgYSB0eXBlIGluIHNlcmllcyB0b28sIHR1cm4gb24gY29tYm9DaGFydHMgZmxhZ1xuXG4gICAgICAgIGlmIChzZXJpZXMubGVuZ3RoICYmIHR5cGVvZiBzZXJpZXNbMF0udHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb21ib0NoYXJ0cyA9IHRydWU7XG4gICAgICAgICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIGlmIChzLnR5cGUgPT09ICdiYXInIHx8IHMudHlwZSA9PT0gJ2NvbHVtbicgfHwgcy50eXBlID09PSAnY2FuZGxlc3RpY2snKSB7XG4gICAgICAgICAgICAgIGNvbWJvQmFyQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tYm9CYXJDb3VudDogY29tYm9CYXJDb3VudCxcbiAgICAgICAgICBjb21ib0NoYXJ0czogY29tYm9DaGFydHNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZXh0ZW5kQXJyYXlQcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZEFycmF5UHJvcHMoY29uZmlnSW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMueWF4aXMpIHtcbiAgICAgICAgICBvcHRpb25zID0gY29uZmlnSW5zdGFuY2UuZXh0ZW5kWUF4aXMob3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hbm5vdGF0aW9ucykge1xuICAgICAgICAgIGlmIChvcHRpb25zLmFubm90YXRpb25zLnlheGlzKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gY29uZmlnSW5zdGFuY2UuZXh0ZW5kWUF4aXNBbm5vdGF0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5hbm5vdGF0aW9ucy54YXhpcykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IGNvbmZpZ0luc3RhbmNlLmV4dGVuZFhBeGlzQW5ub3RhdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYW5ub3RhdGlvbnMucG9pbnRzKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gY29uZmlnSW5zdGFuY2UuZXh0ZW5kUG9pbnRBbm5vdGF0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29yZVV0aWxzO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgRmlsbCBDbGFzcyBmb3Igc2V0dGluZyBmaWxsIG9wdGlvbnMgb2YgdGhlIHBhdGhzLlxuICAgKlxuICAgKiBAbW9kdWxlIEZpbGxcbiAgICoqL1xuXG4gIHZhciBGaWxsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaWxsKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGwpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdGhpcy5vcHRzID0gbnVsbDtcbiAgICAgIHRoaXMuc2VyaWVzSW5kZXggPSAwO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhGaWxsLCBbe1xuICAgICAga2V5OiBcImNsaXBwZWRJbWdBcmVhXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xpcHBlZEltZ0FyZWEocGFyYW1zKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgY25mID0gdy5jb25maWc7XG4gICAgICAgIHZhciBzdmdXID0gcGFyc2VJbnQody5nbG9iYWxzLmdyaWRXaWR0aCwgMTApO1xuICAgICAgICB2YXIgc3ZnSCA9IHBhcnNlSW50KHcuZ2xvYmFscy5ncmlkSGVpZ2h0LCAxMCk7XG4gICAgICAgIHZhciBzaXplID0gc3ZnVyA+IHN2Z0ggPyBzdmdXIDogc3ZnSDtcbiAgICAgICAgdmFyIGZpbGxJbWcgPSBwYXJhbXMuaW1hZ2U7XG4gICAgICAgIHZhciBpbWdXaWR0aCA9IDA7XG4gICAgICAgIHZhciBpbWdIZWlnaHQgPSAwO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLndpZHRoID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGFyYW1zLmhlaWdodCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAoY25mLmZpbGwuaW1hZ2Uud2lkdGggIT09IHVuZGVmaW5lZCAmJiBjbmYuZmlsbC5pbWFnZS5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW1nV2lkdGggPSBjbmYuZmlsbC5pbWFnZS53aWR0aCArIDE7XG4gICAgICAgICAgICBpbWdIZWlnaHQgPSBjbmYuZmlsbC5pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGltZ1dpZHRoID0gc2l6ZSArIDE7XG4gICAgICAgICAgICBpbWdIZWlnaHQgPSBzaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbWdXaWR0aCA9IHBhcmFtcy53aWR0aDtcbiAgICAgICAgICBpbWdIZWlnaHQgPSBwYXJhbXMuaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsUGF0dGVybiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh3Lmdsb2JhbHMuU1ZHTlMsICdwYXR0ZXJuJyk7XG4gICAgICAgIEdyYXBoaWNzLnNldEF0dHJzKGVsUGF0dGVybiwge1xuICAgICAgICAgIGlkOiBwYXJhbXMucGF0dGVybklELFxuICAgICAgICAgIHBhdHRlcm5Vbml0czogcGFyYW1zLnBhdHRlcm5Vbml0cyA/IHBhcmFtcy5wYXR0ZXJuVW5pdHMgOiAndXNlclNwYWNlT25Vc2UnLFxuICAgICAgICAgIHdpZHRoOiBpbWdXaWR0aCArICdweCcsXG4gICAgICAgICAgaGVpZ2h0OiBpbWdIZWlnaHQgKyAncHgnXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZWxJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh3Lmdsb2JhbHMuU1ZHTlMsICdpbWFnZScpO1xuICAgICAgICBlbFBhdHRlcm4uYXBwZW5kQ2hpbGQoZWxJbWFnZSk7XG4gICAgICAgIGVsSW1hZ2Uuc2V0QXR0cmlidXRlTlMod2luZG93LlNWRy54bGluaywgJ2hyZWYnLCBmaWxsSW1nKTtcbiAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnMoZWxJbWFnZSwge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAnbm9uZScsXG4gICAgICAgICAgd2lkdGg6IGltZ1dpZHRoICsgJ3B4JyxcbiAgICAgICAgICBoZWlnaHQ6IGltZ0hlaWdodCArICdweCdcbiAgICAgICAgfSk7XG4gICAgICAgIGVsSW1hZ2Uuc3R5bGUub3BhY2l0eSA9IHBhcmFtcy5vcGFjaXR5O1xuICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsRGVmcy5ub2RlLmFwcGVuZENoaWxkKGVsUGF0dGVybik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFNlcmllc0luZGV4XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VyaWVzSW5kZXgob3B0cykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcblxuICAgICAgICBpZiAoKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdiYXInIHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdyYW5nZUJhcicpICYmIHcuY29uZmlnLnBsb3RPcHRpb25zLmJhci5kaXN0cmlidXRlZCB8fCB3LmNvbmZpZy5jaGFydC50eXBlID09PSAnaGVhdG1hcCcpIHtcbiAgICAgICAgICB0aGlzLnNlcmllc0luZGV4ID0gb3B0cy5zZXJpZXNOdW1iZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXJpZXNJbmRleCA9IG9wdHMuc2VyaWVzTnVtYmVyICUgdy5nbG9iYWxzLnNlcmllcy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zZXJpZXNJbmRleDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZmlsbFBhdGhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsUGF0aChvcHRzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB2YXIgY25mID0gdGhpcy53LmNvbmZpZztcbiAgICAgICAgdmFyIHBhdGhGaWxsO1xuICAgICAgICB2YXIgcGF0dGVybkZpbGwsIGdyYWRpZW50RmlsbDtcbiAgICAgICAgdGhpcy5zZXJpZXNJbmRleCA9IHRoaXMuZ2V0U2VyaWVzSW5kZXgob3B0cyk7XG4gICAgICAgIHZhciBmaWxsQ29sb3JzID0gdGhpcy5nZXRGaWxsQ29sb3JzKCk7XG4gICAgICAgIHZhciBmaWxsQ29sb3IgPSBmaWxsQ29sb3JzW3RoaXMuc2VyaWVzSW5kZXhdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZmlsbENvbG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZmlsbENvbG9yID0gZmlsbENvbG9yKHtcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiB0aGlzLnNlcmllc0luZGV4LFxuICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IG9wdHMuZGF0YVBvaW50SW5kZXgsXG4gICAgICAgICAgICB2YWx1ZTogb3B0cy52YWx1ZSxcbiAgICAgICAgICAgIHc6IHdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaWxsVHlwZSA9IHRoaXMuZ2V0RmlsbFR5cGUodGhpcy5zZXJpZXNJbmRleCk7XG4gICAgICAgIHZhciBmaWxsT3BhY2l0eSA9IEFycmF5LmlzQXJyYXkoY25mLmZpbGwub3BhY2l0eSkgPyBjbmYuZmlsbC5vcGFjaXR5W3RoaXMuc2VyaWVzSW5kZXhdIDogY25mLmZpbGwub3BhY2l0eTtcbiAgICAgICAgdmFyIGRlZmF1bHRDb2xvciA9IGZpbGxDb2xvcjtcblxuICAgICAgICBpZiAob3B0cy5jb2xvcikge1xuICAgICAgICAgIGZpbGxDb2xvciA9IG9wdHMuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsbENvbG9yLmluZGV4T2YoJ3JnYicpID09PSAtMSkge1xuICAgICAgICAgIGRlZmF1bHRDb2xvciA9IFV0aWxzLmhleFRvUmdiYShmaWxsQ29sb3IsIGZpbGxPcGFjaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmlsbENvbG9yLmluZGV4T2YoJ3JnYmEnKSA+IC0xKSB7XG4gICAgICAgICAgICBmaWxsT3BhY2l0eSA9IDAgKyAnLicgKyBVdGlscy5nZXRPcGFjaXR5RnJvbVJHQkEoZmlsbENvbG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0cy5vcGFjaXR5KSBmaWxsT3BhY2l0eSA9IG9wdHMub3BhY2l0eTtcblxuICAgICAgICBpZiAoZmlsbFR5cGUgPT09ICdwYXR0ZXJuJykge1xuICAgICAgICAgIHBhdHRlcm5GaWxsID0gdGhpcy5oYW5kbGVQYXR0ZXJuRmlsbChwYXR0ZXJuRmlsbCwgZmlsbENvbG9yLCBmaWxsT3BhY2l0eSwgZGVmYXVsdENvbG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxsVHlwZSA9PT0gJ2dyYWRpZW50Jykge1xuICAgICAgICAgIGdyYWRpZW50RmlsbCA9IHRoaXMuaGFuZGxlR3JhZGllbnRGaWxsKGdyYWRpZW50RmlsbCwgZmlsbENvbG9yLCBmaWxsT3BhY2l0eSwgdGhpcy5zZXJpZXNJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsbFR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgICB2YXIgaW1nU3JjID0gY25mLmZpbGwuaW1hZ2Uuc3JjO1xuICAgICAgICAgIHZhciBwYXR0ZXJuSUQgPSBvcHRzLnBhdHRlcm5JRCA/IG9wdHMucGF0dGVybklEIDogJyc7XG4gICAgICAgICAgdGhpcy5jbGlwcGVkSW1nQXJlYSh7XG4gICAgICAgICAgICBvcGFjaXR5OiBmaWxsT3BhY2l0eSxcbiAgICAgICAgICAgIGltYWdlOiBBcnJheS5pc0FycmF5KGltZ1NyYykgPyBvcHRzLnNlcmllc051bWJlciA8IGltZ1NyYy5sZW5ndGggPyBpbWdTcmNbb3B0cy5zZXJpZXNOdW1iZXJdIDogaW1nU3JjWzBdIDogaW1nU3JjLFxuICAgICAgICAgICAgd2lkdGg6IG9wdHMud2lkdGggPyBvcHRzLndpZHRoIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaGVpZ2h0OiBvcHRzLmhlaWdodCA/IG9wdHMuaGVpZ2h0IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcGF0dGVyblVuaXRzOiBvcHRzLnBhdHRlcm5Vbml0cyxcbiAgICAgICAgICAgIHBhdHRlcm5JRDogXCJwYXR0ZXJuXCIuY29uY2F0KHcuZ2xvYmFscy5jdWlkKS5jb25jYXQob3B0cy5zZXJpZXNOdW1iZXIgKyAxKS5jb25jYXQocGF0dGVybklEKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBhdGhGaWxsID0gXCJ1cmwoI3BhdHRlcm5cIi5jb25jYXQody5nbG9iYWxzLmN1aWQpLmNvbmNhdChvcHRzLnNlcmllc051bWJlciArIDEpLmNvbmNhdChwYXR0ZXJuSUQsIFwiKVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxsVHlwZSA9PT0gJ2dyYWRpZW50Jykge1xuICAgICAgICAgIHBhdGhGaWxsID0gZ3JhZGllbnRGaWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGxUeXBlID09PSAncGF0dGVybicpIHtcbiAgICAgICAgICBwYXRoRmlsbCA9IHBhdHRlcm5GaWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGhGaWxsID0gZGVmYXVsdENvbG9yO1xuICAgICAgICB9IC8vIG92ZXJyaWRlIHBhdHRlcm4vZ3JhZGllbnQgaWYgb3B0cy5zb2xpZCBpcyB0cnVlXG5cblxuICAgICAgICBpZiAob3B0cy5zb2xpZCkge1xuICAgICAgICAgIHBhdGhGaWxsID0gZGVmYXVsdENvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhdGhGaWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRGaWxsVHlwZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbGxUeXBlKHNlcmllc0luZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHcuY29uZmlnLmZpbGwudHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gdy5jb25maWcuZmlsbC50eXBlW3Nlcmllc0luZGV4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdy5jb25maWcuZmlsbC50eXBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEZpbGxDb2xvcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWxsQ29sb3JzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGNuZiA9IHcuY29uZmlnO1xuICAgICAgICB2YXIgb3B0cyA9IHRoaXMub3B0cztcbiAgICAgICAgdmFyIGZpbGxDb2xvcnMgPSBbXTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLmNvbWJvQ2hhcnRzKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLnNlcmllc1t0aGlzLnNlcmllc0luZGV4XS50eXBlID09PSAnbGluZScpIHtcbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuc3Ryb2tlLmNvbG9ycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgIGZpbGxDb2xvcnMgPSB3Lmdsb2JhbHMuc3Ryb2tlLmNvbG9ycztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZpbGxDb2xvcnMucHVzaCh3Lmdsb2JhbHMuc3Ryb2tlLmNvbG9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuZmlsbC5jb2xvcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICBmaWxsQ29sb3JzID0gdy5nbG9iYWxzLmZpbGwuY29sb3JzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmlsbENvbG9ycy5wdXNoKHcuZ2xvYmFscy5maWxsLmNvbG9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjbmYuY2hhcnQudHlwZSA9PT0gJ2xpbmUnKSB7XG4gICAgICAgICAgICBpZiAody5nbG9iYWxzLnN0cm9rZS5jb2xvcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICBmaWxsQ29sb3JzID0gdy5nbG9iYWxzLnN0cm9rZS5jb2xvcnM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmaWxsQ29sb3JzLnB1c2gody5nbG9iYWxzLnN0cm9rZS5jb2xvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAody5nbG9iYWxzLmZpbGwuY29sb3JzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgZmlsbENvbG9ycyA9IHcuZ2xvYmFscy5maWxsLmNvbG9ycztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZpbGxDb2xvcnMucHVzaCh3Lmdsb2JhbHMuZmlsbC5jb2xvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBjb2xvcnMgcGFzc2VkIGluIGFyZ3VtZW50c1xuXG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmZpbGxDb2xvcnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZmlsbENvbG9ycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKG9wdHMuZmlsbENvbG9ycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBmaWxsQ29sb3JzID0gb3B0cy5maWxsQ29sb3JzLnNsaWNlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbGxDb2xvcnMucHVzaChvcHRzLmZpbGxDb2xvcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWxsQ29sb3JzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVQYXR0ZXJuRmlsbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVBhdHRlcm5GaWxsKHBhdHRlcm5GaWxsLCBmaWxsQ29sb3IsIGZpbGxPcGFjaXR5LCBkZWZhdWx0Q29sb3IpIHtcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIHZhciBvcHRzID0gdGhpcy5vcHRzO1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgcGF0dGVyblN0cm9rZVdpZHRoID0gY25mLmZpbGwucGF0dGVybi5zdHJva2VXaWR0aCA9PT0gdW5kZWZpbmVkID8gQXJyYXkuaXNBcnJheShjbmYuc3Ryb2tlLndpZHRoKSA/IGNuZi5zdHJva2Uud2lkdGhbdGhpcy5zZXJpZXNJbmRleF0gOiBjbmYuc3Ryb2tlLndpZHRoIDogQXJyYXkuaXNBcnJheShjbmYuZmlsbC5wYXR0ZXJuLnN0cm9rZVdpZHRoKSA/IGNuZi5maWxsLnBhdHRlcm4uc3Ryb2tlV2lkdGhbdGhpcy5zZXJpZXNJbmRleF0gOiBjbmYuZmlsbC5wYXR0ZXJuLnN0cm9rZVdpZHRoO1xuICAgICAgICB2YXIgcGF0dGVybkxpbmVDb2xvciA9IGZpbGxDb2xvcjtcblxuICAgICAgICBpZiAoY25mLmZpbGwucGF0dGVybi5zdHlsZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjbmYuZmlsbC5wYXR0ZXJuLnN0eWxlW29wdHMuc2VyaWVzTnVtYmVyXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhciBwZiA9IGdyYXBoaWNzLmRyYXdQYXR0ZXJuKGNuZi5maWxsLnBhdHRlcm4uc3R5bGVbb3B0cy5zZXJpZXNOdW1iZXJdLCBjbmYuZmlsbC5wYXR0ZXJuLndpZHRoLCBjbmYuZmlsbC5wYXR0ZXJuLmhlaWdodCwgcGF0dGVybkxpbmVDb2xvciwgcGF0dGVyblN0cm9rZVdpZHRoLCBmaWxsT3BhY2l0eSk7XG4gICAgICAgICAgICBwYXR0ZXJuRmlsbCA9IHBmO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXR0ZXJuRmlsbCA9IGRlZmF1bHRDb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0dGVybkZpbGwgPSBncmFwaGljcy5kcmF3UGF0dGVybihjbmYuZmlsbC5wYXR0ZXJuLnN0eWxlLCBjbmYuZmlsbC5wYXR0ZXJuLndpZHRoLCBjbmYuZmlsbC5wYXR0ZXJuLmhlaWdodCwgcGF0dGVybkxpbmVDb2xvciwgcGF0dGVyblN0cm9rZVdpZHRoLCBmaWxsT3BhY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGF0dGVybkZpbGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZUdyYWRpZW50RmlsbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUdyYWRpZW50RmlsbChncmFkaWVudEZpbGwsIGZpbGxDb2xvciwgZmlsbE9wYWNpdHksIGkpIHtcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIHZhciBvcHRzID0gdGhpcy5vcHRzO1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgdXRpbHMgPSBuZXcgVXRpbHMoKTtcbiAgICAgICAgdmFyIHR5cGUgPSBjbmYuZmlsbC5ncmFkaWVudC50eXBlO1xuICAgICAgICB2YXIgZ3JhZGllbnRGcm9tLCBncmFkaWVudFRvO1xuICAgICAgICB2YXIgb3BhY2l0eUZyb20gPSBjbmYuZmlsbC5ncmFkaWVudC5vcGFjaXR5RnJvbSA9PT0gdW5kZWZpbmVkID8gZmlsbE9wYWNpdHkgOiBBcnJheS5pc0FycmF5KGNuZi5maWxsLmdyYWRpZW50Lm9wYWNpdHlGcm9tKSA/IGNuZi5maWxsLmdyYWRpZW50Lm9wYWNpdHlGcm9tW2ldIDogY25mLmZpbGwuZ3JhZGllbnQub3BhY2l0eUZyb207XG4gICAgICAgIHZhciBvcGFjaXR5VG8gPSBjbmYuZmlsbC5ncmFkaWVudC5vcGFjaXR5VG8gPT09IHVuZGVmaW5lZCA/IGZpbGxPcGFjaXR5IDogQXJyYXkuaXNBcnJheShjbmYuZmlsbC5ncmFkaWVudC5vcGFjaXR5VG8pID8gY25mLmZpbGwuZ3JhZGllbnQub3BhY2l0eVRvW2ldIDogY25mLmZpbGwuZ3JhZGllbnQub3BhY2l0eVRvO1xuICAgICAgICBncmFkaWVudEZyb20gPSBmaWxsQ29sb3I7XG5cbiAgICAgICAgaWYgKGNuZi5maWxsLmdyYWRpZW50LmdyYWRpZW50VG9Db2xvcnMgPT09IHVuZGVmaW5lZCB8fCBjbmYuZmlsbC5ncmFkaWVudC5ncmFkaWVudFRvQ29sb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmIChjbmYuZmlsbC5ncmFkaWVudC5zaGFkZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgICBncmFkaWVudFRvID0gdXRpbHMuc2hhZGVDb2xvcihwYXJzZUZsb2F0KGNuZi5maWxsLmdyYWRpZW50LnNoYWRlSW50ZW5zaXR5KSAqIC0xLCBmaWxsQ29sb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncmFkaWVudFRvID0gdXRpbHMuc2hhZGVDb2xvcihwYXJzZUZsb2F0KGNuZi5maWxsLmdyYWRpZW50LnNoYWRlSW50ZW5zaXR5KSwgZmlsbENvbG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ3JhZGllbnRUbyA9IGNuZi5maWxsLmdyYWRpZW50LmdyYWRpZW50VG9Db2xvcnNbb3B0cy5zZXJpZXNOdW1iZXJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNuZi5maWxsLmdyYWRpZW50LmludmVyc2VDb2xvcnMpIHtcbiAgICAgICAgICB2YXIgdCA9IGdyYWRpZW50RnJvbTtcbiAgICAgICAgICBncmFkaWVudEZyb20gPSBncmFkaWVudFRvO1xuICAgICAgICAgIGdyYWRpZW50VG8gPSB0O1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JhZGllbnRGaWxsID0gZ3JhcGhpY3MuZHJhd0dyYWRpZW50KHR5cGUsIGdyYWRpZW50RnJvbSwgZ3JhZGllbnRUbywgb3BhY2l0eUZyb20sIG9wYWNpdHlUbywgb3B0cy5zaXplLCBjbmYuZmlsbC5ncmFkaWVudC5zdG9wcywgY25mLmZpbGwuZ3JhZGllbnQuY29sb3JTdG9wcywgaSk7XG4gICAgICAgIHJldHVybiBncmFkaWVudEZpbGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEZpbGw7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBNYXJrZXJzIENsYXNzIGZvciBkcmF3aW5nIHBvaW50cyBvbiB5IHZhbHVlcyBpbiBheGVzIGNoYXJ0cy5cbiAgICpcbiAgICogQG1vZHVsZSBNYXJrZXJzXG4gICAqKi9cblxuICB2YXIgTWFya2VycyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFya2VycyhjdHgsIG9wdHMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXJrZXJzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTWFya2VycywgW3tcbiAgICAgIGtleTogXCJzZXRHbG9iYWxNYXJrZXJTaXplXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0R2xvYmFsTWFya2VyU2l6ZSgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHcuZ2xvYmFscy5tYXJrZXJzLnNpemUgPSBBcnJheS5pc0FycmF5KHcuY29uZmlnLm1hcmtlcnMuc2l6ZSkgPyB3LmNvbmZpZy5tYXJrZXJzLnNpemUgOiBbdy5jb25maWcubWFya2Vycy5zaXplXTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLm1hcmtlcnMuc2l6ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5tYXJrZXJzLnNpemUubGVuZ3RoIDwgdy5nbG9iYWxzLnNlcmllcy5sZW5ndGggKyAxKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygdy5nbG9iYWxzLm1hcmtlcnMuc2l6ZVtpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3Lmdsb2JhbHMubWFya2Vycy5zaXplLnB1c2gody5nbG9iYWxzLm1hcmtlcnMuc2l6ZVswXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdy5nbG9iYWxzLm1hcmtlcnMuc2l6ZSA9IHcuY29uZmlnLnNlcmllcy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB3LmNvbmZpZy5tYXJrZXJzLnNpemU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGxvdENoYXJ0TWFya2Vyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsb3RDaGFydE1hcmtlcnMocG9pbnRzUG9zLCBzZXJpZXNJbmRleCwgaiwgcFNpemUpIHtcbiAgICAgICAgdmFyIGFsd2F5c0RyYXdNYXJrZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGkgPSBzZXJpZXNJbmRleDtcbiAgICAgICAgdmFyIHAgPSBwb2ludHNQb3M7XG4gICAgICAgIHZhciBlbFBvaW50c1dyYXAgPSBudWxsO1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgcG9pbnQ7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5tYXJrZXJzLnNpemVbc2VyaWVzSW5kZXhdID4gMCB8fCBhbHdheXNEcmF3TWFya2VyKSB7XG4gICAgICAgICAgZWxQb2ludHNXcmFwID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgICAgY2xhc3M6IGFsd2F5c0RyYXdNYXJrZXIgPyAnJyA6ICdhcGV4Y2hhcnRzLXNlcmllcy1tYXJrZXJzJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsUG9pbnRzV3JhcC5hdHRyKCdjbGlwLXBhdGgnLCBcInVybCgjZ3JpZFJlY3RNYXJrZXJNYXNrXCIuY29uY2F0KHcuZ2xvYmFscy5jdWlkLCBcIilcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHAueCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgZm9yICh2YXIgcSA9IDA7IHEgPCBwLngubGVuZ3RoOyBxKyspIHtcbiAgICAgICAgICAgIHZhciBkYXRhUG9pbnRJbmRleCA9IGo7IC8vIGEgc21hbGwgaGFjayBhcyB3ZSBoYXZlIDIgcG9pbnRzIGZvciB0aGUgZmlyc3QgdmFsIHRvIGNvbm5lY3QgaXRcblxuICAgICAgICAgICAgaWYgKGogPT09IDEgJiYgcSA9PT0gMCkgZGF0YVBvaW50SW5kZXggPSAwO1xuICAgICAgICAgICAgaWYgKGogPT09IDEgJiYgcSA9PT0gMSkgZGF0YVBvaW50SW5kZXggPSAxO1xuICAgICAgICAgICAgdmFyIFBvaW50Q2xhc3NlcyA9ICdhcGV4Y2hhcnRzLW1hcmtlcic7XG5cbiAgICAgICAgICAgIGlmICgody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2xpbmUnIHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdhcmVhJykgJiYgIXcuZ2xvYmFscy5jb21ib0NoYXJ0cyAmJiAhdy5jb25maWcudG9vbHRpcC5pbnRlcnNlY3QpIHtcbiAgICAgICAgICAgICAgUG9pbnRDbGFzc2VzICs9ICcgbm8tcG9pbnRlci1ldmVudHMnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2hvdWxkTWFya2VyRHJhdyA9IEFycmF5LmlzQXJyYXkody5jb25maWcubWFya2Vycy5zaXplKSA/IHcuZ2xvYmFscy5tYXJrZXJzLnNpemVbc2VyaWVzSW5kZXhdID4gMCA6IHcuY29uZmlnLm1hcmtlcnMuc2l6ZSA+IDA7XG5cbiAgICAgICAgICAgIGlmIChzaG91bGRNYXJrZXJEcmF3IHx8IGFsd2F5c0RyYXdNYXJrZXIpIHtcbiAgICAgICAgICAgICAgaWYgKFV0aWxzLmlzTnVtYmVyKHAueVtxXSkpIHtcbiAgICAgICAgICAgICAgICBQb2ludENsYXNzZXMgKz0gXCIgd1wiLmNvbmNhdChVdGlscy5yYW5kb21JZCgpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBQb2ludENsYXNzZXMgPSAnYXBleGNoYXJ0cy1udWxscG9pbnQnO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIG9wdHMgPSB0aGlzLmdldE1hcmtlckNvbmZpZyhQb2ludENsYXNzZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCk7XG5cbiAgICAgICAgICAgICAgaWYgKHcuY29uZmlnLnNlcmllc1tpXS5kYXRhW2pdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHcuY29uZmlnLnNlcmllc1tpXS5kYXRhW2pdLmZpbGxDb2xvcikge1xuICAgICAgICAgICAgICAgICAgb3B0cy5wb2ludEZpbGxDb2xvciA9IHcuY29uZmlnLnNlcmllc1tpXS5kYXRhW2pdLmZpbGxDb2xvcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAody5jb25maWcuc2VyaWVzW2ldLmRhdGFbal0uc3Ryb2tlQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgIG9wdHMucG9pbnRTdHJva2VDb2xvciA9IHcuY29uZmlnLnNlcmllc1tpXS5kYXRhW2pdLnN0cm9rZUNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChwU2l6ZSkge1xuICAgICAgICAgICAgICAgIG9wdHMucFNpemUgPSBwU2l6ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHBvaW50ID0gZ3JhcGhpY3MuZHJhd01hcmtlcihwLnhbcV0sIHAueVtxXSwgb3B0cyk7XG4gICAgICAgICAgICAgIHBvaW50LmF0dHIoJ3JlbCcsIGRhdGFQb2ludEluZGV4KTtcbiAgICAgICAgICAgICAgcG9pbnQuYXR0cignaicsIGRhdGFQb2ludEluZGV4KTtcbiAgICAgICAgICAgICAgcG9pbnQuYXR0cignaW5kZXgnLCBzZXJpZXNJbmRleCk7XG4gICAgICAgICAgICAgIHBvaW50Lm5vZGUuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW1hcmtlci1zaXplJywgb3B0cy5wU2l6ZSk7XG4gICAgICAgICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICAgICAgICBmaWx0ZXJzLnNldFNlbGVjdGlvbkZpbHRlcihwb2ludCwgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4KTtcbiAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudHMocG9pbnQpO1xuXG4gICAgICAgICAgICAgIGlmIChlbFBvaW50c1dyYXApIHtcbiAgICAgICAgICAgICAgICBlbFBvaW50c1dyYXAuYWRkKHBvaW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gZHluYW1pYyBhcnJheSBjcmVhdGlvbiAtIG11bHRpZGltZW5zaW9uYWxcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3Lmdsb2JhbHMucG9pbnRzQXJyYXlbc2VyaWVzSW5kZXhdID09PSAndW5kZWZpbmVkJykgdy5nbG9iYWxzLnBvaW50c0FycmF5W3Nlcmllc0luZGV4XSA9IFtdO1xuICAgICAgICAgICAgICB3Lmdsb2JhbHMucG9pbnRzQXJyYXlbc2VyaWVzSW5kZXhdLnB1c2goW3AueFtxXSwgcC55W3FdXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsUG9pbnRzV3JhcDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0TWFya2VyQ29uZmlnXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWFya2VyQ29uZmlnKGNzc0NsYXNzLCBzZXJpZXNJbmRleCkge1xuICAgICAgICB2YXIgZGF0YVBvaW50SW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgcFN0eWxlID0gdGhpcy5nZXRNYXJrZXJTdHlsZShzZXJpZXNJbmRleCk7XG4gICAgICAgIHZhciBwU2l6ZSA9IHcuZ2xvYmFscy5tYXJrZXJzLnNpemVbc2VyaWVzSW5kZXhdO1xuICAgICAgICB2YXIgbSA9IHcuY29uZmlnLm1hcmtlcnM7IC8vIGRpc2NyZXRlIG1hcmtlcnMgaXMgYW4gb3B0aW9uIHdoZXJlIHVzZXIgY2FuIHNwZWNpZnkgYSBwYXJ0aWN1bGFyIG1hcmtlciB3aXRoIGRpZmZlcmVudCBzaXplIGFuZCBjb2xvclxuXG4gICAgICAgIGlmIChkYXRhUG9pbnRJbmRleCAhPT0gbnVsbCAmJiBtLmRpc2NyZXRlLmxlbmd0aCkge1xuICAgICAgICAgIG0uZGlzY3JldGUubWFwKGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgICAgIGlmIChtYXJrZXIuc2VyaWVzSW5kZXggPT09IHNlcmllc0luZGV4ICYmIG1hcmtlci5kYXRhUG9pbnRJbmRleCA9PT0gZGF0YVBvaW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgcFN0eWxlLnBvaW50U3Ryb2tlQ29sb3IgPSBtYXJrZXIuc3Ryb2tlQ29sb3I7XG4gICAgICAgICAgICAgIHBTdHlsZS5wb2ludEZpbGxDb2xvciA9IG1hcmtlci5maWxsQ29sb3I7XG4gICAgICAgICAgICAgIHBTaXplID0gbWFya2VyLnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBTaXplOiBwU2l6ZSxcbiAgICAgICAgICBwUmFkaXVzOiBtLnJhZGl1cyxcbiAgICAgICAgICBwV2lkdGg6IG0uc3Ryb2tlV2lkdGggaW5zdGFuY2VvZiBBcnJheSA/IG0uc3Ryb2tlV2lkdGhbc2VyaWVzSW5kZXhdIDogbS5zdHJva2VXaWR0aCxcbiAgICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiBwU3R5bGUucG9pbnRTdHJva2VDb2xvcixcbiAgICAgICAgICBwb2ludEZpbGxDb2xvcjogcFN0eWxlLnBvaW50RmlsbENvbG9yLFxuICAgICAgICAgIHNoYXBlOiBtLnNoYXBlIGluc3RhbmNlb2YgQXJyYXkgPyBtLnNoYXBlW3Nlcmllc0luZGV4XSA6IG0uc2hhcGUsXG4gICAgICAgICAgY2xhc3M6IGNzc0NsYXNzLFxuICAgICAgICAgIHBvaW50U3Ryb2tlT3BhY2l0eTogbS5zdHJva2VPcGFjaXR5IGluc3RhbmNlb2YgQXJyYXkgPyBtLnN0cm9rZU9wYWNpdHlbc2VyaWVzSW5kZXhdIDogbS5zdHJva2VPcGFjaXR5LFxuICAgICAgICAgIHBvaW50U3Ryb2tlRGFzaEFycmF5OiBtLnN0cm9rZURhc2hBcnJheSBpbnN0YW5jZW9mIEFycmF5ID8gbS5zdHJva2VEYXNoQXJyYXlbc2VyaWVzSW5kZXhdIDogbS5zdHJva2VEYXNoQXJyYXksXG4gICAgICAgICAgcG9pbnRGaWxsT3BhY2l0eTogbS5maWxsT3BhY2l0eSBpbnN0YW5jZW9mIEFycmF5ID8gbS5maWxsT3BhY2l0eVtzZXJpZXNJbmRleF0gOiBtLmZpbGxPcGFjaXR5LFxuICAgICAgICAgIHNlcmllc0luZGV4OiBzZXJpZXNJbmRleFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRFdmVudHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFdmVudHMoY2lyY2xlKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICBjaXJjbGUubm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZ3JhcGhpY3MucGF0aE1vdXNlRW50ZXIuYmluZCh0aGlzLmN0eCwgY2lyY2xlKSk7XG4gICAgICAgIGNpcmNsZS5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBncmFwaGljcy5wYXRoTW91c2VMZWF2ZS5iaW5kKHRoaXMuY3R4LCBjaXJjbGUpKTtcbiAgICAgICAgY2lyY2xlLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZ3JhcGhpY3MucGF0aE1vdXNlRG93bi5iaW5kKHRoaXMuY3R4LCBjaXJjbGUpKTtcbiAgICAgICAgY2lyY2xlLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB3LmNvbmZpZy5tYXJrZXJzLm9uQ2xpY2spO1xuICAgICAgICBjaXJjbGUubm9kZS5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIHcuY29uZmlnLm1hcmtlcnMub25EYmxDbGljayk7XG4gICAgICAgIGNpcmNsZS5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBncmFwaGljcy5wYXRoTW91c2VEb3duLmJpbmQodGhpcy5jdHgsIGNpcmNsZSksIHtcbiAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRNYXJrZXJTdHlsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1hcmtlclN0eWxlKHNlcmllc0luZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgY29sb3JzID0gdy5nbG9iYWxzLm1hcmtlcnMuY29sb3JzO1xuICAgICAgICB2YXIgc3Ryb2tlQ29sb3JzID0gdy5jb25maWcubWFya2Vycy5zdHJva2VDb2xvciB8fCB3LmNvbmZpZy5tYXJrZXJzLnN0cm9rZUNvbG9ycztcbiAgICAgICAgdmFyIHBvaW50U3Ryb2tlQ29sb3IgPSBzdHJva2VDb2xvcnMgaW5zdGFuY2VvZiBBcnJheSA/IHN0cm9rZUNvbG9yc1tzZXJpZXNJbmRleF0gOiBzdHJva2VDb2xvcnM7XG4gICAgICAgIHZhciBwb2ludEZpbGxDb2xvciA9IGNvbG9ycyBpbnN0YW5jZW9mIEFycmF5ID8gY29sb3JzW3Nlcmllc0luZGV4XSA6IGNvbG9ycztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiBwb2ludFN0cm9rZUNvbG9yLFxuICAgICAgICAgIHBvaW50RmlsbENvbG9yOiBwb2ludEZpbGxDb2xvclxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNYXJrZXJzO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgU2NhdHRlciBDbGFzcy5cbiAgICogVGhpcyBDbGFzcyBhbHNvIGhhbmRsZXMgYnViYmxlcyBjaGFydCBhcyBjdXJyZW50bHkgdGhlcmUgaXMgbm8gbWFqb3IgZGlmZmVyZW5jZSBpbiBkcmF3aW5nIHRoZW0sXG4gICAqIEBtb2R1bGUgU2NhdHRlclxuICAgKiovXG5cbiAgdmFyIFNjYXR0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjYXR0ZXIoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2NhdHRlcik7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgICB0aGlzLmluaXRpYWxBbmltID0gdGhpcy53LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmVuYWJsZWQ7XG4gICAgICB0aGlzLmR5bmFtaWNBbmltID0gdGhpcy5pbml0aWFsQW5pbSAmJiB0aGlzLncuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5lbmFibGVkO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTY2F0dGVyLCBbe1xuICAgICAga2V5OiBcImRyYXdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3KGVsU2VyaWVzLCBqLCBvcHRzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgcmVhbEluZGV4ID0gb3B0cy5yZWFsSW5kZXg7XG4gICAgICAgIHZhciBwb2ludHNQb3MgPSBvcHRzLnBvaW50c1BvcztcbiAgICAgICAgdmFyIHpSYXRpbyA9IG9wdHMuelJhdGlvO1xuICAgICAgICB2YXIgZWxQb2ludHNNYWluID0gb3B0cy5lbFBhcmVudDtcbiAgICAgICAgdmFyIGVsUG9pbnRzV3JhcCA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogXCJhcGV4Y2hhcnRzLXNlcmllcy1tYXJrZXJzIGFwZXhjaGFydHMtc2VyaWVzLVwiLmNvbmNhdCh3LmNvbmZpZy5jaGFydC50eXBlKVxuICAgICAgICB9KTtcbiAgICAgICAgZWxQb2ludHNXcmFwLmF0dHIoJ2NsaXAtcGF0aCcsIFwidXJsKCNncmlkUmVjdE1hcmtlck1hc2tcIi5jb25jYXQody5nbG9iYWxzLmN1aWQsIFwiKVwiKSk7XG5cbiAgICAgICAgaWYgKHBvaW50c1Bvcy54IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICBmb3IgKHZhciBxID0gMDsgcSA8IHBvaW50c1Bvcy54Lmxlbmd0aDsgcSsrKSB7XG4gICAgICAgICAgICB2YXIgZGF0YVBvaW50SW5kZXggPSBqICsgMTtcbiAgICAgICAgICAgIHZhciBzaG91bGREcmF3ID0gdHJ1ZTsgLy8gYSBzbWFsbCBoYWNrIGFzIHdlIGhhdmUgMiBwb2ludHMgZm9yIHRoZSBmaXJzdCB2YWwgdG8gY29ubmVjdCBpdFxuXG4gICAgICAgICAgICBpZiAoaiA9PT0gMCAmJiBxID09PSAwKSBkYXRhUG9pbnRJbmRleCA9IDA7XG4gICAgICAgICAgICBpZiAoaiA9PT0gMCAmJiBxID09PSAxKSBkYXRhUG9pbnRJbmRleCA9IDE7XG4gICAgICAgICAgICB2YXIgcmFkaXVzID0gMDtcbiAgICAgICAgICAgIHZhciBmaW5pc2hSYWRpdXMgPSB3Lmdsb2JhbHMubWFya2Vycy5zaXplW3JlYWxJbmRleF07XG5cbiAgICAgICAgICAgIGlmICh6UmF0aW8gIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgIC8vIG1lYW5zIHdlIGhhdmUgYSBidWJibGVcbiAgICAgICAgICAgICAgZmluaXNoUmFkaXVzID0gdy5nbG9iYWxzLnNlcmllc1pbcmVhbEluZGV4XVtkYXRhUG9pbnRJbmRleF0gLyB6UmF0aW87XG4gICAgICAgICAgICAgIHZhciBidWJibGUgPSB3LmNvbmZpZy5wbG90T3B0aW9ucy5idWJibGU7XG5cbiAgICAgICAgICAgICAgaWYgKGJ1YmJsZS5taW5CdWJibGVSYWRpdXMgJiYgZmluaXNoUmFkaXVzIDwgYnViYmxlLm1pbkJ1YmJsZVJhZGl1cykge1xuICAgICAgICAgICAgICAgIGZpbmlzaFJhZGl1cyA9IGJ1YmJsZS5taW5CdWJibGVSYWRpdXM7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYnViYmxlLm1heEJ1YmJsZVJhZGl1cyAmJiBmaW5pc2hSYWRpdXMgPiBidWJibGUubWF4QnViYmxlUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgZmluaXNoUmFkaXVzID0gYnViYmxlLm1heEJ1YmJsZVJhZGl1cztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICByYWRpdXMgPSBmaW5pc2hSYWRpdXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB4ID0gcG9pbnRzUG9zLnhbcV07XG4gICAgICAgICAgICB2YXIgeSA9IHBvaW50c1Bvcy55W3FdO1xuICAgICAgICAgICAgcmFkaXVzID0gcmFkaXVzIHx8IDA7XG5cbiAgICAgICAgICAgIGlmICh5ID09PSBudWxsIHx8IHR5cGVvZiB3Lmdsb2JhbHMuc2VyaWVzW3JlYWxJbmRleF1bZGF0YVBvaW50SW5kZXhdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBzaG91bGREcmF3ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaG91bGREcmF3KSB7XG4gICAgICAgICAgICAgIHZhciBjaXJjbGUgPSB0aGlzLmRyYXdQb2ludCh4LCB5LCByYWRpdXMsIGZpbmlzaFJhZGl1cywgcmVhbEluZGV4LCBkYXRhUG9pbnRJbmRleCwgaik7XG4gICAgICAgICAgICAgIGVsUG9pbnRzV3JhcC5hZGQoY2lyY2xlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxQb2ludHNNYWluLmFkZChlbFBvaW50c1dyYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3UG9pbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3UG9pbnQoeCwgeSwgcmFkaXVzLCBmaW5pc2hSYWRpdXMsIHJlYWxJbmRleCwgZGF0YVBvaW50SW5kZXgsIGopIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBpID0gcmVhbEluZGV4O1xuICAgICAgICB2YXIgYW5pbSA9IG5ldyBBbmltYXRpb25zKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGZpbHRlcnMgPSBuZXcgRmlsdGVycyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBmaWxsID0gbmV3IEZpbGwodGhpcy5jdHgpO1xuICAgICAgICB2YXIgbWFya2VycyA9IG5ldyBNYXJrZXJzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIG1hcmtlckNvbmZpZyA9IG1hcmtlcnMuZ2V0TWFya2VyQ29uZmlnKCdhcGV4Y2hhcnRzLW1hcmtlcicsIGkpO1xuICAgICAgICB2YXIgcGF0aEZpbGxDaXJjbGUgPSBmaWxsLmZpbGxQYXRoKHtcbiAgICAgICAgICBzZXJpZXNOdW1iZXI6IHJlYWxJbmRleCxcbiAgICAgICAgICBkYXRhUG9pbnRJbmRleDogZGF0YVBvaW50SW5kZXgsXG4gICAgICAgICAgcGF0dGVyblVuaXRzOiAnb2JqZWN0Qm91bmRpbmdCb3gnLFxuICAgICAgICAgIHZhbHVlOiB3Lmdsb2JhbHMuc2VyaWVzW3JlYWxJbmRleF1bal1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjaXJjbGUgPSBncmFwaGljcy5kcmF3Q2lyY2xlKHJhZGl1cyk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnNlcmllc1tpXS5kYXRhW2RhdGFQb2ludEluZGV4XSkge1xuICAgICAgICAgIGlmICh3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtkYXRhUG9pbnRJbmRleF0uZmlsbENvbG9yKSB7XG4gICAgICAgICAgICBwYXRoRmlsbENpcmNsZSA9IHcuY29uZmlnLnNlcmllc1tpXS5kYXRhW2RhdGFQb2ludEluZGV4XS5maWxsQ29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2lyY2xlLmF0dHIoe1xuICAgICAgICAgIGN4OiB4LFxuICAgICAgICAgIGN5OiB5LFxuICAgICAgICAgIGZpbGw6IHBhdGhGaWxsQ2lyY2xlLFxuICAgICAgICAgIHN0cm9rZTogbWFya2VyQ29uZmlnLnBvaW50U3Ryb2tlQ29sb3IsXG4gICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IG1hcmtlckNvbmZpZy5wV2lkdGgsXG4gICAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiBtYXJrZXJDb25maWcucG9pbnRTdHJva2VEYXNoQXJyYXksXG4gICAgICAgICAgJ3N0cm9rZS1vcGFjaXR5JzogbWFya2VyQ29uZmlnLnBvaW50U3Ryb2tlT3BhY2l0eVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAody5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgdmFyIGRyb3BTaGFkb3cgPSB3LmNvbmZpZy5jaGFydC5kcm9wU2hhZG93O1xuICAgICAgICAgIGZpbHRlcnMuZHJvcFNoYWRvdyhjaXJjbGUsIGRyb3BTaGFkb3csIHJlYWxJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbml0aWFsQW5pbSAmJiAhdy5nbG9iYWxzLmRhdGFDaGFuZ2VkKSB7XG4gICAgICAgICAgdmFyIHNwZWVkID0gMTtcblxuICAgICAgICAgIGlmICghdy5nbG9iYWxzLnJlc2l6ZWQpIHtcbiAgICAgICAgICAgIHNwZWVkID0gdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5zcGVlZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhbmltLmFuaW1hdGVDaXJjbGVSYWRpdXMoY2lyY2xlLCAwLCBmaW5pc2hSYWRpdXMsIHNwZWVkLCB3Lmdsb2JhbHMuZWFzaW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGFuaW0uYW5pbWF0aW9uQ29tcGxldGVkKGNpcmNsZSk7XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5kYXRhQ2hhbmdlZCkge1xuICAgICAgICAgIGlmICh0aGlzLmR5bmFtaWNBbmltKSB7XG4gICAgICAgICAgICB2YXIgX3NwZWVkID0gdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5keW5hbWljQW5pbWF0aW9uLnNwZWVkO1xuICAgICAgICAgICAgdmFyIHByZXZYLCBwcmV2WSwgcHJldlI7XG4gICAgICAgICAgICB2YXIgcHJldlBhdGhKID0gbnVsbDtcbiAgICAgICAgICAgIHByZXZQYXRoSiA9IHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzW3JlYWxJbmRleF0gJiYgdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbcmVhbEluZGV4XVtqXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmV2UGF0aEogIT09ICd1bmRlZmluZWQnICYmIHByZXZQYXRoSiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBzZXJpZXMgY29udGFpbmluZyBsZXNzIGVsZW1lbnRzIHdpbGwgaWdub3JlIHRoZXNlIHZhbHVlcyBhbmQgcmV2ZXJ0IHRvIDBcbiAgICAgICAgICAgICAgcHJldlggPSBwcmV2UGF0aEoueDtcbiAgICAgICAgICAgICAgcHJldlkgPSBwcmV2UGF0aEoueTtcbiAgICAgICAgICAgICAgcHJldlIgPSB0eXBlb2YgcHJldlBhdGhKLnIgIT09ICd1bmRlZmluZWQnID8gcHJldlBhdGhKLnIgOiBmaW5pc2hSYWRpdXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGNzID0gMDsgY3MgPCB3Lmdsb2JhbHMuY29sbGFwc2VkU2VyaWVzLmxlbmd0aDsgY3MrKykge1xuICAgICAgICAgICAgICBpZiAody5nbG9iYWxzLmNvbGxhcHNlZFNlcmllc1tjc10uaW5kZXggPT09IHJlYWxJbmRleCkge1xuICAgICAgICAgICAgICAgIF9zcGVlZCA9IDE7XG4gICAgICAgICAgICAgICAgZmluaXNoUmFkaXVzID0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSBmaW5pc2hSYWRpdXMgPSAwO1xuICAgICAgICAgICAgYW5pbS5hbmltYXRlQ2lyY2xlKGNpcmNsZSwge1xuICAgICAgICAgICAgICBjeDogcHJldlgsXG4gICAgICAgICAgICAgIGN5OiBwcmV2WSxcbiAgICAgICAgICAgICAgcjogcHJldlJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgY3g6IHgsXG4gICAgICAgICAgICAgIGN5OiB5LFxuICAgICAgICAgICAgICByOiBmaW5pc2hSYWRpdXNcbiAgICAgICAgICAgIH0sIF9zcGVlZCwgdy5nbG9iYWxzLmVhc2luZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNpcmNsZS5hdHRyKHtcbiAgICAgICAgICAgICAgcjogZmluaXNoUmFkaXVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaXJjbGUuYXR0cih7XG4gICAgICAgICAgcmVsOiBkYXRhUG9pbnRJbmRleCxcbiAgICAgICAgICBqOiBkYXRhUG9pbnRJbmRleCxcbiAgICAgICAgICBpbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgICdkZWZhdWx0LW1hcmtlci1zaXplJzogZmluaXNoUmFkaXVzXG4gICAgICAgIH0pO1xuICAgICAgICBmaWx0ZXJzLnNldFNlbGVjdGlvbkZpbHRlcihjaXJjbGUsIHJlYWxJbmRleCwgZGF0YVBvaW50SW5kZXgpO1xuICAgICAgICBtYXJrZXJzLmFkZEV2ZW50cyhjaXJjbGUpO1xuICAgICAgICBjaXJjbGUubm9kZS5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLW1hcmtlcicpO1xuICAgICAgICByZXR1cm4gY2lyY2xlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjZW50ZXJUZXh0SW5CdWJibGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjZW50ZXJUZXh0SW5CdWJibGUoeSkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgeSA9IHkgKyBwYXJzZUludCh3LmNvbmZpZy5kYXRhTGFiZWxzLnN0eWxlLmZvbnRTaXplLCAxMCkgLyA0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2NhdHRlcjtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIERhdGFMYWJlbHMgQ2xhc3MgZm9yIGRyYXdpbmcgZGF0YUxhYmVscyBvbiBBeGVzIGJhc2VkIENoYXJ0cy5cbiAgICpcbiAgICogQG1vZHVsZSBEYXRhTGFiZWxzXG4gICAqKi9cblxuICB2YXIgRGF0YUxhYmVscyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGF0YUxhYmVscyhjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhTGFiZWxzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICB9IC8vIFdoZW4gdGhlcmUgYXJlIG1hbnkgZGF0YWxhYmVscyB0byBiZSBwcmludGVkLCBhbmQgc29tZSBvZiB0aGVtIG92ZXJsYXBzIGVhY2ggb3RoZXIgaW4gdGhlIHNhbWUgc2VyaWVzLCB0aGlzIG1ldGhvZCB3aWxsIHRha2UgY2FyZSBvZiB0aGF0XG4gICAgLy8gQWxzbywgd2hlbiBkYXRhbGFiZWxzIGV4Y2VlZHMgdGhlIGRyYXdhYmxlIGFyZWEgYW5kIGdldCBjbGlwcGVkIG9mZiwgd2UgbmVlZCB0byBhZGp1c3QgYW5kIG1vdmUgc29tZSBwaXhlbHMgdG8gbWFrZSB0aGVtIHZpc2libGUgYWdhaW5cblxuXG4gICAgX2NyZWF0ZUNsYXNzKERhdGFMYWJlbHMsIFt7XG4gICAgICBrZXk6IFwiZGF0YUxhYmVsc0NvcnJlY3Rpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkYXRhTGFiZWxzQ29ycmVjdGlvbih4LCB5LCB2YWwsIGksIGRhdGFQb2ludEluZGV4LCBhbHdheXNEcmF3RGF0YUxhYmVsLCBmb250U2l6ZSkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGRyYXduZXh0TGFiZWwgPSBmYWxzZTsgLy9cblxuICAgICAgICB2YXIgdGV4dFJlY3RzID0gZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKHZhbCwgZm9udFNpemUpO1xuICAgICAgICB2YXIgd2lkdGggPSB0ZXh0UmVjdHMud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSB0ZXh0UmVjdHMuaGVpZ2h0OyAvLyBmaXJzdCB2YWx1ZSBpbiBzZXJpZXMsIHNvIHB1c2ggYW4gZW1wdHkgYXJyYXlcblxuICAgICAgICBpZiAodHlwZW9mIHcuZ2xvYmFscy5kYXRhTGFiZWxzUmVjdHNbaV0gPT09ICd1bmRlZmluZWQnKSB3Lmdsb2JhbHMuZGF0YUxhYmVsc1JlY3RzW2ldID0gW107IC8vIHRoZW4gc3RhcnQgcHVzaGluZyBhY3R1YWwgcmVjdHMgaW4gdGhhdCBzdWItYXJyYXlcblxuICAgICAgICB3Lmdsb2JhbHMuZGF0YUxhYmVsc1JlY3RzW2ldLnB1c2goe1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeSxcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBsZW4gPSB3Lmdsb2JhbHMuZGF0YUxhYmVsc1JlY3RzW2ldLmxlbmd0aCAtIDI7XG4gICAgICAgIHZhciBsYXN0RHJhd25JbmRleCA9IHR5cGVvZiB3Lmdsb2JhbHMubGFzdERyYXduRGF0YUxhYmVsc0luZGV4ZXNbaV0gIT09ICd1bmRlZmluZWQnID8gdy5nbG9iYWxzLmxhc3REcmF3bkRhdGFMYWJlbHNJbmRleGVzW2ldW3cuZ2xvYmFscy5sYXN0RHJhd25EYXRhTGFiZWxzSW5kZXhlc1tpXS5sZW5ndGggLSAxXSA6IDA7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3Lmdsb2JhbHMuZGF0YUxhYmVsc1JlY3RzW2ldW2xlbl0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdmFyIGxhc3REYXRhTGFiZWxSZWN0ID0gdy5nbG9iYWxzLmRhdGFMYWJlbHNSZWN0c1tpXVtsYXN0RHJhd25JbmRleF07XG5cbiAgICAgICAgICBpZiAoIC8vIG5leHQgbGFiZWwgZm9yd2FyZCBhbmQgeCBub3QgaW50ZXJzZWN0aW5nXG4gICAgICAgICAgeCA+IGxhc3REYXRhTGFiZWxSZWN0LnggKyBsYXN0RGF0YUxhYmVsUmVjdC53aWR0aCArIDIgfHwgeSA+IGxhc3REYXRhTGFiZWxSZWN0LnkgKyBsYXN0RGF0YUxhYmVsUmVjdC5oZWlnaHQgKyAyIHx8IHggKyB3aWR0aCA8IGxhc3REYXRhTGFiZWxSZWN0LnggLy8gbmV4dCBsYWJlbCBpcyBnb2luZyB0byBiZSBkcmF3biBiYWNrd2FyZHNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgLy8gdGhlIDIgaW5kZXhlcyBkb24ndCBvdmVycmlkZSwgc28gT0sgdG8gZHJhdyBuZXh0IGxhYmVsXG4gICAgICAgICAgICAgIGRyYXduZXh0TGFiZWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGFQb2ludEluZGV4ID09PSAwIHx8IGFsd2F5c0RyYXdEYXRhTGFiZWwpIHtcbiAgICAgICAgICBkcmF3bmV4dExhYmVsID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5LFxuICAgICAgICAgIHRleHRSZWN0czogdGV4dFJlY3RzLFxuICAgICAgICAgIGRyYXduZXh0TGFiZWw6IGRyYXduZXh0TGFiZWxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd0RhdGFMYWJlbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdEYXRhTGFiZWwocG9zLCBpLCBqKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdHJva2VXaWR0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMjtcbiAgICAgICAgLy8gdGhpcyBtZXRob2QgaGFuZGxlcyBsaW5lLCBhcmVhLCBidWJibGUsIHNjYXR0ZXIgY2hhcnRzIGFzIHRob3NlIGNoYXJ0cyBjb250YWlucyBtYXJrZXJzL3BvaW50cyB3aGljaCBoYXZlIHByZS1kZWZpbmVkIHgveSBwb3NpdGlvbnNcbiAgICAgICAgLy8gYWxsIG90aGVyIGNoYXJ0cyBsaWtlIHJhZGFyIC8gYmFycyAvIGhlYXRtYXBzIHdpbGwgZGVmaW5lIHRoZWlyIG93biBkcmF3RGF0YUxhYmVsIHJvdXRpbmVcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBkYXRhTGFiZWxzQ29uZmlnID0gdy5jb25maWcuZGF0YUxhYmVscztcbiAgICAgICAgdmFyIHggPSAwO1xuICAgICAgICB2YXIgeSA9IDA7XG4gICAgICAgIHZhciBkYXRhUG9pbnRJbmRleCA9IGo7XG4gICAgICAgIHZhciBlbERhdGFMYWJlbHNXcmFwID0gbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGFMYWJlbHNDb25maWcuZW5hYmxlZCB8fCBwb3MueCBpbnN0YW5jZW9mIEFycmF5ICE9PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIGVsRGF0YUxhYmVsc1dyYXA7XG4gICAgICAgIH1cblxuICAgICAgICBlbERhdGFMYWJlbHNXcmFwID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1kYXRhLWxhYmVscydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgcSA9IDA7IHEgPCBwb3MueC5sZW5ndGg7IHErKykge1xuICAgICAgICAgIHggPSBwb3MueFtxXSArIGRhdGFMYWJlbHNDb25maWcub2Zmc2V0WDtcbiAgICAgICAgICB5ID0gcG9zLnlbcV0gKyBkYXRhTGFiZWxzQ29uZmlnLm9mZnNldFkgKyBzdHJva2VXaWR0aDtcblxuICAgICAgICAgIGlmICghaXNOYU4oeCkpIHtcbiAgICAgICAgICAgIC8vIGEgc21hbGwgaGFjayBhcyB3ZSBoYXZlIDIgcG9pbnRzIGZvciB0aGUgZmlyc3QgdmFsIHRvIGNvbm5lY3QgaXRcbiAgICAgICAgICAgIGlmIChqID09PSAxICYmIHEgPT09IDApIGRhdGFQb2ludEluZGV4ID0gMDtcbiAgICAgICAgICAgIGlmIChqID09PSAxICYmIHEgPT09IDEpIGRhdGFQb2ludEluZGV4ID0gMTtcbiAgICAgICAgICAgIHZhciB2YWwgPSB3Lmdsb2JhbHMuc2VyaWVzW2ldW2RhdGFQb2ludEluZGV4XTtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gJyc7XG5cbiAgICAgICAgICAgIHZhciBnZXRUZXh0ID0gZnVuY3Rpb24gZ2V0VGV4dCh2KSB7XG4gICAgICAgICAgICAgIHJldHVybiB3LmNvbmZpZy5kYXRhTGFiZWxzLmZvcm1hdHRlcih2LCB7XG4gICAgICAgICAgICAgICAgY3R4OiBfdGhpcy5jdHgsXG4gICAgICAgICAgICAgICAgc2VyaWVzSW5kZXg6IGksXG4gICAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGRhdGFQb2ludEluZGV4LFxuICAgICAgICAgICAgICAgIHc6IHdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2J1YmJsZScpIHtcbiAgICAgICAgICAgICAgdmFsID0gdy5nbG9iYWxzLnNlcmllc1pbaV1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICB0ZXh0ID0gZ2V0VGV4dCh2YWwpO1xuICAgICAgICAgICAgICB5ID0gcG9zLnlbcV07XG4gICAgICAgICAgICAgIHZhciBzY2F0dGVyID0gbmV3IFNjYXR0ZXIodGhpcy5jdHgpO1xuICAgICAgICAgICAgICB2YXIgY2VudGVyVGV4dEluQnViYmxlQ29vcmRzID0gc2NhdHRlci5jZW50ZXJUZXh0SW5CdWJibGUoeSwgaSwgZGF0YVBvaW50SW5kZXgpO1xuICAgICAgICAgICAgICB5ID0gY2VudGVyVGV4dEluQnViYmxlQ29vcmRzLnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gZ2V0VGV4dCh2YWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGxvdERhdGFMYWJlbHNUZXh0KHtcbiAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgajogZGF0YVBvaW50SW5kZXgsXG4gICAgICAgICAgICAgIHBhcmVudDogZWxEYXRhTGFiZWxzV3JhcCxcbiAgICAgICAgICAgICAgb2Zmc2V0Q29ycmVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgZGF0YUxhYmVsc0NvbmZpZzogdy5jb25maWcuZGF0YUxhYmVsc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsRGF0YUxhYmVsc1dyYXA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBsb3REYXRhTGFiZWxzVGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsb3REYXRhTGFiZWxzVGV4dChvcHRzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgeCA9IG9wdHMueCxcbiAgICAgICAgICAgIHkgPSBvcHRzLnksXG4gICAgICAgICAgICBpID0gb3B0cy5pLFxuICAgICAgICAgICAgaiA9IG9wdHMuaixcbiAgICAgICAgICAgIHRleHQgPSBvcHRzLnRleHQsXG4gICAgICAgICAgICB0ZXh0QW5jaG9yID0gb3B0cy50ZXh0QW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50ID0gb3B0cy5wYXJlbnQsXG4gICAgICAgICAgICBkYXRhTGFiZWxzQ29uZmlnID0gb3B0cy5kYXRhTGFiZWxzQ29uZmlnLFxuICAgICAgICAgICAgY29sb3IgPSBvcHRzLmNvbG9yLFxuICAgICAgICAgICAgYWx3YXlzRHJhd0RhdGFMYWJlbCA9IG9wdHMuYWx3YXlzRHJhd0RhdGFMYWJlbCxcbiAgICAgICAgICAgIG9mZnNldENvcnJlY3Rpb24gPSBvcHRzLm9mZnNldENvcnJlY3Rpb247XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkody5jb25maWcuZGF0YUxhYmVscy5lbmFibGVkT25TZXJpZXMpKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLmRhdGFMYWJlbHMuZW5hYmxlZE9uU2VyaWVzLmluZGV4T2YoaSkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvcnJlY3RlZExhYmVscyA9IHtcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHksXG4gICAgICAgICAgZHJhd25leHRMYWJlbDogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvZmZzZXRDb3JyZWN0aW9uKSB7XG4gICAgICAgICAgY29ycmVjdGVkTGFiZWxzID0gdGhpcy5kYXRhTGFiZWxzQ29ycmVjdGlvbih4LCB5LCB0ZXh0LCBpLCBqLCBhbHdheXNEcmF3RGF0YUxhYmVsLCBwYXJzZUludChkYXRhTGFiZWxzQ29uZmlnLnN0eWxlLmZvbnRTaXplLCAxMCkpO1xuICAgICAgICB9IC8vIHdoZW4gem9vbWVkLCB3ZSBkb24ndCBuZWVkIHRvIGNvcnJlY3QgbGFiZWxzIG9mZnNldHMsXG4gICAgICAgIC8vIGJ1dCBpZiBub3JtYWxseSwgbGFiZWxzIGdldCBjcm9wcGVkLCBjb3JyZWN0IHRoZW1cblxuXG4gICAgICAgIGlmICghdy5nbG9iYWxzLnpvb21lZCkge1xuICAgICAgICAgIHggPSBjb3JyZWN0ZWRMYWJlbHMueDtcbiAgICAgICAgICB5ID0gY29ycmVjdGVkTGFiZWxzLnk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29ycmVjdGVkTGFiZWxzLnRleHRSZWN0cykge1xuICAgICAgICAgIGlmICh4ICsgY29ycmVjdGVkTGFiZWxzLnRleHRSZWN0cy53aWR0aCA8IC0yMCB8fCB4ID4gdy5nbG9iYWxzLmdyaWRXaWR0aCArIDIwKSB7XG4gICAgICAgICAgICAvLyBkYXRhbGFiZWxzIGZhbGwgb3V0c2lkZSBkcmF3aW5nIGFyZWEsIHNvIGRyYXcgYSBibGFuayBsYWJlbFxuICAgICAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhTGFiZWxDb2xvciA9IHcuZ2xvYmFscy5kYXRhTGFiZWxzLnN0eWxlLmNvbG9yc1tpXTtcblxuICAgICAgICBpZiAoKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdiYXInIHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdyYW5nZUJhcicpICYmIHcuY29uZmlnLnBsb3RPcHRpb25zLmJhci5kaXN0cmlidXRlZCB8fCB3LmNvbmZpZy5kYXRhTGFiZWxzLmRpc3RyaWJ1dGVkKSB7XG4gICAgICAgICAgZGF0YUxhYmVsQ29sb3IgPSB3Lmdsb2JhbHMuZGF0YUxhYmVscy5zdHlsZS5jb2xvcnNbal07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICBkYXRhTGFiZWxDb2xvciA9IGNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZlggPSBkYXRhTGFiZWxzQ29uZmlnLm9mZnNldFg7XG4gICAgICAgIHZhciBvZmZZID0gZGF0YUxhYmVsc0NvbmZpZy5vZmZzZXRZO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC50eXBlID09PSAnYmFyJyB8fCB3LmNvbmZpZy5jaGFydC50eXBlID09PSAncmFuZ2VCYXInKSB7XG4gICAgICAgICAgLy8gZm9yIGNlcnRhaW4gY2hhcnQgdHlwZXMsIHdlIGhhbmRsZSBvZmZzZXRzIHdoaWxlIGNhbGN1bGF0aW5nIGRhdGFsYWJlbHMgcG9zXG4gICAgICAgICAgLy8gd2h5PyBiZWNhdXNlIGJhcnMvY29sdW1uIG1heSBoYXZlIG5lZ2F0aXZlIHZhbHVlcyBhbmQgYmFzZWQgb24gdGhhdFxuICAgICAgICAgIC8vIG9mZnNldHMgYmVjb21lcyByZXZlcnNlZFxuICAgICAgICAgIG9mZlggPSAwO1xuICAgICAgICAgIG9mZlkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvcnJlY3RlZExhYmVscy5kcmF3bmV4dExhYmVsKSB7XG4gICAgICAgICAgdmFyIGRhdGFMYWJlbFRleHQgPSBncmFwaGljcy5kcmF3VGV4dCh7XG4gICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgaGVpZ2h0OiBwYXJzZUludChkYXRhTGFiZWxzQ29uZmlnLnN0eWxlLmZvbnRTaXplLCAxMCksXG4gICAgICAgICAgICB4OiB4ICsgb2ZmWCxcbiAgICAgICAgICAgIHk6IHkgKyBvZmZZLFxuICAgICAgICAgICAgZm9yZUNvbG9yOiBkYXRhTGFiZWxDb2xvcixcbiAgICAgICAgICAgIHRleHRBbmNob3I6IHRleHRBbmNob3IgfHwgZGF0YUxhYmVsc0NvbmZpZy50ZXh0QW5jaG9yLFxuICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIGZvbnRTaXplOiBkYXRhTGFiZWxzQ29uZmlnLnN0eWxlLmZvbnRTaXplLFxuICAgICAgICAgICAgZm9udEZhbWlseTogZGF0YUxhYmVsc0NvbmZpZy5zdHlsZS5mb250RmFtaWx5LFxuICAgICAgICAgICAgZm9udFdlaWdodDogZGF0YUxhYmVsc0NvbmZpZy5zdHlsZS5mb250V2VpZ2h0IHx8ICdub3JtYWwnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGF0YUxhYmVsVGV4dC5hdHRyKHtcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1kYXRhbGFiZWwnLFxuICAgICAgICAgICAgY3g6IHgsXG4gICAgICAgICAgICBjeTogeVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGRhdGFMYWJlbHNDb25maWcuZHJvcFNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICB2YXIgdGV4dFNoYWRvdyA9IGRhdGFMYWJlbHNDb25maWcuZHJvcFNoYWRvdztcbiAgICAgICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICAgICAgZmlsdGVycy5kcm9wU2hhZG93KGRhdGFMYWJlbFRleHQsIHRleHRTaGFkb3cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudC5hZGQoZGF0YUxhYmVsVGV4dCk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHcuZ2xvYmFscy5sYXN0RHJhd25EYXRhTGFiZWxzSW5kZXhlc1tpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHcuZ2xvYmFscy5sYXN0RHJhd25EYXRhTGFiZWxzSW5kZXhlc1tpXSA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHcuZ2xvYmFscy5sYXN0RHJhd25EYXRhTGFiZWxzSW5kZXhlc1tpXS5wdXNoKGopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZEJhY2tncm91bmRUb0RhdGFMYWJlbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEJhY2tncm91bmRUb0RhdGFMYWJlbChlbCwgY29vcmRzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgYkNuZiA9IHcuY29uZmlnLmRhdGFMYWJlbHMuYmFja2dyb3VuZDtcbiAgICAgICAgdmFyIHBhZGRpbmdIID0gYkNuZi5wYWRkaW5nO1xuICAgICAgICB2YXIgcGFkZGluZ1YgPSBiQ25mLnBhZGRpbmcgLyAyO1xuICAgICAgICB2YXIgd2lkdGggPSBjb29yZHMud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBjb29yZHMuaGVpZ2h0O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZWxSZWN0ID0gZ3JhcGhpY3MuZHJhd1JlY3QoY29vcmRzLnggLSBwYWRkaW5nSCwgY29vcmRzLnkgLSBwYWRkaW5nViAvIDIsIHdpZHRoICsgcGFkZGluZ0ggKiAyLCBoZWlnaHQgKyBwYWRkaW5nViwgYkNuZi5ib3JkZXJSYWRpdXMsIHcuY29uZmlnLmNoYXJ0LmJhY2tncm91bmQgPT09ICd0cmFuc3BhcmVudCcgPyAnI2ZmZicgOiB3LmNvbmZpZy5jaGFydC5iYWNrZ3JvdW5kLCBiQ25mLm9wYWNpdHksIGJDbmYuYm9yZGVyV2lkdGgsIGJDbmYuYm9yZGVyQ29sb3IpO1xuXG4gICAgICAgIGlmIChiQ25mLmRyb3BTaGFkb3cuZW5hYmxlZCkge1xuICAgICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICAgIGZpbHRlcnMuZHJvcFNoYWRvdyhlbFJlY3QsIGJDbmYuZHJvcFNoYWRvdyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxSZWN0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkYXRhTGFiZWxzQmFja2dyb3VuZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGFMYWJlbHNCYWNrZ3JvdW5kKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdidWJibGUnKSByZXR1cm47XG4gICAgICAgIHZhciBlbERhdGFMYWJlbHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy1kYXRhbGFiZWxzIHRleHQnKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsRGF0YUxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBlbCA9IGVsRGF0YUxhYmVsc1tpXTtcbiAgICAgICAgICB2YXIgY29vcmRzID0gZWwuZ2V0QkJveCgpO1xuICAgICAgICAgIHZhciBlbFJlY3QgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGNvb3Jkcy53aWR0aCAmJiBjb29yZHMuaGVpZ2h0KSB7XG4gICAgICAgICAgICBlbFJlY3QgPSB0aGlzLmFkZEJhY2tncm91bmRUb0RhdGFMYWJlbChlbCwgY29vcmRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxSZWN0KSB7XG4gICAgICAgICAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbFJlY3Qubm9kZSwgZWwpO1xuICAgICAgICAgICAgdmFyIGJhY2tncm91bmQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2ZpbGwnKTtcbiAgICAgICAgICAgIHZhciBzaG91bGRBbmltID0gdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5lbmFibGVkICYmICF3Lmdsb2JhbHMucmVzaXplZCAmJiAhdy5nbG9iYWxzLmRhdGFDaGFuZ2VkO1xuXG4gICAgICAgICAgICBpZiAoc2hvdWxkQW5pbSkge1xuICAgICAgICAgICAgICBlbFJlY3QuYW5pbWF0ZSgpLmF0dHIoe1xuICAgICAgICAgICAgICAgIGZpbGw6IGJhY2tncm91bmRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbFJlY3QuYXR0cih7XG4gICAgICAgICAgICAgICAgZmlsbDogYmFja2dyb3VuZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdmaWxsJywgdy5jb25maWcuZGF0YUxhYmVscy5iYWNrZ3JvdW5kLmZvcmVDb2xvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJyaW5nRm9yd2FyZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJyaW5nRm9yd2FyZCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBlbERhdGFMYWJlbHNOb2RlcyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwZXhjaGFydHMtZGF0YWxhYmVscycpO1xuICAgICAgICB2YXIgZWxTZXJpZXMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy1wbG90LXNlcmllczpsYXN0LWNoaWxkJyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbERhdGFMYWJlbHNOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlbFNlcmllcykge1xuICAgICAgICAgICAgZWxTZXJpZXMuaW5zZXJ0QmVmb3JlKGVsRGF0YUxhYmVsc05vZGVzW2ldLCBlbFNlcmllcy5uZXh0U2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERhdGFMYWJlbHM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBTZXJpZXMgQ2xhc3MgZm9yIGludGVyYXRpb24gd2l0aCB0aGUgU2VyaWVzIG9mIHRoZSBjaGFydC5cbiAgICpcbiAgICogQG1vZHVsZSBTZXJpZXNcbiAgICoqL1xuXG4gIHZhciBTZXJpZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcmllcyhjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZXJpZXMpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdGhpcy5sZWdlbmRJbmFjdGl2ZUNsYXNzID0gJ2xlZ2VuZC1tb3VzZW92ZXItaW5hY3RpdmUnO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTZXJpZXMsIFt7XG4gICAgICBrZXk6IFwiZ2V0QWxsU2VyaWVzRWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsU2VyaWVzRWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53Lmdsb2JhbHMuZG9tLmJhc2VFbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYXBleGNoYXJ0cy1zZXJpZXNcIik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFNlcmllc0J5TmFtZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlcmllc0J5TmFtZShzZXJpZXNOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLncuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoXCJbc2VyaWVzTmFtZT0nXCIuY29uY2F0KFV0aWxzLmVzY2FwZVN0cmluZyhzZXJpZXNOYW1lKSwgXCInXVwiKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzU2VyaWVzSGlkZGVuXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNTZXJpZXNIaWRkZW4oc2VyaWVzTmFtZSkge1xuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IHRoaXMuZ2V0U2VyaWVzQnlOYW1lKHNlcmllc05hbWUpO1xuICAgICAgICB2YXIgcmVhbEluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGE6cmVhbEluZGV4JyksIDEwKTtcbiAgICAgICAgdmFyIGlzSGlkZGVuID0gdGFyZ2V0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FwZXhjaGFydHMtc2VyaWVzLWNvbGxhcHNlZCcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzSGlkZGVuOiBpc0hpZGRlbixcbiAgICAgICAgICByZWFsSW5kZXg6IHJlYWxJbmRleFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRDb2xsYXBzZWRDbGFzc1RvU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29sbGFwc2VkQ2xhc3NUb1NlcmllcyhlbFNlcmllcywgaW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgZnVuY3Rpb24gaXRlcmF0ZU9uQWxsQ29sbGFwc2VkU2VyaWVzKHNlcmllcykge1xuICAgICAgICAgIGZvciAodmFyIGNzID0gMDsgY3MgPCBzZXJpZXMubGVuZ3RoOyBjcysrKSB7XG4gICAgICAgICAgICBpZiAoc2VyaWVzW2NzXS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgZWxTZXJpZXMubm9kZS5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXNlcmllcy1jb2xsYXBzZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpdGVyYXRlT25BbGxDb2xsYXBzZWRTZXJpZXMody5nbG9iYWxzLmNvbGxhcHNlZFNlcmllcyk7XG4gICAgICAgIGl0ZXJhdGVPbkFsbENvbGxhcHNlZFNlcmllcyh3Lmdsb2JhbHMuYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9nZ2xlU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlU2VyaWVzKHNlcmllc05hbWUpIHtcbiAgICAgICAgdmFyIGlzU2VyaWVzSGlkZGVuID0gdGhpcy5pc1Nlcmllc0hpZGRlbihzZXJpZXNOYW1lKTtcbiAgICAgICAgdGhpcy5jdHgubGVnZW5kLmxlZ2VuZEhlbHBlcnMudG9nZ2xlRGF0YVNlcmllcyhpc1Nlcmllc0hpZGRlbi5yZWFsSW5kZXgsIGlzU2VyaWVzSGlkZGVuLmlzSGlkZGVuKTtcbiAgICAgICAgcmV0dXJuIGlzU2VyaWVzSGlkZGVuLmlzSGlkZGVuO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzaG93U2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd1NlcmllcyhzZXJpZXNOYW1lKSB7XG4gICAgICAgIHZhciBpc1Nlcmllc0hpZGRlbiA9IHRoaXMuaXNTZXJpZXNIaWRkZW4oc2VyaWVzTmFtZSk7XG5cbiAgICAgICAgaWYgKGlzU2VyaWVzSGlkZGVuLmlzSGlkZGVuKSB7XG4gICAgICAgICAgdGhpcy5jdHgubGVnZW5kLmxlZ2VuZEhlbHBlcnMudG9nZ2xlRGF0YVNlcmllcyhpc1Nlcmllc0hpZGRlbi5yZWFsSW5kZXgsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhpZGVTZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlU2VyaWVzKHNlcmllc05hbWUpIHtcbiAgICAgICAgdmFyIGlzU2VyaWVzSGlkZGVuID0gdGhpcy5pc1Nlcmllc0hpZGRlbihzZXJpZXNOYW1lKTtcblxuICAgICAgICBpZiAoIWlzU2VyaWVzSGlkZGVuLmlzSGlkZGVuKSB7XG4gICAgICAgICAgdGhpcy5jdHgubGVnZW5kLmxlZ2VuZEhlbHBlcnMudG9nZ2xlRGF0YVNlcmllcyhpc1Nlcmllc0hpZGRlbi5yZWFsSW5kZXgsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZXNldFNlcmllc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0U2VyaWVzKCkge1xuICAgICAgICB2YXIgc2hvdWxkVXBkYXRlQ2hhcnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gICAgICAgIHZhciBzaG91bGRSZXNldFpvb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICAgIHZhciBzaG91bGRSZXNldENvbGxhcHNlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBzZXJpZXMgPSB3Lmdsb2JhbHMuaW5pdGlhbFNlcmllcy5zbGljZSgpO1xuICAgICAgICB3LmNvbmZpZy5zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgIHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzID0gW107XG5cbiAgICAgICAgaWYgKHNob3VsZFJlc2V0Q29sbGFwc2VkKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmNvbGxhcHNlZFNlcmllcyA9IFtdO1xuICAgICAgICAgIHcuZ2xvYmFscy5hbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXMgPSBbXTtcbiAgICAgICAgICB3Lmdsb2JhbHMuY29sbGFwc2VkU2VyaWVzSW5kaWNlcyA9IFtdO1xuICAgICAgICAgIHcuZ2xvYmFscy5hbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXNJbmRpY2VzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlQ2hhcnQpIHtcbiAgICAgICAgICBpZiAoc2hvdWxkUmVzZXRab29tKSB7XG4gICAgICAgICAgICB3Lmdsb2JhbHMuem9vbWVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmN0eC51cGRhdGVIZWxwZXJzLnJldmVydERlZmF1bHRBeGlzTWluTWF4KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jdHgudXBkYXRlSGVscGVycy5fdXBkYXRlU2VyaWVzKHNlcmllcywgdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5keW5hbWljQW5pbWF0aW9uLmVuYWJsZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRvZ2dsZVNlcmllc09uSG92ZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVTZXJpZXNPbkhvdmVyKGUsIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBhbGxTZXJpZXNFbHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYXBleGNoYXJ0cy1zZXJpZXMgYXBleGNoYXJ0cy1kYXRhbGFiZWxzXCIpO1xuXG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgICAgICAgdmFyIHNlcmllc0NudCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApIC0gMTtcbiAgICAgICAgICB2YXIgc2VyaWVzRWwgPSBudWxsO1xuICAgICAgICAgIHZhciBkYXRhTGFiZWxFbCA9IG51bGw7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmF4aXNDaGFydHMgfHwgdy5jb25maWcuY2hhcnQudHlwZSA9PT0gJ3JhZGlhbEJhcicpIHtcbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuYXhpc0NoYXJ0cykge1xuICAgICAgICAgICAgICBzZXJpZXNFbCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoXCIuYXBleGNoYXJ0cy1zZXJpZXNbZGF0YVxcXFw6cmVhbEluZGV4PSdcIi5jb25jYXQoc2VyaWVzQ250LCBcIiddXCIpKTtcbiAgICAgICAgICAgICAgZGF0YUxhYmVsRWwgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtZGF0YWxhYmVsc1tkYXRhXFxcXDpyZWFsSW5kZXg9J1wiLmNvbmNhdChzZXJpZXNDbnQsIFwiJ11cIikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VyaWVzRWwgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtc2VyaWVzW3JlbD0nXCIuY29uY2F0KHNlcmllc0NudCArIDEsIFwiJ11cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXJpZXNFbCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoXCIuYXBleGNoYXJ0cy1zZXJpZXNbcmVsPSdcIi5jb25jYXQoc2VyaWVzQ250ICsgMSwgXCInXSBwYXRoXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciBzZSA9IDA7IHNlIDwgYWxsU2VyaWVzRWxzLmxlbmd0aDsgc2UrKykge1xuICAgICAgICAgICAgYWxsU2VyaWVzRWxzW3NlXS5jbGFzc0xpc3QuYWRkKHRoaXMubGVnZW5kSW5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlcmllc0VsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIXcuZ2xvYmFscy5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgICAgIHNlcmllc0VsLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmxlZ2VuZEluYWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXJpZXNFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMubGVnZW5kSW5hY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgICAgIGlmIChkYXRhTGFiZWxFbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBkYXRhTGFiZWxFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMubGVnZW5kSW5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgIGZvciAodmFyIF9zZSA9IDA7IF9zZSA8IGFsbFNlcmllc0Vscy5sZW5ndGg7IF9zZSsrKSB7XG4gICAgICAgICAgICBhbGxTZXJpZXNFbHNbX3NlXS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMubGVnZW5kSW5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhpZ2hsaWdodFJhbmdlSW5TZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoaWdobGlnaHRSYW5nZUluU2VyaWVzKGUsIHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGFsbEhlYXRNYXBFbGVtZW50cyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwZXhjaGFydHMtaGVhdG1hcC1yZWN0Jyk7XG5cbiAgICAgICAgdmFyIGFjdGl2ZUluYWN0aXZlID0gZnVuY3Rpb24gYWN0aXZlSW5hY3RpdmUoYWN0aW9uKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxIZWF0TWFwRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFsbEhlYXRNYXBFbGVtZW50c1tpXS5jbGFzc0xpc3RbYWN0aW9uXShfdGhpcy5sZWdlbmRJbmFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlbW92ZUluYWN0aXZlQ2xhc3NGcm9tSG92ZXJlZFJhbmdlID0gZnVuY3Rpb24gcmVtb3ZlSW5hY3RpdmVDbGFzc0Zyb21Ib3ZlcmVkUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbEhlYXRNYXBFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZhbCA9IHBhcnNlSW50KGFsbEhlYXRNYXBFbGVtZW50c1tpXS5nZXRBdHRyaWJ1dGUoJ3ZhbCcpLCAxMCk7XG5cbiAgICAgICAgICAgIGlmICh2YWwgPj0gcmFuZ2UuZnJvbSAmJiB2YWwgPD0gcmFuZ2UudG8pIHtcbiAgICAgICAgICAgICAgYWxsSGVhdE1hcEVsZW1lbnRzW2ldLmNsYXNzTGlzdC5yZW1vdmUoX3RoaXMubGVnZW5kSW5hY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgICAgICAgdmFyIHNlcmllc0NudCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApIC0gMTtcbiAgICAgICAgICBhY3RpdmVJbmFjdGl2ZSgnYWRkJyk7XG4gICAgICAgICAgdmFyIHJhbmdlID0gdy5jb25maWcucGxvdE9wdGlvbnMuaGVhdG1hcC5jb2xvclNjYWxlLnJhbmdlc1tzZXJpZXNDbnRdO1xuICAgICAgICAgIHJlbW92ZUluYWN0aXZlQ2xhc3NGcm9tSG92ZXJlZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgICAgICBhY3RpdmVJbmFjdGl2ZSgncmVtb3ZlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0QWN0aXZlQ29uZmlnU2VyaWVzSW5kZXhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmVDb25maWdTZXJpZXNJbmRleCgpIHtcbiAgICAgICAgdmFyIGlnbm9yZUJhcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gMDtcblxuICAgICAgICBpZiAody5jb25maWcuc2VyaWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAvLyBhY3RpdmUgc2VyaWVzIGZsYWcgaXMgcmVxdWlyZWQgdG8ga25vdyBpZiB1c2VyIGhhcyBub3QgZGVhY3RpdmF0ZWQgdmlhIGxlZ2VuZCBjbGlja1xuICAgICAgICAgIHZhciBmaXJzdEFjdGl2ZVNlcmllc0luZGV4ID0gdy5jb25maWcuc2VyaWVzLm1hcChmdW5jdGlvbiAoc2VyaWVzLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIGhhc0JhcnMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlnbm9yZUJhcnMpIHtcbiAgICAgICAgICAgICAgaGFzQmFycyA9IHcuY29uZmlnLnNlcmllc1tpbmRleF0udHlwZSA9PT0gJ2JhcicgfHwgdy5jb25maWcuc2VyaWVzW2luZGV4XS50eXBlID09PSAnY29sdW1uJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlcmllcy5kYXRhICYmIHNlcmllcy5kYXRhLmxlbmd0aCA+IDAgJiYgIWhhc0JhcnMgPyBpbmRleCA6IC0xO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBmaXJzdEFjdGl2ZVNlcmllc0luZGV4Lmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICBpZiAoZmlyc3RBY3RpdmVTZXJpZXNJbmRleFthXSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBmaXJzdEFjdGl2ZVNlcmllc0luZGV4W2FdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWN0aXZlSW5kZXg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFByZXZpb3VzUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcmV2aW91c1BhdGhzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdy5nbG9iYWxzLnByZXZpb3VzUGF0aHMgPSBbXTtcblxuICAgICAgICBmdW5jdGlvbiBwdXNoUGF0aHMoc2VyaWVzRWxzLCBpLCB0eXBlKSB7XG4gICAgICAgICAgdmFyIHBhdGhzID0gc2VyaWVzRWxzW2ldLmNoaWxkTm9kZXM7XG4gICAgICAgICAgdmFyIGRBcnIgPSB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgcGF0aHM6IFtdLFxuICAgICAgICAgICAgcmVhbEluZGV4OiBzZXJpZXNFbHNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhOnJlYWxJbmRleCcpXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGF0aHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXRoc1tqXS5oYXNBdHRyaWJ1dGUoJ3BhdGhUbycpKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gcGF0aHNbal0uZ2V0QXR0cmlidXRlKCdwYXRoVG8nKTtcbiAgICAgICAgICAgICAgZEFyci5wYXRocy5wdXNoKHtcbiAgICAgICAgICAgICAgICBkOiBkXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLnB1c2goZEFycik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2V0UGF0aHMgPSBmdW5jdGlvbiBnZXRQYXRocyhjaGFydFR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbChcIi5hcGV4Y2hhcnRzLVwiLmNvbmNhdChjaGFydFR5cGUsIFwiLXNlcmllcyAuYXBleGNoYXJ0cy1zZXJpZXNcIikpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydFR5cGVzID0gWydsaW5lJywgJ2FyZWEnLCAnYmFyJywgJ2NhbmRsZXN0aWNrJywgJ3JhZGFyJ107XG4gICAgICAgIGNoYXJ0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgIHZhciBwYXRocyA9IGdldFBhdGhzKHR5cGUpO1xuXG4gICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwYXRocy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgcHVzaFBhdGhzKHBhdGhzLCBwLCB0eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhhbmRsZVByZXZCdWJibGVTY2F0dGVyUGF0aHMoJ2J1YmJsZScpO1xuICAgICAgICB0aGlzLmhhbmRsZVByZXZCdWJibGVTY2F0dGVyUGF0aHMoJ3NjYXR0ZXInKTtcbiAgICAgICAgdmFyIGhlYXRtYXBDb2xvcnMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy1oZWF0bWFwIC5hcGV4Y2hhcnRzLXNlcmllcycpO1xuXG4gICAgICAgIGlmIChoZWF0bWFwQ29sb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IGhlYXRtYXBDb2xvcnMubGVuZ3RoOyBoKyspIHtcbiAgICAgICAgICAgIHZhciBzZXJpZXNFbHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFwZXhjaGFydHMtaGVhdG1hcCAuYXBleGNoYXJ0cy1zZXJpZXNbZGF0YVxcXFw6cmVhbEluZGV4PSdcIi5jb25jYXQoaCwgXCInXSByZWN0XCIpKTtcbiAgICAgICAgICAgIHZhciBkQXJyID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VyaWVzRWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGRBcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgY29sb3I6IHNlcmllc0Vsc1tpXS5nZXRBdHRyaWJ1dGUoJ2NvbG9yJylcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLnB1c2goZEFycik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3Lmdsb2JhbHMuYXhpc0NoYXJ0cykge1xuICAgICAgICAgIC8vIGZvciBub24tYXhpcyBjaGFydHMgKGkuZS4sIGNpcmN1bGFyIGNoYXJ0cywgcGF0aEZyb20gaXMgbm90IHVzYWJsZS4gV2UgbmVlZCB3aG9sZSBzZXJpZXMpXG4gICAgICAgICAgdy5nbG9iYWxzLnByZXZpb3VzUGF0aHMgPSB3Lmdsb2JhbHMuc2VyaWVzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZVByZXZCdWJibGVTY2F0dGVyUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVQcmV2QnViYmxlU2NhdHRlclBhdGhzKHR5cGUpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBwYXRocyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYXBleGNoYXJ0cy1cIi5jb25jYXQodHlwZSwgXCItc2VyaWVzIC5hcGV4Y2hhcnRzLXNlcmllc1wiKSk7XG5cbiAgICAgICAgaWYgKHBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHBhdGhzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICB2YXIgc2VyaWVzRWxzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbChcIi5hcGV4Y2hhcnRzLVwiLmNvbmNhdCh0eXBlLCBcIi1zZXJpZXMgLmFwZXhjaGFydHMtc2VyaWVzW2RhdGFcXFxcOnJlYWxJbmRleD0nXCIpLmNvbmNhdChzLCBcIiddIGNpcmNsZVwiKSk7XG4gICAgICAgICAgICB2YXIgZEFyciA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcmllc0Vscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBkQXJyLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IHNlcmllc0Vsc1tpXS5nZXRBdHRyaWJ1dGUoJ2N4JyksXG4gICAgICAgICAgICAgICAgeTogc2VyaWVzRWxzW2ldLmdldEF0dHJpYnV0ZSgnY3knKSxcbiAgICAgICAgICAgICAgICByOiBzZXJpZXNFbHNbaV0uZ2V0QXR0cmlidXRlKCdyJylcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLnB1c2goZEFycik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsZWFyUHJldmlvdXNQYXRoc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyUHJldmlvdXNQYXRocygpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzID0gW107XG4gICAgICAgIHcuZ2xvYmFscy5hbGxTZXJpZXNDb2xsYXBzZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFuZGxlTm9EYXRhXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlTm9EYXRhKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdmFyIG5vRGF0YU9wdHMgPSB3LmNvbmZpZy5ub0RhdGE7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyhtZS5jdHgpO1xuICAgICAgICB2YXIgeCA9IHcuZ2xvYmFscy5zdmdXaWR0aCAvIDI7XG4gICAgICAgIHZhciB5ID0gdy5nbG9iYWxzLnN2Z0hlaWdodCAvIDI7XG4gICAgICAgIHZhciB0ZXh0QW5jaG9yID0gJ21pZGRsZSc7XG4gICAgICAgIHcuZ2xvYmFscy5ub0RhdGEgPSB0cnVlO1xuICAgICAgICB3Lmdsb2JhbHMuYW5pbWF0aW9uRW5kZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChub0RhdGFPcHRzLmFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICB4ID0gMTA7XG4gICAgICAgICAgdGV4dEFuY2hvciA9ICdzdGFydCc7XG4gICAgICAgIH0gZWxzZSBpZiAobm9EYXRhT3B0cy5hbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIHggPSB3Lmdsb2JhbHMuc3ZnV2lkdGggLSAxMDtcbiAgICAgICAgICB0ZXh0QW5jaG9yID0gJ2VuZCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9EYXRhT3B0cy52ZXJ0aWNhbEFsaWduID09PSAndG9wJykge1xuICAgICAgICAgIHkgPSA1MDtcbiAgICAgICAgfSBlbHNlIGlmIChub0RhdGFPcHRzLnZlcnRpY2FsQWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgeSA9IHcuZ2xvYmFscy5zdmdIZWlnaHQgLSA1MDtcbiAgICAgICAgfVxuXG4gICAgICAgIHggPSB4ICsgbm9EYXRhT3B0cy5vZmZzZXRYO1xuICAgICAgICB5ID0geSArIHBhcnNlSW50KG5vRGF0YU9wdHMuc3R5bGUuZm9udFNpemUsIDEwKSArIDIgKyBub0RhdGFPcHRzLm9mZnNldFk7XG5cbiAgICAgICAgaWYgKG5vRGF0YU9wdHMudGV4dCAhPT0gdW5kZWZpbmVkICYmIG5vRGF0YU9wdHMudGV4dCAhPT0gJycpIHtcbiAgICAgICAgICB2YXIgdGl0bGVUZXh0ID0gZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICB0ZXh0OiBub0RhdGFPcHRzLnRleHQsXG4gICAgICAgICAgICB0ZXh0QW5jaG9yOiB0ZXh0QW5jaG9yLFxuICAgICAgICAgICAgZm9udFNpemU6IG5vRGF0YU9wdHMuc3R5bGUuZm9udFNpemUsXG4gICAgICAgICAgICBmb250RmFtaWx5OiBub0RhdGFPcHRzLnN0eWxlLmZvbnRGYW1pbHksXG4gICAgICAgICAgICBmb3JlQ29sb3I6IG5vRGF0YU9wdHMuc3R5bGUuY29sb3IsXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXRleHQtbm9kYXRhJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHcuZ2xvYmFscy5kb20uUGFwZXIuYWRkKHRpdGxlVGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gV2hlbiB1c2VyIGNsaWNrcyBvbiBsZWdlbmRzLCB0aGUgY29sbGFwc2VkIHNlcmllcyBpcyBmaWxsZWQgd2l0aCBbMCwwLDAsLi4uLDBdXG4gICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBhbHRlciB0aGUgc2VyaWVzJyBsZW5ndGggYXMgaXQgaXMgdXNlZCBhdCBtYW55IHBsYWNlc1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInNldE51bGxTZXJpZXNUb1plcm9WYWx1ZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXROdWxsU2VyaWVzVG9aZXJvVmFsdWVzKHNlcmllcykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcblxuICAgICAgICBmb3IgKHZhciBzbCA9IDA7IHNsIDwgc2VyaWVzLmxlbmd0aDsgc2wrKykge1xuICAgICAgICAgIGlmIChzZXJpZXNbc2xdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZXJpZXNbdy5nbG9iYWxzLm1heFZhbHNJbkFycmF5SW5kZXhdLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgIHNlcmllc1tzbF0ucHVzaCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VyaWVzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYXNBbGxTZXJpZXNFcXVhbFhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNBbGxTZXJpZXNFcXVhbFgoKSB7XG4gICAgICAgIHZhciBlcXVhbExlbiA9IHRydWU7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZmlsdGVyZWRTZXJYID0gdGhpcy5maWx0ZXJlZFNlcmllc1goKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbHRlcmVkU2VyWC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICBpZiAoZmlsdGVyZWRTZXJYW2ldWzBdICE9PSBmaWx0ZXJlZFNlclhbaSArIDFdWzBdKSB7XG4gICAgICAgICAgICBlcXVhbExlbiA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdy5nbG9iYWxzLmFsbFNlcmllc0hhc0VxdWFsWCA9IGVxdWFsTGVuO1xuICAgICAgICByZXR1cm4gZXF1YWxMZW47XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZpbHRlcmVkU2VyaWVzWFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlcmVkU2VyaWVzWCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBmaWx0ZXJlZFNlcmllc1ggPSB3Lmdsb2JhbHMuc2VyaWVzWC5tYXAoZnVuY3Rpb24gKHNlcikge1xuICAgICAgICAgIHJldHVybiBzZXIubGVuZ3RoID4gMCA/IHNlciA6IFtdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkU2VyaWVzWDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2VyaWVzO1xuICB9KCk7XG5cbiAgdmFyIERhdGEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERhdGEoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0YSk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgICB0aGlzLnR3b0RTZXJpZXMgPSBbXTtcbiAgICAgIHRoaXMudGhyZWVEU2VyaWVzID0gW107XG4gICAgICB0aGlzLnR3b0RTZXJpZXNYID0gW107XG4gICAgICB0aGlzLmNvcmVVdGlscyA9IG5ldyBDb3JlVXRpbHModGhpcy5jdHgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhEYXRhLCBbe1xuICAgICAga2V5OiBcImlzTXVsdGlGb3JtYXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc011bHRpRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0Zvcm1hdFhZKCkgfHwgdGhpcy5pc0Zvcm1hdDJEQXJyYXkoKTtcbiAgICAgIH0gLy8gZ2l2ZW4gZm9ybWF0IGlzIFt7eCwgeX0sIHt4LCB5fV1cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0Zvcm1hdFhZXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNGb3JtYXRYWSgpIHtcbiAgICAgICAgdmFyIHNlcmllcyA9IHRoaXMudy5jb25maWcuc2VyaWVzLnNsaWNlKCk7XG4gICAgICAgIHZhciBzciA9IG5ldyBTZXJpZXModGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmFjdGl2ZVNlcmllc0luZGV4ID0gc3IuZ2V0QWN0aXZlQ29uZmlnU2VyaWVzSW5kZXgoKTtcblxuICAgICAgICBpZiAodHlwZW9mIHNlcmllc1t0aGlzLmFjdGl2ZVNlcmllc0luZGV4XS5kYXRhICE9PSAndW5kZWZpbmVkJyAmJiBzZXJpZXNbdGhpcy5hY3RpdmVTZXJpZXNJbmRleF0uZGF0YS5sZW5ndGggPiAwICYmIHNlcmllc1t0aGlzLmFjdGl2ZVNlcmllc0luZGV4XS5kYXRhWzBdICE9PSBudWxsICYmIHR5cGVvZiBzZXJpZXNbdGhpcy5hY3RpdmVTZXJpZXNJbmRleF0uZGF0YVswXS54ICE9PSAndW5kZWZpbmVkJyAmJiBzZXJpZXNbdGhpcy5hY3RpdmVTZXJpZXNJbmRleF0uZGF0YVswXSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IC8vIGdpdmVuIGZvcm1hdCBpcyBbW3gsIHldLCBbeCwgeV1dXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNGb3JtYXQyREFycmF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNGb3JtYXQyREFycmF5KCkge1xuICAgICAgICB2YXIgc2VyaWVzID0gdGhpcy53LmNvbmZpZy5zZXJpZXMuc2xpY2UoKTtcbiAgICAgICAgdmFyIHNyID0gbmV3IFNlcmllcyh0aGlzLmN0eCk7XG4gICAgICAgIHRoaXMuYWN0aXZlU2VyaWVzSW5kZXggPSBzci5nZXRBY3RpdmVDb25maWdTZXJpZXNJbmRleCgpO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc2VyaWVzW3RoaXMuYWN0aXZlU2VyaWVzSW5kZXhdLmRhdGEgIT09ICd1bmRlZmluZWQnICYmIHNlcmllc1t0aGlzLmFjdGl2ZVNlcmllc0luZGV4XS5kYXRhLmxlbmd0aCA+IDAgJiYgdHlwZW9mIHNlcmllc1t0aGlzLmFjdGl2ZVNlcmllc0luZGV4XS5kYXRhWzBdICE9PSAndW5kZWZpbmVkJyAmJiBzZXJpZXNbdGhpcy5hY3RpdmVTZXJpZXNJbmRleF0uZGF0YVswXSAhPT0gbnVsbCAmJiBzZXJpZXNbdGhpcy5hY3RpdmVTZXJpZXNJbmRleF0uZGF0YVswXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVGb3JtYXQyREFycmF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRm9ybWF0MkRBcnJheShzZXIsIGkpIHtcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VyW2ldLmRhdGEubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHNlcltpXS5kYXRhW2pdWzFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VyW2ldLmRhdGFbal1bMV0pICYmIHNlcltpXS5kYXRhW2pdWzFdLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAvLyBjYW5kbGVzdGljayBuZXN0ZWQgb2hsYyBmb3JtYXRcbiAgICAgICAgICAgICAgdGhpcy50d29EU2VyaWVzLnB1c2goVXRpbHMucGFyc2VOdW1iZXIoc2VyW2ldLmRhdGFbal1bMV1bM10pKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VyW2ldLmRhdGFbal0ubGVuZ3RoID09PSA1KSB7XG4gICAgICAgICAgICAgIC8vIGNhbmRsZXN0aWNrIG5vbi1uZXN0ZWQgb2hsYyBmb3JtYXRcbiAgICAgICAgICAgICAgdGhpcy50d29EU2VyaWVzLnB1c2goVXRpbHMucGFyc2VOdW1iZXIoc2VyW2ldLmRhdGFbal1bNF0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudHdvRFNlcmllcy5wdXNoKFV0aWxzLnBhcnNlTnVtYmVyKHNlcltpXS5kYXRhW2pdWzFdKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdsLmRhdGFGb3JtYXRYTnVtZXJpYyA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNuZi54YXhpcy50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAvLyBpZiB0aW1lc3RhbXBzIGFyZSBwcm92aWRlZCBhbmQgeGF4aXMgdHlwZSBpcyBkYXRldHRpbWUsXG4gICAgICAgICAgICB2YXIgdHMgPSBuZXcgRGF0ZShzZXJbaV0uZGF0YVtqXVswXSk7XG4gICAgICAgICAgICB0cyA9IG5ldyBEYXRlKHRzKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB0aGlzLnR3b0RTZXJpZXNYLnB1c2godHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnR3b0RTZXJpZXNYLnB1c2goc2VyW2ldLmRhdGFbal1bMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9qID0gMDsgX2ogPCBzZXJbaV0uZGF0YS5sZW5ndGg7IF9qKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHNlcltpXS5kYXRhW19qXVsyXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMudGhyZWVEU2VyaWVzLnB1c2goc2VyW2ldLmRhdGFbX2pdWzJdKTtcbiAgICAgICAgICAgIGdsLmlzRGF0YVhZWiA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZUZvcm1hdFhZXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRm9ybWF0WFkoc2VyLCBpKSB7XG4gICAgICAgIHZhciBjbmYgPSB0aGlzLncuY29uZmlnO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGR0ID0gbmV3IERhdGVUaW1lKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGFjdGl2ZUkgPSBpO1xuXG4gICAgICAgIGlmIChnbC5jb2xsYXBzZWRTZXJpZXNJbmRpY2VzLmluZGV4T2YoaSkgPiAtMSkge1xuICAgICAgICAgIC8vIGZpeCAjMzY4XG4gICAgICAgICAgYWN0aXZlSSA9IHRoaXMuYWN0aXZlU2VyaWVzSW5kZXg7XG4gICAgICAgIH0gLy8gZ2V0IHNlcmllc1xuXG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZXJbaV0uZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc2VyW2ldLmRhdGFbal0ueSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlcltpXS5kYXRhW2pdLnkpKSB7XG4gICAgICAgICAgICAgIHRoaXMudHdvRFNlcmllcy5wdXNoKFV0aWxzLnBhcnNlTnVtYmVyKHNlcltpXS5kYXRhW2pdLnlbc2VyW2ldLmRhdGFbal0ueS5sZW5ndGggLSAxXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy50d29EU2VyaWVzLnB1c2goVXRpbHMucGFyc2VOdW1iZXIoc2VyW2ldLmRhdGFbal0ueSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBnZXQgc2VyaWVzWFxuXG5cbiAgICAgICAgZm9yICh2YXIgX2oyID0gMDsgX2oyIDwgc2VyW2FjdGl2ZUldLmRhdGEubGVuZ3RoOyBfajIrKykge1xuICAgICAgICAgIHZhciBpc1hTdHJpbmcgPSB0eXBlb2Ygc2VyW2FjdGl2ZUldLmRhdGFbX2oyXS54ID09PSAnc3RyaW5nJztcbiAgICAgICAgICB2YXIgaXNYQXJyID0gQXJyYXkuaXNBcnJheShzZXJbYWN0aXZlSV0uZGF0YVtfajJdLngpO1xuICAgICAgICAgIHZhciBpc1hEYXRlID0gIWlzWEFyciAmJiAhIWR0LmlzVmFsaWREYXRlKHNlclthY3RpdmVJXS5kYXRhW19qMl0ueC50b1N0cmluZygpKTtcblxuICAgICAgICAgIGlmIChpc1hTdHJpbmcgfHwgaXNYRGF0ZSkge1xuICAgICAgICAgICAgLy8gdXNlciBzdXBwbGllZCAnMDEvMDEvMjAxNycgb3IgYSBkYXRlIHN0cmluZyAoYSBKUyBkYXRlIG9iamVjdCBpcyBub3Qgc3VwcG9ydGVkKVxuICAgICAgICAgICAgaWYgKGlzWFN0cmluZyB8fCBjbmYueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljKSB7XG4gICAgICAgICAgICAgIGlmIChjbmYueGF4aXMudHlwZSA9PT0gJ2RhdGV0aW1lJyAmJiAhZ2wuaXNSYW5nZURhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR3b0RTZXJpZXNYLnB1c2goZHQucGFyc2VEYXRlKHNlclthY3RpdmVJXS5kYXRhW19qMl0ueCkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGEgY2F0ZWdvcnkgYW5kIG5vdCBhIG51bWVyaWMgeCB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuZmFsbGJhY2tUb0NhdGVnb3J5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnR3b0RTZXJpZXNYLnB1c2goc2VyW2FjdGl2ZUldLmRhdGFbX2oyXS54KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGNuZi54YXhpcy50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50d29EU2VyaWVzWC5wdXNoKGR0LnBhcnNlRGF0ZShzZXJbYWN0aXZlSV0uZGF0YVtfajJdLngudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsLmRhdGFGb3JtYXRYTnVtZXJpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZ2wuaXNYTnVtZXJpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy50d29EU2VyaWVzWC5wdXNoKHBhcnNlRmxvYXQoc2VyW2FjdGl2ZUldLmRhdGFbX2oyXS54KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzWEFycikge1xuICAgICAgICAgICAgLy8gYSBtdWx0aWxpbmUgbGFiZWwgZGVzY3JpYmVkIGluIGFycmF5IGZvcm1hdFxuICAgICAgICAgICAgdGhpcy5mYWxsYmFja1RvQ2F0ZWdvcnkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50d29EU2VyaWVzWC5wdXNoKHNlclthY3RpdmVJXS5kYXRhW19qMl0ueCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGEgbnVtZXJpYyB2YWx1ZSBpbiB4IHByb3BlcnR5XG4gICAgICAgICAgICBnbC5pc1hOdW1lcmljID0gdHJ1ZTtcbiAgICAgICAgICAgIGdsLmRhdGFGb3JtYXRYTnVtZXJpYyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnR3b0RTZXJpZXNYLnB1c2goc2VyW2FjdGl2ZUldLmRhdGFbX2oyXS54KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VyW2ldLmRhdGFbMF0gJiYgdHlwZW9mIHNlcltpXS5kYXRhWzBdLnogIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCBzZXJbaV0uZGF0YS5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgdGhpcy50aHJlZURTZXJpZXMucHVzaChzZXJbaV0uZGF0YVt0XS56KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnbC5pc0RhdGFYWVogPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZVJhbmdlRGF0YVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVJhbmdlRGF0YShzZXIsIGkpIHtcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuICAgICAgICB2YXIgcmFuZ2UgPSB7fTtcblxuICAgICAgICBpZiAodGhpcy5pc0Zvcm1hdDJEQXJyYXkoKSkge1xuICAgICAgICAgIHJhbmdlID0gdGhpcy5oYW5kbGVSYW5nZURhdGFGb3JtYXQoJ2FycmF5Jywgc2VyLCBpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRm9ybWF0WFkoKSkge1xuICAgICAgICAgIHJhbmdlID0gdGhpcy5oYW5kbGVSYW5nZURhdGFGb3JtYXQoJ3h5Jywgc2VyLCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLnNlcmllc1JhbmdlU3RhcnQucHVzaChyYW5nZS5zdGFydCk7XG4gICAgICAgIGdsLnNlcmllc1JhbmdlRW5kLnB1c2gocmFuZ2UuZW5kKTtcblxuICAgICAgICBpZiAoY25mLnhheGlzLnR5cGUgPT09ICdkYXRldGltZScpIHtcbiAgICAgICAgICBnbC5zZXJpZXNSYW5nZUJhclRpbWVsaW5lLnB1c2gocmFuZ2UucmFuZ2VVbmlxdWVzKTtcbiAgICAgICAgfSAvLyBjaGVjayBmb3Igb3ZlcmxhcHMgdG8gYXZvaWQgY2xhc2hlcyBpbiBhIHRpbWVsaW5lIGNoYXJ0XG5cblxuICAgICAgICBnbC5zZXJpZXNSYW5nZUJhclRpbWVsaW5lLmZvckVhY2goZnVuY3Rpb24gKHNyLCBzaSkge1xuICAgICAgICAgIGlmIChzcikge1xuICAgICAgICAgICAgc3IuZm9yRWFjaChmdW5jdGlvbiAoc2Fyciwgc2FycmkpIHtcbiAgICAgICAgICAgICAgc2Fyci55LmZvckVhY2goZnVuY3Rpb24gKGFyciwgYXJyaSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNyaSA9IDA7IHNyaSA8IHNhcnIueS5sZW5ndGg7IHNyaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYXJyaSAhPT0gc3JpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZTF5MSA9IGFyci55MTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlMXkyID0gYXJyLnkyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UyeTEgPSBzYXJyLnlbc3JpXS55MTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlMnkyID0gc2Fyci55W3NyaV0ueTI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlMXkxIDw9IHJhbmdlMnkyICYmIHJhbmdlMnkxIDw9IHJhbmdlMXkyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHNhcnIub3ZlcmxhcHMuaW5kZXhPZihhcnIucmFuZ2VOYW1lKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhcnIub3ZlcmxhcHMucHVzaChhcnIucmFuZ2VOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Fyci5vdmVybGFwcy5pbmRleE9mKHNhcnIueVtzcmldLnJhbmdlTmFtZSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYXJyLm92ZXJsYXBzLnB1c2goc2Fyci55W3NyaV0ucmFuZ2VOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVDYW5kbGVTdGlja0RhdGFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDYW5kbGVTdGlja0RhdGEoc2VyLCBpKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuICAgICAgICB2YXIgb2hsYyA9IHt9O1xuXG4gICAgICAgIGlmICh0aGlzLmlzRm9ybWF0MkRBcnJheSgpKSB7XG4gICAgICAgICAgb2hsYyA9IHRoaXMuaGFuZGxlQ2FuZGxlU3RpY2tEYXRhRm9ybWF0KCdhcnJheScsIHNlciwgaSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0Zvcm1hdFhZKCkpIHtcbiAgICAgICAgICBvaGxjID0gdGhpcy5oYW5kbGVDYW5kbGVTdGlja0RhdGFGb3JtYXQoJ3h5Jywgc2VyLCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLnNlcmllc0NhbmRsZU9baV0gPSBvaGxjLm87XG4gICAgICAgIGdsLnNlcmllc0NhbmRsZUhbaV0gPSBvaGxjLmg7XG4gICAgICAgIGdsLnNlcmllc0NhbmRsZUxbaV0gPSBvaGxjLmw7XG4gICAgICAgIGdsLnNlcmllc0NhbmRsZUNbaV0gPSBvaGxjLmM7XG4gICAgICAgIHJldHVybiBvaGxjO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVSYW5nZURhdGFGb3JtYXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSYW5nZURhdGFGb3JtYXQoZm9ybWF0LCBzZXIsIGkpIHtcbiAgICAgICAgdmFyIHJhbmdlU3RhcnQgPSBbXTtcbiAgICAgICAgdmFyIHJhbmdlRW5kID0gW107XG4gICAgICAgIHZhciB1bmlxdWVLZXlzID0gc2VyW2ldLmRhdGEuZmlsdGVyKGZ1bmN0aW9uICh0aGluZywgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXggPT09IHNlbGYuZmluZEluZGV4KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC54ID09PSB0aGluZy54O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHIsIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHIueCxcbiAgICAgICAgICAgIG92ZXJsYXBzOiBbXSxcbiAgICAgICAgICAgIHk6IFtdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBlcnIgPSAnUGxlYXNlIHByb3ZpZGUgW1N0YXJ0LCBFbmRdIHZhbHVlcyBpbiB2YWxpZCBmb3JtYXQuIFJlYWQgbW9yZSBodHRwczovL2FwZXhjaGFydHMuY29tL2RvY3Mvc2VyaWVzLyNyYW5nZWNoYXJ0cyc7XG4gICAgICAgIHZhciBzZXJPYmogPSBuZXcgU2VyaWVzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc2VyT2JqLmdldEFjdGl2ZUNvbmZpZ1Nlcmllc0luZGV4KCk7XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgIGlmIChzZXJbYWN0aXZlSW5kZXhdLmRhdGFbMF1bMV0ubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlcltpXS5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0LnB1c2goc2VyW2ldLmRhdGFbal1bMV1bMF0pO1xuICAgICAgICAgICAgcmFuZ2VFbmQucHVzaChzZXJbaV0uZGF0YVtqXVsxXVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ3h5Jykge1xuICAgICAgICAgIGlmIChzZXJbYWN0aXZlSW5kZXhdLmRhdGFbMF0ueS5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9qMykge1xuICAgICAgICAgICAgdmFyIGlkID0gVXRpbHMucmFuZG9tSWQoKTtcbiAgICAgICAgICAgIHZhciB4ID0gc2VyW2ldLmRhdGFbX2ozXS54O1xuICAgICAgICAgICAgdmFyIHkgPSB7XG4gICAgICAgICAgICAgIHkxOiBzZXJbaV0uZGF0YVtfajNdLnlbMF0sXG4gICAgICAgICAgICAgIHkyOiBzZXJbaV0uZGF0YVtfajNdLnlbMV0sXG4gICAgICAgICAgICAgIHJhbmdlTmFtZTogaWRcbiAgICAgICAgICAgIH07IC8vIG11dGF0aW5nIGNvbmZpZyBvYmplY3QgYnkgYWRkaW5nIGEgbmV3IHByb3BlcnR5XG4gICAgICAgICAgICAvLyBUT0RPOiBBcyB0aGlzIGlzIHNwZWNpZmljYWxseSBmb3IgdGltZWxpbmUgcmFuZ2ViYXIgY2hhcnRzLCB1cGRhdGUgdGhlIGRvY3MgbWVudGlvbmluZyB0aGUgc2VyaWVzIG9ubHkgc3VwcG9ydHMgeHkgZm9ybWF0XG5cbiAgICAgICAgICAgIHNlcltpXS5kYXRhW19qM10ucmFuZ2VOYW1lID0gaWQ7XG4gICAgICAgICAgICB2YXIgdUkgPSB1bmlxdWVLZXlzLmZpbmRJbmRleChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdC54ID09PSB4O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1bmlxdWVLZXlzW3VJXS55LnB1c2goeSk7XG4gICAgICAgICAgICByYW5nZVN0YXJ0LnB1c2goeS55MSk7XG4gICAgICAgICAgICByYW5nZUVuZC5wdXNoKHkueTIpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBmb3IgKHZhciBfajMgPSAwOyBfajMgPCBzZXJbaV0uZGF0YS5sZW5ndGg7IF9qMysrKSB7XG4gICAgICAgICAgICBfbG9vcChfajMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhcnQ6IHJhbmdlU3RhcnQsXG4gICAgICAgICAgZW5kOiByYW5nZUVuZCxcbiAgICAgICAgICByYW5nZVVuaXF1ZXM6IHVuaXF1ZUtleXNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFuZGxlQ2FuZGxlU3RpY2tEYXRhRm9ybWF0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2FuZGxlU3RpY2tEYXRhRm9ybWF0KGZvcm1hdCwgc2VyLCBpKSB7XG4gICAgICAgIHZhciBzZXJPID0gW107XG4gICAgICAgIHZhciBzZXJIID0gW107XG4gICAgICAgIHZhciBzZXJMID0gW107XG4gICAgICAgIHZhciBzZXJDID0gW107XG4gICAgICAgIHZhciBlcnIgPSAnUGxlYXNlIHByb3ZpZGUgW09wZW4sIEhpZ2gsIExvdyBhbmQgQ2xvc2VdIHZhbHVlcyBpbiB2YWxpZCBmb3JtYXQuIFJlYWQgbW9yZSBodHRwczovL2FwZXhjaGFydHMuY29tL2RvY3Mvc2VyaWVzLyNjYW5kbGVzdGljayc7XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzZXJbaV0uZGF0YVswXVsxXSkgJiYgc2VyW2ldLmRhdGFbMF0ubGVuZ3RoICE9PSA1IHx8IEFycmF5LmlzQXJyYXkoc2VyW2ldLmRhdGFbMF1bMV0pICYmIHNlcltpXS5kYXRhWzBdWzFdLmxlbmd0aCAhPT0gNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlcltpXS5kYXRhWzBdLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZXJbaV0uZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICBzZXJPLnB1c2goc2VyW2ldLmRhdGFbal1bMV0pO1xuICAgICAgICAgICAgICBzZXJILnB1c2goc2VyW2ldLmRhdGFbal1bMl0pO1xuICAgICAgICAgICAgICBzZXJMLnB1c2goc2VyW2ldLmRhdGFbal1bM10pO1xuICAgICAgICAgICAgICBzZXJDLnB1c2goc2VyW2ldLmRhdGFbal1bNF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfajQgPSAwOyBfajQgPCBzZXJbaV0uZGF0YS5sZW5ndGg7IF9qNCsrKSB7XG4gICAgICAgICAgICAgIHNlck8ucHVzaChzZXJbaV0uZGF0YVtfajRdWzFdWzBdKTtcbiAgICAgICAgICAgICAgc2VySC5wdXNoKHNlcltpXS5kYXRhW19qNF1bMV1bMV0pO1xuICAgICAgICAgICAgICBzZXJMLnB1c2goc2VyW2ldLmRhdGFbX2o0XVsxXVsyXSk7XG4gICAgICAgICAgICAgIHNlckMucHVzaChzZXJbaV0uZGF0YVtfajRdWzFdWzNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAneHknKSB7XG4gICAgICAgICAgaWYgKHNlcltpXS5kYXRhWzBdLnkubGVuZ3RoICE9PSA0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciBfajUgPSAwOyBfajUgPCBzZXJbaV0uZGF0YS5sZW5ndGg7IF9qNSsrKSB7XG4gICAgICAgICAgICBzZXJPLnB1c2goc2VyW2ldLmRhdGFbX2o1XS55WzBdKTtcbiAgICAgICAgICAgIHNlckgucHVzaChzZXJbaV0uZGF0YVtfajVdLnlbMV0pO1xuICAgICAgICAgICAgc2VyTC5wdXNoKHNlcltpXS5kYXRhW19qNV0ueVsyXSk7XG4gICAgICAgICAgICBzZXJDLnB1c2goc2VyW2ldLmRhdGFbX2o1XS55WzNdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG86IHNlck8sXG4gICAgICAgICAgaDogc2VySCxcbiAgICAgICAgICBsOiBzZXJMLFxuICAgICAgICAgIGM6IHNlckNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFyc2VEYXRhQXhpc0NoYXJ0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlRGF0YUF4aXNDaGFydHMoc2VyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGN0eCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5jdHg7XG4gICAgICAgIHZhciBjbmYgPSB0aGlzLncuY29uZmlnO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGR0ID0gbmV3IERhdGVUaW1lKGN0eCk7XG4gICAgICAgIHZhciB4bGFiZWxzID0gY25mLmxhYmVscy5sZW5ndGggPiAwID8gY25mLmxhYmVscy5zbGljZSgpIDogY25mLnhheGlzLmNhdGVnb3JpZXMuc2xpY2UoKTtcblxuICAgICAgICB2YXIgaGFuZGxlRGF0ZXMgPSBmdW5jdGlvbiBoYW5kbGVEYXRlcygpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHhsYWJlbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgeGxhYmVsc1tqXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgLy8gdXNlciBwcm92aWRlZCBkYXRlIHN0cmluZ3NcbiAgICAgICAgICAgICAgdmFyIGlzRGF0ZSA9IGR0LmlzVmFsaWREYXRlKHhsYWJlbHNbal0pO1xuXG4gICAgICAgICAgICAgIGlmIChpc0RhdGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50d29EU2VyaWVzWC5wdXNoKGR0LnBhcnNlRGF0ZSh4bGFiZWxzW2pdKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgaGF2ZSBwcm92aWRlZCBpbnZhbGlkIERhdGUgZm9ybWF0LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIEphdmFTY3JpcHQgRGF0ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyB1c2VyIHByb3ZpZGVkIHRpbWVzdGFtcHNcbiAgICAgICAgICAgICAgaWYgKFN0cmluZyh4bGFiZWxzW2pdKS5sZW5ndGggIT09IDEzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIEphdmFTY3JpcHQgdGltZXN0YW1wJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudHdvRFNlcmllc1gucHVzaCh4bGFiZWxzW2pdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMudHdvRFNlcmllcyA9IFtdO1xuICAgICAgICAgIHRoaXMudHdvRFNlcmllc1ggPSBbXTtcbiAgICAgICAgICB0aGlzLnRocmVlRFNlcmllcyA9IFtdO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzZXJbaV0uZGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBpcyBhIHBvc3NpYmlsaXR5IHRoYXQgeW91IG1heSBoYXZlIG5vdCBpbmNsdWRlZCAnZGF0YScgcHJvcGVydHkgaW4gc2VyaWVzLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY25mLmNoYXJ0LnR5cGUgPT09ICdyYW5nZUJhcicgfHwgY25mLmNoYXJ0LnR5cGUgPT09ICdyYW5nZUFyZWEnIHx8IHNlcltpXS50eXBlID09PSAncmFuZ2VCYXInIHx8IHNlcltpXS50eXBlID09PSAncmFuZ2VBcmVhJykge1xuICAgICAgICAgICAgZ2wuaXNSYW5nZURhdGEgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVSYW5nZURhdGEoc2VyLCBpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5pc011bHRpRm9ybWF0KCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRm9ybWF0MkRBcnJheSgpKSB7XG4gICAgICAgICAgICAgIHRoaXMuaGFuZGxlRm9ybWF0MkRBcnJheShzZXIsIGkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRm9ybWF0WFkoKSkge1xuICAgICAgICAgICAgICB0aGlzLmhhbmRsZUZvcm1hdFhZKHNlciwgaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjbmYuY2hhcnQudHlwZSA9PT0gJ2NhbmRsZXN0aWNrJyB8fCBzZXJbaV0udHlwZSA9PT0gJ2NhbmRsZXN0aWNrJykge1xuICAgICAgICAgICAgICB0aGlzLmhhbmRsZUNhbmRsZVN0aWNrRGF0YShzZXIsIGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbC5zZXJpZXMucHVzaCh0aGlzLnR3b0RTZXJpZXMpO1xuICAgICAgICAgICAgZ2wubGFiZWxzLnB1c2godGhpcy50d29EU2VyaWVzWCk7XG4gICAgICAgICAgICBnbC5zZXJpZXNYLnB1c2godGhpcy50d29EU2VyaWVzWCk7XG5cbiAgICAgICAgICAgIGlmIChpID09PSB0aGlzLmFjdGl2ZVNlcmllc0luZGV4ICYmICF0aGlzLmZhbGxiYWNrVG9DYXRlZ29yeSkge1xuICAgICAgICAgICAgICBnbC5pc1hOdW1lcmljID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNuZi54YXhpcy50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgIC8vIHVzZXIgZGlkbid0IHN1cHBsaWVkIFt7eCx5fV0gb3IgW1t4LHldXSwgYnV0IHNpbmdsZSBhcnJheSBpbiBkYXRhLlxuICAgICAgICAgICAgICAvLyBBbHNvIGxhYmVscy9jYXRlZ29yaWVzIHdlcmUgc3VwcGxpZWQgZGlmZmVyZW50bHlcbiAgICAgICAgICAgICAgZ2wuaXNYTnVtZXJpYyA9IHRydWU7XG4gICAgICAgICAgICAgIGhhbmRsZURhdGVzKCk7XG4gICAgICAgICAgICAgIGdsLnNlcmllc1gucHVzaCh0aGlzLnR3b0RTZXJpZXNYKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY25mLnhheGlzLnR5cGUgPT09ICdudW1lcmljJykge1xuICAgICAgICAgICAgICBnbC5pc1hOdW1lcmljID0gdHJ1ZTtcblxuICAgICAgICAgICAgICBpZiAoeGxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50d29EU2VyaWVzWCA9IHhsYWJlbHM7XG4gICAgICAgICAgICAgICAgZ2wuc2VyaWVzWC5wdXNoKHRoaXMudHdvRFNlcmllc1gpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdsLmxhYmVscy5wdXNoKHRoaXMudHdvRFNlcmllc1gpO1xuICAgICAgICAgICAgdmFyIHNpbmdsZUFycmF5ID0gc2VyW2ldLmRhdGEubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBVdGlscy5wYXJzZU51bWJlcihkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ2wuc2VyaWVzLnB1c2goc2luZ2xlQXJyYXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGdsLnNlcmllc1oucHVzaCh0aGlzLnRocmVlRFNlcmllcyk7XG5cbiAgICAgICAgICBpZiAoc2VyW2ldLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZ2wuc2VyaWVzTmFtZXMucHVzaChzZXJbaV0ubmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsLnNlcmllc05hbWVzLnB1c2goJ3Nlcmllcy0nICsgcGFyc2VJbnQoaSArIDEsIDEwKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFyc2VEYXRhTm9uQXhpc0NoYXJ0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlRGF0YU5vbkF4aXNDaGFydHMoc2VyKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuICAgICAgICB2YXIgY25mID0gdGhpcy53LmNvbmZpZztcbiAgICAgICAgZ2wuc2VyaWVzID0gc2VyLnNsaWNlKCk7XG4gICAgICAgIGdsLnNlcmllc05hbWVzID0gY25mLmxhYmVscy5zbGljZSgpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2wuc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGdsLnNlcmllc05hbWVzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGdsLnNlcmllc05hbWVzLnB1c2goJ3Nlcmllcy0nICsgKGkgKyAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudztcbiAgICAgIH1cbiAgICAgIC8qKiBVc2VyIHBvc3NpYmx5IHNldCBzdHJpbmcgY2F0ZWdvcmllcyBpbiB4YXhpcy5jYXRlZ29yaWVzIG9yIGxhYmVscyBwcm9wXG4gICAgICAgKiBPciBkaWRuJ3Qgc2V0IHhheGlzIGxhYmVscyBhdCBhbGwgLSBpbiB3aGljaCBjYXNlIHdlIG1hbnVhbGx5IGRvIGl0LlxuICAgICAgICogSWYgdXNlciBwYXNzZWQgc2VyaWVzIGRhdGEgYXMgW1szLCAyXSwgWzQsIDVdXSBvciBbeyB4OiAzLCB5OiA1NSB9XSxcbiAgICAgICAqIHRoaXMgc2hvdWxkbid0IGJlIGNhbGxlZFxuICAgICAgICogQHBhcmFtIHthcnJheX0gc2VyIC0gdGhlIHNlcmllcyB3aGljaCB1c2VyIHBhc3NlZCB0byB0aGUgY29uZmlnXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVFeHRlcm5hbExhYmVsc0RhdGFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVFeHRlcm5hbExhYmVsc0RhdGEoc2VyKSB7XG4gICAgICAgIHZhciBjbmYgPSB0aGlzLncuY29uZmlnO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcblxuICAgICAgICBpZiAoY25mLnhheGlzLmNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIHVzZXIgcHJvdmlkZWQgbGFiZWxzIGluIHhheGlzLmNhdGVnb3J5IHByb3BcbiAgICAgICAgICBnbC5sYWJlbHMgPSBjbmYueGF4aXMuY2F0ZWdvcmllcztcbiAgICAgICAgfSBlbHNlIGlmIChjbmYubGFiZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyB1c2VyIHByb3ZpZGVkIGxhYmVscyBpbiBsYWJlbHMgcHJvcHNcbiAgICAgICAgICBnbC5sYWJlbHMgPSBjbmYubGFiZWxzLnNsaWNlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5mYWxsYmFja1RvQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAvLyB1c2VyIHByb3ZpZGVkIGxhYmVscyBpbiB4IHByb3AgaW4gW3sgeDogMywgeTogNTUgfV0gZGF0YSwgYW5kIHRob3NlIGxhYmVscyBhcmUgYWxyZWFkeSBzdG9yZWQgaW4gZ2wubGFiZWxzWzBdLCBzbyBqdXN0IHJlLWFycmFuZ2UgdGhlIGdsLmxhYmVscyBhcnJheVxuICAgICAgICAgIGdsLmxhYmVscyA9IGdsLmxhYmVsc1swXTtcblxuICAgICAgICAgIGlmIChnbC5zZXJpZXNSYW5nZUJhclRpbWVsaW5lLmxlbmd0aCkge1xuICAgICAgICAgICAgZ2wuc2VyaWVzUmFuZ2VCYXJUaW1lbGluZS5tYXAoZnVuY3Rpb24gKHNydCkge1xuICAgICAgICAgICAgICBzcnQuZm9yRWFjaChmdW5jdGlvbiAoc3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2wubGFiZWxzLmluZGV4T2Yoc3IueCkgPCAwICYmIHNyLngpIHtcbiAgICAgICAgICAgICAgICAgIGdsLmxhYmVscy5wdXNoKHNyLngpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdsLmxhYmVscyA9IGdsLmxhYmVscy5maWx0ZXIoZnVuY3Rpb24gKGVsZW0sIHBvcywgYXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhcnIuaW5kZXhPZihlbGVtKSA9PT0gcG9zO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNuZi54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cyhjbmYpO1xuICAgICAgICAgICAgZGVmYXVsdHMuY29udmVydENhdFRvTnVtZXJpY1hheGlzKGNuZiwgdGhpcy5jdHgsIGdsLnNlcmllc1hbMF0pO1xuXG4gICAgICAgICAgICB0aGlzLl9nZW5lcmF0ZUV4dGVybmFsTGFiZWxzKHNlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2dlbmVyYXRlRXh0ZXJuYWxMYWJlbHMoc2VyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZ2VuZXJhdGVFeHRlcm5hbExhYmVsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5lcmF0ZUV4dGVybmFsTGFiZWxzKHNlcikge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7IC8vIHVzZXIgZGlkbid0IHByb3ZpZGVkIGFueSBsYWJlbHMsIGZhbGxiYWNrIHRvIDEtMi0zLTQtNVxuXG4gICAgICAgIHZhciBsYWJlbEFyciA9IFtdO1xuXG4gICAgICAgIGlmIChnbC5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgaWYgKGdsLnNlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdsLnNlcmllc1tnbC5tYXhWYWxzSW5BcnJheUluZGV4XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBsYWJlbEFyci5wdXNoKGkgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnbC5zZXJpZXNYID0gW107IC8vIGNyZWF0ZSBnbC5zZXJpZXNYIGFzIGl0IHdpbGwgYmUgdXNlZCBpbiBjYWxjdWxhdGlvbnMgb2YgeCBwb3NpdGlvbnNcblxuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBzZXIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBnbC5zZXJpZXNYLnB1c2gobGFiZWxBcnIpO1xuICAgICAgICAgIH0gLy8gdHVybiBvbiB0aGUgaXNYTnVtZXJpYyBmbGFnIHRvIGFsbG93IG1pblggYW5kIG1heFggdG8gZnVuY3Rpb24gcHJvcGVybHlcblxuXG4gICAgICAgICAgZ2wuaXNYTnVtZXJpYyA9IHRydWU7XG4gICAgICAgIH0gLy8gbm8gc2VyaWVzIHRvIHB1bGwgbGFiZWxzIGZyb20sIHB1dCBhIDAtMTAgc2VyaWVzXG4gICAgICAgIC8vIHBvc3NpYmx5LCB1c2VyIGNvbGxhcHNlZCBhbGwgc2VyaWVzLiBIZW5jZSB3ZSBjYW4ndCB3b3JrIHdpdGggYWJvdmUgY2FsY1xuXG5cbiAgICAgICAgaWYgKGxhYmVsQXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGxhYmVsQXJyID0gZ2wuYXhpc0NoYXJ0cyA/IFtdIDogZ2wuc2VyaWVzLm1hcChmdW5jdGlvbiAoZ2xzLCBnbHNpKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xzaSArIDE7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzZXIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgICAgZ2wuc2VyaWVzWC5wdXNoKGxhYmVsQXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gRmluYWxseSwgcGFzcyB0aGUgbGFiZWxBcnIgaW4gZ2wubGFiZWxzIHdoaWNoIHdpbGwgYmUgcHJpbnRlZCBvbiB4LWF4aXNcblxuXG4gICAgICAgIGdsLmxhYmVscyA9IGxhYmVsQXJyO1xuXG4gICAgICAgIGlmIChjbmYueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljKSB7XG4gICAgICAgICAgZ2wuY2F0ZWdvcnlMYWJlbHMgPSBsYWJlbEFyci5tYXAoZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjbmYueGF4aXMubGFiZWxzLmZvcm1hdHRlcihsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBUdXJuIG9uIHRoaXMgZ2xvYmFsIGZsYWcgdG8gaW5kaWNhdGUgbm8gbGFiZWxzIHdlcmUgcHJvdmlkZWQgYnkgdXNlclxuXG5cbiAgICAgICAgZ2wubm9MYWJlbHNQcm92aWRlZCA9IHRydWU7XG4gICAgICB9IC8vIFNlZ3JlZ2F0ZSB1c2VyIHByb3ZpZGVkIGRhdGEgaW50byBhcHByb3ByaWF0ZSB2YXJzXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFyc2VEYXRhXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VEYXRhKHNlcikge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGNuZiA9IHcuY29uZmlnO1xuICAgICAgICB2YXIgZ2wgPSB3Lmdsb2JhbHM7XG4gICAgICAgIHRoaXMuZXhjbHVkZUNvbGxhcHNlZFNlcmllc0luWUF4aXMoKTsgLy8gSWYgd2UgZGV0ZWN0ZWQgc3RyaW5nIGluIFggcHJvcCBvZiBzZXJpZXMsIHdlIGZhbGxiYWNrIHRvIGNhdGVnb3J5IHgtYXhpc1xuXG4gICAgICAgIHRoaXMuZmFsbGJhY2tUb0NhdGVnb3J5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3R4LmNvcmUucmVzZXRHbG9iYWxzKCk7XG4gICAgICAgIHRoaXMuY3R4LmNvcmUuaXNNdWx0aXBsZVkoKTtcblxuICAgICAgICBpZiAoZ2wuYXhpc0NoYXJ0cykge1xuICAgICAgICAgIC8vIGF4aXNDaGFydHMgaW5jbHVkZXMgbGluZSAvIGFyZWEgLyBjb2x1bW4gLyBzY2F0dGVyXG4gICAgICAgICAgdGhpcy5wYXJzZURhdGFBeGlzQ2hhcnRzKHNlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm9uLWF4aXMgY2hhcnRzIGFyZSBwaWUgLyBkb251dFxuICAgICAgICAgIHRoaXMucGFyc2VEYXRhTm9uQXhpc0NoYXJ0cyhzZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb3JlVXRpbHMuZ2V0TGFyZ2VzdFNlcmllcygpOyAvLyBzZXQgTnVsbCB2YWx1ZXMgdG8gMCBpbiBhbGwgc2VyaWVzIHdoZW4gdXNlciBoaWRlcy9zaG93cyBzb21lIHNlcmllc1xuXG4gICAgICAgIGlmIChjbmYuY2hhcnQudHlwZSA9PT0gJ2JhcicgJiYgY25mLmNoYXJ0LnN0YWNrZWQpIHtcbiAgICAgICAgICB2YXIgc2VyaWVzID0gbmV3IFNlcmllcyh0aGlzLmN0eCk7XG4gICAgICAgICAgZ2wuc2VyaWVzID0gc2VyaWVzLnNldE51bGxTZXJpZXNUb1plcm9WYWx1ZXMoZ2wuc2VyaWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29yZVV0aWxzLmdldFNlcmllc1RvdGFscygpO1xuXG4gICAgICAgIGlmIChnbC5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgdGhpcy5jb3JlVXRpbHMuZ2V0U3RhY2tlZFNlcmllc1RvdGFscygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb3JlVXRpbHMuZ2V0UGVyY2VudFNlcmllcygpO1xuXG4gICAgICAgIGlmICghZ2wuZGF0YUZvcm1hdFhOdW1lcmljICYmICghZ2wuaXNYTnVtZXJpYyB8fCBjbmYueGF4aXMudHlwZSA9PT0gJ251bWVyaWMnICYmIGNuZi5sYWJlbHMubGVuZ3RoID09PSAwICYmIGNuZi54YXhpcy5jYXRlZ29yaWVzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAvLyB4LWF4aXMgbGFiZWxzIGNvdWxkbid0IGJlIGRldGVjdGVkOyBoZW5jZSB0cnkgc2VhcmNoaW5nIGV2ZXJ5IG9wdGlvbiBpbiBjb25maWdcbiAgICAgICAgICB0aGlzLmhhbmRsZUV4dGVybmFsTGFiZWxzRGF0YShzZXIpO1xuICAgICAgICB9IC8vIGNoZWNrIGZvciBtdWx0aWxpbmUgeGF4aXNcblxuXG4gICAgICAgIHZhciBjYXRMYWJlbHMgPSB0aGlzLmNvcmVVdGlscy5nZXRDYXRlZ29yeUxhYmVscyhnbC5sYWJlbHMpO1xuXG4gICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgY2F0TGFiZWxzLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2F0TGFiZWxzW2xdKSkge1xuICAgICAgICAgICAgZ2wuaXNNdWx0aUxpbmVYID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJleGNsdWRlQ29sbGFwc2VkU2VyaWVzSW5ZQXhpc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4Y2x1ZGVDb2xsYXBzZWRTZXJpZXNJbllBeGlzKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdy5nbG9iYWxzLmlnbm9yZVlBeGlzSW5kZXhlcyA9IHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXMubWFwKGZ1bmN0aW9uIChjb2xsYXBzZWQsIGkpIHtcbiAgICAgICAgICAvLyBmaXggaXNzdWUgIzEyMTVcbiAgICAgICAgICAvLyBpZiBzdGFja2VkLCBub3QgcmV0dXJuaW5nIGNvbGxhcHNlZC5pbmRleCB0byBwcmVzZXJ2ZSB5YXhpc1xuICAgICAgICAgIGlmIChfdGhpczIudy5nbG9iYWxzLmlzTXVsdGlwbGVZQXhpcyAmJiAhdy5jb25maWcuY2hhcnQuc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxhcHNlZC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEYXRhO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgRm9ybWF0dGVyIENsYXNzIGZvciBzZXR0aW5nIHZhbHVlIGZvcm1hdHRlcnMgZm9yIGF4ZXMgYXMgd2VsbCBhcyB0b29sdGlwcy5cbiAgICpcbiAgICogQG1vZHVsZSBGb3JtYXR0ZXJzXG4gICAqKi9cblxuICB2YXIgRm9ybWF0dGVycyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRm9ybWF0dGVycyhjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtYXR0ZXJzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHRoaXMudG9vbHRpcEtleUZvcm1hdCA9ICdkZCBNTU0nO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhGb3JtYXR0ZXJzLCBbe1xuICAgICAga2V5OiBcInhMYWJlbEZvcm1hdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHhMYWJlbEZvcm1hdChmbiwgdmFsLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLnR5cGUgPT09ICdkYXRldGltZScpIHtcbiAgICAgICAgICBpZiAody5jb25maWcueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBpZiB1c2VyIGhhcyBub3Qgc3BlY2lmaWVkIGEgY3VzdG9tIGZvcm1hdHRlciwgdXNlIHRoZSBkZWZhdWx0IHRvb2x0aXAueC5mb3JtYXRcbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy50b29sdGlwLnguZm9ybWF0dGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgdmFyIGRhdGV0aW1lT2JqID0gbmV3IERhdGVUaW1lKHRoaXMuY3R4KTtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGV0aW1lT2JqLmZvcm1hdERhdGUoZGF0ZXRpbWVPYmouZ2V0RGF0ZSh2YWwpLCB3LmNvbmZpZy50b29sdGlwLnguZm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm4odmFsLCB0aW1lc3RhbXApO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkZWZhdWx0R2VuZXJhbEZvcm1hdHRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlZmF1bHRHZW5lcmFsRm9ybWF0dGVyKHZhbCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbC5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVmYXVsdFlGb3JtYXR0ZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZhdWx0WUZvcm1hdHRlcih2LCB5YXhlLCBpKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmIChVdGlscy5pc051bWJlcih2KSkge1xuICAgICAgICAgIGlmICh3Lmdsb2JhbHMueVZhbHVlRGVjaW1hbCAhPT0gMCkge1xuICAgICAgICAgICAgdiA9IHYudG9GaXhlZCh5YXhlLmRlY2ltYWxzSW5GbG9hdCAhPT0gdW5kZWZpbmVkID8geWF4ZS5kZWNpbWFsc0luRmxvYXQgOiB3Lmdsb2JhbHMueVZhbHVlRGVjaW1hbCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh3Lmdsb2JhbHMubWF4WUFycltpXSAtIHcuZ2xvYmFscy5taW5ZQXJyW2ldIDwgMTApIHtcbiAgICAgICAgICAgIHYgPSB2LnRvRml4ZWQoMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHYgPSB2LnRvRml4ZWQoMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldExhYmVsRm9ybWF0dGVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExhYmVsRm9ybWF0dGVycygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcblxuICAgICAgICB3Lmdsb2JhbHMueExhYmVsRm9ybWF0dGVyID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5kZWZhdWx0R2VuZXJhbEZvcm1hdHRlcih2YWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHcuZ2xvYmFscy54YXhpc1Rvb2x0aXBGb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmRlZmF1bHRHZW5lcmFsRm9ybWF0dGVyKHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdy5nbG9iYWxzLnR0S2V5Rm9ybWF0dGVyID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5kZWZhdWx0R2VuZXJhbEZvcm1hdHRlcih2YWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHcuZ2xvYmFscy50dFpGb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfTtcblxuICAgICAgICB3Lmdsb2JhbHMubGVnZW5kRm9ybWF0dGVyID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5kZWZhdWx0R2VuZXJhbEZvcm1hdHRlcih2YWwpO1xuICAgICAgICB9OyAvLyBmb3JtYXR0ZXIgZnVuY3Rpb24gd2lsbCBhbHdheXMgb3ZlcndyaXRlIGZvcm1hdCBwcm9wZXJ0eVxuXG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHcuZ2xvYmFscy54TGFiZWxGb3JtYXR0ZXIgPSB3LmNvbmZpZy54YXhpcy5sYWJlbHMuZm9ybWF0dGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHcuZ2xvYmFscy54TGFiZWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNOdW1iZXIodmFsKSkge1xuICAgICAgICAgICAgICAvLyBudW1lcmljIHhheGlzIG1heSBoYXZlIHNtYWxsZXIgcmFuZ2UsIHNvIGRlZmF1bHRpbmcgdG8gMSBkZWNpbWFsXG4gICAgICAgICAgICAgIGlmICghdy5jb25maWcueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljICYmIHcuY29uZmlnLnhheGlzLnR5cGUgPT09ICdudW1lcmljJyAmJiB3Lmdsb2JhbHMuZGF0YVBvaW50cyA8IDUwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbC50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSB3Lmdsb2JhbHMubWF4WSAtIHcuZ2xvYmFscy5taW5ZQXJyO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlIDwgNCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiB2YWwudG9GaXhlZCgwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy50b29sdGlwLnguZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLnR0S2V5Rm9ybWF0dGVyID0gdy5jb25maWcudG9vbHRpcC54LmZvcm1hdHRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3Lmdsb2JhbHMudHRLZXlGb3JtYXR0ZXIgPSB3Lmdsb2JhbHMueExhYmVsRm9ybWF0dGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy54YXhpcy50b29sdGlwLmZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHcuZ2xvYmFscy54YXhpc1Rvb2x0aXBGb3JtYXR0ZXIgPSB3LmNvbmZpZy54YXhpcy50b29sdGlwLmZvcm1hdHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHcuY29uZmlnLnRvb2x0aXAueSkpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMudHRWYWwgPSB3LmNvbmZpZy50b29sdGlwLnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLnRvb2x0aXAueS5mb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdy5nbG9iYWxzLnR0VmFsID0gdy5jb25maWcudG9vbHRpcC55O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy50b29sdGlwLnouZm9ybWF0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMudHRaRm9ybWF0dGVyID0gdy5jb25maWcudG9vbHRpcC56LmZvcm1hdHRlcjtcbiAgICAgICAgfSAvLyBsZWdlbmQgZm9ybWF0dGVyIC0gaWYgdXNlciB3YW50cyB0byBhcHBlbmQgYW55IGdsb2JhbCB2YWx1ZXMgb2Ygc2VyaWVzIHRvIGxlZ2VuZCB0ZXh0XG5cblxuICAgICAgICBpZiAody5jb25maWcubGVnZW5kLmZvcm1hdHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmxlZ2VuZEZvcm1hdHRlciA9IHcuY29uZmlnLmxlZ2VuZC5mb3JtYXR0ZXI7XG4gICAgICAgIH0gLy8gZm9ybWF0dGVyIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIG92ZXJ3cml0ZSBmb3JtYXQgcHJvcGVydHlcblxuXG4gICAgICAgIHcuY29uZmlnLnlheGlzLmZvckVhY2goZnVuY3Rpb24gKHlheGUsIGkpIHtcbiAgICAgICAgICBpZiAoeWF4ZS5sYWJlbHMuZm9ybWF0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHcuZ2xvYmFscy55TGFiZWxGb3JtYXR0ZXJzW2ldID0geWF4ZS5sYWJlbHMuZm9ybWF0dGVyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3Lmdsb2JhbHMueUxhYmVsRm9ybWF0dGVyc1tpXSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgaWYgKCF3Lmdsb2JhbHMueHlDaGFydHMpIHJldHVybiB2YWw7XG5cbiAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWwubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZGVmYXVsdFlGb3JtYXR0ZXIodiwgeWF4ZSwgaSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRlZmF1bHRZRm9ybWF0dGVyKHZhbCwgeWF4ZSwgaSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHcuZ2xvYmFscztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGVhdG1hcExhYmVsRm9ybWF0dGVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhlYXRtYXBMYWJlbEZvcm1hdHRlcnMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC50eXBlID09PSAnaGVhdG1hcCcpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMueUF4aXNTY2FsZVswXS5yZXN1bHQgPSB3Lmdsb2JhbHMuc2VyaWVzTmFtZXMuc2xpY2UoKTsgLy8gIGdldCB0aGUgbG9uZ2VzdCBzdHJpbmcgZnJvbSB0aGUgbGFiZWxzIGFycmF5IGFuZCBhbHNvIGFwcGx5IGxhYmVsIGZvcm1hdHRlciB0byBpdFxuXG4gICAgICAgICAgdmFyIGxvbmdlc3QgPSB3Lmdsb2JhbHMuc2VyaWVzTmFtZXMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5sZW5ndGggPiBiLmxlbmd0aCA/IGEgOiBiO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIHcuZ2xvYmFscy55QXhpc1NjYWxlWzBdLm5pY2VNYXggPSBsb25nZXN0O1xuICAgICAgICAgIHcuZ2xvYmFscy55QXhpc1NjYWxlWzBdLm5pY2VNaW4gPSBsb25nZXN0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEZvcm1hdHRlcnM7XG4gIH0oKTtcblxuICB2YXIgQXhlc1V0aWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBeGVzVXRpbHMoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXhlc1V0aWxzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICB9IC8vIEJhc2VkIG9uIHRoZSBmb3JtYXR0ZXIgZnVuY3Rpb24sIGdldCB0aGUgbGFiZWwgdGV4dCBhbmQgcG9zaXRpb25cblxuXG4gICAgX2NyZWF0ZUNsYXNzKEF4ZXNVdGlscywgW3tcbiAgICAgIGtleTogXCJnZXRMYWJlbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhYmVsKGxhYmVscywgdGltZXNjYWxlTGFiZWxzLCB4LCBpKSB7XG4gICAgICAgIHZhciBkcmF3bkxhYmVscyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogW107XG4gICAgICAgIHZhciBmb250U2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogJzEycHgnO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHJhd0xhYmVsID0gdHlwZW9mIGxhYmVsc1tpXSA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IGxhYmVsc1tpXTtcbiAgICAgICAgdmFyIGxhYmVsID0gcmF3TGFiZWw7XG4gICAgICAgIHZhciB4bGJGb3JtYXR0ZXIgPSB3Lmdsb2JhbHMueExhYmVsRm9ybWF0dGVyO1xuICAgICAgICB2YXIgY3VzdG9tRm9ybWF0dGVyID0gdy5jb25maWcueGF4aXMubGFiZWxzLmZvcm1hdHRlcjtcbiAgICAgICAgdmFyIGlzQm9sZCA9IGZhbHNlO1xuICAgICAgICB2YXIgeEZvcm1hdCA9IG5ldyBGb3JtYXR0ZXJzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHRpbWVzdGFtcCA9IHJhd0xhYmVsO1xuICAgICAgICBsYWJlbCA9IHhGb3JtYXQueExhYmVsRm9ybWF0KHhsYkZvcm1hdHRlciwgcmF3TGFiZWwsIHRpbWVzdGFtcCk7XG5cbiAgICAgICAgaWYgKGN1c3RvbUZvcm1hdHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGFiZWwgPSBjdXN0b21Gb3JtYXR0ZXIocmF3TGFiZWwsIGxhYmVsc1tpXSwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGV0ZXJtaW5lSGlnaGVzdFVuaXQgPSBmdW5jdGlvbiBkZXRlcm1pbmVIaWdoZXN0VW5pdCh1bml0KSB7XG4gICAgICAgICAgdmFyIGhpZ2hlc3RVbml0ID0gbnVsbDtcbiAgICAgICAgICB0aW1lc2NhbGVMYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgaWYgKHQudW5pdCA9PT0gJ21vbnRoJykge1xuICAgICAgICAgICAgICBoaWdoZXN0VW5pdCA9ICd5ZWFyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodC51bml0ID09PSAnZGF5Jykge1xuICAgICAgICAgICAgICBoaWdoZXN0VW5pdCA9ICdtb250aCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHQudW5pdCA9PT0gJ2hvdXInKSB7XG4gICAgICAgICAgICAgIGhpZ2hlc3RVbml0ID0gJ2RheSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHQudW5pdCA9PT0gJ21pbnV0ZScpIHtcbiAgICAgICAgICAgICAgaGlnaGVzdFVuaXQgPSAnaG91cic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGhpZ2hlc3RVbml0ID09PSB1bml0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aW1lc2NhbGVMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlzQm9sZCA9IGRldGVybWluZUhpZ2hlc3RVbml0KHRpbWVzY2FsZUxhYmVsc1tpXS51bml0KTtcbiAgICAgICAgICB4ID0gdGltZXNjYWxlTGFiZWxzW2ldLnBvc2l0aW9uO1xuICAgICAgICAgIGxhYmVsID0gdGltZXNjYWxlTGFiZWxzW2ldLnZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy50eXBlID09PSAnZGF0ZXRpbWUnICYmIGN1c3RvbUZvcm1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsYWJlbCA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgbGFiZWwgPT09ICd1bmRlZmluZWQnKSBsYWJlbCA9ICcnO1xuICAgICAgICBsYWJlbCA9IEFycmF5LmlzQXJyYXkobGFiZWwpID8gbGFiZWwgOiBsYWJlbC50b1N0cmluZygpO1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgdGV4dFJlY3QgPSB7fTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLnJvdGF0ZVhMYWJlbHMpIHtcbiAgICAgICAgICB0ZXh0UmVjdCA9IGdyYXBoaWNzLmdldFRleHRSZWN0cyhsYWJlbCwgcGFyc2VJbnQoZm9udFNpemUsIDEwKSwgbnVsbCwgXCJyb3RhdGUoXCIuY29uY2F0KHcuY29uZmlnLnhheGlzLmxhYmVscy5yb3RhdGUsIFwiIDAgMClcIiksIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0UmVjdCA9IGdyYXBoaWNzLmdldFRleHRSZWN0cyhsYWJlbCwgcGFyc2VJbnQoZm9udFNpemUsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobGFiZWwpICYmIChsYWJlbC5pbmRleE9mKCdOYU4nKSA9PT0gMCB8fCBsYWJlbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ludmFsaWQnKSA9PT0gMCB8fCBsYWJlbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2luZmluaXR5JykgPj0gMCB8fCBkcmF3bkxhYmVscy5pbmRleE9mKGxhYmVsKSA+PSAwICYmICF3LmNvbmZpZy54YXhpcy5sYWJlbHMuc2hvd0R1cGxpY2F0ZXMpKSB7XG4gICAgICAgICAgbGFiZWwgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICB0ZXh0UmVjdDogdGV4dFJlY3QsXG4gICAgICAgICAgaXNCb2xkOiBpc0JvbGRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2hlY2tGb3JPdmVyZmxvd2luZ0xhYmVsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrRm9yT3ZlcmZsb3dpbmdMYWJlbHMoaSwgbGFiZWwsIGxhYmVsc0xlbiwgZHJhd25MYWJlbHMsIGRyYXduTGFiZWxzUmVjdHMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAvLyBjaGVjayBpZiBmaXJzdCBsYWJlbCBpcyBiZWluZyB0cnVuY2F0ZWRcbiAgICAgICAgICBpZiAody5nbG9iYWxzLnNraXBGaXJzdFRpbWVsaW5lbGFiZWwpIHtcbiAgICAgICAgICAgIGxhYmVsLnRleHQgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA9PT0gbGFiZWxzTGVuIC0gMSkge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIGxhc3QgbGFiZWwgaXMgYmVpbmcgdHJ1bmNhdGVkXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5za2lwTGFzdFRpbWVsaW5lbGFiZWwpIHtcbiAgICAgICAgICAgIGxhYmVsLnRleHQgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5jb25maWcueGF4aXMubGFiZWxzLmhpZGVPdmVybGFwcGluZ0xhYmVscyAmJiBkcmF3bkxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHByZXYgPSBkcmF3bkxhYmVsc1JlY3RzW2RyYXduTGFiZWxzUmVjdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAobGFiZWwueCA8IHByZXYudGV4dFJlY3Qud2lkdGggLyAody5nbG9iYWxzLnJvdGF0ZVhMYWJlbHMgPyBNYXRoLmFicyh3LmNvbmZpZy54YXhpcy5sYWJlbHMucm90YXRlKSAvIDEyIDogMS4wMSkgKyBwcmV2LngpIHtcbiAgICAgICAgICAgIGxhYmVsLnRleHQgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNoZWNrRm9yUmV2ZXJzZWRMYWJlbHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0ZvclJldmVyc2VkTGFiZWxzKGksIGxhYmVscykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcblxuICAgICAgICBpZiAody5jb25maWcueWF4aXNbaV0gJiYgdy5jb25maWcueWF4aXNbaV0ucmV2ZXJzZWQpIHtcbiAgICAgICAgICBsYWJlbHMucmV2ZXJzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhYmVscztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNZQXhpc0hpZGRlblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzWUF4aXNIaWRkZW4oaW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBjb3JlVXRpbHMgPSBuZXcgQ29yZVV0aWxzKHRoaXMuY3R4KTtcbiAgICAgICAgcmV0dXJuICF3LmNvbmZpZy55YXhpc1tpbmRleF0uc2hvdyB8fCAhdy5jb25maWcueWF4aXNbaW5kZXhdLnNob3dGb3JOdWxsU2VyaWVzICYmIGNvcmVVdGlscy5pc1Nlcmllc051bGwoaW5kZXgpICYmIHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXNJbmRpY2VzLmluZGV4T2YoaW5kZXgpID09PSAtMTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1lBeGlzVGlja3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3WUF4aXNUaWNrcyh4LCB0aWNrQW1vdW50LCBheGlzQm9yZGVyLCBheGlzVGlja3MsIHJlYWxJbmRleCwgbGFiZWxzRGl2aWRlciwgZWxZYXhpcykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTsgLy8gaW5pdGlhbCBsYWJlbCBwb3NpdGlvbiA9IDA7XG5cbiAgICAgICAgdmFyIHQgPSB3Lmdsb2JhbHMudHJhbnNsYXRlWTtcblxuICAgICAgICBpZiAoYXhpc1RpY2tzLnNob3cgJiYgdGlja0Ftb3VudCA+IDApIHtcbiAgICAgICAgICBpZiAody5jb25maWcueWF4aXNbcmVhbEluZGV4XS5vcHBvc2l0ZSA9PT0gdHJ1ZSkgeCA9IHggKyBheGlzVGlja3Mud2lkdGg7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gdGlja0Ftb3VudDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciB0WSA9IHQgKyB0aWNrQW1vdW50IC8gMTAgKyB3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLmxhYmVscy5vZmZzZXRZIC0gMTtcblxuICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgdFkgPSBsYWJlbHNEaXZpZGVyICogaTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdoZWF0bWFwJykge1xuICAgICAgICAgICAgICB0WSA9IHRZICsgbGFiZWxzRGl2aWRlciAvIDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBlbFRpY2sgPSBncmFwaGljcy5kcmF3TGluZSh4ICsgYXhpc0JvcmRlci5vZmZzZXRYIC0gYXhpc1RpY2tzLndpZHRoICsgYXhpc1RpY2tzLm9mZnNldFgsIHRZICsgYXhpc1RpY2tzLm9mZnNldFksIHggKyBheGlzQm9yZGVyLm9mZnNldFggKyBheGlzVGlja3Mub2Zmc2V0WCwgdFkgKyBheGlzVGlja3Mub2Zmc2V0WSwgYXhpc1RpY2tzLmNvbG9yKTtcbiAgICAgICAgICAgIGVsWWF4aXMuYWRkKGVsVGljayk7XG4gICAgICAgICAgICB0ID0gdCArIGxhYmVsc0RpdmlkZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEF4ZXNVdGlscztcbiAgfSgpO1xuXG4gIHZhciBFeHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFeHBvcnRzKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4cG9ydHMpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhFeHBvcnRzLCBbe1xuICAgICAga2V5OiBcImZpeFN2Z1N0cmluZ0ZvckllMTFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaXhTdmdTdHJpbmdGb3JJZTExKHN2Z0RhdGEpIHtcbiAgICAgICAgLy8gSUUxMSBnZW5lcmF0ZXMgYnJva2VuIFNWRyB0aGF0IHdlIGhhdmUgdG8gZml4IGJ5IHVzaW5nIHJlZ2V4XG4gICAgICAgIGlmICghVXRpbHMuaXNJRTExKCkpIHtcbiAgICAgICAgICAvLyBub3QgSUUxMSAtIG5vb3BcbiAgICAgICAgICByZXR1cm4gc3ZnRGF0YTtcbiAgICAgICAgfSAvLyByZXBsYWNlIHNlY29uZCBvY2N1cmVuY2Ugb2YgXCJ4bWxuc1wiIGF0dHJpYnV0ZSB3aXRoIFwieG1sbnM6eGxpbmtcIiB3aXRoIGNvcnJlY3QgdXJsICsgYWRkIHhtbG5zOnN2Z2pzXG5cblxuICAgICAgICB2YXIgblhtbG5zU2VlbiA9IDA7XG4gICAgICAgIHZhciByZXN1bHQgPSBzdmdEYXRhLnJlcGxhY2UoL3htbG5zPVwiaHR0cDpcXC9cXC93d3cudzMub3JnXFwvMjAwMFxcL3N2Z1wiL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgIG5YbWxuc1NlZW4rKztcbiAgICAgICAgICByZXR1cm4gblhtbG5zU2VlbiA9PT0gMiA/ICd4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bWxuczpzdmdqcz1cImh0dHA6Ly9zdmdqcy5jb20vc3ZnanNcIicgOiBtYXRjaDtcbiAgICAgICAgfSk7IC8vIHJlbW92ZSB0aGUgaW52YWxpZCBlbXB0eSBuYW1lc3BhY2UgZGVjbGFyYXRpb25zXG5cbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL3htbG5zOk5TXFxkKz1cIlwiL2csICcnKTsgLy8gcmVtb3ZlIHRoZXNlIGJyb2tlbiBuYW1lc3BhY2VzIGZyb20gYXR0cmlidXRlc1xuXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC9OU1xcZCs6KFxcdys6XFx3Kz1cIikvZywgJyQxJyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFN2Z1N0cmluZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN2Z1N0cmluZygpIHtcbiAgICAgICAgdmFyIHN2Z1N0cmluZyA9IHRoaXMudy5nbG9iYWxzLmRvbS5QYXBlci5zdmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZml4U3ZnU3RyaW5nRm9ySWUxMShzdmdTdHJpbmcpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbGVhbnVwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIGhpZGUgc29tZSBlbGVtZW50cyB0byBhdm9pZCBwcmludGluZyB0aGVtIG9uIGV4cG9ydGVkIHN2Z1xuXG4gICAgICAgIHZhciB4Y3Jvc3NoYWlycyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwZXhjaGFydHMteGNyb3NzaGFpcnMnKTtcbiAgICAgICAgdmFyIHljcm9zc2hhaXJzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBleGNoYXJ0cy15Y3Jvc3NoYWlycycpO1xuICAgICAgICB2YXIgem9vbVNlbGVjdGlvblJlY3RzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBleGNoYXJ0cy16b29tLXJlY3QgYXBleGNoYXJ0cy1zZWxlY3Rpb24tcmVjdCcpO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHpvb21TZWxlY3Rpb25SZWN0cywgZnVuY3Rpb24gKHopIHtcbiAgICAgICAgICB6LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHhjcm9zc2hhaXJzKSB7XG4gICAgICAgICAgeGNyb3NzaGFpcnMuc2V0QXR0cmlidXRlKCd4JywgLTUwMCk7XG4gICAgICAgICAgeGNyb3NzaGFpcnMuc2V0QXR0cmlidXRlKCd4MScsIC01MDApO1xuICAgICAgICAgIHhjcm9zc2hhaXJzLnNldEF0dHJpYnV0ZSgneDInLCAtNTAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh5Y3Jvc3NoYWlycykge1xuICAgICAgICAgIHljcm9zc2hhaXJzLnNldEF0dHJpYnV0ZSgneScsIC0xMDApO1xuICAgICAgICAgIHljcm9zc2hhaXJzLnNldEF0dHJpYnV0ZSgneTEnLCAtMTAwKTtcbiAgICAgICAgICB5Y3Jvc3NoYWlycy5zZXRBdHRyaWJ1dGUoJ3kyJywgLTEwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3ZnVXJsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3ZnVXJsKCkge1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgdmFyIHN2Z0RhdGEgPSB0aGlzLmdldFN2Z1N0cmluZygpO1xuICAgICAgICB2YXIgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdEYXRhXSwge1xuICAgICAgICAgIHR5cGU6ICdpbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChzdmdCbG9iKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGF0YVVSSVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGFVUkkoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgdmFyIHcgPSBfdGhpcy53O1xuXG4gICAgICAgICAgX3RoaXMuY2xlYW51cCgpO1xuXG4gICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHcuZ2xvYmFscy5zdmdXaWR0aDtcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gcGFyc2VJbnQody5nbG9iYWxzLmRvbS5lbFdyYXAuc3R5bGUuaGVpZ2h0LCAxMCk7IC8vIGJlY2F1c2Ugb2YgcmVzaXplTm9uQXhpc0NoYXJ0c1xuXG4gICAgICAgICAgdmFyIGNhbnZhc0JnID0gdy5jb25maWcuY2hhcnQuYmFja2dyb3VuZCA9PT0gJ3RyYW5zcGFyZW50JyA/ICcjZmZmJyA6IHcuY29uZmlnLmNoYXJ0LmJhY2tncm91bmQ7XG4gICAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBjYW52YXNCZztcbiAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICAgIHZhciBzdmdEYXRhID0gX3RoaXMuZ2V0U3ZnU3RyaW5nKCk7XG5cbiAgICAgICAgICBpZiAod2luZG93LmNhbnZnICYmIFV0aWxzLmlzSUUxMSgpKSB7XG4gICAgICAgICAgICAvLyB1c2UgY2FudmcgYXMgYSBwb2x5ZmlsbCB0byB3b3JrYXJvdW5kIGllMTEgY29uc2lkZXJpbmcgYSBjYW52YXMgd2l0aCBsb2FkZWQgc3ZnICd1bnNhZmUnXG4gICAgICAgICAgICAvLyB3aXRob3V0IGlnbm9yZUNsZWFyIHdlIGxvc2Ugb3VyIGJhY2tncm91bmQgY29sb3I7IHdpdGhvdXQgaWdub3JlRGltZW5zaW9ucyBzb21lIGdyaWQgbGluZXMgYmVjb21lIGludmlzaWJsZVxuICAgICAgICAgICAgdmFyIHYgPSB3aW5kb3cuY2FudmcuQ2FudmcuZnJvbVN0cmluZyhjdHgsIHN2Z0RhdGEsIHtcbiAgICAgICAgICAgICAgaWdub3JlQ2xlYXI6IHRydWUsXG4gICAgICAgICAgICAgIGlnbm9yZURpbWVuc2lvbnM6IHRydWVcbiAgICAgICAgICAgIH0pOyAvLyByZW5kZXIgdGhlIHN2ZyB0byBjYW52YXNcblxuICAgICAgICAgICAgdi5zdGFydCgpO1xuICAgICAgICAgICAgdmFyIGJsb2IgPSBjYW52YXMubXNUb0Jsb2IoKTsgLy8gZGlzcG9zZSAtIG1pc3NpbmcgdGhpcyB3aWxsIGNhdXNlIGEgbWVtb3J5IGxlYWtcblxuICAgICAgICAgICAgdi5zdG9wKCk7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgYmxvYjogYmxvYlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzdmdVcmwgPSAnZGF0YTppbWFnZS9zdmcreG1sLCcgKyBlbmNvZGVVUklDb21wb25lbnQoc3ZnRGF0YSk7XG4gICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcblxuICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDApO1xuXG4gICAgICAgICAgICAgIGlmIChjYW52YXMubXNUb0Jsb2IpIHtcbiAgICAgICAgICAgICAgICAvLyBJRSBhbmQgRWRnZSBjYW4ndCBuYXZpZ2F0ZSB0byBkYXRhIHVybHMsIHNvIHdlIHJldHVybiB0aGUgYmxvYiBpbnN0ZWFkXG4gICAgICAgICAgICAgICAgdmFyIF9ibG9iID0gY2FudmFzLm1zVG9CbG9iKCk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgIGJsb2I6IF9ibG9iXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGltZ1VSSSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgaW1nVVJJOiBpbWdVUklcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1nLnNyYyA9IHN2Z1VybDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJleHBvcnRUb1NWR1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydFRvU1ZHKCkge1xuICAgICAgICB0aGlzLnRyaWdnZXJEb3dubG9hZCh0aGlzLnN2Z1VybCgpLCAnLnN2ZycpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJleHBvcnRUb1BuZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydFRvUG5nKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB0aGlzLmRhdGFVUkkoKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIGltZ1VSSSA9IF9yZWYuaW1nVVJJLFxuICAgICAgICAgICAgICBibG9iID0gX3JlZi5ibG9iO1xuXG4gICAgICAgICAgaWYgKGJsb2IpIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGJsb2IsIF90aGlzMi53Lmdsb2JhbHMuY2hhcnRJRCArICcucG5nJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzMi50cmlnZ2VyRG93bmxvYWQoaW1nVVJJLCAnLnBuZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImV4cG9ydFRvQ1NWXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0VG9DU1YoX3JlZjIpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHNlcmllcyA9IF9yZWYyLnNlcmllcyxcbiAgICAgICAgICAgIF9yZWYyJGNvbHVtbkRlbGltaXRlciA9IF9yZWYyLmNvbHVtbkRlbGltaXRlcixcbiAgICAgICAgICAgIGNvbHVtbkRlbGltaXRlciA9IF9yZWYyJGNvbHVtbkRlbGltaXRlciA9PT0gdm9pZCAwID8gJywnIDogX3JlZjIkY29sdW1uRGVsaW1pdGVyLFxuICAgICAgICAgICAgX3JlZjIkbGluZURlbGltaXRlciA9IF9yZWYyLmxpbmVEZWxpbWl0ZXIsXG4gICAgICAgICAgICBsaW5lRGVsaW1pdGVyID0gX3JlZjIkbGluZURlbGltaXRlciA9PT0gdm9pZCAwID8gJ1xcbicgOiBfcmVmMiRsaW5lRGVsaW1pdGVyO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGNvbHVtbnMgPSBbXTtcbiAgICAgICAgdmFyIHJvd3MgPSBbXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICdkYXRhOnRleHQvY3N2O2NoYXJzZXQ9dXRmLTgsJztcbiAgICAgICAgdmFyIGRhdGFGb3JtYXQgPSBuZXcgRGF0YSh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBheGVzVXRpbHMgPSBuZXcgQXhlc1V0aWxzKHRoaXMuY3R4KTtcblxuICAgICAgICB2YXIgZ2V0Q2F0ID0gZnVuY3Rpb24gZ2V0Q2F0KGkpIHtcbiAgICAgICAgICB2YXIgY2F0ID0gJyc7IC8vIHBpZSAvIGRvbnV0LyByYWRpYWxcblxuICAgICAgICAgIGlmICghdy5nbG9iYWxzLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICAgIGNhdCA9IHcuY29uZmlnLmxhYmVsc1tpXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8geHkgY2hhcnRzXG4gICAgICAgICAgICAvLyBub24gZGF0ZXRpbWVcbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy50eXBlID09PSAnY2F0ZWdvcnknIHx8IHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYykge1xuICAgICAgICAgICAgICBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHZhciBsYkZvcm1hdHRlciA9IHcuZ2xvYmFscy55TGFiZWxGb3JtYXR0ZXJzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBzciA9IG5ldyBTZXJpZXMoX3RoaXMzLmN0eCk7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVNlcmllcyA9IHNyLmdldEFjdGl2ZUNvbmZpZ1Nlcmllc0luZGV4KCk7XG4gICAgICAgICAgICAgICAgY2F0ID0gbGJGb3JtYXR0ZXIody5nbG9iYWxzLmxhYmVsc1tpXSwge1xuICAgICAgICAgICAgICAgICAgc2VyaWVzSW5kZXg6IGFjdGl2ZVNlcmllcyxcbiAgICAgICAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgdzogd1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhdCA9IGF4ZXNVdGlscy5nZXRMYWJlbCh3Lmdsb2JhbHMubGFiZWxzLCB3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzLCAwLCBpKS50ZXh0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIGRhdGV0aW1lLCBidXQgbGFiZWxzIHNwZWNpZmllZCBpbiBjYXRlZ29yaWVzIG9yIGxhYmVsc1xuXG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jYXRlZ29yaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhdCA9IHcuY29uZmlnLnhheGlzLmNhdGVnb3JpZXNbaV07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAody5jb25maWcubGFiZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhdCA9IHcuY29uZmlnLmxhYmVsc1tpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjYXQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGhhbmRsZUF4aXNSb3dzQ29sdW1ucyA9IGZ1bmN0aW9uIGhhbmRsZUF4aXNSb3dzQ29sdW1ucyhzLCBzSSkge1xuICAgICAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgcm93cy5wdXNoKGNvbHVtbnMuam9pbihjb2x1bW5EZWxpbWl0ZXIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocy5kYXRhICYmIHMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbHVtbnMgPSBbXTtcbiAgICAgICAgICAgICAgdmFyIGNhdCA9IGdldENhdChpKTtcblxuICAgICAgICAgICAgICBpZiAoIWNhdCkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhRm9ybWF0LmlzRm9ybWF0WFkoKSkge1xuICAgICAgICAgICAgICAgICAgY2F0ID0gc2VyaWVzW3NJXS5kYXRhW2ldLng7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhRm9ybWF0LmlzRm9ybWF0MkRBcnJheSgpKSB7XG4gICAgICAgICAgICAgICAgICBjYXQgPSBzZXJpZXNbc0ldLmRhdGFbaV0gPyBzZXJpZXNbc0ldLmRhdGFbaV1bMF0gOiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoc0kgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goY2F0KTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aDsgY2krKykge1xuICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHcuZ2xvYmFscy5zZXJpZXNbY2ldW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2NhbmRsZXN0aWNrJyB8fCBzLnR5cGUgJiYgcy50eXBlID09PSAnY2FuZGxlc3RpY2snKSB7XG4gICAgICAgICAgICAgICAgY29sdW1ucy5wb3AoKTtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2gody5nbG9iYWxzLnNlcmllc0NhbmRsZU9bc0ldW2ldKTtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2gody5nbG9iYWxzLnNlcmllc0NhbmRsZUhbc0ldW2ldKTtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2gody5nbG9iYWxzLnNlcmllc0NhbmRsZUxbc0ldW2ldKTtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2gody5nbG9iYWxzLnNlcmllc0NhbmRsZUNbc0ldW2ldKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC50eXBlID09PSAncmFuZ2VCYXInKSB7XG4gICAgICAgICAgICAgICAgY29sdW1ucy5wb3AoKTtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2gody5nbG9iYWxzLnNlcmllc1JhbmdlU3RhcnRbc0ldW2ldKTtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2gody5nbG9iYWxzLnNlcmllc1JhbmdlRW5kW3NJXVtpXSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoY29sdW1ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByb3dzLnB1c2goY29sdW1ucy5qb2luKGNvbHVtbkRlbGltaXRlcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbHVtbnMucHVzaCgnY2F0ZWdvcnknKTtcbiAgICAgICAgc2VyaWVzLm1hcChmdW5jdGlvbiAocywgc0kpIHtcbiAgICAgICAgICBpZiAody5nbG9iYWxzLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChzLm5hbWUgPyBzLm5hbWUgOiBcInNlcmllcy1cIi5jb25jYXQoc0kpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdy5nbG9iYWxzLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2goJ3ZhbHVlJyk7XG4gICAgICAgICAgcm93cy5wdXNoKGNvbHVtbnMuam9pbihjb2x1bW5EZWxpbWl0ZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlcmllcy5tYXAoZnVuY3Rpb24gKHMsIHNJKSB7XG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgICBoYW5kbGVBeGlzUm93c0NvbHVtbnMocywgc0kpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2x1bW5zID0gW107XG4gICAgICAgICAgICBjb2x1bW5zLnB1c2gody5nbG9iYWxzLmxhYmVsc1tzSV0pO1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKHcuZ2xvYmFscy5zZXJpZXNbc0ldKTtcbiAgICAgICAgICAgIHJvd3MucHVzaChjb2x1bW5zLmpvaW4oY29sdW1uRGVsaW1pdGVyKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0ICs9IHJvd3Muam9pbihsaW5lRGVsaW1pdGVyKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyRG93bmxvYWQoZW5jb2RlVVJJKHJlc3VsdCksICcuY3N2Jyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRyaWdnZXJEb3dubG9hZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRyaWdnZXJEb3dubG9hZChocmVmLCBleHQpIHtcbiAgICAgICAgdmFyIGRvd25sb2FkTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgZG93bmxvYWRMaW5rLmhyZWYgPSBocmVmO1xuICAgICAgICBkb3dubG9hZExpbmsuZG93bmxvYWQgPSB0aGlzLncuZ2xvYmFscy5jaGFydElEICsgZXh0O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvd25sb2FkTGluayk7XG4gICAgICAgIGRvd25sb2FkTGluay5jbGljaygpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRvd25sb2FkTGluayk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEV4cG9ydHM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBYQXhpcyBDbGFzcyBmb3IgZHJhd2luZyBYLUF4aXMuXG4gICAqXG4gICAqIEBtb2R1bGUgWEF4aXNcbiAgICoqL1xuXG4gIHZhciBYQXhpcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWEF4aXMoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWEF4aXMpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICB0aGlzLmF4ZXNVdGlscyA9IG5ldyBBeGVzVXRpbHMoY3R4KTtcbiAgICAgIHRoaXMueGF4aXNMYWJlbHMgPSB3Lmdsb2JhbHMubGFiZWxzLnNsaWNlKCk7XG5cbiAgICAgIGlmICh3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzLmxlbmd0aCA+IDAgJiYgIXcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwpIHtcbiAgICAgICAgLy8gIHRpbWVsaW5lIGxhYmVscyBhcmUgdGhlcmUgYW5kIGNoYXJ0IGlzIG5vdCByYW5nZWFiciB0aW1lbGluZVxuICAgICAgICB0aGlzLnhheGlzTGFiZWxzID0gdy5nbG9iYWxzLnRpbWVzY2FsZUxhYmVscy5zbGljZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRyYXduTGFiZWxzID0gW107XG4gICAgICB0aGlzLmRyYXduTGFiZWxzUmVjdHMgPSBbXTtcblxuICAgICAgaWYgKHcuY29uZmlnLnhheGlzLnBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICB0aGlzLm9mZlkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vZmZZID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQgKyAxO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9mZlkgPSB0aGlzLm9mZlkgKyB3LmNvbmZpZy54YXhpcy5heGlzQm9yZGVyLm9mZnNldFk7XG4gICAgICB0aGlzLmlzQ2F0ZWdvcnlCYXJIb3Jpem9udGFsID0gdy5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2JhcicgJiYgdy5jb25maWcucGxvdE9wdGlvbnMuYmFyLmhvcml6b250YWw7XG4gICAgICB0aGlzLnhheGlzRm9udFNpemUgPSB3LmNvbmZpZy54YXhpcy5sYWJlbHMuc3R5bGUuZm9udFNpemU7XG4gICAgICB0aGlzLnhheGlzRm9udEZhbWlseSA9IHcuY29uZmlnLnhheGlzLmxhYmVscy5zdHlsZS5mb250RmFtaWx5O1xuICAgICAgdGhpcy54YXhpc0ZvcmVDb2xvcnMgPSB3LmNvbmZpZy54YXhpcy5sYWJlbHMuc3R5bGUuY29sb3JzO1xuICAgICAgdGhpcy54YXhpc0JvcmRlcldpZHRoID0gdy5jb25maWcueGF4aXMuYXhpc0JvcmRlci53aWR0aDtcblxuICAgICAgaWYgKHRoaXMuaXNDYXRlZ29yeUJhckhvcml6b250YWwpIHtcbiAgICAgICAgdGhpcy54YXhpc0JvcmRlcldpZHRoID0gdy5jb25maWcueWF4aXNbMF0uYXhpc0JvcmRlci53aWR0aC50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy54YXhpc0JvcmRlcldpZHRoLmluZGV4T2YoJyUnKSA+IC0xKSB7XG4gICAgICAgIHRoaXMueGF4aXNCb3JkZXJXaWR0aCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggKiBwYXJzZUludCh0aGlzLnhheGlzQm9yZGVyV2lkdGgsIDEwKSAvIDEwMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMueGF4aXNCb3JkZXJXaWR0aCA9IHBhcnNlSW50KHRoaXMueGF4aXNCb3JkZXJXaWR0aCwgMTApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnhheGlzQm9yZGVySGVpZ2h0ID0gdy5jb25maWcueGF4aXMuYXhpc0JvcmRlci5oZWlnaHQ7IC8vIEZvciBiYXJzLCB3ZSB3aWxsIG9ubHkgY29uc2lkZXIgc2luZ2xlIHkgeGFpcyxcbiAgICAgIC8vIGFzIHdlIGFyZSBub3QgcHJvdmlkaW5nIG11bHRpcGxlIHlheGlzIGZvciBiYXIgY2hhcnRzXG5cbiAgICAgIHRoaXMueWF4aXMgPSB3LmNvbmZpZy55YXhpc1swXTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoWEF4aXMsIFt7XG4gICAgICBrZXk6IFwiZHJhd1hheGlzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1hheGlzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZWxYYXhpcyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMteGF4aXMnLFxuICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHcuY29uZmlnLnhheGlzLm9mZnNldFgsIFwiLCBcIikuY29uY2F0KHcuY29uZmlnLnhheGlzLm9mZnNldFksIFwiKVwiKVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGVsWGF4aXNUZXh0cyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMteGF4aXMtdGV4dHMtZycsXG4gICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZShcIi5jb25jYXQody5nbG9iYWxzLnRyYW5zbGF0ZVhBeGlzWCwgXCIsIFwiKS5jb25jYXQody5nbG9iYWxzLnRyYW5zbGF0ZVhBeGlzWSwgXCIpXCIpXG4gICAgICAgIH0pO1xuICAgICAgICBlbFhheGlzLmFkZChlbFhheGlzVGV4dHMpO1xuICAgICAgICB2YXIgY29sV2lkdGg7IC8vIGluaXRpYWwgeCBQb3NpdGlvbiAoa2VlcCBhZGRpbmcgY29sdW1uIHdpZHRoIGluIHRoZSBsb29wKVxuXG4gICAgICAgIHZhciB4UG9zID0gdy5nbG9iYWxzLnBhZEhvcml6b250YWw7XG4gICAgICAgIHZhciBsYWJlbHMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMueGF4aXNMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsYWJlbHMucHVzaCh0aGlzLnhheGlzTGFiZWxzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsYWJlbHNMZW4gPSBsYWJlbHMubGVuZ3RoO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgIHZhciBsZW4gPSBsYWJlbHNMZW4gPiAxID8gbGFiZWxzTGVuIC0gMSA6IGxhYmVsc0xlbjtcbiAgICAgICAgICBjb2xXaWR0aCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLyBsZW47XG4gICAgICAgICAgeFBvcyA9IHhQb3MgKyBjb2xXaWR0aCAvIDIgKyB3LmNvbmZpZy54YXhpcy5sYWJlbHMub2Zmc2V0WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb2xXaWR0aCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLyBsYWJlbHMubGVuZ3RoO1xuICAgICAgICAgIHhQb3MgPSB4UG9zICsgY29sV2lkdGggKyB3LmNvbmZpZy54YXhpcy5sYWJlbHMub2Zmc2V0WDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5sYWJlbHMuc2hvdykge1xuICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHhQb3MgLSBjb2xXaWR0aCAvIDIgKyB3LmNvbmZpZy54YXhpcy5sYWJlbHMub2Zmc2V0WDtcblxuICAgICAgICAgICAgaWYgKF9pID09PSAwICYmIGxhYmVsc0xlbiA9PT0gMSAmJiBjb2xXaWR0aCAvIDIgPT09IHhQb3MgJiYgdy5nbG9iYWxzLmRhdGFQb2ludHMgPT09IDEpIHtcbiAgICAgICAgICAgICAgLy8gc2luZ2xlIGRhdGFwb2ludFxuICAgICAgICAgICAgICB4ID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAvIDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsYWJlbCA9IF90aGlzLmF4ZXNVdGlscy5nZXRMYWJlbChsYWJlbHMsIHcuZ2xvYmFscy50aW1lc2NhbGVMYWJlbHMsIHgsIF9pLCBfdGhpcy5kcmF3bkxhYmVscywgX3RoaXMueGF4aXNGb250U2l6ZSk7XG5cbiAgICAgICAgICAgIHZhciBvZmZzZXRZQ29ycmVjdGlvbiA9IDI4O1xuXG4gICAgICAgICAgICBpZiAody5nbG9iYWxzLnJvdGF0ZVhMYWJlbHMpIHtcbiAgICAgICAgICAgICAgb2Zmc2V0WUNvcnJlY3Rpb24gPSAyMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFiZWwgPSBfdGhpcy5heGVzVXRpbHMuY2hlY2tGb3JPdmVyZmxvd2luZ0xhYmVscyhfaSwgbGFiZWwsIGxhYmVsc0xlbiwgX3RoaXMuZHJhd25MYWJlbHMsIF90aGlzLmRyYXduTGFiZWxzUmVjdHMpO1xuXG4gICAgICAgICAgICB2YXIgZ2V0Q2F0Rm9yZUNvbG9yID0gZnVuY3Rpb24gZ2V0Q2F0Rm9yZUNvbG9yKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdy5jb25maWcueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljID8gX3RoaXMueGF4aXNGb3JlQ29sb3JzW3cuZ2xvYmFscy5taW5YICsgX2kgLSAxXSA6IF90aGlzLnhheGlzRm9yZUNvbG9yc1tfaV07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAobGFiZWwudGV4dCkge1xuICAgICAgICAgICAgICB3Lmdsb2JhbHMueGF4aXNMYWJlbHNDb3VudCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZWxUZXh0ID0gZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgICAgICB4OiBsYWJlbC54LFxuICAgICAgICAgICAgICB5OiBfdGhpcy5vZmZZICsgdy5jb25maWcueGF4aXMubGFiZWxzLm9mZnNldFkgKyBvZmZzZXRZQ29ycmVjdGlvbiAtICh3LmNvbmZpZy54YXhpcy5wb3NpdGlvbiA9PT0gJ3RvcCcgPyB3Lmdsb2JhbHMueEF4aXNIZWlnaHQgKyB3LmNvbmZpZy54YXhpcy5heGlzVGlja3MuaGVpZ2h0IC0gMiA6IDApLFxuICAgICAgICAgICAgICB0ZXh0OiBsYWJlbC50ZXh0LFxuICAgICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogbGFiZWwuaXNCb2xkID8gNjAwIDogdy5jb25maWcueGF4aXMubGFiZWxzLnN0eWxlLmZvbnRXZWlnaHQsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiBfdGhpcy54YXhpc0ZvbnRTaXplLFxuICAgICAgICAgICAgICBmb250RmFtaWx5OiBfdGhpcy54YXhpc0ZvbnRGYW1pbHksXG4gICAgICAgICAgICAgIGZvcmVDb2xvcjogQXJyYXkuaXNBcnJheShfdGhpcy54YXhpc0ZvcmVDb2xvcnMpID8gZ2V0Q2F0Rm9yZUNvbG9yKCkgOiBfdGhpcy54YXhpc0ZvcmVDb2xvcnMsXG4gICAgICAgICAgICAgIGlzUGxhaW5UZXh0OiBmYWxzZSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdhcGV4Y2hhcnRzLXhheGlzLWxhYmVsICcgKyB3LmNvbmZpZy54YXhpcy5sYWJlbHMuc3R5bGUuY3NzQ2xhc3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxYYXhpc1RleHRzLmFkZChlbFRleHQpO1xuICAgICAgICAgICAgdmFyIGVsVG9vbHRpcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHcuZ2xvYmFscy5TVkdOUywgJ3RpdGxlJyk7XG4gICAgICAgICAgICBlbFRvb2x0aXBUaXRsZS50ZXh0Q29udGVudCA9IGxhYmVsLnRleHQ7XG4gICAgICAgICAgICBlbFRleHQubm9kZS5hcHBlbmRDaGlsZChlbFRvb2x0aXBUaXRsZSk7XG5cbiAgICAgICAgICAgIGlmIChsYWJlbC50ZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICBfdGhpcy5kcmF3bkxhYmVscy5wdXNoKGxhYmVsLnRleHQpO1xuXG4gICAgICAgICAgICAgIF90aGlzLmRyYXduTGFiZWxzUmVjdHMucHVzaChsYWJlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHhQb3MgPSB4UG9zICsgY29sV2lkdGg7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPD0gbGFiZWxzTGVuIC0gMTsgX2krKykge1xuICAgICAgICAgICAgX2xvb3AoX2kpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgZWxYYXhpc1RpdGxlID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXhheGlzLXRpdGxlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBlbFhBeGlzVGl0bGVUZXh0ID0gZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgICAgeDogdy5nbG9iYWxzLmdyaWRXaWR0aCAvIDIgKyB3LmNvbmZpZy54YXhpcy50aXRsZS5vZmZzZXRYLFxuICAgICAgICAgICAgeTogdGhpcy5vZmZZIC0gcGFyc2VGbG9hdCh0aGlzLnhheGlzRm9udFNpemUpICsgdy5nbG9iYWxzLnhBeGlzTGFiZWxzSGVpZ2h0ICsgdy5jb25maWcueGF4aXMudGl0bGUub2Zmc2V0WSxcbiAgICAgICAgICAgIHRleHQ6IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQsXG4gICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiB3LmNvbmZpZy54YXhpcy50aXRsZS5zdHlsZS5mb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHcuY29uZmlnLnhheGlzLnRpdGxlLnN0eWxlLmZvbnRGYW1pbHksXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB3LmNvbmZpZy54YXhpcy50aXRsZS5zdHlsZS5mb250V2VpZ2h0LFxuICAgICAgICAgICAgZm9yZUNvbG9yOiB3LmNvbmZpZy54YXhpcy50aXRsZS5zdHlsZS5jb2xvcixcbiAgICAgICAgICAgIGNzc0NsYXNzOiAnYXBleGNoYXJ0cy14YXhpcy10aXRsZS10ZXh0ICcgKyB3LmNvbmZpZy54YXhpcy50aXRsZS5zdHlsZS5jc3NDbGFzc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsWGF4aXNUaXRsZS5hZGQoZWxYQXhpc1RpdGxlVGV4dCk7XG4gICAgICAgICAgZWxYYXhpcy5hZGQoZWxYYXhpc1RpdGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5heGlzQm9yZGVyLnNob3cpIHtcbiAgICAgICAgICB2YXIgbGluZUNvcnJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdiYXInICYmIHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgICBsaW5lQ29ycmVjdGlvbiA9IGxpbmVDb3JyZWN0aW9uIC0gMTU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGVsSG9yekxpbmUgPSBncmFwaGljcy5kcmF3TGluZSh3Lmdsb2JhbHMucGFkSG9yaXpvbnRhbCArIGxpbmVDb3JyZWN0aW9uICsgdy5jb25maWcueGF4aXMuYXhpc0JvcmRlci5vZmZzZXRYLCB0aGlzLm9mZlksIHRoaXMueGF4aXNCb3JkZXJXaWR0aCwgdGhpcy5vZmZZLCB3LmNvbmZpZy54YXhpcy5heGlzQm9yZGVyLmNvbG9yLCAwLCB0aGlzLnhheGlzQm9yZGVySGVpZ2h0KTtcbiAgICAgICAgICBlbFhheGlzLmFkZChlbEhvcnpMaW5lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbFhheGlzO1xuICAgICAgfSAvLyB0aGlzIGFjdHVhbGx5IGJlY29tZXMgdGhlIHZlcnRpY2FsIGF4aXMgKGZvciBiYXIgY2hhcnRzKVxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdYYXhpc0ludmVyc2VkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1hheGlzSW52ZXJzZWQocmVhbEluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgdHJhbnNsYXRlWUF4aXNYID0gdy5jb25maWcueWF4aXNbMF0ub3Bwb3NpdGUgPyB3Lmdsb2JhbHMudHJhbnNsYXRlWUF4aXNYW3JlYWxJbmRleF0gOiAwO1xuICAgICAgICB2YXIgZWxZYXhpcyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMteWF4aXMgYXBleGNoYXJ0cy14YXhpcy1pbnZlcnNlZCcsXG4gICAgICAgICAgcmVsOiByZWFsSW5kZXhcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBlbFlheGlzVGV4dHMgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXlheGlzLXRleHRzLWcgYXBleGNoYXJ0cy14YXhpcy1pbnZlcnNlZC10ZXh0cy1nJyxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIHRyYW5zbGF0ZVlBeGlzWCArICcsIDApJ1xuICAgICAgICB9KTtcbiAgICAgICAgZWxZYXhpcy5hZGQoZWxZYXhpc1RleHRzKTtcbiAgICAgICAgdmFyIGNvbEhlaWdodDsgLy8gaW5pdGlhbCB4IFBvc2l0aW9uIChrZWVwIGFkZGluZyBjb2x1bW4gd2lkdGggaW4gdGhlIGxvb3ApXG5cbiAgICAgICAgdmFyIHlQb3M7XG4gICAgICAgIHZhciBsYWJlbHMgPSBbXTtcblxuICAgICAgICBpZiAody5jb25maWcueWF4aXNbcmVhbEluZGV4XS5zaG93KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnhheGlzTGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsYWJlbHMucHVzaCh0aGlzLnhheGlzTGFiZWxzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb2xIZWlnaHQgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIGxhYmVscy5sZW5ndGg7XG4gICAgICAgIHlQb3MgPSAtKGNvbEhlaWdodCAvIDIuMik7XG4gICAgICAgIHZhciBsYkZvcm1hdHRlciA9IHcuZ2xvYmFscy55TGFiZWxGb3JtYXR0ZXJzWzBdO1xuICAgICAgICB2YXIgeWxhYmVscyA9IHcuY29uZmlnLnlheGlzWzBdLmxhYmVscztcblxuICAgICAgICBpZiAoeWxhYmVscy5zaG93KSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDw9IGxhYmVscy5sZW5ndGggLSAxOyBfaTIrKykge1xuICAgICAgICAgICAgdmFyIGxhYmVsID0gdHlwZW9mIGxhYmVsc1tfaTJdID09PSAndW5kZWZpbmVkJyA/ICcnIDogbGFiZWxzW19pMl07XG4gICAgICAgICAgICBsYWJlbCA9IGxiRm9ybWF0dGVyKGxhYmVsLCB7XG4gICAgICAgICAgICAgIHNlcmllc0luZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBfaTIsXG4gICAgICAgICAgICAgIHc6IHdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIG11bHRpWSA9IDA7XG5cbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGxhYmVsKSkge1xuICAgICAgICAgICAgICBtdWx0aVkgPSBsYWJlbC5sZW5ndGggLyAyICogcGFyc2VJbnQoeWxhYmVscy5zdHlsZS5mb250U2l6ZSwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZWxMYWJlbCA9IGdyYXBoaWNzLmRyYXdUZXh0KHtcbiAgICAgICAgICAgICAgeDogeWxhYmVscy5vZmZzZXRYIC0gMTUsXG4gICAgICAgICAgICAgIHk6IHlQb3MgKyBjb2xIZWlnaHQgKyB5bGFiZWxzLm9mZnNldFkgLSBtdWx0aVksXG4gICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICB0ZXh0QW5jaG9yOiB0aGlzLnlheGlzLm9wcG9zaXRlID8gJ3N0YXJ0JyA6ICdlbmQnLFxuICAgICAgICAgICAgICBmb3JlQ29sb3I6IEFycmF5LmlzQXJyYXkoeWxhYmVscy5zdHlsZS5jb2xvcnMpID8geWxhYmVscy5zdHlsZS5jb2xvcnNbX2kyXSA6IHlsYWJlbHMuc3R5bGUuY29sb3JzLFxuICAgICAgICAgICAgICBmb250U2l6ZTogeWxhYmVscy5zdHlsZS5mb250U2l6ZSxcbiAgICAgICAgICAgICAgZm9udEZhbWlseTogeWxhYmVscy5zdHlsZS5mb250RmFtaWx5LFxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiB5bGFiZWxzLnN0eWxlLmZvbnRXZWlnaHQsXG4gICAgICAgICAgICAgIGlzUGxhaW5UZXh0OiBmYWxzZSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdhcGV4Y2hhcnRzLXlheGlzLWxhYmVsICcgKyB5bGFiZWxzLnN0eWxlLmNzc0NsYXNzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsWWF4aXNUZXh0cy5hZGQoZWxMYWJlbCk7XG4gICAgICAgICAgICB2YXIgZWxUb29sdGlwVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMody5nbG9iYWxzLlNWR05TLCAndGl0bGUnKTtcbiAgICAgICAgICAgIGVsVG9vbHRpcFRpdGxlLnRleHRDb250ZW50ID0gbGFiZWwudGV4dDtcbiAgICAgICAgICAgIGVsTGFiZWwubm9kZS5hcHBlbmRDaGlsZChlbFRvb2x0aXBUaXRsZSk7XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLmxhYmVscy5yb3RhdGUgIT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIGxhYmVsUm90YXRpbmdDZW50ZXIgPSBncmFwaGljcy5yb3RhdGVBcm91bmRDZW50ZXIoZWxMYWJlbC5ub2RlKTtcbiAgICAgICAgICAgICAgZWxMYWJlbC5ub2RlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgXCJyb3RhdGUoXCIuY29uY2F0KHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0ubGFiZWxzLnJvdGF0ZSwgXCIgMCBcIikuY29uY2F0KGxhYmVsUm90YXRpbmdDZW50ZXIueSwgXCIpXCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeVBvcyA9IHlQb3MgKyBjb2xIZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBlbFhheGlzVGl0bGUgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMteWF4aXMtdGl0bGUgYXBleGNoYXJ0cy14YXhpcy10aXRsZS1pbnZlcnNlZCcsXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIHRyYW5zbGF0ZVlBeGlzWCArICcsIDApJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBlbFhBeGlzVGl0bGVUZXh0ID0gZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC8gMixcbiAgICAgICAgICAgIHRleHQ6IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQsXG4gICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGZvcmVDb2xvcjogdy5jb25maWcueWF4aXNbMF0udGl0bGUuc3R5bGUuY29sb3IsXG4gICAgICAgICAgICBmb250U2l6ZTogdy5jb25maWcueWF4aXNbMF0udGl0bGUuc3R5bGUuZm9udFNpemUsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB3LmNvbmZpZy55YXhpc1swXS50aXRsZS5zdHlsZS5mb250V2VpZ2h0LFxuICAgICAgICAgICAgZm9udEZhbWlseTogdy5jb25maWcueWF4aXNbMF0udGl0bGUuc3R5bGUuZm9udEZhbWlseSxcbiAgICAgICAgICAgIGNzc0NsYXNzOiAnYXBleGNoYXJ0cy15YXhpcy10aXRsZS10ZXh0ICcgKyB3LmNvbmZpZy55YXhpc1swXS50aXRsZS5zdHlsZS5jc3NDbGFzc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsWGF4aXNUaXRsZS5hZGQoZWxYQXhpc1RpdGxlVGV4dCk7XG4gICAgICAgICAgZWxZYXhpcy5hZGQoZWxYYXhpc1RpdGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZYID0gMDtcblxuICAgICAgICBpZiAodGhpcy5pc0NhdGVnb3J5QmFySG9yaXpvbnRhbCAmJiB3LmNvbmZpZy55YXhpc1swXS5vcHBvc2l0ZSkge1xuICAgICAgICAgIG9mZlggPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGF4aXNCb3JkZXIgPSB3LmNvbmZpZy54YXhpcy5heGlzQm9yZGVyO1xuXG4gICAgICAgIGlmIChheGlzQm9yZGVyLnNob3cpIHtcbiAgICAgICAgICB2YXIgZWxWZXJ0aWNhbExpbmUgPSBncmFwaGljcy5kcmF3TGluZSh3Lmdsb2JhbHMucGFkSG9yaXpvbnRhbCArIGF4aXNCb3JkZXIub2Zmc2V0WCArIG9mZlgsIDEgKyBheGlzQm9yZGVyLm9mZnNldFksIHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsICsgYXhpc0JvcmRlci5vZmZzZXRYICsgb2ZmWCwgdy5nbG9iYWxzLmdyaWRIZWlnaHQgKyBheGlzQm9yZGVyLm9mZnNldFksIGF4aXNCb3JkZXIuY29sb3IsIDApO1xuICAgICAgICAgIGVsWWF4aXMuYWRkKGVsVmVydGljYWxMaW5lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1swXS5heGlzVGlja3Muc2hvdykge1xuICAgICAgICAgIHRoaXMuYXhlc1V0aWxzLmRyYXdZQXhpc1RpY2tzKG9mZlgsIGxhYmVscy5sZW5ndGgsIHcuY29uZmlnLnlheGlzWzBdLmF4aXNCb3JkZXIsIHcuY29uZmlnLnlheGlzWzBdLmF4aXNUaWNrcywgMCwgY29sSGVpZ2h0LCBlbFlheGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbFlheGlzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3WGF4aXNUaWNrc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdYYXhpc1RpY2tzKHgxLCBhcHBlbmRUb0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB4MiA9IHgxO1xuICAgICAgICBpZiAoeDEgPCAwIHx8IHgxIC0gMiA+IHcuZ2xvYmFscy5ncmlkV2lkdGgpIHJldHVybjtcbiAgICAgICAgdmFyIHkxID0gdGhpcy5vZmZZICsgdy5jb25maWcueGF4aXMuYXhpc1RpY2tzLm9mZnNldFk7XG4gICAgICAgIHZhciB5MiA9IHkxICsgdy5jb25maWcueGF4aXMuYXhpc1RpY2tzLmhlaWdodDtcblxuICAgICAgICBpZiAody5jb25maWcueGF4aXMucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgeTIgPSB5MSAtIHcuY29uZmlnLnhheGlzLmF4aXNUaWNrcy5oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5jb25maWcueGF4aXMuYXhpc1RpY2tzLnNob3cpIHtcbiAgICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICAgIHZhciBsaW5lID0gZ3JhcGhpY3MuZHJhd0xpbmUoeDEgKyB3LmNvbmZpZy54YXhpcy5heGlzVGlja3Mub2Zmc2V0WCwgeTEgKyB3LmNvbmZpZy54YXhpcy5vZmZzZXRZLCB4MiArIHcuY29uZmlnLnhheGlzLmF4aXNUaWNrcy5vZmZzZXRYLCB5MiArIHcuY29uZmlnLnhheGlzLm9mZnNldFksIHcuY29uZmlnLnhheGlzLmF4aXNUaWNrcy5jb2xvcik7IC8vIHdlIGFyZSBub3QgcmV0dXJuaW5nIGFueXRoaW5nLCBidXQgYXBwZW5kaW5nIGRpcmVjdGx5IHRvIHRoZSBlbGVtZW50IHBhc2VkIGluIHBhcmFtXG5cbiAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQuYWRkKGxpbmUpO1xuICAgICAgICAgIGxpbmUubm9kZS5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXhheGlzLXRpY2snKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRYQXhpc1RpY2tzUG9zaXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0WEF4aXNUaWNrc1Bvc2l0aW9ucygpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB4QXhpc1RpY2tzUG9zaXRpb25zID0gW107XG4gICAgICAgIHZhciB4Q291bnQgPSB0aGlzLnhheGlzTGFiZWxzLmxlbmd0aDtcbiAgICAgICAgdmFyIHgxID0gdy5nbG9iYWxzLnBhZEhvcml6b250YWw7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy50aW1lc2NhbGVMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHgxID0gdGhpcy54YXhpc0xhYmVsc1tpXS5wb3NpdGlvbjtcbiAgICAgICAgICAgIHhBeGlzVGlja3NQb3NpdGlvbnMucHVzaCh4MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB4Q291bnRGb3JDYXRlZ29yeUNoYXJ0cyA9IHhDb3VudDtcblxuICAgICAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IHhDb3VudEZvckNhdGVnb3J5Q2hhcnRzOyBfaTMrKykge1xuICAgICAgICAgICAgdmFyIHgxQ291bnQgPSB4Q291bnRGb3JDYXRlZ29yeUNoYXJ0cztcblxuICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljICYmIHcuY29uZmlnLmNoYXJ0LnR5cGUgIT09ICdiYXInKSB7XG4gICAgICAgICAgICAgIHgxQ291bnQgLT0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeDEgPSB4MSArIHcuZ2xvYmFscy5ncmlkV2lkdGggLyB4MUNvdW50O1xuICAgICAgICAgICAgeEF4aXNUaWNrc1Bvc2l0aW9ucy5wdXNoKHgxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geEF4aXNUaWNrc1Bvc2l0aW9ucztcbiAgICAgIH0gLy8gdG8gcm90YXRlIHgtYXhpcyBsYWJlbHMgb3IgdG8gcHV0IC4uLiBmb3IgbG9uZ2VyIHRleHQgaW4geGF4aXNcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ4QXhpc0xhYmVsQ29ycmVjdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB4QXhpc0xhYmVsQ29ycmVjdGlvbnMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgeEF4aXMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy14YXhpcy10ZXh0cy1nJyk7XG4gICAgICAgIHZhciB4QXhpc1RleHRzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbCgnLmFwZXhjaGFydHMteGF4aXMtdGV4dHMtZyB0ZXh0Jyk7XG4gICAgICAgIHZhciB5QXhpc1RleHRzSW52ZXJzZWQgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy15YXhpcy1pbnZlcnNlZCB0ZXh0Jyk7XG4gICAgICAgIHZhciB4QXhpc1RleHRzSW52ZXJzZWQgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy14YXhpcy1pbnZlcnNlZC10ZXh0cy1nIHRleHQgdHNwYW4nKTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLnJvdGF0ZVhMYWJlbHMgfHwgdy5jb25maWcueGF4aXMubGFiZWxzLnJvdGF0ZUFsd2F5cykge1xuICAgICAgICAgIGZvciAodmFyIHhhdCA9IDA7IHhhdCA8IHhBeGlzVGV4dHMubGVuZ3RoOyB4YXQrKykge1xuICAgICAgICAgICAgdmFyIHRleHRSb3RhdGluZ0NlbnRlciA9IGdyYXBoaWNzLnJvdGF0ZUFyb3VuZENlbnRlcih4QXhpc1RleHRzW3hhdF0pO1xuICAgICAgICAgICAgdGV4dFJvdGF0aW5nQ2VudGVyLnkgPSB0ZXh0Um90YXRpbmdDZW50ZXIueSAtIDE7IC8vICsgdGlja1dpZHRoLzQ7XG5cbiAgICAgICAgICAgIHRleHRSb3RhdGluZ0NlbnRlci54ID0gdGV4dFJvdGF0aW5nQ2VudGVyLnggKyAxO1xuICAgICAgICAgICAgeEF4aXNUZXh0c1t4YXRdLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgXCJyb3RhdGUoXCIuY29uY2F0KHcuY29uZmlnLnhheGlzLmxhYmVscy5yb3RhdGUsIFwiIFwiKS5jb25jYXQodGV4dFJvdGF0aW5nQ2VudGVyLngsIFwiIFwiKS5jb25jYXQodGV4dFJvdGF0aW5nQ2VudGVyLnksIFwiKVwiKSk7XG4gICAgICAgICAgICB4QXhpc1RleHRzW3hhdF0uc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsIFwiZW5kXCIpO1xuICAgICAgICAgICAgdmFyIG9mZnNldEhlaWdodCA9IDEwO1xuICAgICAgICAgICAgeEF4aXMuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZSgwLCBcIi5jb25jYXQoLW9mZnNldEhlaWdodCwgXCIpXCIpKTtcbiAgICAgICAgICAgIHZhciB0U3BhbiA9IHhBeGlzVGV4dHNbeGF0XS5jaGlsZE5vZGVzO1xuXG4gICAgICAgICAgICBpZiAody5jb25maWcueGF4aXMubGFiZWxzLnRyaW0pIHtcbiAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0U3BhbiwgZnVuY3Rpb24gKHRzKSB7XG4gICAgICAgICAgICAgICAgZ3JhcGhpY3MucGxhY2VUZXh0V2l0aEVsbGlwc2lzKHRzLCB0cy50ZXh0Q29udGVudCwgdy5jb25maWcueGF4aXMubGFiZWxzLm1heEhlaWdodCAtICh3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24gPT09ICdib3R0b20nID8gMjAgOiAxMCkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLyAody5nbG9iYWxzLmxhYmVscy5sZW5ndGggKyAxKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgX3hhdCA9IDA7IF94YXQgPCB4QXhpc1RleHRzLmxlbmd0aDsgX3hhdCsrKSB7XG4gICAgICAgICAgICAgIHZhciBfdFNwYW4gPSB4QXhpc1RleHRzW194YXRdLmNoaWxkTm9kZXM7XG5cbiAgICAgICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmxhYmVscy50cmltICYmIHcuY29uZmlnLnhheGlzLnR5cGUgIT09ICdkYXRldGltZScpIHtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKF90U3BhbiwgZnVuY3Rpb24gKHRzKSB7XG4gICAgICAgICAgICAgICAgICBncmFwaGljcy5wbGFjZVRleHRXaXRoRWxsaXBzaXModHMsIHRzLnRleHRDb250ZW50LCB3aWR0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHlBeGlzVGV4dHNJbnZlcnNlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gdHJ1bmNhdGUgcm90YXRlZCB5IGF4aXMgaW4gYmFyIGNoYXJ0ICh4IGF4aXMpXG4gICAgICAgICAgdmFyIGZpcnN0TGFiZWxQb3NYID0geUF4aXNUZXh0c0ludmVyc2VkW3lBeGlzVGV4dHNJbnZlcnNlZC5sZW5ndGggLSAxXS5nZXRCQm94KCk7XG4gICAgICAgICAgdmFyIGxhc3RMYWJlbFBvc1ggPSB5QXhpc1RleHRzSW52ZXJzZWRbMF0uZ2V0QkJveCgpO1xuXG4gICAgICAgICAgaWYgKGZpcnN0TGFiZWxQb3NYLnggPCAtMjApIHtcbiAgICAgICAgICAgIHlBeGlzVGV4dHNJbnZlcnNlZFt5QXhpc1RleHRzSW52ZXJzZWQubGVuZ3RoIC0gMV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh5QXhpc1RleHRzSW52ZXJzZWRbeUF4aXNUZXh0c0ludmVyc2VkLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGFzdExhYmVsUG9zWC54ICsgbGFzdExhYmVsUG9zWC53aWR0aCA+IHcuZ2xvYmFscy5ncmlkV2lkdGggJiYgIXcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwpIHtcbiAgICAgICAgICAgIHlBeGlzVGV4dHNJbnZlcnNlZFswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHlBeGlzVGV4dHNJbnZlcnNlZFswXSk7XG4gICAgICAgICAgfSAvLyB0cnVuY2F0ZSByb3RhdGVkIHggYXhpcyBpbiBiYXIgY2hhcnQgKHkgYXhpcylcblxuXG4gICAgICAgICAgZm9yICh2YXIgX3hhdDIgPSAwOyBfeGF0MiA8IHhBeGlzVGV4dHNJbnZlcnNlZC5sZW5ndGg7IF94YXQyKyspIHtcbiAgICAgICAgICAgIGdyYXBoaWNzLnBsYWNlVGV4dFdpdGhFbGxpcHNpcyh4QXhpc1RleHRzSW52ZXJzZWRbX3hhdDJdLCB4QXhpc1RleHRzSW52ZXJzZWRbX3hhdDJdLnRleHRDb250ZW50LCB3LmNvbmZpZy55YXhpc1swXS5sYWJlbHMubWF4V2lkdGggLSBwYXJzZUZsb2F0KHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnN0eWxlLmZvbnRTaXplKSAqIDIgLSAyMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIHJlbmRlclhBeGlzQmFuZHMoKSB7XG4gICAgICAvLyAgIGxldCB3ID0gdGhpcy53O1xuICAgICAgLy8gICBsZXQgcGxvdEJhbmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMody5nbG9iYWxzLlNWR05TLCAncmVjdCcpXG4gICAgICAvLyAgIHcuZ2xvYmFscy5kb20uZWxHcmFwaGljYWwuYWRkKHBsb3RCYW5kKVxuICAgICAgLy8gfVxuXG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFhBeGlzO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgR3JpZCBDbGFzcyBmb3IgZHJhd2luZyBDYXJ0ZXNpYW4gR3JpZC5cbiAgICpcbiAgICogQG1vZHVsZSBHcmlkXG4gICAqKi9cblxuICB2YXIgR3JpZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR3JpZChjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcmlkKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgdGhpcy54YXhpc0xhYmVscyA9IHcuZ2xvYmFscy5sYWJlbHMuc2xpY2UoKTtcbiAgICAgIHRoaXMuYXhlc1V0aWxzID0gbmV3IEF4ZXNVdGlscyhjdHgpO1xuICAgICAgdGhpcy5pc1RpbWVsaW5lQmFyID0gdy5jb25maWcueGF4aXMudHlwZSA9PT0gJ2RhdGV0aW1lJyAmJiB3Lmdsb2JhbHMuc2VyaWVzUmFuZ2VCYXJUaW1lbGluZS5sZW5ndGg7XG5cbiAgICAgIGlmICh3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gIHRpbWVzY2FsZUxhYmVscyBsYWJlbHMgYXJlIHRoZXJlXG4gICAgICAgIHRoaXMueGF4aXNMYWJlbHMgPSB3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzLnNsaWNlKCk7XG4gICAgICB9XG4gICAgfSAvLyB3aGVuIHVzaW5nIHNwYXJrbGluZXMgb3Igd2hlbiBzaG93aW5nIG5vIGdyaWQsIHdlIG5lZWQgdG8gaGF2ZSBhIGdyaWQgYXJlYSB3aGljaCBpcyByZXVzZWQgYXQgbWFueSBwbGFjZXMgZm9yIG90aGVyIGNhbGN1bGF0aW9ucyBhcyB3ZWxsXG5cblxuICAgIF9jcmVhdGVDbGFzcyhHcmlkLCBbe1xuICAgICAga2V5OiBcImRyYXdHcmlkQXJlYVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdHcmlkQXJlYSgpIHtcbiAgICAgICAgdmFyIGVsR3JpZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG5cbiAgICAgICAgaWYgKGVsR3JpZCA9PT0gbnVsbCkge1xuICAgICAgICAgIGVsR3JpZCA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1ncmlkJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsVmVydGljYWxMaW5lID0gZ3JhcGhpY3MuZHJhd0xpbmUody5nbG9iYWxzLnBhZEhvcml6b250YWwsIDEsIHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsLCB3Lmdsb2JhbHMuZ3JpZEhlaWdodCwgJ3RyYW5zcGFyZW50Jyk7XG4gICAgICAgIHZhciBlbEhvcnpMaW5lID0gZ3JhcGhpY3MuZHJhd0xpbmUody5nbG9iYWxzLnBhZEhvcml6b250YWwsIHcuZ2xvYmFscy5ncmlkSGVpZ2h0LCB3Lmdsb2JhbHMuZ3JpZFdpZHRoLCB3Lmdsb2JhbHMuZ3JpZEhlaWdodCwgJ3RyYW5zcGFyZW50Jyk7XG4gICAgICAgIGVsR3JpZC5hZGQoZWxIb3J6TGluZSk7XG4gICAgICAgIGVsR3JpZC5hZGQoZWxWZXJ0aWNhbExpbmUpO1xuICAgICAgICByZXR1cm4gZWxHcmlkO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3R3JpZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdHcmlkKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGVsZ3JpZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKGdsLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICAvLyBncmlkIGlzIGRyYXduIGFmdGVyIHhheGlzIGFuZCB5YXhpcyBhcmUgZHJhd25cbiAgICAgICAgICBlbGdyaWQgPSB0aGlzLnJlbmRlckdyaWQoKTtcbiAgICAgICAgICB0aGlzLmRyYXdHcmlkQXJlYShlbGdyaWQuZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZ3JpZDtcbiAgICAgIH0gLy8gVGhpcyBtYXNrIHdpbGwgY2xpcCBvZmYgb3ZlcmZsb3dpbmcgZ3JhcGhpY3MgZnJvbSB0aGUgZHJhd2FibGUgYXJlYVxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImNyZWF0ZUdyaWRNYXNrXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlR3JpZE1hc2soKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ2wgPSB3Lmdsb2JhbHM7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBzdHJva2VTaXplID0gQXJyYXkuaXNBcnJheSh3LmNvbmZpZy5zdHJva2Uud2lkdGgpID8gMCA6IHcuY29uZmlnLnN0cm9rZS53aWR0aDtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh3LmNvbmZpZy5zdHJva2Uud2lkdGgpKSB7XG4gICAgICAgICAgdmFyIHN0cm9rZU1heFNpemUgPSAwO1xuICAgICAgICAgIHcuY29uZmlnLnN0cm9rZS53aWR0aC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBzdHJva2VNYXhTaXplID0gTWF0aC5tYXgoc3Ryb2tlTWF4U2l6ZSwgbSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3Ryb2tlU2l6ZSA9IHN0cm9rZU1heFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBnbC5kb20uZWxHcmlkUmVjdE1hc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZ2wuU1ZHTlMsICdjbGlwUGF0aCcpO1xuICAgICAgICBnbC5kb20uZWxHcmlkUmVjdE1hc2suc2V0QXR0cmlidXRlKCdpZCcsIFwiZ3JpZFJlY3RNYXNrXCIuY29uY2F0KGdsLmN1aWQpKTtcbiAgICAgICAgZ2wuZG9tLmVsR3JpZFJlY3RNYXJrZXJNYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGdsLlNWR05TLCAnY2xpcFBhdGgnKTtcbiAgICAgICAgZ2wuZG9tLmVsR3JpZFJlY3RNYXJrZXJNYXNrLnNldEF0dHJpYnV0ZSgnaWQnLCBcImdyaWRSZWN0TWFya2VyTWFza1wiLmNvbmNhdChnbC5jdWlkKSk7IC8vIGxldCBiYXJIYWxmV2lkdGggPSAwXG5cbiAgICAgICAgdmFyIHR5cGUgPSB3LmNvbmZpZy5jaGFydC50eXBlO1xuICAgICAgICB2YXIgaGFzQmFyID0gdHlwZSA9PT0gJ2JhcicgfHwgdHlwZSA9PT0gJ3JhbmdlQmFyJyB8fCB3Lmdsb2JhbHMuY29tYm9CYXJDb3VudCA+IDA7XG4gICAgICAgIHZhciBiYXJXaWR0aExlZnQgPSAwO1xuICAgICAgICB2YXIgYmFyV2lkdGhSaWdodCA9IDA7XG5cbiAgICAgICAgaWYgKGhhc0JhciAmJiB3Lmdsb2JhbHMuaXNYTnVtZXJpYyAmJiAhdy5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgIGJhcldpZHRoTGVmdCA9IHcuY29uZmlnLmdyaWQucGFkZGluZy5sZWZ0O1xuICAgICAgICAgIGJhcldpZHRoUmlnaHQgPSB3LmNvbmZpZy5ncmlkLnBhZGRpbmcucmlnaHQ7XG5cbiAgICAgICAgICBpZiAoZ2wuYmFyUGFkRm9yTnVtZXJpY0F4aXMgPiBiYXJXaWR0aExlZnQpIHtcbiAgICAgICAgICAgIGJhcldpZHRoTGVmdCA9IGdsLmJhclBhZEZvck51bWVyaWNBeGlzO1xuICAgICAgICAgICAgYmFyV2lkdGhSaWdodCA9IGdsLmJhclBhZEZvck51bWVyaWNBeGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdsLmRvbS5lbEdyaWRSZWN0ID0gZ3JhcGhpY3MuZHJhd1JlY3QoLXN0cm9rZVNpemUgLyAyIC0gYmFyV2lkdGhMZWZ0IC0gMiwgLXN0cm9rZVNpemUgLyAyLCBnbC5ncmlkV2lkdGggKyBzdHJva2VTaXplICsgYmFyV2lkdGhSaWdodCArIGJhcldpZHRoTGVmdCArIDQsIGdsLmdyaWRIZWlnaHQgKyBzdHJva2VTaXplLCAwLCAnI2ZmZicpO1xuICAgICAgICB2YXIgY29yZVV0aWxzID0gbmV3IENvcmVVdGlscyh0aGlzKTtcbiAgICAgICAgY29yZVV0aWxzLmdldExhcmdlc3RNYXJrZXJTaXplKCk7XG4gICAgICAgIHZhciBtYXJrZXJTaXplID0gdy5nbG9iYWxzLm1hcmtlcnMubGFyZ2VzdFNpemUgKyAxO1xuICAgICAgICBnbC5kb20uZWxHcmlkUmVjdE1hcmtlciA9IGdyYXBoaWNzLmRyYXdSZWN0KC1tYXJrZXJTaXplICogMiwgLW1hcmtlclNpemUgKiAyLCBnbC5ncmlkV2lkdGggKyBtYXJrZXJTaXplICogNCwgZ2wuZ3JpZEhlaWdodCArIG1hcmtlclNpemUgKiA0LCAwLCAnI2ZmZicpO1xuICAgICAgICBnbC5kb20uZWxHcmlkUmVjdE1hc2suYXBwZW5kQ2hpbGQoZ2wuZG9tLmVsR3JpZFJlY3Qubm9kZSk7XG4gICAgICAgIGdsLmRvbS5lbEdyaWRSZWN0TWFya2VyTWFzay5hcHBlbmRDaGlsZChnbC5kb20uZWxHcmlkUmVjdE1hcmtlci5ub2RlKTtcbiAgICAgICAgdmFyIGRlZnMgPSBnbC5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJ2RlZnMnKTtcbiAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChnbC5kb20uZWxHcmlkUmVjdE1hc2spO1xuICAgICAgICBkZWZzLmFwcGVuZENoaWxkKGdsLmRvbS5lbEdyaWRSZWN0TWFya2VyTWFzayk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9kcmF3R3JpZExpbmVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2RyYXdHcmlkTGluZXMoX3JlZikge1xuICAgICAgICB2YXIgaSA9IF9yZWYuaSxcbiAgICAgICAgICAgIHgxID0gX3JlZi54MSxcbiAgICAgICAgICAgIHkxID0gX3JlZi55MSxcbiAgICAgICAgICAgIHgyID0gX3JlZi54MixcbiAgICAgICAgICAgIHkyID0gX3JlZi55MixcbiAgICAgICAgICAgIHhDb3VudCA9IF9yZWYueENvdW50LFxuICAgICAgICAgICAgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIHZhciBzaG91bGREcmF3ID0gZnVuY3Rpb24gc2hvdWxkRHJhdygpIHtcbiAgICAgICAgICBpZiAoaSA9PT0gMCAmJiB3Lmdsb2JhbHMuc2tpcEZpcnN0VGltZWxpbmVsYWJlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpID09PSB4Q291bnQgLSAxICYmIHcuZ2xvYmFscy5za2lwTGFzdFRpbWVsaW5lbGFiZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ3JhZGFyJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzaG91bGREcmF3KCkpIHtcbiAgICAgICAgICBpZiAody5jb25maWcuZ3JpZC54YXhpcy5saW5lcy5zaG93KSB7XG4gICAgICAgICAgICB0aGlzLl9kcmF3R3JpZExpbmUoe1xuICAgICAgICAgICAgICB4MTogeDEsXG4gICAgICAgICAgICAgIHkxOiB5MSxcbiAgICAgICAgICAgICAgeDI6IHgyLFxuICAgICAgICAgICAgICB5MjogeTIsXG4gICAgICAgICAgICAgIHBhcmVudDogcGFyZW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgeEF4aXMgPSBuZXcgWEF4aXModGhpcy5jdHgpO1xuICAgICAgICAgIHhBeGlzLmRyYXdYYXhpc1RpY2tzKHgxLCB0aGlzLmVsZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2RyYXdHcmlkTGluZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kcmF3R3JpZExpbmUoX3JlZjIpIHtcbiAgICAgICAgdmFyIHgxID0gX3JlZjIueDEsXG4gICAgICAgICAgICB5MSA9IF9yZWYyLnkxLFxuICAgICAgICAgICAgeDIgPSBfcmVmMi54MixcbiAgICAgICAgICAgIHkyID0gX3JlZjIueTIsXG4gICAgICAgICAgICBwYXJlbnQgPSBfcmVmMi5wYXJlbnQ7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgc3Ryb2tlRGFzaEFycmF5ID0gdy5jb25maWcuZ3JpZC5zdHJva2VEYXNoQXJyYXk7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzKTtcbiAgICAgICAgdmFyIGxpbmUgPSBncmFwaGljcy5kcmF3TGluZSh4MSwgeTEsIHgyLCB5Miwgdy5jb25maWcuZ3JpZC5ib3JkZXJDb2xvciwgc3Ryb2tlRGFzaEFycmF5KTtcbiAgICAgICAgbGluZS5ub2RlLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtZ3JpZGxpbmUnKTtcbiAgICAgICAgcGFyZW50LmFkZChsaW5lKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2RyYXdHcmlkQmFuZFJlY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZHJhd0dyaWRCYW5kUmVjdChfcmVmMykge1xuICAgICAgICB2YXIgYyA9IF9yZWYzLmMsXG4gICAgICAgICAgICB4MSA9IF9yZWYzLngxLFxuICAgICAgICAgICAgeTEgPSBfcmVmMy55MSxcbiAgICAgICAgICAgIHgyID0gX3JlZjMueDIsXG4gICAgICAgICAgICB5MiA9IF9yZWYzLnkyLFxuICAgICAgICAgICAgdHlwZSA9IF9yZWYzLnR5cGU7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbHVtbicgJiYgdy5jb25maWcueGF4aXMudHlwZSA9PT0gJ2RhdGV0aW1lJykgcmV0dXJuO1xuICAgICAgICB2YXIgY29sb3IgPSB3LmNvbmZpZy5ncmlkW3R5cGVdLmNvbG9yc1tjXTtcbiAgICAgICAgdmFyIHJlY3QgPSBncmFwaGljcy5kcmF3UmVjdCh4MSwgeTEsIHgyLCB5MiwgMCwgY29sb3IsIHcuY29uZmlnLmdyaWRbdHlwZV0ub3BhY2l0eSk7XG4gICAgICAgIHRoaXMuZWxnLmFkZChyZWN0KTtcbiAgICAgICAgcmVjdC5hdHRyKCdjbGlwLXBhdGgnLCBcInVybCgjZ3JpZFJlY3RNYXNrXCIuY29uY2F0KHcuZ2xvYmFscy5jdWlkLCBcIilcIikpO1xuICAgICAgICByZWN0Lm5vZGUuY2xhc3NMaXN0LmFkZChcImFwZXhjaGFydHMtZ3JpZC1cIi5jb25jYXQodHlwZSkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZHJhd1hZTGluZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZHJhd1hZTGluZXMoX3JlZjQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgeENvdW50ID0gX3JlZjQueENvdW50LFxuICAgICAgICAgICAgdGlja0Ftb3VudCA9IF9yZWY0LnRpY2tBbW91bnQ7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIHZhciBkYXRldGltZUxpbmVzID0gZnVuY3Rpb24gZGF0ZXRpbWVMaW5lcyhfcmVmNSkge1xuICAgICAgICAgIHZhciB4QyA9IF9yZWY1LnhDLFxuICAgICAgICAgICAgICB4MSA9IF9yZWY1LngxLFxuICAgICAgICAgICAgICB5MSA9IF9yZWY1LnkxLFxuICAgICAgICAgICAgICB4MiA9IF9yZWY1LngyLFxuICAgICAgICAgICAgICB5MiA9IF9yZWY1LnkyO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4QzsgaSsrKSB7XG4gICAgICAgICAgICB4MSA9IF90aGlzLnhheGlzTGFiZWxzW2ldLnBvc2l0aW9uO1xuICAgICAgICAgICAgeDIgPSBfdGhpcy54YXhpc0xhYmVsc1tpXS5wb3NpdGlvbjtcblxuICAgICAgICAgICAgX3RoaXMuX2RyYXdHcmlkTGluZXMoe1xuICAgICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgICB4MTogeDEsXG4gICAgICAgICAgICAgIHkxOiB5MSxcbiAgICAgICAgICAgICAgeDI6IHgyLFxuICAgICAgICAgICAgICB5MjogeTIsXG4gICAgICAgICAgICAgIHhDb3VudDogeENvdW50LFxuICAgICAgICAgICAgICBwYXJlbnQ6IF90aGlzLmVsZ3JpZExpbmVzVlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjYXRlZ29yeUxpbmVzID0gZnVuY3Rpb24gY2F0ZWdvcnlMaW5lcyhfcmVmNikge1xuICAgICAgICAgIHZhciB4QyA9IF9yZWY2LnhDLFxuICAgICAgICAgICAgICB4MSA9IF9yZWY2LngxLFxuICAgICAgICAgICAgICB5MSA9IF9yZWY2LnkxLFxuICAgICAgICAgICAgICB4MiA9IF9yZWY2LngyLFxuICAgICAgICAgICAgICB5MiA9IF9yZWY2LnkyO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4QyArICh3Lmdsb2JhbHMuaXNYTnVtZXJpYyA/IDAgOiAxKTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCAmJiB4QyA9PT0gMSAmJiB3Lmdsb2JhbHMuZGF0YVBvaW50cyA9PT0gMSkge1xuICAgICAgICAgICAgICAvLyBzaW5nbGUgZGF0YXBvaW50XG4gICAgICAgICAgICAgIHgxID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAvIDI7XG4gICAgICAgICAgICAgIHgyID0geDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzLl9kcmF3R3JpZExpbmVzKHtcbiAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgeDE6IHgxLFxuICAgICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICAgICAgeTI6IHkyLFxuICAgICAgICAgICAgICB4Q291bnQ6IHhDb3VudCxcbiAgICAgICAgICAgICAgcGFyZW50OiBfdGhpcy5lbGdyaWRMaW5lc1ZcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB4MSA9IHgxICsgdy5nbG9iYWxzLmdyaWRXaWR0aCAvICh3Lmdsb2JhbHMuaXNYTnVtZXJpYyA/IHhDIC0gMSA6IHhDKTtcbiAgICAgICAgICAgIHgyID0geDE7XG4gICAgICAgICAgfVxuICAgICAgICB9OyAvLyBkcmF3IHZlcnRpY2FsIGxpbmVzXG5cblxuICAgICAgICBpZiAody5jb25maWcuZ3JpZC54YXhpcy5saW5lcy5zaG93IHx8IHcuY29uZmlnLnhheGlzLmF4aXNUaWNrcy5zaG93KSB7XG4gICAgICAgICAgdmFyIHgxID0gdy5nbG9iYWxzLnBhZEhvcml6b250YWw7XG4gICAgICAgICAgdmFyIHkxID0gMDtcbiAgICAgICAgICB2YXIgeDI7XG4gICAgICAgICAgdmFyIHkyID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQ7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLnRpbWVzY2FsZUxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRhdGV0aW1lTGluZXMoe1xuICAgICAgICAgICAgICB4QzogeENvdW50LFxuICAgICAgICAgICAgICB4MTogeDEsXG4gICAgICAgICAgICAgIHkxOiB5MSxcbiAgICAgICAgICAgICAgeDI6IHgyLFxuICAgICAgICAgICAgICB5MjogeTJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAody5nbG9iYWxzLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICAgICAgeENvdW50ID0gdy5nbG9iYWxzLnhBeGlzU2NhbGUucmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYykge1xuICAgICAgICAgICAgICAvLyBpbiBjYXNlIG9mIGEgY29udmVydGVkQ2F0VG9OdW1lcmljLCBzb21lIGxhYmVscyBtaWdodCBiZSBza2lwcGVkIGR1ZSB0byBoaWRlT3ZlckxhcHBpbmcgbGFiZWxzLCBoZW5jZSB1c2UgdGhpcyB2YXIgdG8gZ2V0IHRoZSB2aXNpYmxlIHRpY2tzXG4gICAgICAgICAgICAgIHhDb3VudCA9IHcuZ2xvYmFscy54YXhpc0xhYmVsc0NvdW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXRlZ29yeUxpbmVzKHtcbiAgICAgICAgICAgICAgeEM6IHhDb3VudCxcbiAgICAgICAgICAgICAgeDE6IHgxLFxuICAgICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICAgICAgeTI6IHkyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZHJhdyBob3Jpem9udGFsIGxpbmVzXG5cblxuICAgICAgICBpZiAody5jb25maWcuZ3JpZC55YXhpcy5saW5lcy5zaG93KSB7XG4gICAgICAgICAgdmFyIF94ID0gMDtcbiAgICAgICAgICB2YXIgX3kgPSAwO1xuICAgICAgICAgIHZhciBfeTIgPSAwO1xuICAgICAgICAgIHZhciBfeDIgPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoO1xuICAgICAgICAgIHZhciB0QSA9IHRpY2tBbW91bnQgKyAxO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaXNUaW1lbGluZUJhcikge1xuICAgICAgICAgICAgdEEgPSB3Lmdsb2JhbHMubGFiZWxzLmxlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRBICsgKHRoaXMuaXNUaW1lbGluZUJhciA/IDEgOiAwKTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9kcmF3R3JpZExpbmUoe1xuICAgICAgICAgICAgICB4MTogX3gsXG4gICAgICAgICAgICAgIHkxOiBfeSxcbiAgICAgICAgICAgICAgeDI6IF94MixcbiAgICAgICAgICAgICAgeTI6IF95MixcbiAgICAgICAgICAgICAgcGFyZW50OiB0aGlzLmVsZ3JpZExpbmVzSFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF95ID0gX3kgKyB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvICh0aGlzLmlzVGltZWxpbmVCYXIgPyB0QSA6IHRpY2tBbW91bnQpO1xuICAgICAgICAgICAgX3kyID0gX3k7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9kcmF3SW52ZXJ0ZWRYWUxpbmVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2RyYXdJbnZlcnRlZFhZTGluZXMoX3JlZjcpIHtcbiAgICAgICAgdmFyIHhDb3VudCA9IF9yZWY3LnhDb3VudDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIGRyYXcgdmVydGljYWwgbGluZXNcblxuICAgICAgICBpZiAody5jb25maWcuZ3JpZC54YXhpcy5saW5lcy5zaG93IHx8IHcuY29uZmlnLnhheGlzLmF4aXNUaWNrcy5zaG93KSB7XG4gICAgICAgICAgdmFyIHgxID0gdy5nbG9iYWxzLnBhZEhvcml6b250YWw7XG4gICAgICAgICAgdmFyIHkxID0gMDtcbiAgICAgICAgICB2YXIgeDI7XG4gICAgICAgICAgdmFyIHkyID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQ7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhDb3VudCArIDE7IGkrKykge1xuICAgICAgICAgICAgaWYgKHcuY29uZmlnLmdyaWQueGF4aXMubGluZXMuc2hvdykge1xuICAgICAgICAgICAgICB0aGlzLl9kcmF3R3JpZExpbmUoe1xuICAgICAgICAgICAgICAgIHgxOiB4MSxcbiAgICAgICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICAgICAgeDI6IHgyLFxuICAgICAgICAgICAgICAgIHkyOiB5MixcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMuZWxncmlkTGluZXNWXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgeEF4aXMgPSBuZXcgWEF4aXModGhpcy5jdHgpO1xuICAgICAgICAgICAgeEF4aXMuZHJhd1hheGlzVGlja3MoeDEsIHRoaXMuZWxnKTtcbiAgICAgICAgICAgIHgxID0geDEgKyB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8geENvdW50ICsgMC4zO1xuICAgICAgICAgICAgeDIgPSB4MTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZHJhdyBob3Jpem9udGFsIGxpbmVzXG5cblxuICAgICAgICBpZiAody5jb25maWcuZ3JpZC55YXhpcy5saW5lcy5zaG93KSB7XG4gICAgICAgICAgdmFyIF94MyA9IDA7XG4gICAgICAgICAgdmFyIF95MyA9IDA7XG4gICAgICAgICAgdmFyIF95NCA9IDA7XG4gICAgICAgICAgdmFyIF94NCA9IHcuZ2xvYmFscy5ncmlkV2lkdGg7XG5cbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdy5nbG9iYWxzLmRhdGFQb2ludHMgKyAxOyBfaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9kcmF3R3JpZExpbmUoe1xuICAgICAgICAgICAgICB4MTogX3gzLFxuICAgICAgICAgICAgICB5MTogX3kzLFxuICAgICAgICAgICAgICB4MjogX3g0LFxuICAgICAgICAgICAgICB5MjogX3k0LFxuICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMuZWxncmlkTGluZXNIXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3kzID0gX3kzICsgdy5nbG9iYWxzLmdyaWRIZWlnaHQgLyB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgICAgIF95NCA9IF95MztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gYWN0dWFsIGdyaWQgcmVuZGVyaW5nXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyR3JpZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckdyaWQoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmVsZyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtZ3JpZCdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxncmlkTGluZXNIID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1ncmlkbGluZXMtaG9yaXpvbnRhbCdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxncmlkTGluZXNWID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1ncmlkbGluZXMtdmVydGljYWwnXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsZy5hZGQodGhpcy5lbGdyaWRMaW5lc0gpO1xuICAgICAgICB0aGlzLmVsZy5hZGQodGhpcy5lbGdyaWRMaW5lc1YpO1xuXG4gICAgICAgIGlmICghdy5jb25maWcuZ3JpZC5zaG93KSB7XG4gICAgICAgICAgdGhpcy5lbGdyaWRMaW5lc1YuaGlkZSgpO1xuICAgICAgICAgIHRoaXMuZWxncmlkTGluZXNILmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB5VGlja0Ftb3VudCA9IHcuZ2xvYmFscy55QXhpc1NjYWxlLmxlbmd0aCA/IHcuZ2xvYmFscy55QXhpc1NjYWxlWzBdLnJlc3VsdC5sZW5ndGggLSAxIDogNTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHcuZ2xvYmFscy55QXhpc1NjYWxlW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgeVRpY2tBbW91bnQgPSB3Lmdsb2JhbHMueUF4aXNTY2FsZVtpXS5yZXN1bHQubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoeVRpY2tBbW91bnQgPiAyKSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB4Q291bnQ7XG5cbiAgICAgICAgaWYgKCF3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsIHx8IHRoaXMuaXNUaW1lbGluZUJhcikge1xuICAgICAgICAgIHhDb3VudCA9IHRoaXMueGF4aXNMYWJlbHMubGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaXNUaW1lbGluZUJhcikge1xuICAgICAgICAgICAgeVRpY2tBbW91bnQgPSB3Lmdsb2JhbHMubGFiZWxzLmxlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9kcmF3WFlMaW5lcyh7XG4gICAgICAgICAgICB4Q291bnQ6IHhDb3VudCxcbiAgICAgICAgICAgIHRpY2tBbW91bnQ6IHlUaWNrQW1vdW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeENvdW50ID0geVRpY2tBbW91bnQ7IC8vIGZvciBob3Jpem9udGFsIGJhciBjaGFydCwgZ2V0IHRoZSB4YXhpcyB0aWNrYW1vdW50XG5cbiAgICAgICAgICB5VGlja0Ftb3VudCA9IHcuZ2xvYmFscy54VGlja0Ftb3VudDtcblxuICAgICAgICAgIHRoaXMuX2RyYXdJbnZlcnRlZFhZTGluZXMoe1xuICAgICAgICAgICAgeENvdW50OiB4Q291bnQsXG4gICAgICAgICAgICB0aWNrQW1vdW50OiB5VGlja0Ftb3VudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kcmF3R3JpZEJhbmRzKHhDb3VudCwgeVRpY2tBbW91bnQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVsOiB0aGlzLmVsZyxcbiAgICAgICAgICB4QXhpc1RpY2tXaWR0aDogdy5nbG9iYWxzLmdyaWRXaWR0aCAvIHhDb3VudFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3R3JpZEJhbmRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0dyaWRCYW5kcyh4Q291bnQsIHRpY2tBbW91bnQpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIHJvd3MgYmFja2dyb3VuZCBiYW5kc1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5ncmlkLnJvdy5jb2xvcnMgIT09IHVuZGVmaW5lZCAmJiB3LmNvbmZpZy5ncmlkLnJvdy5jb2xvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciB4MSA9IDA7XG4gICAgICAgICAgdmFyIHkxID0gMDtcbiAgICAgICAgICB2YXIgeTIgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIHRpY2tBbW91bnQ7XG4gICAgICAgICAgdmFyIHgyID0gdy5nbG9iYWxzLmdyaWRXaWR0aDtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjID0gMDsgaSA8IHRpY2tBbW91bnQ7IGkrKywgYysrKSB7XG4gICAgICAgICAgICBpZiAoYyA+PSB3LmNvbmZpZy5ncmlkLnJvdy5jb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGMgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9kcmF3R3JpZEJhbmRSZWN0KHtcbiAgICAgICAgICAgICAgYzogYyxcbiAgICAgICAgICAgICAgeDE6IHgxLFxuICAgICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICAgICAgeTI6IHkyLFxuICAgICAgICAgICAgICB0eXBlOiAncm93J1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHkxID0geTEgKyB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIHRpY2tBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGNvbHVtbnMgYmFja2dyb3VuZCBiYW5kc1xuXG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmdyaWQuY29sdW1uLmNvbG9ycyAhPT0gdW5kZWZpbmVkICYmIHcuY29uZmlnLmdyaWQuY29sdW1uLmNvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHhjID0gIXcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwgJiYgKHcuY29uZmlnLnhheGlzLnR5cGUgPT09ICdjYXRlZ29yeScgfHwgdy5jb25maWcueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljKSA/IHhDb3VudCAtIDEgOiB4Q291bnQ7XG4gICAgICAgICAgdmFyIF94NSA9IHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsO1xuICAgICAgICAgIHZhciBfeTUgPSAwO1xuXG4gICAgICAgICAgdmFyIF94NiA9IHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsICsgdy5nbG9iYWxzLmdyaWRXaWR0aCAvIHhjO1xuXG4gICAgICAgICAgdmFyIF95NiA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0O1xuXG4gICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX2MgPSAwOyBfaTIgPCB4Q291bnQ7IF9pMisrLCBfYysrKSB7XG4gICAgICAgICAgICBpZiAoX2MgPj0gdy5jb25maWcuZ3JpZC5jb2x1bW4uY29sb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBfYyA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2RyYXdHcmlkQmFuZFJlY3Qoe1xuICAgICAgICAgICAgICBjOiBfYyxcbiAgICAgICAgICAgICAgeDE6IF94NSxcbiAgICAgICAgICAgICAgeTE6IF95NSxcbiAgICAgICAgICAgICAgeDI6IF94NixcbiAgICAgICAgICAgICAgeTI6IF95NixcbiAgICAgICAgICAgICAgdHlwZTogJ2NvbHVtbidcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfeDUgPSBfeDUgKyB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8geGM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEdyaWQ7XG4gIH0oKTtcblxuICB2YXIgUmFuZ2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJhbmdlKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhbmdlKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICB9IC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzI2Njc5L2Nob29zaW5nLWFuLWF0dHJhY3RpdmUtbGluZWFyLXNjYWxlLWZvci1hLWdyYXBocy15LWF4aXNzXG4gICAgLy8gVGhpcyByb3V0aW5lIGNyZWF0ZXMgdGhlIFkgYXhpcyB2YWx1ZXMgZm9yIGEgZ3JhcGguXG5cblxuICAgIF9jcmVhdGVDbGFzcyhSYW5nZSwgW3tcbiAgICAgIGtleTogXCJuaWNlU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBuaWNlU2NhbGUoeU1pbiwgeU1heCwgZGlmZikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgICAgIHZhciB0aWNrcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTA7XG4gICAgICAgIHZhciBOT19NSU5fTUFYX1BST1ZJREVEID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh0aWNrcyA9PT0gJ2RhdGFQb2ludHMnKSB7XG4gICAgICAgICAgdGlja3MgPSB3Lmdsb2JhbHMuZGF0YVBvaW50cyAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeU1pbiA9PT0gTnVtYmVyLk1JTl9WQUxVRSAmJiB5TWF4ID09PSAwIHx8ICFVdGlscy5pc051bWJlcih5TWluKSAmJiAhVXRpbHMuaXNOdW1iZXIoeU1heCkgfHwgeU1pbiA9PT0gTnVtYmVyLk1JTl9WQUxVRSAmJiB5TWF4ID09PSAtTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgIC8vIHdoZW4gYWxsIHZhbHVlcyBhcmUgMFxuICAgICAgICAgIHlNaW4gPSAwO1xuICAgICAgICAgIHlNYXggPSB0aWNrcztcbiAgICAgICAgICB2YXIgbGluZWFyU2NhbGUgPSB0aGlzLmxpbmVhclNjYWxlKHlNaW4sIHlNYXgsIHRpY2tzKTtcbiAgICAgICAgICByZXR1cm4gbGluZWFyU2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeU1pbiA+IHlNYXgpIHtcbiAgICAgICAgICAvLyBpZiBzb21laG93IGR1ZSB0byBzb21lIHdyb25nIGNvbmZpZywgdXNlciBzZW50IG1heCBsZXNzIHRoYW4gbWluLFxuICAgICAgICAgIC8vIGFkanVzdCB0aGUgbWluL21heCBhZ2FpblxuICAgICAgICAgIGNvbnNvbGUud2FybignYXhpcy5taW4gY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiBheGlzLm1heCcpO1xuICAgICAgICAgIHlNYXggPSB5TWluICsgMC4xO1xuICAgICAgICB9IGVsc2UgaWYgKHlNaW4gPT09IHlNYXgpIHtcbiAgICAgICAgICAvLyBJZiB5TWluIGFuZCB5TWF4IGFyZSBpZGVudGljYWwsIHRoZW5cbiAgICAgICAgICAvLyBhZGp1c3QgdGhlIHlNaW4gYW5kIHlNYXggdmFsdWVzIHRvIGFjdHVhbGx5XG4gICAgICAgICAgLy8gbWFrZSBhIGdyYXBoLiBBbHNvIGF2b2lkcyBkaXZpc2lvbiBieSB6ZXJvIGVycm9ycy5cbiAgICAgICAgICB5TWluID0geU1pbiA9PT0gMCA/IDAgOiB5TWluIC0gMC41OyAvLyBzb21lIHNtYWxsIHZhbHVlXG5cbiAgICAgICAgICB5TWF4ID0geU1heCA9PT0gMCA/IDIgOiB5TWF4ICsgMC41OyAvLyBzb21lIHNtYWxsIHZhbHVlXG4gICAgICAgIH0gLy8gQ2FsY3VsYXRlIE1pbiBhbWQgTWF4IGdyYXBoaWNhbCBsYWJlbHMgYW5kIGdyYXBoXG4gICAgICAgIC8vIGluY3JlbWVudHMuICBUaGUgbnVtYmVyIG9mIHRpY2tzIGRlZmF1bHRzIHRvXG4gICAgICAgIC8vIDEwIHdoaWNoIGlzIHRoZSBTVUdHRVNURUQgdmFsdWUuICBBbnkgdGljayB2YWx1ZVxuICAgICAgICAvLyBlbnRlcmVkIGlzIHVzZWQgYXMgYSBzdWdnZXN0ZWQgdmFsdWUgd2hpY2ggaXNcbiAgICAgICAgLy8gYWRqdXN0ZWQgdG8gYmUgYSAncHJldHR5JyB2YWx1ZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gT3V0cHV0IHdpbGwgYmUgYW4gYXJyYXkgb2YgdGhlIFkgYXhpcyB2YWx1ZXMgdGhhdFxuICAgICAgICAvLyBlbmNvbXBhc3MgdGhlIFkgdmFsdWVzLlxuXG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOyAvLyBEZXRlcm1pbmUgUmFuZ2VcblxuICAgICAgICB2YXIgcmFuZ2UgPSBNYXRoLmFicyh5TWF4IC0geU1pbik7XG5cbiAgICAgICAgaWYgKHJhbmdlIDwgMSAmJiBOT19NSU5fTUFYX1BST1ZJREVEICYmICh3LmNvbmZpZy5jaGFydC50eXBlID09PSAnY2FuZGxlc3RpY2snIHx8IHcuY29uZmlnLnNlcmllc1tpbmRleF0udHlwZSA9PT0gJ2NhbmRsZXN0aWNrJyB8fCB3Lmdsb2JhbHMuaXNSYW5nZURhdGEpKSB7XG4gICAgICAgICAgLyogZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hcGV4Y2hhcnRzL2FwZXhjaGFydHMuanMvaXNzdWVzLzQzMCAqL1xuICAgICAgICAgIHlNYXggPSB5TWF4ICogMS4wMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0aWtzID0gdGlja3MgKyAxOyAvLyBBZGp1c3QgdGlja3MgaWYgbmVlZGVkXG5cbiAgICAgICAgaWYgKHRpa3MgPCAyKSB7XG4gICAgICAgICAgdGlrcyA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAodGlrcyA+IDIpIHtcbiAgICAgICAgICB0aWtzIC09IDI7XG4gICAgICAgIH0gLy8gR2V0IHJhdyBzdGVwIHZhbHVlXG5cblxuICAgICAgICB2YXIgdGVtcFN0ZXAgPSByYW5nZSAvIHRpa3M7IC8vIENhbGN1bGF0ZSBwcmV0dHkgc3RlcCB2YWx1ZVxuXG4gICAgICAgIHZhciBtYWcgPSBNYXRoLmZsb29yKFV0aWxzLmxvZzEwKHRlbXBTdGVwKSk7XG4gICAgICAgIHZhciBtYWdQb3cgPSBNYXRoLnBvdygxMCwgbWFnKTtcbiAgICAgICAgdmFyIG1hZ01zZCA9IE1hdGgucm91bmQodGVtcFN0ZXAgLyBtYWdQb3cpO1xuXG4gICAgICAgIGlmIChtYWdNc2QgPCAxKSB7XG4gICAgICAgICAgbWFnTXNkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGVwU2l6ZSA9IG1hZ01zZCAqIG1hZ1BvdzsgLy8gYnVpbGQgWSBsYWJlbCBhcnJheS5cbiAgICAgICAgLy8gTG93ZXIgYW5kIHVwcGVyIGJvdW5kcyBjYWxjdWxhdGlvbnNcblxuICAgICAgICB2YXIgbGIgPSBzdGVwU2l6ZSAqIE1hdGguZmxvb3IoeU1pbiAvIHN0ZXBTaXplKTtcbiAgICAgICAgdmFyIHViID0gc3RlcFNpemUgKiBNYXRoLmNlaWwoeU1heCAvIHN0ZXBTaXplKTsgLy8gQnVpbGQgYXJyYXlcblxuICAgICAgICB2YXIgdmFsID0gbGI7XG5cbiAgICAgICAgaWYgKE5PX01JTl9NQVhfUFJPVklERUQgJiYgcmFuZ2UgPiAyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbCk7XG4gICAgICAgICAgICB2YWwgKz0gc3RlcFNpemU7XG5cbiAgICAgICAgICAgIGlmICh2YWwgPiB1Yikge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0OiByZXN1bHQsXG4gICAgICAgICAgICBuaWNlTWluOiByZXN1bHRbMF0sXG4gICAgICAgICAgICBuaWNlTWF4OiByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBbXTtcbiAgICAgICAgICB2YXIgdiA9IHlNaW47XG4gICAgICAgICAgcmVzdWx0LnB1c2godik7XG4gICAgICAgICAgdmFyIHZhbHVlc0RpdmlkZXIgPSBNYXRoLmFicyh5TWF4IC0geU1pbikgLyB0aWNrcztcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHRpY2tzOyBpKyspIHtcbiAgICAgICAgICAgIHYgPSB2ICsgdmFsdWVzRGl2aWRlcjtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDJdID49IHlNYXgpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wb3AoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0OiByZXN1bHQsXG4gICAgICAgICAgICBuaWNlTWluOiByZXN1bHRbMF0sXG4gICAgICAgICAgICBuaWNlTWF4OiByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsaW5lYXJTY2FsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmVhclNjYWxlKHlNaW4sIHlNYXgpIHtcbiAgICAgICAgdmFyIHRpY2tzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxMDtcbiAgICAgICAgdmFyIHJhbmdlID0gTWF0aC5hYnMoeU1heCAtIHlNaW4pO1xuICAgICAgICB2YXIgc3RlcCA9IHJhbmdlIC8gdGlja3M7XG5cbiAgICAgICAgaWYgKHRpY2tzID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgdGlja3MgPSAxMDtcbiAgICAgICAgICBzdGVwID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIHYgPSB5TWluO1xuXG4gICAgICAgIHdoaWxlICh0aWNrcyA+PSAwKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godik7XG4gICAgICAgICAgdiA9IHYgKyBzdGVwO1xuICAgICAgICAgIHRpY2tzIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3VsdDogcmVzdWx0LFxuICAgICAgICAgIG5pY2VNaW46IHJlc3VsdFswXSxcbiAgICAgICAgICBuaWNlTWF4OiByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxvZ2FyaXRobWljU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2dhcml0aG1pY1NjYWxlKGluZGV4LCB5TWluLCB5TWF4LCB0aWNrcykge1xuICAgICAgICBpZiAoeU1pbiA8IDAgfHwgeU1pbiA9PT0gTnVtYmVyLk1JTl9WQUxVRSkgeU1pbiA9IDAuMDE7XG4gICAgICAgIHZhciBiYXNlID0gMTA7XG4gICAgICAgIHZhciBtaW4gPSBNYXRoLmxvZyh5TWluKSAvIE1hdGgubG9nKGJhc2UpO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5sb2coeU1heCkgLyBNYXRoLmxvZyhiYXNlKTtcbiAgICAgICAgdmFyIHJhbmdlID0gTWF0aC5hYnMoeU1heCAtIHlNaW4pO1xuICAgICAgICB2YXIgc3RlcCA9IHJhbmdlIC8gdGlja3M7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIHYgPSB5TWluO1xuXG4gICAgICAgIHdoaWxlICh0aWNrcyA+PSAwKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godik7XG4gICAgICAgICAgdiA9IHYgKyBzdGVwO1xuICAgICAgICAgIHRpY2tzIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9ncyA9IHJlc3VsdC5tYXAoZnVuY3Rpb24gKG5pY2VOdW1iZXIsIGkpIHtcbiAgICAgICAgICBpZiAobmljZU51bWJlciA8PSAwKSB7XG4gICAgICAgICAgICBuaWNlTnVtYmVyID0gMC4wMTtcbiAgICAgICAgICB9IC8vIGNhbGN1bGF0ZSBhZGp1c3RtZW50IGZhY3RvclxuXG5cbiAgICAgICAgICB2YXIgc2NhbGUgPSAobWF4IC0gbWluKSAvICh5TWF4IC0geU1pbik7XG4gICAgICAgICAgdmFyIGxvZ1ZhbCA9IE1hdGgucG93KGJhc2UsIG1pbiArIHNjYWxlICogKG5pY2VOdW1iZXIgLSBtaW4pKTtcbiAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChsb2dWYWwgLyBVdGlscy5yb3VuZFRvQmFzZShsb2dWYWwsIGJhc2UpKSAqIFV0aWxzLnJvdW5kVG9CYXNlKGxvZ1ZhbCwgYmFzZSk7XG4gICAgICAgIH0pOyAvLyBNYXRoLmZsb29yIG1heSBoYXZlIHJvdW5kZWQgdGhlIHZhbHVlIHRvIDAsIHJldmVydCBiYWNrIHRvIDFcblxuICAgICAgICBpZiAobG9nc1swXSA9PT0gMCkgbG9nc1swXSA9IDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzdWx0OiBsb2dzLFxuICAgICAgICAgIG5pY2VNaW46IGxvZ3NbMF0sXG4gICAgICAgICAgbmljZU1heDogbG9nc1tsb2dzLmxlbmd0aCAtIDFdXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFlTY2FsZUZvckluZGV4XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0WVNjYWxlRm9ySW5kZXgoaW5kZXgsIG1pblksIG1heFkpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy53Lmdsb2JhbHM7XG4gICAgICAgIHZhciBjbmYgPSB0aGlzLncuY29uZmlnO1xuICAgICAgICB2YXIgeSA9IGdsLmlzQmFySG9yaXpvbnRhbCA/IGNuZi54YXhpcyA6IGNuZi55YXhpc1tpbmRleF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBnbC55QXhpc1NjYWxlW2luZGV4XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBnbC55QXhpc1NjYWxlW2luZGV4XSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpZmYgPSBNYXRoLmFicyhtYXhZIC0gbWluWSk7XG5cbiAgICAgICAgaWYgKHkubG9nYXJpdGhtaWMgJiYgZGlmZiA8PSA1KSB7XG4gICAgICAgICAgZ2wuaW52YWxpZExvZ1NjYWxlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh5LmxvZ2FyaXRobWljICYmIGRpZmYgPiA1KSB7XG4gICAgICAgICAgZ2wuYWxsU2VyaWVzQ29sbGFwc2VkID0gZmFsc2U7XG4gICAgICAgICAgZ2wueUF4aXNTY2FsZVtpbmRleF0gPSB0aGlzLmxvZ2FyaXRobWljU2NhbGUoaW5kZXgsIG1pblksIG1heFksIHkudGlja0Ftb3VudCA/IHkudGlja0Ftb3VudCA6IE1hdGguZmxvb3IoTWF0aC5sb2cxMChtYXhZKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChtYXhZID09PSAtTnVtYmVyLk1BWF9WQUxVRSB8fCAhVXRpbHMuaXNOdW1iZXIobWF4WSkpIHtcbiAgICAgICAgICAgIC8vIG5vIGRhdGEgaW4gdGhlIGNoYXJ0LiBFaXRoZXIgYWxsIHNlcmllcyBjb2xsYXBzZWQgb3IgdXNlciBwYXNzZWQgYSBibGFuayBhcnJheVxuICAgICAgICAgICAgZ2wueUF4aXNTY2FsZVtpbmRleF0gPSB0aGlzLmxpbmVhclNjYWxlKDAsIDUsIDUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGVyZSBpcyBzb21lIGRhdGEuIFR1cm4gb2ZmIHRoZSBhbGxTZXJpZXNDb2xsYXBzZWQgZmxhZ1xuICAgICAgICAgICAgZ2wuYWxsU2VyaWVzQ29sbGFwc2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICgoeS5taW4gIT09IHVuZGVmaW5lZCB8fCB5Lm1heCAhPT0gdW5kZWZpbmVkKSAmJiAheS5mb3JjZU5pY2VTY2FsZSkge1xuICAgICAgICAgICAgICAvLyBmaXggaHR0cHM6Ly9naXRodWIuY29tL2FwZXhjaGFydHMvYXBleGNoYXJ0cy5qcy9pc3N1ZXMvNDkyXG4gICAgICAgICAgICAgIGdsLnlBeGlzU2NhbGVbaW5kZXhdID0gdGhpcy5saW5lYXJTY2FsZShtaW5ZLCBtYXhZLCB5LnRpY2tBbW91bnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIG5vTWluTWF4UHJvdmlkZWQgPSBjbmYueWF4aXNbaW5kZXhdLm1heCA9PT0gdW5kZWZpbmVkICYmIGNuZi55YXhpc1tpbmRleF0ubWluID09PSB1bmRlZmluZWQgfHwgY25mLnlheGlzW2luZGV4XS5mb3JjZU5pY2VTY2FsZTtcbiAgICAgICAgICAgICAgZ2wueUF4aXNTY2FsZVtpbmRleF0gPSB0aGlzLm5pY2VTY2FsZShtaW5ZLCBtYXhZLCBkaWZmLCBpbmRleCwgLy8gZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hcGV4Y2hhcnRzL2FwZXhjaGFydHMuanMvaXNzdWVzLzM5N1xuICAgICAgICAgICAgICB5LnRpY2tBbW91bnQgPyB5LnRpY2tBbW91bnQgOiBkaWZmIDwgNSAmJiBkaWZmID4gMSA/IGRpZmYgKyAxIDogNSwgbm9NaW5NYXhQcm92aWRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFhTY2FsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFhTY2FsZShtaW5YLCBtYXhYKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ2wgPSB3Lmdsb2JhbHM7XG4gICAgICAgIHZhciB4ID0gdy5jb25maWcueGF4aXM7XG4gICAgICAgIHZhciBkaWZmID0gTWF0aC5hYnMobWF4WCAtIG1pblgpO1xuXG4gICAgICAgIGlmIChtYXhYID09PSAtTnVtYmVyLk1BWF9WQUxVRSB8fCAhVXRpbHMuaXNOdW1iZXIobWF4WCkpIHtcbiAgICAgICAgICAvLyBubyBkYXRhIGluIHRoZSBjaGFydC4gRWl0aGVyIGFsbCBzZXJpZXMgY29sbGFwc2VkIG9yIHVzZXIgcGFzc2VkIGEgYmxhbmsgYXJyYXlcbiAgICAgICAgICBnbC54QXhpc1NjYWxlID0gdGhpcy5saW5lYXJTY2FsZSgwLCA1LCA1KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbC54QXhpc1NjYWxlID0gdGhpcy5uaWNlU2NhbGUobWluWCwgbWF4WCwgZGlmZiwgMCwgeC50aWNrQW1vdW50ID8geC50aWNrQW1vdW50IDogZGlmZiA8IDUgJiYgZGlmZiA+IDEgPyBkaWZmICsgMSA6IDUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsLnhBeGlzU2NhbGU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldE11bHRpcGxlWVNjYWxlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldE11bHRpcGxlWVNjYWxlcygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIHZhciBtaW5ZQXJyID0gZ2wubWluWUFyci5jb25jYXQoW10pO1xuICAgICAgICB2YXIgbWF4WUFyciA9IGdsLm1heFlBcnIuY29uY2F0KFtdKTtcbiAgICAgICAgdmFyIHNjYWxlc0luZGljZXMgPSBbXTsgLy8gaGVyZSwgd2UgbG9vcCB0aHJvdWdoIHRoZSB5YXhpcyBhcnJheSBhbmQgZmluZCB0aGUgaXRlbSB3aGljaCBoYXMgXCJzZXJpZXNOYW1lXCIgcHJvcGVydHlcblxuICAgICAgICBjbmYueWF4aXMuZm9yRWFjaChmdW5jdGlvbiAoeWF4ZSwgaSkge1xuICAgICAgICAgIHZhciBpbmRleCA9IGk7XG4gICAgICAgICAgY25mLnNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChzLCBzaSkge1xuICAgICAgICAgICAgLy8gaWYgc2VyaWVzTmFtZSBtYXRjaGVzIGFuZCB0aGF0IHNlcmllcyBpcyBub3QgY29sbGFwc2VkLCB3ZSB1c2UgdGhhdCBzY2FsZVxuICAgICAgICAgICAgLy8gZml4IGlzc3VlICMxMjE1XG4gICAgICAgICAgICAvLyBwcm9jZWVkIGV2ZW4gaWYgc2kgaXMgaW4gZ2wuY29sbGFwc2VkU2VyaWVzSW5kaWNlc1xuICAgICAgICAgICAgaWYgKHMubmFtZSA9PT0geWF4ZS5zZXJpZXNOYW1lKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gc2k7XG5cbiAgICAgICAgICAgICAgaWYgKGkgIT09IHNpKSB7XG4gICAgICAgICAgICAgICAgc2NhbGVzSW5kaWNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIGluZGV4OiBzaSxcbiAgICAgICAgICAgICAgICAgIHNpbWlsYXJJbmRleDogaSxcbiAgICAgICAgICAgICAgICAgIGFscmVhZHlFeGlzdHM6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY2FsZXNJbmRpY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgaW5kZXg6IHNpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgbWluWSA9IG1pbllBcnJbaW5kZXhdO1xuICAgICAgICAgIHZhciBtYXhZID0gbWF4WUFycltpbmRleF07XG5cbiAgICAgICAgICBfdGhpcy5zZXRZU2NhbGVGb3JJbmRleChpLCBtaW5ZLCBtYXhZKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2FtZVNjYWxlSW5NdWx0aXBsZUF4ZXMobWluWUFyciwgbWF4WUFyciwgc2NhbGVzSW5kaWNlcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNhbWVTY2FsZUluTXVsdGlwbGVBeGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2FtZVNjYWxlSW5NdWx0aXBsZUF4ZXMobWluWUFyciwgbWF4WUFyciwgc2NhbGVzSW5kaWNlcykge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgY25mID0gdGhpcy53LmNvbmZpZztcbiAgICAgICAgdmFyIGdsID0gdGhpcy53Lmdsb2JhbHM7IC8vIHdlIGdvdCB0aGUgc2NhbGVzSW5kaWNlcyBhcnJheSBpbiB0aGUgYWJvdmUgY29kZSwgYnV0IHdlIG5lZWQgdG8gZmlsdGVyIG91dCB0aGUgaXRlbXMgd2hpY2ggZG9lc24ndCBoYXZlIHNhbWUgc2NhbGVzXG5cbiAgICAgICAgdmFyIHNpbWlsYXJJbmRpY2VzID0gW107XG4gICAgICAgIHNjYWxlc0luZGljZXMuZm9yRWFjaChmdW5jdGlvbiAoc2NhbGUpIHtcbiAgICAgICAgICBpZiAoc2NhbGUuYWxyZWFkeUV4aXN0cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzaW1pbGFySW5kaWNlc1tzY2FsZS5pbmRleF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNpbWlsYXJJbmRpY2VzW3NjYWxlLmluZGV4XSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaW1pbGFySW5kaWNlc1tzY2FsZS5pbmRleF0ucHVzaChzY2FsZS5pbmRleCk7XG4gICAgICAgICAgICBzaW1pbGFySW5kaWNlc1tzY2FsZS5pbmRleF0ucHVzaChzY2FsZS5zaW1pbGFySW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC55QXhpc1NhbWVTY2FsZUluZGljZXMgPSBzaW1pbGFySW5kaWNlcztcbiAgICAgICAgc2ltaWxhckluZGljZXMuZm9yRWFjaChmdW5jdGlvbiAoc2ksIGkpIHtcbiAgICAgICAgICBzaW1pbGFySW5kaWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaiwgaikge1xuICAgICAgICAgICAgaWYgKGkgIT09IGopIHtcbiAgICAgICAgICAgICAgaWYgKGludGVyc2VjdChzaSwgc2opLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzaW1pbGFySW5kaWNlc1tpXSA9IHNpbWlsYXJJbmRpY2VzW2ldLmNvbmNhdChzaW1pbGFySW5kaWNlc1tqXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7IC8vIHRoZW4sIHdlIHJlbW92ZSBkdXBsaWNhdGVzIGZyb20gdGhlIHNpbWlsYXJTY2FsZSBhcnJheVxuXG4gICAgICAgIHZhciB1bmlxdWVTaW1pbGFySW5kaWNlcyA9IHNpbWlsYXJJbmRpY2VzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLmZpbHRlcihmdW5jdGlvbiAoaSwgcG9zKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5pbmRleE9mKGkpID09PSBwb3M7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pOyAvLyBzb3J0IGZ1cnRoZXIgdG8gcmVtb3ZlIHdob2xlIGR1cGxpY2F0ZSBhcnJheXMgbGF0ZXJcblxuICAgICAgICB2YXIgc29ydGVkSW5kaWNlcyA9IHVuaXF1ZVNpbWlsYXJJbmRpY2VzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgIHJldHVybiBzLnNvcnQoKTtcbiAgICAgICAgfSk7IC8vIHJlbW92ZSB1bmRlZmluZWQgaXRlbXNcblxuICAgICAgICBzaW1pbGFySW5kaWNlcyA9IHNpbWlsYXJJbmRpY2VzLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgICAgICAgIHJldHVybiAhIXM7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaW5kaWNlcyA9IHNvcnRlZEluZGljZXMuc2xpY2UoKTtcbiAgICAgICAgdmFyIHN0cmluZ0luZGljZXMgPSBpbmRpY2VzLm1hcChmdW5jdGlvbiAoaW5kKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGluZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbmRpY2VzID0gaW5kaWNlcy5maWx0ZXIoZnVuY3Rpb24gKGluZCwgcCkge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdJbmRpY2VzLmluZGV4T2YoSlNPTi5zdHJpbmdpZnkoaW5kKSkgPT09IHA7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2FtZVNjYWxlTWluWUFyciA9IFtdO1xuICAgICAgICB2YXIgc2FtZVNjYWxlTWF4WUFyciA9IFtdO1xuICAgICAgICBtaW5ZQXJyLmZvckVhY2goZnVuY3Rpb24gKG1pbllWYWx1ZSwgeWkpIHtcbiAgICAgICAgICBpbmRpY2VzLmZvckVhY2goZnVuY3Rpb24gKHNjYWxlLCBpKSB7XG4gICAgICAgICAgICAvLyB3ZSBjb21wYXJlIG9ubHkgdGhlIHlJbmRleCB3aGljaCBleGlzdHMgaW4gdGhlIGluZGljZXMgYXJyYXlcbiAgICAgICAgICAgIGlmIChzY2FsZS5pbmRleE9mKHlpKSA+IC0xKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2FtZVNjYWxlTWluWUFycltpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBzYW1lU2NhbGVNaW5ZQXJyW2ldID0gW107XG4gICAgICAgICAgICAgICAgc2FtZVNjYWxlTWF4WUFycltpXSA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2FtZVNjYWxlTWluWUFycltpXS5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IHlpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtaW5ZVmFsdWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHNhbWVTY2FsZU1heFlBcnJbaV0ucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5OiB5aSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWF4WUFyclt5aV1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2FtZVNjYWxlTWluID0gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoaW5kaWNlcy5sZW5ndGgpKS5tYXAoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLCBOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgICAgdmFyIHNhbWVTY2FsZU1heCA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KGluZGljZXMubGVuZ3RoKSkubWFwKE51bWJlci5wcm90b3R5cGUudmFsdWVPZiwgLU51bWJlci5NQVhfVkFMVUUpO1xuICAgICAgICBzYW1lU2NhbGVNaW5ZQXJyLmZvckVhY2goZnVuY3Rpb24gKHMsIGkpIHtcbiAgICAgICAgICBzLmZvckVhY2goZnVuY3Rpb24gKHNjLCBqKSB7XG4gICAgICAgICAgICBzYW1lU2NhbGVNaW5baV0gPSBNYXRoLm1pbihzYy52YWx1ZSwgc2FtZVNjYWxlTWluW2ldKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNhbWVTY2FsZU1heFlBcnIuZm9yRWFjaChmdW5jdGlvbiAocywgaSkge1xuICAgICAgICAgIHMuZm9yRWFjaChmdW5jdGlvbiAoc2MsIGopIHtcbiAgICAgICAgICAgIHNhbWVTY2FsZU1heFtpXSA9IE1hdGgubWF4KHNjLnZhbHVlLCBzYW1lU2NhbGVNYXhbaV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgbWluWUFyci5mb3JFYWNoKGZ1bmN0aW9uIChtaW4sIGkpIHtcbiAgICAgICAgICBzYW1lU2NhbGVNYXhZQXJyLmZvckVhY2goZnVuY3Rpb24gKHMsIHNpKSB7XG4gICAgICAgICAgICB2YXIgbWluWSA9IHNhbWVTY2FsZU1pbltzaV07XG4gICAgICAgICAgICB2YXIgbWF4WSA9IHNhbWVTY2FsZU1heFtzaV07XG5cbiAgICAgICAgICAgIGlmIChjbmYuY2hhcnQuc3RhY2tlZCkge1xuICAgICAgICAgICAgICAvLyBmb3Igc3RhY2tlZCBjaGFydHMsIHdlIG5lZWQgdG8gYWRkIHRoZSB2YWx1ZXNcbiAgICAgICAgICAgICAgbWF4WSA9IDA7XG4gICAgICAgICAgICAgIHMuZm9yRWFjaChmdW5jdGlvbiAoaW5kLCBrKSB7XG4gICAgICAgICAgICAgICAgLy8gZml4IGluY29ycmVjdGx5IGFkanVzdCB5IHNjYWxlIGlzc3VlICMxMjE1XG4gICAgICAgICAgICAgICAgaWYgKGluZC52YWx1ZSAhPT0gLU51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgICAgICAgIG1heFkgKz0gaW5kLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtaW5ZICE9PSBOdW1iZXIuTUlOX1ZBTFVFKSB7XG4gICAgICAgICAgICAgICAgICBtaW5ZICs9IHNhbWVTY2FsZU1pbllBcnJbc2ldW2tdLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHMuZm9yRWFjaChmdW5jdGlvbiAoaW5kLCBrKSB7XG4gICAgICAgICAgICAgIGlmIChzW2tdLmtleSA9PT0gaSkge1xuICAgICAgICAgICAgICAgIGlmIChjbmYueWF4aXNbaV0ubWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY25mLnlheGlzW2ldLm1pbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBtaW5ZID0gY25mLnlheGlzW2ldLm1pbihnbC5taW5ZKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblkgPSBjbmYueWF4aXNbaV0ubWluO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjbmYueWF4aXNbaV0ubWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY25mLnlheGlzW2ldLm1heCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBtYXhZID0gY25mLnlheGlzW2ldLm1heChnbC5tYXhZKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1heFkgPSBjbmYueWF4aXNbaV0ubWF4O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF90aGlzMi5zZXRZU2NhbGVGb3JJbmRleChpLCBtaW5ZLCBtYXhZKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhdXRvU2NhbGVZXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYXV0b1NjYWxlWShjdHgsIHlheGlzLCBlKSB7XG4gICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgY3R4ID0gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3ID0gY3R4Lnc7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pc011bHRpcGxlWUF4aXMgfHwgdy5nbG9iYWxzLmNvbGxhcHNlZFNlcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBUaGUgYXV0b1NjYWxlIG9wdGlvbiBmb3IgbXVsdGlwbGUgeS1heGlzIGlzIHR1cm5lZCBvZmYgYXMgaXQgbGVhZHMgdG8gYnVnZ3kgYmVoYXZpb3IuXG4gICAgICAgICAgLy8gQWxzbywgd2hlbiBhIHNlcmllcyBpcyBjb2xsYXBzZWQsIGl0IHJlc3VsdHMgaW4gaW5jb3JyZWN0IGJlaGF2aW9yLiBIZW5jZSB0dXJuZWQgaXQgb2ZmIGZvciB0aGF0IHRvbyAtIGZpeGVzIGFwZXhjaGFydHMuanMjNzk1XG4gICAgICAgICAgY29uc29sZS53YXJuKCdhdXRvU2NhbGVZYXhpcyBpcyBub3Qgc3VwcG9ydGVkIGluIGEgbXVsdGkteWF4aXMgY2hhcnQuJyk7XG4gICAgICAgICAgcmV0dXJuIHlheGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlcmllc1ggPSB3Lmdsb2JhbHMuc2VyaWVzWFswXTtcbiAgICAgICAgdmFyIGlzU3RhY2tlZCA9IHcuY29uZmlnLmNoYXJ0LnN0YWNrZWQ7XG4gICAgICAgIHlheGlzLmZvckVhY2goZnVuY3Rpb24gKHlheGUsIHlpKSB7XG4gICAgICAgICAgdmFyIGZpcnN0WEluZGV4ID0gMDtcblxuICAgICAgICAgIGZvciAodmFyIHhpID0gMDsgeGkgPCBzZXJpZXNYLmxlbmd0aDsgeGkrKykge1xuICAgICAgICAgICAgaWYgKHNlcmllc1hbeGldID49IGUueGF4aXMubWluKSB7XG4gICAgICAgICAgICAgIGZpcnN0WEluZGV4ID0geGk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBpbml0aWFsTWluID0gdy5nbG9iYWxzLm1pbllBcnJbeWldO1xuICAgICAgICAgIHZhciBpbml0aWFsTWF4ID0gdy5nbG9iYWxzLm1heFlBcnJbeWldO1xuICAgICAgICAgIHZhciBtaW4sIG1heDtcbiAgICAgICAgICB2YXIgc3RhY2tlZFNlciA9IHcuZ2xvYmFscy5zdGFja2VkU2VyaWVzVG90YWxzO1xuICAgICAgICAgIHcuZ2xvYmFscy5zZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoc2VyaWUsIHNJKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3RWYWx1ZSA9IHNlcmllW2ZpcnN0WEluZGV4XTtcblxuICAgICAgICAgICAgaWYgKGlzU3RhY2tlZCkge1xuICAgICAgICAgICAgICBmaXJzdFZhbHVlID0gc3RhY2tlZFNlcltmaXJzdFhJbmRleF07XG4gICAgICAgICAgICAgIG1pbiA9IG1heCA9IGZpcnN0VmFsdWU7XG4gICAgICAgICAgICAgIHN0YWNrZWRTZXIuZm9yRWFjaChmdW5jdGlvbiAoeSwgeUkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VyaWVzWFt5SV0gPD0gZS54YXhpcy5tYXggJiYgc2VyaWVzWFt5SV0gPj0gZS54YXhpcy5taW4pIHtcbiAgICAgICAgICAgICAgICAgIGlmICh5ID4gbWF4ICYmIHkgIT09IG51bGwpIG1heCA9IHk7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VyaWVbeUldIDwgbWluICYmIHNlcmllW3lJXSAhPT0gbnVsbCkgbWluID0gc2VyaWVbeUldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtaW4gPSBtYXggPSBmaXJzdFZhbHVlO1xuICAgICAgICAgICAgICBzZXJpZS5mb3JFYWNoKGZ1bmN0aW9uICh5LCB5SSkge1xuICAgICAgICAgICAgICAgIGlmIChzZXJpZXNYW3lJXSA8PSBlLnhheGlzLm1heCAmJiBzZXJpZXNYW3lJXSA+PSBlLnhheGlzLm1pbikge1xuICAgICAgICAgICAgICAgICAgdmFyIHZhbE1pbiA9IHk7XG4gICAgICAgICAgICAgICAgICB2YXIgdmFsTWF4ID0geTtcbiAgICAgICAgICAgICAgICAgIHcuZ2xvYmFscy5zZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAod1MsIHdTSSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhbE1pbiA9IE1hdGgubWluKHdTW3lJXSwgdmFsTWluKTtcbiAgICAgICAgICAgICAgICAgICAgICB2YWxNYXggPSBNYXRoLm1heCh3U1t5SV0sIHZhbE1heCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbE1heCA+IG1heCAmJiB2YWxNYXggIT09IG51bGwpIG1heCA9IHZhbE1heDtcbiAgICAgICAgICAgICAgICAgIGlmICh2YWxNaW4gPCBtaW4gJiYgdmFsTWluICE9PSBudWxsKSBtaW4gPSB2YWxNaW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkICYmIG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIG1pbiA9IGluaXRpYWxNaW47XG4gICAgICAgICAgICAgIG1heCA9IGluaXRpYWxNYXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1pbiAqPSBtaW4gPCAwID8gMS4xIDogMC45O1xuICAgICAgICAgICAgbWF4ICo9IG1heCA8IDAgPyAwLjkgOiAxLjE7XG5cbiAgICAgICAgICAgIGlmIChtYXggPCAwICYmIG1heCA8IGluaXRpYWxNYXgpIHtcbiAgICAgICAgICAgICAgbWF4ID0gaW5pdGlhbE1heDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1pbiA8IDAgJiYgbWluID4gaW5pdGlhbE1pbikge1xuICAgICAgICAgICAgICBtaW4gPSBpbml0aWFsTWluO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeWF4aXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICB5YXhpc1tzSV0ubWluID0geWF4ZS5taW4gPT09IHVuZGVmaW5lZCA/IG1pbiA6IHlheGUubWluO1xuICAgICAgICAgICAgICB5YXhpc1tzSV0ubWF4ID0geWF4ZS5tYXggPT09IHVuZGVmaW5lZCA/IG1heCA6IHlheGUubWF4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgeWF4aXNbMF0ubWluID0geWF4ZS5taW4gPT09IHVuZGVmaW5lZCA/IG1pbiA6IHlheGUubWluO1xuICAgICAgICAgICAgICB5YXhpc1swXS5tYXggPSB5YXhlLm1heCA9PT0gdW5kZWZpbmVkID8gbWF4IDogeWF4ZS5tYXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geWF4aXM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFJhbmdlO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIFJhbmdlIGlzIHVzZWQgdG8gZ2VuZXJhdGVzIHZhbHVlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4LlxuICAgKlxuICAgKiBAbW9kdWxlIFJhbmdlXG4gICAqKi9cblxuICB2YXIgUmFuZ2UkMSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmFuZ2UkMShjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYW5nZSQxKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHRoaXMuc2NhbGVzID0gbmV3IFJhbmdlKGN0eCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFJhbmdlJDEsIFt7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0WVJhbmdlKCk7XG4gICAgICAgIHRoaXMuc2V0WFJhbmdlKCk7XG4gICAgICAgIHRoaXMuc2V0WlJhbmdlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldE1pbllNYXhZXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWluWU1heFkoc3RhcnRpbmdJbmRleCkge1xuICAgICAgICB2YXIgbG93ZXN0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgdmFyIGhpZ2hlc3RZID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuICAgICAgICB2YXIgbWF4WSA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICB2YXIgbWluWSA9IE51bWJlci5NSU5fVkFMVUU7XG5cbiAgICAgICAgaWYgKGxlbiA9PT0gbnVsbCkge1xuICAgICAgICAgIGxlbiA9IHN0YXJ0aW5nSW5kZXggKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlcmllcyA9IGdsLnNlcmllcztcbiAgICAgICAgdmFyIHNlcmllc01pbiA9IHNlcmllcztcbiAgICAgICAgdmFyIHNlcmllc01heCA9IHNlcmllcztcblxuICAgICAgICBpZiAoY25mLmNoYXJ0LnR5cGUgPT09ICdjYW5kbGVzdGljaycpIHtcbiAgICAgICAgICBzZXJpZXNNaW4gPSBnbC5zZXJpZXNDYW5kbGVMO1xuICAgICAgICAgIHNlcmllc01heCA9IGdsLnNlcmllc0NhbmRsZUg7XG4gICAgICAgIH0gZWxzZSBpZiAoZ2wuaXNSYW5nZURhdGEpIHtcbiAgICAgICAgICBzZXJpZXNNaW4gPSBnbC5zZXJpZXNSYW5nZVN0YXJ0O1xuICAgICAgICAgIHNlcmllc01heCA9IGdsLnNlcmllc1JhbmdlRW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0aW5nSW5kZXg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGdsLmRhdGFQb2ludHMgPSBNYXRoLm1heChnbC5kYXRhUG9pbnRzLCBzZXJpZXNbaV0ubGVuZ3RoKTtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2wuc2VyaWVzW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gc2VyaWVzW2ldW2pdO1xuXG4gICAgICAgICAgICBpZiAodmFsICE9PSBudWxsICYmIFV0aWxzLmlzTnVtYmVyKHZhbCkpIHtcbiAgICAgICAgICAgICAgbWF4WSA9IE1hdGgubWF4KG1heFksIHNlcmllc01heFtpXVtqXSk7XG4gICAgICAgICAgICAgIGxvd2VzdFkgPSBNYXRoLm1pbihsb3dlc3RZLCBzZXJpZXNNaW5baV1bal0pO1xuICAgICAgICAgICAgICBoaWdoZXN0WSA9IE1hdGgubWF4KGhpZ2hlc3RZLCBzZXJpZXNNaW5baV1bal0pO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLncuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdjYW5kbGVzdGljaycpIHtcbiAgICAgICAgICAgICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgZ2wuc2VyaWVzQ2FuZGxlT1tpXVtqXSk7XG4gICAgICAgICAgICAgICAgbWF4WSA9IE1hdGgubWF4KG1heFksIGdsLnNlcmllc0NhbmRsZUhbaV1bal0pO1xuICAgICAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBnbC5zZXJpZXNDYW5kbGVMW2ldW2pdKTtcbiAgICAgICAgICAgICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgZ2wuc2VyaWVzQ2FuZGxlQ1tpXVtqXSk7XG4gICAgICAgICAgICAgICAgaGlnaGVzdFkgPSBtYXhZO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKFV0aWxzLmlzRmxvYXQodmFsKSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IFV0aWxzLm5vRXhwb25lbnRzKHZhbCk7XG4gICAgICAgICAgICAgICAgZ2wueVZhbHVlRGVjaW1hbCA9IE1hdGgubWF4KGdsLnlWYWx1ZURlY2ltYWwsIHZhbC50b1N0cmluZygpLnNwbGl0KCcuJylbMV0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtaW5ZID4gc2VyaWVzTWluW2ldW2pdICYmIHNlcmllc01pbltpXVtqXSA8IDApIHtcbiAgICAgICAgICAgICAgICBtaW5ZID0gc2VyaWVzTWluW2ldW2pdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBnbC5oYXNOdWxsVmFsdWVzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY25mLmNoYXJ0LnR5cGUgPT09ICdyYW5nZUJhcicgJiYgZ2wuc2VyaWVzUmFuZ2VTdGFydC5sZW5ndGggJiYgY25mLnhheGlzLnR5cGUgPT09ICdkYXRldGltZScpIHtcbiAgICAgICAgICBtaW5ZID0gbG93ZXN0WTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbmYuY2hhcnQudHlwZSA9PT0gJ2JhcicpIHtcbiAgICAgICAgICBpZiAobWluWSA8IDAgJiYgbWF4WSA8IDApIHtcbiAgICAgICAgICAgIC8vIGFsbCBuZWdhdGl2ZSB2YWx1ZXMgaW4gYSBiYXIgY2hhcnQsIGhlbmNlIG1ha2UgdGhlIG1heCB0byAwXG4gICAgICAgICAgICBtYXhZID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWluWSA9PT0gTnVtYmVyLk1JTl9WQUxVRSkge1xuICAgICAgICAgICAgbWluWSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtaW5ZOiBtaW5ZLFxuICAgICAgICAgIG1heFk6IG1heFksXG4gICAgICAgICAgbG93ZXN0WTogbG93ZXN0WSxcbiAgICAgICAgICBoaWdoZXN0WTogaGlnaGVzdFlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0WVJhbmdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0WVJhbmdlKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIGdsLm1heFkgPSAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgZ2wubWluWSA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgIHZhciBsb3dlc3RZSW5BbGxTZXJpZXMgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgICAgIGlmIChnbC5pc011bHRpcGxlWUF4aXMpIHtcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdldCBtaW5ZIGFuZCBtYXhZIGZvciBtdWx0aXBsZSB5IGF4aXNcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdsLnNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG1pbllNYXhZQXJyID0gdGhpcy5nZXRNaW5ZTWF4WShpLCBsb3dlc3RZSW5BbGxTZXJpZXMsIG51bGwsIGkgKyAxKTtcbiAgICAgICAgICAgIGdsLm1pbllBcnIucHVzaChtaW5ZTWF4WUFyci5taW5ZKTtcbiAgICAgICAgICAgIGdsLm1heFlBcnIucHVzaChtaW5ZTWF4WUFyci5tYXhZKTtcbiAgICAgICAgICAgIGxvd2VzdFlJbkFsbFNlcmllcyA9IG1pbllNYXhZQXJyLmxvd2VzdFk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGFuZCB0aGVuLCBnZXQgdGhlIG1pblkgYW5kIG1heFkgZnJvbSBhbGwgc2VyaWVzXG5cblxuICAgICAgICB2YXIgbWluWU1heFkgPSB0aGlzLmdldE1pbllNYXhZKDAsIGxvd2VzdFlJbkFsbFNlcmllcywgbnVsbCwgZ2wuc2VyaWVzLmxlbmd0aCk7XG4gICAgICAgIGdsLm1pblkgPSBtaW5ZTWF4WS5taW5ZO1xuICAgICAgICBnbC5tYXhZID0gbWluWU1heFkubWF4WTtcbiAgICAgICAgbG93ZXN0WUluQWxsU2VyaWVzID0gbWluWU1heFkubG93ZXN0WTtcblxuICAgICAgICBpZiAoY25mLmNoYXJ0LnN0YWNrZWQpIHtcbiAgICAgICAgICB0aGlzLl9zZXRTdGFja2VkTWluTWF4KCk7XG4gICAgICAgIH0gLy8gaWYgdGhlIG51bWJlcnMgYXJlIHRvbyBiaWcsIHJlZHVjZSB0aGUgcmFuZ2VcbiAgICAgICAgLy8gZm9yIGVnLCBpZiBudW1iZXIgaXMgYmV0d2VlbiAxMDAwMDAtMTEwMDAwLCBwdXR0aW5nIDAgYXMgdGhlIGxvd2VzdCB2YWx1ZSBpcyBub3Qgc28gZ29vZCBpZGVhLiBTbyBjaGFuZ2UgdGhlIGdsLm1pblkgZm9yIGxpbmUvYXJlYS9jYW5kbGVzdGlja3NcblxuXG4gICAgICAgIGlmIChjbmYuY2hhcnQudHlwZSA9PT0gJ2xpbmUnIHx8IGNuZi5jaGFydC50eXBlID09PSAnYXJlYScgfHwgY25mLmNoYXJ0LnR5cGUgPT09ICdjYW5kbGVzdGljaycpIHtcbiAgICAgICAgICBpZiAoZ2wubWluWSA9PT0gTnVtYmVyLk1JTl9WQUxVRSAmJiBsb3dlc3RZSW5BbGxTZXJpZXMgIT09IC1OdW1iZXIuTUFYX1ZBTFVFICYmIGxvd2VzdFlJbkFsbFNlcmllcyAhPT0gZ2wubWF4WSAvLyBzaW5nbGUgdmFsdWUgcG9zc2liaWxpdHlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdmFyIGRpZmYgPSBnbC5tYXhZIC0gbG93ZXN0WUluQWxsU2VyaWVzO1xuXG4gICAgICAgICAgICAgIGlmIChsb3dlc3RZSW5BbGxTZXJpZXMgPj0gMCAmJiBsb3dlc3RZSW5BbGxTZXJpZXMgPD0gMTApIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBtaW5ZIGlzIGFscmVhZHkgMC9sb3cgdmFsdWUsIHdlIGRvbid0IHdhbnQgdG8gZ28gbmVnYXRpdmVzIGhlcmUgLSBzbyB0aGlzIGNoZWNrIGlzIGVzc2VudGlhbC5cbiAgICAgICAgICAgICAgICBkaWZmID0gMDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGdsLm1pblkgPSBsb3dlc3RZSW5BbGxTZXJpZXMgLSBkaWZmICogNSAvIDEwMDtcbiAgICAgICAgICAgICAgLyogZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hcGV4Y2hhcnRzL2FwZXhjaGFydHMuanMvaXNzdWVzLzYxNCAqL1xuXG4gICAgICAgICAgICAgIC8qIGZpeCBodHRwczovL2dpdGh1Yi5jb20vYXBleGNoYXJ0cy9hcGV4Y2hhcnRzLmpzL2lzc3Vlcy85NjggKi9cblxuICAgICAgICAgICAgICBpZiAobG93ZXN0WUluQWxsU2VyaWVzID4gMCAmJiBnbC5taW5ZIDwgMCkge1xuICAgICAgICAgICAgICAgIGdsLm1pblkgPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8qIGZpeCBodHRwczovL2dpdGh1Yi5jb20vYXBleGNoYXJ0cy9hcGV4Y2hhcnRzLmpzL2lzc3Vlcy80MjYgKi9cblxuXG4gICAgICAgICAgICAgIGdsLm1heFkgPSBnbC5tYXhZICsgZGlmZiAqIDUgLyAxMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjbmYueWF4aXMuZm9yRWFjaChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICAvLyBvdmVycmlkZSBhbGwgbWluL21heCB2YWx1ZXMgYnkgdXNlciBkZWZpbmVkIHZhbHVlcyAoeSBheGlzKVxuICAgICAgICAgIGlmICh5YXhlLm1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHlheGUubWF4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICBnbC5tYXhZQXJyW2luZGV4XSA9IHlheGUubWF4O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgeWF4ZS5tYXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgZ2wubWF4WUFycltpbmRleF0gPSB5YXhlLm1heChnbC5tYXhZKTtcbiAgICAgICAgICAgIH0gLy8gZ2wubWF4WSBpcyBmb3Igc2luZ2xlIHktYXhpcyBjaGFydCwgaXQgd2lsbCBiZSBpZ25vcmVkIGluIG11bHRpLXlheGlzXG5cblxuICAgICAgICAgICAgZ2wubWF4WSA9IGdsLm1heFlBcnJbaW5kZXhdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh5YXhlLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHlheGUubWluID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICBnbC5taW5ZQXJyW2luZGV4XSA9IHlheGUubWluO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgeWF4ZS5taW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgZ2wubWluWUFycltpbmRleF0gPSB5YXhlLm1pbihnbC5taW5ZKTtcbiAgICAgICAgICAgIH0gLy8gZ2wubWluWSBpcyBmb3Igc2luZ2xlIHktYXhpcyBjaGFydCwgaXQgd2lsbCBiZSBpZ25vcmVkIGluIG11bHRpLXlheGlzXG5cblxuICAgICAgICAgICAgZ2wubWluWSA9IGdsLm1pbllBcnJbaW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIGZvciBob3Jpem9udGFsIGJhciBjaGFydHMsIHdlIG5lZWQgdG8gY2hlY2sgeGF4aXMgbWluL21heCBhcyB1c2VyIG1heSBoYXZlIHNwZWNpZmllZCB0aGVyZVxuXG4gICAgICAgIGlmIChnbC5pc0Jhckhvcml6b250YWwpIHtcbiAgICAgICAgICB2YXIgbWlubWF4ID0gWydtaW4nLCAnbWF4J107XG4gICAgICAgICAgbWlubWF4LmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIGlmIChjbmYueGF4aXNbbV0gIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY25mLnhheGlzW21dID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICBtID09PSAnbWluJyA/IGdsLm1pblkgPSBjbmYueGF4aXNbbV0gOiBnbC5tYXhZID0gY25mLnhheGlzW21dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIGZvciBtdWx0aSB5LWF4aXMgd2UgbmVlZCBkaWZmZXJlbnQgc2NhbGVzIGZvciBlYWNoXG5cblxuICAgICAgICBpZiAoZ2wuaXNNdWx0aXBsZVlBeGlzKSB7XG4gICAgICAgICAgdGhpcy5zY2FsZXMuc2V0TXVsdGlwbGVZU2NhbGVzKCk7XG4gICAgICAgICAgZ2wubWluWSA9IGxvd2VzdFlJbkFsbFNlcmllcztcbiAgICAgICAgICBnbC55QXhpc1NjYWxlLmZvckVhY2goZnVuY3Rpb24gKHNjYWxlLCBpKSB7XG4gICAgICAgICAgICBnbC5taW5ZQXJyW2ldID0gc2NhbGUubmljZU1pbjtcbiAgICAgICAgICAgIGdsLm1heFlBcnJbaV0gPSBzY2FsZS5uaWNlTWF4O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2NhbGVzLnNldFlTY2FsZUZvckluZGV4KDAsIGdsLm1pblksIGdsLm1heFkpO1xuICAgICAgICAgIGdsLm1pblkgPSBnbC55QXhpc1NjYWxlWzBdLm5pY2VNaW47XG4gICAgICAgICAgZ2wubWF4WSA9IGdsLnlBeGlzU2NhbGVbMF0ubmljZU1heDtcbiAgICAgICAgICBnbC5taW5ZQXJyWzBdID0gZ2wueUF4aXNTY2FsZVswXS5uaWNlTWluO1xuICAgICAgICAgIGdsLm1heFlBcnJbMF0gPSBnbC55QXhpc1NjYWxlWzBdLm5pY2VNYXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1pblk6IGdsLm1pblksXG4gICAgICAgICAgbWF4WTogZ2wubWF4WSxcbiAgICAgICAgICBtaW5ZQXJyOiBnbC5taW5ZQXJyLFxuICAgICAgICAgIG1heFlBcnI6IGdsLm1heFlBcnJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0WFJhbmdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0WFJhbmdlKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIHZhciBpc1hOdW1lcmljID0gY25mLnhheGlzLnR5cGUgPT09ICdudW1lcmljJyB8fCBjbmYueGF4aXMudHlwZSA9PT0gJ2RhdGV0aW1lJyB8fCBjbmYueGF4aXMudHlwZSA9PT0gJ2NhdGVnb3J5JyAmJiAhZ2wubm9MYWJlbHNQcm92aWRlZCB8fCBnbC5ub0xhYmVsc1Byb3ZpZGVkIHx8IGdsLmlzWE51bWVyaWM7XG5cbiAgICAgICAgdmFyIGdldEluaXRpYWxNaW5YTWF4WCA9IGZ1bmN0aW9uIGdldEluaXRpYWxNaW5YTWF4WCgpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdsLnNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGdsLmxhYmVsc1tpXSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdsLmxhYmVsc1tpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChnbC5sYWJlbHNbaV1bal0gIT09IG51bGwgJiYgVXRpbHMuaXNOdW1iZXIoZ2wubGFiZWxzW2ldW2pdKSkge1xuICAgICAgICAgICAgICAgICAgZ2wubWF4WCA9IE1hdGgubWF4KGdsLm1heFgsIGdsLmxhYmVsc1tpXVtqXSk7XG4gICAgICAgICAgICAgICAgICBnbC5pbml0aWFsTWF4WCA9IE1hdGgubWF4KGdsLm1heFgsIGdsLmxhYmVsc1tpXVtqXSk7XG4gICAgICAgICAgICAgICAgICBnbC5taW5YID0gTWF0aC5taW4oZ2wubWluWCwgZ2wubGFiZWxzW2ldW2pdKTtcbiAgICAgICAgICAgICAgICAgIGdsLmluaXRpYWxNaW5YID0gTWF0aC5taW4oZ2wubWluWCwgZ2wubGFiZWxzW2ldW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07IC8vIG1pblggbWF4WCBzdGFydHMgaGVyZVxuXG5cbiAgICAgICAgaWYgKGdsLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICBnZXRJbml0aWFsTWluWE1heFgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnbC5ub0xhYmVsc1Byb3ZpZGVkKSB7XG4gICAgICAgICAgaWYgKGNuZi54YXhpcy5jYXRlZ29yaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2wubWF4WCA9IGdsLmxhYmVsc1tnbC5sYWJlbHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBnbC5pbml0aWFsTWF4WCA9IGdsLmxhYmVsc1tnbC5sYWJlbHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBnbC5taW5YID0gMTtcbiAgICAgICAgICAgIGdsLmluaXRpYWxNaW5YID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2wuaXNYTnVtZXJpYyB8fCBnbC5ub0xhYmVsc1Byb3ZpZGVkIHx8IGdsLmRhdGFGb3JtYXRYTnVtZXJpYykge1xuICAgICAgICAgIHZhciB0aWNrcztcblxuICAgICAgICAgIGlmIChjbmYueGF4aXMudGlja0Ftb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aWNrcyA9IE1hdGgucm91bmQoZ2wuc3ZnV2lkdGggLyAxNTApOyAvLyBubyBsYWJlbHMgcHJvdmlkZWQgYW5kIHRvdGFsIG51bWJlciBvZiBkYXRhUG9pbnRzIGlzIGxlc3MgdGhhbiAzMFxuXG4gICAgICAgICAgICBpZiAoY25mLnhheGlzLnR5cGUgPT09ICdudW1lcmljJyAmJiBnbC5kYXRhUG9pbnRzIDwgMzApIHtcbiAgICAgICAgICAgICAgdGlja3MgPSBnbC5kYXRhUG9pbnRzIC0gMTtcbiAgICAgICAgICAgIH0gLy8gdGhpcyBjaGVjayBpcyBmb3Igd2hlbiB0aWNrcyBleGNlZWRzIHRvdGFsIGRhdGFwb2ludHMgYW5kIHRoYXQgd291bGQgcmVzdWx0IGluIGR1cGxpY2F0ZSBsYWJlbHNcblxuXG4gICAgICAgICAgICBpZiAodGlja3MgPiBnbC5kYXRhUG9pbnRzICYmIGdsLmRhdGFQb2ludHMgIT09IDApIHtcbiAgICAgICAgICAgICAgdGlja3MgPSBnbC5kYXRhUG9pbnRzIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNuZi54YXhpcy50aWNrQW1vdW50ID09PSAnZGF0YVBvaW50cycpIHtcbiAgICAgICAgICAgIGlmIChnbC5zZXJpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICB0aWNrcyA9IGdsLnNlcmllc1tnbC5tYXhWYWxzSW5BcnJheUluZGV4XS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZ2wuaXNYTnVtZXJpYykge1xuICAgICAgICAgICAgICB0aWNrcyA9IGdsLm1heFggLSBnbC5taW5YIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlja3MgPSBjbmYueGF4aXMudGlja0Ftb3VudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnbC54VGlja0Ftb3VudCA9IHRpY2tzOyAvLyBvdmVycmlkZSBhbGwgbWluL21heCB2YWx1ZXMgYnkgdXNlciBkZWZpbmVkIHZhbHVlcyAoeCBheGlzKVxuXG4gICAgICAgICAgaWYgKGNuZi54YXhpcy5tYXggIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY25mLnhheGlzLm1heCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGdsLm1heFggPSBjbmYueGF4aXMubWF4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjbmYueGF4aXMubWluICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGNuZi54YXhpcy5taW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBnbC5taW5YID0gY25mLnhheGlzLm1pbjtcbiAgICAgICAgICB9IC8vIGlmIHJhbmdlIGlzIHByb3ZpZGVkLCBhZGp1c3QgdGhlIG5ldyBtaW5YXG5cblxuICAgICAgICAgIGlmIChjbmYueGF4aXMucmFuZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZ2wubWluWCA9IGdsLm1heFggLSBjbmYueGF4aXMucmFuZ2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGdsLm1pblggIT09IE51bWJlci5NQVhfVkFMVUUgJiYgZ2wubWF4WCAhPT0gLU51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIGlmIChjbmYueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljICYmICFnbC5kYXRhRm9ybWF0WE51bWVyaWMpIHtcbiAgICAgICAgICAgICAgdmFyIGNhdFNjYWxlID0gW107XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGdsLm1pblggLSAxOyBpIDwgZ2wubWF4WDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2F0U2NhbGUucHVzaChpICsgMSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBnbC54QXhpc1NjYWxlID0ge1xuICAgICAgICAgICAgICAgIHJlc3VsdDogY2F0U2NhbGUsXG4gICAgICAgICAgICAgICAgbmljZU1pbjogY2F0U2NhbGVbMF0sXG4gICAgICAgICAgICAgICAgbmljZU1heDogY2F0U2NhbGVbY2F0U2NhbGUubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGdsLnhBeGlzU2NhbGUgPSB0aGlzLnNjYWxlcy5zZXRYU2NhbGUoZ2wubWluWCwgZ2wubWF4WCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsLnhBeGlzU2NhbGUgPSB0aGlzLnNjYWxlcy5saW5lYXJTY2FsZSgxLCB0aWNrcywgdGlja3MpO1xuXG4gICAgICAgICAgICBpZiAoZ2wubm9MYWJlbHNQcm92aWRlZCAmJiBnbC5sYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBnbC54QXhpc1NjYWxlID0gdGhpcy5zY2FsZXMubGluZWFyU2NhbGUoMSwgZ2wubGFiZWxzLmxlbmd0aCwgdGlja3MgLSAxKTsgLy8gdGhpcyBpcyB0aGUgb25seSBwbGFjZSBzZXJpZXNYIGlzIGFnYWluIG11dGF0ZWRcblxuICAgICAgICAgICAgICBnbC5zZXJpZXNYID0gZ2wubGFiZWxzLnNsaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyB3ZSB3aWxsIHN0aWxsIHN0b3JlIHRoZXNlIGxhYmVscyBhcyB0aGUgY291bnQgZm9yIHRoaXMgd2lsbCBiZSBkaWZmZXJlbnQgKHRvIGRyYXcgZ3JpZCBhbmQgbGFiZWxzIHBsYWNlbWVudClcblxuXG4gICAgICAgICAgaWYgKGlzWE51bWVyaWMpIHtcbiAgICAgICAgICAgIGdsLmxhYmVscyA9IGdsLnhBeGlzU2NhbGUucmVzdWx0LnNsaWNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsLmlzQmFySG9yaXpvbnRhbCAmJiBnbC5sYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgZ2wueFRpY2tBbW91bnQgPSBnbC5sYWJlbHMubGVuZ3RoO1xuICAgICAgICB9IC8vIHNpbmdsZSBkYXRhUG9pbnRcblxuXG4gICAgICAgIHRoaXMuX2hhbmRsZVNpbmdsZURhdGFQb2ludCgpOyAvLyBtaW5pbXVtIHggZGlmZmVyZW5jZSB0byBjYWxjdWxhdGUgYmFyIHdpZHRoIGluIG51bWVyaWMgYmFyc1xuXG5cbiAgICAgICAgdGhpcy5fZ2V0TWluWERpZmYoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1pblg6IGdsLm1pblgsXG4gICAgICAgICAgbWF4WDogZ2wubWF4WFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRaUmFuZ2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRaUmFuZ2UoKSB7XG4gICAgICAgIC8vIG1pblosIG1heFogc3RhcnRzIGhlcmVcbiAgICAgICAgdmFyIGdsID0gdGhpcy53Lmdsb2JhbHM7XG4gICAgICAgIGlmICghZ2wuaXNEYXRhWFlaKSByZXR1cm47XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbC5zZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGdsLnNlcmllc1pbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdsLnNlcmllc1pbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgaWYgKGdsLnNlcmllc1pbaV1bal0gIT09IG51bGwgJiYgVXRpbHMuaXNOdW1iZXIoZ2wuc2VyaWVzWltpXVtqXSkpIHtcbiAgICAgICAgICAgICAgICBnbC5tYXhaID0gTWF0aC5tYXgoZ2wubWF4WiwgZ2wuc2VyaWVzWltpXVtqXSk7XG4gICAgICAgICAgICAgICAgZ2wubWluWiA9IE1hdGgubWluKGdsLm1pblosIGdsLnNlcmllc1pbaV1bal0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9oYW5kbGVTaW5nbGVEYXRhUG9pbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlU2luZ2xlRGF0YVBvaW50KCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG5cbiAgICAgICAgaWYgKGdsLm1pblggPT09IGdsLm1heFgpIHtcbiAgICAgICAgICB2YXIgZGF0ZXRpbWVPYmogPSBuZXcgRGF0ZVRpbWUodGhpcy5jdHgpO1xuXG4gICAgICAgICAgaWYgKGNuZi54YXhpcy50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICB2YXIgbmV3TWluWCA9IGRhdGV0aW1lT2JqLmdldERhdGUoZ2wubWluWCk7XG4gICAgICAgICAgICBuZXdNaW5YLnNldFVUQ0RhdGUobmV3TWluWC5nZXREYXRlKCkgLSAyKTtcbiAgICAgICAgICAgIGdsLm1pblggPSBuZXcgRGF0ZShuZXdNaW5YKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB2YXIgbmV3TWF4WCA9IGRhdGV0aW1lT2JqLmdldERhdGUoZ2wubWF4WCk7XG4gICAgICAgICAgICBuZXdNYXhYLnNldFVUQ0RhdGUobmV3TWF4WC5nZXREYXRlKCkgKyAyKTtcbiAgICAgICAgICAgIGdsLm1heFggPSBuZXcgRGF0ZShuZXdNYXhYKS5nZXRUaW1lKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjbmYueGF4aXMudHlwZSA9PT0gJ251bWVyaWMnIHx8IGNuZi54YXhpcy50eXBlID09PSAnY2F0ZWdvcnknICYmICFnbC5ub0xhYmVsc1Byb3ZpZGVkKSB7XG4gICAgICAgICAgICBnbC5taW5YID0gZ2wubWluWCAtIDI7XG4gICAgICAgICAgICBnbC5pbml0aWFsTWluWCA9IGdsLm1pblg7XG4gICAgICAgICAgICBnbC5tYXhYID0gZ2wubWF4WCArIDI7XG4gICAgICAgICAgICBnbC5pbml0aWFsTWF4WCA9IGdsLm1heFg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRNaW5YRGlmZlwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRNaW5YRGlmZigpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy53Lmdsb2JhbHM7XG5cbiAgICAgICAgaWYgKGdsLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIGxlYXN0IHggZGlmZiBpZiBudW1lcmljIHggYXhpcyBpcyBwcmVzZW50XG4gICAgICAgICAgZ2wuc2VyaWVzWC5mb3JFYWNoKGZ1bmN0aW9uIChzWCwgaSkge1xuICAgICAgICAgICAgaWYgKHNYLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAvLyBhIHNtYWxsIGhhY2sgdG8gcHJldmVudCBvdmVybGFwcGluZyBtdWx0aXBsZSBiYXJzIHdoZW4gdGhlcmUgaXMganVzdCAxIGRhdGFwb2ludCBpbiBiYXIgc2VyaWVzLlxuICAgICAgICAgICAgICAvLyBmaXggIzgxMVxuICAgICAgICAgICAgICBzWC5wdXNoKGdsLnNlcmllc1hbZ2wubWF4VmFsc0luQXJyYXlJbmRleF1bZ2wuc2VyaWVzWFtnbC5tYXhWYWxzSW5BcnJheUluZGV4XS5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICB9IC8vIGZpeCAjOTgzIChjbG9uZSB0aGUgYXJyYXkgdG8gYXZvaWQgc2lkZSBlZmZlY3RzKVxuXG5cbiAgICAgICAgICAgIHZhciBzZXJpZXNYID0gc1guc2xpY2UoKTtcbiAgICAgICAgICAgIHNlcmllc1guc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlcmllc1guZm9yRWFjaChmdW5jdGlvbiAocywgaikge1xuICAgICAgICAgICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgeERpZmYgPSBzIC0gZ2wuc2VyaWVzWFtpXVtqIC0gMV07XG5cbiAgICAgICAgICAgICAgICBpZiAoeERpZmYgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBnbC5taW5YRGlmZiA9IE1hdGgubWluKHhEaWZmLCBnbC5taW5YRGlmZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGdsLmRhdGFQb2ludHMgPT09IDEgJiYgZ2wubWluWERpZmYgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgICAgZ2wubWluWERpZmYgPSAwLjU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3NldFN0YWNrZWRNaW5NYXhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0U3RhY2tlZE1pbk1heCgpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy53Lmdsb2JhbHM7IC8vIGZvciBzdGFja2VkIGNoYXJ0cywgd2UgY2FsY3VsYXRlIGVhY2ggc2VyaWVzJ3MgcGFyYWxsZWwgdmFsdWVzLiBpLmUsIHNlcmllc1swXVtqXSArIHNlcmllc1sxXVtqXSAuLi4uIFtzZXJpZXNbaS5sZW5ndGhdW2pdXSBhbmQgZ2V0IHRoZSBtYXggb3V0IG9mIGl0XG5cbiAgICAgICAgdmFyIHN0YWNrZWRQb3NzID0gW107XG4gICAgICAgIHZhciBzdGFja2VkTmVncyA9IFtdO1xuXG4gICAgICAgIGlmIChnbC5zZXJpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBnbC5zZXJpZXNbZ2wubWF4VmFsc0luQXJyYXlJbmRleF0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBwb3NzID0gMDtcbiAgICAgICAgICAgIHZhciBuZWdzID0gMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbC5zZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGdsLnNlcmllc1tpXVtqXSAhPT0gbnVsbCAmJiBVdGlscy5pc051bWJlcihnbC5zZXJpZXNbaV1bal0pKSB7XG4gICAgICAgICAgICAgICAgLy8gMC4wMDAxIGZpeGVzICMxODUgd2hlbiB2YWx1ZXMgYXJlIHZlcnkgc21hbGxcbiAgICAgICAgICAgICAgICBnbC5zZXJpZXNbaV1bal0gPiAwID8gcG9zcyA9IHBvc3MgKyBwYXJzZUZsb2F0KGdsLnNlcmllc1tpXVtqXSkgKyAwLjAwMDEgOiBuZWdzID0gbmVncyArIHBhcnNlRmxvYXQoZ2wuc2VyaWVzW2ldW2pdKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChpID09PSBnbC5zZXJpZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIC8vIHB1c2ggYWxsIHRoZSB0b3RhbHMgdG8gdGhlIGFycmF5IGZvciBmdXR1cmUgdXNlXG4gICAgICAgICAgICAgICAgc3RhY2tlZFBvc3MucHVzaChwb3NzKTtcbiAgICAgICAgICAgICAgICBzdGFja2VkTmVncy5wdXNoKG5lZ3MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGdldCB0aGUgbWF4L21pbiBvdXQgb2YgdGhlIGFkZGVkIHBhcmFsbGVsIHZhbHVlc1xuXG5cbiAgICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCBzdGFja2VkUG9zcy5sZW5ndGg7IHorKykge1xuICAgICAgICAgIGdsLm1heFkgPSBNYXRoLm1heChnbC5tYXhZLCBzdGFja2VkUG9zc1t6XSk7XG4gICAgICAgICAgZ2wubWluWSA9IE1hdGgubWluKGdsLm1pblksIHN0YWNrZWROZWdzW3pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBSYW5nZSQxO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgWUF4aXMgQ2xhc3MgZm9yIGRyYXdpbmcgWS1BeGlzLlxuICAgKlxuICAgKiBAbW9kdWxlIFlBeGlzXG4gICAqKi9cblxuICB2YXIgWUF4aXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFlBeGlzKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFlBeGlzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgdGhpcy54YXhpc0ZvbnRTaXplID0gdy5jb25maWcueGF4aXMubGFiZWxzLnN0eWxlLmZvbnRTaXplO1xuICAgICAgdGhpcy5heGlzRm9udEZhbWlseSA9IHcuY29uZmlnLnhheGlzLmxhYmVscy5zdHlsZS5mb250RmFtaWx5O1xuICAgICAgdGhpcy54YXhpc0ZvcmVDb2xvcnMgPSB3LmNvbmZpZy54YXhpcy5sYWJlbHMuc3R5bGUuY29sb3JzO1xuICAgICAgdGhpcy5pc0NhdGVnb3J5QmFySG9yaXpvbnRhbCA9IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdiYXInICYmIHcuY29uZmlnLnBsb3RPcHRpb25zLmJhci5ob3Jpem9udGFsO1xuICAgICAgdGhpcy54QXhpc29mZlggPSAwO1xuXG4gICAgICBpZiAody5jb25maWcueGF4aXMucG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHRoaXMueEF4aXNvZmZYID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZHJhd25MYWJlbHMgPSBbXTtcbiAgICAgIHRoaXMuYXhlc1V0aWxzID0gbmV3IEF4ZXNVdGlscyhjdHgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhZQXhpcywgW3tcbiAgICAgIGtleTogXCJkcmF3WWF4aXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3WWF4aXMocmVhbEluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgeWF4aXNTdHlsZSA9IHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0ubGFiZWxzLnN0eWxlO1xuICAgICAgICB2YXIgeWF4aXNGb250U2l6ZSA9IHlheGlzU3R5bGUuZm9udFNpemU7XG4gICAgICAgIHZhciB5YXhpc0ZvbnRGYW1pbHkgPSB5YXhpc1N0eWxlLmZvbnRGYW1pbHk7XG4gICAgICAgIHZhciB5YXhpc0ZvbnRXZWlnaHQgPSB5YXhpc1N0eWxlLmZvbnRXZWlnaHQ7XG4gICAgICAgIHZhciBlbFlheGlzID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy15YXhpcycsXG4gICAgICAgICAgcmVsOiByZWFsSW5kZXgsXG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKCcgKyB3Lmdsb2JhbHMudHJhbnNsYXRlWUF4aXNYW3JlYWxJbmRleF0gKyAnLCAwKSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuYXhlc1V0aWxzLmlzWUF4aXNIaWRkZW4ocmVhbEluZGV4KSkge1xuICAgICAgICAgIHJldHVybiBlbFlheGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsWWF4aXNUZXh0cyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMteWF4aXMtdGV4dHMtZydcbiAgICAgICAgfSk7XG4gICAgICAgIGVsWWF4aXMuYWRkKGVsWWF4aXNUZXh0cyk7XG4gICAgICAgIHZhciB0aWNrQW1vdW50ID0gdy5nbG9iYWxzLnlBeGlzU2NhbGVbcmVhbEluZGV4XS5yZXN1bHQubGVuZ3RoIC0gMTsgLy8gbGFiZWxzRGl2aWRlciBpcyBzaW1wbHkgc3ZnIGhlaWdodC9udW1iZXIgb2YgdGlja3NcblxuICAgICAgICB2YXIgbGFiZWxzRGl2aWRlciA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC8gdGlja0Ftb3VudDsgLy8gaW5pdGlhbCBsYWJlbCBwb3NpdGlvbiA9IDA7XG5cbiAgICAgICAgdmFyIGwgPSB3Lmdsb2JhbHMudHJhbnNsYXRlWTtcbiAgICAgICAgdmFyIGxiRm9ybWF0dGVyID0gdy5nbG9iYWxzLnlMYWJlbEZvcm1hdHRlcnNbcmVhbEluZGV4XTtcbiAgICAgICAgdmFyIGxhYmVscyA9IHcuZ2xvYmFscy55QXhpc1NjYWxlW3JlYWxJbmRleF0ucmVzdWx0LnNsaWNlKCk7XG4gICAgICAgIGxhYmVscyA9IHRoaXMuYXhlc1V0aWxzLmNoZWNrRm9yUmV2ZXJzZWRMYWJlbHMocmVhbEluZGV4LCBsYWJlbHMpO1xuICAgICAgICB2YXIgZmlyc3RMYWJlbCA9ICcnO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLmxhYmVscy5zaG93KSB7XG4gICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkge1xuICAgICAgICAgICAgdmFyIHZhbCA9IGxhYmVsc1tpXTtcbiAgICAgICAgICAgIHZhbCA9IGxiRm9ybWF0dGVyKHZhbCwgaSk7XG4gICAgICAgICAgICB2YXIgeFBhZCA9IHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0ubGFiZWxzLnBhZGRpbmc7XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLm9wcG9zaXRlICYmIHcuY29uZmlnLnlheGlzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICB4UGFkID0geFBhZCAqIC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZ2V0Rm9yZUNvbG9yID0gZnVuY3Rpb24gZ2V0Rm9yZUNvbG9yKCkge1xuICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh5YXhpc1N0eWxlLmNvbG9ycykgPyB5YXhpc1N0eWxlLmNvbG9yc1tpXSA6IHlheGlzU3R5bGUuY29sb3JzO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGxhYmVsID0gZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgICAgICB4OiB4UGFkLFxuICAgICAgICAgICAgICB5OiBsICsgdGlja0Ftb3VudCAvIDEwICsgdy5jb25maWcueWF4aXNbcmVhbEluZGV4XS5sYWJlbHMub2Zmc2V0WSArIDEsXG4gICAgICAgICAgICAgIHRleHQ6IHZhbCxcbiAgICAgICAgICAgICAgdGV4dEFuY2hvcjogdy5jb25maWcueWF4aXNbcmVhbEluZGV4XS5vcHBvc2l0ZSA/ICdzdGFydCcgOiAnZW5kJyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IHlheGlzRm9udFNpemUsXG4gICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHlheGlzRm9udEZhbWlseSxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogeWF4aXNGb250V2VpZ2h0LFxuICAgICAgICAgICAgICBmb3JlQ29sb3I6IGdldEZvcmVDb2xvcigpLFxuICAgICAgICAgICAgICBpc1BsYWluVGV4dDogZmFsc2UsXG4gICAgICAgICAgICAgIGNzc0NsYXNzOiAnYXBleGNoYXJ0cy15YXhpcy1sYWJlbCAnICsgeWF4aXNTdHlsZS5jc3NDbGFzc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpID09PSB0aWNrQW1vdW50KSB7XG4gICAgICAgICAgICAgIGZpcnN0TGFiZWwgPSBsYWJlbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxZYXhpc1RleHRzLmFkZChsYWJlbCk7XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLmxhYmVscy5yb3RhdGUgIT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIGZpcnN0YWJlbFJvdGF0aW5nQ2VudGVyID0gZ3JhcGhpY3Mucm90YXRlQXJvdW5kQ2VudGVyKGZpcnN0TGFiZWwubm9kZSk7XG4gICAgICAgICAgICAgIHZhciBsYWJlbFJvdGF0aW5nQ2VudGVyID0gZ3JhcGhpY3Mucm90YXRlQXJvdW5kQ2VudGVyKGxhYmVsLm5vZGUpO1xuICAgICAgICAgICAgICBsYWJlbC5ub2RlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgXCJyb3RhdGUoXCIuY29uY2F0KHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0ubGFiZWxzLnJvdGF0ZSwgXCIgXCIpLmNvbmNhdChmaXJzdGFiZWxSb3RhdGluZ0NlbnRlci54LCBcIiBcIikuY29uY2F0KGxhYmVsUm90YXRpbmdDZW50ZXIueSwgXCIpXCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbCA9IGwgKyBsYWJlbHNEaXZpZGVyO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gdGlja0Ftb3VudDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIF9sb29wKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLnRpdGxlLnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBlbFlheGlzVGl0bGUgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMteWF4aXMtdGl0bGUnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIF94ID0gMDtcblxuICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLm9wcG9zaXRlKSB7XG4gICAgICAgICAgICBfeCA9IHcuZ2xvYmFscy50cmFuc2xhdGVZQXhpc1hbcmVhbEluZGV4XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZWxZQXhpc1RpdGxlVGV4dCA9IGdyYXBoaWNzLmRyYXdUZXh0KHtcbiAgICAgICAgICAgIHg6IF94LFxuICAgICAgICAgICAgeTogdy5nbG9iYWxzLmdyaWRIZWlnaHQgLyAyICsgdy5nbG9iYWxzLnRyYW5zbGF0ZVkgKyB3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLnRpdGxlLm9mZnNldFksXG4gICAgICAgICAgICB0ZXh0OiB3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLnRpdGxlLnRleHQsXG4gICAgICAgICAgICB0ZXh0QW5jaG9yOiAnZW5kJyxcbiAgICAgICAgICAgIGZvcmVDb2xvcjogdy5jb25maWcueWF4aXNbcmVhbEluZGV4XS50aXRsZS5zdHlsZS5jb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiB3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLnRpdGxlLnN0eWxlLmZvbnRTaXplLFxuICAgICAgICAgICAgZm9udFdlaWdodDogdy5jb25maWcueWF4aXNbcmVhbEluZGV4XS50aXRsZS5zdHlsZS5mb250V2VpZ2h0LFxuICAgICAgICAgICAgZm9udEZhbWlseTogdy5jb25maWcueWF4aXNbcmVhbEluZGV4XS50aXRsZS5zdHlsZS5mb250RmFtaWx5LFxuICAgICAgICAgICAgY3NzQ2xhc3M6ICdhcGV4Y2hhcnRzLXlheGlzLXRpdGxlLXRleHQgJyArIHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0udGl0bGUuc3R5bGUuY3NzQ2xhc3NcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbFlheGlzVGl0bGUuYWRkKGVsWUF4aXNUaXRsZVRleHQpO1xuICAgICAgICAgIGVsWWF4aXMuYWRkKGVsWWF4aXNUaXRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXhpc0JvcmRlciA9IHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0uYXhpc0JvcmRlcjtcbiAgICAgICAgdmFyIHggPSAzMSArIGF4aXNCb3JkZXIub2Zmc2V0WDtcblxuICAgICAgICBpZiAody5jb25maWcueWF4aXNbcmVhbEluZGV4XS5vcHBvc2l0ZSkge1xuICAgICAgICAgIHggPSAtMzEgLSBheGlzQm9yZGVyLm9mZnNldFg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpc0JvcmRlci5zaG93KSB7XG4gICAgICAgICAgdmFyIGVsVmVydGljYWxMaW5lID0gZ3JhcGhpY3MuZHJhd0xpbmUoeCwgdy5nbG9iYWxzLnRyYW5zbGF0ZVkgKyBheGlzQm9yZGVyLm9mZnNldFkgLSAyLCB4LCB3Lmdsb2JhbHMuZ3JpZEhlaWdodCArIHcuZ2xvYmFscy50cmFuc2xhdGVZICsgYXhpc0JvcmRlci5vZmZzZXRZICsgMiwgYXhpc0JvcmRlci5jb2xvciwgMCwgYXhpc0JvcmRlci53aWR0aCk7XG4gICAgICAgICAgZWxZYXhpcy5hZGQoZWxWZXJ0aWNhbExpbmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0uYXhpc1RpY2tzLnNob3cpIHtcbiAgICAgICAgICB0aGlzLmF4ZXNVdGlscy5kcmF3WUF4aXNUaWNrcyh4LCB0aWNrQW1vdW50LCBheGlzQm9yZGVyLCB3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLmF4aXNUaWNrcywgcmVhbEluZGV4LCBsYWJlbHNEaXZpZGVyLCBlbFlheGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbFlheGlzO1xuICAgICAgfSAvLyBUaGlzIGFjdHVhbGx5IGJlY29tZXMgaG9yaXpvbmFsIGF4aXMgKGZvciBiYXIgY2hhcnRzKVxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdZYXhpc0ludmVyc2VkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1lheGlzSW52ZXJzZWQocmVhbEluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZWxYYXhpcyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMteGF4aXMgYXBleGNoYXJ0cy15YXhpcy1pbnZlcnNlZCdcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBlbFhheGlzVGV4dHMgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXhheGlzLXRleHRzLWcnLFxuICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHcuZ2xvYmFscy50cmFuc2xhdGVYQXhpc1gsIFwiLCBcIikuY29uY2F0KHcuZ2xvYmFscy50cmFuc2xhdGVYQXhpc1ksIFwiKVwiKVxuICAgICAgICB9KTtcbiAgICAgICAgZWxYYXhpcy5hZGQoZWxYYXhpc1RleHRzKTtcbiAgICAgICAgdmFyIHRpY2tBbW91bnQgPSB3Lmdsb2JhbHMueUF4aXNTY2FsZVtyZWFsSW5kZXhdLnJlc3VsdC5sZW5ndGggLSAxOyAvLyBsYWJlbHNEaXZpZGVyIGlzIHNpbXBseSBzdmcgd2lkdGgvbnVtYmVyIG9mIHRpY2tzXG5cbiAgICAgICAgdmFyIGxhYmVsc0RpdmlkZXIgPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gdGlja0Ftb3VudCArIDAuMTsgLy8gaW5pdGlhbCBsYWJlbCBwb3NpdGlvbjtcblxuICAgICAgICB2YXIgbCA9IGxhYmVsc0RpdmlkZXIgKyB3LmNvbmZpZy54YXhpcy5sYWJlbHMub2Zmc2V0WDtcbiAgICAgICAgdmFyIGxiRm9ybWF0dGVyID0gdy5nbG9iYWxzLnhMYWJlbEZvcm1hdHRlcjtcbiAgICAgICAgdmFyIGxhYmVscyA9IHcuZ2xvYmFscy55QXhpc1NjYWxlW3JlYWxJbmRleF0ucmVzdWx0LnNsaWNlKCk7XG4gICAgICAgIHZhciB0aW1lc2NhbGVMYWJlbHMgPSB3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzO1xuXG4gICAgICAgIGlmICh0aW1lc2NhbGVMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMueGF4aXNMYWJlbHMgPSB0aW1lc2NhbGVMYWJlbHMuc2xpY2UoKTtcbiAgICAgICAgICBsYWJlbHMgPSB0aW1lc2NhbGVMYWJlbHMuc2xpY2UoKTtcbiAgICAgICAgICB0aWNrQW1vdW50ID0gbGFiZWxzLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhYmVscyA9IHRoaXMuYXhlc1V0aWxzLmNoZWNrRm9yUmV2ZXJzZWRMYWJlbHMocmVhbEluZGV4LCBsYWJlbHMpO1xuICAgICAgICB2YXIgdGwgPSB0aW1lc2NhbGVMYWJlbHMubGVuZ3RoO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5sYWJlbHMuc2hvdykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSB0bCA/IDAgOiB0aWNrQW1vdW50OyB0bCA/IGkgPCB0bCA6IGkgPj0gMDsgdGwgPyBpKysgOiBpLS0pIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBsYWJlbHNbaV07XG4gICAgICAgICAgICB2YWwgPSBsYkZvcm1hdHRlcih2YWwsIGkpO1xuICAgICAgICAgICAgdmFyIHggPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoICsgdy5nbG9iYWxzLnBhZEhvcml6b250YWwgLSAobCAtIGxhYmVsc0RpdmlkZXIgKyB3LmNvbmZpZy54YXhpcy5sYWJlbHMub2Zmc2V0WCk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lc2NhbGVMYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciBsYWJlbCA9IHRoaXMuYXhlc1V0aWxzLmdldExhYmVsKGxhYmVscywgdGltZXNjYWxlTGFiZWxzLCB4LCBpLCB0aGlzLmRyYXduTGFiZWxzLCB0aGlzLnhheGlzRm9udFNpemUpO1xuICAgICAgICAgICAgICB4ID0gbGFiZWwueDtcbiAgICAgICAgICAgICAgdmFsID0gbGFiZWwudGV4dDtcbiAgICAgICAgICAgICAgdGhpcy5kcmF3bkxhYmVscy5wdXNoKGxhYmVsLnRleHQpO1xuXG4gICAgICAgICAgICAgIGlmIChpID09PSAwICYmIHcuZ2xvYmFscy5za2lwRmlyc3RUaW1lbGluZWxhYmVsKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gJyc7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoaSA9PT0gbGFiZWxzLmxlbmd0aCAtIDEgJiYgdy5nbG9iYWxzLnNraXBMYXN0VGltZWxpbmVsYWJlbCkge1xuICAgICAgICAgICAgICAgIHZhbCA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBlbFRpY2sgPSBncmFwaGljcy5kcmF3VGV4dCh7XG4gICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgIHk6IHRoaXMueEF4aXNvZmZYICsgdy5jb25maWcueGF4aXMubGFiZWxzLm9mZnNldFkgKyAzMCAtICh3LmNvbmZpZy54YXhpcy5wb3NpdGlvbiA9PT0gJ3RvcCcgPyB3Lmdsb2JhbHMueEF4aXNIZWlnaHQgKyB3LmNvbmZpZy54YXhpcy5heGlzVGlja3MuaGVpZ2h0IC0gMiA6IDApLFxuICAgICAgICAgICAgICB0ZXh0OiB2YWwsXG4gICAgICAgICAgICAgIHRleHRBbmNob3I6ICdtaWRkbGUnLFxuICAgICAgICAgICAgICBmb3JlQ29sb3I6IEFycmF5LmlzQXJyYXkodGhpcy54YXhpc0ZvcmVDb2xvcnMpID8gdGhpcy54YXhpc0ZvcmVDb2xvcnNbcmVhbEluZGV4XSA6IHRoaXMueGF4aXNGb3JlQ29sb3JzLFxuICAgICAgICAgICAgICBmb250U2l6ZTogdGhpcy54YXhpc0ZvbnRTaXplLFxuICAgICAgICAgICAgICBmb250RmFtaWx5OiB0aGlzLnhheGlzRm9udEZhbWlseSxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogdy5jb25maWcueGF4aXMubGFiZWxzLnN0eWxlLmZvbnRXZWlnaHQsXG4gICAgICAgICAgICAgIGlzUGxhaW5UZXh0OiBmYWxzZSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdhcGV4Y2hhcnRzLXhheGlzLWxhYmVsICcgKyB3LmNvbmZpZy54YXhpcy5sYWJlbHMuc3R5bGUuY3NzQ2xhc3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxYYXhpc1RleHRzLmFkZChlbFRpY2spO1xuICAgICAgICAgICAgZWxUaWNrLnRzcGFuKHZhbCk7XG4gICAgICAgICAgICB2YXIgZWxUb29sdGlwVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMody5nbG9iYWxzLlNWR05TLCAndGl0bGUnKTtcbiAgICAgICAgICAgIGVsVG9vbHRpcFRpdGxlLnRleHRDb250ZW50ID0gdmFsO1xuICAgICAgICAgICAgZWxUaWNrLm5vZGUuYXBwZW5kQ2hpbGQoZWxUb29sdGlwVGl0bGUpO1xuICAgICAgICAgICAgbCA9IGwgKyBsYWJlbHNEaXZpZGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW52ZXJzZWRZQXhpc1RpdGxlVGV4dChlbFhheGlzKTtcbiAgICAgICAgdGhpcy5pbnZlcnNlZFlBeGlzQm9yZGVyKGVsWGF4aXMpO1xuICAgICAgICByZXR1cm4gZWxYYXhpcztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW52ZXJzZWRZQXhpc0JvcmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGludmVyc2VkWUF4aXNCb3JkZXIocGFyZW50KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgYXhpc0JvcmRlciA9IHcuY29uZmlnLnhheGlzLmF4aXNCb3JkZXI7XG5cbiAgICAgICAgaWYgKGF4aXNCb3JkZXIuc2hvdykge1xuICAgICAgICAgIHZhciBsaW5lQ29ycmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2JhcicgJiYgdy5nbG9iYWxzLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICAgIGxpbmVDb3JyZWN0aW9uID0gbGluZUNvcnJlY3Rpb24gLSAxNTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZWxIb3J6TGluZSA9IGdyYXBoaWNzLmRyYXdMaW5lKHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsICsgbGluZUNvcnJlY3Rpb24gKyBheGlzQm9yZGVyLm9mZnNldFgsIHRoaXMueEF4aXNvZmZYLCB3Lmdsb2JhbHMuZ3JpZFdpZHRoLCB0aGlzLnhBeGlzb2ZmWCwgYXhpc0JvcmRlci5jb2xvciwgMCwgYXhpc0JvcmRlci5oZWlnaHQpO1xuICAgICAgICAgIHBhcmVudC5hZGQoZWxIb3J6TGluZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW52ZXJzZWRZQXhpc1RpdGxlVGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGludmVyc2VkWUF4aXNUaXRsZVRleHQocGFyZW50KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgZWxZYXhpc1RpdGxlID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXhheGlzLXRpdGxlIGFwZXhjaGFydHMteWF4aXMtdGl0bGUtaW52ZXJzZWQnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGVsWUF4aXNUaXRsZVRleHQgPSBncmFwaGljcy5kcmF3VGV4dCh7XG4gICAgICAgICAgICB4OiB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gMiArIHcuY29uZmlnLnhheGlzLnRpdGxlLm9mZnNldFgsXG4gICAgICAgICAgICB5OiB0aGlzLnhBeGlzb2ZmWCArIHBhcnNlRmxvYXQodGhpcy54YXhpc0ZvbnRTaXplKSArIHBhcnNlRmxvYXQody5jb25maWcueGF4aXMudGl0bGUuc3R5bGUuZm9udFNpemUpICsgdy5jb25maWcueGF4aXMudGl0bGUub2Zmc2V0WSArIDIwLFxuICAgICAgICAgICAgdGV4dDogdy5jb25maWcueGF4aXMudGl0bGUudGV4dCxcbiAgICAgICAgICAgIHRleHRBbmNob3I6ICdtaWRkbGUnLFxuICAgICAgICAgICAgZm9udFNpemU6IHcuY29uZmlnLnhheGlzLnRpdGxlLnN0eWxlLmZvbnRTaXplLFxuICAgICAgICAgICAgZm9udEZhbWlseTogdy5jb25maWcueGF4aXMudGl0bGUuc3R5bGUuZm9udEZhbWlseSxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHcuY29uZmlnLnhheGlzLnRpdGxlLnN0eWxlLmZvbnRXZWlnaHQsXG4gICAgICAgICAgICBjc3NDbGFzczogJ2FwZXhjaGFydHMteGF4aXMtdGl0bGUtdGV4dCAnICsgdy5jb25maWcueGF4aXMudGl0bGUuc3R5bGUuY3NzQ2xhc3NcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbFlheGlzVGl0bGUuYWRkKGVsWUF4aXNUaXRsZVRleHQpO1xuICAgICAgICAgIHBhcmVudC5hZGQoZWxZYXhpc1RpdGxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ5QXhpc1RpdGxlUm90YXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24geUF4aXNUaXRsZVJvdGF0ZShyZWFsSW5kZXgsIHlBeGlzT3Bwb3NpdGUpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciB5QXhpc0xhYmVsc0Nvb3JkID0ge1xuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9O1xuICAgICAgICB2YXIgeUF4aXNUaXRsZUNvb3JkID0ge1xuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9O1xuICAgICAgICB2YXIgZWxZQXhpc0xhYmVsc1dyYXAgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiIC5hcGV4Y2hhcnRzLXlheGlzW3JlbD0nXCIuY29uY2F0KHJlYWxJbmRleCwgXCInXSAuYXBleGNoYXJ0cy15YXhpcy10ZXh0cy1nXCIpKTtcblxuICAgICAgICBpZiAoZWxZQXhpc0xhYmVsc1dyYXAgIT09IG51bGwpIHtcbiAgICAgICAgICB5QXhpc0xhYmVsc0Nvb3JkID0gZWxZQXhpc0xhYmVsc1dyYXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgeUF4aXNUaXRsZSA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoXCIuYXBleGNoYXJ0cy15YXhpc1tyZWw9J1wiLmNvbmNhdChyZWFsSW5kZXgsIFwiJ10gLmFwZXhjaGFydHMteWF4aXMtdGl0bGUgdGV4dFwiKSk7XG5cbiAgICAgICAgaWYgKHlBeGlzVGl0bGUgIT09IG51bGwpIHtcbiAgICAgICAgICB5QXhpc1RpdGxlQ29vcmQgPSB5QXhpc1RpdGxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHlBeGlzVGl0bGUgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgeCA9IHRoaXMueFBhZGRpbmdGb3JZQXhpc1RpdGxlKHJlYWxJbmRleCwgeUF4aXNMYWJlbHNDb29yZCwgeUF4aXNUaXRsZUNvb3JkLCB5QXhpc09wcG9zaXRlKTtcbiAgICAgICAgICB5QXhpc1RpdGxlLnNldEF0dHJpYnV0ZSgneCcsIHgueFBvcyAtICh5QXhpc09wcG9zaXRlID8gMTAgOiAwKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeUF4aXNUaXRsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciB0aXRsZVJvdGF0aW5nQ2VudGVyID0gZ3JhcGhpY3Mucm90YXRlQXJvdW5kQ2VudGVyKHlBeGlzVGl0bGUpO1xuICAgICAgICAgIHlBeGlzVGl0bGUuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBcInJvdGF0ZShcIi5jb25jYXQoeUF4aXNPcHBvc2l0ZSA/ICcnIDogJy0nKS5jb25jYXQody5jb25maWcueWF4aXNbcmVhbEluZGV4XS50aXRsZS5yb3RhdGUsIFwiIFwiKS5jb25jYXQodGl0bGVSb3RhdGluZ0NlbnRlci54LCBcIiBcIikuY29uY2F0KHRpdGxlUm90YXRpbmdDZW50ZXIueSwgXCIpXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ4UGFkZGluZ0ZvcllBeGlzVGl0bGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB4UGFkZGluZ0ZvcllBeGlzVGl0bGUocmVhbEluZGV4LCB5QXhpc0xhYmVsc0Nvb3JkLCB5QXhpc1RpdGxlQ29vcmQsIHlBeGlzT3Bwb3NpdGUpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBvcHBvc2l0ZUF4aXNDb3VudCA9IDA7XG4gICAgICAgIHZhciB4ID0gMDtcbiAgICAgICAgdmFyIHBhZGQgPSAxMDtcblxuICAgICAgICBpZiAody5jb25maWcueWF4aXNbcmVhbEluZGV4XS50aXRsZS50ZXh0ID09PSB1bmRlZmluZWQgfHwgcmVhbEluZGV4IDwgMCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4UG9zOiB4LFxuICAgICAgICAgICAgcGFkZDogMFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeUF4aXNPcHBvc2l0ZSkge1xuICAgICAgICAgIHggPSB5QXhpc0xhYmVsc0Nvb3JkLndpZHRoICsgdy5jb25maWcueWF4aXNbcmVhbEluZGV4XS50aXRsZS5vZmZzZXRYICsgeUF4aXNUaXRsZUNvb3JkLndpZHRoIC8gMiArIHBhZGQgLyAyO1xuICAgICAgICAgIG9wcG9zaXRlQXhpc0NvdW50ICs9IDE7XG5cbiAgICAgICAgICBpZiAob3Bwb3NpdGVBeGlzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHggPSB4IC0gcGFkZCAvIDI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHggPSB5QXhpc0xhYmVsc0Nvb3JkLndpZHRoICogLTEgKyB3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLnRpdGxlLm9mZnNldFggKyBwYWRkIC8gMiArIHlBeGlzVGl0bGVDb29yZC53aWR0aCAvIDI7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcGFkZCA9IDI1O1xuICAgICAgICAgICAgeCA9IHlBeGlzTGFiZWxzQ29vcmQud2lkdGggKiAtMSAtIHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0udGl0bGUub2Zmc2V0WCAtIHBhZGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4UG9zOiB4LFxuICAgICAgICAgIHBhZGQ6IHBhZGRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gc2V0cyB0aGUgeCBwb3NpdGlvbiBvZiB0aGUgeS1heGlzIGJ5IGNvdW50aW5nIHRoZSBsYWJlbHMgd2lkdGgsIHRpdGxlIHdpZHRoIGFuZCBhbnkgb2Zmc2V0XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0WUF4aXNYUG9zaXRpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRZQXhpc1hQb3NpdGlvbih5YXhpc0xhYmVsQ29vcmRzLCB5VGl0bGVDb29yZHMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB4TGVmdCA9IDA7XG4gICAgICAgIHZhciB4UmlnaHQgPSAwO1xuICAgICAgICB2YXIgbGVmdE9mZnNldFggPSAxODtcbiAgICAgICAgdmFyIHJpZ2h0T2Zmc2V0WCA9IDE7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnlheGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aGlzLm11bHRpcGxlWXMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdy5jb25maWcueWF4aXMubWFwKGZ1bmN0aW9uICh5YXhlLCBpbmRleCkge1xuICAgICAgICAgIHZhciBzaG91bGROb3REcmF3QXhpcyA9IHcuZ2xvYmFscy5pZ25vcmVZQXhpc0luZGV4ZXMuaW5kZXhPZihpbmRleCkgPiAtMSB8fCAheWF4ZS5zaG93IHx8IHlheGUuZmxvYXRpbmcgfHwgeWF4aXNMYWJlbENvb3Jkc1tpbmRleF0ud2lkdGggPT09IDA7XG4gICAgICAgICAgdmFyIGF4aXNXaWR0aCA9IHlheGlzTGFiZWxDb29yZHNbaW5kZXhdLndpZHRoICsgeVRpdGxlQ29vcmRzW2luZGV4XS53aWR0aDtcblxuICAgICAgICAgIGlmICgheWF4ZS5vcHBvc2l0ZSkge1xuICAgICAgICAgICAgeExlZnQgPSB3Lmdsb2JhbHMudHJhbnNsYXRlWCAtIGxlZnRPZmZzZXRYO1xuXG4gICAgICAgICAgICBpZiAoIXNob3VsZE5vdERyYXdBeGlzKSB7XG4gICAgICAgICAgICAgIGxlZnRPZmZzZXRYID0gbGVmdE9mZnNldFggKyBheGlzV2lkdGggKyAyMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdy5nbG9iYWxzLnRyYW5zbGF0ZVlBeGlzWFtpbmRleF0gPSB4TGVmdCArIHlheGUubGFiZWxzLm9mZnNldFg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgIHhSaWdodCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggKyB3Lmdsb2JhbHMudHJhbnNsYXRlWCAtIDE7XG4gICAgICAgICAgICAgIHcuZ2xvYmFscy50cmFuc2xhdGVZQXhpc1hbaW5kZXhdID0geFJpZ2h0IC0geWF4ZS5sYWJlbHMub2Zmc2V0WDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHhSaWdodCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggKyB3Lmdsb2JhbHMudHJhbnNsYXRlWCArIHJpZ2h0T2Zmc2V0WDtcblxuICAgICAgICAgICAgICBpZiAoIXNob3VsZE5vdERyYXdBeGlzKSB7XG4gICAgICAgICAgICAgICAgcmlnaHRPZmZzZXRYID0gcmlnaHRPZmZzZXRYICsgYXhpc1dpZHRoICsgMjA7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB3Lmdsb2JhbHMudHJhbnNsYXRlWUF4aXNYW2luZGV4XSA9IHhSaWdodCAtIHlheGUubGFiZWxzLm9mZnNldFggKyAyMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRZQXhpc1RleHRBbGlnbm1lbnRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0WUF4aXNUZXh0QWxpZ25tZW50cygpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB5YXhpcyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJhcGV4Y2hhcnRzLXlheGlzXCIpO1xuICAgICAgICB5YXhpcyA9IFV0aWxzLmxpc3RUb0FycmF5KHlheGlzKTtcbiAgICAgICAgeWF4aXMuZm9yRWFjaChmdW5jdGlvbiAoeSwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgeWF4ZSA9IHcuY29uZmlnLnlheGlzW2luZGV4XTsgLy8gcHJvY2VlZCBvbmx5IGlmIHVzZXIgaGFzIHNwZWNpZmllZCBhbGlnbm1lbnRcblxuICAgICAgICAgIGlmICh5YXhlLmxhYmVscy5hbGlnbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgeUF4aXNJbm5lciA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoXCIuYXBleGNoYXJ0cy15YXhpc1tyZWw9J1wiLmNvbmNhdChpbmRleCwgXCInXSAuYXBleGNoYXJ0cy15YXhpcy10ZXh0cy1nXCIpKTtcbiAgICAgICAgICAgIHZhciB5QXhpc1RleHRzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbChcIi5hcGV4Y2hhcnRzLXlheGlzW3JlbD0nXCIuY29uY2F0KGluZGV4LCBcIiddIC5hcGV4Y2hhcnRzLXlheGlzLWxhYmVsXCIpKTtcbiAgICAgICAgICAgIHlBeGlzVGV4dHMgPSBVdGlscy5saXN0VG9BcnJheSh5QXhpc1RleHRzKTtcbiAgICAgICAgICAgIHZhciByZWN0ID0geUF4aXNJbm5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgaWYgKHlheGUubGFiZWxzLmFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgeUF4aXNUZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChsYWJlbCwgbEkpIHtcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICgheWF4ZS5vcHBvc2l0ZSkge1xuICAgICAgICAgICAgICAgIHlBeGlzSW5uZXIuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZSgtXCIuY29uY2F0KHJlY3Qud2lkdGgsIFwiLCAwKVwiKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeWF4ZS5sYWJlbHMuYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgIHlBeGlzVGV4dHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwsIGxJKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHlBeGlzSW5uZXIuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZShcIi5jb25jYXQocmVjdC53aWR0aCAvIDIgKiAoIXlheGUub3Bwb3NpdGUgPyAtMSA6IDEpLCBcIiwgMClcIikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh5YXhlLmxhYmVscy5hbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICB5QXhpc1RleHRzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsLCBsSSkge1xuICAgICAgICAgICAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgndGV4dC1hbmNob3InLCAnZW5kJyk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICh5YXhlLm9wcG9zaXRlKSB7XG4gICAgICAgICAgICAgICAgeUF4aXNJbm5lci5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlKFwiLmNvbmNhdChyZWN0LndpZHRoLCBcIiwgMClcIikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gWUF4aXM7XG4gIH0oKTtcblxuICB2YXIgRXZlbnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudHMoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHRoaXMuZG9jdW1lbnRFdmVudCA9IFV0aWxzLmJpbmQodGhpcy5kb2N1bWVudEV2ZW50LCB0aGlzKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRXZlbnRzLCBbe1xuICAgICAga2V5OiBcImFkZEV2ZW50TGlzdGVuZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5ldmVudHMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMuZXZlbnRzW25hbWVdLnB1c2goaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmV2ZW50c1tuYW1lXSA9IFtoYW5kbGVyXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW1vdmVFdmVudExpc3RlbmVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICghdy5nbG9iYWxzLmV2ZW50cy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmRleCA9IHcuZ2xvYmFscy5ldmVudHNbbmFtZV0uaW5kZXhPZihoYW5kbGVyKTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmV2ZW50c1tuYW1lXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZpcmVFdmVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpcmVFdmVudChuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICghdy5nbG9iYWxzLmV2ZW50cy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXJncyB8fCAhYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZzID0gdy5nbG9iYWxzLmV2ZW50c1tuYW1lXTtcbiAgICAgICAgdmFyIGwgPSBldnMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgZXZzW2ldLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldHVwRXZlbnRIYW5kbGVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwRXZlbnRIYW5kbGVycygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIG1lID0gdGhpcy5jdHg7XG4gICAgICAgIHZhciBjbGlja2FibGVBcmVhID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3Rvcih3Lmdsb2JhbHMuY2hhcnRDbGFzcyk7XG4gICAgICAgIHRoaXMuY3R4LmV2ZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGNsaWNrYWJsZUFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgdywge1xuICAgICAgICAgICAgICBzZXJpZXNJbmRleDogdy5nbG9iYWxzLmNhcHR1cmVkU2VyaWVzSW5kZXgsXG4gICAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiB3Lmdsb2JhbHMuY2FwdHVyZWREYXRhUG9pbnRJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy5jaGFydC5ldmVudHMubW91c2VNb3ZlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdy5jb25maWcuY2hhcnQuZXZlbnRzLm1vdXNlTW92ZShlLCBtZSwgb3B0cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50eXBlID09PSAnbW91c2V1cCcgJiYgZS53aGljaCA9PT0gMSB8fCBlLnR5cGUgPT09ICd0b3VjaGVuZCcpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy5jaGFydC5ldmVudHMuY2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB3LmNvbmZpZy5jaGFydC5ldmVudHMuY2xpY2soZSwgbWUsIG9wdHMpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbWUuY3R4LmV2ZW50cy5maXJlRXZlbnQoJ2NsaWNrJywgW2UsIG1lLCBvcHRzXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY2FwdHVyZTogZmFsc2UsXG4gICAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmN0eC5ldmVudExpc3QuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBfdGhpcy5kb2N1bWVudEV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3R4LmNvcmUuc2V0dXBCcnVzaEhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZG9jdW1lbnRFdmVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvY3VtZW50RXZlbnQoZSkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0LmNsYXNzTmFtZTtcblxuICAgICAgICBpZiAoZS50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgdmFyIGVsTWVudSA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLW1lbnUnKTtcblxuICAgICAgICAgIGlmIChlbE1lbnUgJiYgZWxNZW51LmNsYXNzTGlzdC5jb250YWlucygnYXBleGNoYXJ0cy1tZW51LW9wZW4nKSAmJiB0YXJnZXQgIT09ICdhcGV4Y2hhcnRzLW1lbnUtaWNvbicpIHtcbiAgICAgICAgICAgIGVsTWVudS5jbGFzc0xpc3QucmVtb3ZlKCdhcGV4Y2hhcnRzLW1lbnUtb3BlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG4gICAgICAgICAgdmFyIGVsQW5ub3MgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLnNlbGVjdCgnLmFwZXhjaGFydHMtcmVzaXphYmxlLWVsZW1lbnQnKS5tZW1iZXJzO1xuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWxBbm5vcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAvLyBhbnkgc2hhcGUgYW5ub3RhdGlvbnMgdGhhdCBtaWdodCBoYXZlIHNlbGVjdGVkIGJ5IHVzZXIgZm9yIHJlc2l6aW5nLCBzaG91bGQgYmUgZGVzZWxlY3RlZFxuICAgICAgICAgICAgaWYgKCFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FwZXhjaGFydHMtcmVzaXphYmxlLWVsZW1lbnQnKSAmJiAhZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzdmdfc2VsZWN0X3BvaW50cycpKSB7XG4gICAgICAgICAgICAgIGVsLnNlbGVjdGl6ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB3Lmdsb2JhbHMuY2xpZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WDtcbiAgICAgICAgdy5nbG9iYWxzLmNsaWVudFkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50b3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEV2ZW50cztcbiAgfSgpO1xuXG4gIHZhciBMb2NhbGl6YXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvY2FsaXphdGlvbihjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhbGl6YXRpb24pO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2NhbGl6YXRpb24sIFt7XG4gICAgICBrZXk6IFwic2V0Q3VycmVudExvY2FsZVZhbHVlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRMb2NhbGVWYWx1ZXMobG9jYWxlTmFtZSkge1xuICAgICAgICB2YXIgbG9jYWxlcyA9IHRoaXMudy5jb25maWcuY2hhcnQubG9jYWxlczsgLy8gY2hlY2sgaWYgdXNlciBoYXMgc3BlY2lmaWVkIGxvY2FsZXMgaW4gZ2xvYmFsIEFwZXggdmFyaWFibGVcbiAgICAgICAgLy8gaWYgeWVzIC0gdGhlbiBleHRlbmQgdGhvc2Ugd2l0aCBsb2NhbCBjaGFydCdzIGxvY2FsZVxuXG4gICAgICAgIGlmICh3aW5kb3cuQXBleC5jaGFydCAmJiB3aW5kb3cuQXBleC5jaGFydC5sb2NhbGVzICYmIHdpbmRvdy5BcGV4LmNoYXJ0LmxvY2FsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGxvY2FsZXMgPSB0aGlzLncuY29uZmlnLmNoYXJ0LmxvY2FsZXMuY29uY2F0KHdpbmRvdy5BcGV4LmNoYXJ0LmxvY2FsZXMpO1xuICAgICAgICB9IC8vIGZpbmQgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheSBvZiBsb2NhbGVzIHdoaWNoIHVzZXIgaGFzIHNldCAoZWl0aGVyIGJ5IGNoYXJ0LmRlZmF1bHRMb2NhbGUgb3IgYnkgY2FsbGluZyBzZXRMb2NhbGUoKSBtZXRob2QuKVxuXG5cbiAgICAgICAgdmFyIHNlbGVjdGVkTG9jYWxlID0gbG9jYWxlcy5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5uYW1lID09PSBsb2NhbGVOYW1lO1xuICAgICAgICB9KVswXTtcblxuICAgICAgICBpZiAoc2VsZWN0ZWRMb2NhbGUpIHtcbiAgICAgICAgICAvLyBjcmVhdGUgYSBjb21wbGV0ZSBsb2NhbGUgb2JqZWN0IGJ5IGV4dGVuZGluZyBkZWZhdWx0cyBzbyB5b3UgZG9uJ3QgZ2V0IHVuZGVmaW5lZCBlcnJvcnMuXG4gICAgICAgICAgdmFyIHJldCA9IFV0aWxzLmV4dGVuZChlbiwgc2VsZWN0ZWRMb2NhbGUpOyAvLyBzdG9yZSB0aGVzZSBsb2NhbGUgb3B0aW9ucyBpbiBnbG9iYWwgdmFyIGZvciBlYXNlIGFjY2Vzc1xuXG4gICAgICAgICAgdGhpcy53Lmdsb2JhbHMubG9jYWxlID0gcmV0Lm9wdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBsb2NhbGUgbmFtZSBwcm92aWRlZC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3Ugc2V0IHRoZSBjb3JyZWN0IGxvY2FsZSBuYW1lIGluIG9wdGlvbnMnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2NhbGl6YXRpb247XG4gIH0oKTtcblxuICB2YXIgQXhlcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXhlcyhjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBeGVzKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQXhlcywgW3tcbiAgICAgIGtleTogXCJkcmF3QXhpc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdBeGlzKHR5cGUsIHh5UmF0aW9zKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuICAgICAgICB2YXIgY25mID0gdGhpcy53LmNvbmZpZztcbiAgICAgICAgdmFyIHhBeGlzID0gbmV3IFhBeGlzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHlBeGlzID0gbmV3IFlBeGlzKHRoaXMuY3R4KTtcblxuICAgICAgICBpZiAoZ2wuYXhpc0NoYXJ0cyAmJiB0eXBlICE9PSAncmFkYXInKSB7XG4gICAgICAgICAgdmFyIGVsWGF4aXMsIGVsWWF4aXM7XG5cbiAgICAgICAgICBpZiAoZ2wuaXNCYXJIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICBlbFlheGlzID0geUF4aXMuZHJhd1lheGlzSW52ZXJzZWQoMCk7XG4gICAgICAgICAgICBlbFhheGlzID0geEF4aXMuZHJhd1hheGlzSW52ZXJzZWQoMCk7XG4gICAgICAgICAgICBnbC5kb20uZWxHcmFwaGljYWwuYWRkKGVsWGF4aXMpO1xuICAgICAgICAgICAgZ2wuZG9tLmVsR3JhcGhpY2FsLmFkZChlbFlheGlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxYYXhpcyA9IHhBeGlzLmRyYXdYYXhpcygpO1xuICAgICAgICAgICAgZ2wuZG9tLmVsR3JhcGhpY2FsLmFkZChlbFhheGlzKTtcbiAgICAgICAgICAgIGNuZi55YXhpcy5tYXAoZnVuY3Rpb24gKHlheGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgIGlmIChnbC5pZ25vcmVZQXhpc0luZGV4ZXMuaW5kZXhPZihpbmRleCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZWxZYXhpcyA9IHlBeGlzLmRyYXdZYXhpcyhpbmRleCk7XG4gICAgICAgICAgICAgICAgZ2wuZG9tLlBhcGVyLmFkZChlbFlheGlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY25mLnlheGlzLm1hcChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoZ2wuaWdub3JlWUF4aXNJbmRleGVzLmluZGV4T2YoaW5kZXgpID09PSAtMSkge1xuICAgICAgICAgICAgeUF4aXMueUF4aXNUaXRsZVJvdGF0ZShpbmRleCwgeWF4ZS5vcHBvc2l0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQXhlcztcbiAgfSgpO1xuXG4gIHZhciBDcm9zc2hhaXJzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDcm9zc2hhaXJzKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENyb3NzaGFpcnMpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDcm9zc2hhaXJzLCBbe1xuICAgICAga2V5OiBcImRyYXdYQ3Jvc3NoYWlyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdYQ3Jvc3NoYWlycygpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICB2YXIgY3Jvc3NoYWlyR3JhZGllbnQgPSB3LmNvbmZpZy54YXhpcy5jcm9zc2hhaXJzLmZpbGwuZ3JhZGllbnQ7XG4gICAgICAgIHZhciBjcm9zc2hhaXJTaGFkb3cgPSB3LmNvbmZpZy54YXhpcy5jcm9zc2hhaXJzLmRyb3BTaGFkb3c7XG4gICAgICAgIHZhciBmaWxsVHlwZSA9IHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMuZmlsbC50eXBlO1xuICAgICAgICB2YXIgZ3JhZGllbnRGcm9tID0gY3Jvc3NoYWlyR3JhZGllbnQuY29sb3JGcm9tO1xuICAgICAgICB2YXIgZ3JhZGllbnRUbyA9IGNyb3NzaGFpckdyYWRpZW50LmNvbG9yVG87XG4gICAgICAgIHZhciBvcGFjaXR5RnJvbSA9IGNyb3NzaGFpckdyYWRpZW50Lm9wYWNpdHlGcm9tO1xuICAgICAgICB2YXIgb3BhY2l0eVRvID0gY3Jvc3NoYWlyR3JhZGllbnQub3BhY2l0eVRvO1xuICAgICAgICB2YXIgc3RvcHMgPSBjcm9zc2hhaXJHcmFkaWVudC5zdG9wcztcbiAgICAgICAgdmFyIHNoYWRvdyA9ICdub25lJztcbiAgICAgICAgdmFyIGRyb3BTaGFkb3cgPSBjcm9zc2hhaXJTaGFkb3cuZW5hYmxlZDtcbiAgICAgICAgdmFyIHNoYWRvd0xlZnQgPSBjcm9zc2hhaXJTaGFkb3cubGVmdDtcbiAgICAgICAgdmFyIHNoYWRvd1RvcCA9IGNyb3NzaGFpclNoYWRvdy50b3A7XG4gICAgICAgIHZhciBzaGFkb3dCbHVyID0gY3Jvc3NoYWlyU2hhZG93LmJsdXI7XG4gICAgICAgIHZhciBzaGFkb3dDb2xvciA9IGNyb3NzaGFpclNoYWRvdy5jb2xvcjtcbiAgICAgICAgdmFyIHNoYWRvd09wYWNpdHkgPSBjcm9zc2hhaXJTaGFkb3cub3BhY2l0eTtcbiAgICAgICAgdmFyIHhjcm9zc2hhaXJzRmlsbCA9IHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMuZmlsbC5jb2xvcjtcblxuICAgICAgICBpZiAody5jb25maWcueGF4aXMuY3Jvc3NoYWlycy5zaG93KSB7XG4gICAgICAgICAgaWYgKGZpbGxUeXBlID09PSAnZ3JhZGllbnQnKSB7XG4gICAgICAgICAgICB4Y3Jvc3NoYWlyc0ZpbGwgPSBncmFwaGljcy5kcmF3R3JhZGllbnQoJ3ZlcnRpY2FsJywgZ3JhZGllbnRGcm9tLCBncmFkaWVudFRvLCBvcGFjaXR5RnJvbSwgb3BhY2l0eVRvLCBudWxsLCBzdG9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHhjcm9zc2hhaXJzID0gZ3JhcGhpY3MuZHJhd1JlY3QoKTtcblxuICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jcm9zc2hhaXJzLndpZHRoID09PSAxKSB7XG4gICAgICAgICAgICAvLyB0byBwcmV2ZW50IGRyYXdpbmcgMiBsaW5lcywgY29udmVydCByZWN0IHRvIGxpbmVcbiAgICAgICAgICAgIHhjcm9zc2hhaXJzID0gZ3JhcGhpY3MuZHJhd0xpbmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Y3Jvc3NoYWlycy5hdHRyKHtcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy14Y3Jvc3NoYWlycycsXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHkyOiB3Lmdsb2JhbHMuZ3JpZEhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiBVdGlscy5pc051bWJlcih3LmNvbmZpZy54YXhpcy5jcm9zc2hhaXJzLndpZHRoKSA/IHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMud2lkdGggOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiB3Lmdsb2JhbHMuZ3JpZEhlaWdodCxcbiAgICAgICAgICAgIGZpbGw6IHhjcm9zc2hhaXJzRmlsbCxcbiAgICAgICAgICAgIGZpbHRlcjogc2hhZG93LFxuICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMub3BhY2l0eSxcbiAgICAgICAgICAgIHN0cm9rZTogdy5jb25maWcueGF4aXMuY3Jvc3NoYWlycy5zdHJva2UuY29sb3IsXG4gICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogdy5jb25maWcueGF4aXMuY3Jvc3NoYWlycy5zdHJva2Uud2lkdGgsXG4gICAgICAgICAgICAnc3Ryb2tlLWRhc2hhcnJheSc6IHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMuc3Ryb2tlLmRhc2hBcnJheVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGRyb3BTaGFkb3cpIHtcbiAgICAgICAgICAgIHhjcm9zc2hhaXJzID0gZmlsdGVycy5kcm9wU2hhZG93KHhjcm9zc2hhaXJzLCB7XG4gICAgICAgICAgICAgIGxlZnQ6IHNoYWRvd0xlZnQsXG4gICAgICAgICAgICAgIHRvcDogc2hhZG93VG9wLFxuICAgICAgICAgICAgICBibHVyOiBzaGFkb3dCbHVyLFxuICAgICAgICAgICAgICBjb2xvcjogc2hhZG93Q29sb3IsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IHNoYWRvd09wYWNpdHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHcuZ2xvYmFscy5kb20uZWxHcmFwaGljYWwuYWRkKHhjcm9zc2hhaXJzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3WUNyb3NzaGFpcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3WUNyb3NzaGFpcnMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgY3Jvc3NoYWlyID0gdy5jb25maWcueWF4aXNbMF0uY3Jvc3NoYWlycztcblxuICAgICAgICBpZiAody5jb25maWcueWF4aXNbMF0uY3Jvc3NoYWlycy5zaG93KSB7XG4gICAgICAgICAgdmFyIHljcm9zc2hhaXJzID0gZ3JhcGhpY3MuZHJhd0xpbmUoMCwgMCwgdy5nbG9iYWxzLmdyaWRXaWR0aCwgMCwgY3Jvc3NoYWlyLnN0cm9rZS5jb2xvciwgY3Jvc3NoYWlyLnN0cm9rZS5kYXNoQXJyYXksIGNyb3NzaGFpci5zdHJva2Uud2lkdGgpO1xuICAgICAgICAgIHljcm9zc2hhaXJzLmF0dHIoe1xuICAgICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXljcm9zc2hhaXJzJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHcuZ2xvYmFscy5kb20uZWxHcmFwaGljYWwuYWRkKHljcm9zc2hhaXJzKTtcbiAgICAgICAgfSAvLyBkcmF3IGFuIGludmlzaWJsZSBjcm9zc2hhaXIgdG8gaGVscCBpbiBwb3NpdGlvbmluZyB0aGUgeWF4aXMgdG9vbHRpcFxuXG5cbiAgICAgICAgdmFyIHljcm9zc2hhaXJzSGlkZGVuID0gZ3JhcGhpY3MuZHJhd0xpbmUoMCwgMCwgdy5nbG9iYWxzLmdyaWRXaWR0aCwgMCwgY3Jvc3NoYWlyLnN0cm9rZS5jb2xvciwgMCwgMCk7XG4gICAgICAgIHljcm9zc2hhaXJzSGlkZGVuLmF0dHIoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy15Y3Jvc3NoYWlycy1oaWRkZW4nXG4gICAgICAgIH0pO1xuICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsR3JhcGhpY2FsLmFkZCh5Y3Jvc3NoYWlyc0hpZGRlbik7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENyb3NzaGFpcnM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBSZXNwb25zaXZlIENsYXNzIHRvIG92ZXJyaWRlIG9wdGlvbnMgZm9yIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMuXG4gICAqXG4gICAqIEBtb2R1bGUgUmVzcG9uc2l2ZVxuICAgKiovXG5cbiAgdmFyIFJlc3BvbnNpdmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc3BvbnNpdmUoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzcG9uc2l2ZSk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgfSAvLyB0aGUgb3B0cyBwYXJhbWV0ZXIgaWYgbm90IG51bGwgaGFzIHRvIGJlIHNldCBvdmVycmlkaW5nIGV2ZXJ5dGhpbmdcbiAgICAvLyBhcyB0aGUgb3B0cyBpcyBzZXQgYnkgdXNlciBleHRlcm5hbGx5XG5cblxuICAgIF9jcmVhdGVDbGFzcyhSZXNwb25zaXZlLCBbe1xuICAgICAga2V5OiBcImNoZWNrUmVzcG9uc2l2ZUNvbmZpZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrUmVzcG9uc2l2ZUNvbmZpZyhvcHRzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBjbmYgPSB3LmNvbmZpZzsgLy8gY2hlY2sgaWYgcmVzcG9uc2l2ZSBjb25maWcgZXhpc3RzXG5cbiAgICAgICAgaWYgKGNuZi5yZXNwb25zaXZlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICB2YXIgcmVzID0gY25mLnJlc3BvbnNpdmUuc2xpY2UoKTtcbiAgICAgICAgcmVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYS5icmVha3BvaW50ID4gYi5icmVha3BvaW50ID8gMSA6IGIuYnJlYWtwb2ludCA+IGEuYnJlYWtwb2ludCA/IC0xIDogMDtcbiAgICAgICAgfSkucmV2ZXJzZSgpO1xuICAgICAgICB2YXIgY29uZmlnID0gbmV3IENvbmZpZyh7fSk7XG5cbiAgICAgICAgdmFyIGl0ZXJhdGVSZXNwb25zaXZlT3B0aW9ucyA9IGZ1bmN0aW9uIGl0ZXJhdGVSZXNwb25zaXZlT3B0aW9ucygpIHtcbiAgICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAgICAgdmFyIGxhcmdlc3RCcmVha3BvaW50ID0gcmVzWzBdLmJyZWFrcG9pbnQ7XG4gICAgICAgICAgdmFyIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggPiAwID8gd2luZG93LmlubmVyV2lkdGggOiBzY3JlZW4ud2lkdGg7XG5cbiAgICAgICAgICBpZiAod2lkdGggPiBsYXJnZXN0QnJlYWtwb2ludCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBDb3JlVXRpbHMuZXh0ZW5kQXJyYXlQcm9wcyhjb25maWcsIHcuZ2xvYmFscy5pbml0aWFsQ29uZmlnKTtcbiAgICAgICAgICAgIG5ld09wdGlvbnMgPSBVdGlscy5leHRlbmQob3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgICAgICAgICBuZXdPcHRpb25zID0gVXRpbHMuZXh0ZW5kKHcuY29uZmlnLCBuZXdPcHRpb25zKTtcblxuICAgICAgICAgICAgX3RoaXMub3ZlcnJpZGVSZXNwb25zaXZlT3B0aW9ucyhuZXdPcHRpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHdpZHRoIDwgcmVzW2ldLmJyZWFrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICBuZXdPcHRpb25zID0gQ29yZVV0aWxzLmV4dGVuZEFycmF5UHJvcHMoY29uZmlnLCByZXNbaV0ub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgbmV3T3B0aW9ucyA9IFV0aWxzLmV4dGVuZCh3LmNvbmZpZywgbmV3T3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5vdmVycmlkZVJlc3BvbnNpdmVPcHRpb25zKG5ld09wdGlvbnMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRzKSB7XG4gICAgICAgICAgdmFyIG9wdGlvbnMgPSBDb3JlVXRpbHMuZXh0ZW5kQXJyYXlQcm9wcyhjb25maWcsIG9wdHMpO1xuICAgICAgICAgIG9wdGlvbnMgPSBVdGlscy5leHRlbmQody5jb25maWcsIG9wdGlvbnMpO1xuICAgICAgICAgIG9wdGlvbnMgPSBVdGlscy5leHRlbmQob3B0aW9ucywgb3B0cyk7XG4gICAgICAgICAgaXRlcmF0ZVJlc3BvbnNpdmVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGVSZXNwb25zaXZlT3B0aW9ucyh7fSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib3ZlcnJpZGVSZXNwb25zaXZlT3B0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG92ZXJyaWRlUmVzcG9uc2l2ZU9wdGlvbnMobmV3T3B0aW9ucykge1xuICAgICAgICB2YXIgbmV3Q29uZmlnID0gbmV3IENvbmZpZyhuZXdPcHRpb25zKS5pbml0KHtcbiAgICAgICAgICByZXNwb25zaXZlT3ZlcnJpZGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudy5jb25maWcgPSBuZXdDb25maWc7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFJlc3BvbnNpdmU7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBUaGVtZSBDbGFzcyBmb3Igc2V0dGluZyB0aGUgY29sb3JzIGFuZCBwYWxldHRlcy5cbiAgICpcbiAgICogQG1vZHVsZSBUaGVtZVxuICAgKiovXG5cbiAgdmFyIFRoZW1lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaGVtZShjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaGVtZSk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy5jb2xvcnMgPSBbXTtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICB0aGlzLmlzQ29sb3JGbiA9IGZhbHNlO1xuICAgICAgdGhpcy5pc0JhckRpc3RyaWJ1dGVkID0gdy5jb25maWcucGxvdE9wdGlvbnMuYmFyLmRpc3RyaWJ1dGVkICYmICh3LmNvbmZpZy5jaGFydC50eXBlID09PSAnYmFyJyB8fCB3LmNvbmZpZy5jaGFydC50eXBlID09PSAncmFuZ2VCYXInKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGhlbWUsIFt7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0RGVmYXVsdENvbG9ycygpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXREZWZhdWx0Q29sb3JzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVmYXVsdENvbG9ycygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHV0aWxzID0gbmV3IFV0aWxzKCk7XG4gICAgICAgIHcuZ2xvYmFscy5kb20uZWxXcmFwLmNsYXNzTGlzdC5hZGQoXCJhcGV4Y2hhcnRzLXRoZW1lLVwiLmNvbmNhdCh3LmNvbmZpZy50aGVtZS5tb2RlKSk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmNvbG9ycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmNvbG9ycyA9IHRoaXMucHJlZGVmaW5lZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHcuZ2xvYmFscy5jb2xvcnMgPSB3LmNvbmZpZy5jb2xvcnM7IC8vIGlmIHVzZXIgcHJvdmlkZWQgYSBmdW5jdGlvbiBpbiBjb2xvcnMsIHdlIG5lZWQgdG8gZXZhbCBoZXJlXG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmF4aXNDaGFydHMgJiYgdy5jb25maWcuY2hhcnQudHlwZSAhPT0gJ2JhcicgJiYgQXJyYXkuaXNBcnJheSh3LmNvbmZpZy5jb2xvcnMpICYmIHcuY29uZmlnLmNvbG9ycy5sZW5ndGggPiAwICYmIHcuY29uZmlnLmNvbG9ycy5sZW5ndGggPT09IHcuY29uZmlnLnNlcmllcy5sZW5ndGggLy8gY29sb3JzICYgc2VyaWVzIGxlbmd0aCBuZWVkcyBzYW1lXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHcuZ2xvYmFscy5jb2xvcnMgPSB3LmNvbmZpZy5jb2xvcnMubWFwKGZ1bmN0aW9uIChjLCBpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5pc0NvbG9yRm4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGMoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdy5nbG9iYWxzLmF4aXNDaGFydHMgPyB3Lmdsb2JhbHMuc2VyaWVzW2ldWzBdID8gdy5nbG9iYWxzLnNlcmllc1tpXVswXSA6IDAgOiB3Lmdsb2JhbHMuc2VyaWVzW2ldLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNJbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIHc6IHdcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy50aGVtZS5tb25vY2hyb21lLmVuYWJsZWQpIHtcbiAgICAgICAgICB2YXIgbW9ub0FyciA9IFtdO1xuICAgICAgICAgIHZhciBnbHNDbnQgPSB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aDtcblxuICAgICAgICAgIGlmICh0aGlzLmlzQmFyRGlzdHJpYnV0ZWQpIHtcbiAgICAgICAgICAgIGdsc0NudCA9IHcuZ2xvYmFscy5zZXJpZXNbMF0ubGVuZ3RoICogdy5nbG9iYWxzLnNlcmllcy5sZW5ndGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1haW5Db2xvciA9IHcuY29uZmlnLnRoZW1lLm1vbm9jaHJvbWUuY29sb3I7XG4gICAgICAgICAgdmFyIHBhcnQgPSAxIC8gKGdsc0NudCAvIHcuY29uZmlnLnRoZW1lLm1vbm9jaHJvbWUuc2hhZGVJbnRlbnNpdHkpO1xuICAgICAgICAgIHZhciBzaGFkZSA9IHcuY29uZmlnLnRoZW1lLm1vbm9jaHJvbWUuc2hhZGVUbztcbiAgICAgICAgICB2YXIgcGVyY2VudCA9IDA7XG5cbiAgICAgICAgICBmb3IgKHZhciBnc2wgPSAwOyBnc2wgPCBnbHNDbnQ7IGdzbCsrKSB7XG4gICAgICAgICAgICB2YXIgbmV3Q29sb3IgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIGlmIChzaGFkZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgICAgIG5ld0NvbG9yID0gdXRpbHMuc2hhZGVDb2xvcihwZXJjZW50ICogLTEsIG1haW5Db2xvcik7XG4gICAgICAgICAgICAgIHBlcmNlbnQgPSBwZXJjZW50ICsgcGFydDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld0NvbG9yID0gdXRpbHMuc2hhZGVDb2xvcihwZXJjZW50LCBtYWluQ29sb3IpO1xuICAgICAgICAgICAgICBwZXJjZW50ID0gcGVyY2VudCArIHBhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1vbm9BcnIucHVzaChuZXdDb2xvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdy5nbG9iYWxzLmNvbG9ycyA9IG1vbm9BcnIuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZhdWx0Q29sb3JzID0gdy5nbG9iYWxzLmNvbG9ycy5zbGljZSgpOyAvLyBpZiB1c2VyIHNwZWNmaWVkIGxlc3MgY29sb3JzIHRoYW4gbm8uIG9mIHNlcmllcywgcHVzaCB0aGUgc2FtZSBjb2xvcnMgYWdhaW5cblxuICAgICAgICB0aGlzLnB1c2hFeHRyYUNvbG9ycyh3Lmdsb2JhbHMuY29sb3JzKTtcbiAgICAgICAgdmFyIGNvbG9yVHlwZXMgPSBbJ2ZpbGwnLCAnc3Ryb2tlJ107XG4gICAgICAgIGNvbG9yVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGlmICh3LmNvbmZpZ1tjXS5jb2xvcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdy5nbG9iYWxzW2NdLmNvbG9ycyA9IF90aGlzLmlzQ29sb3JGbiA/IHcuY29uZmlnLmNvbG9ycyA6IGRlZmF1bHRDb2xvcnM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHcuZ2xvYmFsc1tjXS5jb2xvcnMgPSB3LmNvbmZpZ1tjXS5jb2xvcnMuc2xpY2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5wdXNoRXh0cmFDb2xvcnMody5nbG9iYWxzW2NdLmNvbG9ycyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5kYXRhTGFiZWxzLnN0eWxlLmNvbG9ycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmRhdGFMYWJlbHMuc3R5bGUuY29sb3JzID0gZGVmYXVsdENvbG9ycztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3Lmdsb2JhbHMuZGF0YUxhYmVscy5zdHlsZS5jb2xvcnMgPSB3LmNvbmZpZy5kYXRhTGFiZWxzLnN0eWxlLmNvbG9ycy5zbGljZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wdXNoRXh0cmFDb2xvcnMody5nbG9iYWxzLmRhdGFMYWJlbHMuc3R5bGUuY29sb3JzLCA1MCk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGFyLnBvbHlnb25zLmZpbGwuY29sb3JzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMucmFkYXJQb2x5Z29ucy5maWxsLmNvbG9ycyA9IFt3LmNvbmZpZy50aGVtZS5tb2RlID09PSAnZGFyaycgPyAnIzIwMkQ0OCcgOiAnI2ZmZiddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHcuZ2xvYmFscy5yYWRhclBvbHlnb25zLmZpbGwuY29sb3JzID0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkYXIucG9seWdvbnMuZmlsbC5jb2xvcnMuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHVzaEV4dHJhQ29sb3JzKHcuZ2xvYmFscy5yYWRhclBvbHlnb25zLmZpbGwuY29sb3JzLCAyMCk7IC8vIFRoZSBwb2ludCBjb2xvcnNcblxuICAgICAgICBpZiAody5jb25maWcubWFya2Vycy5jb2xvcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHcuZ2xvYmFscy5tYXJrZXJzLmNvbG9ycyA9IGRlZmF1bHRDb2xvcnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdy5nbG9iYWxzLm1hcmtlcnMuY29sb3JzID0gdy5jb25maWcubWFya2Vycy5jb2xvcnMuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHVzaEV4dHJhQ29sb3JzKHcuZ2xvYmFscy5tYXJrZXJzLmNvbG9ycyk7XG4gICAgICB9IC8vIFdoZW4gdGhlIG51bWJlciBvZiBjb2xvcnMgcHJvdmlkZWQgaXMgbGVzcyB0aGFuIHRoZSBudW1iZXIgb2Ygc2VyaWVzLCB0aGlzIG1ldGhvZFxuICAgICAgLy8gd2lsbCBwdXNoIHNhbWUgY29sb3JzIHRvIHRoZSBsaXN0XG4gICAgICAvLyBwYXJhbXM6XG4gICAgICAvLyBkaXN0cmlidXRlZCBpcyBvbmx5IHZhbGlkIGZvciBkaXN0cmlidXRlZCBjb2x1bW4vYmFyIGNoYXJ0c1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInB1c2hFeHRyYUNvbG9yc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2hFeHRyYUNvbG9ycyhjb2xvclNlcmllcywgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkaXN0cmlidXRlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBsZW4gPSBsZW5ndGggfHwgdy5nbG9iYWxzLnNlcmllcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGRpc3RyaWJ1dGVkID09PSBudWxsKSB7XG4gICAgICAgICAgZGlzdHJpYnV0ZWQgPSB0aGlzLmlzQmFyRGlzdHJpYnV0ZWQgfHwgdy5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2hlYXRtYXAnICYmIHcuY29uZmlnLnBsb3RPcHRpb25zLmhlYXRtYXAuY29sb3JTY2FsZS5pbnZlcnNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3RyaWJ1dGVkKSB7XG4gICAgICAgICAgbGVuID0gdy5nbG9iYWxzLnNlcmllc1swXS5sZW5ndGggKiB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2xvclNlcmllcy5sZW5ndGggPCBsZW4pIHtcbiAgICAgICAgICB2YXIgZGlmZiA9IGxlbiAtIGNvbG9yU2VyaWVzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlmZjsgaSsrKSB7XG4gICAgICAgICAgICBjb2xvclNlcmllcy5wdXNoKGNvbG9yU2VyaWVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXBkYXRlVGhlbWVPcHRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlVGhlbWVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFydCA9IG9wdGlvbnMuY2hhcnQgfHwge307XG4gICAgICAgIG9wdGlvbnMudG9vbHRpcCA9IG9wdGlvbnMudG9vbHRpcCB8fCB7fTtcbiAgICAgICAgdmFyIG1vZGUgPSBvcHRpb25zLnRoZW1lLm1vZGUgfHwgJ2xpZ2h0JztcbiAgICAgICAgdmFyIHBhbGV0dGUgPSBvcHRpb25zLnRoZW1lLnBhbGV0dGUgPyBvcHRpb25zLnRoZW1lLnBhbGV0dGUgOiBtb2RlID09PSAnZGFyaycgPyAncGFsZXR0ZTQnIDogJ3BhbGV0dGUxJztcbiAgICAgICAgdmFyIGZvcmVDb2xvciA9IG9wdGlvbnMuY2hhcnQuZm9yZUNvbG9yID8gb3B0aW9ucy5jaGFydC5mb3JlQ29sb3IgOiBtb2RlID09PSAnZGFyaycgPyAnI2Y2ZjdmOCcgOiAnIzQyNDI0Mic7XG4gICAgICAgIG9wdGlvbnMudG9vbHRpcC50aGVtZSA9IG1vZGU7XG4gICAgICAgIG9wdGlvbnMuY2hhcnQuZm9yZUNvbG9yID0gZm9yZUNvbG9yO1xuICAgICAgICBvcHRpb25zLnRoZW1lLnBhbGV0dGUgPSBwYWxldHRlO1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicHJlZGVmaW5lZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZWRlZmluZWQoKSB7XG4gICAgICAgIHZhciBwYWxldHRlID0gdGhpcy53LmNvbmZpZy50aGVtZS5wYWxldHRlOyAvLyBENkUzRjgsIEZDRUZFRiwgRENFMEQ5LCBBNTk3OEIsIEVERERENCwgRDZFM0Y4LCBGRUY1RUZcblxuICAgICAgICBzd2l0Y2ggKHBhbGV0dGUpIHtcbiAgICAgICAgICBjYXNlICdwYWxldHRlMSc6XG4gICAgICAgICAgICB0aGlzLmNvbG9ycyA9IFsnIzIxOTZmMycsICcjNGNhZjUwJywgJyNmNDQzMzYnLCAnI2ZmOTgwMCcsICcjOWMyN2IwJ107XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3BhbGV0dGUyJzpcbiAgICAgICAgICAgIHRoaXMuY29sb3JzID0gWycjM2Y1MWI1JywgJyMwM2E5ZjQnLCAnIzRjYWY1MCcsICcjZjljZTFkJywgJyNGRjk4MDAnXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncGFsZXR0ZTMnOlxuICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSBbJyMzM2IyZGYnLCAnIzU0NkU3QScsICcjZDQ1MjZlJywgJyMxM2Q4YWEnLCAnI0E1OTc4QiddO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdwYWxldHRlNCc6XG4gICAgICAgICAgICB0aGlzLmNvbG9ycyA9IFsnIzRlY2RjNCcsICcjYzdmNDY0JywgJyM4MUQ0RkEnLCAnI2ZkNmE2YScsICcjNTQ2RTdBJ107XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3BhbGV0dGU1JzpcbiAgICAgICAgICAgIHRoaXMuY29sb3JzID0gWycjMmI5MDhmJywgJyNmOWEzYTQnLCAnIzkwZWU3ZScsICcjZmE0NDQzJywgJyM2OWQyZTcnXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncGFsZXR0ZTYnOlxuICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSBbJyM0NDlERDEnLCAnI0Y4NjYyNCcsICcjRUEzNTQ2JywgJyM2NjJFOUInLCAnI0M1RDg2RCddO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdwYWxldHRlNyc6XG4gICAgICAgICAgICB0aGlzLmNvbG9ycyA9IFsnI0Q3MjYzRCcsICcjMUI5OThCJywgJyMyRTI5NEUnLCAnI0Y0NjAzNicsICcjRTJDMDQ0J107XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3BhbGV0dGU4JzpcbiAgICAgICAgICAgIHRoaXMuY29sb3JzID0gWycjNjYyRTlCJywgJyNGODY2MjQnLCAnI0Y5QzgwRScsICcjRUEzNTQ2JywgJyM0M0JDQ0QnXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncGFsZXR0ZTknOlxuICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSBbJyM1QzQ3NDInLCAnI0E1OTc4QicsICcjOEQ1QjRDJywgJyM1QTJBMjcnLCAnI0M0QkJBRiddO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdwYWxldHRlMTAnOlxuICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSBbJyNBMzAwRDYnLCAnIzdEMDJFQicsICcjNTY1M0ZFJywgJyMyOTgzRkYnLCAnIzAwQjFGMiddO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSBbJyMyMTk2ZjMnLCAnIzAwRTM5NicsICcjRkVCMDE5JywgJyNGRjQ1NjAnLCAnIzc3NUREMCddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jb2xvcnM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRoZW1lO1xuICB9KCk7XG5cbiAgdmFyIFRpdGxlU3VidGl0bGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpdGxlU3VidGl0bGUoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGl0bGVTdWJ0aXRsZSk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRpdGxlU3VidGl0bGUsIFt7XG4gICAgICBrZXk6IFwiZHJhd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgICAgIHRoaXMuZHJhd1RpdGxlU3VidGl0bGUoJ3RpdGxlJyk7XG4gICAgICAgIHRoaXMuZHJhd1RpdGxlU3VidGl0bGUoJ3N1YnRpdGxlJyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdUaXRsZVN1YnRpdGxlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpdGxlU3VidGl0bGUodHlwZSkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHRzQ29uZmlnID0gdHlwZSA9PT0gJ3RpdGxlJyA/IHcuY29uZmlnLnRpdGxlIDogdy5jb25maWcuc3VidGl0bGU7XG4gICAgICAgIHZhciB4ID0gdy5nbG9iYWxzLnN2Z1dpZHRoIC8gMjtcbiAgICAgICAgdmFyIHkgPSB0c0NvbmZpZy5vZmZzZXRZO1xuICAgICAgICB2YXIgdGV4dEFuY2hvciA9ICdtaWRkbGUnO1xuXG4gICAgICAgIGlmICh0c0NvbmZpZy5hbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgeCA9IDEwO1xuICAgICAgICAgIHRleHRBbmNob3IgPSAnc3RhcnQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRzQ29uZmlnLmFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgeCA9IHcuZ2xvYmFscy5zdmdXaWR0aCAtIDEwO1xuICAgICAgICAgIHRleHRBbmNob3IgPSAnZW5kJztcbiAgICAgICAgfVxuXG4gICAgICAgIHggPSB4ICsgdHNDb25maWcub2Zmc2V0WDtcbiAgICAgICAgeSA9IHkgKyBwYXJzZUludCh0c0NvbmZpZy5zdHlsZS5mb250U2l6ZSwgMTApICsgdHNDb25maWcubWFyZ2luIC8gMjtcblxuICAgICAgICBpZiAodHNDb25maWcudGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgICB2YXIgdGl0bGVUZXh0ID0gZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICB0ZXh0OiB0c0NvbmZpZy50ZXh0LFxuICAgICAgICAgICAgdGV4dEFuY2hvcjogdGV4dEFuY2hvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiB0c0NvbmZpZy5zdHlsZS5mb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHRzQ29uZmlnLnN0eWxlLmZvbnRGYW1pbHksXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0c0NvbmZpZy5zdHlsZS5mb250V2VpZ2h0LFxuICAgICAgICAgICAgZm9yZUNvbG9yOiB0c0NvbmZpZy5zdHlsZS5jb2xvcixcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aXRsZVRleHQubm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgXCJhcGV4Y2hhcnRzLVwiLmNvbmNhdCh0eXBlLCBcIi10ZXh0XCIpKTtcbiAgICAgICAgICB3Lmdsb2JhbHMuZG9tLlBhcGVyLmFkZCh0aXRsZVRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRpdGxlU3VidGl0bGU7XG4gIH0oKTtcblxuICB2YXIgSGVscGVycyQxID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIZWxwZXJzKGRDdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWxwZXJzKTtcblxuICAgICAgdGhpcy53ID0gZEN0eC53O1xuICAgICAgdGhpcy5kQ3R4ID0gZEN0eDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IENoYXJ0IFRpdGxlL1N1YnRpdGxlIERpbWVuc2lvbnNcbiAgICAgKiBAbWVtYmVyb2YgRGltZW5zaW9uc1xuICAgICAqIEByZXR1cm4ge3t3aWR0aCwgaGVpZ2h0fX1cbiAgICAgKiovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhIZWxwZXJzLCBbe1xuICAgICAga2V5OiBcImdldFRpdGxlU3VidGl0bGVDb29yZHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUaXRsZVN1YnRpdGxlQ29vcmRzKHR5cGUpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB3aWR0aCA9IDA7XG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xuICAgICAgICB2YXIgZmxvYXRpbmcgPSB0eXBlID09PSAndGl0bGUnID8gdy5jb25maWcudGl0bGUuZmxvYXRpbmcgOiB3LmNvbmZpZy5zdWJ0aXRsZS5mbG9hdGluZztcbiAgICAgICAgdmFyIGVsID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcihcIi5hcGV4Y2hhcnRzLVwiLmNvbmNhdCh0eXBlLCBcIi10ZXh0XCIpKTtcblxuICAgICAgICBpZiAoZWwgIT09IG51bGwgJiYgIWZsb2F0aW5nKSB7XG4gICAgICAgICAgdmFyIGNvb3JkID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgd2lkdGggPSBjb29yZC53aWR0aDtcbiAgICAgICAgICBoZWlnaHQgPSB3Lmdsb2JhbHMuYXhpc0NoYXJ0cyA/IGNvb3JkLmhlaWdodCArIDUgOiBjb29yZC5oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRMZWdlbmRzUmVjdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExlZ2VuZHNSZWN0KCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGVsTGVnZW5kV3JhcCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLWxlZ2VuZCcpO1xuICAgICAgICB2YXIgbGdSZWN0ID0gT2JqZWN0LmFzc2lnbih7fSwgVXRpbHMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsTGVnZW5kV3JhcCkpO1xuXG4gICAgICAgIGlmIChlbExlZ2VuZFdyYXAgIT09IG51bGwgJiYgIXcuY29uZmlnLmxlZ2VuZC5mbG9hdGluZyAmJiB3LmNvbmZpZy5sZWdlbmQuc2hvdykge1xuICAgICAgICAgIHRoaXMuZEN0eC5sZ1JlY3QgPSB7XG4gICAgICAgICAgICB4OiBsZ1JlY3QueCxcbiAgICAgICAgICAgIHk6IGxnUmVjdC55LFxuICAgICAgICAgICAgaGVpZ2h0OiBsZ1JlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IGxnUmVjdC5oZWlnaHQgPT09IDAgPyAwIDogbGdSZWN0LndpZHRoXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRDdHgubGdSZWN0ID0ge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICB3aWR0aDogMFxuICAgICAgICAgIH07XG4gICAgICAgIH0gLy8gaWYgbGVnZW5kIHRha2VzIHVwIGFsbCBvZiB0aGUgY2hhcnQgc3BhY2UsIHdlIG5lZWQgdG8gcmVzdHJpY3QgaXQuXG5cblxuICAgICAgICBpZiAody5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAnbGVmdCcgfHwgdy5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZEN0eC5sZ1JlY3Qud2lkdGggKiAxLjUgPiB3Lmdsb2JhbHMuc3ZnV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuZEN0eC5sZ1JlY3Qud2lkdGggPSB3Lmdsb2JhbHMuc3ZnV2lkdGggLyAxLjU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZEN0eC5sZ1JlY3Q7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldExhcmdlc3RTdHJpbmdGcm9tTXVsdGlBcnJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXJnZXN0U3RyaW5nRnJvbU11bHRpQXJyKHZhbCwgYXJyKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdmFsQXJyID0gdmFsO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuaXNNdWx0aUxpbmVYKSB7XG4gICAgICAgICAgLy8gaWYgdGhlIHhheGlzIGxhYmVscyBoYXMgbXVsdGlsaW5lIHRleHRzIChhcnJheSlcbiAgICAgICAgICB2YXIgbWF4QXJycyA9IGFyci5tYXAoZnVuY3Rpb24gKHhsLCBpZHgpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHhsKSA/IHhsLmxlbmd0aCA6IDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIG1heEFyckxlbiA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShtYXhBcnJzKSk7XG4gICAgICAgICAgdmFyIG1heEFyckluZGV4ID0gbWF4QXJycy5pbmRleE9mKG1heEFyckxlbik7XG4gICAgICAgICAgdmFsQXJyID0gYXJyW21heEFyckluZGV4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxBcnI7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEhlbHBlcnM7XG4gIH0oKTtcblxuICB2YXIgRGltWEF4aXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpbVhBeGlzKGRDdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaW1YQXhpcyk7XG5cbiAgICAgIHRoaXMudyA9IGRDdHgudztcbiAgICAgIHRoaXMuZEN0eCA9IGRDdHg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBYIEF4aXMgRGltZW5zaW9uc1xuICAgICAqIEBtZW1iZXJvZiBEaW1lbnNpb25zXG4gICAgICogQHJldHVybiB7e3dpZHRoLCBoZWlnaHR9fVxuICAgICAqKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKERpbVhBeGlzLCBbe1xuICAgICAga2V5OiBcImdldHhBeGlzTGFiZWxzQ29vcmRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0eEF4aXNMYWJlbHNDb29yZHMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgeGF4aXNMYWJlbHMgPSB3Lmdsb2JhbHMubGFiZWxzLnNsaWNlKCk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYyAmJiB4YXhpc0xhYmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB4YXhpc0xhYmVscyA9IHcuZ2xvYmFscy5jYXRlZ29yeUxhYmVscztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWN0O1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5nZXR4QXhpc1RpbWVTY2FsZUxhYmVsc0Nvb3JkcygpO1xuICAgICAgICAgIHJlY3QgPSB7XG4gICAgICAgICAgICB3aWR0aDogY29vcmRzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBjb29yZHMuaGVpZ2h0XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3Lmdsb2JhbHMucm90YXRlWExhYmVscyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZEN0eC5sZ1dpZHRoRm9yU2lkZUxlZ2VuZHMgPSAody5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAnbGVmdCcgfHwgdy5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAncmlnaHQnKSAmJiAhdy5jb25maWcubGVnZW5kLmZsb2F0aW5nID8gdGhpcy5kQ3R4LmxnUmVjdC53aWR0aCA6IDA7IC8vIGdldCB0aGUgbG9uZ2VzdCBzdHJpbmcgZnJvbSB0aGUgbGFiZWxzIGFycmF5IGFuZCBhbHNvIGFwcGx5IGxhYmVsIGZvcm1hdHRlclxuXG4gICAgICAgICAgdmFyIHhsYkZvcm1hdHRlciA9IHcuZ2xvYmFscy54TGFiZWxGb3JtYXR0ZXI7IC8vIHByZXZlbnQgY2hhbmdpbmcgeGF4aXNMYWJlbHMgdG8gYXZvaWQgaXNzdWVzIGluIG11bHRpLXlheGVzIC0gZml4ICM1MjJcblxuICAgICAgICAgIHZhciB2YWwgPSBVdGlscy5nZXRMYXJnZXN0U3RyaW5nRnJvbUFycih4YXhpc0xhYmVscyk7XG4gICAgICAgICAgdmFyIHZhbEFyciA9IHRoaXMuZEN0eC5kaW1IZWxwZXJzLmdldExhcmdlc3RTdHJpbmdGcm9tTXVsdGlBcnIodmFsLCB4YXhpc0xhYmVscyk7IC8vIHRoZSBsYWJlbHMgZ2V0cyBjaGFuZ2VkIGZvciBiYXIgY2hhcnRzXG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgdmFsID0gdy5nbG9iYWxzLnlBeGlzU2NhbGVbMF0ucmVzdWx0LnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYS5sZW5ndGggPiBiLmxlbmd0aCA/IGEgOiBiO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB2YWxBcnIgPSB2YWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHhGb3JtYXQgPSBuZXcgRm9ybWF0dGVycyh0aGlzLmRDdHguY3R4KTtcbiAgICAgICAgICB2YXIgdGltZXN0YW1wID0gdmFsO1xuICAgICAgICAgIHZhbCA9IHhGb3JtYXQueExhYmVsRm9ybWF0KHhsYkZvcm1hdHRlciwgdmFsLCB0aW1lc3RhbXApO1xuICAgICAgICAgIHZhbEFyciA9IHhGb3JtYXQueExhYmVsRm9ybWF0KHhsYkZvcm1hdHRlciwgdmFsQXJyLCB0aW1lc3RhbXApO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYyAmJiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyB8fCBTdHJpbmcodmFsKS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICB2YWwgPSAnMSc7XG4gICAgICAgICAgICB2YWxBcnIgPSB2YWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuZEN0eC5jdHgpO1xuICAgICAgICAgIHZhciB4TGFiZWxyZWN0ID0gZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKHZhbCwgdy5jb25maWcueGF4aXMubGFiZWxzLnN0eWxlLmZvbnRTaXplKTtcbiAgICAgICAgICB2YXIgeEFyckxhYmVscmVjdCA9IHhMYWJlbHJlY3Q7XG5cbiAgICAgICAgICBpZiAodmFsICE9PSB2YWxBcnIpIHtcbiAgICAgICAgICAgIHhBcnJMYWJlbHJlY3QgPSBncmFwaGljcy5nZXRUZXh0UmVjdHModmFsQXJyLCB3LmNvbmZpZy54YXhpcy5sYWJlbHMuc3R5bGUuZm9udFNpemUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlY3QgPSB7XG4gICAgICAgICAgICB3aWR0aDogeExhYmVscmVjdC53aWR0aCA+PSB4QXJyTGFiZWxyZWN0LndpZHRoID8geExhYmVscmVjdC53aWR0aCA6IHhBcnJMYWJlbHJlY3Qud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHhMYWJlbHJlY3QuaGVpZ2h0ID49IHhBcnJMYWJlbHJlY3QuaGVpZ2h0ID8geExhYmVscmVjdC5oZWlnaHQgOiB4QXJyTGFiZWxyZWN0LmhlaWdodFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocmVjdC53aWR0aCAqIHhheGlzTGFiZWxzLmxlbmd0aCA+IHcuZ2xvYmFscy5zdmdXaWR0aCAtIHRoaXMuZEN0eC5sZ1dpZHRoRm9yU2lkZUxlZ2VuZHMgLSB0aGlzLmRDdHgueUF4aXNXaWR0aCAtIHRoaXMuZEN0eC5ncmlkUGFkLmxlZnQgLSB0aGlzLmRDdHguZ3JpZFBhZC5yaWdodCAmJiB3LmNvbmZpZy54YXhpcy5sYWJlbHMucm90YXRlICE9PSAwIHx8IHcuY29uZmlnLnhheGlzLmxhYmVscy5yb3RhdGVBbHdheXMpIHtcbiAgICAgICAgICAgIGlmICghdy5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICB3Lmdsb2JhbHMucm90YXRlWExhYmVscyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgdmFyIGdldFJvdGF0ZWRUZXh0UmVjdHMgPSBmdW5jdGlvbiBnZXRSb3RhdGVkVGV4dFJlY3RzKHRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKHRleHQsIHcuY29uZmlnLnhheGlzLmxhYmVscy5zdHlsZS5mb250U2l6ZSwgdy5jb25maWcueGF4aXMubGFiZWxzLnN0eWxlLmZvbnRGYW1pbHksIFwicm90YXRlKFwiLmNvbmNhdCh3LmNvbmZpZy54YXhpcy5sYWJlbHMucm90YXRlLCBcIiAwIDApXCIpLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgeExhYmVscmVjdCA9IGdldFJvdGF0ZWRUZXh0UmVjdHModmFsKTtcblxuICAgICAgICAgICAgICBpZiAodmFsICE9PSB2YWxBcnIpIHtcbiAgICAgICAgICAgICAgICB4QXJyTGFiZWxyZWN0ID0gZ2V0Um90YXRlZFRleHRSZWN0cyh2YWxBcnIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVjdC5oZWlnaHQgPSAoeExhYmVscmVjdC5oZWlnaHQgPiB4QXJyTGFiZWxyZWN0LmhlaWdodCA/IHhMYWJlbHJlY3QuaGVpZ2h0IDogeEFyckxhYmVscmVjdC5oZWlnaHQpIC8gMS41O1xuICAgICAgICAgICAgICByZWN0LndpZHRoID0geExhYmVscmVjdC53aWR0aCA+IHhBcnJMYWJlbHJlY3Qud2lkdGggPyB4TGFiZWxyZWN0LndpZHRoIDogeEFyckxhYmVscmVjdC53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdy5nbG9iYWxzLnJvdGF0ZVhMYWJlbHMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXcuY29uZmlnLnhheGlzLmxhYmVscy5zaG93KSB7XG4gICAgICAgICAgcmVjdCA9IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgWCBBeGlzIFRpdGxlIERpbWVuc2lvbnNcbiAgICAgICAqIEBtZW1iZXJvZiBEaW1lbnNpb25zXG4gICAgICAgKiBAcmV0dXJuIHt7d2lkdGgsIGhlaWdodH19XG4gICAgICAgKiovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0eEF4aXNUaXRsZUNvb3Jkc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldHhBeGlzVGl0bGVDb29yZHMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgd2lkdGggPSAwO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gMDtcblxuICAgICAgICBpZiAody5jb25maWcueGF4aXMudGl0bGUudGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuZEN0eC5jdHgpO1xuICAgICAgICAgIHZhciByZWN0ID0gZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQsIHcuY29uZmlnLnhheGlzLnRpdGxlLnN0eWxlLmZvbnRTaXplKTtcbiAgICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXR4QXhpc1RpbWVTY2FsZUxhYmVsc0Nvb3Jkc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldHhBeGlzVGltZVNjYWxlTGFiZWxzQ29vcmRzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHJlY3Q7XG4gICAgICAgIHRoaXMuZEN0eC50aW1lc2NhbGVMYWJlbHMgPSB3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzLnNsaWNlKCk7XG4gICAgICAgIHZhciBsYWJlbHMgPSB0aGlzLmRDdHgudGltZXNjYWxlTGFiZWxzLm1hcChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICByZXR1cm4gbGFiZWwudmFsdWU7XG4gICAgICAgIH0pOyAvLyAgZ2V0IHRoZSBsb25nZXN0IHN0cmluZyBmcm9tIHRoZSBsYWJlbHMgYXJyYXkgYW5kIGFsc28gYXBwbHkgbGFiZWwgZm9ybWF0dGVyIHRvIGl0XG5cbiAgICAgICAgdmFyIHZhbCA9IGxhYmVscy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAvLyBpZiB1bmRlZmluZWQsIG1heWJlIHVzZXIgZGlkbid0IHBhc3MgdGhlIGRhdGV0aW1lKHgpIHZhbHVlc1xuICAgICAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBvc3NpYmx5IHN1cHBsaWVkIGludmFsaWQgRGF0ZSBmb3JtYXQuIFBsZWFzZSBzdXBwbHkgYSB2YWxpZCBKYXZhU2NyaXB0IERhdGUnKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYS5sZW5ndGggPiBiLmxlbmd0aCA/IGEgOiBiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmRDdHguY3R4KTtcbiAgICAgICAgcmVjdCA9IGdyYXBoaWNzLmdldFRleHRSZWN0cyh2YWwsIHcuY29uZmlnLnhheGlzLmxhYmVscy5zdHlsZS5mb250U2l6ZSk7XG4gICAgICAgIHZhciB0b3RhbFdpZHRoUm90YXRlZCA9IHJlY3Qud2lkdGggKiAxLjA1ICogbGFiZWxzLmxlbmd0aDtcblxuICAgICAgICBpZiAodG90YWxXaWR0aFJvdGF0ZWQgPiB3Lmdsb2JhbHMuZ3JpZFdpZHRoICYmIHcuY29uZmlnLnhheGlzLmxhYmVscy5yb3RhdGUgIT09IDApIHtcbiAgICAgICAgICB3Lmdsb2JhbHMub3ZlcmxhcHBpbmdYTGFiZWxzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWN0O1xuICAgICAgfSAvLyBJbiBjZXJ0YWluIGNhc2VzLCB0aGUgbGFzdCBsYWJlbHMgZ2V0cyBjcm9wcGVkIGluIHhheGlzLlxuICAgICAgLy8gSGVuY2UsIHdlIGFkZCBzb21lIGFkZGl0aW9uYWwgcGFkZGluZyBiYXNlZCBvbiB0aGUgbGFiZWwgbGVuZ3RoIHRvIGF2b2lkIHRoZSBsYXN0IGxhYmVsIGJlaW5nIGNyb3BwZWQgb3Igd2UgZG9uJ3QgZHJhdyBpdCBhdCBhbGxcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRpdGlvbmFsUGFkZGluZ1hMYWJlbHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRpdGlvbmFsUGFkZGluZ1hMYWJlbHMoeGF4aXNMYWJlbENvb3Jkcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ2wgPSB3Lmdsb2JhbHM7XG4gICAgICAgIHZhciBjbmYgPSB3LmNvbmZpZztcbiAgICAgICAgdmFyIHh0eXBlID0gY25mLnhheGlzLnR5cGU7IC8vIGNvbnN0IHByZWRpY3RlZEdyaWRXaWR0aCA9XG4gICAgICAgIC8vICAgZ2wuc3ZnV2lkdGggLVxuICAgICAgICAvLyAgIHRoaXMuZEN0eC5sZ1dpZHRoRm9yU2lkZUxlZ2VuZHMgLVxuICAgICAgICAvLyAgIHRoaXMuZEN0eC55QXhpc1dpZHRoIC1cbiAgICAgICAgLy8gICB0aGlzLmRDdHguZ3JpZFBhZC5sZWZ0IC1cbiAgICAgICAgLy8gICB0aGlzLmRDdHguZ3JpZFBhZC5yaWdodFxuXG4gICAgICAgIHZhciBsYldpZHRoID0geGF4aXNMYWJlbENvb3Jkcy53aWR0aDtcbiAgICAgICAgZ2wuc2tpcExhc3RUaW1lbGluZWxhYmVsID0gZmFsc2U7XG4gICAgICAgIGdsLnNraXBGaXJzdFRpbWVsaW5lbGFiZWwgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzQmFyT3Bwb3NpdGUgPSB3LmNvbmZpZy55YXhpc1swXS5vcHBvc2l0ZSAmJiB3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsO1xuXG4gICAgICAgIHZhciBpc0NvbGxhcHNlZCA9IGZ1bmN0aW9uIGlzQ29sbGFwc2VkKGkpIHtcbiAgICAgICAgICByZXR1cm4gZ2wuY29sbGFwc2VkU2VyaWVzSW5kaWNlcy5pbmRleE9mKGkpICE9PSAtMTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmlnaHRQYWQgPSBmdW5jdGlvbiByaWdodFBhZCh5YXhlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLmRDdHgudGltZXNjYWxlTGFiZWxzICYmIF90aGlzLmRDdHgudGltZXNjYWxlTGFiZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gZm9yIHRpbWVsaW5lIGxhYmVscywgd2UgdGFrZSB0aGUgbGFzdCBsYWJlbCBhbmQgY2hlY2sgaWYgaXQgZXhjZWVkcyBncmlkV2lkdGhcbiAgICAgICAgICAgIHZhciBmaXJzdGltZXNjYWxlTGFiZWwgPSBfdGhpcy5kQ3R4LnRpbWVzY2FsZUxhYmVsc1swXTtcbiAgICAgICAgICAgIHZhciBsYXN0VGltZXNjYWxlTGFiZWwgPSBfdGhpcy5kQ3R4LnRpbWVzY2FsZUxhYmVsc1tfdGhpcy5kQ3R4LnRpbWVzY2FsZUxhYmVscy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHZhciBsYXN0TGFiZWxQb3NpdGlvbiA9IGxhc3RUaW1lc2NhbGVMYWJlbC5wb3NpdGlvbiArIGxiV2lkdGggLyAxLjc1IC0gLy8gcmVwbGFjZSArIHdpdGggLSA7XG4gICAgICAgICAgICAvLyBhbGxvdyB0aGUgbGFzdCBsYWJlbCB0byBpbnRlcnNlY3Qgd2l0aCB0aGUgcmlnaHQgeSBheGlzXG4gICAgICAgICAgICBfdGhpcy5kQ3R4LnlBeGlzV2lkdGhSaWdodDtcbiAgICAgICAgICAgIHZhciBmaXJzdExhYmVsUG9zaXRpb24gPSBmaXJzdGltZXNjYWxlTGFiZWwucG9zaXRpb24gLSBsYldpZHRoIC8gMS43NSArIC8vIHJlbW92ZSBjb25kaXRpb25hbCBzaW5jZSB0aGUgZmlyc3QgbGFiZWwgaXMgYWx3YXlzIGF0IHRoZSB2ZXJ5IGxlZnRcbiAgICAgICAgICAgIC8vIGFsbG93IHRoZSBmaXJzdCBsYWJlbCB0byBpbnRlcnNlY3Qgd2l0aCB0aGUgbGVmdCB5IGF4ZXNcbiAgICAgICAgICAgIF90aGlzLmRDdHgueUF4aXNXaWR0aExlZnQ7XG5cbiAgICAgICAgICAgIGlmIChsYXN0TGFiZWxQb3NpdGlvbiA+IGdsLmdyaWRXaWR0aCkge1xuICAgICAgICAgICAgICBnbC5za2lwTGFzdFRpbWVsaW5lbGFiZWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmlyc3RMYWJlbFBvc2l0aW9uIDwgMCkge1xuICAgICAgICAgICAgICBnbC5za2lwRmlyc3RUaW1lbGluZWxhYmVsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHh0eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAvLyBJZiB1c2VyIGhhcyBlbmFibGVkIERhdGVUaW1lLCBidXQgdXNlcyBvd24ncyBmb3JtYXR0ZXJcbiAgICAgICAgICAgIGlmIChfdGhpcy5kQ3R4LmdyaWRQYWQucmlnaHQgPCBsYldpZHRoICYmICFnbC5yb3RhdGVYTGFiZWxzKSB7XG4gICAgICAgICAgICAgIGdsLnNraXBMYXN0VGltZWxpbmVsYWJlbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh4dHlwZSAhPT0gJ2RhdGV0aW1lJykge1xuICAgICAgICAgICAgaWYgKF90aGlzLmRDdHguZ3JpZFBhZC5yaWdodCA8IGxiV2lkdGggLyAyIC0gX3RoaXMuZEN0eC55QXhpc1dpZHRoUmlnaHQgJiYgIWdsLnJvdGF0ZVhMYWJlbHMgJiYgKHcuY29uZmlnLnhheGlzLnRpY2tQbGFjZW1lbnQgIT09ICdiZXR3ZWVuJyB8fCB3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsKSkge1xuICAgICAgICAgICAgICBfdGhpcy5kQ3R4LnhQYWRSaWdodCA9IGxiV2lkdGggLyAyICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHBhZFlBeGUgPSBmdW5jdGlvbiBwYWRZQXhlKHlheGUsIGkpIHtcbiAgICAgICAgICBpZiAoaXNDb2xsYXBzZWQoaSkpIHJldHVybjtcblxuICAgICAgICAgIGlmICh4dHlwZSAhPT0gJ2RhdGV0aW1lJykge1xuICAgICAgICAgICAgaWYgKF90aGlzLmRDdHguZ3JpZFBhZC5sZWZ0IDwgbGJXaWR0aCAvIDIgLSBfdGhpcy5kQ3R4LnlBeGlzV2lkdGhMZWZ0ICYmICFnbC5yb3RhdGVYTGFiZWxzICYmICFjbmYueGF4aXMubGFiZWxzLnRyaW0pIHtcbiAgICAgICAgICAgICAgX3RoaXMuZEN0eC54UGFkTGVmdCA9IGxiV2lkdGggLyAyICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByaWdodFBhZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNuZi55YXhpcy5mb3JFYWNoKGZ1bmN0aW9uICh5YXhlLCBpKSB7XG4gICAgICAgICAgaWYgKGlzQmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5kQ3R4LmdyaWRQYWQubGVmdCA8IGxiV2lkdGgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuZEN0eC54UGFkTGVmdCA9IGxiV2lkdGggLyAyICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RoaXMuZEN0eC54UGFkUmlnaHQgPSBsYldpZHRoIC8gMiArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZFlBeGUoeWF4ZSwgaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGltWEF4aXM7XG4gIH0oKTtcblxuICB2YXIgRGltWUF4aXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpbVlBeGlzKGRDdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaW1ZQXhpcyk7XG5cbiAgICAgIHRoaXMudyA9IGRDdHgudztcbiAgICAgIHRoaXMuZEN0eCA9IGRDdHg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBZIEF4aXMgRGltZW5zaW9uc1xuICAgICAqIEBtZW1iZXJvZiBEaW1lbnNpb25zXG4gICAgICogQHJldHVybiB7e3dpZHRoLCBoZWlnaHR9fVxuICAgICAqKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKERpbVlBeGlzLCBbe1xuICAgICAga2V5OiBcImdldHlBeGlzTGFiZWxzQ29vcmRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0eUF4aXNMYWJlbHNDb29yZHMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB3aWR0aCA9IDA7XG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xuICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgIHZhciBsYWJlbFBhZCA9IDEwO1xuICAgICAgICB2YXIgYXhlc1V0aWxzID0gbmV3IEF4ZXNVdGlscyh0aGlzLmRDdHguY3R4KTtcbiAgICAgICAgdy5jb25maWcueWF4aXMubWFwKGZ1bmN0aW9uICh5YXhlLCBpbmRleCkge1xuICAgICAgICAgIGlmICghYXhlc1V0aWxzLmlzWUF4aXNIaWRkZW4oaW5kZXgpICYmIHlheGUubGFiZWxzLnNob3cgJiYgdy5nbG9iYWxzLnlBeGlzU2NhbGVbaW5kZXhdLnJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBsYkZvcm1hdHRlciA9IHcuZ2xvYmFscy55TGFiZWxGb3JtYXR0ZXJzW2luZGV4XTsgLy8gdGhlIHNlY29uZCBwYXJhbWV0ZXIgLTEgaXMgdGhlIGluZGV4IG9mIHRpY2sgd2hpY2ggdXNlciBjYW4gdXNlIGluIHRoZSBmb3JtYXR0ZXJcblxuICAgICAgICAgICAgdmFyIHZhbCA9IGxiRm9ybWF0dGVyKHcuZ2xvYmFscy55QXhpc1NjYWxlW2luZGV4XS5uaWNlTWF4LCB7XG4gICAgICAgICAgICAgIHNlcmllc0luZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IC0xLFxuICAgICAgICAgICAgICB3OiB3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB2YWxBcnIgPSB2YWw7IC8vIGlmIHVzZXIgaGFzIHNwZWNpZmllZCBhIGN1c3RvbSBmb3JtYXR0ZXIsIGFuZCB0aGUgcmVzdWx0IGlzIG51bGwgb3IgZW1wdHksIHdlIG5lZWQgdG8gZGlzY2FyZCB0aGUgZm9ybWF0dGVyIGFuZCB0YWtlIHRoZSB2YWx1ZSBhcyBpdCBpcy5cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnIHx8IHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdmFsID0gdy5nbG9iYWxzLnlBeGlzU2NhbGVbaW5kZXhdLm5pY2VNYXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgIGxhYmVsUGFkID0gMDtcbiAgICAgICAgICAgICAgdmFyIGJhcllheGlzTGFiZWxzID0gdy5nbG9iYWxzLmxhYmVscy5zbGljZSgpOyAvLyAgZ2V0IHRoZSBsb25nZXN0IHN0cmluZyBmcm9tIHRoZSBsYWJlbHMgYXJyYXkgYW5kIGFsc28gYXBwbHkgbGFiZWwgZm9ybWF0dGVyIHRvIGl0XG5cbiAgICAgICAgICAgICAgdmFsID0gVXRpbHMuZ2V0TGFyZ2VzdFN0cmluZ0Zyb21BcnIoYmFyWWF4aXNMYWJlbHMpO1xuICAgICAgICAgICAgICB2YWwgPSBsYkZvcm1hdHRlcih2YWwsIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNJbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgIHc6IHdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHZhbEFyciA9IF90aGlzLmRDdHguZGltSGVscGVycy5nZXRMYXJnZXN0U3RyaW5nRnJvbU11bHRpQXJyKHZhbCwgYmFyWWF4aXNMYWJlbHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3MoX3RoaXMuZEN0eC5jdHgpO1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBncmFwaGljcy5nZXRUZXh0UmVjdHModmFsLCB5YXhlLmxhYmVscy5zdHlsZS5mb250U2l6ZSk7XG4gICAgICAgICAgICB2YXIgYXJyTGFiZWxyZWN0ID0gcmVjdDtcblxuICAgICAgICAgICAgaWYgKHZhbCAhPT0gdmFsQXJyKSB7XG4gICAgICAgICAgICAgIGFyckxhYmVscmVjdCA9IGdyYXBoaWNzLmdldFRleHRSZWN0cyh2YWxBcnIsIHlheGUubGFiZWxzLnN0eWxlLmZvbnRTaXplKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0LnB1c2goe1xuICAgICAgICAgICAgICB3aWR0aDogKGFyckxhYmVscmVjdC53aWR0aCA+IHJlY3Qud2lkdGggPyBhcnJMYWJlbHJlY3Qud2lkdGggOiByZWN0LndpZHRoKSArIGxhYmVsUGFkLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGFyckxhYmVscmVjdC5oZWlnaHQgPiByZWN0LmhlaWdodCA/IGFyckxhYmVscmVjdC5oZWlnaHQgOiByZWN0LmhlaWdodFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldC5wdXNoKHtcbiAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogR2V0IFkgQXhpcyBEaW1lbnNpb25zXG4gICAgICAgKiBAbWVtYmVyb2YgRGltZW5zaW9uc1xuICAgICAgICogQHJldHVybiB7e3dpZHRoLCBoZWlnaHR9fVxuICAgICAgICoqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImdldHlBeGlzVGl0bGVDb29yZHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXR5QXhpc1RpdGxlQ29vcmRzKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICB3LmNvbmZpZy55YXhpcy5tYXAoZnVuY3Rpb24gKHlheGUsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKHlheGUuc2hvdyAmJiB5YXhlLnRpdGxlLnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKF90aGlzMi5kQ3R4LmN0eCk7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IGdyYXBoaWNzLmdldFRleHRSZWN0cyh5YXhlLnRpdGxlLnRleHQsIHlheGUudGl0bGUuc3R5bGUuZm9udFNpemUsIHlheGUudGl0bGUuc3R5bGUuZm9udEZhbWlseSwgJ3JvdGF0ZSgtOTAgMCAwKScsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldC5wdXNoKHtcbiAgICAgICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXQucHVzaCh7XG4gICAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFRvdGFsWUF4aXNXaWR0aFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRvdGFsWUF4aXNXaWR0aCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB5QXhpc1dpZHRoID0gMDtcbiAgICAgICAgdmFyIHlBeGlzV2lkdGhMZWZ0ID0gMDtcbiAgICAgICAgdmFyIHlBeGlzV2lkdGhSaWdodCA9IDA7XG4gICAgICAgIHZhciBwYWRkaW5nID0gdy5nbG9iYWxzLnlBeGlzU2NhbGUubGVuZ3RoID4gMSA/IDEwIDogMDtcbiAgICAgICAgdmFyIGF4ZXNVdGlscyA9IG5ldyBBeGVzVXRpbHModGhpcy5kQ3R4LmN0eCk7XG5cbiAgICAgICAgdmFyIGlzSGlkZGVuWUF4aXMgPSBmdW5jdGlvbiBpc0hpZGRlbllBeGlzKGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHcuZ2xvYmFscy5pZ25vcmVZQXhpc0luZGV4ZXMuaW5kZXhPZihpbmRleCkgPiAtMTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcGFkRm9yTGFiZWxUaXRsZSA9IGZ1bmN0aW9uIHBhZEZvckxhYmVsVGl0bGUoY29vcmQsIGluZGV4KSB7XG4gICAgICAgICAgdmFyIGZsb2F0aW5nID0gdy5jb25maWcueWF4aXNbaW5kZXhdLmZsb2F0aW5nO1xuICAgICAgICAgIHZhciB3aWR0aCA9IDA7XG5cbiAgICAgICAgICBpZiAoY29vcmQud2lkdGggPiAwICYmICFmbG9hdGluZykge1xuICAgICAgICAgICAgd2lkdGggPSBjb29yZC53aWR0aCArIHBhZGRpbmc7XG5cbiAgICAgICAgICAgIGlmIChpc0hpZGRlbllBeGlzKGluZGV4KSkge1xuICAgICAgICAgICAgICB3aWR0aCA9IHdpZHRoIC0gY29vcmQud2lkdGggLSBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aWR0aCA9IGZsb2F0aW5nIHx8IGF4ZXNVdGlscy5pc1lBeGlzSGlkZGVuKGluZGV4KSA/IDAgOiA1O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHcuY29uZmlnLnlheGlzW2luZGV4XS5vcHBvc2l0ZSA/IHlBeGlzV2lkdGhSaWdodCA9IHlBeGlzV2lkdGhSaWdodCArIHdpZHRoIDogeUF4aXNXaWR0aExlZnQgPSB5QXhpc1dpZHRoTGVmdCArIHdpZHRoO1xuICAgICAgICAgIHlBeGlzV2lkdGggPSB5QXhpc1dpZHRoICsgd2lkdGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgdy5nbG9iYWxzLnlMYWJlbHNDb29yZHMubWFwKGZ1bmN0aW9uICh5TGFiZWxDb29yZCwgaW5kZXgpIHtcbiAgICAgICAgICBwYWRGb3JMYWJlbFRpdGxlKHlMYWJlbENvb3JkLCBpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICB3Lmdsb2JhbHMueVRpdGxlQ29vcmRzLm1hcChmdW5jdGlvbiAoeVRpdGxlQ29vcmQsIGluZGV4KSB7XG4gICAgICAgICAgcGFkRm9yTGFiZWxUaXRsZSh5VGl0bGVDb29yZCwgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgIHlBeGlzV2lkdGggPSB3Lmdsb2JhbHMueUxhYmVsc0Nvb3Jkc1swXS53aWR0aCArIHcuZ2xvYmFscy55VGl0bGVDb29yZHNbMF0ud2lkdGggKyAxNTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZEN0eC55QXhpc1dpZHRoTGVmdCA9IHlBeGlzV2lkdGhMZWZ0O1xuICAgICAgICB0aGlzLmRDdHgueUF4aXNXaWR0aFJpZ2h0ID0geUF4aXNXaWR0aFJpZ2h0O1xuICAgICAgICByZXR1cm4geUF4aXNXaWR0aDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGltWUF4aXM7XG4gIH0oKTtcblxuICB2YXIgRGltR3JpZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGltR3JpZChkQ3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGltR3JpZCk7XG5cbiAgICAgIHRoaXMudyA9IGRDdHgudztcbiAgICAgIHRoaXMuZEN0eCA9IGRDdHg7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKERpbUdyaWQsIFt7XG4gICAgICBrZXk6IFwiZ3JpZFBhZEZvckNvbHVtbnNJbk51bWVyaWNBeGlzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ3JpZFBhZEZvckNvbHVtbnNJbk51bWVyaWNBeGlzKGdyaWRXaWR0aCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcblxuICAgICAgICBpZiAody5nbG9iYWxzLm5vRGF0YSB8fCB3Lmdsb2JhbHMuYWxsU2VyaWVzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHlwZSA9IHcuY29uZmlnLmNoYXJ0LnR5cGU7XG4gICAgICAgIHZhciBiYXJXaWR0aCA9IDA7XG4gICAgICAgIHZhciBzZXJpZXNMZW4gPSB0eXBlID09PSAnYmFyJyB8fCB0eXBlID09PSAncmFuZ2VCYXInID8gdy5jb25maWcuc2VyaWVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5jb21ib0JhckNvdW50ID4gMCkge1xuICAgICAgICAgIHNlcmllc0xlbiA9IHcuZ2xvYmFscy5jb21ib0JhckNvdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdy5nbG9iYWxzLmNvbGxhcHNlZFNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgaWYgKGMudHlwZSA9PT0gJ2JhcicgfHwgYy50eXBlID09PSAncmFuZ2VCYXInKSB7XG4gICAgICAgICAgICBzZXJpZXNMZW4gPSBzZXJpZXNMZW4gLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnN0YWNrZWQpIHtcbiAgICAgICAgICBzZXJpZXNMZW4gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhc0JhciA9IHR5cGUgPT09ICdiYXInIHx8IHR5cGUgPT09ICdyYW5nZUJhcicgfHwgdy5nbG9iYWxzLmNvbWJvQmFyQ291bnQgPiAwO1xuXG4gICAgICAgIGlmIChoYXNCYXIgJiYgdy5nbG9iYWxzLmlzWE51bWVyaWMgJiYgIXcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwgJiYgc2VyaWVzTGVuID4gMCkge1xuICAgICAgICAgIHZhciB4UmF0aW8gPSAwO1xuICAgICAgICAgIHZhciB4UmFuZ2UgPSBNYXRoLmFicyh3Lmdsb2JhbHMuaW5pdGlhbE1heFggLSB3Lmdsb2JhbHMuaW5pdGlhbE1pblgpO1xuXG4gICAgICAgICAgaWYgKHhSYW5nZSA8PSAzKSB7XG4gICAgICAgICAgICB4UmFuZ2UgPSB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4UmF0aW8gPSB4UmFuZ2UgLyBncmlkV2lkdGg7XG4gICAgICAgICAgdmFyIHhEaXZpc2lvbjsgLy8gbWF4IGJhcndpZHRoIHNob3VsZCBiZSBlcXVhbCB0byBtaW5YRGlmZiB0byBhdm9pZCBvdmVybGFwXG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLm1pblhEaWZmICYmIHcuZ2xvYmFscy5taW5YRGlmZiAvIHhSYXRpbyA+IDApIHtcbiAgICAgICAgICAgIHhEaXZpc2lvbiA9IHcuZ2xvYmFscy5taW5YRGlmZiAvIHhSYXRpbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiYXJXaWR0aCA9IHhEaXZpc2lvbiAvIHNlcmllc0xlbiAqIHBhcnNlSW50KHcuY29uZmlnLnBsb3RPcHRpb25zLmJhci5jb2x1bW5XaWR0aCwgMTApIC8gMTAwO1xuXG4gICAgICAgICAgaWYgKGJhcldpZHRoIDwgMSkge1xuICAgICAgICAgICAgYmFyV2lkdGggPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJhcldpZHRoID0gYmFyV2lkdGggLyAoc2VyaWVzTGVuID4gMSA/IDEgOiAxLjUpICsgNTtcbiAgICAgICAgICB3Lmdsb2JhbHMuYmFyUGFkRm9yTnVtZXJpY0F4aXMgPSBiYXJXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiYXJXaWR0aDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ3JpZFBhZEZvcnRpdGxlU3VidGl0bGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBncmlkUGFkRm9ydGl0bGVTdWJ0aXRsZSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdsID0gdy5nbG9iYWxzO1xuICAgICAgICB2YXIgZ3JpZFNocmlua09mZnNldCA9IHRoaXMuZEN0eC5pc1NwYXJrbGluZSB8fCAhdy5nbG9iYWxzLmF4aXNDaGFydHMgPyAwIDogMTA7XG4gICAgICAgIHZhciB0aXRsZVN1YnRpdGxlID0gWyd0aXRsZScsICdzdWJ0aXRsZSddO1xuICAgICAgICB0aXRsZVN1YnRpdGxlLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBpZiAody5jb25maWdbdF0udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBncmlkU2hyaW5rT2Zmc2V0ICs9IHcuY29uZmlnW3RdLm1hcmdpbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ3JpZFNocmlua09mZnNldCArPSBfdGhpcy5kQ3R4LmlzU3BhcmtsaW5lIHx8ICF3Lmdsb2JhbHMuYXhpc0NoYXJ0cyA/IDAgOiA1O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBub25BeGlzT3JNdWx0aVNlcmllc0NoYXJ0cyA9IHcuY29uZmlnLnNlcmllcy5sZW5ndGggPiAxIHx8ICF3Lmdsb2JhbHMuYXhpc0NoYXJ0cyB8fCB3LmNvbmZpZy5sZWdlbmQuc2hvd0ZvclNpbmdsZVNlcmllcztcblxuICAgICAgICBpZiAody5jb25maWcubGVnZW5kLnNob3cgJiYgdy5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAnYm90dG9tJyAmJiAhdy5jb25maWcubGVnZW5kLmZsb2F0aW5nICYmIG5vbkF4aXNPck11bHRpU2VyaWVzQ2hhcnRzKSB7XG4gICAgICAgICAgZ3JpZFNocmlua09mZnNldCArPSAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0aXRsZUNvb3JkcyA9IHRoaXMuZEN0eC5kaW1IZWxwZXJzLmdldFRpdGxlU3VidGl0bGVDb29yZHMoJ3RpdGxlJyk7XG4gICAgICAgIHZhciBzdWJ0aXRsZUNvb3JkcyA9IHRoaXMuZEN0eC5kaW1IZWxwZXJzLmdldFRpdGxlU3VidGl0bGVDb29yZHMoJ3N1YnRpdGxlJyk7XG4gICAgICAgIGdsLmdyaWRIZWlnaHQgPSBnbC5ncmlkSGVpZ2h0IC0gdGl0bGVDb29yZHMuaGVpZ2h0IC0gc3VidGl0bGVDb29yZHMuaGVpZ2h0IC0gZ3JpZFNocmlua09mZnNldDtcbiAgICAgICAgZ2wudHJhbnNsYXRlWSA9IGdsLnRyYW5zbGF0ZVkgKyB0aXRsZUNvb3Jkcy5oZWlnaHQgKyBzdWJ0aXRsZUNvb3Jkcy5oZWlnaHQgKyBncmlkU2hyaW5rT2Zmc2V0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRHcmlkWFBvc0ZvckR1YWxZQXhpc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEdyaWRYUG9zRm9yRHVhbFlBeGlzKHlUaXRsZUNvb3JkcywgeWF4aXNMYWJlbENvb3Jkcykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGF4ZXNVdGlscyA9IG5ldyBBeGVzVXRpbHModGhpcy5kQ3R4LmN0eCk7XG4gICAgICAgIHcuY29uZmlnLnlheGlzLm1hcChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAody5nbG9iYWxzLmlnbm9yZVlBeGlzSW5kZXhlcy5pbmRleE9mKGluZGV4KSA9PT0gLTEgJiYgIXlheGUuZmxvYXRpbmcgJiYgIWF4ZXNVdGlscy5pc1lBeGlzSGlkZGVuKGluZGV4KSkge1xuICAgICAgICAgICAgaWYgKHlheGUub3Bwb3NpdGUpIHtcbiAgICAgICAgICAgICAgdy5nbG9iYWxzLnRyYW5zbGF0ZVggPSB3Lmdsb2JhbHMudHJhbnNsYXRlWCAtICh5YXhpc0xhYmVsQ29vcmRzW2luZGV4XS53aWR0aCArIHlUaXRsZUNvb3Jkc1tpbmRleF0ud2lkdGgpIC0gcGFyc2VJbnQody5jb25maWcueWF4aXNbaW5kZXhdLmxhYmVscy5zdHlsZS5mb250U2l6ZSwgMTApIC8gMS4yIC0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGltR3JpZDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIERpbWVuc2lvbnMgQ2xhc3MgZm9yIGNhbGN1bGF0aW5nIHJlY3RzIG9mIGFsbCBlbGVtZW50cyB0aGF0IGFyZSBkcmF3biBhbmQgd2lsbCBiZSBkcmF3bi5cbiAgICpcbiAgICogQG1vZHVsZSBEaW1lbnNpb25zXG4gICAqKi9cblxuICB2YXIgRGltZW5zaW9ucyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGltZW5zaW9ucyhjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaW1lbnNpb25zKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHRoaXMubGdSZWN0ID0ge307XG4gICAgICB0aGlzLnlBeGlzV2lkdGggPSAwO1xuICAgICAgdGhpcy55QXhpc1dpZHRoTGVmdCA9IDA7XG4gICAgICB0aGlzLnlBeGlzV2lkdGhSaWdodCA9IDA7XG4gICAgICB0aGlzLnhBeGlzSGVpZ2h0ID0gMDtcbiAgICAgIHRoaXMuaXNTcGFya2xpbmUgPSB0aGlzLncuY29uZmlnLmNoYXJ0LnNwYXJrbGluZS5lbmFibGVkO1xuICAgICAgdGhpcy5kaW1IZWxwZXJzID0gbmV3IEhlbHBlcnMkMSh0aGlzKTtcbiAgICAgIHRoaXMuZGltWUF4aXMgPSBuZXcgRGltWUF4aXModGhpcyk7XG4gICAgICB0aGlzLmRpbVhBeGlzID0gbmV3IERpbVhBeGlzKHRoaXMpO1xuICAgICAgdGhpcy5kaW1HcmlkID0gbmV3IERpbUdyaWQodGhpcyk7XG4gICAgICB0aGlzLmxnV2lkdGhGb3JTaWRlTGVnZW5kcyA9IDA7XG4gICAgICB0aGlzLmdyaWRQYWQgPSB0aGlzLncuY29uZmlnLmdyaWQucGFkZGluZztcbiAgICAgIHRoaXMueFBhZFJpZ2h0ID0gMDtcbiAgICAgIHRoaXMueFBhZExlZnQgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgRGltZW5zaW9uc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB3IC0gY2hhcnQgY29udGV4dFxuICAgICAqKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKERpbWVuc2lvbnMsIFt7XG4gICAgICBrZXk6IFwicGxvdENvb3Jkc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsb3RDb29yZHMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ2wgPSB3Lmdsb2JhbHM7XG4gICAgICAgIHRoaXMubGdSZWN0ID0gdGhpcy5kaW1IZWxwZXJzLmdldExlZ2VuZHNSZWN0KCk7XG5cbiAgICAgICAgaWYgKGdsLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICAvLyBmb3IgbGluZSAvIGFyZWEgLyBzY2F0dGVyIC8gY29sdW1uXG4gICAgICAgICAgdGhpcy5zZXREaW1lbnNpb25zRm9yQXhpc0NoYXJ0cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGZvciBwaWUgLyBkb251dHMgLyBjaXJjbGVcbiAgICAgICAgICB0aGlzLnNldERpbWVuc2lvbnNGb3JOb25BeGlzQ2hhcnRzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpbUdyaWQuZ3JpZFBhZEZvcnRpdGxlU3VidGl0bGUoKTsgLy8gYWZ0ZXIgY2FsY3VsYXRpbmcgZXZlcnl0aGluZywgYXBwbHkgcGFkZGluZyBzZXQgYnkgdXNlclxuXG4gICAgICAgIGdsLmdyaWRIZWlnaHQgPSBnbC5ncmlkSGVpZ2h0IC0gdGhpcy5ncmlkUGFkLnRvcCAtIHRoaXMuZ3JpZFBhZC5ib3R0b207XG4gICAgICAgIGdsLmdyaWRXaWR0aCA9IGdsLmdyaWRXaWR0aCAtIHRoaXMuZ3JpZFBhZC5sZWZ0IC0gdGhpcy5ncmlkUGFkLnJpZ2h0IC0gdGhpcy54UGFkUmlnaHQgLSB0aGlzLnhQYWRMZWZ0O1xuICAgICAgICB2YXIgYmFyV2lkdGggPSB0aGlzLmRpbUdyaWQuZ3JpZFBhZEZvckNvbHVtbnNJbk51bWVyaWNBeGlzKGdsLmdyaWRXaWR0aCk7XG4gICAgICAgIGdsLmdyaWRXaWR0aCA9IGdsLmdyaWRXaWR0aCAtIGJhcldpZHRoICogMjtcbiAgICAgICAgZ2wudHJhbnNsYXRlWCA9IGdsLnRyYW5zbGF0ZVggKyB0aGlzLmdyaWRQYWQubGVmdCArIHRoaXMueFBhZExlZnQgKyAoYmFyV2lkdGggPiAwID8gYmFyV2lkdGggKyA0IDogMCk7XG4gICAgICAgIGdsLnRyYW5zbGF0ZVkgPSBnbC50cmFuc2xhdGVZICsgdGhpcy5ncmlkUGFkLnRvcDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RGltZW5zaW9uc0ZvckF4aXNDaGFydHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREaW1lbnNpb25zRm9yQXhpc0NoYXJ0cygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdsID0gdy5nbG9iYWxzO1xuICAgICAgICB2YXIgeWF4aXNMYWJlbENvb3JkcyA9IHRoaXMuZGltWUF4aXMuZ2V0eUF4aXNMYWJlbHNDb29yZHMoKTtcbiAgICAgICAgdmFyIHlUaXRsZUNvb3JkcyA9IHRoaXMuZGltWUF4aXMuZ2V0eUF4aXNUaXRsZUNvb3JkcygpO1xuICAgICAgICB3Lmdsb2JhbHMueUxhYmVsc0Nvb3JkcyA9IFtdO1xuICAgICAgICB3Lmdsb2JhbHMueVRpdGxlQ29vcmRzID0gW107XG4gICAgICAgIHcuY29uZmlnLnlheGlzLm1hcChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICAvLyBzdG9yZSB0aGUgbGFiZWxzIGFuZCB0aXRsZXMgY29vcmRzIGluIGdsb2JhbCB2YXJzXG4gICAgICAgICAgdy5nbG9iYWxzLnlMYWJlbHNDb29yZHMucHVzaCh7XG4gICAgICAgICAgICB3aWR0aDogeWF4aXNMYWJlbENvb3Jkc1tpbmRleF0ud2lkdGgsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB3Lmdsb2JhbHMueVRpdGxlQ29vcmRzLnB1c2goe1xuICAgICAgICAgICAgd2lkdGg6IHlUaXRsZUNvb3Jkc1tpbmRleF0ud2lkdGgsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMueUF4aXNXaWR0aCA9IHRoaXMuZGltWUF4aXMuZ2V0VG90YWxZQXhpc1dpZHRoKCk7XG4gICAgICAgIHZhciB4YXhpc0xhYmVsQ29vcmRzID0gdGhpcy5kaW1YQXhpcy5nZXR4QXhpc0xhYmVsc0Nvb3JkcygpO1xuICAgICAgICB2YXIgeHRpdGxlQ29vcmRzID0gdGhpcy5kaW1YQXhpcy5nZXR4QXhpc1RpdGxlQ29vcmRzKCk7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uYWxDaGVja3NGb3JBeGlzQ29vcmRzKHhheGlzTGFiZWxDb29yZHMsIHh0aXRsZUNvb3Jkcyk7XG4gICAgICAgIGdsLnRyYW5zbGF0ZVhBeGlzWSA9IHcuZ2xvYmFscy5yb3RhdGVYTGFiZWxzID8gdGhpcy54QXhpc0hlaWdodCAvIDggOiAtNDtcbiAgICAgICAgZ2wudHJhbnNsYXRlWEF4aXNYID0gdy5nbG9iYWxzLnJvdGF0ZVhMYWJlbHMgJiYgdy5nbG9iYWxzLmlzWE51bWVyaWMgJiYgdy5jb25maWcueGF4aXMubGFiZWxzLnJvdGF0ZSA8PSAtNDUgPyAtdGhpcy54QXhpc1dpZHRoIC8gNCA6IDA7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwpIHtcbiAgICAgICAgICBnbC5yb3RhdGVYTGFiZWxzID0gZmFsc2U7XG4gICAgICAgICAgZ2wudHJhbnNsYXRlWEF4aXNZID0gLTEgKiAocGFyc2VJbnQody5jb25maWcueGF4aXMubGFiZWxzLnN0eWxlLmZvbnRTaXplLCAxMCkgLyAxLjUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wudHJhbnNsYXRlWEF4aXNZID0gZ2wudHJhbnNsYXRlWEF4aXNZICsgdy5jb25maWcueGF4aXMubGFiZWxzLm9mZnNldFk7XG4gICAgICAgIGdsLnRyYW5zbGF0ZVhBeGlzWCA9IGdsLnRyYW5zbGF0ZVhBeGlzWCArIHcuY29uZmlnLnhheGlzLmxhYmVscy5vZmZzZXRYO1xuICAgICAgICB2YXIgeUF4aXNXaWR0aCA9IHRoaXMueUF4aXNXaWR0aDtcbiAgICAgICAgdmFyIHhBeGlzSGVpZ2h0ID0gdGhpcy54QXhpc0hlaWdodDtcbiAgICAgICAgZ2wueEF4aXNMYWJlbHNIZWlnaHQgPSB0aGlzLnhBeGlzSGVpZ2h0O1xuICAgICAgICBnbC54QXhpc0hlaWdodCA9IHRoaXMueEF4aXNIZWlnaHQ7XG4gICAgICAgIHZhciB0cmFuc2xhdGVZID0gMTA7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdyYWRhcicgfHwgdGhpcy5pc1NwYXJrbGluZSkge1xuICAgICAgICAgIHlBeGlzV2lkdGggPSAwO1xuICAgICAgICAgIHhBeGlzSGVpZ2h0ID0gZ2wuZ29sZGVuUGFkZGluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzU3BhcmtsaW5lKSB7XG4gICAgICAgICAgdGhpcy5sZ1JlY3QgPSB7XG4gICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICB3aWR0aDogMFxuICAgICAgICAgIH07XG4gICAgICAgICAgeEF4aXNIZWlnaHQgPSAwO1xuICAgICAgICAgIHlBeGlzV2lkdGggPSAwO1xuICAgICAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaW1YQXhpcy5hZGRpdGlvbmFsUGFkZGluZ1hMYWJlbHMoeGF4aXNMYWJlbENvb3Jkcyk7XG5cbiAgICAgICAgdmFyIGxlZ2VuZFRvcEJvdHRvbSA9IGZ1bmN0aW9uIGxlZ2VuZFRvcEJvdHRvbSgpIHtcbiAgICAgICAgICBnbC50cmFuc2xhdGVYID0geUF4aXNXaWR0aDtcbiAgICAgICAgICBnbC5ncmlkSGVpZ2h0ID0gZ2wuc3ZnSGVpZ2h0IC0gX3RoaXMubGdSZWN0LmhlaWdodCAtIHhBeGlzSGVpZ2h0IC0gKCFfdGhpcy5pc1NwYXJrbGluZSA/IHcuZ2xvYmFscy5yb3RhdGVYTGFiZWxzID8gMTAgOiAxNSA6IDApO1xuICAgICAgICAgIGdsLmdyaWRXaWR0aCA9IGdsLnN2Z1dpZHRoIC0geUF4aXNXaWR0aDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAody5jb25maWcueGF4aXMucG9zaXRpb24gPT09ICd0b3AnKSB0cmFuc2xhdGVZID0gZ2wueEF4aXNIZWlnaHQgLSB3LmNvbmZpZy54YXhpcy5heGlzVGlja3MuaGVpZ2h0IC0gNTtcblxuICAgICAgICBzd2l0Y2ggKHcuY29uZmlnLmxlZ2VuZC5wb3NpdGlvbikge1xuICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICBnbC50cmFuc2xhdGVZID0gdHJhbnNsYXRlWTtcbiAgICAgICAgICAgIGxlZ2VuZFRvcEJvdHRvbSgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgZ2wudHJhbnNsYXRlWSA9IHRoaXMubGdSZWN0LmhlaWdodCArIHRyYW5zbGF0ZVk7XG4gICAgICAgICAgICBsZWdlbmRUb3BCb3R0b20oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICBnbC50cmFuc2xhdGVZID0gdHJhbnNsYXRlWTtcbiAgICAgICAgICAgIGdsLnRyYW5zbGF0ZVggPSB0aGlzLmxnUmVjdC53aWR0aCArIHlBeGlzV2lkdGg7XG4gICAgICAgICAgICBnbC5ncmlkSGVpZ2h0ID0gZ2wuc3ZnSGVpZ2h0IC0geEF4aXNIZWlnaHQgLSAxMjtcbiAgICAgICAgICAgIGdsLmdyaWRXaWR0aCA9IGdsLnN2Z1dpZHRoIC0gdGhpcy5sZ1JlY3Qud2lkdGggLSB5QXhpc1dpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICBnbC50cmFuc2xhdGVZID0gdHJhbnNsYXRlWTtcbiAgICAgICAgICAgIGdsLnRyYW5zbGF0ZVggPSB5QXhpc1dpZHRoO1xuICAgICAgICAgICAgZ2wuZ3JpZEhlaWdodCA9IGdsLnN2Z0hlaWdodCAtIHhBeGlzSGVpZ2h0IC0gMTI7XG4gICAgICAgICAgICBnbC5ncmlkV2lkdGggPSBnbC5zdmdXaWR0aCAtIHRoaXMubGdSZWN0LndpZHRoIC0geUF4aXNXaWR0aCAtIDU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xlZ2VuZCBwb3NpdGlvbiBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpbUdyaWQuc2V0R3JpZFhQb3NGb3JEdWFsWUF4aXMoeVRpdGxlQ29vcmRzLCB5YXhpc0xhYmVsQ29vcmRzKTsgLy8gYWZ0ZXIgZHJhd2luZyBldmVyeXRoaW5nLCBzZXQgdGhlIFkgYXhpcyBwb3NpdGlvbnNcblxuICAgICAgICB2YXIgb2JqeUF4aXMgPSBuZXcgWUF4aXModGhpcy5jdHgpO1xuICAgICAgICBvYmp5QXhpcy5zZXRZQXhpc1hQb3NpdGlvbih5YXhpc0xhYmVsQ29vcmRzLCB5VGl0bGVDb29yZHMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXREaW1lbnNpb25zRm9yTm9uQXhpc0NoYXJ0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERpbWVuc2lvbnNGb3JOb25BeGlzQ2hhcnRzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdsID0gdy5nbG9iYWxzO1xuICAgICAgICB2YXIgY25mID0gdy5jb25maWc7XG4gICAgICAgIHZhciB4UGFkID0gMDtcblxuICAgICAgICBpZiAody5jb25maWcubGVnZW5kLnNob3cgJiYgIXcuY29uZmlnLmxlZ2VuZC5mbG9hdGluZykge1xuICAgICAgICAgIHhQYWQgPSAyMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0eXBlID0gY25mLmNoYXJ0LnR5cGUgPT09ICdwaWUnIHx8IGNuZi5jaGFydC50eXBlID09PSAnZG9udXQnID8gJ3BpZScgOiAncmFkaWFsQmFyJztcbiAgICAgICAgdmFyIG9mZlkgPSBjbmYucGxvdE9wdGlvbnNbdHlwZV0ub2Zmc2V0WTtcbiAgICAgICAgdmFyIG9mZlggPSBjbmYucGxvdE9wdGlvbnNbdHlwZV0ub2Zmc2V0WDtcblxuICAgICAgICBpZiAoIWNuZi5sZWdlbmQuc2hvdyB8fCBjbmYubGVnZW5kLmZsb2F0aW5nKSB7XG4gICAgICAgICAgZ2wuZ3JpZEhlaWdodCA9IGdsLnN2Z0hlaWdodCAtIGNuZi5ncmlkLnBhZGRpbmcubGVmdCArIGNuZi5ncmlkLnBhZGRpbmcucmlnaHQ7XG4gICAgICAgICAgZ2wuZ3JpZFdpZHRoID0gZ2wuZ3JpZEhlaWdodDtcbiAgICAgICAgICBnbC50cmFuc2xhdGVZID0gb2ZmWTtcbiAgICAgICAgICBnbC50cmFuc2xhdGVYID0gb2ZmWCArIChnbC5zdmdXaWR0aCAtIGdsLmdyaWRXaWR0aCkgLyAyO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoY25mLmxlZ2VuZC5wb3NpdGlvbikge1xuICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICBnbC5ncmlkSGVpZ2h0ID0gZ2wuc3ZnSGVpZ2h0IC0gdGhpcy5sZ1JlY3QuaGVpZ2h0IC0gZ2wuZ29sZGVuUGFkZGluZztcbiAgICAgICAgICAgIGdsLmdyaWRXaWR0aCA9IGdsLmdyaWRIZWlnaHQ7XG4gICAgICAgICAgICBnbC50cmFuc2xhdGVZID0gb2ZmWSAtIDEwO1xuICAgICAgICAgICAgZ2wudHJhbnNsYXRlWCA9IG9mZlggKyAoZ2wuc3ZnV2lkdGggLSBnbC5ncmlkV2lkdGgpIC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIGdsLmdyaWRIZWlnaHQgPSBnbC5zdmdIZWlnaHQgLSB0aGlzLmxnUmVjdC5oZWlnaHQgLSBnbC5nb2xkZW5QYWRkaW5nO1xuICAgICAgICAgICAgZ2wuZ3JpZFdpZHRoID0gZ2wuZ3JpZEhlaWdodDtcbiAgICAgICAgICAgIGdsLnRyYW5zbGF0ZVkgPSB0aGlzLmxnUmVjdC5oZWlnaHQgKyBvZmZZICsgMTA7XG4gICAgICAgICAgICBnbC50cmFuc2xhdGVYID0gb2ZmWCArIChnbC5zdmdXaWR0aCAtIGdsLmdyaWRXaWR0aCkgLyAyO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGdsLmdyaWRXaWR0aCA9IGdsLnN2Z1dpZHRoIC0gdGhpcy5sZ1JlY3Qud2lkdGggLSB4UGFkO1xuICAgICAgICAgICAgZ2wuZ3JpZEhlaWdodCA9IGNuZi5jaGFydC5oZWlnaHQgIT09ICdhdXRvJyA/IGdsLnN2Z0hlaWdodCA6IGdsLmdyaWRXaWR0aDtcbiAgICAgICAgICAgIGdsLnRyYW5zbGF0ZVkgPSBvZmZZO1xuICAgICAgICAgICAgZ2wudHJhbnNsYXRlWCA9IG9mZlggKyB0aGlzLmxnUmVjdC53aWR0aCArIHhQYWQ7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIGdsLmdyaWRXaWR0aCA9IGdsLnN2Z1dpZHRoIC0gdGhpcy5sZ1JlY3Qud2lkdGggLSB4UGFkIC0gNTtcbiAgICAgICAgICAgIGdsLmdyaWRIZWlnaHQgPSBjbmYuY2hhcnQuaGVpZ2h0ICE9PSAnYXV0bycgPyBnbC5zdmdIZWlnaHQgOiBnbC5ncmlkV2lkdGg7XG4gICAgICAgICAgICBnbC50cmFuc2xhdGVZID0gb2ZmWTtcbiAgICAgICAgICAgIGdsLnRyYW5zbGF0ZVggPSBvZmZYICsgMTA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xlZ2VuZCBwb3NpdGlvbiBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29uZGl0aW9uYWxDaGVja3NGb3JBeGlzQ29vcmRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29uZGl0aW9uYWxDaGVja3NGb3JBeGlzQ29vcmRzKHhheGlzTGFiZWxDb29yZHMsIHh0aXRsZUNvb3Jkcykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdGhpcy54QXhpc0hlaWdodCA9ICh4YXhpc0xhYmVsQ29vcmRzLmhlaWdodCArIHh0aXRsZUNvb3Jkcy5oZWlnaHQpICogKHcuZ2xvYmFscy5pc011bHRpTGluZVggPyAxLjIgOiB3Lmdsb2JhbHMuTElORV9IRUlHSFRfUkFUSU8pICsgKHcuZ2xvYmFscy5yb3RhdGVYTGFiZWxzID8gMjIgOiAxMCk7XG4gICAgICAgIHRoaXMueEF4aXNXaWR0aCA9IHhheGlzTGFiZWxDb29yZHMud2lkdGg7XG5cbiAgICAgICAgaWYgKHRoaXMueEF4aXNIZWlnaHQgLSB4dGl0bGVDb29yZHMuaGVpZ2h0ID4gdy5jb25maWcueGF4aXMubGFiZWxzLm1heEhlaWdodCkge1xuICAgICAgICAgIHRoaXMueEF4aXNIZWlnaHQgPSB3LmNvbmZpZy54YXhpcy5sYWJlbHMubWF4SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmxhYmVscy5taW5IZWlnaHQgJiYgdGhpcy54QXhpc0hlaWdodCA8IHcuY29uZmlnLnhheGlzLmxhYmVscy5taW5IZWlnaHQpIHtcbiAgICAgICAgICB0aGlzLnhBeGlzSGVpZ2h0ID0gdy5jb25maWcueGF4aXMubGFiZWxzLm1pbkhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5mbG9hdGluZykge1xuICAgICAgICAgIHRoaXMueEF4aXNIZWlnaHQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pbllBeGlzV2lkdGggPSAwO1xuICAgICAgICB2YXIgbWF4WUF4aXNXaWR0aCA9IDA7XG4gICAgICAgIHcuY29uZmlnLnlheGlzLmZvckVhY2goZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICBtaW5ZQXhpc1dpZHRoICs9IHkubGFiZWxzLm1pbldpZHRoO1xuICAgICAgICAgIG1heFlBeGlzV2lkdGggKz0geS5sYWJlbHMubWF4V2lkdGg7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnlBeGlzV2lkdGggPCBtaW5ZQXhpc1dpZHRoKSB7XG4gICAgICAgICAgdGhpcy55QXhpc1dpZHRoID0gbWluWUF4aXNXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnlBeGlzV2lkdGggPiBtYXhZQXhpc1dpZHRoKSB7XG4gICAgICAgICAgdGhpcy55QXhpc1dpZHRoID0gbWF4WUF4aXNXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEaW1lbnNpb25zO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgUGllIENsYXNzIGZvciBkcmF3aW5nIFBpZSAvIERvbnV0IENoYXJ0cy5cbiAgICogQG1vZHVsZSBQaWVcbiAgICoqL1xuXG4gIHZhciBQaWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBpZShjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQaWUpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdGhpcy5jaGFydFR5cGUgPSB0aGlzLncuY29uZmlnLmNoYXJ0LnR5cGU7XG4gICAgICB0aGlzLmluaXRpYWxBbmltID0gdGhpcy53LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmVuYWJsZWQ7XG4gICAgICB0aGlzLmR5bmFtaWNBbmltID0gdGhpcy5pbml0aWFsQW5pbSAmJiB0aGlzLncuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5lbmFibGVkO1xuICAgICAgdGhpcy5hbmltQmVnaW5BcnIgPSBbMF07XG4gICAgICB0aGlzLmFuaW1EdXIgPSAwO1xuICAgICAgdGhpcy5kb251dERhdGFMYWJlbHMgPSB0aGlzLncuY29uZmlnLnBsb3RPcHRpb25zLnBpZS5kb251dC5sYWJlbHM7XG4gICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgIHRoaXMubGluZUNvbG9yQXJyID0gdy5nbG9iYWxzLnN0cm9rZS5jb2xvcnMgIT09IHVuZGVmaW5lZCA/IHcuZ2xvYmFscy5zdHJva2UuY29sb3JzIDogdy5nbG9iYWxzLmNvbG9ycztcbiAgICAgIHRoaXMuZGVmYXVsdFNpemUgPSB3Lmdsb2JhbHMuc3ZnSGVpZ2h0IDwgdy5nbG9iYWxzLnN2Z1dpZHRoID8gdy5nbG9iYWxzLmdyaWRIZWlnaHQgOiB3Lmdsb2JhbHMuZ3JpZFdpZHRoO1xuICAgICAgdGhpcy5jZW50ZXJZID0gdGhpcy5kZWZhdWx0U2l6ZSAvIDI7XG4gICAgICB0aGlzLmNlbnRlclggPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gMjtcbiAgICAgIHRoaXMuZnVsbEFuZ2xlID0gMzYwO1xuICAgICAgdy5nbG9iYWxzLnJhZGlhbFNpemUgPSB0aGlzLmRlZmF1bHRTaXplIC8gMi4wNSAtIHcuY29uZmlnLnN0cm9rZS53aWR0aCAtICghdy5jb25maWcuY2hhcnQuc3BhcmtsaW5lLmVuYWJsZWQgPyB3LmNvbmZpZy5jaGFydC5kcm9wU2hhZG93LmJsdXIgOiAwKTtcbiAgICAgIHRoaXMuZG9udXRTaXplID0gdy5nbG9iYWxzLnJhZGlhbFNpemUgKiBwYXJzZUludCh3LmNvbmZpZy5wbG90T3B0aW9ucy5waWUuZG9udXQuc2l6ZSwgMTApIC8gMTAwO1xuICAgICAgdGhpcy5zbGljZUxhYmVscyA9IFtdO1xuICAgICAgdGhpcy5wcmV2U2VjdG9yQW5nbGVBcnIgPSBbXTsgLy8gZm9yIGR5bmFtaWMgYW5pbWF0aW9uc1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQaWUsIFt7XG4gICAgICBrZXk6IFwiZHJhd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoc2VyaWVzKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciByZXQgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXBpZSdcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh3Lmdsb2JhbHMubm9EYXRhKSByZXR1cm4gcmV0O1xuICAgICAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc2VyaWVzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgLy8gQ0FMQ1VMQVRFIFRIRSBUT1RBTFxuICAgICAgICAgIHRvdGFsICs9IFV0aWxzLm5lZ1RvWmVybyhzZXJpZXNba10pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlY3RvckFuZ2xlQXJyID0gW107IC8vIGVsIHRvIHdoaWNoIHNlcmllcyB3aWxsIGJlIGRyYXduXG5cbiAgICAgICAgdmFyIGVsU2VyaWVzID0gZ3JhcGhpY3MuZ3JvdXAoKTsgLy8gcHJldmVudCBkaXZpc2lvbiBieSB6ZXJvIGVycm9yIGlmIHRoZXJlIGlzIG5vIGRhdGFcblxuICAgICAgICBpZiAodG90YWwgPT09IDApIHtcbiAgICAgICAgICB0b3RhbCA9IDAuMDAwMDE7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIENBTENVTEFURSBUSEUgQU5HTEVTXG4gICAgICAgICAgdmFyIGFuZ2xlID0gdGhpcy5mdWxsQW5nbGUgKiBVdGlscy5uZWdUb1plcm8oc2VyaWVzW2ldKSAvIHRvdGFsO1xuICAgICAgICAgIHNlY3RvckFuZ2xlQXJyLnB1c2goYW5nbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5kYXRhQ2hhbmdlZCkge1xuICAgICAgICAgIHZhciBwcmV2VG90YWwgPSAwO1xuXG4gICAgICAgICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLmxlbmd0aDsgX2srKykge1xuICAgICAgICAgICAgLy8gQ0FMQ1VMQVRFIFRIRSBQUkVWIFRPVEFMXG4gICAgICAgICAgICBwcmV2VG90YWwgKz0gVXRpbHMubmVnVG9aZXJvKHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzW19rXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHByZXZpb3VzQW5nbGU7XG5cbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdy5nbG9iYWxzLnByZXZpb3VzUGF0aHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAvLyBDQUxDVUxBVEUgVEhFIFBSRVZJT1VTIEFOR0xFU1xuICAgICAgICAgICAgcHJldmlvdXNBbmdsZSA9IHRoaXMuZnVsbEFuZ2xlICogVXRpbHMubmVnVG9aZXJvKHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzW19pXSkgLyBwcmV2VG90YWw7XG4gICAgICAgICAgICB0aGlzLnByZXZTZWN0b3JBbmdsZUFyci5wdXNoKHByZXZpb3VzQW5nbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBvbiBzbWFsbCBjaGFydCBzaXplIGFmdGVyIGZldyBjb3VudCBvZiByZXNpemVzIGJyb3dzZXIgd2luZG93IGRvbnV0U2l6ZSBjYW4gYmUgbmVnYXRpdmVcblxuXG4gICAgICAgIGlmICh0aGlzLmRvbnV0U2l6ZSA8IDApIHtcbiAgICAgICAgICB0aGlzLmRvbnV0U2l6ZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2NhbGVTaXplID0gdy5jb25maWcucGxvdE9wdGlvbnMucGllLmN1c3RvbVNjYWxlO1xuICAgICAgICB2YXIgaGFsZlcgPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gMjtcbiAgICAgICAgdmFyIGhhbGZIID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQgLyAyO1xuICAgICAgICB2YXIgdHJhbnNsYXRlWCA9IGhhbGZXIC0gdy5nbG9iYWxzLmdyaWRXaWR0aCAvIDIgKiBzY2FsZVNpemU7XG4gICAgICAgIHZhciB0cmFuc2xhdGVZID0gaGFsZkggLSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIDIgKiBzY2FsZVNpemU7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdkb251dCcpIHtcbiAgICAgICAgICAvLyBkcmF3IHRoZSBpbm5lciBjaXJjbGUgYW5kIGFkZCBzb21lIHRleHQgdG8gaXRcbiAgICAgICAgICB2YXIgY2lyY2xlID0gZ3JhcGhpY3MuZHJhd0NpcmNsZSh0aGlzLmRvbnV0U2l6ZSk7XG4gICAgICAgICAgY2lyY2xlLmF0dHIoe1xuICAgICAgICAgICAgY3g6IHRoaXMuY2VudGVyWCxcbiAgICAgICAgICAgIGN5OiB0aGlzLmNlbnRlclksXG4gICAgICAgICAgICBmaWxsOiB3LmNvbmZpZy5wbG90T3B0aW9ucy5waWUuZG9udXQuYmFja2dyb3VuZCA/IHcuY29uZmlnLnBsb3RPcHRpb25zLnBpZS5kb251dC5iYWNrZ3JvdW5kIDogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsU2VyaWVzLmFkZChjaXJjbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsRyA9IHNlbGYuZHJhd0FyY3Moc2VjdG9yQW5nbGVBcnIsIHNlcmllcyk7IC8vIGFkZCBzbGljZSBkYXRhTGFiZWxzIGF0IHRoZSBlbmRcblxuICAgICAgICB0aGlzLnNsaWNlTGFiZWxzLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICBlbEcuYWRkKHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxTZXJpZXMuYXR0cih7XG4gICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZShcIi5jb25jYXQodHJhbnNsYXRlWCwgXCIsIFwiKS5jb25jYXQodHJhbnNsYXRlWSwgXCIpIHNjYWxlKFwiKS5jb25jYXQoc2NhbGVTaXplLCBcIilcIilcbiAgICAgICAgfSk7XG4gICAgICAgIGVsU2VyaWVzLmFkZChlbEcpO1xuICAgICAgICByZXQuYWRkKGVsU2VyaWVzKTtcblxuICAgICAgICBpZiAodGhpcy5kb251dERhdGFMYWJlbHMuc2hvdykge1xuICAgICAgICAgIHZhciBkYXRhTGFiZWxzID0gdGhpcy5yZW5kZXJJbm5lckRhdGFMYWJlbHModGhpcy5kb251dERhdGFMYWJlbHMsIHtcbiAgICAgICAgICAgIGhvbGxvd1NpemU6IHRoaXMuZG9udXRTaXplLFxuICAgICAgICAgICAgY2VudGVyWDogdGhpcy5jZW50ZXJYLFxuICAgICAgICAgICAgY2VudGVyWTogdGhpcy5jZW50ZXJZLFxuICAgICAgICAgICAgb3BhY2l0eTogdGhpcy5kb251dERhdGFMYWJlbHMuc2hvdyxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVg6IHRyYW5zbGF0ZVgsXG4gICAgICAgICAgICB0cmFuc2xhdGVZOiB0cmFuc2xhdGVZXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0LmFkZChkYXRhTGFiZWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9IC8vIGNvcmUgZnVuY3Rpb24gZm9yIGRyYXdpbmcgcGllIGFyY3NcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3QXJjc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdBcmNzKHNlY3RvckFuZ2xlQXJyLCBzZXJpZXMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZmlsbCA9IG5ldyBGaWxsKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGcgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXNsaWNlcydcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzdGFydEFuZ2xlID0gMDtcbiAgICAgICAgdmFyIHByZXZTdGFydEFuZ2xlID0gMDtcbiAgICAgICAgdmFyIGVuZEFuZ2xlID0gMDtcbiAgICAgICAgdmFyIHByZXZFbmRBbmdsZSA9IDA7XG4gICAgICAgIHRoaXMuc3Ryb2tlV2lkdGggPSB3LmNvbmZpZy5zdHJva2Uuc2hvdyA/IHcuY29uZmlnLnN0cm9rZS53aWR0aCA6IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWN0b3JBbmdsZUFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBlbFBpZUFyYyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiBcImFwZXhjaGFydHMtc2VyaWVzIGFwZXhjaGFydHMtcGllLXNlcmllc1wiLFxuICAgICAgICAgICAgc2VyaWVzTmFtZTogVXRpbHMuZXNjYXBlU3RyaW5nKHcuZ2xvYmFscy5zZXJpZXNOYW1lc1tpXSksXG4gICAgICAgICAgICByZWw6IGkgKyAxLFxuICAgICAgICAgICAgJ2RhdGE6cmVhbEluZGV4JzogaVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGcuYWRkKGVsUGllQXJjKTtcbiAgICAgICAgICBzdGFydEFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICAgICAgcHJldlN0YXJ0QW5nbGUgPSBwcmV2RW5kQW5nbGU7XG4gICAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgc2VjdG9yQW5nbGVBcnJbaV07XG4gICAgICAgICAgcHJldkVuZEFuZ2xlID0gcHJldlN0YXJ0QW5nbGUgKyB0aGlzLnByZXZTZWN0b3JBbmdsZUFycltpXTtcbiAgICAgICAgICB2YXIgYW5nbGUgPSBlbmRBbmdsZSAtIHN0YXJ0QW5nbGU7XG4gICAgICAgICAgdmFyIHBhdGhGaWxsID0gZmlsbC5maWxsUGF0aCh7XG4gICAgICAgICAgICBzZXJpZXNOdW1iZXI6IGksXG4gICAgICAgICAgICBzaXplOiB3Lmdsb2JhbHMucmFkaWFsU2l6ZSxcbiAgICAgICAgICAgIHZhbHVlOiBzZXJpZXNbaV1cbiAgICAgICAgICB9KTsgLy8gYWRkaXRpb25hbHksIHBhc3Mgc2l6ZSBmb3IgZ3JhZGllbnQgZHJhd2luZyBpbiB0aGUgZmlsbFBhdGggZnVuY3Rpb25cblxuICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5nZXRDaGFuZ2VkUGF0aChwcmV2U3RhcnRBbmdsZSwgcHJldkVuZEFuZ2xlKTtcbiAgICAgICAgICB2YXIgZWxQYXRoID0gZ3JhcGhpY3MuZHJhd1BhdGgoe1xuICAgICAgICAgICAgZDogcGF0aCxcbiAgICAgICAgICAgIHN0cm9rZTogdGhpcy5saW5lQ29sb3JBcnIgaW5zdGFuY2VvZiBBcnJheSA/IHRoaXMubGluZUNvbG9yQXJyW2ldIDogdGhpcy5saW5lQ29sb3JBcnIsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAgIGZpbGw6IHBhdGhGaWxsLFxuICAgICAgICAgICAgZmlsbE9wYWNpdHk6IHcuY29uZmlnLmZpbGwub3BhY2l0eSxcbiAgICAgICAgICAgIGNsYXNzZXM6IFwiYXBleGNoYXJ0cy1waWUtYXJlYSBhcGV4Y2hhcnRzLVwiLmNvbmNhdCh3LmNvbmZpZy5jaGFydC50eXBlLCBcIi1zbGljZS1cIikuY29uY2F0KGkpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWxQYXRoLmF0dHIoe1xuICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICBqOiBpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICB2YXIgc2hhZG93ID0gdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdztcbiAgICAgICAgICAgIGZpbHRlcnMuZHJvcFNoYWRvdyhlbFBhdGgsIHNoYWRvdywgaSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcnMoZWxQYXRoLCB0aGlzLmRvbnV0RGF0YUxhYmVscyk7XG4gICAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnMoZWxQYXRoLm5vZGUsIHtcbiAgICAgICAgICAgICdkYXRhOmFuZ2xlJzogYW5nbGUsXG4gICAgICAgICAgICAnZGF0YTpzdGFydEFuZ2xlJzogc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICdkYXRhOnN0cm9rZVdpZHRoJzogdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgICdkYXRhOnZhbHVlJzogc2VyaWVzW2ldXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGxhYmVsUG9zaXRpb24gPSB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ3BpZScpIHtcbiAgICAgICAgICAgIGxhYmVsUG9zaXRpb24gPSBVdGlscy5wb2xhclRvQ2FydGVzaWFuKHRoaXMuY2VudGVyWCwgdGhpcy5jZW50ZXJZLCB3Lmdsb2JhbHMucmFkaWFsU2l6ZSAvIDEuMjUgKyB3LmNvbmZpZy5wbG90T3B0aW9ucy5waWUuZGF0YUxhYmVscy5vZmZzZXQsIHN0YXJ0QW5nbGUgKyAoZW5kQW5nbGUgLSBzdGFydEFuZ2xlKSAvIDIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2RvbnV0Jykge1xuICAgICAgICAgICAgbGFiZWxQb3NpdGlvbiA9IFV0aWxzLnBvbGFyVG9DYXJ0ZXNpYW4odGhpcy5jZW50ZXJYLCB0aGlzLmNlbnRlclksICh3Lmdsb2JhbHMucmFkaWFsU2l6ZSArIHRoaXMuZG9udXRTaXplKSAvIDIgKyB3LmNvbmZpZy5wbG90T3B0aW9ucy5waWUuZGF0YUxhYmVscy5vZmZzZXQsIHN0YXJ0QW5nbGUgKyAoZW5kQW5nbGUgLSBzdGFydEFuZ2xlKSAvIDIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsUGllQXJjLmFkZChlbFBhdGgpOyAvLyBBbmltYXRpb24gY29kZSBzdGFydHNcblxuICAgICAgICAgIHZhciBkdXIgPSAwO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbEFuaW0gJiYgIXcuZ2xvYmFscy5yZXNpemVkICYmICF3Lmdsb2JhbHMuZGF0YUNoYW5nZWQpIHtcbiAgICAgICAgICAgIGR1ciA9IChlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpIC8gdGhpcy5mdWxsQW5nbGUgKiB3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLnNwZWVkO1xuICAgICAgICAgICAgaWYgKGR1ciA9PT0gMCkgZHVyID0gMTtcbiAgICAgICAgICAgIHRoaXMuYW5pbUR1ciA9IGR1ciArIHRoaXMuYW5pbUR1cjtcbiAgICAgICAgICAgIHRoaXMuYW5pbUJlZ2luQXJyLnB1c2godGhpcy5hbmltRHVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbmltQmVnaW5BcnIucHVzaCgwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5keW5hbWljQW5pbSAmJiB3Lmdsb2JhbHMuZGF0YUNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZVBhdGhzKGVsUGF0aCwge1xuICAgICAgICAgICAgICBzaXplOiB3Lmdsb2JhbHMucmFkaWFsU2l6ZSxcbiAgICAgICAgICAgICAgZW5kQW5nbGU6IGVuZEFuZ2xlLFxuICAgICAgICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgICBwcmV2U3RhcnRBbmdsZTogcHJldlN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgIHByZXZFbmRBbmdsZTogcHJldkVuZEFuZ2xlLFxuICAgICAgICAgICAgICBhbmltYXRlU3RhcnRpbmdQb3M6IHRydWUsXG4gICAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICAgIGFuaW1CZWdpbkFycjogdGhpcy5hbmltQmVnaW5BcnIsXG4gICAgICAgICAgICAgIHNob3VsZFNldFByZXZQYXRoczogdHJ1ZSxcbiAgICAgICAgICAgICAgZHVyOiB3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmR5bmFtaWNBbmltYXRpb24uc3BlZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVQYXRocyhlbFBhdGgsIHtcbiAgICAgICAgICAgICAgc2l6ZTogdy5nbG9iYWxzLnJhZGlhbFNpemUsXG4gICAgICAgICAgICAgIGVuZEFuZ2xlOiBlbmRBbmdsZSxcbiAgICAgICAgICAgICAgc3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgdG90YWxJdGVtczogc2VjdG9yQW5nbGVBcnIubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgYW5pbUJlZ2luQXJyOiB0aGlzLmFuaW1CZWdpbkFycixcbiAgICAgICAgICAgICAgZHVyOiBkdXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gLy8gYW5pbWF0aW9uIGNvZGUgZW5kc1xuXG5cbiAgICAgICAgICBpZiAody5jb25maWcucGxvdE9wdGlvbnMucGllLmV4cGFuZE9uQ2xpY2spIHtcbiAgICAgICAgICAgIGVsUGF0aC5jbGljayh0aGlzLnBpZUNsaWNrZWQuYmluZCh0aGlzLCBpKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmRhdGFMYWJlbHMuZW5hYmxlZCkge1xuICAgICAgICAgICAgdmFyIHhQb3MgPSBsYWJlbFBvc2l0aW9uLng7XG4gICAgICAgICAgICB2YXIgeVBvcyA9IGxhYmVsUG9zaXRpb24ueTtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gMTAwICogKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSkgLyAzNjAgKyAnJSc7XG5cbiAgICAgICAgICAgIGlmIChhbmdsZSAhPT0gMCAmJiB3LmNvbmZpZy5wbG90T3B0aW9ucy5waWUuZGF0YUxhYmVscy5taW5BbmdsZVRvU2hvd0xhYmVsIDwgc2VjdG9yQW5nbGVBcnJbaV0pIHtcbiAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlciA9IHcuY29uZmlnLmRhdGFMYWJlbHMuZm9ybWF0dGVyO1xuXG4gICAgICAgICAgICAgIGlmIChmb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSBmb3JtYXR0ZXIody5nbG9iYWxzLnNlcmllc1BlcmNlbnRbaV1bMF0sIHtcbiAgICAgICAgICAgICAgICAgIHNlcmllc0luZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgdzogd1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGZvcmVDb2xvciA9IHcuZ2xvYmFscy5kYXRhTGFiZWxzLnN0eWxlLmNvbG9yc1tpXTtcbiAgICAgICAgICAgICAgdmFyIGVsUGllTGFiZWwgPSBncmFwaGljcy5kcmF3VGV4dCh7XG4gICAgICAgICAgICAgICAgeDogeFBvcyxcbiAgICAgICAgICAgICAgICB5OiB5UG9zLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IHcuY29uZmlnLmRhdGFMYWJlbHMuc3R5bGUuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdy5jb25maWcuZGF0YUxhYmVscy5zdHlsZS5mb250RmFtaWx5LFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHcuY29uZmlnLmRhdGFMYWJlbHMuc3R5bGUuZm9udFdlaWdodCxcbiAgICAgICAgICAgICAgICBmb3JlQ29sb3I6IGZvcmVDb2xvclxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAody5jb25maWcuZGF0YUxhYmVscy5kcm9wU2hhZG93LmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dFNoYWRvdyA9IHcuY29uZmlnLmRhdGFMYWJlbHMuZHJvcFNoYWRvdztcbiAgICAgICAgICAgICAgICBmaWx0ZXJzLmRyb3BTaGFkb3coZWxQaWVMYWJlbCwgdGV4dFNoYWRvdyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBlbFBpZUxhYmVsLm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1waWUtbGFiZWwnKTtcblxuICAgICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5hbmltYXRlICYmIHcuZ2xvYmFscy5yZXNpemVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGVsUGllTGFiZWwubm9kZS5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXBpZS1sYWJlbC1kZWxheScpO1xuICAgICAgICAgICAgICAgIGVsUGllTGFiZWwubm9kZS5zdHlsZS5hbmltYXRpb25EZWxheSA9IHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuc3BlZWQgLyA5NDAgKyAncyc7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLnNsaWNlTGFiZWxzLnB1c2goZWxQaWVMYWJlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZExpc3RlbmVycyhlbFBhdGgsIGRhdGFMYWJlbHMpIHtcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTsgLy8gYXBwZW5kIGZpbHRlcnMgb24gbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZVxuXG4gICAgICAgIGVsUGF0aC5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBncmFwaGljcy5wYXRoTW91c2VFbnRlci5iaW5kKHRoaXMsIGVsUGF0aCkpO1xuICAgICAgICBlbFBhdGgubm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZ3JhcGhpY3MucGF0aE1vdXNlTGVhdmUuYmluZCh0aGlzLCBlbFBhdGgpKTtcbiAgICAgICAgZWxQYXRoLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMucmV2ZXJ0RGF0YUxhYmVsc0lubmVyLmJpbmQodGhpcywgZWxQYXRoLm5vZGUsIGRhdGFMYWJlbHMpKTtcbiAgICAgICAgZWxQYXRoLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZ3JhcGhpY3MucGF0aE1vdXNlRG93bi5iaW5kKHRoaXMsIGVsUGF0aCkpO1xuXG4gICAgICAgIGlmICghdGhpcy5kb251dERhdGFMYWJlbHMudG90YWwuc2hvd0Fsd2F5cykge1xuICAgICAgICAgIGVsUGF0aC5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLnByaW50RGF0YUxhYmVsc0lubmVyLmJpbmQodGhpcywgZWxQYXRoLm5vZGUsIGRhdGFMYWJlbHMpKTtcbiAgICAgICAgICBlbFBhdGgubm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnByaW50RGF0YUxhYmVsc0lubmVyLmJpbmQodGhpcywgZWxQYXRoLm5vZGUsIGRhdGFMYWJlbHMpKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIGZvciBvdGhlciBjaXJjbGUgY2hhcnRzIHRvb1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImFuaW1hdGVQYXRoc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFuaW1hdGVQYXRocyhlbCwgb3B0cykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdmFyIGFuZ2xlID0gb3B0cy5lbmRBbmdsZSAtIG9wdHMuc3RhcnRBbmdsZTtcbiAgICAgICAgdmFyIHByZXZBbmdsZSA9IGFuZ2xlO1xuICAgICAgICB2YXIgZnJvbVN0YXJ0QW5nbGUgPSBvcHRzLnN0YXJ0QW5nbGU7XG4gICAgICAgIHZhciB0b1N0YXJ0QW5nbGUgPSBvcHRzLnN0YXJ0QW5nbGU7XG5cbiAgICAgICAgaWYgKG9wdHMucHJldlN0YXJ0QW5nbGUgIT09IHVuZGVmaW5lZCAmJiBvcHRzLnByZXZFbmRBbmdsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZnJvbVN0YXJ0QW5nbGUgPSBvcHRzLnByZXZFbmRBbmdsZTtcbiAgICAgICAgICBwcmV2QW5nbGUgPSBvcHRzLnByZXZFbmRBbmdsZSAtIG9wdHMucHJldlN0YXJ0QW5nbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0cy5pID09PSB3LmNvbmZpZy5zZXJpZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIC8vIHNvbWUgYWRqdXN0bWVudHMgZm9yIHRoZSBsYXN0IG92ZXJsYXBwaW5nIHBhdGhzXG4gICAgICAgICAgaWYgKGFuZ2xlICsgdG9TdGFydEFuZ2xlID4gdGhpcy5mdWxsQW5nbGUpIHtcbiAgICAgICAgICAgIG9wdHMuZW5kQW5nbGUgPSBvcHRzLmVuZEFuZ2xlIC0gKGFuZ2xlICsgdG9TdGFydEFuZ2xlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFuZ2xlICsgdG9TdGFydEFuZ2xlIDwgdGhpcy5mdWxsQW5nbGUpIHtcbiAgICAgICAgICAgIG9wdHMuZW5kQW5nbGUgPSBvcHRzLmVuZEFuZ2xlICsgKHRoaXMuZnVsbEFuZ2xlIC0gKGFuZ2xlICsgdG9TdGFydEFuZ2xlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuZ2xlID09PSB0aGlzLmZ1bGxBbmdsZSkgYW5nbGUgPSB0aGlzLmZ1bGxBbmdsZSAtIDAuMDE7XG4gICAgICAgIG1lLmFuaW1hdGVBcmMoZWwsIGZyb21TdGFydEFuZ2xlLCB0b1N0YXJ0QW5nbGUsIGFuZ2xlLCBwcmV2QW5nbGUsIG9wdHMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhbmltYXRlQXJjXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYW5pbWF0ZUFyYyhlbCwgZnJvbVN0YXJ0QW5nbGUsIHRvU3RhcnRBbmdsZSwgYW5nbGUsIHByZXZBbmdsZSwgb3B0cykge1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBzaXplID0gb3B0cy5zaXplO1xuICAgICAgICB2YXIgcGF0aDtcblxuICAgICAgICBpZiAoaXNOYU4oZnJvbVN0YXJ0QW5nbGUpIHx8IGlzTmFOKHByZXZBbmdsZSkpIHtcbiAgICAgICAgICBmcm9tU3RhcnRBbmdsZSA9IHRvU3RhcnRBbmdsZTtcbiAgICAgICAgICBwcmV2QW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICBvcHRzLmR1ciA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VyckFuZ2xlID0gYW5nbGU7XG4gICAgICAgIHZhciBzdGFydEFuZ2xlID0gdG9TdGFydEFuZ2xlO1xuICAgICAgICB2YXIgZnJvbUFuZ2xlID0gZnJvbVN0YXJ0QW5nbGUgLSB0b1N0YXJ0QW5nbGU7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5kYXRhQ2hhbmdlZCAmJiBvcHRzLnNob3VsZFNldFByZXZQYXRocykge1xuICAgICAgICAgIC8vIHRvIGF2b2lkIGZsaWNrZXIgd2hlbiB1cGRhdGluZywgc2V0IHByZXYgcGF0aCBmaXJzdCBhbmQgdGhlbiBhbmltYXRlIGZyb20gdGhlcmVcbiAgICAgICAgICBpZiAob3B0cy5wcmV2RW5kQW5nbGUpIHtcbiAgICAgICAgICAgIHBhdGggPSBtZS5nZXRQaWVQYXRoKHtcbiAgICAgICAgICAgICAgbWU6IG1lLFxuICAgICAgICAgICAgICBzdGFydEFuZ2xlOiBvcHRzLnByZXZTdGFydEFuZ2xlLFxuICAgICAgICAgICAgICBhbmdsZTogb3B0cy5wcmV2RW5kQW5nbGUgLSBvcHRzLnByZXZTdGFydEFuZ2xlLFxuICAgICAgICAgICAgICBzaXplOiBzaXplXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsLmF0dHIoe1xuICAgICAgICAgICAgICBkOiBwYXRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0cy5kdXIgIT09IDApIHtcbiAgICAgICAgICBlbC5hbmltYXRlKG9wdHMuZHVyLCB3Lmdsb2JhbHMuZWFzaW5nLCBvcHRzLmFuaW1CZWdpbkFycltvcHRzLmldKS5hZnRlckFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ3BpZScgfHwgdy5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2RvbnV0Jykge1xuICAgICAgICAgICAgICB0aGlzLmFuaW1hdGUody5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5keW5hbWljQW5pbWF0aW9uLnNwZWVkKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogbWUuc3Ryb2tlV2lkdGhcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRzLmkgPT09IHcuY29uZmlnLnNlcmllcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvbnMuYW5pbWF0aW9uQ29tcGxldGVkKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5kdXJpbmcoZnVuY3Rpb24gKHBvcykge1xuICAgICAgICAgICAgY3VyckFuZ2xlID0gZnJvbUFuZ2xlICsgKGFuZ2xlIC0gZnJvbUFuZ2xlKSAqIHBvcztcblxuICAgICAgICAgICAgaWYgKG9wdHMuYW5pbWF0ZVN0YXJ0aW5nUG9zKSB7XG4gICAgICAgICAgICAgIGN1cnJBbmdsZSA9IHByZXZBbmdsZSArIChhbmdsZSAtIHByZXZBbmdsZSkgKiBwb3M7XG4gICAgICAgICAgICAgIHN0YXJ0QW5nbGUgPSBmcm9tU3RhcnRBbmdsZSAtIHByZXZBbmdsZSArICh0b1N0YXJ0QW5nbGUgLSAoZnJvbVN0YXJ0QW5nbGUgLSBwcmV2QW5nbGUpKSAqIHBvcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGF0aCA9IG1lLmdldFBpZVBhdGgoe1xuICAgICAgICAgICAgICBtZTogbWUsXG4gICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgIGFuZ2xlOiBjdXJyQW5nbGUsXG4gICAgICAgICAgICAgIHNpemU6IHNpemVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWwubm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGE6cGF0aE9yaWcnLCBwYXRoKTtcbiAgICAgICAgICAgIGVsLmF0dHIoe1xuICAgICAgICAgICAgICBkOiBwYXRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRoID0gbWUuZ2V0UGllUGF0aCh7XG4gICAgICAgICAgICBtZTogbWUsXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgYW5nbGU6IGFuZ2xlLFxuICAgICAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFvcHRzLmlzVHJhY2spIHtcbiAgICAgICAgICAgIHcuZ2xvYmFscy5hbmltYXRpb25FbmRlZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWwubm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGE6cGF0aE9yaWcnLCBwYXRoKTtcbiAgICAgICAgICBlbC5hdHRyKHtcbiAgICAgICAgICAgIGQ6IHBhdGgsXG4gICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogbWUuc3Ryb2tlV2lkdGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwaWVDbGlja2VkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGllQ2xpY2tlZChpKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB2YXIgcGF0aDtcbiAgICAgICAgdmFyIHNpemUgPSBtZS53Lmdsb2JhbHMucmFkaWFsU2l6ZSArICh3LmNvbmZpZy5wbG90T3B0aW9ucy5waWUuZXhwYW5kT25DbGljayA/IDQgOiAwKTtcbiAgICAgICAgdmFyIGVsUGF0aCA9IHcuZ2xvYmFscy5kb20uUGFwZXIuc2VsZWN0KFwiLmFwZXhjaGFydHMtXCIuY29uY2F0KHcuY29uZmlnLmNoYXJ0LnR5cGUudG9Mb3dlckNhc2UoKSwgXCItc2xpY2UtXCIpLmNvbmNhdChpKSkubWVtYmVyc1swXTtcblxuICAgICAgICBpZiAoZWxQYXRoLmF0dHIoJ2RhdGE6cGllQ2xpY2tlZCcpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBlbFBhdGguYXR0cih7XG4gICAgICAgICAgICAnZGF0YTpwaWVDbGlja2VkJzogJ2ZhbHNlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMucmV2ZXJ0RGF0YUxhYmVsc0lubmVyKGVsUGF0aC5ub2RlLCB0aGlzLmRvbnV0RGF0YUxhYmVscyk7XG4gICAgICAgICAgdmFyIG9yaWdQYXRoID0gZWxQYXRoLmF0dHIoJ2RhdGE6cGF0aE9yaWcnKTtcbiAgICAgICAgICBlbFBhdGguYXR0cih7XG4gICAgICAgICAgICBkOiBvcmlnUGF0aFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZXNldCBhbGwgZWxlbXNcbiAgICAgICAgICB2YXIgYWxsRWxzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBleGNoYXJ0cy1waWUtYXJlYScpO1xuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYWxsRWxzLCBmdW5jdGlvbiAocGllU2xpY2UpIHtcbiAgICAgICAgICAgIHBpZVNsaWNlLnNldEF0dHJpYnV0ZSgnZGF0YTpwaWVDbGlja2VkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB2YXIgb3JpZ1BhdGggPSBwaWVTbGljZS5nZXRBdHRyaWJ1dGUoJ2RhdGE6cGF0aE9yaWcnKTtcbiAgICAgICAgICAgIHBpZVNsaWNlLnNldEF0dHJpYnV0ZSgnZCcsIG9yaWdQYXRoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbFBhdGguYXR0cignZGF0YTpwaWVDbGlja2VkJywgJ3RydWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFydEFuZ2xlID0gcGFyc2VJbnQoZWxQYXRoLmF0dHIoJ2RhdGE6c3RhcnRBbmdsZScpLCAxMCk7XG4gICAgICAgIHZhciBhbmdsZSA9IHBhcnNlSW50KGVsUGF0aC5hdHRyKCdkYXRhOmFuZ2xlJyksIDEwKTtcbiAgICAgICAgcGF0aCA9IG1lLmdldFBpZVBhdGgoe1xuICAgICAgICAgIG1lOiBtZSxcbiAgICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICAgIGFuZ2xlOiBhbmdsZSxcbiAgICAgICAgICBzaXplOiBzaXplXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYW5nbGUgPT09IDM2MCkgcmV0dXJuO1xuICAgICAgICBlbFBhdGgucGxvdChwYXRoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0Q2hhbmdlZFBhdGhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGFuZ2VkUGF0aChwcmV2U3RhcnRBbmdsZSwgcHJldkVuZEFuZ2xlKSB7XG4gICAgICAgIHZhciBwYXRoID0gJyc7XG5cbiAgICAgICAgaWYgKHRoaXMuZHluYW1pY0FuaW0gJiYgdGhpcy53Lmdsb2JhbHMuZGF0YUNoYW5nZWQpIHtcbiAgICAgICAgICBwYXRoID0gdGhpcy5nZXRQaWVQYXRoKHtcbiAgICAgICAgICAgIG1lOiB0aGlzLFxuICAgICAgICAgICAgc3RhcnRBbmdsZTogcHJldlN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBhbmdsZTogcHJldkVuZEFuZ2xlIC0gcHJldlN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBzaXplOiB0aGlzLnNpemVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRQaWVQYXRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGllUGF0aChfcmVmKSB7XG4gICAgICAgIHZhciBtZSA9IF9yZWYubWUsXG4gICAgICAgICAgICBzdGFydEFuZ2xlID0gX3JlZi5zdGFydEFuZ2xlLFxuICAgICAgICAgICAgYW5nbGUgPSBfcmVmLmFuZ2xlLFxuICAgICAgICAgICAgc2l6ZSA9IF9yZWYuc2l6ZTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBwYXRoO1xuICAgICAgICB2YXIgc3RhcnREZWcgPSBzdGFydEFuZ2xlO1xuICAgICAgICB2YXIgc3RhcnRSYWRpYW5zID0gTWF0aC5QSSAqIChzdGFydERlZyAtIDkwKSAvIDE4MDtcbiAgICAgICAgdmFyIGVuZERlZyA9IGFuZ2xlICsgc3RhcnRBbmdsZTtcbiAgICAgICAgaWYgKE1hdGguY2VpbChlbmREZWcpID49IDM2MCkgZW5kRGVnID0gMzU5Ljk5O1xuICAgICAgICB2YXIgZW5kUmFkaWFucyA9IE1hdGguUEkgKiAoZW5kRGVnIC0gOTApIC8gMTgwO1xuICAgICAgICB2YXIgeDEgPSBtZS5jZW50ZXJYICsgc2l6ZSAqIE1hdGguY29zKHN0YXJ0UmFkaWFucyk7XG4gICAgICAgIHZhciB5MSA9IG1lLmNlbnRlclkgKyBzaXplICogTWF0aC5zaW4oc3RhcnRSYWRpYW5zKTtcbiAgICAgICAgdmFyIHgyID0gbWUuY2VudGVyWCArIHNpemUgKiBNYXRoLmNvcyhlbmRSYWRpYW5zKTtcbiAgICAgICAgdmFyIHkyID0gbWUuY2VudGVyWSArIHNpemUgKiBNYXRoLnNpbihlbmRSYWRpYW5zKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5uZXIgPSBVdGlscy5wb2xhclRvQ2FydGVzaWFuKG1lLmNlbnRlclgsIG1lLmNlbnRlclksIG1lLmRvbnV0U2l6ZSwgZW5kRGVnKTtcbiAgICAgICAgdmFyIGVuZElubmVyID0gVXRpbHMucG9sYXJUb0NhcnRlc2lhbihtZS5jZW50ZXJYLCBtZS5jZW50ZXJZLCBtZS5kb251dFNpemUsIHN0YXJ0RGVnKTtcbiAgICAgICAgdmFyIGxhcmdlQXJjID0gYW5nbGUgPiAxODAgPyAxIDogMDtcbiAgICAgICAgdmFyIHBhdGhCZWdpbm5pbmcgPSBbJ00nLCB4MSwgeTEsICdBJywgc2l6ZSwgc2l6ZSwgMCwgbGFyZ2VBcmMsIDEsIHgyLCB5Ml07XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdkb251dCcpIHtcbiAgICAgICAgICBwYXRoID0gW10uY29uY2F0KHBhdGhCZWdpbm5pbmcsIFsnTCcsIHN0YXJ0SW5uZXIueCwgc3RhcnRJbm5lci55LCAnQScsIG1lLmRvbnV0U2l6ZSwgbWUuZG9udXRTaXplLCAwLCBsYXJnZUFyYywgMCwgZW5kSW5uZXIueCwgZW5kSW5uZXIueSwgJ0wnLCB4MSwgeTEsICd6J10pLmpvaW4oJyAnKTtcbiAgICAgICAgfSBlbHNlIGlmICh3LmNvbmZpZy5jaGFydC50eXBlID09PSAncGllJykge1xuICAgICAgICAgIHBhdGggPSBbXS5jb25jYXQocGF0aEJlZ2lubmluZywgWydMJywgbWUuY2VudGVyWCwgbWUuY2VudGVyWSwgJ0wnLCB4MSwgeTFdKS5qb2luKCcgJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aCA9IFtdLmNvbmNhdChwYXRoQmVnaW5uaW5nKS5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVySW5uZXJEYXRhTGFiZWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5uZXJEYXRhTGFiZWxzKGRhdGFMYWJlbHNDb25maWcsIG9wdHMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBnID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1kYXRhbGFiZWxzLWdyb3VwJyxcbiAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiLmNvbmNhdChvcHRzLnRyYW5zbGF0ZVggPyBvcHRzLnRyYW5zbGF0ZVggOiAwLCBcIiwgXCIpLmNvbmNhdChvcHRzLnRyYW5zbGF0ZVkgPyBvcHRzLnRyYW5zbGF0ZVkgOiAwLCBcIikgc2NhbGUoXCIpLmNvbmNhdCh3LmNvbmZpZy5wbG90T3B0aW9ucy5waWUuY3VzdG9tU2NhbGUsIFwiKVwiKVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNob3dUb3RhbCA9IGRhdGFMYWJlbHNDb25maWcudG90YWwuc2hvdztcbiAgICAgICAgZy5ub2RlLnN0eWxlLm9wYWNpdHkgPSBvcHRzLm9wYWNpdHk7XG4gICAgICAgIHZhciB4ID0gb3B0cy5jZW50ZXJYO1xuICAgICAgICB2YXIgeSA9IG9wdHMuY2VudGVyWTtcbiAgICAgICAgdmFyIGxhYmVsQ29sb3IsIHZhbHVlQ29sb3I7XG5cbiAgICAgICAgaWYgKGRhdGFMYWJlbHNDb25maWcubmFtZS5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGFiZWxDb2xvciA9IHcuZ2xvYmFscy5jb2xvcnNbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFiZWxDb2xvciA9IGRhdGFMYWJlbHNDb25maWcubmFtZS5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsYWJlbEZvbnRTaXplID0gZGF0YUxhYmVsc0NvbmZpZy5uYW1lLmZvbnRTaXplO1xuICAgICAgICB2YXIgbGFiZWxGb250RmFtaWx5ID0gZGF0YUxhYmVsc0NvbmZpZy5uYW1lLmZvbnRGYW1pbHk7XG4gICAgICAgIHZhciBsYWJlbEZvbnRXZWlnaHQgPSBkYXRhTGFiZWxzQ29uZmlnLnZhbHVlLmZvbnRXZWlnaHQ7XG5cbiAgICAgICAgaWYgKGRhdGFMYWJlbHNDb25maWcudmFsdWUuY29sb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhbHVlQ29sb3IgPSB3LmNvbmZpZy5jaGFydC5mb3JlQ29sb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVDb2xvciA9IGRhdGFMYWJlbHNDb25maWcudmFsdWUuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGJGb3JtYXR0ZXIgPSBkYXRhTGFiZWxzQ29uZmlnLnZhbHVlLmZvcm1hdHRlcjtcbiAgICAgICAgdmFyIHZhbCA9ICcnO1xuICAgICAgICB2YXIgbmFtZSA9ICcnO1xuXG4gICAgICAgIGlmIChzaG93VG90YWwpIHtcbiAgICAgICAgICBsYWJlbENvbG9yID0gZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5jb2xvcjtcbiAgICAgICAgICBsYWJlbEZvbnRTaXplID0gZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5mb250U2l6ZTtcbiAgICAgICAgICBsYWJlbEZvbnRGYW1pbHkgPSBkYXRhTGFiZWxzQ29uZmlnLnRvdGFsLmZvbnRGYW1pbHk7XG4gICAgICAgICAgbGFiZWxGb250V2VpZ2h0ID0gZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5mb250V2VpZ2h0O1xuICAgICAgICAgIG5hbWUgPSBkYXRhTGFiZWxzQ29uZmlnLnRvdGFsLmxhYmVsO1xuICAgICAgICAgIHZhbCA9IGRhdGFMYWJlbHNDb25maWcudG90YWwuZm9ybWF0dGVyKHcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdmFsID0gbGJGb3JtYXR0ZXIody5nbG9iYWxzLnNlcmllc1swXSwgdyk7XG4gICAgICAgICAgICBuYW1lID0gdy5nbG9iYWxzLnNlcmllc05hbWVzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbmFtZSA9IGRhdGFMYWJlbHNDb25maWcubmFtZS5mb3JtYXR0ZXIobmFtZSwgZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5zaG93LCB3KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhTGFiZWxzQ29uZmlnLm5hbWUuc2hvdykge1xuICAgICAgICAgIHZhciBlbExhYmVsID0gZ3JhcGhpY3MuZHJhd1RleHQoe1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHkgKyBwYXJzZUZsb2F0KGRhdGFMYWJlbHNDb25maWcubmFtZS5vZmZzZXRZKSxcbiAgICAgICAgICAgIHRleHQ6IG5hbWUsXG4gICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGZvcmVDb2xvcjogbGFiZWxDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiBsYWJlbEZvbnRTaXplLFxuICAgICAgICAgICAgZm9udFdlaWdodDogbGFiZWxGb250V2VpZ2h0LFxuICAgICAgICAgICAgZm9udEZhbWlseTogbGFiZWxGb250RmFtaWx5XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWxMYWJlbC5ub2RlLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtZGF0YWxhYmVsLWxhYmVsJyk7XG4gICAgICAgICAgZy5hZGQoZWxMYWJlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YUxhYmVsc0NvbmZpZy52YWx1ZS5zaG93KSB7XG4gICAgICAgICAgdmFyIHZhbE9mZnNldCA9IGRhdGFMYWJlbHNDb25maWcubmFtZS5zaG93ID8gcGFyc2VGbG9hdChkYXRhTGFiZWxzQ29uZmlnLnZhbHVlLm9mZnNldFkpICsgMTYgOiBkYXRhTGFiZWxzQ29uZmlnLnZhbHVlLm9mZnNldFk7XG4gICAgICAgICAgdmFyIGVsVmFsdWUgPSBncmFwaGljcy5kcmF3VGV4dCh7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeSArIHZhbE9mZnNldCxcbiAgICAgICAgICAgIHRleHQ6IHZhbCxcbiAgICAgICAgICAgIHRleHRBbmNob3I6ICdtaWRkbGUnLFxuICAgICAgICAgICAgZm9yZUNvbG9yOiB2YWx1ZUNvbG9yLFxuICAgICAgICAgICAgZm9udFdlaWdodDogZGF0YUxhYmVsc0NvbmZpZy52YWx1ZS5mb250V2VpZ2h0LFxuICAgICAgICAgICAgZm9udFNpemU6IGRhdGFMYWJlbHNDb25maWcudmFsdWUuZm9udFNpemUsXG4gICAgICAgICAgICBmb250RmFtaWx5OiBkYXRhTGFiZWxzQ29uZmlnLnZhbHVlLmZvbnRGYW1pbHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbFZhbHVlLm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1kYXRhbGFiZWwtdmFsdWUnKTtcbiAgICAgICAgICBnLmFkZChlbFZhbHVlKTtcbiAgICAgICAgfSAvLyBmb3IgYSBtdWx0aS1zZXJpZXMgY2lyY2xlIGNoYXJ0LCB3ZSBuZWVkIHRvIHNob3cgdG90YWwgdmFsdWUgaW5zdGVhZCBvZiBmaXJzdCBzZXJpZXMgbGFiZWxzXG5cblxuICAgICAgICByZXR1cm4gZztcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHNlcmllc1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbCAtIFRoZSB2YWx1ZSBvZiB0aGF0IHNlcmllc1xuICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVsIC0gT3B0aW9uYWwgZWwgKGluZGljYXRlcyB3aGljaCBzZXJpZXMgd2FzIGhvdmVyZWQvY2xpY2tlZCkuIElmIHRoaXMgcGFyYW0gaXMgbm90IHByZXNlbnQsIG1lYW5zIHdlIG5lZWQgdG8gc2hvdyB0b3RhbFxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicHJpbnRJbm5lckxhYmVsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByaW50SW5uZXJMYWJlbHMobGFiZWxzQ29uZmlnLCBuYW1lLCB2YWwsIGVsKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgbGFiZWxDb2xvcjtcblxuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBpZiAobGFiZWxzQ29uZmlnLm5hbWUuY29sb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGFiZWxDb2xvciA9IHcuZ2xvYmFscy5jb2xvcnNbcGFyc2VJbnQoZWwucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ3JlbCcpLCAxMCkgLSAxXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFiZWxDb2xvciA9IGxhYmVsc0NvbmZpZy5uYW1lLmNvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAody5nbG9iYWxzLnNlcmllcy5sZW5ndGggPiAxICYmIGxhYmVsc0NvbmZpZy50b3RhbC5zaG93KSB7XG4gICAgICAgICAgICBsYWJlbENvbG9yID0gbGFiZWxzQ29uZmlnLnRvdGFsLmNvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbExhYmVsID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtZGF0YWxhYmVsLWxhYmVsJyk7XG4gICAgICAgIHZhciBlbFZhbHVlID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtZGF0YWxhYmVsLXZhbHVlJyk7XG4gICAgICAgIHZhciBsYkZvcm1hdHRlciA9IGxhYmVsc0NvbmZpZy52YWx1ZS5mb3JtYXR0ZXI7XG4gICAgICAgIHZhbCA9IGxiRm9ybWF0dGVyKHZhbCwgdyk7IC8vIHdlIG5lZWQgdG8gc2hvdyBUb3RhbCBWYWwgLSBzbyBnZXQgdGhlIGZvcm1hdHRlciBvZiBpdFxuXG4gICAgICAgIGlmICghZWwgJiYgdHlwZW9mIGxhYmVsc0NvbmZpZy50b3RhbC5mb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YWwgPSBsYWJlbHNDb25maWcudG90YWwuZm9ybWF0dGVyKHcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzVG90YWwgPSBuYW1lID09PSBsYWJlbHNDb25maWcudG90YWwubGFiZWw7XG4gICAgICAgIG5hbWUgPSBsYWJlbHNDb25maWcubmFtZS5mb3JtYXR0ZXIobmFtZSwgaXNUb3RhbCwgdyk7XG5cbiAgICAgICAgaWYgKGVsTGFiZWwgIT09IG51bGwpIHtcbiAgICAgICAgICBlbExhYmVsLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbFZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgZWxWYWx1ZS50ZXh0Q29udGVudCA9IHZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbExhYmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgZWxMYWJlbC5zdHlsZS5maWxsID0gbGFiZWxDb2xvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwcmludERhdGFMYWJlbHNJbm5lclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByaW50RGF0YUxhYmVsc0lubmVyKGVsLCBkYXRhTGFiZWxzQ29uZmlnKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdmFsID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhOnZhbHVlJyk7XG4gICAgICAgIHZhciBuYW1lID0gdy5nbG9iYWxzLnNlcmllc05hbWVzW3BhcnNlSW50KGVsLnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApIC0gMV07XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHRoaXMucHJpbnRJbm5lckxhYmVscyhkYXRhTGFiZWxzQ29uZmlnLCBuYW1lLCB2YWwsIGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhTGFiZWxzR3JvdXAgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy1kYXRhbGFiZWxzLWdyb3VwJyk7XG5cbiAgICAgICAgaWYgKGRhdGFMYWJlbHNHcm91cCAhPT0gbnVsbCkge1xuICAgICAgICAgIGRhdGFMYWJlbHNHcm91cC5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZXZlcnREYXRhTGFiZWxzSW5uZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXZlcnREYXRhTGFiZWxzSW5uZXIoZWxlbSwgZGF0YUxhYmVsc0NvbmZpZywgZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGRhdGFMYWJlbHNHcm91cCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLWRhdGFsYWJlbHMtZ3JvdXAnKTtcbiAgICAgICAgdmFyIHNsaWNlT3V0ID0gZmFsc2U7XG4gICAgICAgIHZhciBzbGljZXMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYXBleGNoYXJ0cy1waWUtYXJlYVwiKTtcblxuICAgICAgICB2YXIgc2VsZWN0U2xpY2UgPSBmdW5jdGlvbiBzZWxlY3RTbGljZShfcmVmMikge1xuICAgICAgICAgIHZhciBtYWtlU2xpY2VPdXQgPSBfcmVmMi5tYWtlU2xpY2VPdXQsXG4gICAgICAgICAgICAgIHByaW50TGFiZWwgPSBfcmVmMi5wcmludExhYmVsO1xuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc2xpY2VzLCBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgaWYgKHMuZ2V0QXR0cmlidXRlKCdkYXRhOnBpZUNsaWNrZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgIGlmIChtYWtlU2xpY2VPdXQpIHtcbiAgICAgICAgICAgICAgICBzbGljZU91dCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocHJpbnRMYWJlbCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaW50RGF0YUxhYmVsc0lubmVyKHMsIGRhdGFMYWJlbHNDb25maWcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZWN0U2xpY2Uoe1xuICAgICAgICAgIG1ha2VTbGljZU91dDogdHJ1ZSxcbiAgICAgICAgICBwcmludExhYmVsOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5zaG93ICYmIHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGlmIChzbGljZU91dCAmJiAhZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5zaG93QWx3YXlzKSB7XG4gICAgICAgICAgICBzZWxlY3RTbGljZSh7XG4gICAgICAgICAgICAgIG1ha2VTbGljZU91dDogZmFsc2UsXG4gICAgICAgICAgICAgIHByaW50TGFiZWw6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByaW50SW5uZXJMYWJlbHMoZGF0YUxhYmVsc0NvbmZpZywgZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5sYWJlbCwgZGF0YUxhYmVsc0NvbmZpZy50b3RhbC5mb3JtYXR0ZXIodykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3RTbGljZSh7XG4gICAgICAgICAgICBtYWtlU2xpY2VPdXQ6IGZhbHNlLFxuICAgICAgICAgICAgcHJpbnRMYWJlbDogdHJ1ZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFzbGljZU91dCkge1xuICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5zZWxlY3RlZERhdGFQb2ludHMubGVuZ3RoICYmIHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBpZiAody5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50c1swXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdy5nbG9iYWxzLnNlbGVjdGVkRGF0YVBvaW50c1swXTtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtXCIuY29uY2F0KHcuY29uZmlnLmNoYXJ0LnR5cGUudG9Mb3dlckNhc2UoKSwgXCItc2xpY2UtXCIpLmNvbmNhdChpbmRleCkpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpbnREYXRhTGFiZWxzSW5uZXIoZWwsIGRhdGFMYWJlbHNDb25maWcpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFMYWJlbHNHcm91cCAmJiB3Lmdsb2JhbHMuc2VsZWN0ZWREYXRhUG9pbnRzLmxlbmd0aCAmJiB3Lmdsb2JhbHMuc2VsZWN0ZWREYXRhUG9pbnRzWzBdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRhdGFMYWJlbHNHcm91cC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGFMYWJlbHNHcm91cCAmJiB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzR3JvdXAuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUGllO1xuICB9KCk7XG5cbiAgdmFyIEhlbHBlcnMkMiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGVscGVycyhsZ0N0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlbHBlcnMpO1xuXG4gICAgICB0aGlzLncgPSBsZ0N0eC53O1xuICAgICAgdGhpcy5sZ0N0eCA9IGxnQ3R4O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhIZWxwZXJzLCBbe1xuICAgICAga2V5OiBcImdldExlZ2VuZFN0eWxlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExlZ2VuZFN0eWxlcygpIHtcbiAgICAgICAgdmFyIHN0eWxlc2hlZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBzdHlsZXNoZWV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgICAgICB2YXIgdGV4dCA9IFwiXCI7XG4gICAgICAgIHZhciBydWxlcyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO1xuICAgICAgICBzdHlsZXNoZWV0LmFwcGVuZENoaWxkKHJ1bGVzKTtcbiAgICAgICAgcmV0dXJuIHN0eWxlc2hlZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldExlZ2VuZEJCb3hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMZWdlbmRCQm94KCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGN1cnJMZWdlbmRzV3JhcCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLWxlZ2VuZCcpO1xuICAgICAgICB2YXIgY3VyckxlZ2VuZHNXcmFwUmVjdCA9IGN1cnJMZWdlbmRzV3JhcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGN1cnJMZWdlbmRzV3JhcFdpZHRoID0gY3VyckxlZ2VuZHNXcmFwUmVjdC53aWR0aDtcbiAgICAgICAgdmFyIGN1cnJMZWdlbmRzV3JhcEhlaWdodCA9IGN1cnJMZWdlbmRzV3JhcFJlY3QuaGVpZ2h0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNsd2g6IGN1cnJMZWdlbmRzV3JhcEhlaWdodCxcbiAgICAgICAgICBjbHd3OiBjdXJyTGVnZW5kc1dyYXBXaWR0aFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhcHBlbmRUb0ZvcmVpZ25PYmplY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUb0ZvcmVpZ25PYmplY3QoKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuICAgICAgICBnbC5kb20uZWxMZWdlbmRGb3JlaWduID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGdsLlNWR05TLCAnZm9yZWlnbk9iamVjdCcpO1xuICAgICAgICB2YXIgZWxGb3JlaWduID0gZ2wuZG9tLmVsTGVnZW5kRm9yZWlnbjtcbiAgICAgICAgZWxGb3JlaWduLnNldEF0dHJpYnV0ZSgneCcsIDApO1xuICAgICAgICBlbEZvcmVpZ24uc2V0QXR0cmlidXRlKCd5JywgMCk7XG4gICAgICAgIGVsRm9yZWlnbi5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgZ2wuc3ZnV2lkdGgpO1xuICAgICAgICBlbEZvcmVpZ24uc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBnbC5zdmdIZWlnaHQpO1xuICAgICAgICBnbC5kb20uZWxMZWdlbmRXcmFwLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcpO1xuICAgICAgICBlbEZvcmVpZ24uYXBwZW5kQ2hpbGQoZ2wuZG9tLmVsTGVnZW5kV3JhcCk7XG4gICAgICAgIGVsRm9yZWlnbi5hcHBlbmRDaGlsZCh0aGlzLmdldExlZ2VuZFN0eWxlcygpKTtcbiAgICAgICAgZ2wuZG9tLlBhcGVyLm5vZGUuaW5zZXJ0QmVmb3JlKGVsRm9yZWlnbiwgZ2wuZG9tLmVsR3JhcGhpY2FsLm5vZGUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b2dnbGVEYXRhU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlRGF0YVNlcmllcyhzZXJpZXNDbnQsIGlzSGlkZGVuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5heGlzQ2hhcnRzIHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdyYWRpYWxCYXInKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLnJlc2l6ZWQgPSB0cnVlOyAvLyB3ZSBkb24ndCB3YW50IGluaXRpYWwgYW5pbWF0aW9ucyBhZ2FpblxuXG4gICAgICAgICAgdmFyIHNlcmllc0VsID0gbnVsbDtcbiAgICAgICAgICB2YXIgcmVhbEluZGV4ID0gbnVsbDsgLy8geWVzLCBtYWtlIGl0IG51bGwuIDEgc2VyaWVzIHdpbGwgcmlzZSBhdCBhIHRpbWVcblxuICAgICAgICAgIHcuZ2xvYmFscy5yaXNpbmdTZXJpZXMgPSBbXTtcblxuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuYXhpc0NoYXJ0cykge1xuICAgICAgICAgICAgc2VyaWVzRWwgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtc2VyaWVzW2RhdGFcXFxcOnJlYWxJbmRleD0nXCIuY29uY2F0KHNlcmllc0NudCwgXCInXVwiKSk7XG4gICAgICAgICAgICByZWFsSW5kZXggPSBwYXJzZUludChzZXJpZXNFbC5nZXRBdHRyaWJ1dGUoJ2RhdGE6cmVhbEluZGV4JyksIDEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VyaWVzRWwgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtc2VyaWVzW3JlbD0nXCIuY29uY2F0KHNlcmllc0NudCArIDEsIFwiJ11cIikpO1xuICAgICAgICAgICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc2VyaWVzRWwuZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApIC0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgICAgIHZhciBzZXJpZXNUb01ha2VWaXNpYmxlID0gW3tcbiAgICAgICAgICAgICAgY3M6IHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXMsXG4gICAgICAgICAgICAgIGNzaTogdy5nbG9iYWxzLmNvbGxhcHNlZFNlcmllc0luZGljZXNcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgY3M6IHcuZ2xvYmFscy5hbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXMsXG4gICAgICAgICAgICAgIGNzaTogdy5nbG9iYWxzLmFuY2lsbGFyeUNvbGxhcHNlZFNlcmllc0luZGljZXNcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgc2VyaWVzVG9NYWtlVmlzaWJsZS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJpc2VDb2xsYXBzZWRTZXJpZXMoci5jcywgci5jc2ksIHJlYWxJbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRlU2VyaWVzKHtcbiAgICAgICAgICAgICAgc2VyaWVzRWw6IHNlcmllc0VsLFxuICAgICAgICAgICAgICByZWFsSW5kZXg6IHJlYWxJbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGZvciBub24tYXhpcyBjaGFydHMgaS5lIHBpZSAvIGRvbnV0c1xuICAgICAgICAgIHZhciBfc2VyaWVzRWwgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLnNlbGVjdChcIiAuYXBleGNoYXJ0cy1zZXJpZXNbcmVsPSdcIi5jb25jYXQoc2VyaWVzQ250ICsgMSwgXCInXSBwYXRoXCIpKTtcblxuICAgICAgICAgIHZhciB0eXBlID0gdy5jb25maWcuY2hhcnQudHlwZTtcblxuICAgICAgICAgIGlmICh0eXBlID09PSAncGllJyB8fCB0eXBlID09PSAnZG9udXQnKSB7XG4gICAgICAgICAgICB2YXIgZGF0YUxhYmVscyA9IHcuY29uZmlnLnBsb3RPcHRpb25zLnBpZS5kb251dC5sYWJlbHM7XG4gICAgICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5sZ0N0eC5jdHgpO1xuICAgICAgICAgICAgdmFyIHBpZSA9IG5ldyBQaWUodGhpcy5sZ0N0eC5jdHgpO1xuICAgICAgICAgICAgZ3JhcGhpY3MucGF0aE1vdXNlRG93bihfc2VyaWVzRWwubWVtYmVyc1swXSwgbnVsbCk7XG4gICAgICAgICAgICBwaWUucHJpbnREYXRhTGFiZWxzSW5uZXIoX3Nlcmllc0VsLm1lbWJlcnNbMF0ubm9kZSwgZGF0YUxhYmVscyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3Nlcmllc0VsLmZpcmUoJ2NsaWNrJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGlkZVNlcmllc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVTZXJpZXMoX3JlZikge1xuICAgICAgICB2YXIgc2VyaWVzRWwgPSBfcmVmLnNlcmllc0VsLFxuICAgICAgICAgICAgcmVhbEluZGV4ID0gX3JlZi5yZWFsSW5kZXg7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuYXhpc0NoYXJ0cykge1xuICAgICAgICAgIHZhciBzaG91bGROb3RIaWRlWUF4aXMgPSBmYWxzZTtcblxuICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdICYmIHcuY29uZmlnLnlheGlzW3JlYWxJbmRleF0uc2hvdyAmJiB3LmNvbmZpZy55YXhpc1tyZWFsSW5kZXhdLnNob3dBbHdheXMpIHtcbiAgICAgICAgICAgIHNob3VsZE5vdEhpZGVZQXhpcyA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzSW5kaWNlcy5pbmRleE9mKHJlYWxJbmRleCkgPCAwKSB7XG4gICAgICAgICAgICAgIHcuZ2xvYmFscy5hbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHJlYWxJbmRleCxcbiAgICAgICAgICAgICAgICBkYXRhOiB3LmNvbmZpZy5zZXJpZXNbcmVhbEluZGV4XS5kYXRhLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgdHlwZTogc2VyaWVzRWwucGFyZW50Tm9kZS5jbGFzc05hbWUuYmFzZVZhbC5zcGxpdCgnLScpWzFdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB3Lmdsb2JhbHMuYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzSW5kaWNlcy5wdXNoKHJlYWxJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzaG91bGROb3RIaWRlWUF4aXMpIHtcbiAgICAgICAgICAgIHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXMucHVzaCh7XG4gICAgICAgICAgICAgIGluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgICAgIGRhdGE6IHcuY29uZmlnLnNlcmllc1tyZWFsSW5kZXhdLmRhdGEuc2xpY2UoKSxcbiAgICAgICAgICAgICAgdHlwZTogc2VyaWVzRWwucGFyZW50Tm9kZS5jbGFzc05hbWUuYmFzZVZhbC5zcGxpdCgnLScpWzFdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXNJbmRpY2VzLnB1c2gocmVhbEluZGV4KTtcbiAgICAgICAgICAgIHZhciByZW1vdmVJbmRleE9mUmlzaW5nID0gdy5nbG9iYWxzLnJpc2luZ1Nlcmllcy5pbmRleE9mKHJlYWxJbmRleCk7XG4gICAgICAgICAgICB3Lmdsb2JhbHMucmlzaW5nU2VyaWVzLnNwbGljZShyZW1vdmVJbmRleE9mUmlzaW5nLCAxKTtcbiAgICAgICAgICB9IC8vIFRPRE86IEFWT0lEIG11dGF0aW5nIHRoZSB1c2VyJ3MgY29uZmlnIG9iamVjdCBiZWxvd1xuXG5cbiAgICAgICAgICB3LmNvbmZpZy5zZXJpZXNbcmVhbEluZGV4XS5kYXRhID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmNvbGxhcHNlZFNlcmllcy5wdXNoKHtcbiAgICAgICAgICAgIGluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgICBkYXRhOiB3LmNvbmZpZy5zZXJpZXNbcmVhbEluZGV4XVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXNJbmRpY2VzLnB1c2gocmVhbEluZGV4KTtcbiAgICAgICAgICB3LmNvbmZpZy5zZXJpZXNbcmVhbEluZGV4XSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VyaWVzQ2hpbGRyZW4gPSBzZXJpZXNFbC5jaGlsZE5vZGVzO1xuXG4gICAgICAgIGZvciAodmFyIHNjID0gMDsgc2MgPCBzZXJpZXNDaGlsZHJlbi5sZW5ndGg7IHNjKyspIHtcbiAgICAgICAgICBpZiAoc2VyaWVzQ2hpbGRyZW5bc2NdLmNsYXNzTGlzdC5jb250YWlucygnYXBleGNoYXJ0cy1zZXJpZXMtbWFya2Vycy13cmFwJykpIHtcbiAgICAgICAgICAgIGlmIChzZXJpZXNDaGlsZHJlbltzY10uY2xhc3NMaXN0LmNvbnRhaW5zKCdhcGV4Y2hhcnRzLWhpZGUnKSkge1xuICAgICAgICAgICAgICBzZXJpZXNDaGlsZHJlbltzY10uY2xhc3NMaXN0LnJlbW92ZSgnYXBleGNoYXJ0cy1oaWRlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXJpZXNDaGlsZHJlbltzY10uY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1oaWRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdy5nbG9iYWxzLmFsbFNlcmllc0NvbGxhcHNlZCA9IHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXMubGVuZ3RoID09PSB3LmNvbmZpZy5zZXJpZXMubGVuZ3RoO1xuXG4gICAgICAgIHRoaXMubGdDdHguY3R4LnVwZGF0ZUhlbHBlcnMuX3VwZGF0ZVNlcmllcyh3LmNvbmZpZy5zZXJpZXMsIHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5lbmFibGVkKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmlzZUNvbGxhcHNlZFNlcmllc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJpc2VDb2xsYXBzZWRTZXJpZXMoc2VyaWVzLCBzZXJpZXNJbmRpY2VzLCByZWFsSW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBzZXJpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGlmIChzZXJpZXNbY10uaW5kZXggPT09IHJlYWxJbmRleCkge1xuICAgICAgICAgICAgICBpZiAody5nbG9iYWxzLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICAgICAgICB3LmNvbmZpZy5zZXJpZXNbcmVhbEluZGV4XS5kYXRhID0gc2VyaWVzW2NdLmRhdGEuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICBzZXJpZXMuc3BsaWNlKGMsIDEpO1xuICAgICAgICAgICAgICAgIHNlcmllc0luZGljZXMuc3BsaWNlKGMsIDEpO1xuICAgICAgICAgICAgICAgIHcuZ2xvYmFscy5yaXNpbmdTZXJpZXMucHVzaChyZWFsSW5kZXgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHcuY29uZmlnLnNlcmllc1tyZWFsSW5kZXhdID0gc2VyaWVzW2NdLmRhdGE7XG4gICAgICAgICAgICAgICAgc2VyaWVzLnNwbGljZShjLCAxKTtcbiAgICAgICAgICAgICAgICBzZXJpZXNJbmRpY2VzLnNwbGljZShjLCAxKTtcbiAgICAgICAgICAgICAgICB3Lmdsb2JhbHMucmlzaW5nU2VyaWVzLnB1c2gocmVhbEluZGV4KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMubGdDdHguY3R4LnVwZGF0ZUhlbHBlcnMuX3VwZGF0ZVNlcmllcyh3LmNvbmZpZy5zZXJpZXMsIHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5lbmFibGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSGVscGVycztcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIExlZ2VuZCBDbGFzcyB0byBkcmF3IGxlZ2VuZC5cbiAgICpcbiAgICogQG1vZHVsZSBMZWdlbmRcbiAgICoqL1xuXG4gIHZhciBMZWdlbmQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlZ2VuZChjdHgsIG9wdHMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMZWdlbmQpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdGhpcy5vbkxlZ2VuZENsaWNrID0gdGhpcy5vbkxlZ2VuZENsaWNrLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLm9uTGVnZW5kSG92ZXJlZCA9IHRoaXMub25MZWdlbmRIb3ZlcmVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmlzQmFyc0Rpc3RyaWJ1dGVkID0gdGhpcy53LmNvbmZpZy5jaGFydC50eXBlID09PSAnYmFyJyAmJiB0aGlzLncuY29uZmlnLnBsb3RPcHRpb25zLmJhci5kaXN0cmlidXRlZCAmJiB0aGlzLncuY29uZmlnLnNlcmllcy5sZW5ndGggPT09IDE7XG4gICAgICB0aGlzLmxlZ2VuZEhlbHBlcnMgPSBuZXcgSGVscGVycyQyKHRoaXMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMZWdlbmQsIFt7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ2wgPSB3Lmdsb2JhbHM7XG4gICAgICAgIHZhciBjbmYgPSB3LmNvbmZpZztcbiAgICAgICAgdmFyIHNob3dMZWdlbmRBbHdheXMgPSBjbmYubGVnZW5kLnNob3dGb3JTaW5nbGVTZXJpZXMgJiYgZ2wuc2VyaWVzLmxlbmd0aCA9PT0gMSB8fCB0aGlzLmlzQmFyc0Rpc3RyaWJ1dGVkIHx8IGdsLnNlcmllcy5sZW5ndGggPiAxO1xuXG4gICAgICAgIGlmICgoc2hvd0xlZ2VuZEFsd2F5cyB8fCAhZ2wuYXhpc0NoYXJ0cykgJiYgY25mLmxlZ2VuZC5zaG93KSB7XG4gICAgICAgICAgd2hpbGUgKGdsLmRvbS5lbExlZ2VuZFdyYXAuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgZ2wuZG9tLmVsTGVnZW5kV3JhcC5yZW1vdmVDaGlsZChnbC5kb20uZWxMZWdlbmRXcmFwLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZHJhd0xlZ2VuZHMoKTtcblxuICAgICAgICAgIGlmICghVXRpbHMuaXNJRTExKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kSGVscGVycy5hcHBlbmRUb0ZvcmVpZ25PYmplY3QoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnRzIGZvcmVpZ25PYmplY3QsIGhlbmNlIGFwcGVuZCBpdCB0byA8aGVhZD5cbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQodGhpcy5sZWdlbmRIZWxwZXJzLmdldExlZ2VuZFN0eWxlcygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY25mLmxlZ2VuZC5wb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgY25mLmxlZ2VuZC5wb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQWxpZ25Ib3Jpem9udGFsKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjbmYubGVnZW5kLnBvc2l0aW9uID09PSAncmlnaHQnIHx8IGNuZi5sZWdlbmQucG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgdGhpcy5sZWdlbmRBbGlnblZlcnRpY2FsKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdMZWdlbmRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0xlZ2VuZHMoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBmb250RmFtaWx5ID0gdy5jb25maWcubGVnZW5kLmZvbnRGYW1pbHk7XG4gICAgICAgIHZhciBsZWdlbmROYW1lcyA9IHcuZ2xvYmFscy5zZXJpZXNOYW1lcztcbiAgICAgICAgdmFyIGZpbGxjb2xvciA9IHcuZ2xvYmFscy5jb2xvcnMuc2xpY2UoKTtcblxuICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2hlYXRtYXAnKSB7XG4gICAgICAgICAgdmFyIHJhbmdlcyA9IHcuY29uZmlnLnBsb3RPcHRpb25zLmhlYXRtYXAuY29sb3JTY2FsZS5yYW5nZXM7XG4gICAgICAgICAgbGVnZW5kTmFtZXMgPSByYW5nZXMubWFwKGZ1bmN0aW9uIChjb2xvclNjYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sb3JTY2FsZS5uYW1lID8gY29sb3JTY2FsZS5uYW1lIDogY29sb3JTY2FsZS5mcm9tICsgJyAtICcgKyBjb2xvclNjYWxlLnRvO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZpbGxjb2xvciA9IHJhbmdlcy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sb3IuY29sb3I7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0JhcnNEaXN0cmlidXRlZCkge1xuICAgICAgICAgIGxlZ2VuZE5hbWVzID0gdy5nbG9iYWxzLmxhYmVscy5zbGljZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlZ2VuZEZvcm1hdHRlciA9IHcuZ2xvYmFscy5sZWdlbmRGb3JtYXR0ZXI7XG4gICAgICAgIHZhciBpc0xlZ2VuZEludmVyc2VkID0gdy5jb25maWcubGVnZW5kLmludmVyc2VPcmRlcjtcblxuICAgICAgICBmb3IgKHZhciBpID0gaXNMZWdlbmRJbnZlcnNlZCA/IGxlZ2VuZE5hbWVzLmxlbmd0aCAtIDEgOiAwOyBpc0xlZ2VuZEludmVyc2VkID8gaSA+PSAwIDogaSA8PSBsZWdlbmROYW1lcy5sZW5ndGggLSAxOyBpc0xlZ2VuZEludmVyc2VkID8gaS0tIDogaSsrKSB7XG4gICAgICAgICAgdmFyIHRleHQgPSBsZWdlbmRGb3JtYXR0ZXIobGVnZW5kTmFtZXNbaV0sIHtcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiBpLFxuICAgICAgICAgICAgdzogd1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBjb2xsYXBzZWRTZXJpZXMgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmNvbGxhcHNlZFNlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXNbY10uaW5kZXggPT09IGkpIHtcbiAgICAgICAgICAgICAgICBjb2xsYXBzZWRTZXJpZXMgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5hbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXNJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9jID0gMDsgX2MgPCB3Lmdsb2JhbHMuYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzSW5kaWNlcy5sZW5ndGg7IF9jKyspIHtcbiAgICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5hbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXNJbmRpY2VzW19jXSA9PT0gaSkge1xuICAgICAgICAgICAgICAgIGFuY2lsbGFyeUNvbGxhcHNlZFNlcmllcyA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZWxNYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgZWxNYXJrZXIuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1sZWdlbmQtbWFya2VyJyk7XG4gICAgICAgICAgdmFyIG1PZmZzZXRYID0gdy5jb25maWcubGVnZW5kLm1hcmtlcnMub2Zmc2V0WDtcbiAgICAgICAgICB2YXIgbU9mZnNldFkgPSB3LmNvbmZpZy5sZWdlbmQubWFya2Vycy5vZmZzZXRZO1xuICAgICAgICAgIHZhciBtSGVpZ2h0ID0gdy5jb25maWcubGVnZW5kLm1hcmtlcnMuaGVpZ2h0O1xuICAgICAgICAgIHZhciBtV2lkdGggPSB3LmNvbmZpZy5sZWdlbmQubWFya2Vycy53aWR0aDtcbiAgICAgICAgICB2YXIgbUJvcmRlcldpZHRoID0gdy5jb25maWcubGVnZW5kLm1hcmtlcnMuc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgdmFyIG1Cb3JkZXJDb2xvciA9IHcuY29uZmlnLmxlZ2VuZC5tYXJrZXJzLnN0cm9rZUNvbG9yO1xuICAgICAgICAgIHZhciBtQm9yZGVyUmFkaXVzID0gdy5jb25maWcubGVnZW5kLm1hcmtlcnMucmFkaXVzO1xuICAgICAgICAgIHZhciBtU3R5bGUgPSBlbE1hcmtlci5zdHlsZTtcbiAgICAgICAgICBtU3R5bGUuYmFja2dyb3VuZCA9IGZpbGxjb2xvcltpXTtcbiAgICAgICAgICBtU3R5bGUuY29sb3IgPSBmaWxsY29sb3JbaV07IC8vIG92ZXJyaWRlIGZpbGwgY29sb3Igd2l0aCBjdXN0b20gbGVnZW5kLm1hcmtlcnMuZmlsbENvbG9yc1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmxlZ2VuZC5tYXJrZXJzLmZpbGxDb2xvcnMgJiYgdy5jb25maWcubGVnZW5kLm1hcmtlcnMuZmlsbENvbG9yc1tpXSkge1xuICAgICAgICAgICAgbVN0eWxlLmJhY2tncm91bmQgPSB3LmNvbmZpZy5sZWdlbmQubWFya2Vycy5maWxsQ29sb3JzW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1TdHlsZS5oZWlnaHQgPSBBcnJheS5pc0FycmF5KG1IZWlnaHQpID8gcGFyc2VGbG9hdChtSGVpZ2h0W2ldKSArICdweCcgOiBwYXJzZUZsb2F0KG1IZWlnaHQpICsgJ3B4JztcbiAgICAgICAgICBtU3R5bGUud2lkdGggPSBBcnJheS5pc0FycmF5KG1XaWR0aCkgPyBwYXJzZUZsb2F0KG1XaWR0aFtpXSkgKyAncHgnIDogcGFyc2VGbG9hdChtV2lkdGgpICsgJ3B4JztcbiAgICAgICAgICBtU3R5bGUubGVmdCA9IEFycmF5LmlzQXJyYXkobU9mZnNldFgpID8gbU9mZnNldFhbaV0gOiBtT2Zmc2V0WDtcbiAgICAgICAgICBtU3R5bGUudG9wID0gQXJyYXkuaXNBcnJheShtT2Zmc2V0WSkgPyBtT2Zmc2V0WVtpXSA6IG1PZmZzZXRZO1xuICAgICAgICAgIG1TdHlsZS5ib3JkZXJXaWR0aCA9IEFycmF5LmlzQXJyYXkobUJvcmRlcldpZHRoKSA/IG1Cb3JkZXJXaWR0aFtpXSA6IG1Cb3JkZXJXaWR0aDtcbiAgICAgICAgICBtU3R5bGUuYm9yZGVyQ29sb3IgPSBBcnJheS5pc0FycmF5KG1Cb3JkZXJDb2xvcikgPyBtQm9yZGVyQ29sb3JbaV0gOiBtQm9yZGVyQ29sb3I7XG4gICAgICAgICAgbVN0eWxlLmJvcmRlclJhZGl1cyA9IEFycmF5LmlzQXJyYXkobUJvcmRlclJhZGl1cykgPyBwYXJzZUZsb2F0KG1Cb3JkZXJSYWRpdXNbaV0pICsgJ3B4JyA6IHBhcnNlRmxvYXQobUJvcmRlclJhZGl1cykgKyAncHgnO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmxlZ2VuZC5tYXJrZXJzLmN1c3RvbUhUTUwpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHcuY29uZmlnLmxlZ2VuZC5tYXJrZXJzLmN1c3RvbUhUTUwpKSB7XG4gICAgICAgICAgICAgIGVsTWFya2VyLmlubmVySFRNTCA9IHcuY29uZmlnLmxlZ2VuZC5tYXJrZXJzLmN1c3RvbUhUTUxbaV0oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVsTWFya2VyLmlubmVySFRNTCA9IHcuY29uZmlnLmxlZ2VuZC5tYXJrZXJzLmN1c3RvbUhUTUwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBHcmFwaGljcy5zZXRBdHRycyhlbE1hcmtlciwge1xuICAgICAgICAgICAgcmVsOiBpICsgMSxcbiAgICAgICAgICAgICdkYXRhOmNvbGxhcHNlZCc6IGNvbGxhcHNlZFNlcmllcyB8fCBhbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChjb2xsYXBzZWRTZXJpZXMgfHwgYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzKSB7XG4gICAgICAgICAgICBlbE1hcmtlci5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLWluYWN0aXZlLWxlZ2VuZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBlbExlZ2VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHZhciBlbExlZ2VuZFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgZWxMZWdlbmRUZXh0LmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtbGVnZW5kLXRleHQnKTtcbiAgICAgICAgICBlbExlZ2VuZFRleHQuaW5uZXJIVE1MID0gQXJyYXkuaXNBcnJheSh0ZXh0KSA/IHRleHQuam9pbignICcpIDogdGV4dDtcbiAgICAgICAgICB2YXIgdGV4dENvbG9yID0gdy5jb25maWcubGVnZW5kLmxhYmVscy51c2VTZXJpZXNDb2xvcnMgPyB3Lmdsb2JhbHMuY29sb3JzW2ldIDogdy5jb25maWcubGVnZW5kLmxhYmVscy5jb2xvcnM7XG5cbiAgICAgICAgICBpZiAoIXRleHRDb2xvcikge1xuICAgICAgICAgICAgdGV4dENvbG9yID0gdy5jb25maWcuY2hhcnQuZm9yZUNvbG9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsTGVnZW5kVGV4dC5zdHlsZS5jb2xvciA9IHRleHRDb2xvcjtcbiAgICAgICAgICBlbExlZ2VuZFRleHQuc3R5bGUuZm9udFNpemUgPSBwYXJzZUZsb2F0KHcuY29uZmlnLmxlZ2VuZC5mb250U2l6ZSkgKyAncHgnO1xuICAgICAgICAgIGVsTGVnZW5kVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gdy5jb25maWcubGVnZW5kLmZvbnRXZWlnaHQ7XG4gICAgICAgICAgZWxMZWdlbmRUZXh0LnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5IHx8IHcuY29uZmlnLmNoYXJ0LmZvbnRGYW1pbHk7XG4gICAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnMoZWxMZWdlbmRUZXh0LCB7XG4gICAgICAgICAgICByZWw6IGkgKyAxLFxuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICdkYXRhOmRlZmF1bHQtdGV4dCc6IGVuY29kZVVSSUNvbXBvbmVudCh0ZXh0KSxcbiAgICAgICAgICAgICdkYXRhOmNvbGxhcHNlZCc6IGNvbGxhcHNlZFNlcmllcyB8fCBhbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbExlZ2VuZC5hcHBlbmRDaGlsZChlbE1hcmtlcik7XG4gICAgICAgICAgZWxMZWdlbmQuYXBwZW5kQ2hpbGQoZWxMZWdlbmRUZXh0KTtcbiAgICAgICAgICB2YXIgY29yZVV0aWxzID0gbmV3IENvcmVVdGlscyh0aGlzLmN0eCk7XG5cbiAgICAgICAgICBpZiAoIXcuY29uZmlnLmxlZ2VuZC5zaG93Rm9yWmVyb1Nlcmllcykge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gY29yZVV0aWxzLmdldFNlcmllc1RvdGFsQnlJbmRleChpKTtcblxuICAgICAgICAgICAgaWYgKHRvdGFsID09PSAwICYmIGNvcmVVdGlscy5zZXJpZXNIYXZlU2FtZVZhbHVlcyhpKSAmJiAhY29yZVV0aWxzLmlzU2VyaWVzTnVsbChpKSAmJiB3Lmdsb2JhbHMuY29sbGFwc2VkU2VyaWVzSW5kaWNlcy5pbmRleE9mKGkpID09PSAtMSAmJiB3Lmdsb2JhbHMuYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzSW5kaWNlcy5pbmRleE9mKGkpID09PSAtMSkge1xuICAgICAgICAgICAgICBlbExlZ2VuZC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLWhpZGRlbi16ZXJvLXNlcmllcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdy5jb25maWcubGVnZW5kLnNob3dGb3JOdWxsU2VyaWVzKSB7XG4gICAgICAgICAgICBpZiAoY29yZVV0aWxzLmlzU2VyaWVzTnVsbChpKSAmJiB3Lmdsb2JhbHMuY29sbGFwc2VkU2VyaWVzSW5kaWNlcy5pbmRleE9mKGkpID09PSAtMSAmJiB3Lmdsb2JhbHMuYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzSW5kaWNlcy5pbmRleE9mKGkpID09PSAtMSkge1xuICAgICAgICAgICAgICBlbExlZ2VuZC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLWhpZGRlbi1udWxsLXNlcmllcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHcuZ2xvYmFscy5kb20uZWxMZWdlbmRXcmFwLmFwcGVuZENoaWxkKGVsTGVnZW5kKTtcbiAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsTGVnZW5kV3JhcC5jbGFzc0xpc3QuYWRkKFwiYXBleGNoYXJ0cy1hbGlnbi1cIi5jb25jYXQody5jb25maWcubGVnZW5kLmhvcml6b250YWxBbGlnbikpO1xuICAgICAgICAgIHcuZ2xvYmFscy5kb20uZWxMZWdlbmRXcmFwLmNsYXNzTGlzdC5hZGQoJ3Bvc2l0aW9uLScgKyB3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24pO1xuICAgICAgICAgIGVsTGVnZW5kLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtbGVnZW5kLXNlcmllcycpO1xuICAgICAgICAgIGVsTGVnZW5kLnN0eWxlLm1hcmdpbiA9IFwiXCIuY29uY2F0KHcuY29uZmlnLmxlZ2VuZC5pdGVtTWFyZ2luLnZlcnRpY2FsLCBcInB4IFwiKS5jb25jYXQody5jb25maWcubGVnZW5kLml0ZW1NYXJnaW4uaG9yaXpvbnRhbCwgXCJweFwiKTtcbiAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsTGVnZW5kV3JhcC5zdHlsZS53aWR0aCA9IHcuY29uZmlnLmxlZ2VuZC53aWR0aCA/IHcuY29uZmlnLmxlZ2VuZC53aWR0aCArICdweCcgOiAnJztcbiAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsTGVnZW5kV3JhcC5zdHlsZS5oZWlnaHQgPSB3LmNvbmZpZy5sZWdlbmQuaGVpZ2h0ID8gdy5jb25maWcubGVnZW5kLmhlaWdodCArICdweCcgOiAnJztcbiAgICAgICAgICBHcmFwaGljcy5zZXRBdHRycyhlbExlZ2VuZCwge1xuICAgICAgICAgICAgcmVsOiBpICsgMSxcbiAgICAgICAgICAgICdkYXRhOmNvbGxhcHNlZCc6IGNvbGxhcHNlZFNlcmllcyB8fCBhbmNpbGxhcnlDb2xsYXBzZWRTZXJpZXNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChjb2xsYXBzZWRTZXJpZXMgfHwgYW5jaWxsYXJ5Q29sbGFwc2VkU2VyaWVzKSB7XG4gICAgICAgICAgICBlbExlZ2VuZC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLWluYWN0aXZlLWxlZ2VuZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdy5jb25maWcubGVnZW5kLm9uSXRlbUNsaWNrLnRvZ2dsZURhdGFTZXJpZXMpIHtcbiAgICAgICAgICAgIGVsTGVnZW5kLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtbm8tY2xpY2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZm9yIG5vdyAtIGp1c3QgcHJldmVudCBjbGljayBvbiBoZWF0bWFwIGxlZ2VuZCAtIGFuZCBhbGxvdyBob3ZlciBvbmx5XG5cblxuICAgICAgICB2YXIgY2xpY2tBbGxvd2VkID0gdy5jb25maWcuY2hhcnQudHlwZSAhPT0gJ2hlYXRtYXAnICYmICF0aGlzLmlzQmFyc0Rpc3RyaWJ1dGVkO1xuXG4gICAgICAgIGlmIChjbGlja0FsbG93ZWQgJiYgdy5jb25maWcubGVnZW5kLm9uSXRlbUNsaWNrLnRvZ2dsZURhdGFTZXJpZXMpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsV3JhcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNlbGYub25MZWdlbmRDbGljaywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5jb25maWcubGVnZW5kLm9uSXRlbUhvdmVyLmhpZ2hsaWdodERhdGFTZXJpZXMpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsV3JhcC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZWxmLm9uTGVnZW5kSG92ZXJlZCwgdHJ1ZSk7XG4gICAgICAgICAgdy5nbG9iYWxzLmRvbS5lbFdyYXAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBzZWxmLm9uTGVnZW5kSG92ZXJlZCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0TGVnZW5kV3JhcFhZXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGVnZW5kV3JhcFhZKG9mZnNldFgsIG9mZnNldFkpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBlbExlZ2VuZFdyYXAgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy1sZWdlbmQnKTtcbiAgICAgICAgdmFyIGxlZ2VuZFJlY3QgPSBlbExlZ2VuZFdyYXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciB4ID0gMDtcbiAgICAgICAgdmFyIHkgPSAwO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgeSA9IHkgKyAody5nbG9iYWxzLnN2Z0hlaWdodCAtIGxlZ2VuZFJlY3QuaGVpZ2h0IC8gMik7XG4gICAgICAgIH0gZWxzZSBpZiAody5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgIHZhciBkaW0gPSBuZXcgRGltZW5zaW9ucyh0aGlzLmN0eCk7XG4gICAgICAgICAgdmFyIHRpdGxlSCA9IGRpbS5kaW1IZWxwZXJzLmdldFRpdGxlU3VidGl0bGVDb29yZHMoJ3RpdGxlJykuaGVpZ2h0O1xuICAgICAgICAgIHZhciBzdWJ0aXRsZUggPSBkaW0uZGltSGVscGVycy5nZXRUaXRsZVN1YnRpdGxlQ29vcmRzKCdzdWJ0aXRsZScpLmhlaWdodDtcbiAgICAgICAgICB5ID0geSArICh0aXRsZUggPiAwID8gdGl0bGVIIC0gMTAgOiAwKSArIChzdWJ0aXRsZUggPiAwID8gc3VidGl0bGVIIC0gMTAgOiAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsTGVnZW5kV3JhcC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIHggPSB4ICsgb2Zmc2V0WCArIHcuY29uZmlnLmxlZ2VuZC5vZmZzZXRYO1xuICAgICAgICB5ID0geSArIG9mZnNldFkgKyB3LmNvbmZpZy5sZWdlbmQub2Zmc2V0WTtcbiAgICAgICAgZWxMZWdlbmRXcmFwLnN0eWxlLmxlZnQgPSB4ICsgJ3B4JztcbiAgICAgICAgZWxMZWdlbmRXcmFwLnN0eWxlLnRvcCA9IHkgKyAncHgnO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgZWxMZWdlbmRXcmFwLnN0eWxlLnRvcCA9ICdhdXRvJztcbiAgICAgICAgICBlbExlZ2VuZFdyYXAuc3R5bGUuYm90dG9tID0gNSAtIHcuY29uZmlnLmxlZ2VuZC5vZmZzZXRZICsgJ3B4JztcbiAgICAgICAgfSBlbHNlIGlmICh3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBlbExlZ2VuZFdyYXAuc3R5bGUubGVmdCA9ICdhdXRvJztcbiAgICAgICAgICBlbExlZ2VuZFdyYXAuc3R5bGUucmlnaHQgPSAyNSArIHcuY29uZmlnLmxlZ2VuZC5vZmZzZXRYICsgJ3B4JztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaXhlZEhlaWd0aFdpZHRoID0gWyd3aWR0aCcsICdoZWlnaHQnXTtcbiAgICAgICAgZml4ZWRIZWlndGhXaWR0aC5mb3JFYWNoKGZ1bmN0aW9uIChodykge1xuICAgICAgICAgIGlmIChlbExlZ2VuZFdyYXAuc3R5bGVbaHddKSB7XG4gICAgICAgICAgICBlbExlZ2VuZFdyYXAuc3R5bGVbaHddID0gcGFyc2VJbnQody5jb25maWcubGVnZW5kW2h3XSwgMTApICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsZWdlbmRBbGlnbkhvcml6b250YWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsZWdlbmRBbGlnbkhvcml6b250YWwoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZWxMZWdlbmRXcmFwID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtbGVnZW5kJyk7XG4gICAgICAgIGVsTGVnZW5kV3JhcC5zdHlsZS5yaWdodCA9IDA7XG4gICAgICAgIHZhciBsUmVjdCA9IHRoaXMubGVnZW5kSGVscGVycy5nZXRMZWdlbmRCQm94KCk7XG4gICAgICAgIHZhciBkaW1lbnNpb25zID0gbmV3IERpbWVuc2lvbnModGhpcy5jdHgpO1xuICAgICAgICB2YXIgdGl0bGVSZWN0ID0gZGltZW5zaW9ucy5kaW1IZWxwZXJzLmdldFRpdGxlU3VidGl0bGVDb29yZHMoJ3RpdGxlJyk7XG4gICAgICAgIHZhciBzdWJ0aXRsZVJlY3QgPSBkaW1lbnNpb25zLmRpbUhlbHBlcnMuZ2V0VGl0bGVTdWJ0aXRsZUNvb3Jkcygnc3VidGl0bGUnKTtcbiAgICAgICAgdmFyIG9mZnNldFggPSAyMDtcbiAgICAgICAgdmFyIG9mZnNldFkgPSAwOyAvLyB0aGUgd2hvbGUgbGVnZW5kIGJveCBpcyBzZXQgdG8gYm90dG9tXG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmxlZ2VuZC5wb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICBvZmZzZXRZID0gLWxSZWN0LmNsd2ggLyAxLjg7XG4gICAgICAgIH0gZWxzZSBpZiAody5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgIG9mZnNldFkgPSB0aXRsZVJlY3QuaGVpZ2h0ICsgc3VidGl0bGVSZWN0LmhlaWdodCArIHcuY29uZmlnLnRpdGxlLm1hcmdpbiArIHcuY29uZmlnLnN1YnRpdGxlLm1hcmdpbiAtIDEwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRMZWdlbmRXcmFwWFkob2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxlZ2VuZEFsaWduVmVydGljYWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsZWdlbmRBbGlnblZlcnRpY2FsKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGxSZWN0ID0gdGhpcy5sZWdlbmRIZWxwZXJzLmdldExlZ2VuZEJCb3goKTtcbiAgICAgICAgdmFyIG9mZnNldFkgPSAyMDtcbiAgICAgICAgdmFyIG9mZnNldFggPSAwO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgIG9mZnNldFggPSAyMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBvZmZzZXRYID0gdy5nbG9iYWxzLnN2Z1dpZHRoIC0gbFJlY3QuY2x3dyAtIDEwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRMZWdlbmRXcmFwWFkob2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uTGVnZW5kSG92ZXJlZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uTGVnZW5kSG92ZXJlZChlKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgaG92ZXJPdmVyTGVnZW5kID0gZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcGV4Y2hhcnRzLWxlZ2VuZC10ZXh0JykgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcGV4Y2hhcnRzLWxlZ2VuZC1tYXJrZXInKTtcblxuICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSAhPT0gJ2hlYXRtYXAnICYmICF0aGlzLmlzQmFyc0Rpc3RyaWJ1dGVkKSB7XG4gICAgICAgICAgaWYgKCFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FwZXhjaGFydHMtaW5hY3RpdmUtbGVnZW5kJykgJiYgaG92ZXJPdmVyTGVnZW5kKSB7XG4gICAgICAgICAgICB2YXIgc2VyaWVzID0gbmV3IFNlcmllcyh0aGlzLmN0eCk7XG4gICAgICAgICAgICBzZXJpZXMudG9nZ2xlU2VyaWVzT25Ib3ZlcihlLCBlLnRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGZvciBoZWF0bWFwIGhhbmRsaW5nXG4gICAgICAgICAgaWYgKGhvdmVyT3ZlckxlZ2VuZCkge1xuICAgICAgICAgICAgdmFyIHNlcmllc0NudCA9IHBhcnNlSW50KGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgncmVsJyksIDEwKSAtIDE7XG4gICAgICAgICAgICB0aGlzLmN0eC5ldmVudHMuZmlyZUV2ZW50KCdsZWdlbmRIb3ZlcicsIFt0aGlzLmN0eCwgc2VyaWVzQ250LCB0aGlzLnddKTtcblxuICAgICAgICAgICAgdmFyIF9zZXJpZXMgPSBuZXcgU2VyaWVzKHRoaXMuY3R4KTtcblxuICAgICAgICAgICAgX3Nlcmllcy5oaWdobGlnaHRSYW5nZUluU2VyaWVzKGUsIGUudGFyZ2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib25MZWdlbmRDbGlja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uTGVnZW5kQ2xpY2soZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcGV4Y2hhcnRzLWxlZ2VuZC10ZXh0JykgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcGV4Y2hhcnRzLWxlZ2VuZC1tYXJrZXInKSkge1xuICAgICAgICAgIHZhciBzZXJpZXNDbnQgPSBwYXJzZUludChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3JlbCcpLCAxMCkgLSAxO1xuICAgICAgICAgIHZhciBpc0hpZGRlbiA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YTpjb2xsYXBzZWQnKSA9PT0gJ3RydWUnO1xuICAgICAgICAgIHZhciBsZWdlbmRDbGljayA9IHRoaXMudy5jb25maWcuY2hhcnQuZXZlbnRzLmxlZ2VuZENsaWNrO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBsZWdlbmRDbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbGVnZW5kQ2xpY2sodGhpcy5jdHgsIHNlcmllc0NudCwgdGhpcy53KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmN0eC5ldmVudHMuZmlyZUV2ZW50KCdsZWdlbmRDbGljaycsIFt0aGlzLmN0eCwgc2VyaWVzQ250LCB0aGlzLnddKTtcbiAgICAgICAgICB2YXIgbWFya2VyQ2xpY2sgPSB0aGlzLncuY29uZmlnLmxlZ2VuZC5tYXJrZXJzLm9uQ2xpY2s7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIG1hcmtlckNsaWNrID09PSAnZnVuY3Rpb24nICYmIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXBleGNoYXJ0cy1sZWdlbmQtbWFya2VyJykpIHtcbiAgICAgICAgICAgIG1hcmtlckNsaWNrKHRoaXMuY3R4LCBzZXJpZXNDbnQsIHRoaXMudyk7XG4gICAgICAgICAgICB0aGlzLmN0eC5ldmVudHMuZmlyZUV2ZW50KCdsZWdlbmRNYXJrZXJDbGljaycsIFt0aGlzLmN0eCwgc2VyaWVzQ250LCB0aGlzLnddKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmxlZ2VuZEhlbHBlcnMudG9nZ2xlRGF0YVNlcmllcyhzZXJpZXNDbnQsIGlzSGlkZGVuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMZWdlbmQ7XG4gIH0oKTtcblxuICB2YXIgaWNvUGFuID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiIGNsYXNzPVwiYXBleGNoYXJ0cy1pY29uXCI+PHBhdGggY2xhc3M9XCJhcGV4Y2hhcnRzLWljb24tZmlsbFwiIGQ9XCJNNDA4Ljc4MSAxMjguMDA3QzM4Ni4zNTYgMTI3LjU3OCAzNjggMTQ2LjM2IDM2OCAxNjguNzlWMjU2aC04Vjc5Ljc5YzAtMjIuNDMtMTguMzU2LTQxLjIxMi00MC43ODEtNDAuNzgzQzI5Ny40ODggMzkuNDIzIDI4MCA1Ny4xNjkgMjgwIDc5djE3N2gtOFY0MC43OUMyNzIgMTguMzYgMjUzLjY0NC0uNDIyIDIzMS4yMTkuMDA3IDIwOS40ODguNDIzIDE5MiAxOC4xNjkgMTkyIDQwdjIxNmgtOFY4MC43OWMwLTIyLjQzLTE4LjM1Ni00MS4yMTItNDAuNzgxLTQwLjc4M0MxMjEuNDg4IDQwLjQyMyAxMDQgNTguMTY5IDEwNCA4MHYyMzUuOTkybC0zMS42NDgtNDMuNTE5Yy0xMi45OTMtMTcuODY2LTM4LjAwOS0yMS44MTctNTUuODc3LTguODIzLTE3Ljg2NSAxMi45OTQtMjEuODE1IDM4LjAxLTguODIyIDU1Ljg3N2wxMjUuNjAxIDE3Mi43MDVBNDggNDggMCAwIDAgMTcyLjA3MyA1MTJoMTk3LjU5YzIyLjI3NCAwIDQxLjYyMi0xNS4zMjQgNDYuNzI0LTM3LjAwNmwyNi41MDgtMTEyLjY2YTE5Mi4wMTEgMTkyLjAxMSAwIDAgMCA1LjEwNC00My45NzVWMTY4Yy4wMDEtMjEuODMxLTE3LjQ4Ny0zOS41NzctMzkuMjE4LTM5Ljk5M3pcIi8+PC9zdmc+JztcblxuICB2YXIgaWNvWm9vbSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiBjbGFzcz1cImFwZXhjaGFydHMtaWNvblwiPjxwYXRoIGNsYXNzPVwiYXBleGNoYXJ0cy1pY29uLWZpbGxcIiBkPVwiTTMwNCAxOTJ2MzJjMCA2LjYtNS40IDEyLTEyIDEyaC01NnY1NmMwIDYuNi01LjQgMTItMTIgMTJoLTMyYy02LjYgMC0xMi01LjQtMTItMTJ2LTU2aC01NmMtNi42IDAtMTItNS40LTEyLTEydi0zMmMwLTYuNiA1LjQtMTIgMTItMTJoNTZ2LTU2YzAtNi42IDUuNC0xMiAxMi0xMmgzMmM2LjYgMCAxMiA1LjQgMTIgMTJ2NTZoNTZjNi42IDAgMTIgNS40IDEyIDEyem0yMDEgMjg0LjdMNDc2LjcgNTA1Yy05LjQgOS40LTI0LjYgOS40LTMzLjkgMEwzNDMgNDA1LjNjLTQuNS00LjUtNy0xMC42LTctMTdWMzcyYy0zNS4zIDI3LjYtNzkuNyA0NC0xMjggNDRDOTMuMSA0MTYgMCAzMjIuOSAwIDIwOFM5My4xIDAgMjA4IDBzMjA4IDkzLjEgMjA4IDIwOGMwIDQ4LjMtMTYuNCA5Mi43LTQ0IDEyOGgxNi4zYzYuNCAwIDEyLjUgMi41IDE3IDdsOTkuNyA5OS43YzkuMyA5LjQgOS4zIDI0LjYgMCAzNHpNMzQ0IDIwOGMwLTc1LjItNjAuOC0xMzYtMTM2LTEzNlM3MiAxMzIuOCA3MiAyMDhzNjAuOCAxMzYgMTM2IDEzNiAxMzYtNjAuOCAxMzYtMTM2elwiLz48L3N2Zz4nO1xuXG4gIHZhciBpY29SZXNldCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIiBjbGFzcz1cImFwZXhjaGFydHMtaWNvblwiPjxwYXRoIGNsYXNzPVwiYXBleGNoYXJ0cy1pY29uLWZpbGxcIiBkPVwiTTAgMTgwVjU2YzAtMTMuMyAxMC43LTI0IDI0LTI0aDEyNGM2LjYgMCAxMiA1LjQgMTIgMTJ2NDBjMCA2LjYtNS40IDEyLTEyIDEySDY0djg0YzAgNi42LTUuNCAxMi0xMiAxMkgxMmMtNi42IDAtMTItNS40LTEyLTEyek0yODggNDR2NDBjMCA2LjYgNS40IDEyIDEyIDEyaDg0djg0YzAgNi42IDUuNCAxMiAxMiAxMmg0MGM2LjYgMCAxMi01LjQgMTItMTJWNTZjMC0xMy4zLTEwLjctMjQtMjQtMjRIMzAwYy02LjYgMC0xMiA1LjQtMTIgMTJ6bTE0OCAyNzZoLTQwYy02LjYgMC0xMiA1LjQtMTIgMTJ2ODRoLTg0Yy02LjYgMC0xMiA1LjQtMTIgMTJ2NDBjMCA2LjYgNS40IDEyIDEyIDEyaDEyNGMxMy4zIDAgMjQtMTAuNyAyNC0yNFYzMzJjMC02LjYtNS40LTEyLTEyLTEyek0xNjAgNDY4di00MGMwLTYuNi01LjQtMTItMTItMTJINjR2LTg0YzAtNi42LTUuNC0xMi0xMi0xMkgxMmMtNi42IDAtMTIgNS40LTEyIDEydjEyNGMwIDEzLjMgMTAuNyAyNCAyNCAyNGgxMjRjNi42IDAgMTItNS40IDEyLTEyelwiLz48L3N2Zz4nO1xuXG4gIHZhciBpY29ab29tSW4gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA0NDggNTEyXCIgY2xhc3M9XCJhcGV4Y2hhcnRzLWljb25cIj48cGF0aCBjbGFzcz1cImFwZXhjaGFydHMtaWNvbi1maWxsXCIgZD1cIk0zNTIgMjQwdjMyYzAgNi42LTUuNCAxMi0xMiAxMmgtODh2ODhjMCA2LjYtNS40IDEyLTEyIDEyaC0zMmMtNi42IDAtMTItNS40LTEyLTEydi04OGgtODhjLTYuNiAwLTEyLTUuNC0xMi0xMnYtMzJjMC02LjYgNS40LTEyIDEyLTEyaDg4di04OGMwLTYuNiA1LjQtMTIgMTItMTJoMzJjNi42IDAgMTIgNS40IDEyIDEydjg4aDg4YzYuNiAwIDEyIDUuNCAxMiAxMnptOTYtMTYwdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODBjMC0yNi41IDIxLjUtNDggNDgtNDhoMzUyYzI2LjUgMCA0OCAyMS41IDQ4IDQ4em0tNDggMzQ2Vjg2YzAtMy4zLTIuNy02LTYtNkg1NGMtMy4zIDAtNiAyLjctNiA2djM0MGMwIDMuMyAyLjcgNiA2IDZoMzQwYzMuMyAwIDYtMi43IDYtNnpcIi8+PC9zdmc+JztcblxuICB2YXIgaWNvWm9vbU91dCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIiBjbGFzcz1cImFwZXhjaGFydHMtaWNvblwiPjxwYXRoIGNsYXNzPVwiYXBleGNoYXJ0cy1pY29uLWZpbGxcIiBkPVwiTTEwOCAyODRjLTYuNiAwLTEyLTUuNC0xMi0xMnYtMzJjMC02LjYgNS40LTEyIDEyLTEyaDIzMmM2LjYgMCAxMiA1LjQgMTIgMTJ2MzJjMCA2LjYtNS40IDEyLTEyIDEySDEwOHpNNDQ4IDgwdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODBjMC0yNi41IDIxLjUtNDggNDgtNDhoMzUyYzI2LjUgMCA0OCAyMS41IDQ4IDQ4em0tNDggMzQ2Vjg2YzAtMy4zLTIuNy02LTYtNkg1NGMtMy4zIDAtNiAyLjctNiA2djM0MGMwIDMuMyAyLjcgNiA2IDZoMzQwYzMuMyAwIDYtMi43IDYtNnpcIi8+PC9zdmc+JztcblxuICB2YXIgaWNvU2VsZWN0ID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiIGNsYXNzPVwiYXBleGNoYXJ0cy1pY29uXCI+PHBhdGggY2xhc3M9XCJhcGV4Y2hhcnRzLWljb24tZmlsbFwiIGQ9XCJNMjQwIDIyNGgtMzJhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZ2LTMyYTE2IDE2IDAgMCAwLTE2LTE2em05NiAwaC0zMmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNnYtMzJhMTYgMTYgMCAwIDAtMTYtMTZ6bTk2IDBoLTMyYTE2IDE2IDAgMCAwLTE2IDE2djMyYTE2IDE2IDAgMCAwIDE2IDE2aDMyYTE2IDE2IDAgMCAwIDE2LTE2di0zMmExNiAxNiAwIDAgMC0xNi0xNnptLTI4OCAwaC0zMmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNnYtMzJhMTYgMTYgMCAwIDAtMTYtMTZ6bTk2IDE5MmgtMzJhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZ2LTMyYTE2IDE2IDAgMCAwLTE2LTE2em05NiAwaC0zMmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNnYtMzJhMTYgMTYgMCAwIDAtMTYtMTZ6bTk2IDBoLTMyYTE2IDE2IDAgMCAwLTE2IDE2djMyYTE2IDE2IDAgMCAwIDE2IDE2aDMyYTE2IDE2IDAgMCAwIDE2LTE2di0zMmExNiAxNiAwIDAgMC0xNi0xNnptMC05NmgtMzJhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZ2LTMyYTE2IDE2IDAgMCAwLTE2LTE2em0wLTE5MmgtMzJhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZ2LTMyYTE2IDE2IDAgMCAwLTE2LTE2ek0yNDAgMzIwaC0zMmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNnYtMzJhMTYgMTYgMCAwIDAtMTYtMTZ6bTAtMTkyaC0zMmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNnYtMzJhMTYgMTYgMCAwIDAtMTYtMTZ6bS05NiAyODhoLTMyYTE2IDE2IDAgMCAwLTE2IDE2djMyYTE2IDE2IDAgMCAwIDE2IDE2aDMyYTE2IDE2IDAgMCAwIDE2LTE2di0zMmExNiAxNiAwIDAgMC0xNi0xNnptOTYtMzg0aC0zMmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNlY0OGExNiAxNiAwIDAgMC0xNi0xNnptOTYgMGgtMzJhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZWNDhhMTYgMTYgMCAwIDAtMTYtMTZ6bTk2IDBoLTMyYTE2IDE2IDAgMCAwLTE2IDE2djMyYTE2IDE2IDAgMCAwIDE2IDE2aDMyYTE2IDE2IDAgMCAwIDE2LTE2VjQ4YTE2IDE2IDAgMCAwLTE2LTE2ek00OCAyMjRIMTZhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZ2LTMyYTE2IDE2IDAgMCAwLTE2LTE2em0wIDE5MkgxNmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNnYtMzJhMTYgMTYgMCAwIDAtMTYtMTZ6bTAtOTZIMTZhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZ2LTMyYTE2IDE2IDAgMCAwLTE2LTE2em0wLTE5MkgxNmExNiAxNiAwIDAgMC0xNiAxNnYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNnYtMzJhMTYgMTYgMCAwIDAtMTYtMTZ6bTAtOTZIMTZBMTYgMTYgMCAwIDAgMCA0OHYzMmExNiAxNiAwIDAgMCAxNiAxNmgzMmExNiAxNiAwIDAgMCAxNi0xNlY0OGExNiAxNiAwIDAgMC0xNi0xNnptOTYgMGgtMzJhMTYgMTYgMCAwIDAtMTYgMTZ2MzJhMTYgMTYgMCAwIDAgMTYgMTZoMzJhMTYgMTYgMCAwIDAgMTYtMTZWNDhhMTYgMTYgMCAwIDAtMTYtMTZ6XCIvPjwvc3ZnPic7XG5cbiAgdmFyIGljb01lbnUgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA0NDggNTEyXCIgY2xhc3M9XCJhcGV4Y2hhcnRzLWljb25cIj48cGF0aCBjbGFzcz1cImFwZXhjaGFydHMtaWNvbi1maWxsXCIgZD1cIk0xNiAxMzJoNDE2YzguODM3IDAgMTYtNy4xNjMgMTYtMTZWNzZjMC04LjgzNy03LjE2My0xNi0xNi0xNkgxNkM3LjE2MyA2MCAwIDY3LjE2MyAwIDc2djQwYzAgOC44MzcgNy4xNjMgMTYgMTYgMTZ6bTAgMTYwaDQxNmM4LjgzNyAwIDE2LTcuMTYzIDE2LTE2di00MGMwLTguODM3LTcuMTYzLTE2LTE2LTE2SDE2Yy04LjgzNyAwLTE2IDcuMTYzLTE2IDE2djQwYzAgOC44MzcgNy4xNjMgMTYgMTYgMTZ6bTAgMTYwaDQxNmM4LjgzNyAwIDE2LTcuMTYzIDE2LTE2di00MGMwLTguODM3LTcuMTYzLTE2LTE2LTE2SDE2Yy04LjgzNyAwLTE2IDcuMTYzLTE2IDE2djQwYzAgOC44MzcgNy4xNjMgMTYgMTYgMTZ6XCIvPjwvc3ZnPic7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgVG9vbGJhciBDbGFzcyBmb3IgY3JlYXRpbmcgdG9vbGJhciBpbiBheGlzIGJhc2VkIGNoYXJ0cy5cbiAgICpcbiAgICogQG1vZHVsZSBUb29sYmFyXG4gICAqKi9cblxuICB2YXIgVG9vbGJhciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9vbGJhcihjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sYmFyKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHRoaXMuZXYgPSB0aGlzLncuY29uZmlnLmNoYXJ0LmV2ZW50cztcbiAgICAgIHRoaXMuc2VsZWN0ZWRDbGFzcyA9ICdhcGV4Y2hhcnRzLXNlbGVjdGVkJztcbiAgICAgIHRoaXMubG9jYWxlVmFsdWVzID0gdGhpcy53Lmdsb2JhbHMubG9jYWxlLnRvb2xiYXI7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRvb2xiYXIsIFt7XG4gICAgICBrZXk6IFwiY3JlYXRlVG9vbGJhclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVRvb2xiYXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgdmFyIGNyZWF0ZURpdiA9IGZ1bmN0aW9uIGNyZWF0ZURpdigpIHtcbiAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGVsVG9vbGJhcldyYXAgPSBjcmVhdGVEaXYoKTtcbiAgICAgICAgZWxUb29sYmFyV3JhcC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2FwZXhjaGFydHMtdG9vbGJhcicpO1xuICAgICAgICBlbFRvb2xiYXJXcmFwLnN0eWxlLnRvcCA9IHcuY29uZmlnLmNoYXJ0LnRvb2xiYXIub2Zmc2V0WSArICdweCc7XG4gICAgICAgIGVsVG9vbGJhcldyYXAuc3R5bGUucmlnaHQgPSAtdy5jb25maWcuY2hhcnQudG9vbGJhci5vZmZzZXRYICsgMyArICdweCc7XG4gICAgICAgIHcuZ2xvYmFscy5kb20uZWxXcmFwLmFwcGVuZENoaWxkKGVsVG9vbGJhcldyYXApO1xuICAgICAgICB0aGlzLmVsWm9vbSA9IGNyZWF0ZURpdigpO1xuICAgICAgICB0aGlzLmVsWm9vbUluID0gY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMuZWxab29tT3V0ID0gY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMuZWxQYW4gPSBjcmVhdGVEaXYoKTtcbiAgICAgICAgdGhpcy5lbFNlbGVjdGlvbiA9IGNyZWF0ZURpdigpO1xuICAgICAgICB0aGlzLmVsWm9vbVJlc2V0ID0gY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMuZWxNZW51SWNvbiA9IGNyZWF0ZURpdigpO1xuICAgICAgICB0aGlzLmVsTWVudSA9IGNyZWF0ZURpdigpO1xuICAgICAgICB0aGlzLmVsQ3VzdG9tSWNvbnMgPSBbXTtcbiAgICAgICAgdGhpcy50ID0gdy5jb25maWcuY2hhcnQudG9vbGJhci50b29scztcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnQuY3VzdG9tSWNvbnMpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnQuY3VzdG9tSWNvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZWxDdXN0b21JY29ucy5wdXNoKGNyZWF0ZURpdigpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9vbGJhckNvbnRyb2xzID0gW107XG5cbiAgICAgICAgdmFyIGFwcGVuZFpvb21Db250cm9sID0gZnVuY3Rpb24gYXBwZW5kWm9vbUNvbnRyb2wodHlwZSwgZWwsIGljbykge1xuICAgICAgICAgIHZhciB0b29sID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgaWYgKF90aGlzLnRbdG9vbF0gJiYgdy5jb25maWcuY2hhcnQuem9vbS5lbmFibGVkKSB7XG4gICAgICAgICAgICB0b29sYmFyQ29udHJvbHMucHVzaCh7XG4gICAgICAgICAgICAgIGVsOiBlbCxcbiAgICAgICAgICAgICAgaWNvbjogdHlwZW9mIF90aGlzLnRbdG9vbF0gPT09ICdzdHJpbmcnID8gX3RoaXMudFt0b29sXSA6IGljbyxcbiAgICAgICAgICAgICAgdGl0bGU6IF90aGlzLmxvY2FsZVZhbHVlc1t0eXBlXSxcbiAgICAgICAgICAgICAgY2xhc3M6IFwiYXBleGNoYXJ0cy1cIi5jb25jYXQodG9vbCwgXCItaWNvblwiKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGFwcGVuZFpvb21Db250cm9sKCd6b29tSW4nLCB0aGlzLmVsWm9vbUluLCBpY29ab29tSW4pO1xuICAgICAgICBhcHBlbmRab29tQ29udHJvbCgnem9vbU91dCcsIHRoaXMuZWxab29tT3V0LCBpY29ab29tT3V0KTtcblxuICAgICAgICB2YXIgem9vbVNlbGVjdGlvbkN0cmxzID0gZnVuY3Rpb24gem9vbVNlbGVjdGlvbkN0cmxzKHopIHtcbiAgICAgICAgICBpZiAoX3RoaXMudFt6XSAmJiB3LmNvbmZpZy5jaGFydFt6XS5lbmFibGVkKSB7XG4gICAgICAgICAgICB0b29sYmFyQ29udHJvbHMucHVzaCh7XG4gICAgICAgICAgICAgIGVsOiB6ID09PSAnem9vbScgPyBfdGhpcy5lbFpvb20gOiBfdGhpcy5lbFNlbGVjdGlvbixcbiAgICAgICAgICAgICAgaWNvbjogdHlwZW9mIF90aGlzLnRbel0gPT09ICdzdHJpbmcnID8gX3RoaXMudFt6XSA6IHogPT09ICd6b29tJyA/IGljb1pvb20gOiBpY29TZWxlY3QsXG4gICAgICAgICAgICAgIHRpdGxlOiBfdGhpcy5sb2NhbGVWYWx1ZXNbeiA9PT0gJ3pvb20nID8gJ3NlbGVjdGlvblpvb20nIDogJ3NlbGVjdGlvbiddLFxuICAgICAgICAgICAgICBjbGFzczogdy5nbG9iYWxzLmlzVG91Y2hEZXZpY2UgPyAnYXBleGNoYXJ0cy1lbGVtZW50LWhpZGRlbicgOiBcImFwZXhjaGFydHMtXCIuY29uY2F0KHosIFwiLWljb25cIilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB6b29tU2VsZWN0aW9uQ3RybHMoJ3pvb20nKTtcbiAgICAgICAgem9vbVNlbGVjdGlvbkN0cmxzKCdzZWxlY3Rpb24nKTtcblxuICAgICAgICBpZiAodGhpcy50LnBhbiAmJiB3LmNvbmZpZy5jaGFydC56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgICB0b29sYmFyQ29udHJvbHMucHVzaCh7XG4gICAgICAgICAgICBlbDogdGhpcy5lbFBhbixcbiAgICAgICAgICAgIGljb246IHR5cGVvZiB0aGlzLnQucGFuID09PSAnc3RyaW5nJyA/IHRoaXMudC5wYW4gOiBpY29QYW4sXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbGVWYWx1ZXMucGFuLFxuICAgICAgICAgICAgY2xhc3M6IHcuZ2xvYmFscy5pc1RvdWNoRGV2aWNlID8gJ2FwZXhjaGFydHMtZWxlbWVudC1oaWRkZW4nIDogJ2FwZXhjaGFydHMtcGFuLWljb24nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcHBlbmRab29tQ29udHJvbCgncmVzZXQnLCB0aGlzLmVsWm9vbVJlc2V0LCBpY29SZXNldCk7XG5cbiAgICAgICAgaWYgKHRoaXMudC5kb3dubG9hZCkge1xuICAgICAgICAgIHRvb2xiYXJDb250cm9scy5wdXNoKHtcbiAgICAgICAgICAgIGVsOiB0aGlzLmVsTWVudUljb24sXG4gICAgICAgICAgICBpY29uOiB0eXBlb2YgdGhpcy50LmRvd25sb2FkID09PSAnc3RyaW5nJyA/IHRoaXMudC5kb3dubG9hZCA6IGljb01lbnUsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbGVWYWx1ZXMubWVudSxcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1tZW51LWljb24nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5lbEN1c3RvbUljb25zLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHRvb2xiYXJDb250cm9scy5wdXNoKHtcbiAgICAgICAgICAgIGVsOiB0aGlzLmVsQ3VzdG9tSWNvbnNbX2ldLFxuICAgICAgICAgICAgaWNvbjogdGhpcy50LmN1c3RvbUljb25zW19pXS5pY29uLFxuICAgICAgICAgICAgdGl0bGU6IHRoaXMudC5jdXN0b21JY29uc1tfaV0udGl0bGUsXG4gICAgICAgICAgICBpbmRleDogdGhpcy50LmN1c3RvbUljb25zW19pXS5pbmRleCxcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy10b29sYmFyLWN1c3RvbS1pY29uICcgKyB0aGlzLnQuY3VzdG9tSWNvbnNbX2ldLmNsYXNzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0b29sYmFyQ29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAodCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAodC5pbmRleCkge1xuICAgICAgICAgICAgVXRpbHMubW92ZUluZGV4SW5BcnJheSh0b29sYmFyQ29udHJvbHMsIGluZGV4LCB0LmluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHRvb2xiYXJDb250cm9scy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnModG9vbGJhckNvbnRyb2xzW19pMl0uZWwsIHtcbiAgICAgICAgICAgIGNsYXNzOiB0b29sYmFyQ29udHJvbHNbX2kyXS5jbGFzcyxcbiAgICAgICAgICAgIHRpdGxlOiB0b29sYmFyQ29udHJvbHNbX2kyXS50aXRsZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRvb2xiYXJDb250cm9sc1tfaTJdLmVsLmlubmVySFRNTCA9IHRvb2xiYXJDb250cm9sc1tfaTJdLmljb247XG4gICAgICAgICAgZWxUb29sYmFyV3JhcC5hcHBlbmRDaGlsZCh0b29sYmFyQ29udHJvbHNbX2kyXS5lbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jcmVhdGVIYW1idXJnZXJNZW51KGVsVG9vbGJhcldyYXApO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuem9vbUVuYWJsZWQpIHtcbiAgICAgICAgICB0aGlzLmVsWm9vbS5jbGFzc0xpc3QuYWRkKHRoaXMuc2VsZWN0ZWRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSBpZiAody5nbG9iYWxzLnBhbkVuYWJsZWQpIHtcbiAgICAgICAgICB0aGlzLmVsUGFuLmNsYXNzTGlzdC5hZGQodGhpcy5zZWxlY3RlZENsYXNzKTtcbiAgICAgICAgfSBlbHNlIGlmICh3Lmdsb2JhbHMuc2VsZWN0aW9uRW5hYmxlZCkge1xuICAgICAgICAgIHRoaXMuZWxTZWxlY3Rpb24uY2xhc3NMaXN0LmFkZCh0aGlzLnNlbGVjdGVkQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZGRUb29sYmFyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2NyZWF0ZUhhbWJ1cmdlck1lbnVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlSGFtYnVyZ2VyTWVudShwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5lbE1lbnVJdGVtcyA9IFtdO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5lbE1lbnUpO1xuICAgICAgICBHcmFwaGljcy5zZXRBdHRycyh0aGlzLmVsTWVudSwge1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1tZW51J1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG1lbnVJdGVtcyA9IFt7XG4gICAgICAgICAgbmFtZTogJ2V4cG9ydFNWRycsXG4gICAgICAgICAgdGl0bGU6IHRoaXMubG9jYWxlVmFsdWVzLmV4cG9ydFRvU1ZHXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBuYW1lOiAnZXhwb3J0UE5HJyxcbiAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbGVWYWx1ZXMuZXhwb3J0VG9QTkdcbiAgICAgICAgfSwge1xuICAgICAgICAgIG5hbWU6ICdleHBvcnRDU1YnLFxuICAgICAgICAgIHRpdGxlOiB0aGlzLmxvY2FsZVZhbHVlcy5leHBvcnRUb0NTVlxuICAgICAgICB9XTtcblxuICAgICAgICBpZiAoIXRoaXMudy5nbG9iYWxzLmFsbFNlcmllc0hhc0VxdWFsWCkge1xuICAgICAgICAgIC8vIGlmIGl0IGlzIGEgbXVsdGkgc2VyaWVzLCBhbmQgYWxsIHNlcmllcyBoYXZlIHZhcmlhYmxlIHggdmFsdWVzLCBleHBvcnQgQ1NWIHdvbid0IHdvcmtcbiAgICAgICAgICBtZW51SXRlbXMuc3BsaWNlKDIsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZW51SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmVsTWVudUl0ZW1zLnB1c2goZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgICAgICAgIHRoaXMuZWxNZW51SXRlbXNbaV0uaW5uZXJIVE1MID0gbWVudUl0ZW1zW2ldLnRpdGxlO1xuICAgICAgICAgIEdyYXBoaWNzLnNldEF0dHJzKHRoaXMuZWxNZW51SXRlbXNbaV0sIHtcbiAgICAgICAgICAgIGNsYXNzOiBcImFwZXhjaGFydHMtbWVudS1pdGVtIFwiLmNvbmNhdChtZW51SXRlbXNbaV0ubmFtZSksXG4gICAgICAgICAgICB0aXRsZTogbWVudUl0ZW1zW2ldLnRpdGxlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5lbE1lbnUuYXBwZW5kQ2hpbGQodGhpcy5lbE1lbnVJdGVtc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkVG9vbGJhckV2ZW50TGlzdGVuZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVG9vbGJhckV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB0aGlzLmVsWm9vbVJlc2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVab29tUmVzZXQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZWxTZWxlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRvZ2dsZVpvb21TZWxlY3Rpb24uYmluZCh0aGlzLCAnc2VsZWN0aW9uJykpO1xuICAgICAgICB0aGlzLmVsWm9vbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMudG9nZ2xlWm9vbVNlbGVjdGlvbi5iaW5kKHRoaXMsICd6b29tJykpO1xuICAgICAgICB0aGlzLmVsWm9vbUluLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVab29tSW4uYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZWxab29tT3V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVab29tT3V0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmVsUGFuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50b2dnbGVQYW5uaW5nLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmVsTWVudUljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRvZ2dsZU1lbnUuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZWxNZW51SXRlbXMuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgIGlmIChtLmNsYXNzTGlzdC5jb250YWlucygnZXhwb3J0U1ZHJykpIHtcbiAgICAgICAgICAgIG0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpczIuaGFuZGxlRG93bmxvYWQuYmluZChfdGhpczIsICdzdmcnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtLmNsYXNzTGlzdC5jb250YWlucygnZXhwb3J0UE5HJykpIHtcbiAgICAgICAgICAgIG0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpczIuaGFuZGxlRG93bmxvYWQuYmluZChfdGhpczIsICdwbmcnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtLmNsYXNzTGlzdC5jb250YWlucygnZXhwb3J0Q1NWJykpIHtcbiAgICAgICAgICAgIG0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpczIuaGFuZGxlRG93bmxvYWQuYmluZChfdGhpczIsICdjc3YnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudC5jdXN0b21JY29ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuZWxDdXN0b21JY29uc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMudC5jdXN0b21JY29uc1tpXS5jbGljay5iaW5kKHRoaXMsIHRoaXMuY3R4LCB0aGlzLmN0eC53KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9nZ2xlWm9vbVNlbGVjdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZVpvb21TZWxlY3Rpb24odHlwZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU90aGVyQ29udHJvbHMoKTtcbiAgICAgICAgdmFyIGVsID0gdHlwZSA9PT0gJ3NlbGVjdGlvbicgPyB0aGlzLmVsU2VsZWN0aW9uIDogdGhpcy5lbFpvb207XG4gICAgICAgIHZhciBlbmFibGVkVHlwZSA9IHR5cGUgPT09ICdzZWxlY3Rpb24nID8gJ3NlbGVjdGlvbkVuYWJsZWQnIDogJ3pvb21FbmFibGVkJztcbiAgICAgICAgdGhpcy53Lmdsb2JhbHNbZW5hYmxlZFR5cGVdID0gIXRoaXMudy5nbG9iYWxzW2VuYWJsZWRUeXBlXTtcblxuICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLnNlbGVjdGVkQ2xhc3MpKSB7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCh0aGlzLnNlbGVjdGVkQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zZWxlY3RlZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRUb29sYmFySWNvbnNSZWZlcmVuY2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUb29sYmFySWNvbnNSZWZlcmVuY2UoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICghdGhpcy5lbFpvb20pIHtcbiAgICAgICAgICB0aGlzLmVsWm9vbSA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLXpvb20taWNvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmVsUGFuKSB7XG4gICAgICAgICAgdGhpcy5lbFBhbiA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLXBhbi1pY29uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuZWxTZWxlY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLmVsU2VsZWN0aW9uID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtc2VsZWN0aW9uLWljb24nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbmFibGVab29tUGFuRnJvbVRvb2xiYXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVab29tUGFuRnJvbVRvb2xiYXIodHlwZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU90aGVyQ29udHJvbHMoKTtcbiAgICAgICAgdHlwZSA9PT0gJ3BhbicgPyB0aGlzLncuZ2xvYmFscy5wYW5FbmFibGVkID0gdHJ1ZSA6IHRoaXMudy5nbG9iYWxzLnpvb21FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGVsID0gdHlwZSA9PT0gJ3BhbicgPyB0aGlzLmVsUGFuIDogdGhpcy5lbFpvb207XG4gICAgICAgIHZhciBlbDIgPSB0eXBlID09PSAncGFuJyA/IHRoaXMuZWxab29tIDogdGhpcy5lbFBhbjtcblxuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKHRoaXMuc2VsZWN0ZWRDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwyKSB7XG4gICAgICAgICAgZWwyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zZWxlY3RlZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b2dnbGVQYW5uaW5nXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlUGFubmluZygpIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdGhlckNvbnRyb2xzKCk7XG4gICAgICAgIHRoaXMudy5nbG9iYWxzLnBhbkVuYWJsZWQgPSAhdGhpcy53Lmdsb2JhbHMucGFuRW5hYmxlZDtcblxuICAgICAgICBpZiAoIXRoaXMuZWxQYW4uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuc2VsZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgICB0aGlzLmVsUGFuLmNsYXNzTGlzdC5hZGQodGhpcy5zZWxlY3RlZENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVsUGFuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zZWxlY3RlZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b2dnbGVPdGhlckNvbnRyb2xzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlT3RoZXJDb250cm9scygpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHcuZ2xvYmFscy5wYW5FbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHcuZ2xvYmFscy56b29tRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB3Lmdsb2JhbHMuc2VsZWN0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdldFRvb2xiYXJJY29uc1JlZmVyZW5jZSgpO1xuICAgICAgICB2YXIgdG9nZ2xlRWxzID0gW3RoaXMuZWxQYW4sIHRoaXMuZWxTZWxlY3Rpb24sIHRoaXMuZWxab29tXTtcbiAgICAgICAgdG9nZ2xlRWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKF90aGlzMy5zZWxlY3RlZENsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVab29tSW5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVab29tSW4oKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgY2VudGVyWCA9ICh3Lmdsb2JhbHMubWluWCArIHcuZ2xvYmFscy5tYXhYKSAvIDI7XG4gICAgICAgIHZhciBuZXdNaW5YID0gKHcuZ2xvYmFscy5taW5YICsgY2VudGVyWCkgLyAyO1xuICAgICAgICB2YXIgbmV3TWF4WCA9ICh3Lmdsb2JhbHMubWF4WCArIGNlbnRlclgpIC8gMjtcblxuICAgICAgICB2YXIgbmV3TWluWE1heFggPSB0aGlzLl9nZXROZXdNaW5YTWF4WChuZXdNaW5YLCBuZXdNYXhYKTtcblxuICAgICAgICBpZiAoIXcuZ2xvYmFscy5kaXNhYmxlWm9vbUluKSB7XG4gICAgICAgICAgdGhpcy56b29tVXBkYXRlT3B0aW9ucyhuZXdNaW5YTWF4WC5taW5YLCBuZXdNaW5YTWF4WC5tYXhYKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVab29tT3V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlWm9vbU91dCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIGF2b2lkIHpvb21pbmcgb3V0IGJleW9uZCAxMDAwIHdoaWNoIG1heSByZXN1bHQgaW4gTmFOIHZhbHVlcyBiZWluZyBwcmludGVkIG9uIHgtYXhpc1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy50eXBlID09PSAnZGF0ZXRpbWUnICYmIG5ldyBEYXRlKHcuZ2xvYmFscy5taW5YKS5nZXRVVENGdWxsWWVhcigpIDwgMTAwMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjZW50ZXJYID0gKHcuZ2xvYmFscy5taW5YICsgdy5nbG9iYWxzLm1heFgpIC8gMjtcbiAgICAgICAgdmFyIG5ld01pblggPSB3Lmdsb2JhbHMubWluWCAtIChjZW50ZXJYIC0gdy5nbG9iYWxzLm1pblgpO1xuICAgICAgICB2YXIgbmV3TWF4WCA9IHcuZ2xvYmFscy5tYXhYIC0gKGNlbnRlclggLSB3Lmdsb2JhbHMubWF4WCk7XG5cbiAgICAgICAgdmFyIG5ld01pblhNYXhYID0gdGhpcy5fZ2V0TmV3TWluWE1heFgobmV3TWluWCwgbmV3TWF4WCk7XG5cbiAgICAgICAgaWYgKCF3Lmdsb2JhbHMuZGlzYWJsZVpvb21PdXQpIHtcbiAgICAgICAgICB0aGlzLnpvb21VcGRhdGVPcHRpb25zKG5ld01pblhNYXhYLm1pblgsIG5ld01pblhNYXhYLm1heFgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXROZXdNaW5YTWF4WFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXROZXdNaW5YTWF4WChuZXdNaW5YLCBuZXdNYXhYKSB7XG4gICAgICAgIHZhciBzaG91bGRGbG9vciA9IHRoaXMudy5jb25maWcueGF4aXMuY29udmVydGVkQ2F0VG9OdW1lcmljO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1pblg6IHNob3VsZEZsb29yID8gTWF0aC5mbG9vcihuZXdNaW5YKSA6IG5ld01pblgsXG4gICAgICAgICAgbWF4WDogc2hvdWxkRmxvb3IgPyBNYXRoLmZsb29yKG5ld01heFgpIDogbmV3TWF4WFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ6b29tVXBkYXRlT3B0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHpvb21VcGRhdGVPcHRpb25zKG5ld01pblgsIG5ld01heFgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYykge1xuICAgICAgICAgIC8vIGluIGNhdGVnb3J5IGNoYXJ0cywgYXZvaWQgem9vbWluZyBvdXQgYmV5b25kIG1pbiBhbmQgbWF4XG4gICAgICAgICAgaWYgKG5ld01pblggPCAxKSB7XG4gICAgICAgICAgICBuZXdNaW5YID0gMTtcbiAgICAgICAgICAgIG5ld01heFggPSB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobmV3TWF4WCAtIG5ld01pblggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHhheGlzID0ge1xuICAgICAgICAgIG1pbjogbmV3TWluWCxcbiAgICAgICAgICBtYXg6IG5ld01heFhcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJlZm9yZVpvb21SYW5nZSA9IHRoaXMuZ2V0QmVmb3JlWm9vbVJhbmdlKHhheGlzKTtcblxuICAgICAgICBpZiAoYmVmb3JlWm9vbVJhbmdlKSB7XG4gICAgICAgICAgeGF4aXMgPSBiZWZvcmVab29tUmFuZ2UueGF4aXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICB4YXhpczogeGF4aXNcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHlheGlzID0gVXRpbHMuY2xvbmUody5nbG9iYWxzLmluaXRpYWxDb25maWcueWF4aXMpO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC56b29tLmF1dG9TY2FsZVlheGlzKSB7XG4gICAgICAgICAgdmFyIHNjYWxlID0gbmV3IFJhbmdlKHRoaXMuY3R4KTtcbiAgICAgICAgICB5YXhpcyA9IHNjYWxlLmF1dG9TY2FsZVkodGhpcy5jdHgsIHlheGlzLCB7XG4gICAgICAgICAgICB4YXhpczogeGF4aXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdy5jb25maWcuY2hhcnQuZ3JvdXApIHtcbiAgICAgICAgICAvLyBpZiBjaGFydCBpbiBhIGdyb3VwLCBwcmV2ZW50IHlheGlzIHVwZGF0ZSBoZXJlXG4gICAgICAgICAgLy8gZml4IGlzc3VlICM2NTBcbiAgICAgICAgICBvcHRpb25zLnlheGlzID0geWF4aXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLncuZ2xvYmFscy56b29tZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuY3R4LnVwZGF0ZUhlbHBlcnMuX3VwZGF0ZU9wdGlvbnMob3B0aW9ucywgZmFsc2UsIHRoaXMudy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5keW5hbWljQW5pbWF0aW9uLmVuYWJsZWQpO1xuXG4gICAgICAgIHRoaXMuem9vbUNhbGxiYWNrKHhheGlzLCB5YXhpcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInpvb21DYWxsYmFja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHpvb21DYWxsYmFjayh4YXhpcywgeWF4aXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmV2Lnpvb21lZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMuZXYuem9vbWVkKHRoaXMuY3R4LCB7XG4gICAgICAgICAgICB4YXhpczogeGF4aXMsXG4gICAgICAgICAgICB5YXhpczogeWF4aXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRCZWZvcmVab29tUmFuZ2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCZWZvcmVab29tUmFuZ2UoeGF4aXMsIHlheGlzKSB7XG4gICAgICAgIHZhciBuZXdSYW5nZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmV2LmJlZm9yZVpvb20gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBuZXdSYW5nZSA9IHRoaXMuZXYuYmVmb3JlWm9vbSh0aGlzLCB7XG4gICAgICAgICAgICB4YXhpczogeGF4aXMsXG4gICAgICAgICAgICB5YXhpczogeWF4aXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdSYW5nZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9nZ2xlTWVudVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZU1lbnUoKSB7XG4gICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXM0LmVsTWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ2FwZXhjaGFydHMtbWVudS1vcGVuJykpIHtcbiAgICAgICAgICAgIF90aGlzNC5lbE1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnYXBleGNoYXJ0cy1tZW51LW9wZW4nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXM0LmVsTWVudS5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLW1lbnUtb3BlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZURvd25sb2FkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRG93bmxvYWQodHlwZSkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGV4cHJ0ID0gbmV3IEV4cG9ydHModGhpcy5jdHgpO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICAgICAgICBleHBydC5leHBvcnRUb1NWRyh0aGlzLmN0eCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3BuZyc6XG4gICAgICAgICAgICBleHBydC5leHBvcnRUb1BuZyh0aGlzLmN0eCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2Nzdic6XG4gICAgICAgICAgICBleHBydC5leHBvcnRUb0NTVih7XG4gICAgICAgICAgICAgIHNlcmllczogdy5jb25maWcuc2VyaWVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZVpvb21SZXNldFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVpvb21SZXNldChlKSB7XG4gICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgIHZhciBjaGFydHMgPSB0aGlzLmN0eC5nZXRTeW5jZWRDaGFydHMoKTtcbiAgICAgICAgY2hhcnRzLmZvckVhY2goZnVuY3Rpb24gKGNoKSB7XG4gICAgICAgICAgdmFyIHcgPSBjaC53O1xuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5taW5YICE9PSB3Lmdsb2JhbHMuaW5pdGlhbE1pblggfHwgdy5nbG9iYWxzLm1heFggIT09IHcuZ2xvYmFscy5pbml0aWFsTWF4WCkge1xuICAgICAgICAgICAgY2gudXBkYXRlSGVscGVycy5yZXZlcnREZWZhdWx0QXhpc01pbk1heCgpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy56b29tZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgX3RoaXM1Lnpvb21DYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgbWluOiB3LmNvbmZpZy54YXhpcy5taW4sXG4gICAgICAgICAgICAgICAgbWF4OiB3LmNvbmZpZy54YXhpcy5tYXhcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHcuZ2xvYmFscy56b29tZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgY2gudXBkYXRlSGVscGVycy5fdXBkYXRlU2VyaWVzKHcuZ2xvYmFscy5pbml0aWFsU2VyaWVzLCB3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmR5bmFtaWNBbmltYXRpb24uZW5hYmxlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZWxab29tID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbFpvb21JbiA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxab29tT3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbFBhbiA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmVsWm9vbVJlc2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbE1lbnVJY29uID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVG9vbGJhcjtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIFpvb20gQ2xhc3MgZm9yIGhhbmRsaW5nIHpvb21pbmcgYW5kIHBhbm5pbmcgb24gYXhlcyBiYXNlZCBjaGFydHMuXG4gICAqXG4gICAqIEBtb2R1bGUgWm9vbVBhblNlbGVjdGlvblxuICAgKiovXG5cbiAgdmFyIFpvb21QYW5TZWxlY3Rpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Ub29sYmFyKSB7XG4gICAgX2luaGVyaXRzKFpvb21QYW5TZWxlY3Rpb24sIF9Ub29sYmFyKTtcblxuICAgIGZ1bmN0aW9uIFpvb21QYW5TZWxlY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBab29tUGFuU2VsZWN0aW9uKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoWm9vbVBhblNlbGVjdGlvbikuY2FsbCh0aGlzLCBjdHgpKTtcbiAgICAgIF90aGlzLmN0eCA9IGN0eDtcbiAgICAgIF90aGlzLncgPSBjdHgudztcbiAgICAgIF90aGlzLmRyYWdnZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKF90aGlzLmN0eCk7XG4gICAgICBfdGhpcy5ldmVudExpc3QgPSBbJ21vdXNlZG93bicsICdtb3VzZWxlYXZlJywgJ21vdXNlbW92ZScsICd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICdtb3VzZXVwJywgJ3RvdWNoZW5kJ107XG4gICAgICBfdGhpcy5jbGllbnRYID0gMDtcbiAgICAgIF90aGlzLmNsaWVudFkgPSAwO1xuICAgICAgX3RoaXMuc3RhcnRYID0gMDtcbiAgICAgIF90aGlzLmVuZFggPSAwO1xuICAgICAgX3RoaXMuZHJhZ1ggPSAwO1xuICAgICAgX3RoaXMuc3RhcnRZID0gMDtcbiAgICAgIF90aGlzLmVuZFkgPSAwO1xuICAgICAgX3RoaXMuZHJhZ1kgPSAwO1xuICAgICAgX3RoaXMubW92ZURpcmVjdGlvbiA9ICdub25lJztcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoWm9vbVBhblNlbGVjdGlvbiwgW3tcbiAgICAgIGtleTogXCJpbml0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChfcmVmKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciB4eVJhdGlvcyA9IF9yZWYueHlSYXRpb3M7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB0aGlzLnh5UmF0aW9zID0geHlSYXRpb3M7XG4gICAgICAgIHRoaXMuem9vbVJlY3QgPSB0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KDAsIDAsIDAsIDApO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblJlY3QgPSB0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KDAsIDAsIDAsIDApO1xuICAgICAgICB0aGlzLmdyaWRSZWN0ID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtZ3JpZCcpO1xuICAgICAgICB0aGlzLnpvb21SZWN0Lm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy16b29tLXJlY3QnKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25SZWN0Lm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1zZWxlY3Rpb24tcmVjdCcpO1xuICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsR3JhcGhpY2FsLmFkZCh0aGlzLnpvb21SZWN0KTtcbiAgICAgICAgdy5nbG9iYWxzLmRvbS5lbEdyYXBoaWNhbC5hZGQodGhpcy5zZWxlY3Rpb25SZWN0KTtcblxuICAgICAgICBpZiAody5jb25maWcuY2hhcnQuc2VsZWN0aW9uLnR5cGUgPT09ICd4Jykge1xuICAgICAgICAgIHRoaXMuc2xEcmFnZ2FibGVSZWN0ID0gdGhpcy5zZWxlY3Rpb25SZWN0LmRyYWdnYWJsZSh7XG4gICAgICAgICAgICBtaW5YOiAwLFxuICAgICAgICAgICAgbWluWTogMCxcbiAgICAgICAgICAgIG1heFg6IHcuZ2xvYmFscy5ncmlkV2lkdGgsXG4gICAgICAgICAgICBtYXhZOiB3Lmdsb2JhbHMuZ3JpZEhlaWdodFxuICAgICAgICAgIH0pLm9uKCdkcmFnbW92ZScsIHRoaXMuc2VsZWN0aW9uRHJhZ2dpbmcuYmluZCh0aGlzLCAnZHJhZ2dpbmcnKSk7XG4gICAgICAgIH0gZWxzZSBpZiAody5jb25maWcuY2hhcnQuc2VsZWN0aW9uLnR5cGUgPT09ICd5Jykge1xuICAgICAgICAgIHRoaXMuc2xEcmFnZ2FibGVSZWN0ID0gdGhpcy5zZWxlY3Rpb25SZWN0LmRyYWdnYWJsZSh7XG4gICAgICAgICAgICBtaW5YOiAwLFxuICAgICAgICAgICAgbWF4WDogdy5nbG9iYWxzLmdyaWRXaWR0aFxuICAgICAgICAgIH0pLm9uKCdkcmFnbW92ZScsIHRoaXMuc2VsZWN0aW9uRHJhZ2dpbmcuYmluZCh0aGlzLCAnZHJhZ2dpbmcnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zbERyYWdnYWJsZVJlY3QgPSB0aGlzLnNlbGVjdGlvblJlY3QuZHJhZ2dhYmxlKCkub24oJ2RyYWdtb3ZlJywgdGhpcy5zZWxlY3Rpb25EcmFnZ2luZy5iaW5kKHRoaXMsICdkcmFnZ2luZycpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJlc2VsZWN0ZWRTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5ob3ZlckFyZWEgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKHcuZ2xvYmFscy5jaGFydENsYXNzKTtcbiAgICAgICAgdGhpcy5ob3ZlckFyZWEuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy16b29tYWJsZScpO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIF90aGlzMi5ob3ZlckFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbWUuc3ZnTW91c2VFdmVudHMuYmluZChtZSwgeHlSYXRpb3MpLCB7XG4gICAgICAgICAgICBjYXB0dXJlOiBmYWxzZSxcbiAgICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXJzIHdoaWNoIHdlcmUgcHJldmlvdXNseSBhZGRlZCBvbiBob3ZlciBhcmVhXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnNsRHJhZ2dhYmxlUmVjdCkge1xuICAgICAgICAgIHRoaXMuc2xEcmFnZ2FibGVSZWN0LmRyYWdnYWJsZShmYWxzZSk7XG4gICAgICAgICAgdGhpcy5zbERyYWdnYWJsZVJlY3Qub2ZmKCk7XG4gICAgICAgICAgdGhpcy5zZWxlY3Rpb25SZWN0Lm9mZigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25SZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy56b29tUmVjdCA9IG51bGw7XG4gICAgICAgIHRoaXMuZ3JpZFJlY3QgPSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdmdNb3VzZUV2ZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN2Z01vdXNlRXZlbnRzKHh5UmF0aW9zLCBlKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB2YXIgdG9vbGJhciA9IHRoaXMuY3R4LnRvb2xiYXI7XG4gICAgICAgIHZhciB6b29tdHlwZSA9IHcuZ2xvYmFscy56b29tRW5hYmxlZCA/IHcuY29uZmlnLmNoYXJ0Lnpvb20udHlwZSA6IHcuY29uZmlnLmNoYXJ0LnNlbGVjdGlvbi50eXBlO1xuXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgdGhpcy5zaGlmdFdhc1ByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgIHRvb2xiYXIuZW5hYmxlWm9vbVBhbkZyb21Ub29sYmFyKCdwYW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5zaGlmdFdhc1ByZXNzZWQpIHtcbiAgICAgICAgICAgIHRvb2xiYXIuZW5hYmxlWm9vbVBhbkZyb21Ub29sYmFyKCd6b29tJyk7XG4gICAgICAgICAgICB0aGlzLnNoaWZ0V2FzUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmYWxzZVBvc2l0aXZlcyA9IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXBleGNoYXJ0cy1zZWxlY3Rpb24tcmVjdCcpIHx8IGUudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcGV4Y2hhcnRzLXRvb2xiYXInKTtcbiAgICAgICAgaWYgKGZhbHNlUG9zaXRpdmVzKSByZXR1cm47XG4gICAgICAgIG1lLmNsaWVudFggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnIHx8IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50b3VjaGVzWzBdLmNsaWVudFggOiBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG4gICAgICAgIG1lLmNsaWVudFkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnIHx8IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50b3VjaGVzWzBdLmNsaWVudFkgOiBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFk7XG5cbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZS53aGljaCA9PT0gMSkge1xuICAgICAgICAgIHZhciBncmlkUmVjdERpbSA9IG1lLmdyaWRSZWN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIG1lLnN0YXJ0WCA9IG1lLmNsaWVudFggLSBncmlkUmVjdERpbS5sZWZ0O1xuICAgICAgICAgIG1lLnN0YXJ0WSA9IG1lLmNsaWVudFkgLSBncmlkUmVjdERpbS50b3A7XG4gICAgICAgICAgbWUuZHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgICAgIG1lLncuZ2xvYmFscy5tb3VzZWRvd24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgJiYgZS53aGljaCA9PT0gMSB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgICAgbWUuZHJhZ2dlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLnBhbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIHcuZ2xvYmFscy5zZWxlY3Rpb24gPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAobWUudy5nbG9iYWxzLm1vdXNlZG93bikge1xuICAgICAgICAgICAgICBtZS5wYW5EcmFnZ2luZyh7XG4gICAgICAgICAgICAgICAgY29udGV4dDogbWUsXG4gICAgICAgICAgICAgICAgem9vbXR5cGU6IHpvb210eXBlLFxuICAgICAgICAgICAgICAgIHh5UmF0aW9zOiB4eVJhdGlvc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1lLncuZ2xvYmFscy5tb3VzZWRvd24gJiYgdy5nbG9iYWxzLnpvb21FbmFibGVkIHx8IG1lLncuZ2xvYmFscy5tb3VzZWRvd24gJiYgdy5nbG9iYWxzLnNlbGVjdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uID0gbWUuc2VsZWN0aW9uRHJhd2luZyh7XG4gICAgICAgICAgICAgICAgY29udGV4dDogbWUsXG4gICAgICAgICAgICAgICAgem9vbXR5cGU6IHpvb210eXBlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZXVwJyB8fCBlLnR5cGUgPT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAnbW91c2VsZWF2ZScpIHtcbiAgICAgICAgICAvLyB3ZSB3aWxsIGJlIGNhbGxpbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGVhY2ggbW91c2Vkb3duL21vdXNlbW92ZS9tb3VzZXVwXG4gICAgICAgICAgdmFyIF9ncmlkUmVjdERpbSA9IG1lLmdyaWRSZWN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgaWYgKG1lLncuZ2xvYmFscy5tb3VzZWRvd24pIHtcbiAgICAgICAgICAgIC8vIHVzZXIgcmVsZWFzZWQgdGhlIGRyYWcsIG5vdyBkbyBhbGwgdGhlIGNhbGN1bGF0aW9uc1xuICAgICAgICAgICAgbWUuZW5kWCA9IG1lLmNsaWVudFggLSBfZ3JpZFJlY3REaW0ubGVmdDtcbiAgICAgICAgICAgIG1lLmVuZFkgPSBtZS5jbGllbnRZIC0gX2dyaWRSZWN0RGltLnRvcDtcbiAgICAgICAgICAgIG1lLmRyYWdYID0gTWF0aC5hYnMobWUuZW5kWCAtIG1lLnN0YXJ0WCk7XG4gICAgICAgICAgICBtZS5kcmFnWSA9IE1hdGguYWJzKG1lLmVuZFkgLSBtZS5zdGFydFkpO1xuXG4gICAgICAgICAgICBpZiAody5nbG9iYWxzLnpvb21FbmFibGVkIHx8IHcuZ2xvYmFscy5zZWxlY3Rpb25FbmFibGVkKSB7XG4gICAgICAgICAgICAgIG1lLnNlbGVjdGlvbkRyYXduKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0OiBtZSxcbiAgICAgICAgICAgICAgICB6b29tdHlwZTogem9vbXR5cGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMucGFuRW5hYmxlZCAmJiB3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICAgICAgbWUuZGVsYXllZFBhblNjcm9sbGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy56b29tRW5hYmxlZCkge1xuICAgICAgICAgICAgbWUuaGlkZVNlbGVjdGlvblJlY3QodGhpcy5zZWxlY3Rpb25SZWN0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZS5kcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgICAgbWUudy5nbG9iYWxzLm1vdXNlZG93biA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYWtlU2VsZWN0aW9uUmVjdERyYWdnYWJsZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYWtlU2VsZWN0aW9uUmVjdERyYWdnYWJsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VTZWxlY3Rpb25SZWN0RHJhZ2dhYmxlKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvblJlY3QpIHJldHVybjtcbiAgICAgICAgdmFyIHJlY3REaW0gPSB0aGlzLnNlbGVjdGlvblJlY3Qubm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocmVjdERpbS53aWR0aCA+IDAgJiYgcmVjdERpbS5oZWlnaHQgPiAwKSB7XG4gICAgICAgICAgdGhpcy5zbERyYWdnYWJsZVJlY3Quc2VsZWN0aXplKHtcbiAgICAgICAgICAgIHBvaW50czogJ2wsIHInLFxuICAgICAgICAgICAgcG9pbnRTaXplOiA4LFxuICAgICAgICAgICAgcG9pbnRUeXBlOiAncmVjdCdcbiAgICAgICAgICB9KS5yZXNpemUoe1xuICAgICAgICAgICAgY29uc3RyYWludDoge1xuICAgICAgICAgICAgICBtaW5YOiAwLFxuICAgICAgICAgICAgICBtaW5ZOiAwLFxuICAgICAgICAgICAgICBtYXhYOiB3Lmdsb2JhbHMuZ3JpZFdpZHRoLFxuICAgICAgICAgICAgICBtYXhZOiB3Lmdsb2JhbHMuZ3JpZEhlaWdodFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLm9uKCdyZXNpemluZycsIHRoaXMuc2VsZWN0aW9uRHJhZ2dpbmcuYmluZCh0aGlzLCAncmVzaXppbmcnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicHJlc2VsZWN0ZWRTZWxlY3Rpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVzZWxlY3RlZFNlbGVjdGlvbigpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB4eVJhdGlvcyA9IHRoaXMueHlSYXRpb3M7XG5cbiAgICAgICAgaWYgKCF3Lmdsb2JhbHMuem9vbUVuYWJsZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHcuZ2xvYmFscy5zZWxlY3Rpb24gIT09ICd1bmRlZmluZWQnICYmIHcuZ2xvYmFscy5zZWxlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1NlbGVjdGlvblJlY3Qody5nbG9iYWxzLnNlbGVjdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5zZWxlY3Rpb24ueGF4aXMubWluICE9PSB1bmRlZmluZWQgJiYgdy5jb25maWcuY2hhcnQuc2VsZWN0aW9uLnhheGlzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHZhciB4ID0gKHcuY29uZmlnLmNoYXJ0LnNlbGVjdGlvbi54YXhpcy5taW4gLSB3Lmdsb2JhbHMubWluWCkgLyB4eVJhdGlvcy54UmF0aW87XG4gICAgICAgICAgICAgIHZhciB3aWR0aCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLSAody5nbG9iYWxzLm1heFggLSB3LmNvbmZpZy5jaGFydC5zZWxlY3Rpb24ueGF4aXMubWF4KSAvIHh5UmF0aW9zLnhSYXRpbyAtIHg7XG4gICAgICAgICAgICAgIHZhciBzZWxlY3Rpb25SZWN0ID0ge1xuICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB3Lmdsb2JhbHMuZ3JpZEhlaWdodCxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVYOiAwLFxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVk6IDAsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uRW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB0aGlzLmRyYXdTZWxlY3Rpb25SZWN0KHNlbGVjdGlvblJlY3QpO1xuICAgICAgICAgICAgICB0aGlzLm1ha2VTZWxlY3Rpb25SZWN0RHJhZ2dhYmxlKCk7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy5jaGFydC5ldmVudHMuc2VsZWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdy5jb25maWcuY2hhcnQuZXZlbnRzLnNlbGVjdGlvbih0aGlzLmN0eCwge1xuICAgICAgICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbWluOiB3LmNvbmZpZy5jaGFydC5zZWxlY3Rpb24ueGF4aXMubWluLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IHcuY29uZmlnLmNoYXJ0LnNlbGVjdGlvbi54YXhpcy5tYXhcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB5YXhpczoge31cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3U2VsZWN0aW9uUmVjdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdTZWxlY3Rpb25SZWN0KF9yZWYyKSB7XG4gICAgICAgIHZhciB4ID0gX3JlZjIueCxcbiAgICAgICAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgICAgICAgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodCxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVggPSBfcmVmMi50cmFuc2xhdGVYLFxuICAgICAgICAgICAgdHJhbnNsYXRlWSA9IF9yZWYyLnRyYW5zbGF0ZVk7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgem9vbVJlY3QgPSB0aGlzLnpvb21SZWN0O1xuICAgICAgICB2YXIgc2VsZWN0aW9uUmVjdCA9IHRoaXMuc2VsZWN0aW9uUmVjdDtcblxuICAgICAgICBpZiAodGhpcy5kcmFnZ2VkIHx8IHcuZ2xvYmFscy5zZWxlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgc2NhbGluZ0F0dHJzID0ge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKCcgKyB0cmFuc2xhdGVYICsgJywgJyArIHRyYW5zbGF0ZVkgKyAnKSdcbiAgICAgICAgICB9OyAvLyBjaGFuZ2Ugc3R5bGVzIGJhc2VkIG9uIHpvb20gb3Igc2VsZWN0aW9uXG4gICAgICAgICAgLy8gem9vbSBpcyBFbmFibGVkIGFuZCB1c2VyIGhhcyBkcmFnZ2VkLCBzbyBkcmF3IGJsdWUgcmVjdFxuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy56b29tRW5hYmxlZCAmJiB0aGlzLmRyYWdnZWQpIHtcbiAgICAgICAgICAgIGlmICh3aWR0aCA8IDApIHdpZHRoID0gMTsgLy8gZml4ZXMgYXBleGNoYXJ0cy5qcyMxMTY4XG5cbiAgICAgICAgICAgIHpvb21SZWN0LmF0dHIoe1xuICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICBmaWxsOiB3LmNvbmZpZy5jaGFydC56b29tLnpvb21lZEFyZWEuZmlsbC5jb2xvcixcbiAgICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHcuY29uZmlnLmNoYXJ0Lnpvb20uem9vbWVkQXJlYS5maWxsLm9wYWNpdHksXG4gICAgICAgICAgICAgIHN0cm9rZTogdy5jb25maWcuY2hhcnQuem9vbS56b29tZWRBcmVhLnN0cm9rZS5jb2xvcixcbiAgICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IHcuY29uZmlnLmNoYXJ0Lnpvb20uem9vbWVkQXJlYS5zdHJva2Uud2lkdGgsXG4gICAgICAgICAgICAgICdzdHJva2Utb3BhY2l0eSc6IHcuY29uZmlnLmNoYXJ0Lnpvb20uem9vbWVkQXJlYS5zdHJva2Uub3BhY2l0eVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBHcmFwaGljcy5zZXRBdHRycyh6b29tUmVjdC5ub2RlLCBzY2FsaW5nQXR0cnMpO1xuICAgICAgICAgIH0gLy8gc2VsZWN0aW9uIGlzIGVuYWJsZWRcblxuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5zZWxlY3Rpb25FbmFibGVkKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25SZWN0LmF0dHIoe1xuICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICB3aWR0aDogd2lkdGggPiAwID8gd2lkdGggOiAwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCA+IDAgPyBoZWlnaHQgOiAwLFxuICAgICAgICAgICAgICBmaWxsOiB3LmNvbmZpZy5jaGFydC5zZWxlY3Rpb24uZmlsbC5jb2xvcixcbiAgICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHcuY29uZmlnLmNoYXJ0LnNlbGVjdGlvbi5maWxsLm9wYWNpdHksXG4gICAgICAgICAgICAgIHN0cm9rZTogdy5jb25maWcuY2hhcnQuc2VsZWN0aW9uLnN0cm9rZS5jb2xvcixcbiAgICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IHcuY29uZmlnLmNoYXJ0LnNlbGVjdGlvbi5zdHJva2Uud2lkdGgsXG4gICAgICAgICAgICAgICdzdHJva2UtZGFzaGFycmF5Jzogdy5jb25maWcuY2hhcnQuc2VsZWN0aW9uLnN0cm9rZS5kYXNoQXJyYXksXG4gICAgICAgICAgICAgICdzdHJva2Utb3BhY2l0eSc6IHcuY29uZmlnLmNoYXJ0LnNlbGVjdGlvbi5zdHJva2Uub3BhY2l0eVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBHcmFwaGljcy5zZXRBdHRycyhzZWxlY3Rpb25SZWN0Lm5vZGUsIHNjYWxpbmdBdHRycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhpZGVTZWxlY3Rpb25SZWN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZVNlbGVjdGlvblJlY3QocmVjdCkge1xuICAgICAgICBpZiAocmVjdCkge1xuICAgICAgICAgIHJlY3QuYXR0cih7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2VsZWN0aW9uRHJhd2luZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdGlvbkRyYXdpbmcoX3JlZjMpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBfcmVmMy5jb250ZXh0LFxuICAgICAgICAgICAgem9vbXR5cGUgPSBfcmVmMy56b29tdHlwZTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBtZSA9IGNvbnRleHQ7XG4gICAgICAgIHZhciBncmlkUmVjdERpbSA9IHRoaXMuZ3JpZFJlY3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBzdGFydFggPSBtZS5zdGFydFggLSAxO1xuICAgICAgICB2YXIgc3RhcnRZID0gbWUuc3RhcnRZO1xuICAgICAgICB2YXIgc2VsZWN0aW9uV2lkdGggPSBtZS5jbGllbnRYIC0gZ3JpZFJlY3REaW0ubGVmdCAtIHN0YXJ0WDtcbiAgICAgICAgdmFyIHNlbGVjdGlvbkhlaWdodCA9IG1lLmNsaWVudFkgLSBncmlkUmVjdERpbS50b3AgLSBzdGFydFk7XG4gICAgICAgIHZhciB0cmFuc2xhdGVYID0gMDtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgICB2YXIgc2VsZWN0aW9uUmVjdCA9IHt9O1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhzZWxlY3Rpb25XaWR0aCArIHN0YXJ0WCkgPiB3Lmdsb2JhbHMuZ3JpZFdpZHRoKSB7XG4gICAgICAgICAgLy8gdXNlciBkcmFnZ2VkIHRoZSBtb3VzZSBvdXRzaWRlIGRyYXdpbmcgYXJlYSB0byB0aGUgcmlnaHRcbiAgICAgICAgICBzZWxlY3Rpb25XaWR0aCA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLSBzdGFydFg7XG4gICAgICAgIH0gZWxzZSBpZiAobWUuY2xpZW50WCAtIGdyaWRSZWN0RGltLmxlZnQgPCAwKSB7XG4gICAgICAgICAgLy8gdXNlciBkcmFnZ2VkIHRoZSBtb3VzZSBvdXRzaWRlIGRyYXdpbmcgYXJlYSB0byB0aGUgbGVmdFxuICAgICAgICAgIHNlbGVjdGlvbldpZHRoID0gc3RhcnRYO1xuICAgICAgICB9IC8vIGludmVyc2Ugc2VsZWN0aW9uIFhcblxuXG4gICAgICAgIGlmIChzdGFydFggPiBtZS5jbGllbnRYIC0gZ3JpZFJlY3REaW0ubGVmdCkge1xuICAgICAgICAgIHNlbGVjdGlvbldpZHRoID0gTWF0aC5hYnMoc2VsZWN0aW9uV2lkdGgpO1xuICAgICAgICAgIHRyYW5zbGF0ZVggPSAtc2VsZWN0aW9uV2lkdGg7XG4gICAgICAgIH0gLy8gaW52ZXJzZSBzZWxlY3Rpb24gWVxuXG5cbiAgICAgICAgaWYgKHN0YXJ0WSA+IG1lLmNsaWVudFkgLSBncmlkUmVjdERpbS50b3ApIHtcbiAgICAgICAgICBzZWxlY3Rpb25IZWlnaHQgPSBNYXRoLmFicyhzZWxlY3Rpb25IZWlnaHQpO1xuICAgICAgICAgIHRyYW5zbGF0ZVkgPSAtc2VsZWN0aW9uSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHpvb210eXBlID09PSAneCcpIHtcbiAgICAgICAgICBzZWxlY3Rpb25SZWN0ID0ge1xuICAgICAgICAgICAgeDogc3RhcnRYLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHdpZHRoOiBzZWxlY3Rpb25XaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdy5nbG9iYWxzLmdyaWRIZWlnaHQsXG4gICAgICAgICAgICB0cmFuc2xhdGVYOiB0cmFuc2xhdGVYLFxuICAgICAgICAgICAgdHJhbnNsYXRlWTogMFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoem9vbXR5cGUgPT09ICd5Jykge1xuICAgICAgICAgIHNlbGVjdGlvblJlY3QgPSB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogc3RhcnRZLFxuICAgICAgICAgICAgd2lkdGg6IHcuZ2xvYmFscy5ncmlkV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHNlbGVjdGlvbkhlaWdodCxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgICAgICAgICB0cmFuc2xhdGVZOiB0cmFuc2xhdGVZXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3Rpb25SZWN0ID0ge1xuICAgICAgICAgICAgeDogc3RhcnRYLFxuICAgICAgICAgICAgeTogc3RhcnRZLFxuICAgICAgICAgICAgd2lkdGg6IHNlbGVjdGlvbldpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBzZWxlY3Rpb25IZWlnaHQsXG4gICAgICAgICAgICB0cmFuc2xhdGVYOiB0cmFuc2xhdGVYLFxuICAgICAgICAgICAgdHJhbnNsYXRlWTogdHJhbnNsYXRlWVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBtZS5kcmF3U2VsZWN0aW9uUmVjdChzZWxlY3Rpb25SZWN0KTtcbiAgICAgICAgbWUuc2VsZWN0aW9uRHJhZ2dpbmcoJ3Jlc2l6aW5nJyk7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25SZWN0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZWxlY3Rpb25EcmFnZ2luZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdGlvbkRyYWdnaW5nKHR5cGUsIGUpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB4eVJhdGlvcyA9IHRoaXMueHlSYXRpb3M7XG4gICAgICAgIHZhciBzZWxSZWN0ID0gdGhpcy5zZWxlY3Rpb25SZWN0O1xuICAgICAgICB2YXIgdGltZXJJbnRlcnZhbCA9IDA7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdyZXNpemluZycpIHtcbiAgICAgICAgICB0aW1lckludGVydmFsID0gMzA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5zZWxlY3Rpb24gPT09ICdmdW5jdGlvbicgJiYgdy5nbG9iYWxzLnNlbGVjdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAvLyBhIHNtYWxsIGRlYm91bmNlciBpcyByZXF1aXJlZCB3aGVuIHJlc2l6aW5nIHRvIGF2b2lkIGZyZWV6aW5nIHRoZSBjaGFydFxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLncuZ2xvYmFscy5zZWxlY3Rpb25SZXNpemVUaW1lcik7XG4gICAgICAgICAgdGhpcy53Lmdsb2JhbHMuc2VsZWN0aW9uUmVzaXplVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZ3JpZFJlY3REaW0gPSBfdGhpczMuZ3JpZFJlY3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25SZWN0ID0gc2VsUmVjdC5ub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIG1pblggPSB3Lmdsb2JhbHMueEF4aXNTY2FsZS5uaWNlTWluICsgKHNlbGVjdGlvblJlY3QubGVmdCAtIGdyaWRSZWN0RGltLmxlZnQpICogeHlSYXRpb3MueFJhdGlvO1xuICAgICAgICAgICAgdmFyIG1heFggPSB3Lmdsb2JhbHMueEF4aXNTY2FsZS5uaWNlTWluICsgKHNlbGVjdGlvblJlY3QucmlnaHQgLSBncmlkUmVjdERpbS5sZWZ0KSAqIHh5UmF0aW9zLnhSYXRpbztcbiAgICAgICAgICAgIHZhciBtaW5ZID0gdy5nbG9iYWxzLnlBeGlzU2NhbGVbMF0ubmljZU1pbiArIChncmlkUmVjdERpbS5ib3R0b20gLSBzZWxlY3Rpb25SZWN0LmJvdHRvbSkgKiB4eVJhdGlvcy55UmF0aW9bMF07XG4gICAgICAgICAgICB2YXIgbWF4WSA9IHcuZ2xvYmFscy55QXhpc1NjYWxlWzBdLm5pY2VNYXggLSAoc2VsZWN0aW9uUmVjdC50b3AgLSBncmlkUmVjdERpbS50b3ApICogeHlSYXRpb3MueVJhdGlvWzBdO1xuICAgICAgICAgICAgdy5jb25maWcuY2hhcnQuZXZlbnRzLnNlbGVjdGlvbihfdGhpczMuY3R4LCB7XG4gICAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgbWluOiBtaW5YLFxuICAgICAgICAgICAgICAgIG1heDogbWF4WFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogbWluWSxcbiAgICAgICAgICAgICAgICBtYXg6IG1heFlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgdGltZXJJbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2VsZWN0aW9uRHJhd25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3Rpb25EcmF3bihfcmVmNCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IF9yZWY0LmNvbnRleHQsXG4gICAgICAgICAgICB6b29tdHlwZSA9IF9yZWY0Lnpvb210eXBlO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIG1lID0gY29udGV4dDtcbiAgICAgICAgdmFyIHh5UmF0aW9zID0gdGhpcy54eVJhdGlvcztcbiAgICAgICAgdmFyIHRvb2xiYXIgPSB0aGlzLmN0eC50b29sYmFyO1xuXG4gICAgICAgIGlmIChtZS5zdGFydFggPiBtZS5lbmRYKSB7XG4gICAgICAgICAgdmFyIHRlbXBYID0gbWUuc3RhcnRYO1xuICAgICAgICAgIG1lLnN0YXJ0WCA9IG1lLmVuZFg7XG4gICAgICAgICAgbWUuZW5kWCA9IHRlbXBYO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lLnN0YXJ0WSA+IG1lLmVuZFkpIHtcbiAgICAgICAgICB2YXIgdGVtcFkgPSBtZS5zdGFydFk7XG4gICAgICAgICAgbWUuc3RhcnRZID0gbWUuZW5kWTtcbiAgICAgICAgICBtZS5lbmRZID0gdGVtcFk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgeExvd2VzdFZhbHVlID0gdy5nbG9iYWxzLnhBeGlzU2NhbGUubmljZU1pbiArIG1lLnN0YXJ0WCAqIHh5UmF0aW9zLnhSYXRpbztcbiAgICAgICAgdmFyIHhIaWdoZXN0VmFsdWUgPSB3Lmdsb2JhbHMueEF4aXNTY2FsZS5uaWNlTWluICsgbWUuZW5kWCAqIHh5UmF0aW9zLnhSYXRpbzsgLy8gVE9ETzogd2Ugd2lsbCBjb25zaWRlciB0aGUgMXN0IHkgYXhpcyB2YWx1ZXMgaGVyZSBmb3IgZ2V0dGluZyBoaWdoZXN0IGFuZCBsb3dlc3QgeVxuXG4gICAgICAgIHZhciB5SGlnaGVzdFZhbHVlID0gW107XG4gICAgICAgIHZhciB5TG93ZXN0VmFsdWUgPSBbXTtcbiAgICAgICAgdy5jb25maWcueWF4aXMuZm9yRWFjaChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICB5SGlnaGVzdFZhbHVlLnB1c2gody5nbG9iYWxzLnlBeGlzU2NhbGVbaW5kZXhdLm5pY2VNYXggLSB4eVJhdGlvcy55UmF0aW9baW5kZXhdICogbWUuc3RhcnRZKTtcbiAgICAgICAgICB5TG93ZXN0VmFsdWUucHVzaCh3Lmdsb2JhbHMueUF4aXNTY2FsZVtpbmRleF0ubmljZU1heCAtIHh5UmF0aW9zLnlSYXRpb1tpbmRleF0gKiBtZS5lbmRZKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1lLmRyYWdnZWQgJiYgKG1lLmRyYWdYID4gMTAgfHwgbWUuZHJhZ1kgPiAxMCkgJiYgeExvd2VzdFZhbHVlICE9PSB4SGlnaGVzdFZhbHVlKSB7XG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy56b29tRW5hYmxlZCkge1xuICAgICAgICAgICAgdmFyIHlheGlzID0gVXRpbHMuY2xvbmUody5nbG9iYWxzLmluaXRpYWxDb25maWcueWF4aXMpO1xuICAgICAgICAgICAgdy5nbG9iYWxzLnpvb21lZCA9IHRydWU7IC8vIGJlZm9yZSB6b29taW5nIGluL291dCwgc3RvcmUgdGhlIGxhc3QgeWF4aXMgYW5kIHhheGlzIHJhbmdlLCBzbyB0aGF0IHdoZW4gdXNlciBoaXRzIHRoZSBSRVNFVCBidXR0b24sIHdlIGdldCB0aGUgb3JpZ2luYWwgcmFuZ2VcbiAgICAgICAgICAgIC8vIGFsc28gLSBtYWtlIHN1cmUgdXNlciBpcyBub3QgYWxyZWFkeSB6b29tZWQgaW4vb3V0IC0gb3RoZXJ3aXNlIHdlIHdpbGwgc3RvcmUgem9vbWVkIHZhbHVlcyBpbiBsYXN0QXhpc1xuICAgICAgICAgICAgLy8gREVBRCBjb2RlIC0gdGhlIGJlbG93IGNvbmRpdGlvbiB3aWxsIG5ldmVyIHJ1biBub3cgYXMgem9vbWVkIGlzIG1hZGUgZmFsc2UgYWJvdmVcblxuICAgICAgICAgICAgaWYgKCF3Lmdsb2JhbHMuem9vbWVkKSB7XG4gICAgICAgICAgICAgIHcuZ2xvYmFscy5sYXN0WEF4aXMgPSBVdGlscy5jbG9uZSh3LmNvbmZpZy54YXhpcyk7XG4gICAgICAgICAgICAgIHcuZ2xvYmFscy5sYXN0WUF4aXMgPSBVdGlscy5jbG9uZSh3LmNvbmZpZy55YXhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICAgICAgeExvd2VzdFZhbHVlID0gTWF0aC5mbG9vcih4TG93ZXN0VmFsdWUpO1xuICAgICAgICAgICAgICB4SGlnaGVzdFZhbHVlID0gTWF0aC5mbG9vcih4SGlnaGVzdFZhbHVlKTtcblxuICAgICAgICAgICAgICBpZiAoeExvd2VzdFZhbHVlIDwgMSkge1xuICAgICAgICAgICAgICAgIHhMb3dlc3RWYWx1ZSA9IDE7XG4gICAgICAgICAgICAgICAgeEhpZ2hlc3RWYWx1ZSA9IHcuZ2xvYmFscy5kYXRhUG9pbnRzO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHhIaWdoZXN0VmFsdWUgLSB4TG93ZXN0VmFsdWUgPCAyKSB7XG4gICAgICAgICAgICAgICAgeEhpZ2hlc3RWYWx1ZSA9IHhMb3dlc3RWYWx1ZSArIDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHhheGlzID0ge1xuICAgICAgICAgICAgICBtaW46IHhMb3dlc3RWYWx1ZSxcbiAgICAgICAgICAgICAgbWF4OiB4SGlnaGVzdFZhbHVlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoem9vbXR5cGUgPT09ICd4eScgfHwgem9vbXR5cGUgPT09ICd5Jykge1xuICAgICAgICAgICAgICB5YXhpcy5mb3JFYWNoKGZ1bmN0aW9uICh5YXhlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHlheGlzW2luZGV4XS5taW4gPSB5TG93ZXN0VmFsdWVbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHlheGlzW2luZGV4XS5tYXggPSB5SGlnaGVzdFZhbHVlW2luZGV4XTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC56b29tLmF1dG9TY2FsZVlheGlzKSB7XG4gICAgICAgICAgICAgIHZhciBzY2FsZSA9IG5ldyBSYW5nZShtZS5jdHgpO1xuICAgICAgICAgICAgICB5YXhpcyA9IHNjYWxlLmF1dG9TY2FsZVkobWUuY3R4LCB5YXhpcywge1xuICAgICAgICAgICAgICAgIHhheGlzOiB4YXhpc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgdmFyIGJlZm9yZVpvb21SYW5nZSA9IHRvb2xiYXIuZ2V0QmVmb3JlWm9vbVJhbmdlKHhheGlzLCB5YXhpcyk7XG5cbiAgICAgICAgICAgICAgaWYgKGJlZm9yZVpvb21SYW5nZSkge1xuICAgICAgICAgICAgICAgIHhheGlzID0gYmVmb3JlWm9vbVJhbmdlLnhheGlzID8gYmVmb3JlWm9vbVJhbmdlLnhheGlzIDogeGF4aXM7XG4gICAgICAgICAgICAgICAgeWF4aXMgPSBiZWZvcmVab29tUmFuZ2UueWF4aXMgPyBiZWZvcmVab29tUmFuZ2UueWF4ZSA6IHlheGlzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgICB4YXhpczogeGF4aXNcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICghdy5jb25maWcuY2hhcnQuZ3JvdXApIHtcbiAgICAgICAgICAgICAgLy8gaWYgY2hhcnQgaW4gYSBncm91cCwgcHJldmVudCB5YXhpcyB1cGRhdGUgaGVyZVxuICAgICAgICAgICAgICAvLyBmaXggaXNzdWUgIzY1MFxuICAgICAgICAgICAgICBvcHRpb25zLnlheGlzID0geWF4aXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLmN0eC51cGRhdGVIZWxwZXJzLl91cGRhdGVPcHRpb25zKG9wdGlvbnMsIGZhbHNlLCBtZS53LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmR5bmFtaWNBbmltYXRpb24uZW5hYmxlZCk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygdy5jb25maWcuY2hhcnQuZXZlbnRzLnpvb21lZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0b29sYmFyLnpvb21DYWxsYmFjayh4YXhpcywgeWF4aXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAody5nbG9iYWxzLnNlbGVjdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIHZhciBfeWF4aXMgPSBudWxsO1xuICAgICAgICAgICAgdmFyIF94YXhpcyA9IG51bGw7XG4gICAgICAgICAgICBfeGF4aXMgPSB7XG4gICAgICAgICAgICAgIG1pbjogeExvd2VzdFZhbHVlLFxuICAgICAgICAgICAgICBtYXg6IHhIaWdoZXN0VmFsdWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh6b29tdHlwZSA9PT0gJ3h5JyB8fCB6b29tdHlwZSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgIF95YXhpcyA9IFV0aWxzLmNsb25lKHcuY29uZmlnLnlheGlzKTtcblxuICAgICAgICAgICAgICBfeWF4aXMuZm9yRWFjaChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBfeWF4aXNbaW5kZXhdLm1pbiA9IHlMb3dlc3RWYWx1ZVtpbmRleF07XG4gICAgICAgICAgICAgICAgX3lheGlzW2luZGV4XS5tYXggPSB5SGlnaGVzdFZhbHVlW2luZGV4XTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHcuZ2xvYmFscy5zZWxlY3Rpb24gPSBtZS5zZWxlY3Rpb247XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygdy5jb25maWcuY2hhcnQuZXZlbnRzLnNlbGVjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB3LmNvbmZpZy5jaGFydC5ldmVudHMuc2VsZWN0aW9uKG1lLmN0eCwge1xuICAgICAgICAgICAgICAgIHhheGlzOiBfeGF4aXMsXG4gICAgICAgICAgICAgICAgeWF4aXM6IF95YXhpc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFuRHJhZ2dpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYW5EcmFnZ2luZyhfcmVmNSkge1xuICAgICAgICB2YXIgY29udGV4dCA9IF9yZWY1LmNvbnRleHQ7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgbWUgPSBjb250ZXh0OyAvLyBjaGVjayB0byBtYWtlIHN1cmUgdGhlcmUgaXMgZGF0YSB0byBjb21wYXJlIGFnYWluc3RcblxuICAgICAgICBpZiAodHlwZW9mIHcuZ2xvYmFscy5sYXN0Q2xpZW50UG9zaXRpb24ueCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIGNoYW5nZSBmcm9tIGxhc3QgcG9zaXRpb24gdG8gdGhpcyBwb3NpdGlvblxuICAgICAgICAgIHZhciBkZWx0YVggPSB3Lmdsb2JhbHMubGFzdENsaWVudFBvc2l0aW9uLnggLSBtZS5jbGllbnRYO1xuICAgICAgICAgIHZhciBkZWx0YVkgPSB3Lmdsb2JhbHMubGFzdENsaWVudFBvc2l0aW9uLnkgLSBtZS5jbGllbnRZOyAvLyBjaGVjayB3aGljaCBkaXJlY3Rpb24gaGFkIHRoZSBoaWdoZXN0IGFtcGxpdHVkZSBhbmQgdGhlbiBmaWd1cmUgb3V0IGRpcmVjdGlvbiBieSBjaGVja2luZyBpZiB0aGUgdmFsdWUgaXMgZ3JlYXRlciBvciBsZXNzIHRoYW4gemVyb1xuXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhWCkgPiBNYXRoLmFicyhkZWx0YVkpICYmIGRlbHRhWCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubW92ZURpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRlbHRhWCkgPiBNYXRoLmFicyhkZWx0YVkpICYmIGRlbHRhWCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMubW92ZURpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkZWx0YVkpID4gTWF0aC5hYnMoZGVsdGFYKSAmJiBkZWx0YVkgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmVEaXJlY3Rpb24gPSAndXAnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGVsdGFZKSA+IE1hdGguYWJzKGRlbHRhWCkgJiYgZGVsdGFZIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5tb3ZlRGlyZWN0aW9uID0gJ2Rvd24nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBzZXQgdGhlIG5ldyBsYXN0IHBvc2l0aW9uIHRvIHRoZSBjdXJyZW50IGZvciBuZXh0IHRpbWUgKHRvIGdldCB0aGUgcG9zaXRpb24gb2YgZHJhZylcblxuXG4gICAgICAgIHcuZ2xvYmFscy5sYXN0Q2xpZW50UG9zaXRpb24gPSB7XG4gICAgICAgICAgeDogbWUuY2xpZW50WCxcbiAgICAgICAgICB5OiBtZS5jbGllbnRZXG4gICAgICAgIH07XG4gICAgICAgIHZhciB4TG93ZXN0VmFsdWUgPSB3Lmdsb2JhbHMubWluWDtcbiAgICAgICAgdmFyIHhIaWdoZXN0VmFsdWUgPSB3Lmdsb2JhbHMubWF4WDsgLy8gb24gYSBjYXRlZ29yeSwgd2UgZG9uJ3QgcGFuIGNvbnRpbnVvc2x5IGFzIGl0IGNhdXNlcyBidWdzXG5cbiAgICAgICAgaWYgKCF3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICBtZS5wYW5TY3JvbGxlZCh4TG93ZXN0VmFsdWUsIHhIaWdoZXN0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRlbGF5ZWRQYW5TY3JvbGxlZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGF5ZWRQYW5TY3JvbGxlZCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBuZXdNaW5YID0gdy5nbG9iYWxzLm1pblg7XG4gICAgICAgIHZhciBuZXdNYXhYID0gdy5nbG9iYWxzLm1heFg7XG4gICAgICAgIHZhciBjZW50ZXJYID0gKHcuZ2xvYmFscy5tYXhYIC0gdy5nbG9iYWxzLm1pblgpIC8gMjtcblxuICAgICAgICBpZiAodGhpcy5tb3ZlRGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICBuZXdNaW5YID0gdy5nbG9iYWxzLm1pblggKyBjZW50ZXJYO1xuICAgICAgICAgIG5ld01heFggPSB3Lmdsb2JhbHMubWF4WCArIGNlbnRlclg7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3ZlRGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgbmV3TWluWCA9IHcuZ2xvYmFscy5taW5YIC0gY2VudGVyWDtcbiAgICAgICAgICBuZXdNYXhYID0gdy5nbG9iYWxzLm1heFggLSBjZW50ZXJYO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3TWluWCA9IE1hdGguZmxvb3IobmV3TWluWCk7XG4gICAgICAgIG5ld01heFggPSBNYXRoLmZsb29yKG5ld01heFgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNjcm9sbGVkQ2hhcnQoe1xuICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICBtaW46IG5ld01pblgsXG4gICAgICAgICAgICBtYXg6IG5ld01heFhcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG5ld01pblgsIG5ld01heFgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYW5TY3JvbGxlZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhblNjcm9sbGVkKHhMb3dlc3RWYWx1ZSwgeEhpZ2hlc3RWYWx1ZSkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHh5UmF0aW9zID0gdGhpcy54eVJhdGlvcztcbiAgICAgICAgdmFyIHlheGlzID0gVXRpbHMuY2xvbmUody5nbG9iYWxzLmluaXRpYWxDb25maWcueWF4aXMpO1xuXG4gICAgICAgIGlmICh0aGlzLm1vdmVEaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgIHhMb3dlc3RWYWx1ZSA9IHcuZ2xvYmFscy5taW5YICsgdy5nbG9iYWxzLmdyaWRXaWR0aCAvIDE1ICogeHlSYXRpb3MueFJhdGlvO1xuICAgICAgICAgIHhIaWdoZXN0VmFsdWUgPSB3Lmdsb2JhbHMubWF4WCArIHcuZ2xvYmFscy5ncmlkV2lkdGggLyAxNSAqIHh5UmF0aW9zLnhSYXRpbztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vdmVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICB4TG93ZXN0VmFsdWUgPSB3Lmdsb2JhbHMubWluWCAtIHcuZ2xvYmFscy5ncmlkV2lkdGggLyAxNSAqIHh5UmF0aW9zLnhSYXRpbztcbiAgICAgICAgICB4SGlnaGVzdFZhbHVlID0gdy5nbG9iYWxzLm1heFggLSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gMTUgKiB4eVJhdGlvcy54UmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeExvd2VzdFZhbHVlIDwgdy5nbG9iYWxzLmluaXRpYWxNaW5YIHx8IHhIaWdoZXN0VmFsdWUgPiB3Lmdsb2JhbHMuaW5pdGlhbE1heFgpIHtcbiAgICAgICAgICB4TG93ZXN0VmFsdWUgPSB3Lmdsb2JhbHMubWluWDtcbiAgICAgICAgICB4SGlnaGVzdFZhbHVlID0gdy5nbG9iYWxzLm1heFg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgeGF4aXMgPSB7XG4gICAgICAgICAgbWluOiB4TG93ZXN0VmFsdWUsXG4gICAgICAgICAgbWF4OiB4SGlnaGVzdFZhbHVlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0Lnpvb20uYXV0b1NjYWxlWWF4aXMpIHtcbiAgICAgICAgICB2YXIgc2NhbGUgPSBuZXcgUmFuZ2UodGhpcy5jdHgpO1xuICAgICAgICAgIHlheGlzID0gc2NhbGUuYXV0b1NjYWxlWSh0aGlzLmN0eCwgeWF4aXMsIHtcbiAgICAgICAgICAgIHhheGlzOiB4YXhpc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgIG1pbjogeExvd2VzdFZhbHVlLFxuICAgICAgICAgICAgbWF4OiB4SGlnaGVzdFZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdy5jb25maWcuY2hhcnQuZ3JvdXApIHtcbiAgICAgICAgICAvLyBpZiBjaGFydCBpbiBhIGdyb3VwLCBwcmV2ZW50IHlheGlzIHVwZGF0ZSBoZXJlXG4gICAgICAgICAgLy8gZml4IGlzc3VlICM2NTBcbiAgICAgICAgICBvcHRpb25zLnlheGlzID0geWF4aXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZVNjcm9sbGVkQ2hhcnQob3B0aW9ucywgeExvd2VzdFZhbHVlLCB4SGlnaGVzdFZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXBkYXRlU2Nyb2xsZWRDaGFydFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbGVkQ2hhcnQob3B0aW9ucywgeExvd2VzdFZhbHVlLCB4SGlnaGVzdFZhbHVlKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIHRoaXMuY3R4LnVwZGF0ZUhlbHBlcnMuX3VwZGF0ZU9wdGlvbnMob3B0aW9ucywgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICBpZiAodHlwZW9mIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5zY3JvbGxlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5zY3JvbGxlZCh0aGlzLmN0eCwge1xuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgbWluOiB4TG93ZXN0VmFsdWUsXG4gICAgICAgICAgICAgIG1heDogeEhpZ2hlc3RWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFpvb21QYW5TZWxlY3Rpb247XG4gIH0oVG9vbGJhcik7XG5cbiAgdmFyIFV0aWxzJDEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFV0aWxzJDEodG9vbHRpcENvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVdGlscyQxKTtcblxuICAgICAgdGhpcy53ID0gdG9vbHRpcENvbnRleHQudztcbiAgICAgIHRoaXMudHRDdHggPSB0b29sdGlwQ29udGV4dDtcbiAgICAgIHRoaXMuY3R4ID0gdG9vbHRpcENvbnRleHQuY3R4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiogV2hlbiBob3ZlcmluZyBvdmVyIHNlcmllcywgeW91IG5lZWQgdG8gY2FwdHVyZSB3aGljaCBzZXJpZXMgaXMgYmVpbmcgaG92ZXJlZCBvbi5cbiAgICAgKiogVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBib3RoIGNhcHR1cmVkc2VyaWVzIGluZGV4IGFzIHdlbGwgYXMgaW5uZXIgaW5kZXggb2YgdGhhdCBzZXJpZXNcbiAgICAgKiBAbWVtYmVyb2YgVXRpbHNcbiAgICAgKiBAcGFyYW0ge29iamVjdH1cbiAgICAgKiAtIGhvdmVyQXJlYSA9IHRoZSByZWN0IG9uIHdoaWNoIHVzZXIgaG92ZXJzXG4gICAgICogLSBlbEdyaWQgPSBkaW1lbnNpb25zIG9mIHRoZSBob3ZlciByZWN0IChpdCBjYW4gYmUgZGlmZmVyZW50IHRoYW4gaG92ZXJhcmVhKVxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoVXRpbHMkMSwgW3tcbiAgICAgIGtleTogXCJnZXROZWFyZXN0VmFsdWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TmVhcmVzdFZhbHVlcyhfcmVmKSB7XG4gICAgICAgIHZhciBob3ZlckFyZWEgPSBfcmVmLmhvdmVyQXJlYSxcbiAgICAgICAgICAgIGVsR3JpZCA9IF9yZWYuZWxHcmlkLFxuICAgICAgICAgICAgY2xpZW50WCA9IF9yZWYuY2xpZW50WCxcbiAgICAgICAgICAgIGNsaWVudFkgPSBfcmVmLmNsaWVudFk7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgaG92ZXJXaWR0aCA9IHcuZ2xvYmFscy5ncmlkV2lkdGg7XG4gICAgICAgIHZhciB4RGl2aXNvciA9IGhvdmVyV2lkdGggLyAody5nbG9iYWxzLmRhdGFQb2ludHMgLSAxKTtcbiAgICAgICAgdmFyIHNlcmllc0JvdW5kID0gZWxHcmlkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgaGFzQmFycyA9IHRoaXMuaGFzQmFycygpO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuY29tYm9DaGFydHMgfHwgaGFzQmFycykge1xuICAgICAgICAgIHhEaXZpc29yID0gaG92ZXJXaWR0aCAvIHcuZ2xvYmFscy5kYXRhUG9pbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhvdmVyWCA9IGNsaWVudFggLSBzZXJpZXNCb3VuZC5sZWZ0O1xuICAgICAgICB2YXIgaG92ZXJZID0gY2xpZW50WSAtIHNlcmllc0JvdW5kLnRvcDtcbiAgICAgICAgdmFyIG5vdEluUmVjdCA9IGhvdmVyWCA8IDAgfHwgaG92ZXJZIDwgMCB8fCBob3ZlclggPiB3Lmdsb2JhbHMuZ3JpZFdpZHRoIHx8IGhvdmVyWSA+IHcuZ2xvYmFscy5ncmlkSGVpZ2h0O1xuXG4gICAgICAgIGlmIChub3RJblJlY3QpIHtcbiAgICAgICAgICBob3ZlckFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXJpbmctem9vbScpO1xuICAgICAgICAgIGhvdmVyQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdob3ZlcmluZy1wYW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAody5nbG9iYWxzLnpvb21FbmFibGVkKSB7XG4gICAgICAgICAgICBob3ZlckFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXJpbmctcGFuJyk7XG4gICAgICAgICAgICBob3ZlckFyZWEuY2xhc3NMaXN0LmFkZCgnaG92ZXJpbmctem9vbScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAody5nbG9iYWxzLnBhbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIGhvdmVyQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdob3ZlcmluZy16b29tJyk7XG4gICAgICAgICAgICBob3ZlckFyZWEuY2xhc3NMaXN0LmFkZCgnaG92ZXJpbmctcGFuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGogPSBNYXRoLnJvdW5kKGhvdmVyWCAvIHhEaXZpc29yKTtcblxuICAgICAgICBpZiAoaGFzQmFycykge1xuICAgICAgICAgIGogPSBNYXRoLmNlaWwoaG92ZXJYIC8geERpdmlzb3IpO1xuICAgICAgICAgIGogPSBqIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYXB0dXJlZFNlcmllcyA9IG51bGw7XG4gICAgICAgIHZhciBjbG9zZXN0ID0gbnVsbDtcbiAgICAgICAgdmFyIHNlcmllc1hWYWxBcnIgPSBbXTtcbiAgICAgICAgdmFyIHNlcmllc1lWYWxBcnIgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHcuZ2xvYmFscy5zZXJpZXNYdmFsdWVzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgc2VyaWVzWFZhbEFyci5wdXNoKFt3Lmdsb2JhbHMuc2VyaWVzWHZhbHVlc1tzXVswXSAtIDAuMDAwMDAxXS5jb25jYXQody5nbG9iYWxzLnNlcmllc1h2YWx1ZXNbc10pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlcmllc1hWYWxBcnIgPSBzZXJpZXNYVmFsQXJyLm1hcChmdW5jdGlvbiAoc2VyaWVzWFZhbCkge1xuICAgICAgICAgIHJldHVybiBzZXJpZXNYVmFsLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXJpZXNZVmFsQXJyID0gdy5nbG9iYWxzLnNlcmllc1l2YWx1ZXMubWFwKGZ1bmN0aW9uIChzZXJpZXNZVmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHNlcmllc1lWYWwuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gVXRpbHMuaXNOdW1iZXIocyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pOyAvLyBpZiBYIGF4aXMgdHlwZSBpcyBub3QgY2F0ZWdvcnkgYW5kIHRvb2x0aXAgaXMgbm90IHNoYXJlZCwgdGhlbiB3ZSBuZWVkIHRvIGZpbmQgdGhlIGN1cnNvciBwb3NpdGlvbiBhbmQgZ2V0IHRoZSBuZWFyZXN0IHZhbHVlXG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgY2xvc2VzdCA9IHRoaXMuY2xvc2VzdEluTXVsdGlBcnJheShob3ZlclgsIGhvdmVyWSwgc2VyaWVzWFZhbEFyciwgc2VyaWVzWVZhbEFycik7XG4gICAgICAgICAgY2FwdHVyZWRTZXJpZXMgPSBjbG9zZXN0LmluZGV4O1xuICAgICAgICAgIGogPSBjbG9zZXN0Lmo7XG5cbiAgICAgICAgICBpZiAoY2FwdHVyZWRTZXJpZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGluaXRpYWwgcHVzaCwgaXQgc2hvdWxkIGJlIGEgbGl0dGxlIHNtYWxsZXIgdGhhbiB0aGUgMXN0IHZhbFxuICAgICAgICAgICAgc2VyaWVzWFZhbEFyciA9IHcuZ2xvYmFscy5zZXJpZXNYdmFsdWVzW2NhcHR1cmVkU2VyaWVzXTtcbiAgICAgICAgICAgIGNsb3Nlc3QgPSB0aGlzLmNsb3Nlc3RJbkFycmF5KGhvdmVyWCwgc2VyaWVzWFZhbEFycik7XG4gICAgICAgICAgICBqID0gY2xvc2VzdC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3Lmdsb2JhbHMuY2FwdHVyZWRTZXJpZXNJbmRleCA9IGNhcHR1cmVkU2VyaWVzID09PSBudWxsID8gLTEgOiBjYXB0dXJlZFNlcmllcztcbiAgICAgICAgaWYgKCFqIHx8IGogPCAxKSBqID0gMDtcbiAgICAgICAgdy5nbG9iYWxzLmNhcHR1cmVkRGF0YVBvaW50SW5kZXggPSBqO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNhcHR1cmVkU2VyaWVzOiBjYXB0dXJlZFNlcmllcyxcbiAgICAgICAgICBqOiBqLFxuICAgICAgICAgIGhvdmVyWDogaG92ZXJYLFxuICAgICAgICAgIGhvdmVyWTogaG92ZXJZXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsb3Nlc3RJbk11bHRpQXJyYXlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZXN0SW5NdWx0aUFycmF5KGhvdmVyWCwgaG92ZXJZLCBYYXJyYXlzLCBZYXJyYXlzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSAwO1xuICAgICAgICB2YXIgY3VyckluZGV4ID0gbnVsbDtcbiAgICAgICAgdmFyIGogPSAtMTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLnNlcmllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSB0aGlzLmdldEZpcnN0QWN0aXZlWEFycmF5KFhhcnJheXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJJbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VyclkgPSBZYXJyYXlzW2FjdGl2ZUluZGV4XVswXTtcbiAgICAgICAgdmFyIGN1cnJYID0gWGFycmF5c1thY3RpdmVJbmRleF1bMF07XG4gICAgICAgIHZhciBkaWZmWCA9IE1hdGguYWJzKGhvdmVyWCAtIGN1cnJYKTtcbiAgICAgICAgdmFyIGRpZmZZID0gTWF0aC5hYnMoaG92ZXJZIC0gY3VyclkpO1xuICAgICAgICB2YXIgZGlmZiA9IGRpZmZZICsgZGlmZlg7XG4gICAgICAgIFlhcnJheXMubWFwKGZ1bmN0aW9uIChhcnJZLCBhcnJJbmRleCkge1xuICAgICAgICAgIGFyclkubWFwKGZ1bmN0aW9uICh5LCBpbm5lcktleSkge1xuICAgICAgICAgICAgdmFyIG5ld2RpZmZZID0gTWF0aC5hYnMoaG92ZXJZIC0gWWFycmF5c1thcnJJbmRleF1baW5uZXJLZXldKTtcbiAgICAgICAgICAgIHZhciBuZXdkaWZmWCA9IE1hdGguYWJzKGhvdmVyWCAtIFhhcnJheXNbYXJySW5kZXhdW2lubmVyS2V5XSk7XG4gICAgICAgICAgICB2YXIgbmV3ZGlmZiA9IG5ld2RpZmZYICsgbmV3ZGlmZlk7XG5cbiAgICAgICAgICAgIGlmIChuZXdkaWZmIDwgZGlmZikge1xuICAgICAgICAgICAgICBkaWZmID0gbmV3ZGlmZjtcbiAgICAgICAgICAgICAgZGlmZlggPSBuZXdkaWZmWDtcbiAgICAgICAgICAgICAgZGlmZlkgPSBuZXdkaWZmWTtcbiAgICAgICAgICAgICAgY3VyckluZGV4ID0gYXJySW5kZXg7XG4gICAgICAgICAgICAgIGogPSBpbm5lcktleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5kZXg6IGN1cnJJbmRleCxcbiAgICAgICAgICBqOiBqXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEZpcnN0QWN0aXZlWEFycmF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3RBY3RpdmVYQXJyYXkoWGFycmF5cykge1xuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSAwO1xuICAgICAgICB2YXIgY29yZVV0aWxzID0gbmV3IENvcmVVdGlscyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBmaXJzdEFjdGl2ZVNlcmllc0luZGV4ID0gWGFycmF5cy5tYXAoZnVuY3Rpb24gKHhhcnIsIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHhhcnIubGVuZ3RoID4gMCA/IGluZGV4IDogLTE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgZmlyc3RBY3RpdmVTZXJpZXNJbmRleC5sZW5ndGg7IGErKykge1xuICAgICAgICAgIHZhciB0b3RhbCA9IGNvcmVVdGlscy5nZXRTZXJpZXNUb3RhbEJ5SW5kZXgoYSk7XG5cbiAgICAgICAgICBpZiAoZmlyc3RBY3RpdmVTZXJpZXNJbmRleFthXSAhPT0gLTEgJiYgdG90YWwgIT09IDAgJiYgIWNvcmVVdGlscy5zZXJpZXNIYXZlU2FtZVZhbHVlcyhhKSkge1xuICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBmaXJzdEFjdGl2ZVNlcmllc0luZGV4W2FdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjdGl2ZUluZGV4O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZXN0SW5BcnJheVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3Nlc3RJbkFycmF5KHZhbCwgYXJyKSB7XG4gICAgICAgIHZhciBjdXJyID0gYXJyWzBdO1xuICAgICAgICB2YXIgY3VyckluZGV4ID0gbnVsbDtcbiAgICAgICAgdmFyIGRpZmYgPSBNYXRoLmFicyh2YWwgLSBjdXJyKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBuZXdkaWZmID0gTWF0aC5hYnModmFsIC0gYXJyW2ldKTtcblxuICAgICAgICAgIGlmIChuZXdkaWZmIDwgZGlmZikge1xuICAgICAgICAgICAgZGlmZiA9IG5ld2RpZmY7XG4gICAgICAgICAgICBjdXJySW5kZXggPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5kZXg6IGN1cnJJbmRleFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBzZXJpZXMsIGl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgZGlmZmVyZW50IHggdmFsdWVzIGZvciBlYWNoIHNlcmllcy5cbiAgICAgICAqIEJ1dCBpdCBtYXkgYmUgcG9zc2libGUgaW4gdGhvc2UgbXVsdGlwbGUgc2VyaWVzLCB0aGF0IHRoZXJlIGlzIHNhbWUgeCB2YWx1ZSBmb3IgMiBvciBtb3JlXG4gICAgICAgKiBzZXJpZXMuXG4gICAgICAgKiBAbWVtYmVyb2YgVXRpbHNcbiAgICAgICAqIEBwYXJhbSB7aW50fVxuICAgICAgICogLSBqID0gaXMgdGhlIGlubmVyIGluZGV4IG9mIHNlcmllcyAtPiAoc2VyaWVzW2ldW2pdKVxuICAgICAgICogQHJldHVybiB7Ym9vbH1cbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImlzWG92ZXJsYXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1hvdmVybGFwKGopIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB4U2FtZUZvckFsbFNlcmllc0pBcnIgPSBbXTtcbiAgICAgICAgdmFyIHNlcmllc1ggPSB3Lmdsb2JhbHMuc2VyaWVzWC5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHNbMF0gIT09ICd1bmRlZmluZWQnO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc2VyaWVzWC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpZXNYLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXJpZXNYW2ldW2pdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc2VyaWVzWFtpICsgMV1bal0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGlmIChzZXJpZXNYW2ldW2pdICE9PSBzZXJpZXNYW2kgKyAxXVtqXSkge1xuICAgICAgICAgICAgICAgIHhTYW1lRm9yQWxsU2VyaWVzSkFyci5wdXNoKCd1bkVxdWFsJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeFNhbWVGb3JBbGxTZXJpZXNKQXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0luaXRpYWxTZXJpZXNTYW1lTGVuXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNJbml0aWFsU2VyaWVzU2FtZUxlbigpIHtcbiAgICAgICAgdmFyIHNhbWVMZW4gPSB0cnVlO1xuICAgICAgICB2YXIgaW5pdGlhbFNlcmllcyA9IHRoaXMudy5nbG9iYWxzLmluaXRpYWxTZXJpZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsU2VyaWVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgIGlmIChpbml0aWFsU2VyaWVzW2ldLmRhdGEubGVuZ3RoICE9PSBpbml0aWFsU2VyaWVzW2kgKyAxXS5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgc2FtZUxlbiA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNhbWVMZW47XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEJhcnNIZWlnaHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCYXJzSGVpZ2h0KGFsbGJhcnMpIHtcbiAgICAgICAgdmFyIGJhcnMgPSBfdG9Db25zdW1hYmxlQXJyYXkoYWxsYmFycyk7XG5cbiAgICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gYmFycy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYmFyKSB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIGJhci5nZXRCQm94KCkuaGVpZ2h0O1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHRvdGFsSGVpZ2h0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRFbE1hcmtlcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbE1hcmtlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLncuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJyAuYXBleGNoYXJ0cy1zZXJpZXMtbWFya2VycycpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRBbGxNYXJrZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsTWFya2VycygpIHtcbiAgICAgICAgLy8gZmlyc3QgZ2V0IGFsbCBtYXJrZXIgcGFyZW50cy4gVGhpcyBwYXJlbnQgY2xhc3MgY29udGFpbnMgc2VyaWVzLWluZGV4XG4gICAgICAgIC8vIHdoaWNoIGhlbHBzIHRvIHNvcnQgdGhlIG1hcmtlcnMgYXMgdGhleSBhcmUgZHluYW1pY1xuICAgICAgICB2YXIgbWFya2Vyc1dyYXBzID0gdGhpcy53Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy1zZXJpZXMtbWFya2Vycy13cmFwJyk7XG4gICAgICAgIG1hcmtlcnNXcmFwcyA9IF90b0NvbnN1bWFibGVBcnJheShtYXJrZXJzV3JhcHMpO1xuICAgICAgICBtYXJrZXJzV3JhcHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBOdW1iZXIoYi5nZXRBdHRyaWJ1dGUoJ2RhdGE6cmVhbEluZGV4JykpIDwgTnVtYmVyKGEuZ2V0QXR0cmlidXRlKCdkYXRhOnJlYWxJbmRleCcpKSA/IDAgOiAtMTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtYXJrZXJzID0gW107XG4gICAgICAgIG1hcmtlcnNXcmFwcy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgbWFya2Vycy5wdXNoKG0ucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtbWFya2VyJykpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1hcmtlcnM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhc01hcmtlcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNNYXJrZXJzKCkge1xuICAgICAgICB2YXIgbWFya2VycyA9IHRoaXMuZ2V0RWxNYXJrZXJzKCk7XG4gICAgICAgIHJldHVybiBtYXJrZXJzLmxlbmd0aCA+IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEVsQmFyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVsQmFycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbCgnLmFwZXhjaGFydHMtYmFyLXNlcmllcywgIC5hcGV4Y2hhcnRzLWNhbmRsZXN0aWNrLXNlcmllcywgLmFwZXhjaGFydHMtcmFuZ2ViYXItc2VyaWVzJyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhc0JhcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNCYXJzKCkge1xuICAgICAgICB2YXIgYmFycyA9IHRoaXMuZ2V0RWxCYXJzKCk7XG4gICAgICAgIHJldHVybiBiYXJzLmxlbmd0aCA+IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEhvdmVyTWFya2VyU2l6ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEhvdmVyTWFya2VyU2l6ZShpbmRleCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGhvdmVyU2l6ZSA9IHcuY29uZmlnLm1hcmtlcnMuaG92ZXIuc2l6ZTtcblxuICAgICAgICBpZiAoaG92ZXJTaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBob3ZlclNpemUgPSB3Lmdsb2JhbHMubWFya2Vycy5zaXplW2luZGV4XSArIHcuY29uZmlnLm1hcmtlcnMuaG92ZXIuc2l6ZU9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBob3ZlclNpemU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRvZ2dsZUFsbFRvb2x0aXBTZXJpZXNHcm91cHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVBbGxUb29sdGlwU2VyaWVzR3JvdXBzKHN0YXRlKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuXG4gICAgICAgIGlmICh0dEN0eC5hbGxUb29sdGlwU2VyaWVzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHR0Q3R4LmFsbFRvb2x0aXBTZXJpZXNHcm91cHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFsbFRvb2x0aXBTZXJpZXNHcm91cHMgPSB0dEN0eC5hbGxUb29sdGlwU2VyaWVzR3JvdXBzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsVG9vbHRpcFNlcmllc0dyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2VuYWJsZScpIHtcbiAgICAgICAgICAgIGFsbFRvb2x0aXBTZXJpZXNHcm91cHNbaV0uY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgICAgIGFsbFRvb2x0aXBTZXJpZXNHcm91cHNbaV0uc3R5bGUuZGlzcGxheSA9IHcuY29uZmlnLnRvb2x0aXAuaXRlbXMuZGlzcGxheTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxsVG9vbHRpcFNlcmllc0dyb3Vwc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdhcGV4Y2hhcnRzLWFjdGl2ZScpO1xuICAgICAgICAgICAgYWxsVG9vbHRpcFNlcmllc0dyb3Vwc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBVdGlscyQxO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgVG9vbHRpcC5MYWJlbHMgQ2xhc3MgdG8gZHJhdyB0ZXh0cyBvbiB0aGUgdG9vbHRpcC5cbiAgICpcbiAgICogQG1vZHVsZSBUb29sdGlwLkxhYmVsc1xuICAgKiovXG5cbiAgdmFyIExhYmVscyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGFiZWxzKHRvb2x0aXBDb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGFiZWxzKTtcblxuICAgICAgdGhpcy53ID0gdG9vbHRpcENvbnRleHQudztcbiAgICAgIHRoaXMuY3R4ID0gdG9vbHRpcENvbnRleHQuY3R4O1xuICAgICAgdGhpcy50dEN0eCA9IHRvb2x0aXBDb250ZXh0O1xuICAgICAgdGhpcy50b29sdGlwVXRpbCA9IG5ldyBVdGlscyQxKHRvb2x0aXBDb250ZXh0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTGFiZWxzLCBbe1xuICAgICAga2V5OiBcImRyYXdTZXJpZXNUZXh0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdTZXJpZXNUZXh0cyhfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmJHNoYXJlZCA9IF9yZWYuc2hhcmVkLFxuICAgICAgICAgICAgc2hhcmVkID0gX3JlZiRzaGFyZWQgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHNoYXJlZCxcbiAgICAgICAgICAgIHR0SXRlbXMgPSBfcmVmLnR0SXRlbXMsXG4gICAgICAgICAgICBfcmVmJGkgPSBfcmVmLmksXG4gICAgICAgICAgICBpID0gX3JlZiRpID09PSB2b2lkIDAgPyAwIDogX3JlZiRpLFxuICAgICAgICAgICAgX3JlZiRqID0gX3JlZi5qLFxuICAgICAgICAgICAgaiA9IF9yZWYkaiA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYkaixcbiAgICAgICAgICAgIHkxID0gX3JlZi55MSxcbiAgICAgICAgICAgIHkyID0gX3JlZi55MjtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnRvb2x0aXAuY3VzdG9tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZUN1c3RvbVRvb2x0aXAoe1xuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICB5MjogeTIsXG4gICAgICAgICAgICB3OiB3XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVBY3RpdmVJbmFjdGl2ZVNlcmllcyhzaGFyZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzVG9QcmludCh7XG4gICAgICAgICAgaTogaSxcbiAgICAgICAgICBqOiBqXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByaW50TGFiZWxzKHtcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIGo6IGosXG4gICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgICAgdHRJdGVtczogdHRJdGVtcyxcbiAgICAgICAgICBzaGFyZWQ6IHNoYXJlZFxuICAgICAgICB9KTsgLy8gUmUtY2FsY3VsYXRlIHRvb2x0aXAgZGltZW5zaW9ucyBub3cgdGhhdCB3ZSBoYXZlIGRyYXduIHRoZSB0ZXh0XG5cbiAgICAgICAgdmFyIHRvb2x0aXBFbCA9IHRoaXMudHRDdHguZ2V0RWxUb29sdGlwKCk7XG4gICAgICAgIHRoaXMudHRDdHgudG9vbHRpcFJlY3QudHRXaWR0aCA9IHRvb2x0aXBFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgdGhpcy50dEN0eC50b29sdGlwUmVjdC50dEhlaWdodCA9IHRvb2x0aXBFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInByaW50TGFiZWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcHJpbnRMYWJlbHMoX3JlZjIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgaSA9IF9yZWYyLmksXG4gICAgICAgICAgICBqID0gX3JlZjIuaixcbiAgICAgICAgICAgIHZhbHVlcyA9IF9yZWYyLnZhbHVlcyxcbiAgICAgICAgICAgIHR0SXRlbXMgPSBfcmVmMi50dEl0ZW1zLFxuICAgICAgICAgICAgc2hhcmVkID0gX3JlZjIuc2hhcmVkO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHZhbDtcbiAgICAgICAgdmFyIHhWYWwgPSB2YWx1ZXMueFZhbCxcbiAgICAgICAgICAgIHpWYWwgPSB2YWx1ZXMuelZhbCxcbiAgICAgICAgICAgIHhBeGlzVFRWYWwgPSB2YWx1ZXMueEF4aXNUVFZhbDtcbiAgICAgICAgdmFyIHNlcmllc05hbWUgPSAnJztcbiAgICAgICAgdmFyIHBDb2xvciA9IHcuZ2xvYmFscy5jb2xvcnNbaV07XG5cbiAgICAgICAgaWYgKGogIT09IG51bGwgJiYgdy5jb25maWcucGxvdE9wdGlvbnMuYmFyLmRpc3RyaWJ1dGVkKSB7XG4gICAgICAgICAgcENvbG9yID0gdy5nbG9iYWxzLmNvbG9yc1tqXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKHQsIGludmVyc2V0KSB7XG4gICAgICAgICAgdmFyIGYgPSBfdGhpcy5nZXRGb3JtYXR0ZXJzKGkpO1xuXG4gICAgICAgICAgc2VyaWVzTmFtZSA9IF90aGlzLmdldFNlcmllc05hbWUoe1xuICAgICAgICAgICAgZm46IGYueUxiVGl0bGVGb3JtYXR0ZXIsXG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiBpLFxuICAgICAgICAgICAgajogalxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciB0SW5kZXggPSB3LmNvbmZpZy50b29sdGlwLmludmVyc2VPcmRlciA/IGludmVyc2V0IDogdDtcblxuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuYXhpc0NoYXJ0cykge1xuICAgICAgICAgICAgdmFyIGdlbmVyYWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiBnZW5lcmFsRm9ybWF0dGVyKGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBmLnlMYkZvcm1hdHRlcih3Lmdsb2JhbHMuc2VyaWVzW2luZGV4XVtqXSwge1xuICAgICAgICAgICAgICAgIHNlcmllczogdy5nbG9iYWxzLnNlcmllcyxcbiAgICAgICAgICAgICAgICBzZXJpZXNJbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGosXG4gICAgICAgICAgICAgICAgdzogd1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChzaGFyZWQpIHtcbiAgICAgICAgICAgICAgZiA9IF90aGlzLmdldEZvcm1hdHRlcnModEluZGV4KTtcbiAgICAgICAgICAgICAgc2VyaWVzTmFtZSA9IF90aGlzLmdldFNlcmllc05hbWUoe1xuICAgICAgICAgICAgICAgIGZuOiBmLnlMYlRpdGxlRm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIGluZGV4OiB0SW5kZXgsXG4gICAgICAgICAgICAgICAgc2VyaWVzSW5kZXg6IGksXG4gICAgICAgICAgICAgICAgajogalxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcENvbG9yID0gdy5nbG9iYWxzLmNvbG9yc1t0SW5kZXhdO1xuICAgICAgICAgICAgICB2YWwgPSBnZW5lcmFsRm9ybWF0dGVyKHRJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWwgPSBnZW5lcmFsRm9ybWF0dGVyKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gZm9yIHBpZSAvIGRvbnV0c1xuXG5cbiAgICAgICAgICBpZiAoaiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsID0gZi55TGJGb3JtYXR0ZXIody5nbG9iYWxzLnNlcmllc1tpXSwgdyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuRE9NSGFuZGxpbmcoe1xuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIHQ6IHRJbmRleCxcbiAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICB0dEl0ZW1zOiB0dEl0ZW1zLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIHZhbDogdmFsLFxuICAgICAgICAgICAgICB4VmFsOiB4VmFsLFxuICAgICAgICAgICAgICB4QXhpc1RUVmFsOiB4QXhpc1RUVmFsLFxuICAgICAgICAgICAgICB6VmFsOiB6VmFsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VyaWVzTmFtZTogc2VyaWVzTmFtZSxcbiAgICAgICAgICAgIHNoYXJlZDogc2hhcmVkLFxuICAgICAgICAgICAgcENvbG9yOiBwQ29sb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciB0ID0gMCwgaW52ZXJzZXQgPSB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aCAtIDE7IHQgPCB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aDsgdCsrLCBpbnZlcnNldC0tKSB7XG4gICAgICAgICAgX2xvb3AodCwgaW52ZXJzZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEZvcm1hdHRlcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGb3JtYXR0ZXJzKGkpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB5TGJGb3JtYXR0ZXIgPSB3Lmdsb2JhbHMueUxhYmVsRm9ybWF0dGVyc1tpXTtcbiAgICAgICAgdmFyIHlMYlRpdGxlRm9ybWF0dGVyO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMudHRWYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHcuZ2xvYmFscy50dFZhbCkpIHtcbiAgICAgICAgICAgIHlMYkZvcm1hdHRlciA9IHcuZ2xvYmFscy50dFZhbFtpXSAmJiB3Lmdsb2JhbHMudHRWYWxbaV0uZm9ybWF0dGVyO1xuICAgICAgICAgICAgeUxiVGl0bGVGb3JtYXR0ZXIgPSB3Lmdsb2JhbHMudHRWYWxbaV0gJiYgdy5nbG9iYWxzLnR0VmFsW2ldLnRpdGxlICYmIHcuZ2xvYmFscy50dFZhbFtpXS50aXRsZS5mb3JtYXR0ZXI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHlMYkZvcm1hdHRlciA9IHcuZ2xvYmFscy50dFZhbC5mb3JtYXR0ZXI7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygdy5nbG9iYWxzLnR0VmFsLnRpdGxlLmZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB5TGJUaXRsZUZvcm1hdHRlciA9IHcuZ2xvYmFscy50dFZhbC50aXRsZS5mb3JtYXR0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHlMYlRpdGxlRm9ybWF0dGVyID0gdy5jb25maWcudG9vbHRpcC55LnRpdGxlLmZvcm1hdHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgeUxiRm9ybWF0dGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy55TGFiZWxGb3JtYXR0ZXJzWzBdKSB7XG4gICAgICAgICAgICB5TGJGb3JtYXR0ZXIgPSB3Lmdsb2JhbHMueUxhYmVsRm9ybWF0dGVyc1swXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeUxiRm9ybWF0dGVyID0gZnVuY3Rpb24geUxiRm9ybWF0dGVyKGxhYmVsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB5TGJUaXRsZUZvcm1hdHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHlMYlRpdGxlRm9ybWF0dGVyID0gZnVuY3Rpb24geUxiVGl0bGVGb3JtYXR0ZXIobGFiZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB5TGJGb3JtYXR0ZXI6IHlMYkZvcm1hdHRlcixcbiAgICAgICAgICB5TGJUaXRsZUZvcm1hdHRlcjogeUxiVGl0bGVGb3JtYXR0ZXJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0U2VyaWVzTmFtZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlcmllc05hbWUoX3JlZjMpIHtcbiAgICAgICAgdmFyIGZuID0gX3JlZjMuZm4sXG4gICAgICAgICAgICBpbmRleCA9IF9yZWYzLmluZGV4LFxuICAgICAgICAgICAgc2VyaWVzSW5kZXggPSBfcmVmMy5zZXJpZXNJbmRleCxcbiAgICAgICAgICAgIGogPSBfcmVmMy5qO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgcmV0dXJuIGZuKFN0cmluZyh3Lmdsb2JhbHMuc2VyaWVzTmFtZXNbaW5kZXhdKSwge1xuICAgICAgICAgIHNlcmllczogdy5nbG9iYWxzLnNlcmllcyxcbiAgICAgICAgICBzZXJpZXNJbmRleDogc2VyaWVzSW5kZXgsXG4gICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGosXG4gICAgICAgICAgdzogd1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRE9NSGFuZGxpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBET01IYW5kbGluZyhfcmVmNCkge1xuICAgICAgICB2YXIgaSA9IF9yZWY0LmksXG4gICAgICAgICAgICB0ID0gX3JlZjQudCxcbiAgICAgICAgICAgIGogPSBfcmVmNC5qLFxuICAgICAgICAgICAgdHRJdGVtcyA9IF9yZWY0LnR0SXRlbXMsXG4gICAgICAgICAgICB2YWx1ZXMgPSBfcmVmNC52YWx1ZXMsXG4gICAgICAgICAgICBzZXJpZXNOYW1lID0gX3JlZjQuc2VyaWVzTmFtZSxcbiAgICAgICAgICAgIHNoYXJlZCA9IF9yZWY0LnNoYXJlZCxcbiAgICAgICAgICAgIHBDb2xvciA9IF9yZWY0LnBDb2xvcjtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB0dEN0eCA9IHRoaXMudHRDdHg7XG4gICAgICAgIHZhciB2YWwgPSB2YWx1ZXMudmFsLFxuICAgICAgICAgICAgeFZhbCA9IHZhbHVlcy54VmFsLFxuICAgICAgICAgICAgeEF4aXNUVFZhbCA9IHZhbHVlcy54QXhpc1RUVmFsLFxuICAgICAgICAgICAgelZhbCA9IHZhbHVlcy56VmFsO1xuICAgICAgICB2YXIgdHRJdGVtc0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgdHRJdGVtc0NoaWxkcmVuID0gdHRJdGVtc1t0XS5jaGlsZHJlbjtcblxuICAgICAgICBpZiAody5jb25maWcudG9vbHRpcC5maWxsU2VyaWVzQ29sb3IpIHtcbiAgICAgICAgICAvLyAgZWxUb29sdGlwLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHBDb2xvclxuICAgICAgICAgIHR0SXRlbXNbdF0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcENvbG9yO1xuICAgICAgICAgIHR0SXRlbXNDaGlsZHJlblswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR0Q3R4LnNob3dUb29sdGlwVGl0bGUpIHtcbiAgICAgICAgICBpZiAodHRDdHgudG9vbHRpcFRpdGxlID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBnZXQgaXQgb25jZSBpZiBudWxsLCBhbmQgc3RvcmUgaXQgaW4gY2xhc3MgcHJvcGVydHlcbiAgICAgICAgICAgIHR0Q3R4LnRvb2x0aXBUaXRsZSA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0dEN0eC50b29sdGlwVGl0bGUuaW5uZXJIVE1MID0geFZhbDtcbiAgICAgICAgfSAvLyBpZiB4YXhpcyB0b29sdGlwIGlzIGNvbnN0cnVjdGVkLCB3ZSBuZWVkIHRvIHJlcGxhY2UgdGhlIGlubmVySFRNTFxuXG5cbiAgICAgICAgaWYgKHR0Q3R4LmJseGF4aXNUb29sdGlwKSB7XG4gICAgICAgICAgdHRDdHgueGF4aXNUb29sdGlwVGV4dC5pbm5lckhUTUwgPSB4QXhpc1RUVmFsICE9PSAnJyA/IHhBeGlzVFRWYWwgOiB4VmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHR0WUxhYmVsID0gdHRJdGVtc1t0XS5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy10b29sdGlwLXRleHQtbGFiZWwnKTtcblxuICAgICAgICBpZiAodHRZTGFiZWwpIHtcbiAgICAgICAgICB0dFlMYWJlbC5pbm5lckhUTUwgPSBzZXJpZXNOYW1lID8gc2VyaWVzTmFtZSArICc6ICcgOiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0dFlWYWwgPSB0dEl0ZW1zW3RdLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dC12YWx1ZScpO1xuXG4gICAgICAgIGlmICh0dFlWYWwpIHtcbiAgICAgICAgICB0dFlWYWwuaW5uZXJIVE1MID0gdHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcgPyB2YWwgOiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0dEl0ZW1zQ2hpbGRyZW5bMF0gJiYgdHRJdGVtc0NoaWxkcmVuWzBdLmNsYXNzTGlzdC5jb250YWlucygnYXBleGNoYXJ0cy10b29sdGlwLW1hcmtlcicpKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLnRvb2x0aXAubWFya2VyLmZpbGxDb2xvcnMgJiYgQXJyYXkuaXNBcnJheSh3LmNvbmZpZy50b29sdGlwLm1hcmtlci5maWxsQ29sb3JzKSkge1xuICAgICAgICAgICAgcENvbG9yID0gdy5jb25maWcudG9vbHRpcC5tYXJrZXIuZmlsbENvbG9yc1tpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0dEl0ZW1zQ2hpbGRyZW5bMF0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcENvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3LmNvbmZpZy50b29sdGlwLm1hcmtlci5zaG93KSB7XG4gICAgICAgICAgdHRJdGVtc0NoaWxkcmVuWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoelZhbCAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciB0dFpMYWJlbCA9IHR0SXRlbXNbdF0ucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtdG9vbHRpcC10ZXh0LXotbGFiZWwnKTtcbiAgICAgICAgICB0dFpMYWJlbC5pbm5lckhUTUwgPSB3LmNvbmZpZy50b29sdGlwLnoudGl0bGU7XG4gICAgICAgICAgdmFyIHR0WlZhbCA9IHR0SXRlbXNbdF0ucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtdG9vbHRpcC10ZXh0LXotdmFsdWUnKTtcbiAgICAgICAgICB0dFpWYWwuaW5uZXJIVE1MID0gdHlwZW9mIHpWYWwgIT09ICd1bmRlZmluZWQnID8gelZhbCA6ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXJlZCAmJiB0dEl0ZW1zQ2hpbGRyZW5bMF0pIHtcbiAgICAgICAgICAvLyBoaWRlIHdoZW4gbm8gVmFsIG9yIHNlcmllcyBjb2xsYXBzZWRcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsID09PSBudWxsIHx8IHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXNJbmRpY2VzLmluZGV4T2YodCkgPiAtMSkge1xuICAgICAgICAgICAgdHRJdGVtc0NoaWxkcmVuWzBdLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHRJdGVtc0NoaWxkcmVuWzBdLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9IHcuY29uZmlnLnRvb2x0aXAuaXRlbXMuZGlzcGxheTtcbiAgICAgICAgICB9IC8vIFRPRE86IGlzc3VlICMxMjQwIG5lZWRzIHRvIGJlIGxvb2tlZCBhdCBhZ2Fpbi4gY29tbWVudGluZyBpdCBiZWNhdXNlIHRoaXMgYWxzbyBoaWRlcyBzaW5nbGUgc2VyaWVzIHZhbHVlcyB3aXRoIDAgaW4gaXQgKHNoYXJlZCB0b29sdGlwKVxuICAgICAgICAgIC8vIGlmICh3Lmdsb2JhbHMuc3RhY2tlZFNlcmllc1RvdGFsc1tqXSA9PT0gMCkge1xuICAgICAgICAgIC8vICAgLy8gc2hhcmVkIHRvb2x0aXAgYW5kIGFsbCB2YWx1ZXMgYXJlIG51bGwsIHNvIHdlIG5lZWQgdG8gaGlkZSB0aGUgeCB2YWx1ZSB0b29cbiAgICAgICAgICAvLyAgIGxldCBhbGxZWmVyb0ZvckogPSBmYWxzZVxuICAgICAgICAgIC8vICAgZm9yIChsZXQgc2kgPSAxOyBzaSA8IHcuZ2xvYmFscy5zZXJpZXNZdmFsdWVzLmxlbmd0aDsgc2krKykge1xuICAgICAgICAgIC8vICAgICBpZiAoXG4gICAgICAgICAgLy8gICAgICAgdy5nbG9iYWxzLnNlcmllc1l2YWx1ZXNbc2ldW2pdID09PVxuICAgICAgICAgIC8vICAgICAgIHcuZ2xvYmFscy5zZXJpZXNZdmFsdWVzW3NpIC0gMV1bal1cbiAgICAgICAgICAvLyAgICAgKSB7XG4gICAgICAgICAgLy8gICAgICAgYWxsWVplcm9Gb3JKID0gdHJ1ZVxuICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgLy8gICB9XG4gICAgICAgICAgLy8gICBpZiAoYWxsWVplcm9Gb3JKKSB7XG4gICAgICAgICAgLy8gICAgIHR0Q3R4LnRvb2x0aXBUaXRsZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgICAgLy8gICB9IGVsc2Uge1xuICAgICAgICAgIC8vICAgICB0dEN0eC50b29sdGlwVGl0bGUuc3R5bGUuZGlzcGxheSA9IHcuY29uZmlnLnRvb2x0aXAuaXRlbXMuZGlzcGxheVxuICAgICAgICAgIC8vICAgfVxuICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgLy8gICB0dEN0eC50b29sdGlwVGl0bGUuc3R5bGUuZGlzcGxheSA9IHcuY29uZmlnLnRvb2x0aXAuaXRlbXMuZGlzcGxheVxuICAgICAgICAgIC8vIH1cblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRvZ2dsZUFjdGl2ZUluYWN0aXZlU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlQWN0aXZlSW5hY3RpdmVTZXJpZXMoc2hhcmVkKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmIChzaGFyZWQpIHtcbiAgICAgICAgICAvLyBtYWtlIGFsbCB0b29sdGlwcyBhY3RpdmVcbiAgICAgICAgICB0aGlzLnRvb2x0aXBVdGlsLnRvZ2dsZUFsbFRvb2x0aXBTZXJpZXNHcm91cHMoJ2VuYWJsZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRpc2FibGUgYWxsIHRvb2x0aXAgdGV4dCBncm91cHNcbiAgICAgICAgICB0aGlzLnRvb2x0aXBVdGlsLnRvZ2dsZUFsbFRvb2x0aXBTZXJpZXNHcm91cHMoJ2Rpc2FibGUnKTsgLy8gZW5hYmxlIHRoZSBmaXJzdCB0b29sdGlwIHRleHQgZ3JvdXBcblxuICAgICAgICAgIHZhciBmaXJzdFRvb2x0aXBTZXJpZXNHcm91cCA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwJyk7XG5cbiAgICAgICAgICBpZiAoZmlyc3RUb29sdGlwU2VyaWVzR3JvdXApIHtcbiAgICAgICAgICAgIGZpcnN0VG9vbHRpcFNlcmllc0dyb3VwLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtYWN0aXZlJyk7XG4gICAgICAgICAgICBmaXJzdFRvb2x0aXBTZXJpZXNHcm91cC5zdHlsZS5kaXNwbGF5ID0gdy5jb25maWcudG9vbHRpcC5pdGVtcy5kaXNwbGF5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRWYWx1ZXNUb1ByaW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVzVG9QcmludChfcmVmNSkge1xuICAgICAgICB2YXIgaSA9IF9yZWY1LmksXG4gICAgICAgICAgICBqID0gX3JlZjUuajtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBmaWx0ZXJlZFNlcmllc1ggPSB0aGlzLmN0eC5zZXJpZXMuZmlsdGVyZWRTZXJpZXNYKCk7XG4gICAgICAgIHZhciB4VmFsID0gJyc7XG4gICAgICAgIHZhciB4QXhpc1RUVmFsID0gJyc7XG4gICAgICAgIHZhciB6VmFsID0gbnVsbDtcbiAgICAgICAgdmFyIHZhbCA9IG51bGw7XG4gICAgICAgIHZhciBjdXN0b21Gb3JtYXR0ZXJPcHRzID0ge1xuICAgICAgICAgIHNlcmllczogdy5nbG9iYWxzLnNlcmllcyxcbiAgICAgICAgICBzZXJpZXNJbmRleDogaSxcbiAgICAgICAgICBkYXRhUG9pbnRJbmRleDogaixcbiAgICAgICAgICB3OiB3XG4gICAgICAgIH07XG4gICAgICAgIHZhciB6Rm9ybWF0dGVyID0gdy5nbG9iYWxzLnR0WkZvcm1hdHRlcjtcblxuICAgICAgICBpZiAoaiA9PT0gbnVsbCkge1xuICAgICAgICAgIHZhbCA9IHcuZ2xvYmFscy5zZXJpZXNbaV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgICB4VmFsID0gZmlsdGVyZWRTZXJpZXNYW2ldW2pdO1xuXG4gICAgICAgICAgICBpZiAoZmlsdGVyZWRTZXJpZXNYW2ldLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAvLyBhIHNlcmllcyAocG9zc2libHkgdGhlIGZpcnN0IG9uZSkgbWlnaHQgYmUgY29sbGFwc2VkLCBzbyBnZXQgdGhlIG5leHQgYWN0aXZlIGluZGV4XG4gICAgICAgICAgICAgIHZhciBmaXJzdEFjdGl2ZVNlcmllc0luZGV4ID0gdGhpcy50b29sdGlwVXRpbC5nZXRGaXJzdEFjdGl2ZVhBcnJheShmaWx0ZXJlZFNlcmllc1gpO1xuICAgICAgICAgICAgICB4VmFsID0gZmlsdGVyZWRTZXJpZXNYW2ZpcnN0QWN0aXZlU2VyaWVzSW5kZXhdW2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4VmFsID0gdHlwZW9mIHcuZ2xvYmFscy5sYWJlbHNbal0gIT09ICd1bmRlZmluZWQnID8gdy5nbG9iYWxzLmxhYmVsc1tqXSA6ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBidWZmZXJYVmFsID0geFZhbDtcblxuICAgICAgICBpZiAody5nbG9iYWxzLmlzWE51bWVyaWMgJiYgdy5jb25maWcueGF4aXMudHlwZSA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICAgIHZhciB4Rm9ybWF0ID0gbmV3IEZvcm1hdHRlcnModGhpcy5jdHgpO1xuICAgICAgICAgIHhWYWwgPSB4Rm9ybWF0LnhMYWJlbEZvcm1hdCh3Lmdsb2JhbHMudHRLZXlGb3JtYXR0ZXIsIGJ1ZmZlclhWYWwsIGJ1ZmZlclhWYWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdy5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgeFZhbCA9IHcuZ2xvYmFscy54TGFiZWxGb3JtYXR0ZXIoYnVmZmVyWFZhbCwgY3VzdG9tRm9ybWF0dGVyT3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIG92ZXJyaWRlIGRlZmF1bHQgeC1heGlzIGZvcm1hdHRlciB3aXRoIHRvb2x0aXAgZm9ybWF0dGVyXG5cblxuICAgICAgICBpZiAody5jb25maWcudG9vbHRpcC54LmZvcm1hdHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgeFZhbCA9IHcuZ2xvYmFscy50dEtleUZvcm1hdHRlcihidWZmZXJYVmFsLCBjdXN0b21Gb3JtYXR0ZXJPcHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuc2VyaWVzWi5sZW5ndGggPiAwICYmIHcuZ2xvYmFscy5zZXJpZXNaWzBdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB6VmFsID0gekZvcm1hdHRlcih3Lmdsb2JhbHMuc2VyaWVzWltpXVtqXSwgdyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHcuY29uZmlnLnhheGlzLnRvb2x0aXAuZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgeEF4aXNUVFZhbCA9IHcuZ2xvYmFscy54YXhpc1Rvb2x0aXBGb3JtYXR0ZXIoYnVmZmVyWFZhbCwgY3VzdG9tRm9ybWF0dGVyT3B0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeEF4aXNUVFZhbCA9IHhWYWw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbDogQXJyYXkuaXNBcnJheSh2YWwpID8gdmFsLmpvaW4oJyAnKSA6IHZhbCxcbiAgICAgICAgICB4VmFsOiBBcnJheS5pc0FycmF5KHhWYWwpID8geFZhbC5qb2luKCcgJykgOiB4VmFsLFxuICAgICAgICAgIHhBeGlzVFRWYWw6IEFycmF5LmlzQXJyYXkoeEF4aXNUVFZhbCkgPyB4QXhpc1RUVmFsLmpvaW4oJyAnKSA6IHhBeGlzVFRWYWwsXG4gICAgICAgICAgelZhbDogelZhbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVDdXN0b21Ub29sdGlwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ3VzdG9tVG9vbHRpcChfcmVmNikge1xuICAgICAgICB2YXIgaSA9IF9yZWY2LmksXG4gICAgICAgICAgICBqID0gX3JlZjYuaixcbiAgICAgICAgICAgIHkxID0gX3JlZjYueTEsXG4gICAgICAgICAgICB5MiA9IF9yZWY2LnkyLFxuICAgICAgICAgICAgdyA9IF9yZWY2Lnc7XG4gICAgICAgIHZhciB0b29sdGlwRWwgPSB0aGlzLnR0Q3R4LmdldEVsVG9vbHRpcCgpO1xuICAgICAgICB2YXIgZm4gPSB3LmNvbmZpZy50b29sdGlwLmN1c3RvbTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmbikgJiYgZm5baV0pIHtcbiAgICAgICAgICBmbiA9IGZuW2ldO1xuICAgICAgICB9IC8vIG92ZXJyaWRlIGV2ZXJ5dGhpbmcgd2l0aCBhIGN1c3RvbSBodG1sIHRvb2x0aXAgYW5kIHJlcGxhY2UgaXRcblxuXG4gICAgICAgIHRvb2x0aXBFbC5pbm5lckhUTUwgPSBmbih7XG4gICAgICAgICAgY3R4OiB0aGlzLmN0eCxcbiAgICAgICAgICBzZXJpZXM6IHcuZ2xvYmFscy5zZXJpZXMsXG4gICAgICAgICAgc2VyaWVzSW5kZXg6IGksXG4gICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGosXG4gICAgICAgICAgeTE6IHkxLFxuICAgICAgICAgIHkyOiB5MixcbiAgICAgICAgICB3OiB3XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMYWJlbHM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBUb29sdGlwLlBvc2l0aW9uIENsYXNzIHRvIG1vdmUgdGhlIHRvb2x0aXAgYmFzZWQgb24geCBhbmQgeSBwb3NpdGlvbi5cbiAgICpcbiAgICogQG1vZHVsZSBUb29sdGlwLlBvc2l0aW9uXG4gICAqKi9cblxuICB2YXIgUG9zaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBvc2l0aW9uKHRvb2x0aXBDb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9zaXRpb24pO1xuXG4gICAgICB0aGlzLnR0Q3R4ID0gdG9vbHRpcENvbnRleHQ7XG4gICAgICB0aGlzLmN0eCA9IHRvb2x0aXBDb250ZXh0LmN0eDtcbiAgICAgIHRoaXMudyA9IHRvb2x0aXBDb250ZXh0Lnc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgd2lsbCBtb3ZlIHRoZSBjcm9zc2hhaXIgKHRoZSB2ZXJ0aWNhbC9ob3J6IGxpbmUgdGhhdCBtb3ZlcyBhbG9uZyB3aXRoIG1vdXNlKVxuICAgICAqIEFsb25nIHdpdGggdGhpcywgdGhpcyBmdW5jdGlvbiBhbHNvIGNhbGxzIHRoZSB4YXhpc01vdmUgZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge2ludH0gLSBjeCA9IHBvaW50J3MgeCBwb3NpdGlvbiwgd2hlcmV2ZXIgcG9pbnQncyB4IGlzLCB5b3UgbmVlZCB0byBtb3ZlIGNyb3NzaGFpclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoUG9zaXRpb24sIFt7XG4gICAgICBrZXk6IFwibW92ZVhDcm9zc2hhaXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVhDcm9zc2hhaXJzKGN4KSB7XG4gICAgICAgIHZhciBqID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHhjcm9zc2hhaXJzID0gdHRDdHguZ2V0RWxYQ3Jvc3NoYWlycygpO1xuICAgICAgICB2YXIgeCA9IGN4IC0gdHRDdHgueGNyb3NzaGFpcnNXaWR0aCAvIDI7XG4gICAgICAgIHZhciB0aWNrQW1vdW50ID0gdy5nbG9iYWxzLmxhYmVscy5zbGljZSgpLmxlbmd0aDtcblxuICAgICAgICBpZiAoaiAhPT0gbnVsbCkge1xuICAgICAgICAgIHggPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gdGlja0Ftb3VudCAqIGo7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeGNyb3NzaGFpcnMgIT09IG51bGwpIHtcbiAgICAgICAgICB4Y3Jvc3NoYWlycy5zZXRBdHRyaWJ1dGUoJ3gnLCB4KTtcbiAgICAgICAgICB4Y3Jvc3NoYWlycy5zZXRBdHRyaWJ1dGUoJ3gxJywgeCk7XG4gICAgICAgICAgeGNyb3NzaGFpcnMuc2V0QXR0cmlidXRlKCd4MicsIHgpO1xuICAgICAgICAgIHhjcm9zc2hhaXJzLnNldEF0dHJpYnV0ZSgneTInLCB3Lmdsb2JhbHMuZ3JpZEhlaWdodCk7XG4gICAgICAgICAgeGNyb3NzaGFpcnMuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgIHggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHggPiB3Lmdsb2JhbHMuZ3JpZFdpZHRoKSB7XG4gICAgICAgICAgeCA9IHcuZ2xvYmFscy5ncmlkV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHRDdHguYmx4YXhpc1Rvb2x0aXApIHtcbiAgICAgICAgICB2YXIgdHggPSB4O1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMud2lkdGggPT09ICd0aWNrV2lkdGgnIHx8IHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMud2lkdGggPT09ICdiYXJXaWR0aCcpIHtcbiAgICAgICAgICAgIHR4ID0geCArIHR0Q3R4Lnhjcm9zc2hhaXJzV2lkdGggLyAyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubW92ZVhBeGlzVG9vbHRpcCh0eCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogVGhpcyB3aWxsIG1vdmUgdGhlIGNyb3NzaGFpciAodGhlIHZlcnRpY2FsL2hvcnogbGluZSB0aGF0IG1vdmVzIGFsb25nIHdpdGggbW91c2UpXG4gICAgICAgKiBBbG9uZyB3aXRoIHRoaXMsIHRoaXMgZnVuY3Rpb24gYWxzbyBjYWxscyB0aGUgeGF4aXNNb3ZlIGZ1bmN0aW9uXG4gICAgICAgKiBAbWVtYmVyb2YgUG9zaXRpb25cbiAgICAgICAqIEBwYXJhbSB7aW50fSAtIGN4ID0gcG9pbnQncyB4IHBvc2l0aW9uLCB3aGVyZXZlciBwb2ludCdzIHggaXMsIHlvdSBuZWVkIHRvIG1vdmUgY3Jvc3NoYWlyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtb3ZlWUNyb3NzaGFpcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlWUNyb3NzaGFpcnMoY3kpIHtcbiAgICAgICAgdmFyIHR0Q3R4ID0gdGhpcy50dEN0eDtcblxuICAgICAgICBpZiAodHRDdHgueWNyb3NzaGFpcnMgIT09IG51bGwpIHtcbiAgICAgICAgICBHcmFwaGljcy5zZXRBdHRycyh0dEN0eC55Y3Jvc3NoYWlycywge1xuICAgICAgICAgICAgeTE6IGN5LFxuICAgICAgICAgICAgeTI6IGN5XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnModHRDdHgueWNyb3NzaGFpcnNIaWRkZW4sIHtcbiAgICAgICAgICAgIHkxOiBjeSxcbiAgICAgICAgICAgIHkyOiBjeVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqKiBBeGlzVG9vbHRpcCBpcyB0aGUgc21hbGwgcmVjdGFuZ2xlIHdoaWNoIGFwcGVhcnMgb24geCBheGlzIHdpdGggeCB2YWx1ZSwgd2hlbiB1c2VyIG1vdmVzXG4gICAgICAgKiBAbWVtYmVyb2YgUG9zaXRpb25cbiAgICAgICAqIEBwYXJhbSB7aW50fSAtIGN4ID0gcG9pbnQncyB4IHBvc2l0aW9uLCB3aGVyZXZlciBwb2ludCdzIHggaXMsIHlvdSBuZWVkIHRvIG1vdmVcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vdmVYQXhpc1Rvb2x0aXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlWEF4aXNUb29sdGlwKGN4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuXG4gICAgICAgIGlmICh0dEN0eC54YXhpc1Rvb2x0aXAgIT09IG51bGwpIHtcbiAgICAgICAgICB0dEN0eC54YXhpc1Rvb2x0aXAuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgICB2YXIgY3kgPSB0dEN0eC54YXhpc09mZlkgKyB3LmNvbmZpZy54YXhpcy50b29sdGlwLm9mZnNldFkgKyB3Lmdsb2JhbHMudHJhbnNsYXRlWSArIDEgKyB3LmNvbmZpZy54YXhpcy5vZmZzZXRZO1xuICAgICAgICAgIHZhciB4YXhpc1RUVGV4dCA9IHR0Q3R4LnhheGlzVG9vbHRpcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2YXIgeGF4aXNUVFRleHRXaWR0aCA9IHhheGlzVFRUZXh0LndpZHRoO1xuICAgICAgICAgIGN4ID0gY3ggLSB4YXhpc1RUVGV4dFdpZHRoIC8gMjtcblxuICAgICAgICAgIGlmICghaXNOYU4oY3gpKSB7XG4gICAgICAgICAgICBjeCA9IGN4ICsgdy5nbG9iYWxzLnRyYW5zbGF0ZVg7XG4gICAgICAgICAgICB2YXIgdGV4dFJlY3QgPSAwO1xuICAgICAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgICAgIHRleHRSZWN0ID0gZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKHR0Q3R4LnhheGlzVG9vbHRpcFRleHQuaW5uZXJIVE1MKTtcbiAgICAgICAgICAgIHR0Q3R4LnhheGlzVG9vbHRpcFRleHQuc3R5bGUubWluV2lkdGggPSB0ZXh0UmVjdC53aWR0aCArICdweCc7XG4gICAgICAgICAgICB0dEN0eC54YXhpc1Rvb2x0aXAuc3R5bGUubGVmdCA9IGN4ICsgJ3B4JztcbiAgICAgICAgICAgIHR0Q3R4LnhheGlzVG9vbHRpcC5zdHlsZS50b3AgPSBjeSArICdweCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vdmVZQXhpc1Rvb2x0aXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlWUF4aXNUb29sdGlwKGluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuXG4gICAgICAgIGlmICh0dEN0eC55YXhpc1RURWxzID09PSBudWxsKSB7XG4gICAgICAgICAgdHRDdHgueWF4aXNUVEVscyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hcGV4Y2hhcnRzLXlheGlzdG9vbHRpcCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHljcm9zc2hhaXJzSGlkZGVuUmVjdFkxID0gcGFyc2VJbnQodHRDdHgueWNyb3NzaGFpcnNIaWRkZW4uZ2V0QXR0cmlidXRlKCd5MScpLCAxMCk7XG4gICAgICAgIHZhciBjeSA9IHcuZ2xvYmFscy50cmFuc2xhdGVZICsgeWNyb3NzaGFpcnNIaWRkZW5SZWN0WTE7XG4gICAgICAgIHZhciB5QXhpc1RUUmVjdCA9IHR0Q3R4LnlheGlzVFRFbHNbaW5kZXhdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgeUF4aXNUVEhlaWdodCA9IHlBeGlzVFRSZWN0LmhlaWdodDtcbiAgICAgICAgdmFyIGN4ID0gdy5nbG9iYWxzLnRyYW5zbGF0ZVlBeGlzWFtpbmRleF0gLSAyO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1tpbmRleF0ub3Bwb3NpdGUpIHtcbiAgICAgICAgICBjeCA9IGN4IC0gMjY7XG4gICAgICAgIH1cblxuICAgICAgICBjeSA9IGN5IC0geUF4aXNUVEhlaWdodCAvIDI7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pZ25vcmVZQXhpc0luZGV4ZXMuaW5kZXhPZihpbmRleCkgPT09IC0xKSB7XG4gICAgICAgICAgdHRDdHgueWF4aXNUVEVsc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgICB0dEN0eC55YXhpc1RURWxzW2luZGV4XS5zdHlsZS50b3AgPSBjeSArICdweCc7XG4gICAgICAgICAgdHRDdHgueWF4aXNUVEVsc1tpbmRleF0uc3R5bGUubGVmdCA9IGN4ICsgdy5jb25maWcueWF4aXNbaW5kZXhdLnRvb2x0aXAub2Zmc2V0WCArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHRDdHgueWF4aXNUVEVsc1tpbmRleF0uY2xhc3NMaXN0LnJlbW92ZSgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiogbW92ZXMgdGhlIHdob2xlIHRvb2x0aXAgYnkgY2hhbmdpbmcgeCwgeSBhdHRyc1xuICAgICAgICogQG1lbWJlcm9mIFBvc2l0aW9uXG4gICAgICAgKiBAcGFyYW0ge2ludH0gLSBjeCA9IHBvaW50J3MgeCBwb3NpdGlvbiwgd2hlcmV2ZXIgcG9pbnQncyB4IGlzLCB5b3UgbmVlZCB0byBtb3ZlIHRvb2x0aXBcbiAgICAgICAqIEBwYXJhbSB7aW50fSAtIGN5ID0gcG9pbnQncyB5IHBvc2l0aW9uLCB3aGVyZXZlciBwb2ludCdzIHkgaXMsIHlvdSBuZWVkIHRvIG1vdmUgdG9vbHRpcFxuICAgICAgICogQHBhcmFtIHtpbnR9IC0gciA9IHBvaW50J3MgcmFkaXVzXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtb3ZlVG9vbHRpcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVUb29sdGlwKGN4LCBjeSkge1xuICAgICAgICB2YXIgciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB0dEN0eCA9IHRoaXMudHRDdHg7XG4gICAgICAgIHZhciB0b29sdGlwRWwgPSB0dEN0eC5nZXRFbFRvb2x0aXAoKTtcbiAgICAgICAgdmFyIHRvb2x0aXBSZWN0ID0gdHRDdHgudG9vbHRpcFJlY3Q7XG4gICAgICAgIHZhciBwb2ludFIgPSByICE9PSBudWxsID8gcGFyc2VGbG9hdChyKSA6IDE7XG4gICAgICAgIHZhciB4ID0gcGFyc2VGbG9hdChjeCkgKyBwb2ludFIgKyA1O1xuICAgICAgICB2YXIgeSA9IHBhcnNlRmxvYXQoY3kpICsgcG9pbnRSIC8gMjsgLy8gLSB0b29sdGlwUmVjdC50dEhlaWdodCAvIDJcblxuICAgICAgICBpZiAoeCA+IHcuZ2xvYmFscy5ncmlkV2lkdGggLyAyKSB7XG4gICAgICAgICAgeCA9IHggLSB0b29sdGlwUmVjdC50dFdpZHRoIC0gcG9pbnRSIC0gMTU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeCA+IHcuZ2xvYmFscy5ncmlkV2lkdGggLSB0b29sdGlwUmVjdC50dFdpZHRoIC0gMTApIHtcbiAgICAgICAgICB4ID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAtIHRvb2x0aXBSZWN0LnR0V2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeCA8IC0yMCkge1xuICAgICAgICAgIHggPSAtMjA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5jb25maWcudG9vbHRpcC5mb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgICB2YXIgZWxHcmlkID0gdHRDdHguZ2V0RWxHcmlkKCk7XG4gICAgICAgICAgdmFyIHNlcmllc0JvdW5kID0gZWxHcmlkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIHkgPSB0dEN0eC5lLmNsaWVudFkgKyB3Lmdsb2JhbHMudHJhbnNsYXRlWSAtIHNlcmllc0JvdW5kLnRvcCAtIHRvb2x0aXBSZWN0LnR0SGVpZ2h0IC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdy5jb25maWcudG9vbHRpcC5mb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgICB2YXIgbmV3UG9zaXRpb25zID0gdGhpcy5wb3NpdGlvbkNoZWNrcyh0b29sdGlwUmVjdCwgeCwgeSk7XG4gICAgICAgICAgeCA9IG5ld1Bvc2l0aW9ucy54O1xuICAgICAgICAgIHkgPSBuZXdQb3NpdGlvbnMueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oeCkpIHtcbiAgICAgICAgICB4ID0geCArIHcuZ2xvYmFscy50cmFuc2xhdGVYO1xuICAgICAgICAgIHRvb2x0aXBFbC5zdHlsZS5sZWZ0ID0geCArICdweCc7XG4gICAgICAgICAgdG9vbHRpcEVsLnN0eWxlLnRvcCA9IHkgKyAncHgnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBvc2l0aW9uQ2hlY2tzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcG9zaXRpb25DaGVja3ModG9vbHRpcFJlY3QsIHgsIHkpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHRvb2x0aXBSZWN0LnR0SGVpZ2h0IC8gMiArIHkgPiB3Lmdsb2JhbHMuZ3JpZEhlaWdodCkge1xuICAgICAgICAgIHkgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAtIHRvb2x0aXBSZWN0LnR0SGVpZ2h0ICsgdy5nbG9iYWxzLnRyYW5zbGF0ZVk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeSA8IDApIHtcbiAgICAgICAgICB5ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vdmVNYXJrZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZU1hcmtlcnMoaSwgaikge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHR0Q3R4ID0gdGhpcy50dEN0eDtcblxuICAgICAgICBpZiAody5nbG9iYWxzLm1hcmtlcnMuc2l6ZVtpXSA+IDApIHtcbiAgICAgICAgICB2YXIgYWxsUG9pbnRzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbChcIiAuYXBleGNoYXJ0cy1zZXJpZXNbZGF0YVxcXFw6cmVhbEluZGV4PSdcIi5jb25jYXQoaSwgXCInXSAuYXBleGNoYXJ0cy1tYXJrZXJcIikpO1xuXG4gICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBhbGxQb2ludHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJzZUludChhbGxQb2ludHNbcF0uZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApID09PSBqKSB7XG4gICAgICAgICAgICAgIHR0Q3R4Lm1hcmtlci5yZXNldFBvaW50c1NpemUoKTtcbiAgICAgICAgICAgICAgdHRDdHgubWFya2VyLmVubGFyZ2VDdXJyZW50UG9pbnQoaiwgYWxsUG9pbnRzW3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHRDdHgubWFya2VyLnJlc2V0UG9pbnRzU2l6ZSgpO1xuICAgICAgICAgIHRoaXMubW92ZUR5bmFtaWNQb2ludE9uSG92ZXIoaiwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHdoZW4geW91IG5lZWQgdG8gc2hvdyBtYXJrZXJzL3BvaW50cyBvbmx5IG9uIGhvdmVyIC1cbiAgICAgIC8vIERJRkZFUkVOVCBYIFZBTFVFUyBpbiBtdWx0aXBsZSBzZXJpZXNcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtb3ZlRHluYW1pY1BvaW50T25Ib3ZlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVEeW5hbWljUG9pbnRPbkhvdmVyKGosIGNhcHR1cmVkU2VyaWVzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuICAgICAgICB2YXIgY3ggPSAwO1xuICAgICAgICB2YXIgY3kgPSAwO1xuICAgICAgICB2YXIgcG9pbnRzQXJyID0gdy5nbG9iYWxzLnBvaW50c0FycmF5O1xuICAgICAgICB2YXIgaG92ZXJTaXplID0gdHRDdHgudG9vbHRpcFV0aWwuZ2V0SG92ZXJNYXJrZXJTaXplKGNhcHR1cmVkU2VyaWVzKTtcbiAgICAgICAgdmFyIHNlclR5cGUgPSB3LmNvbmZpZy5zZXJpZXNbY2FwdHVyZWRTZXJpZXNdLnR5cGU7XG5cbiAgICAgICAgaWYgKHNlclR5cGUgJiYgKHNlclR5cGUgPT09ICdjb2x1bW4nIHx8IHNlclR5cGUgPT09ICdjYW5kbGVzdGljaycpKSB7XG4gICAgICAgICAgLy8gZml4IGVycm9yIG1lbnRpb25lZCBpbiAjODExXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3ggPSBwb2ludHNBcnJbY2FwdHVyZWRTZXJpZXNdW2pdWzBdO1xuICAgICAgICBjeSA9IHBvaW50c0FycltjYXB0dXJlZFNlcmllc11bal1bMV0gPyBwb2ludHNBcnJbY2FwdHVyZWRTZXJpZXNdW2pdWzFdIDogMDtcbiAgICAgICAgdmFyIHBvaW50ID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcihcIi5hcGV4Y2hhcnRzLXNlcmllc1tkYXRhXFxcXDpyZWFsSW5kZXg9J1wiLmNvbmNhdChjYXB0dXJlZFNlcmllcywgXCInXSAuYXBleGNoYXJ0cy1zZXJpZXMtbWFya2VycyBjaXJjbGVcIikpO1xuXG4gICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgIHBvaW50LnNldEF0dHJpYnV0ZSgncicsIGhvdmVyU2l6ZSk7XG4gICAgICAgICAgcG9pbnQuc2V0QXR0cmlidXRlKCdjeCcsIGN4KTtcbiAgICAgICAgICBwb2ludC5zZXRBdHRyaWJ1dGUoJ2N5JywgY3kpO1xuICAgICAgICB9IC8vIHBvaW50LnN0eWxlLm9wYWNpdHkgPSB3LmNvbmZpZy5tYXJrZXJzLmhvdmVyLm9wYWNpdHlcblxuXG4gICAgICAgIHRoaXMubW92ZVhDcm9zc2hhaXJzKGN4KTtcblxuICAgICAgICBpZiAoIXR0Q3R4LmZpeGVkVG9vbHRpcCkge1xuICAgICAgICAgIHRoaXMubW92ZVRvb2x0aXAoY3gsIGN5LCBob3ZlclNpemUpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIHlvdSBuZWVkIHRvIHNob3cgbWFya2Vycy9wb2ludHMgb25seSBvbiBob3ZlciAtXG4gICAgICAvLyBTQU1FIFggVkFMVUVTIGluIG11bHRpcGxlIHNlcmllc1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vdmVEeW5hbWljUG9pbnRzT25Ib3ZlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVEeW5hbWljUG9pbnRzT25Ib3ZlcihqKSB7XG4gICAgICAgIHZhciB0dEN0eCA9IHRoaXMudHRDdHg7XG4gICAgICAgIHZhciB3ID0gdHRDdHgudztcbiAgICAgICAgdmFyIGN4ID0gMDtcbiAgICAgICAgdmFyIGN5ID0gMDtcbiAgICAgICAgdmFyIGFjdGl2ZVNlcmllcyA9IDA7XG4gICAgICAgIHZhciBwb2ludHNBcnIgPSB3Lmdsb2JhbHMucG9pbnRzQXJyYXk7XG4gICAgICAgIHZhciBzZXJpZXMgPSBuZXcgU2VyaWVzKHRoaXMuY3R4KTtcbiAgICAgICAgYWN0aXZlU2VyaWVzID0gc2VyaWVzLmdldEFjdGl2ZUNvbmZpZ1Nlcmllc0luZGV4KHRydWUpO1xuICAgICAgICB2YXIgaG92ZXJTaXplID0gdHRDdHgudG9vbHRpcFV0aWwuZ2V0SG92ZXJNYXJrZXJTaXplKGFjdGl2ZVNlcmllcyk7XG5cbiAgICAgICAgaWYgKHBvaW50c0FyclthY3RpdmVTZXJpZXNdKSB7XG4gICAgICAgICAgY3ggPSBwb2ludHNBcnJbYWN0aXZlU2VyaWVzXVtqXVswXTtcbiAgICAgICAgICBjeSA9IHBvaW50c0FyclthY3RpdmVTZXJpZXNdW2pdWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvaW50cyA9IHR0Q3R4LnRvb2x0aXBVdGlsLmdldEFsbE1hcmtlcnMoKTtcblxuICAgICAgICBpZiAocG9pbnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnRBcnIgPSBwb2ludHNBcnJbcF07XG5cbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuY29tYm9DaGFydHMpIHtcbiAgICAgICAgICAgICAgLy8gaW4gYSBjb21ibyBjaGFydCwgaWYgY29sdW1uIGNoYXJ0cyBhcmUgcHJlc2VudCwgbWFya2VycyB3aWxsIG5vdCBtYXRjaCB3aXRoIHRoZSBudW1iZXIgb2Ygc2VyaWVzLCBoZW5jZSB0aGlzIHBhdGNoIHRvIHB1c2ggYSBudWxsIHZhbHVlIGluIHBvaW50cyBhcnJheVxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHBvaW50QXJyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8vIG5vZGVsaXN0IHRvIGFycmF5XG4gICAgICAgICAgICAgICAgcG9pbnRzLnNwbGljZShwLCAwLCBudWxsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocG9pbnRBcnIgJiYgcG9pbnRBcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciBwY3kgPSBwb2ludHNBcnJbcF1bal1bMV07XG4gICAgICAgICAgICAgIHBvaW50c1twXS5zZXRBdHRyaWJ1dGUoJ2N4JywgY3gpO1xuXG4gICAgICAgICAgICAgIGlmIChwY3kgIT09IG51bGwgJiYgIWlzTmFOKHBjeSkpIHtcbiAgICAgICAgICAgICAgICBwb2ludHNbcF0gJiYgcG9pbnRzW3BdLnNldEF0dHJpYnV0ZSgncicsIGhvdmVyU2l6ZSk7XG4gICAgICAgICAgICAgICAgcG9pbnRzW3BdICYmIHBvaW50c1twXS5zZXRBdHRyaWJ1dGUoJ2N5JywgcGN5KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb2ludHNbcF0gJiYgcG9pbnRzW3BdLnNldEF0dHJpYnV0ZSgncicsIDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tb3ZlWENyb3NzaGFpcnMoY3gpO1xuXG4gICAgICAgIGlmICghdHRDdHguZml4ZWRUb29sdGlwKSB7XG4gICAgICAgICAgdmFyIHRjeSA9IGN5IHx8IHcuZ2xvYmFscy5ncmlkSGVpZ2h0O1xuICAgICAgICAgIHRoaXMubW92ZVRvb2x0aXAoY3gsIHRjeSwgaG92ZXJTaXplKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtb3ZlU3RpY2t5VG9vbHRpcE92ZXJCYXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVN0aWNreVRvb2x0aXBPdmVyQmFycyhqKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuICAgICAgICB2YXIgYmFyTGVuID0gdy5nbG9iYWxzLmNvbHVtblNlcmllcyA/IHcuZ2xvYmFscy5jb2x1bW5TZXJpZXMubGVuZ3RoIDogdy5nbG9iYWxzLnNlcmllcy5sZW5ndGg7XG4gICAgICAgIHZhciBpID0gYmFyTGVuID49IDIgJiYgYmFyTGVuICUgMiA9PT0gMCA/IE1hdGguZmxvb3IoYmFyTGVuIC8gMikgOiBNYXRoLmZsb29yKGJhckxlbiAvIDIpICsgMTtcbiAgICAgICAgdmFyIGpCYXIgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMtYmFyLXNlcmllcyAuYXBleGNoYXJ0cy1zZXJpZXNbcmVsPSdcIi5jb25jYXQoaSwgXCInXSBwYXRoW2o9J1wiKS5jb25jYXQoaiwgXCInXSwgLmFwZXhjaGFydHMtY2FuZGxlc3RpY2stc2VyaWVzIC5hcGV4Y2hhcnRzLXNlcmllc1tyZWw9J1wiKS5jb25jYXQoaSwgXCInXSBwYXRoW2o9J1wiKS5jb25jYXQoaiwgXCInXSwgLmFwZXhjaGFydHMtcmFuZ2ViYXItc2VyaWVzIC5hcGV4Y2hhcnRzLXNlcmllc1tyZWw9J1wiKS5jb25jYXQoaSwgXCInXSBwYXRoW2o9J1wiKS5jb25jYXQoaiwgXCInXVwiKSk7XG4gICAgICAgIHZhciBiY3ggPSBqQmFyID8gcGFyc2VGbG9hdChqQmFyLmdldEF0dHJpYnV0ZSgnY3gnKSkgOiAwO1xuICAgICAgICB2YXIgYmN5ID0gMDtcbiAgICAgICAgdmFyIGJ3ID0gakJhciA/IHBhcnNlRmxvYXQoakJhci5nZXRBdHRyaWJ1dGUoJ2JhcldpZHRoJykpIDogMDtcblxuICAgICAgICBpZiAody5nbG9iYWxzLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICBiY3ggPSBiY3ggLSAoYmFyTGVuICUgMiAhPT0gMCA/IGJ3IC8gMiA6IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJjeCA9IHR0Q3R4LnhBeGlzVGlja3NQb3NpdGlvbnNbaiAtIDFdICsgdHRDdHguZGF0YVBvaW50c0RpdmlkZWRXaWR0aCAvIDI7XG5cbiAgICAgICAgICBpZiAoaXNOYU4oYmN4KSkge1xuICAgICAgICAgICAgYmN4ID0gdHRDdHgueEF4aXNUaWNrc1Bvc2l0aW9uc1tqXSAtIHR0Q3R4LmRhdGFQb2ludHNEaXZpZGVkV2lkdGggLyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyB0b29sdGlwIHdpbGwgbW92ZSB2ZXJ0aWNhbGx5IGFsb25nIHdpdGggbW91c2UgYXMgaXQgaXMgYSBzaGFyZWQgdG9vbHRpcFxuXG5cbiAgICAgICAgdmFyIGVsR3JpZCA9IHR0Q3R4LmdldEVsR3JpZCgpO1xuICAgICAgICB2YXIgc2VyaWVzQm91bmQgPSBlbEdyaWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGJjeSA9IHR0Q3R4LmUuY2xpZW50WSAtIHNlcmllc0JvdW5kLnRvcCAtIHR0Q3R4LnRvb2x0aXBSZWN0LnR0SGVpZ2h0IC8gMjtcbiAgICAgICAgdGhpcy5tb3ZlWENyb3NzaGFpcnMoYmN4KTtcblxuICAgICAgICBpZiAoIXR0Q3R4LmZpeGVkVG9vbHRpcCkge1xuICAgICAgICAgIHZhciB0Y3kgPSBiY3kgfHwgdy5nbG9iYWxzLmdyaWRIZWlnaHQ7XG4gICAgICAgICAgdGhpcy5tb3ZlVG9vbHRpcChiY3gsIHRjeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUG9zaXRpb247XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBUb29sdGlwLk1hcmtlciBDbGFzcyB0byBkcmF3IHRleHRzIG9uIHRoZSB0b29sdGlwLlxuICAgKlxuICAgKiBAbW9kdWxlIFRvb2x0aXAuTWFya2VyXG4gICAqKi9cblxuICB2YXIgTWFya2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXJrZXIodG9vbHRpcENvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXJrZXIpO1xuXG4gICAgICB0aGlzLncgPSB0b29sdGlwQ29udGV4dC53O1xuICAgICAgdGhpcy50dEN0eCA9IHRvb2x0aXBDb250ZXh0O1xuICAgICAgdGhpcy5jdHggPSB0b29sdGlwQ29udGV4dC5jdHg7XG4gICAgICB0aGlzLnRvb2x0aXBQb3NpdGlvbiA9IG5ldyBQb3NpdGlvbih0b29sdGlwQ29udGV4dCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKE1hcmtlciwgW3tcbiAgICAgIGtleTogXCJkcmF3RHluYW1pY1BvaW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdEeW5hbWljUG9pbnRzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBNYXJrZXJzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGVsc1NlcmllcyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hcGV4Y2hhcnRzLXNlcmllcycpO1xuICAgICAgICBlbHNTZXJpZXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoZWxzU2VyaWVzKTtcbiAgICAgICAgZWxzU2VyaWVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKGIuZ2V0QXR0cmlidXRlKCdkYXRhOnJlYWxJbmRleCcpKSA8IE51bWJlcihhLmdldEF0dHJpYnV0ZSgnZGF0YTpyZWFsSW5kZXgnKSkgPyAwIDogLTE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzU2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHBvaW50c01haW4gPSBlbHNTZXJpZXNbaV0ucXVlcnlTZWxlY3RvcihcIi5hcGV4Y2hhcnRzLXNlcmllcy1tYXJrZXJzLXdyYXBcIik7XG5cbiAgICAgICAgICBpZiAocG9pbnRzTWFpbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gaXQgY2FuIGJlIG51bGwgYXMgd2UgaGF2ZSB0b29sdGlwcyBpbiBkb251dC9iYXIgY2hhcnRzXG4gICAgICAgICAgICB2YXIgcG9pbnQgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgUG9pbnRDbGFzc2VzID0gXCJhcGV4Y2hhcnRzLW1hcmtlciB3XCIuY29uY2F0KChNYXRoLnJhbmRvbSgpICsgMSkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg0KSk7XG5cbiAgICAgICAgICAgIGlmICgody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2xpbmUnIHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdhcmVhJykgJiYgIXcuZ2xvYmFscy5jb21ib0NoYXJ0cyAmJiAhdy5jb25maWcudG9vbHRpcC5pbnRlcnNlY3QpIHtcbiAgICAgICAgICAgICAgUG9pbnRDbGFzc2VzICs9ICcgbm8tcG9pbnRlci1ldmVudHMnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZWxQb2ludE9wdGlvbnMgPSBtYXJrZXIuZ2V0TWFya2VyQ29uZmlnKFBvaW50Q2xhc3NlcywgaSk7XG4gICAgICAgICAgICBwb2ludCA9IGdyYXBoaWNzLmRyYXdNYXJrZXIoMCwgMCwgZWxQb2ludE9wdGlvbnMpO1xuICAgICAgICAgICAgcG9pbnQubm9kZS5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbWFya2VyLXNpemUnLCAwKTtcbiAgICAgICAgICAgIHZhciBlbFBvaW50c0cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMody5nbG9iYWxzLlNWR05TLCAnZycpO1xuICAgICAgICAgICAgZWxQb2ludHNHLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtc2VyaWVzLW1hcmtlcnMnKTtcbiAgICAgICAgICAgIGVsUG9pbnRzRy5hcHBlbmRDaGlsZChwb2ludC5ub2RlKTtcbiAgICAgICAgICAgIHBvaW50c01haW4uYXBwZW5kQ2hpbGQoZWxQb2ludHNHKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW5sYXJnZUN1cnJlbnRQb2ludFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVubGFyZ2VDdXJyZW50UG9pbnQocmVsLCBwb2ludCkge1xuICAgICAgICB2YXIgeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgICAgICAgdmFyIHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC50eXBlICE9PSAnYnViYmxlJykge1xuICAgICAgICAgIHRoaXMubmV3UG9pbnRTaXplKHJlbCwgcG9pbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN4ID0gcG9pbnQuZ2V0QXR0cmlidXRlKCdjeCcpO1xuICAgICAgICB2YXIgY3kgPSBwb2ludC5nZXRBdHRyaWJ1dGUoJ2N5Jyk7XG5cbiAgICAgICAgaWYgKHggIT09IG51bGwgJiYgeSAhPT0gbnVsbCkge1xuICAgICAgICAgIGN4ID0geDtcbiAgICAgICAgICBjeSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvb2x0aXBQb3NpdGlvbi5tb3ZlWENyb3NzaGFpcnMoY3gpO1xuXG4gICAgICAgIGlmICghdGhpcy5maXhlZFRvb2x0aXApIHtcbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ3JhZGFyJykge1xuICAgICAgICAgICAgdmFyIGVsR3JpZCA9IHRoaXMudHRDdHguZ2V0RWxHcmlkKCk7XG4gICAgICAgICAgICB2YXIgc2VyaWVzQm91bmQgPSBlbEdyaWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjeCA9IHRoaXMudHRDdHguZS5jbGllbnRYIC0gc2VyaWVzQm91bmQubGVmdDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnRvb2x0aXBQb3NpdGlvbi5tb3ZlVG9vbHRpcChjeCwgY3ksIHcuY29uZmlnLm1hcmtlcnMuaG92ZXIuc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW5sYXJnZVBvaW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVubGFyZ2VQb2ludHMoaikge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdmFyIHR0Q3R4ID0gdGhpcy50dEN0eDtcbiAgICAgICAgdmFyIGNvbCA9IGo7XG4gICAgICAgIHZhciBwb2ludHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy1zZXJpZXM6bm90KC5hcGV4Y2hhcnRzLXNlcmllcy1jb2xsYXBzZWQpIC5hcGV4Y2hhcnRzLW1hcmtlcicpO1xuICAgICAgICB2YXIgbmV3U2l6ZSA9IHcuY29uZmlnLm1hcmtlcnMuaG92ZXIuc2l6ZTtcblxuICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHBvaW50cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgIHZhciByZWwgPSBwb2ludHNbcF0uZ2V0QXR0cmlidXRlKCdyZWwnKTtcbiAgICAgICAgICB2YXIgaW5kZXggPSBwb2ludHNbcF0uZ2V0QXR0cmlidXRlKCdpbmRleCcpO1xuXG4gICAgICAgICAgaWYgKG5ld1NpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3U2l6ZSA9IHcuZ2xvYmFscy5tYXJrZXJzLnNpemVbaW5kZXhdICsgdy5jb25maWcubWFya2Vycy5ob3Zlci5zaXplT2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb2wgPT09IHBhcnNlSW50KHJlbCwgMTApKSB7XG4gICAgICAgICAgICBtZS5uZXdQb2ludFNpemUoY29sLCBwb2ludHNbcF0pO1xuICAgICAgICAgICAgdmFyIGN4ID0gcG9pbnRzW3BdLmdldEF0dHJpYnV0ZSgnY3gnKTtcbiAgICAgICAgICAgIHZhciBjeSA9IHBvaW50c1twXS5nZXRBdHRyaWJ1dGUoJ2N5Jyk7XG4gICAgICAgICAgICBtZS50b29sdGlwUG9zaXRpb24ubW92ZVhDcm9zc2hhaXJzKGN4KTtcblxuICAgICAgICAgICAgaWYgKCF0dEN0eC5maXhlZFRvb2x0aXApIHtcbiAgICAgICAgICAgICAgbWUudG9vbHRpcFBvc2l0aW9uLm1vdmVUb29sdGlwKGN4LCBjeSwgbmV3U2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLm9sZFBvaW50U2l6ZShwb2ludHNbcF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJuZXdQb2ludFNpemVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXdQb2ludFNpemUocmVsLCBwb2ludCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIG5ld1NpemUgPSB3LmNvbmZpZy5tYXJrZXJzLmhvdmVyLnNpemU7XG4gICAgICAgIHZhciBlbFBvaW50ID0gcmVsID09PSAwID8gcG9pbnQucGFyZW50Tm9kZS5maXJzdENoaWxkIDogcG9pbnQucGFyZW50Tm9kZS5sYXN0Q2hpbGQ7XG5cbiAgICAgICAgaWYgKGVsUG9pbnQuZ2V0QXR0cmlidXRlKCdkZWZhdWx0LW1hcmtlci1zaXplJykgIT09ICcwJykge1xuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGVsUG9pbnQuZ2V0QXR0cmlidXRlKCdpbmRleCcpLCAxMCk7XG5cbiAgICAgICAgICBpZiAobmV3U2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdTaXplID0gdy5nbG9iYWxzLm1hcmtlcnMuc2l6ZVtpbmRleF0gKyB3LmNvbmZpZy5tYXJrZXJzLmhvdmVyLnNpemVPZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxQb2ludC5zZXRBdHRyaWJ1dGUoJ3InLCBuZXdTaXplKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvbGRQb2ludFNpemVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbGRQb2ludFNpemUocG9pbnQpIHtcbiAgICAgICAgdmFyIHNpemUgPSBwYXJzZUZsb2F0KHBvaW50LmdldEF0dHJpYnV0ZSgnZGVmYXVsdC1tYXJrZXItc2l6ZScpKTtcbiAgICAgICAgcG9pbnQuc2V0QXR0cmlidXRlKCdyJywgc2l6ZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlc2V0UG9pbnRzU2l6ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0UG9pbnRzU2l6ZSgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBwb2ludHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy1zZXJpZXM6bm90KC5hcGV4Y2hhcnRzLXNlcmllcy1jb2xsYXBzZWQpIC5hcGV4Y2hhcnRzLW1hcmtlcicpO1xuXG4gICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgcG9pbnRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgdmFyIHNpemUgPSBwYXJzZUZsb2F0KHBvaW50c1twXS5nZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbWFya2VyLXNpemUnKSk7XG5cbiAgICAgICAgICBpZiAoVXRpbHMuaXNOdW1iZXIoc2l6ZSkpIHtcbiAgICAgICAgICAgIHBvaW50c1twXS5zZXRBdHRyaWJ1dGUoJ3InLCBzaXplKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnRzW3BdLnNldEF0dHJpYnV0ZSgncicsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNYXJrZXI7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBUb29sdGlwLkludGVyc2VjdCBDbGFzcy5cbiAgICpcbiAgICogQG1vZHVsZSBUb29sdGlwLkludGVyc2VjdFxuICAgKiovXG5cbiAgdmFyIEludGVyc2VjdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW50ZXJzZWN0KHRvb2x0aXBDb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW50ZXJzZWN0KTtcblxuICAgICAgdGhpcy53ID0gdG9vbHRpcENvbnRleHQudztcbiAgICAgIHRoaXMudHRDdHggPSB0b29sdGlwQ29udGV4dDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSW50ZXJzZWN0LCBbe1xuICAgICAga2V5OiBcImdldEF0dHJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBdHRyKGUsIGF0dHIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHIpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFuZGxlSGVhdFRvb2x0aXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVIZWF0VG9vbHRpcChfcmVmKSB7XG4gICAgICAgIHZhciBlID0gX3JlZi5lLFxuICAgICAgICAgICAgb3B0ID0gX3JlZi5vcHQsXG4gICAgICAgICAgICB4ID0gX3JlZi54LFxuICAgICAgICAgICAgeSA9IF9yZWYueTtcbiAgICAgICAgdmFyIHR0Q3R4ID0gdGhpcy50dEN0eDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXBleGNoYXJ0cy1oZWF0bWFwLXJlY3QnKSkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5nZXRBdHRyKGUsICdpJyk7XG4gICAgICAgICAgdmFyIGogPSB0aGlzLmdldEF0dHIoZSwgJ2onKTtcbiAgICAgICAgICB2YXIgY3ggPSB0aGlzLmdldEF0dHIoZSwgJ2N4Jyk7XG4gICAgICAgICAgdmFyIGN5ID0gdGhpcy5nZXRBdHRyKGUsICdjeScpO1xuICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuZ2V0QXR0cihlLCAnd2lkdGgnKTtcbiAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5nZXRBdHRyKGUsICdoZWlnaHQnKTtcbiAgICAgICAgICB0dEN0eC50b29sdGlwTGFiZWxzLmRyYXdTZXJpZXNUZXh0cyh7XG4gICAgICAgICAgICB0dEl0ZW1zOiBvcHQudHRJdGVtcyxcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICBqOiBqLFxuICAgICAgICAgICAgc2hhcmVkOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHcuZ2xvYmFscy5jYXB0dXJlZFNlcmllc0luZGV4ID0gaTtcbiAgICAgICAgICB3Lmdsb2JhbHMuY2FwdHVyZWREYXRhUG9pbnRJbmRleCA9IGo7XG4gICAgICAgICAgeCA9IGN4ICsgdHRDdHgudG9vbHRpcFJlY3QudHRXaWR0aCAvIDIgKyB3aWR0aDtcbiAgICAgICAgICB5ID0gY3kgKyB0dEN0eC50b29sdGlwUmVjdC50dEhlaWdodCAvIDIgLSBoZWlnaHQgLyAyO1xuICAgICAgICAgIHR0Q3R4LnRvb2x0aXBQb3NpdGlvbi5tb3ZlWENyb3NzaGFpcnMoY3ggKyB3aWR0aCAvIDIpO1xuXG4gICAgICAgICAgaWYgKHggPiB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gMikge1xuICAgICAgICAgICAgeCA9IGN4IC0gdHRDdHgudG9vbHRpcFJlY3QudHRXaWR0aCAvIDIgKyB3aWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHRDdHgudy5jb25maWcudG9vbHRpcC5mb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgICAgIHZhciBlbEdyaWQgPSB0dEN0eC5nZXRFbEdyaWQoKTtcbiAgICAgICAgICAgIHZhciBzZXJpZXNCb3VuZCA9IGVsR3JpZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8geCA9IHR0Q3R4LmUuY2xpZW50WCAtIHNlcmllc0JvdW5kLmxlZnRcblxuICAgICAgICAgICAgeSA9IHR0Q3R4LmUuY2xpZW50WSAtIHNlcmllc0JvdW5kLnRvcCArIHcuZ2xvYmFscy50cmFuc2xhdGVZIC8gMiAtIDEwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZU1hcmtlclRvb2x0aXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVNYXJrZXJUb29sdGlwKF9yZWYyKSB7XG4gICAgICAgIHZhciBlID0gX3JlZjIuZSxcbiAgICAgICAgICAgIG9wdCA9IF9yZWYyLm9wdCxcbiAgICAgICAgICAgIHggPSBfcmVmMi54LFxuICAgICAgICAgICAgeSA9IF9yZWYyLnk7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGo7XG5cbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXBleGNoYXJ0cy1tYXJrZXInKSkge1xuICAgICAgICAgIHZhciBjeCA9IHBhcnNlSW50KG9wdC5wYXRocy5nZXRBdHRyaWJ1dGUoJ2N4JyksIDEwKTtcbiAgICAgICAgICB2YXIgY3kgPSBwYXJzZUludChvcHQucGF0aHMuZ2V0QXR0cmlidXRlKCdjeScpLCAxMCk7XG4gICAgICAgICAgdmFyIHZhbCA9IHBhcnNlRmxvYXQob3B0LnBhdGhzLmdldEF0dHJpYnV0ZSgndmFsJykpO1xuICAgICAgICAgIGogPSBwYXJzZUludChvcHQucGF0aHMuZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApO1xuICAgICAgICAgIGkgPSBwYXJzZUludChvcHQucGF0aHMucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApIC0gMTtcblxuICAgICAgICAgIGlmICh0dEN0eC5pbnRlcnNlY3QpIHtcbiAgICAgICAgICAgIHZhciBlbCA9IFV0aWxzLmZpbmRBbmNlc3RvcihvcHQucGF0aHMsICdhcGV4Y2hhcnRzLXNlcmllcycpO1xuXG4gICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgaSA9IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZSgnZGF0YTpyZWFsSW5kZXgnKSwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHR0Q3R4LnRvb2x0aXBMYWJlbHMuZHJhd1Nlcmllc1RleHRzKHtcbiAgICAgICAgICAgIHR0SXRlbXM6IG9wdC50dEl0ZW1zLFxuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICBzaGFyZWQ6IHR0Q3R4LnNob3dPbkludGVyc2VjdCA/IGZhbHNlIDogdy5jb25maWcudG9vbHRpcC5zaGFyZWRcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZXVwJykge1xuICAgICAgICAgICAgdHRDdHgubWFya2VyQ2xpY2soZSwgaSwgaik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdy5nbG9iYWxzLmNhcHR1cmVkU2VyaWVzSW5kZXggPSBpO1xuICAgICAgICAgIHcuZ2xvYmFscy5jYXB0dXJlZERhdGFQb2ludEluZGV4ID0gajtcbiAgICAgICAgICB4ID0gY3g7XG4gICAgICAgICAgeSA9IGN5ICsgdy5nbG9iYWxzLnRyYW5zbGF0ZVkgLSB0dEN0eC50b29sdGlwUmVjdC50dEhlaWdodCAqIDEuNDtcblxuICAgICAgICAgIGlmICh0dEN0eC53LmNvbmZpZy50b29sdGlwLmZvbGxvd0N1cnNvcikge1xuICAgICAgICAgICAgdmFyIGVsR3JpZCA9IHR0Q3R4LmdldEVsR3JpZCgpO1xuICAgICAgICAgICAgdmFyIHNlcmllc0JvdW5kID0gZWxHcmlkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgeSA9IHR0Q3R4LmUuY2xpZW50WSArIHcuZ2xvYmFscy50cmFuc2xhdGVZIC0gc2VyaWVzQm91bmQudG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2YWwgPCAwKSB7XG4gICAgICAgICAgICB5ID0gY3k7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHRDdHgubWFya2VyLmVubGFyZ2VDdXJyZW50UG9pbnQoaiwgb3B0LnBhdGhzLCB4LCB5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZUJhclRvb2x0aXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVCYXJUb29sdGlwKF9yZWYzKSB7XG4gICAgICAgIHZhciBlID0gX3JlZjMuZSxcbiAgICAgICAgICAgIG9wdCA9IF9yZWYzLm9wdDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB0dEN0eCA9IHRoaXMudHRDdHg7XG4gICAgICAgIHZhciB0b29sdGlwRWwgPSB0dEN0eC5nZXRFbFRvb2x0aXAoKTtcbiAgICAgICAgdmFyIGJ4ID0gMDtcbiAgICAgICAgdmFyIHggPSAwO1xuICAgICAgICB2YXIgeSA9IDA7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIHN0cm9rZVdpZHRoO1xuICAgICAgICB2YXIgYmFyWFkgPSB0aGlzLmdldEJhclRvb2x0aXBYWSh7XG4gICAgICAgICAgZTogZSxcbiAgICAgICAgICBvcHQ6IG9wdFxuICAgICAgICB9KTtcbiAgICAgICAgaSA9IGJhclhZLmk7XG4gICAgICAgIHZhciBiYXJIZWlnaHQgPSBiYXJYWS5iYXJIZWlnaHQ7XG4gICAgICAgIHZhciBqID0gYmFyWFkuajtcbiAgICAgICAgdy5nbG9iYWxzLmNhcHR1cmVkU2VyaWVzSW5kZXggPSBpO1xuICAgICAgICB3Lmdsb2JhbHMuY2FwdHVyZWREYXRhUG9pbnRJbmRleCA9IGo7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwgJiYgdHRDdHgudG9vbHRpcFV0aWwuaGFzQmFycygpIHx8ICF3LmNvbmZpZy50b29sdGlwLnNoYXJlZCkge1xuICAgICAgICAgIHggPSBiYXJYWS54O1xuICAgICAgICAgIHkgPSBiYXJYWS55O1xuICAgICAgICAgIHN0cm9rZVdpZHRoID0gQXJyYXkuaXNBcnJheSh3LmNvbmZpZy5zdHJva2Uud2lkdGgpID8gdy5jb25maWcuc3Ryb2tlLndpZHRoW2ldIDogdy5jb25maWcuc3Ryb2tlLndpZHRoO1xuICAgICAgICAgIGJ4ID0geDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXcuZ2xvYmFscy5jb21ib0NoYXJ0cyAmJiAhdy5jb25maWcudG9vbHRpcC5zaGFyZWQpIHtcbiAgICAgICAgICAgIGJ4ID0gYnggLyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyB5IGlzIE5hTiwgbWFrZSBpdCB0b3VjaCB0aGUgYm90dG9tIG9mIGdyaWQgYXJlYVxuXG5cbiAgICAgICAgaWYgKGlzTmFOKHkpKSB7XG4gICAgICAgICAgeSA9IHcuZ2xvYmFscy5zdmdIZWlnaHQgLSB0dEN0eC50b29sdGlwUmVjdC50dEhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICh5IDwgMCkge1xuICAgICAgICAgIHkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHggKyB0dEN0eC50b29sdGlwUmVjdC50dFdpZHRoID4gdy5nbG9iYWxzLmdyaWRXaWR0aCkge1xuICAgICAgICAgIHggPSB4IC0gdHRDdHgudG9vbHRpcFJlY3QudHRXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmICh4IDwgMCkge1xuICAgICAgICAgIHggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR0Q3R4LncuY29uZmlnLnRvb2x0aXAuZm9sbG93Q3Vyc29yKSB7XG4gICAgICAgICAgdmFyIGVsR3JpZCA9IHR0Q3R4LmdldEVsR3JpZCgpO1xuICAgICAgICAgIHZhciBzZXJpZXNCb3VuZCA9IGVsR3JpZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB5ID0gdHRDdHguZS5jbGllbnRZIC0gc2VyaWVzQm91bmQudG9wO1xuICAgICAgICB9IC8vIGlmIHRvb2x0aXAgaXMgc3RpbGwgbnVsbCwgcXVlcnlTZWxlY3RvclxuXG5cbiAgICAgICAgaWYgKHR0Q3R4LnRvb2x0aXAgPT09IG51bGwpIHtcbiAgICAgICAgICB0dEN0eC50b29sdGlwID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtdG9vbHRpcCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3LmNvbmZpZy50b29sdGlwLnNoYXJlZCkge1xuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuY29tYm9CYXJDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHR0Q3R4LnRvb2x0aXBQb3NpdGlvbi5tb3ZlWENyb3NzaGFpcnMoYnggKyBzdHJva2VXaWR0aCAvIDIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0dEN0eC50b29sdGlwUG9zaXRpb24ubW92ZVhDcm9zc2hhaXJzKGJ4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gbW92ZSB0b29sdGlwIGhlcmVcblxuXG4gICAgICAgIGlmICghdHRDdHguZml4ZWRUb29sdGlwICYmICghdy5jb25maWcudG9vbHRpcC5zaGFyZWQgfHwgdy5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCAmJiB0dEN0eC50b29sdGlwVXRpbC5oYXNCYXJzKCkpKSB7XG4gICAgICAgICAgdmFyIGlzUmV2ZXJzZWQgPSB3Lmdsb2JhbHMuaXNNdWx0aXBsZVlBeGlzID8gdy5jb25maWcueWF4aXNbc2VyaWVzSW5kZXhdICYmIHcuY29uZmlnLnlheGlzW3Nlcmllc0luZGV4XS5yZXZlcnNlZCA6IHcuY29uZmlnLnlheGlzWzBdLnJldmVyc2VkO1xuXG4gICAgICAgICAgaWYgKGlzUmV2ZXJzZWQpIHtcbiAgICAgICAgICAgIHggPSB4IC0gdHRDdHgudG9vbHRpcFJlY3QudHRXaWR0aDtcblxuICAgICAgICAgICAgaWYgKHggPCAwKSB7XG4gICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRvb2x0aXBFbC5zdHlsZS5sZWZ0ID0geCArIHcuZ2xvYmFscy50cmFuc2xhdGVYICsgJ3B4JztcbiAgICAgICAgICB2YXIgc2VyaWVzSW5kZXggPSBwYXJzZUludChvcHQucGF0aHMucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGE6cmVhbEluZGV4JyksIDEwKTtcblxuICAgICAgICAgIGlmIChpc1JldmVyc2VkICYmICEody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCAmJiB0dEN0eC50b29sdGlwVXRpbC5oYXNCYXJzKCkpKSB7XG4gICAgICAgICAgICB5ID0geSArIGJhckhlaWdodCAtICh3Lmdsb2JhbHMuc2VyaWVzW2ldW2pdIDwgMCA/IGJhckhlaWdodCA6IDApICogMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHRDdHgudG9vbHRpcFJlY3QudHRIZWlnaHQgKyB5ID4gdy5nbG9iYWxzLmdyaWRIZWlnaHQpIHtcbiAgICAgICAgICAgIHkgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAtIHR0Q3R4LnRvb2x0aXBSZWN0LnR0SGVpZ2h0ICsgdy5nbG9iYWxzLnRyYW5zbGF0ZVk7XG4gICAgICAgICAgICB0b29sdGlwRWwuc3R5bGUudG9wID0geSArICdweCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvb2x0aXBFbC5zdHlsZS50b3AgPSB5ICsgdy5nbG9iYWxzLnRyYW5zbGF0ZVkgLSB0dEN0eC50b29sdGlwUmVjdC50dEhlaWdodCAvIDIgKyAncHgnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRCYXJUb29sdGlwWFlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCYXJUb29sdGlwWFkoX3JlZjQpIHtcbiAgICAgICAgdmFyIGUgPSBfcmVmNC5lLFxuICAgICAgICAgICAgb3B0ID0gX3JlZjQub3B0O1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGogPSBudWxsO1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciB4ID0gMDtcbiAgICAgICAgdmFyIHkgPSAwO1xuICAgICAgICB2YXIgYmFyV2lkdGggPSAwO1xuICAgICAgICB2YXIgYmFySGVpZ2h0ID0gMDtcbiAgICAgICAgdmFyIGNsID0gZS50YXJnZXQuY2xhc3NMaXN0O1xuXG4gICAgICAgIGlmIChjbC5jb250YWlucygnYXBleGNoYXJ0cy1iYXItYXJlYScpIHx8IGNsLmNvbnRhaW5zKCdhcGV4Y2hhcnRzLWNhbmRsZXN0aWNrLWFyZWEnKSB8fCBjbC5jb250YWlucygnYXBleGNoYXJ0cy1yYW5nZWJhci1hcmVhJykpIHtcbiAgICAgICAgICB2YXIgYmFyID0gZS50YXJnZXQ7XG4gICAgICAgICAgdmFyIGJhclJlY3QgPSBiYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgdmFyIHNlcmllc0JvdW5kID0gb3B0LmVsR3JpZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2YXIgYmggPSBiYXJSZWN0LmhlaWdodDtcbiAgICAgICAgICBiYXJIZWlnaHQgPSBiYXJSZWN0LmhlaWdodDtcbiAgICAgICAgICB2YXIgYncgPSBiYXJSZWN0LndpZHRoO1xuICAgICAgICAgIHZhciBjeCA9IHBhcnNlSW50KGJhci5nZXRBdHRyaWJ1dGUoJ2N4JyksIDEwKTtcbiAgICAgICAgICB2YXIgY3kgPSBwYXJzZUludChiYXIuZ2V0QXR0cmlidXRlKCdjeScpLCAxMCk7XG4gICAgICAgICAgYmFyV2lkdGggPSBwYXJzZUZsb2F0KGJhci5nZXRBdHRyaWJ1dGUoJ2JhcldpZHRoJykpO1xuICAgICAgICAgIHZhciBjbGllbnRYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYO1xuICAgICAgICAgIGogPSBwYXJzZUludChiYXIuZ2V0QXR0cmlidXRlKCdqJyksIDEwKTtcbiAgICAgICAgICBpID0gcGFyc2VJbnQoYmFyLnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdyZWwnKSwgMTApIC0gMTtcbiAgICAgICAgICB2YXIgeTEgPSBiYXIuZ2V0QXR0cmlidXRlKCdkYXRhLXJhbmdlLXkxJyk7XG4gICAgICAgICAgdmFyIHkyID0gYmFyLmdldEF0dHJpYnV0ZSgnZGF0YS1yYW5nZS15MicpO1xuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5jb21ib0NoYXJ0cykge1xuICAgICAgICAgICAgaSA9IHBhcnNlSW50KGJhci5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YTpyZWFsSW5kZXgnKSwgMTApO1xuICAgICAgICAgIH0gLy8gaWYgKHcuY29uZmlnLnRvb2x0aXAuc2hhcmVkKSB7XG4gICAgICAgICAgLy8gdGhpcyBjaGVjayBub3QgbmVlZGVkICBhdCB0aGUgbW9tZW50XG4gICAgICAgICAgLy8gICBjb25zdCB5RGl2aXNvciA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC8gKHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoKVxuICAgICAgICAgIC8vICAgY29uc3QgaG92ZXJZID0gdHRDdHguY2xpZW50WSAtIHR0Q3R4LnNlcmllc0JvdW5kLnRvcFxuICAgICAgICAgIC8vICAgaiA9IE1hdGguY2VpbChob3ZlclkgLyB5RGl2aXNvcilcbiAgICAgICAgICAvLyB9XG5cblxuICAgICAgICAgIHR0Q3R4LnRvb2x0aXBMYWJlbHMuZHJhd1Nlcmllc1RleHRzKHtcbiAgICAgICAgICAgIHR0SXRlbXM6IG9wdC50dEl0ZW1zLFxuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICB5MTogeTEgPyBwYXJzZUludCh5MSwgMTApIDogbnVsbCxcbiAgICAgICAgICAgIHkyOiB5MiA/IHBhcnNlSW50KHkyLCAxMCkgOiBudWxsLFxuICAgICAgICAgICAgc2hhcmVkOiB0dEN0eC5zaG93T25JbnRlcnNlY3QgPyBmYWxzZSA6IHcuY29uZmlnLnRvb2x0aXAuc2hhcmVkXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAody5jb25maWcudG9vbHRpcC5mb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgIHggPSBjbGllbnRYIC0gc2VyaWVzQm91bmQubGVmdCArIDE1O1xuICAgICAgICAgICAgICB5ID0gY3kgLSB0dEN0eC5kYXRhUG9pbnRzRGl2aWRlZEhlaWdodCArIGJoIC8gMiAtIHR0Q3R4LnRvb2x0aXBSZWN0LnR0SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgICAgICAgIHggPSBjeCAtIGJ3IC8gMjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4ID0gY3ggLSB0dEN0eC5kYXRhUG9pbnRzRGl2aWRlZFdpZHRoICsgYncgLyAyO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgeSA9IGUuY2xpZW50WSAtIHNlcmllc0JvdW5kLnRvcCAtIHR0Q3R4LnRvb2x0aXBSZWN0LnR0SGVpZ2h0IC8gMiAtIDE1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICB4ID0gY3g7XG5cbiAgICAgICAgICAgICAgaWYgKHggPCB0dEN0eC54eVJhdGlvcy5iYXNlTGluZUludmVydGVkWSkge1xuICAgICAgICAgICAgICAgIHggPSBjeCAtIHR0Q3R4LnRvb2x0aXBSZWN0LnR0V2lkdGg7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB5ID0gY3kgLSB0dEN0eC5kYXRhUG9pbnRzRGl2aWRlZEhlaWdodCArIGJoIC8gMiAtIHR0Q3R4LnRvb2x0aXBSZWN0LnR0SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGlmIGNvbHVtbnNcbiAgICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgICAgICAgeCA9IGN4IC0gYncgLyAyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSBjeCAtIHR0Q3R4LmRhdGFQb2ludHNEaXZpZGVkV2lkdGggKyBidyAvIDI7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB5ID0gY3k7IC8vIC0gdHRDdHgudG9vbHRpcFJlY3QudHRIZWlnaHQgLyAyICsgMTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeSxcbiAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodCxcbiAgICAgICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgICAgaTogaSxcbiAgICAgICAgICBqOiBqXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEludGVyc2VjdDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIFRvb2x0aXAuQXhlc1Rvb2x0aXAgQ2xhc3MuXG4gICAqXG4gICAqIEBtb2R1bGUgVG9vbHRpcC5BeGVzVG9vbHRpcFxuICAgKiovXG4gIHZhciBBeGVzVG9vbHRpcCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXhlc1Rvb2x0aXAodG9vbHRpcENvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBeGVzVG9vbHRpcCk7XG5cbiAgICAgIHRoaXMudyA9IHRvb2x0aXBDb250ZXh0Lnc7XG4gICAgICB0aGlzLnR0Q3R4ID0gdG9vbHRpcENvbnRleHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGFkZHMgdGhlIHNlY29uZGFyeSB0b29sdGlwIHdoaWNoIGFwcGVhcnMgYmVsb3cgeCBheGlzXG4gICAgICogQG1lbWJlcm9mIFRvb2x0aXBcbiAgICAgKiovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhBeGVzVG9vbHRpcCwgW3tcbiAgICAgIGtleTogXCJkcmF3WGF4aXNUb29sdGlwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1hheGlzVG9vbHRpcCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB0dEN0eCA9IHRoaXMudHRDdHg7XG4gICAgICAgIHZhciBpc0JvdHRvbSA9IHcuY29uZmlnLnhheGlzLnBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgICAgICAgdHRDdHgueGF4aXNPZmZZID0gaXNCb3R0b20gPyB3Lmdsb2JhbHMuZ3JpZEhlaWdodCArIDEgOiAtdy5nbG9iYWxzLnhBeGlzSGVpZ2h0IC0gdy5jb25maWcueGF4aXMuYXhpc1RpY2tzLmhlaWdodCArIDM7XG4gICAgICAgIHZhciB0b29sdGlwQ3NzQ2xhc3MgPSBpc0JvdHRvbSA/ICdhcGV4Y2hhcnRzLXhheGlzdG9vbHRpcCBhcGV4Y2hhcnRzLXhheGlzdG9vbHRpcC1ib3R0b20nIDogJ2FwZXhjaGFydHMteGF4aXN0b29sdGlwIGFwZXhjaGFydHMteGF4aXN0b29sdGlwLXRvcCc7XG4gICAgICAgIHZhciByZW5kZXJUbyA9IHcuZ2xvYmFscy5kb20uZWxXcmFwO1xuXG4gICAgICAgIGlmICh0dEN0eC5ibHhheGlzVG9vbHRpcCkge1xuICAgICAgICAgIHZhciB4YXhpc1Rvb2x0aXAgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy14YXhpc3Rvb2x0aXAnKTtcblxuICAgICAgICAgIGlmICh4YXhpc1Rvb2x0aXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHR0Q3R4LnhheGlzVG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdHRDdHgueGF4aXNUb29sdGlwLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0b29sdGlwQ3NzQ2xhc3MgKyAnIGFwZXhjaGFydHMtdGhlbWUtJyArIHcuY29uZmlnLnRvb2x0aXAudGhlbWUpO1xuICAgICAgICAgICAgcmVuZGVyVG8uYXBwZW5kQ2hpbGQodHRDdHgueGF4aXNUb29sdGlwKTtcbiAgICAgICAgICAgIHR0Q3R4LnhheGlzVG9vbHRpcFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHR0Q3R4LnhheGlzVG9vbHRpcFRleHQuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy14YXhpc3Rvb2x0aXAtdGV4dCcpO1xuICAgICAgICAgICAgdHRDdHgueGF4aXNUb29sdGlwVGV4dC5zdHlsZS5mb250RmFtaWx5ID0gdy5jb25maWcueGF4aXMudG9vbHRpcC5zdHlsZS5mb250RmFtaWx5IHx8IHcuY29uZmlnLmNoYXJ0LmZvbnRGYW1pbHk7XG4gICAgICAgICAgICB0dEN0eC54YXhpc1Rvb2x0aXBUZXh0LnN0eWxlLmZvbnRTaXplID0gdy5jb25maWcueGF4aXMudG9vbHRpcC5zdHlsZS5mb250U2l6ZTtcbiAgICAgICAgICAgIHR0Q3R4LnhheGlzVG9vbHRpcC5hcHBlbmRDaGlsZCh0dEN0eC54YXhpc1Rvb2x0aXBUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogVGhpcyBtZXRob2QgYWRkcyB0aGUgc2Vjb25kYXJ5IHRvb2x0aXAgd2hpY2ggYXBwZWFycyBiZWxvdyB4IGF4aXNcbiAgICAgICAqIEBtZW1iZXJvZiBUb29sdGlwXG4gICAgICAgKiovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1lheGlzVG9vbHRpcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdZYXhpc1Rvb2x0aXAoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSB0aGlzLnR0Q3R4O1xuXG4gICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICAgICAgICB2YXIgaXNSaWdodCA9IHcuY29uZmlnLnlheGlzW2ldLm9wcG9zaXRlIHx8IHcuY29uZmlnLnlheGlzW2ldLmNyb3NzaGFpcnMub3Bwb3NpdGU7XG4gICAgICAgICAgdHRDdHgueWF4aXNPZmZYID0gaXNSaWdodCA/IHcuZ2xvYmFscy5ncmlkV2lkdGggKyAxIDogMTtcbiAgICAgICAgICB2YXIgdG9vbHRpcENzc0NsYXNzID0gaXNSaWdodCA/IFwiYXBleGNoYXJ0cy15YXhpc3Rvb2x0aXAgYXBleGNoYXJ0cy15YXhpc3Rvb2x0aXAtXCIuY29uY2F0KGksIFwiIGFwZXhjaGFydHMteWF4aXN0b29sdGlwLXJpZ2h0XCIpIDogXCJhcGV4Y2hhcnRzLXlheGlzdG9vbHRpcCBhcGV4Y2hhcnRzLXlheGlzdG9vbHRpcC1cIi5jb25jYXQoaSwgXCIgYXBleGNoYXJ0cy15YXhpc3Rvb2x0aXAtbGVmdFwiKTtcbiAgICAgICAgICB3Lmdsb2JhbHMueUF4aXNTYW1lU2NhbGVJbmRpY2VzLm1hcChmdW5jdGlvbiAoc2FtZXNjYWxlcywgc3NpKSB7XG4gICAgICAgICAgICBzYW1lc2NhbGVzLm1hcChmdW5jdGlvbiAocywgc2kpIHtcbiAgICAgICAgICAgICAgaWYgKHNpID09PSBpKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcENzc0NsYXNzICs9IHcuY29uZmlnLnlheGlzW3NpXS5zaG93ID8gXCIgXCIgOiBcIiBhcGV4Y2hhcnRzLXlheGlzdG9vbHRpcC1oaWRkZW5cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIHJlbmRlclRvID0gdy5nbG9iYWxzLmRvbS5lbFdyYXA7XG5cbiAgICAgICAgICBpZiAodHRDdHguYmx5YXhpc1Rvb2x0aXApIHtcbiAgICAgICAgICAgIHZhciB5YXhpc1Rvb2x0aXAgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKFwiLmFwZXhjaGFydHMteWF4aXN0b29sdGlwIGFwZXhjaGFydHMteWF4aXN0b29sdGlwLVwiLmNvbmNhdChpKSk7XG5cbiAgICAgICAgICAgIGlmICh5YXhpc1Rvb2x0aXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdHRDdHgueWF4aXNUb29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgIHR0Q3R4LnlheGlzVG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdG9vbHRpcENzc0NsYXNzICsgJyBhcGV4Y2hhcnRzLXRoZW1lLScgKyB3LmNvbmZpZy50b29sdGlwLnRoZW1lKTtcbiAgICAgICAgICAgICAgcmVuZGVyVG8uYXBwZW5kQ2hpbGQodHRDdHgueWF4aXNUb29sdGlwKTtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHR0Q3R4LnlheGlzVG9vbHRpcFRleHQgPSBbXTtcbiAgICAgICAgICAgICAgdHRDdHgueWF4aXNUb29sdGlwVGV4dC5wdXNoKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICAgICAgICAgICAgdHRDdHgueWF4aXNUb29sdGlwVGV4dFtpXS5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXlheGlzdG9vbHRpcC10ZXh0Jyk7XG4gICAgICAgICAgICAgIHR0Q3R4LnlheGlzVG9vbHRpcC5hcHBlbmRDaGlsZCh0dEN0eC55YXhpc1Rvb2x0aXBUZXh0W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3LmNvbmZpZy55YXhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIF9sb29wKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBUb29sdGlwXG4gICAgICAgKiovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0WENyb3NzaGFpcldpZHRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0WENyb3NzaGFpcldpZHRoKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHR0Q3R4ID0gdGhpcy50dEN0eDsgLy8gc2V0IHhjcm9zc2hhaXJzIHdpZHRoXG5cbiAgICAgICAgdmFyIHhjcm9zc2hhaXJzID0gdHRDdHguZ2V0RWxYQ3Jvc3NoYWlycygpO1xuICAgICAgICB0dEN0eC54Y3Jvc3NoYWlyc1dpZHRoID0gcGFyc2VJbnQody5jb25maWcueGF4aXMuY3Jvc3NoYWlycy53aWR0aCwgMTApO1xuXG4gICAgICAgIGlmICghdy5nbG9iYWxzLmNvbWJvQ2hhcnRzKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMud2lkdGggPT09ICd0aWNrV2lkdGgnKSB7XG4gICAgICAgICAgICB2YXIgY291bnQgPSB3Lmdsb2JhbHMubGFiZWxzLmxlbmd0aDtcbiAgICAgICAgICAgIHR0Q3R4Lnhjcm9zc2hhaXJzV2lkdGggPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gY291bnQ7XG4gICAgICAgICAgfSBlbHNlIGlmICh3LmNvbmZpZy54YXhpcy5jcm9zc2hhaXJzLndpZHRoID09PSAnYmFyV2lkdGgnKSB7XG4gICAgICAgICAgICB2YXIgYmFyID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtYmFyLWFyZWEnKTtcblxuICAgICAgICAgICAgaWYgKGJhciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgYmFyV2lkdGggPSBwYXJzZUZsb2F0KGJhci5nZXRBdHRyaWJ1dGUoJ2JhcldpZHRoJykpO1xuICAgICAgICAgICAgICB0dEN0eC54Y3Jvc3NoYWlyc1dpZHRoID0gYmFyV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0dEN0eC54Y3Jvc3NoYWlyc1dpZHRoID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9iYXIgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy1iYXItYXJlYScpO1xuXG4gICAgICAgICAgaWYgKF9iYXIgIT09IG51bGwgJiYgdy5jb25maWcueGF4aXMuY3Jvc3NoYWlycy53aWR0aCA9PT0gJ2JhcldpZHRoJykge1xuICAgICAgICAgICAgdmFyIF9iYXJXaWR0aCA9IHBhcnNlRmxvYXQoX2Jhci5nZXRBdHRyaWJ1dGUoJ2JhcldpZHRoJykpO1xuXG4gICAgICAgICAgICB0dEN0eC54Y3Jvc3NoYWlyc1dpZHRoID0gX2JhcldpZHRoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAody5jb25maWcueGF4aXMuY3Jvc3NoYWlycy53aWR0aCA9PT0gJ3RpY2tXaWR0aCcpIHtcbiAgICAgICAgICAgICAgdmFyIF9jb3VudCA9IHcuZ2xvYmFscy5sYWJlbHMubGVuZ3RoO1xuICAgICAgICAgICAgICB0dEN0eC54Y3Jvc3NoYWlyc1dpZHRoID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAvIF9jb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgIHR0Q3R4Lnhjcm9zc2hhaXJzV2lkdGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHhjcm9zc2hhaXJzICE9PSBudWxsICYmIHR0Q3R4Lnhjcm9zc2hhaXJzV2lkdGggPiAwKSB7XG4gICAgICAgICAgeGNyb3NzaGFpcnMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHR0Q3R4Lnhjcm9zc2hhaXJzV2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhbmRsZVlDcm9zc2hhaXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVZQ3Jvc3NoYWlyKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHR0Q3R4ID0gdGhpcy50dEN0eDsgLy8gc2V0IHljcm9zc2hhaXJzIGhlaWdodFxuXG4gICAgICAgIHR0Q3R4Lnljcm9zc2hhaXJzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMteWNyb3NzaGFpcnMnKTtcbiAgICAgICAgdHRDdHgueWNyb3NzaGFpcnNIaWRkZW4gPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy15Y3Jvc3NoYWlycy1oaWRkZW4nKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1lheGlzVG9vbHRpcFRleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3WWF4aXNUb29sdGlwVGV4dChpbmRleCwgY2xpZW50WSwgeHlSYXRpb3MpIHtcbiAgICAgICAgdmFyIHR0Q3R4ID0gdGhpcy50dEN0eDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBsYkZvcm1hdHRlciA9IHcuZ2xvYmFscy55TGFiZWxGb3JtYXR0ZXJzW2luZGV4XTtcblxuICAgICAgICBpZiAodHRDdHguYmx5YXhpc1Rvb2x0aXApIHtcbiAgICAgICAgICB2YXIgZWxHcmlkID0gdHRDdHguZ2V0RWxHcmlkKCk7XG4gICAgICAgICAgdmFyIHNlcmllc0JvdW5kID0gZWxHcmlkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIHZhciBob3ZlclkgPSAoY2xpZW50WSAtIHNlcmllc0JvdW5kLnRvcCkgKiB4eVJhdGlvcy55UmF0aW9baW5kZXhdO1xuICAgICAgICAgIHZhciBoZWlnaHQgPSB3Lmdsb2JhbHMubWF4WUFycltpbmRleF0gLSB3Lmdsb2JhbHMubWluWUFycltpbmRleF07XG4gICAgICAgICAgdmFyIHZhbCA9IHcuZ2xvYmFscy5taW5ZQXJyW2luZGV4XSArIChoZWlnaHQgLSBob3ZlclkpO1xuICAgICAgICAgIHR0Q3R4LnRvb2x0aXBQb3NpdGlvbi5tb3ZlWUNyb3NzaGFpcnMoY2xpZW50WSAtIHNlcmllc0JvdW5kLnRvcCk7XG4gICAgICAgICAgdHRDdHgueWF4aXNUb29sdGlwVGV4dFtpbmRleF0uaW5uZXJIVE1MID0gbGJGb3JtYXR0ZXIodmFsKTtcbiAgICAgICAgICB0dEN0eC50b29sdGlwUG9zaXRpb24ubW92ZVlBeGlzVG9vbHRpcChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQXhlc1Rvb2x0aXA7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBDb3JlIFRvb2x0aXAgQ2xhc3MgdG8gaGFuZGxlIHRoZSB0b29sdGlwIGdlbmVyYXRpb24uXG4gICAqXG4gICAqIEBtb2R1bGUgVG9vbHRpcFxuICAgKiovXG5cbiAgdmFyIFRvb2x0aXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRvb2x0aXAoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgIHRoaXMudENvbmZpZyA9IHcuY29uZmlnLnRvb2x0aXA7XG4gICAgICB0aGlzLnRvb2x0aXBVdGlsID0gbmV3IFV0aWxzJDEodGhpcyk7XG4gICAgICB0aGlzLnRvb2x0aXBMYWJlbHMgPSBuZXcgTGFiZWxzKHRoaXMpO1xuICAgICAgdGhpcy50b29sdGlwUG9zaXRpb24gPSBuZXcgUG9zaXRpb24odGhpcyk7XG4gICAgICB0aGlzLm1hcmtlciA9IG5ldyBNYXJrZXIodGhpcyk7XG4gICAgICB0aGlzLmludGVyc2VjdCA9IG5ldyBJbnRlcnNlY3QodGhpcyk7XG4gICAgICB0aGlzLmF4ZXNUb29sdGlwID0gbmV3IEF4ZXNUb29sdGlwKHRoaXMpO1xuICAgICAgdGhpcy5zaG93T25JbnRlcnNlY3QgPSB0aGlzLnRDb25maWcuaW50ZXJzZWN0O1xuICAgICAgdGhpcy5zaG93VG9vbHRpcFRpdGxlID0gdGhpcy50Q29uZmlnLnguc2hvdztcbiAgICAgIHRoaXMuZml4ZWRUb29sdGlwID0gdGhpcy50Q29uZmlnLmZpeGVkLmVuYWJsZWQ7XG4gICAgICB0aGlzLnhheGlzVG9vbHRpcCA9IG51bGw7XG4gICAgICB0aGlzLnlheGlzVFRFbHMgPSBudWxsO1xuICAgICAgdGhpcy5pc0JhclNoYXJlZCA9ICF3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsICYmIHRoaXMudENvbmZpZy5zaGFyZWQ7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIFt7XG4gICAgICBrZXk6IFwiZ2V0RWxUb29sdGlwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxUb29sdGlwKGN0eCkge1xuICAgICAgICBpZiAoIWN0eCkgY3R4ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGN0eC53Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy10b29sdGlwJyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEVsWENyb3NzaGFpcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbFhDcm9zc2hhaXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yKCcuYXBleGNoYXJ0cy14Y3Jvc3NoYWlycycpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRFbEdyaWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbEdyaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLncuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5hcGV4Y2hhcnRzLWdyaWQnKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1Rvb2x0aXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VG9vbHRpcCh4eVJhdGlvcykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdGhpcy54eVJhdGlvcyA9IHh5UmF0aW9zO1xuICAgICAgICB0aGlzLmJseGF4aXNUb29sdGlwID0gdy5jb25maWcueGF4aXMudG9vbHRpcC5lbmFibGVkICYmIHcuZ2xvYmFscy5heGlzQ2hhcnRzO1xuICAgICAgICB0aGlzLmJseWF4aXNUb29sdGlwID0gdy5jb25maWcueWF4aXNbMF0udG9vbHRpcC5lbmFibGVkICYmIHcuZ2xvYmFscy5heGlzQ2hhcnRzO1xuICAgICAgICB0aGlzLmFsbFRvb2x0aXBTZXJpZXNHcm91cHMgPSBbXTtcblxuICAgICAgICBpZiAoIXcuZ2xvYmFscy5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgdGhpcy5zaG93VG9vbHRpcFRpdGxlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9vbHRpcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRvb2x0aXBFbC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXRvb2x0aXAnKTtcbiAgICAgICAgdG9vbHRpcEVsLmNsYXNzTGlzdC5hZGQoXCJhcGV4Y2hhcnRzLXRoZW1lLVwiLmNvbmNhdCh0aGlzLnRDb25maWcudGhlbWUpKTtcbiAgICAgICAgdy5nbG9iYWxzLmRvbS5lbFdyYXAuYXBwZW5kQ2hpbGQodG9vbHRpcEVsKTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICB0aGlzLmF4ZXNUb29sdGlwLmRyYXdYYXhpc1Rvb2x0aXAoKTtcbiAgICAgICAgICB0aGlzLmF4ZXNUb29sdGlwLmRyYXdZYXhpc1Rvb2x0aXAoKTtcbiAgICAgICAgICB0aGlzLmF4ZXNUb29sdGlwLnNldFhDcm9zc2hhaXJXaWR0aCgpO1xuICAgICAgICAgIHRoaXMuYXhlc1Rvb2x0aXAuaGFuZGxlWUNyb3NzaGFpcigpO1xuICAgICAgICAgIHZhciB4QXhpcyA9IG5ldyBYQXhpcyh0aGlzLmN0eCk7XG4gICAgICAgICAgdGhpcy54QXhpc1RpY2tzUG9zaXRpb25zID0geEF4aXMuZ2V0WEF4aXNUaWNrc1Bvc2l0aW9ucygpO1xuICAgICAgICB9IC8vIHdlIGZvcmNlZnVsbHkgc2V0IGludGVyc2VjdCB0cnVlIGZvciB0aGVzZSBjb25kaXRpb25zXG5cblxuICAgICAgICBpZiAoKHcuZ2xvYmFscy5jb21ib0NoYXJ0cyB8fCB0aGlzLnRDb25maWcuaW50ZXJzZWN0IHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdiYXInIHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdyYW5nZUJhcicpICYmICF0aGlzLnRDb25maWcuc2hhcmVkKSB7XG4gICAgICAgICAgdGhpcy5zaG93T25JbnRlcnNlY3QgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLm1hcmtlcnMuc2l6ZSA9PT0gMCB8fCB3Lmdsb2JhbHMubWFya2Vycy5sYXJnZXN0U2l6ZSA9PT0gMCkge1xuICAgICAgICAgIC8vIHdoZW4gdXNlciBkb24ndCB3YW50IHRvIHNob3cgcG9pbnRzIGFsbCB0aGUgdGltZSwgYnV0IG9ubHkgb24gd2hlbiBob3ZlcmluZyBvbiBzZXJpZXNcbiAgICAgICAgICB0aGlzLm1hcmtlci5kcmF3RHluYW1pY1BvaW50cyh0aGlzKTtcbiAgICAgICAgfSAvLyBubyB2aXNpYmxlIHNlcmllcywgZXhpdFxuXG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXMubGVuZ3RoID09PSB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICB0aGlzLmRhdGFQb2ludHNEaXZpZGVkSGVpZ2h0ID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQgLyB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgdGhpcy5kYXRhUG9pbnRzRGl2aWRlZFdpZHRoID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAvIHcuZ2xvYmFscy5kYXRhUG9pbnRzO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3dUb29sdGlwVGl0bGUpIHtcbiAgICAgICAgICB0aGlzLnRvb2x0aXBUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHRoaXMudG9vbHRpcFRpdGxlLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScpO1xuICAgICAgICAgIHRoaXMudG9vbHRpcFRpdGxlLnN0eWxlLmZvbnRGYW1pbHkgPSB0aGlzLnRDb25maWcuc3R5bGUuZm9udEZhbWlseSB8fCB3LmNvbmZpZy5jaGFydC5mb250RmFtaWx5O1xuICAgICAgICAgIHRoaXMudG9vbHRpcFRpdGxlLnN0eWxlLmZvbnRTaXplID0gdGhpcy50Q29uZmlnLnN0eWxlLmZvbnRTaXplO1xuICAgICAgICAgIHRvb2x0aXBFbC5hcHBlbmRDaGlsZCh0aGlzLnRvb2x0aXBUaXRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHRJdGVtc0NudCA9IHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoOyAvLyB3aGV0aGVyIHNoYXJlZCBvciBub3QsIGRlZmF1bHQgaXMgc2hhcmVkXG5cbiAgICAgICAgaWYgKCh3Lmdsb2JhbHMueHlDaGFydHMgfHwgdy5nbG9iYWxzLmNvbWJvQ2hhcnRzKSAmJiB0aGlzLnRDb25maWcuc2hhcmVkKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLnNob3dPbkludGVyc2VjdCkge1xuICAgICAgICAgICAgdHRJdGVtc0NudCA9IHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0dEl0ZW1zQ250ID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxlZ2VuZExhYmVscyA9IHcuZ2xvYmFscy5kb20uYmFzZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hcGV4Y2hhcnRzLWxlZ2VuZC10ZXh0Jyk7XG4gICAgICAgIHRoaXMudHRJdGVtcyA9IHRoaXMuY3JlYXRlVFRFbGVtZW50cyh0dEl0ZW1zQ250KTtcbiAgICAgICAgdGhpcy5hZGRTVkdFdmVudHMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3JlYXRlVFRFbGVtZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVRURWxlbWVudHModHRJdGVtc0NudCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHR0SXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIHRvb2x0aXBFbCA9IHRoaXMuZ2V0RWxUb29sdGlwKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0dEl0ZW1zQ250OyBpKyspIHtcbiAgICAgICAgICB2YXIgZ1R4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGdUeHQuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCcpO1xuXG4gICAgICAgICAgaWYgKHRoaXMudENvbmZpZy5zaGFyZWQgJiYgdGhpcy50Q29uZmlnLmVuYWJsZWRPblNlcmllcyAmJiBBcnJheS5pc0FycmF5KHRoaXMudENvbmZpZy5lbmFibGVkT25TZXJpZXMpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50Q29uZmlnLmVuYWJsZWRPblNlcmllcy5pbmRleE9mKGkpIDwgMCkge1xuICAgICAgICAgICAgICBnVHh0LmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAtaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHBvaW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgIHBvaW50LmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtdG9vbHRpcC1tYXJrZXInKTtcbiAgICAgICAgICBwb2ludC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB3Lmdsb2JhbHMuY29sb3JzW2ldO1xuICAgICAgICAgIGdUeHQuYXBwZW5kQ2hpbGQocG9pbnQpO1xuICAgICAgICAgIHZhciBnWVogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBnWVouY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy10b29sdGlwLXRleHQnKTtcbiAgICAgICAgICBnWVouc3R5bGUuZm9udEZhbWlseSA9IHRoaXMudENvbmZpZy5zdHlsZS5mb250RmFtaWx5IHx8IHcuY29uZmlnLmNoYXJ0LmZvbnRGYW1pbHk7XG4gICAgICAgICAgZ1laLnN0eWxlLmZvbnRTaXplID0gdGhpcy50Q29uZmlnLnN0eWxlLmZvbnRTaXplOyAvLyB5IHZhbHVlcyBncm91cFxuXG4gICAgICAgICAgdmFyIGdZVmFsVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGdZVmFsVGV4dC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXRvb2x0aXAteS1ncm91cCcpO1xuICAgICAgICAgIHZhciB0eHRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICB0eHRMYWJlbC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dC1sYWJlbCcpO1xuICAgICAgICAgIGdZVmFsVGV4dC5hcHBlbmRDaGlsZCh0eHRMYWJlbCk7XG4gICAgICAgICAgdmFyIHR4dFZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgIHR4dFZhbHVlLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0LXZhbHVlJyk7XG4gICAgICAgICAgZ1lWYWxUZXh0LmFwcGVuZENoaWxkKHR4dFZhbHVlKTsgLy8geiB2YWx1ZXMgZ3JvdXBcblxuICAgICAgICAgIHZhciBnWlZhbFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBnWlZhbFRleHQuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy10b29sdGlwLXotZ3JvdXAnKTtcbiAgICAgICAgICB2YXIgdHh0WkxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgIHR4dFpMYWJlbC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dC16LWxhYmVsJyk7XG4gICAgICAgICAgZ1pWYWxUZXh0LmFwcGVuZENoaWxkKHR4dFpMYWJlbCk7XG4gICAgICAgICAgdmFyIHR4dFpWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICB0eHRaVmFsdWUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy10b29sdGlwLXRleHQtei12YWx1ZScpO1xuICAgICAgICAgIGdaVmFsVGV4dC5hcHBlbmRDaGlsZCh0eHRaVmFsdWUpO1xuICAgICAgICAgIGdZWi5hcHBlbmRDaGlsZChnWVZhbFRleHQpO1xuICAgICAgICAgIGdZWi5hcHBlbmRDaGlsZChnWlZhbFRleHQpO1xuICAgICAgICAgIGdUeHQuYXBwZW5kQ2hpbGQoZ1laKTtcbiAgICAgICAgICB0b29sdGlwRWwuYXBwZW5kQ2hpbGQoZ1R4dCk7XG4gICAgICAgICAgdHRJdGVtcy5wdXNoKGdUeHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHR0SXRlbXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFNWR0V2ZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNWR0V2ZW50cygpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB0eXBlID0gdy5jb25maWcuY2hhcnQudHlwZTtcbiAgICAgICAgdmFyIHRvb2x0aXBFbCA9IHRoaXMuZ2V0RWxUb29sdGlwKCk7XG4gICAgICAgIHZhciBjb21tb25CYXIgPSAhISh0eXBlID09PSAnYmFyJyB8fCB0eXBlID09PSAnY2FuZGxlc3RpY2snIHx8IHR5cGUgPT09ICdyYW5nZUJhcicpO1xuICAgICAgICB2YXIgY2hhcnRXaXRobWFya2VycyA9IHR5cGUgPT09ICdhcmVhJyB8fCB0eXBlID09PSAnbGluZScgfHwgdHlwZSA9PT0gJ3NjYXR0ZXInIHx8IHR5cGUgPT09ICdidWJibGUnIHx8IHR5cGUgPT09ICdyYWRhcic7XG4gICAgICAgIHZhciBob3ZlckFyZWEgPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLm5vZGU7XG4gICAgICAgIHZhciBlbEdyaWQgPSB0aGlzLmdldEVsR3JpZCgpO1xuXG4gICAgICAgIGlmIChlbEdyaWQpIHtcbiAgICAgICAgICB0aGlzLnNlcmllc0JvdW5kID0gZWxHcmlkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvb2x0aXBZID0gW107XG4gICAgICAgIHZhciB0b29sdGlwWCA9IFtdO1xuICAgICAgICB2YXIgc2VyaWVzSG92ZXJQYXJhbXMgPSB7XG4gICAgICAgICAgaG92ZXJBcmVhOiBob3ZlckFyZWEsXG4gICAgICAgICAgZWxHcmlkOiBlbEdyaWQsXG4gICAgICAgICAgdG9vbHRpcEVsOiB0b29sdGlwRWwsXG4gICAgICAgICAgdG9vbHRpcFk6IHRvb2x0aXBZLFxuICAgICAgICAgIHRvb2x0aXBYOiB0b29sdGlwWCxcbiAgICAgICAgICB0dEl0ZW1zOiB0aGlzLnR0SXRlbXNcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvaW50cztcblxuICAgICAgICBpZiAody5nbG9iYWxzLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICBpZiAoY2hhcnRXaXRobWFya2Vycykge1xuICAgICAgICAgICAgcG9pbnRzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbChcIi5hcGV4Y2hhcnRzLXNlcmllc1tkYXRhXFxcXDpsb25nZXN0U2VyaWVzPSd0cnVlJ10gLmFwZXhjaGFydHMtbWFya2VyXCIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29tbW9uQmFyKSB7XG4gICAgICAgICAgICBwb2ludHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy1zZXJpZXMgLmFwZXhjaGFydHMtYmFyLWFyZWEsIC5hcGV4Y2hhcnRzLXNlcmllcyAuYXBleGNoYXJ0cy1jYW5kbGVzdGljay1hcmVhLCAuYXBleGNoYXJ0cy1zZXJpZXMgLmFwZXhjaGFydHMtcmFuZ2ViYXItYXJlYScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hlYXRtYXAnKSB7XG4gICAgICAgICAgICBwb2ludHMgPSB3Lmdsb2JhbHMuZG9tLmJhc2VFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXBleGNoYXJ0cy1zZXJpZXMgLmFwZXhjaGFydHMtaGVhdG1hcCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwb2ludHMgJiYgcG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwb2ludHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgdG9vbHRpcFkucHVzaChwb2ludHNbcF0uZ2V0QXR0cmlidXRlKCdjeScpKTtcbiAgICAgICAgICAgICAgdG9vbHRpcFgucHVzaChwb2ludHNbcF0uZ2V0QXR0cmlidXRlKCdjeCcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsaWRTaGFyZWRDaGFydFR5cGVzID0gdy5nbG9iYWxzLnh5Q2hhcnRzICYmICF0aGlzLnNob3dPbkludGVyc2VjdCB8fCB3Lmdsb2JhbHMuY29tYm9DaGFydHMgJiYgIXRoaXMuc2hvd09uSW50ZXJzZWN0IHx8IGNvbW1vbkJhciAmJiB0aGlzLnRvb2x0aXBVdGlsLmhhc0JhcnMoKSAmJiB0aGlzLnRDb25maWcuc2hhcmVkO1xuXG4gICAgICAgIGlmICh2YWxpZFNoYXJlZENoYXJ0VHlwZXMpIHtcbiAgICAgICAgICB0aGlzLmFkZFBhdGhzRXZlbnRMaXN0ZW5lcnMoW2hvdmVyQXJlYV0sIHNlcmllc0hvdmVyUGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb21tb25CYXIgJiYgIXcuZ2xvYmFscy5jb21ib0NoYXJ0cyB8fCBjaGFydFdpdGhtYXJrZXJzICYmIHRoaXMuc2hvd09uSW50ZXJzZWN0KSB7XG4gICAgICAgICAgdGhpcy5hZGREYXRhcG9pbnRFdmVudHNMaXN0ZW5lcnMoc2VyaWVzSG92ZXJQYXJhbXMpO1xuICAgICAgICB9IGVsc2UgaWYgKCF3Lmdsb2JhbHMuYXhpc0NoYXJ0cyB8fCB0eXBlID09PSAnaGVhdG1hcCcpIHtcbiAgICAgICAgICB2YXIgc2VyaWVzQWxsID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbCgnLmFwZXhjaGFydHMtc2VyaWVzJyk7XG4gICAgICAgICAgdGhpcy5hZGRQYXRoc0V2ZW50TGlzdGVuZXJzKHNlcmllc0FsbCwgc2VyaWVzSG92ZXJQYXJhbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2hvd09uSW50ZXJzZWN0KSB7XG4gICAgICAgICAgdmFyIGxpbmVBcmVhUG9pbnRzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbCgnLmFwZXhjaGFydHMtbGluZS1zZXJpZXMgLmFwZXhjaGFydHMtbWFya2VyLCAuYXBleGNoYXJ0cy1hcmVhLXNlcmllcyAuYXBleGNoYXJ0cy1tYXJrZXInKTtcblxuICAgICAgICAgIGlmIChsaW5lQXJlYVBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBmaW5kIGFueSBsaW5lU2VyaWVzLCBhZGRFdmVudExpc3RlbmVycyBmb3IgdGhlbVxuICAgICAgICAgICAgdGhpcy5hZGRQYXRoc0V2ZW50TGlzdGVuZXJzKGxpbmVBcmVhUG9pbnRzLCBzZXJpZXNIb3ZlclBhcmFtcyk7XG4gICAgICAgICAgfSAvLyBjb21ibyBjaGFydHMgbWF5IGhhdmUgYmFycywgc28gYWRkIGV2ZW50IGxpc3RlbmVycyBoZXJlIHRvb1xuXG5cbiAgICAgICAgICBpZiAodGhpcy50b29sdGlwVXRpbC5oYXNCYXJzKCkgJiYgIXRoaXMudENvbmZpZy5zaGFyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRGF0YXBvaW50RXZlbnRzTGlzdGVuZXJzKHNlcmllc0hvdmVyUGFyYW1zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd0ZpeGVkVG9vbHRpcFJlY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Rml4ZWRUb29sdGlwUmVjdCgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB0b29sdGlwRWwgPSB0aGlzLmdldEVsVG9vbHRpcCgpO1xuICAgICAgICB2YXIgdG9vbHRpcFJlY3QgPSB0b29sdGlwRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciB0dFdpZHRoID0gdG9vbHRpcFJlY3Qud2lkdGggKyAxMDtcbiAgICAgICAgdmFyIHR0SGVpZ2h0ID0gdG9vbHRpcFJlY3QuaGVpZ2h0ICsgMTA7XG4gICAgICAgIHZhciB4ID0gdGhpcy50Q29uZmlnLmZpeGVkLm9mZnNldFg7XG4gICAgICAgIHZhciB5ID0gdGhpcy50Q29uZmlnLmZpeGVkLm9mZnNldFk7XG4gICAgICAgIHZhciBmaXhlZCA9IHRoaXMudENvbmZpZy5maXhlZC5wb3NpdGlvbi50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChmaXhlZC5pbmRleE9mKCdyaWdodCcpID4gLTEpIHtcbiAgICAgICAgICB4ID0geCArIHcuZ2xvYmFscy5zdmdXaWR0aCAtIHR0V2lkdGggKyAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaXhlZC5pbmRleE9mKCdib3R0b20nKSA+IC0xKSB7XG4gICAgICAgICAgeSA9IHkgKyB3Lmdsb2JhbHMuc3ZnSGVpZ2h0IC0gdHRIZWlnaHQgLSAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvb2x0aXBFbC5zdHlsZS5sZWZ0ID0geCArICdweCc7XG4gICAgICAgIHRvb2x0aXBFbC5zdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHksXG4gICAgICAgICAgdHRXaWR0aDogdHRXaWR0aCxcbiAgICAgICAgICB0dEhlaWdodDogdHRIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkRGF0YXBvaW50RXZlbnRzTGlzdGVuZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRGF0YXBvaW50RXZlbnRzTGlzdGVuZXJzKHNlcmllc0hvdmVyUGFyYW1zKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgcG9pbnRzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbCgnLmFwZXhjaGFydHMtc2VyaWVzLW1hcmtlcnMgLmFwZXhjaGFydHMtbWFya2VyLCAuYXBleGNoYXJ0cy1iYXItYXJlYSwgLmFwZXhjaGFydHMtY2FuZGxlc3RpY2stYXJlYSwgLmFwZXhjaGFydHMtcmFuZ2ViYXItYXJlYScpO1xuICAgICAgICB0aGlzLmFkZFBhdGhzRXZlbnRMaXN0ZW5lcnMocG9pbnRzLCBzZXJpZXNIb3ZlclBhcmFtcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFBhdGhzRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQYXRoc0V2ZW50TGlzdGVuZXJzKHBhdGhzLCBvcHRzKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChwKSB7XG4gICAgICAgICAgdmFyIGV4dGVuZGVkT3B0cyA9IHtcbiAgICAgICAgICAgIHBhdGhzOiBwYXRoc1twXSxcbiAgICAgICAgICAgIHRvb2x0aXBFbDogb3B0cy50b29sdGlwRWwsXG4gICAgICAgICAgICB0b29sdGlwWTogb3B0cy50b29sdGlwWSxcbiAgICAgICAgICAgIHRvb2x0aXBYOiBvcHRzLnRvb2x0aXBYLFxuICAgICAgICAgICAgZWxHcmlkOiBvcHRzLmVsR3JpZCxcbiAgICAgICAgICAgIGhvdmVyQXJlYTogb3B0cy5ob3ZlckFyZWEsXG4gICAgICAgICAgICB0dEl0ZW1zOiBvcHRzLnR0SXRlbXNcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBldmVudHMgPSBbJ21vdXNlbW92ZScsICdtb3VzZXVwJywgJ3RvdWNobW92ZScsICdtb3VzZW91dCcsICd0b3VjaGVuZCddO1xuICAgICAgICAgIGV2ZW50cy5tYXAoZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aHNbcF0uYWRkRXZlbnRMaXN0ZW5lcihldiwgc2VsZi5zZXJpZXNIb3Zlci5iaW5kKHNlbGYsIGV4dGVuZGVkT3B0cyksIHtcbiAgICAgICAgICAgICAgY2FwdHVyZTogZmFsc2UsXG4gICAgICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgcGF0aHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICBfbG9vcChwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLypcbiAgICAgICAqKiBUaGUgYWN0dWFsIHNlcmllcyBob3ZlciBmdW5jdGlvblxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2VyaWVzSG92ZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXJpZXNIb3ZlcihvcHQsIGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgY2hhcnRHcm91cHMgPSBbXTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIGlmIHVzZXIgaGFzIG1vcmUgdGhhbiBvbmUgY2hhcnRzIGluIGdyb3VwLCB3ZSBuZWVkIHRvIHN5bmNcblxuICAgICAgICBpZiAody5jb25maWcuY2hhcnQuZ3JvdXApIHtcbiAgICAgICAgICBjaGFydEdyb3VwcyA9IHRoaXMuY3R4LmdldEdyb3VwZWRDaGFydHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuYXhpc0NoYXJ0cyAmJiAody5nbG9iYWxzLm1pblggPT09IC1JbmZpbml0eSAmJiB3Lmdsb2JhbHMubWF4WCA9PT0gSW5maW5pdHkgfHwgdy5nbG9iYWxzLmRhdGFQb2ludHMgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYXJ0R3JvdXBzLmxlbmd0aCkge1xuICAgICAgICAgIGNoYXJ0R3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGNoKSB7XG4gICAgICAgICAgICB2YXIgdG9vbHRpcEVsID0gX3RoaXMuZ2V0RWxUb29sdGlwKGNoKTtcblxuICAgICAgICAgICAgdmFyIG5ld09wdHMgPSB7XG4gICAgICAgICAgICAgIHBhdGhzOiBvcHQucGF0aHMsXG4gICAgICAgICAgICAgIHRvb2x0aXBFbDogdG9vbHRpcEVsLFxuICAgICAgICAgICAgICB0b29sdGlwWTogb3B0LnRvb2x0aXBZLFxuICAgICAgICAgICAgICB0b29sdGlwWDogb3B0LnRvb2x0aXBYLFxuICAgICAgICAgICAgICBlbEdyaWQ6IG9wdC5lbEdyaWQsXG4gICAgICAgICAgICAgIGhvdmVyQXJlYTogb3B0LmhvdmVyQXJlYSxcbiAgICAgICAgICAgICAgdHRJdGVtczogY2gudy5nbG9iYWxzLnRvb2x0aXAudHRJdGVtc1xuICAgICAgICAgICAgfTsgLy8gYWxsIHRoZSBjaGFydHMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgbWluWCBhbmQgbWF4WCAoc2FtZSB4YXhpcykgZm9yIG11bHRpcGxlIHRvb2x0aXBzIHRvIHdvcmsgY29ycmVjdGx5XG5cbiAgICAgICAgICAgIGlmIChjaC53Lmdsb2JhbHMubWluWCA9PT0gX3RoaXMudy5nbG9iYWxzLm1pblggJiYgY2gudy5nbG9iYWxzLm1heFggPT09IF90aGlzLncuZ2xvYmFscy5tYXhYKSB7XG4gICAgICAgICAgICAgIGNoLncuZ2xvYmFscy50b29sdGlwLnNlcmllc0hvdmVyQnlDb250ZXh0KHtcbiAgICAgICAgICAgICAgICBjaGFydEN0eDogY2gsXG4gICAgICAgICAgICAgICAgdHRDdHg6IGNoLncuZ2xvYmFscy50b29sdGlwLFxuICAgICAgICAgICAgICAgIG9wdDogbmV3T3B0cyxcbiAgICAgICAgICAgICAgICBlOiBlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2VyaWVzSG92ZXJCeUNvbnRleHQoe1xuICAgICAgICAgICAgY2hhcnRDdHg6IHRoaXMuY3R4LFxuICAgICAgICAgICAgdHRDdHg6IHRoaXMudy5nbG9iYWxzLnRvb2x0aXAsXG4gICAgICAgICAgICBvcHQ6IG9wdCxcbiAgICAgICAgICAgIGU6IGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXJpZXNIb3ZlckJ5Q29udGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlcmllc0hvdmVyQnlDb250ZXh0KF9yZWYpIHtcbiAgICAgICAgdmFyIGNoYXJ0Q3R4ID0gX3JlZi5jaGFydEN0eCxcbiAgICAgICAgICAgIHR0Q3R4ID0gX3JlZi50dEN0eCxcbiAgICAgICAgICAgIG9wdCA9IF9yZWYub3B0LFxuICAgICAgICAgICAgZSA9IF9yZWYuZTtcbiAgICAgICAgdmFyIHcgPSBjaGFydEN0eC53O1xuICAgICAgICB2YXIgdG9vbHRpcEVsID0gdGhpcy5nZXRFbFRvb2x0aXAoKTsgLy8gdG9vbHRpcFJlY3QgaXMgY2FsY3VsYXRlZCBvbiBldmVyeSBtb3VzZW1vdmUsIGJlY2F1c2UgdGhlIHRleHQgaXMgZHluYW1pY1xuXG4gICAgICAgIHR0Q3R4LnRvb2x0aXBSZWN0ID0ge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgICB0dFdpZHRoOiB0b29sdGlwRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgICAgICAgdHRIZWlnaHQ6IHRvb2x0aXBFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgICAgdHRDdHguZSA9IGU7IC8vIGhpZ2hsaWdodCB0aGUgY3VycmVudCBob3ZlcmVkIGJhcnNcblxuICAgICAgICBpZiAodHRDdHgudG9vbHRpcFV0aWwuaGFzQmFycygpICYmICF3Lmdsb2JhbHMuY29tYm9DaGFydHMgJiYgIXR0Q3R4LmlzQmFyU2hhcmVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudENvbmZpZy5vbkRhdGFzZXRIb3Zlci5oaWdobGlnaHREYXRhU2VyaWVzKSB7XG4gICAgICAgICAgICB2YXIgc2VyaWVzID0gbmV3IFNlcmllcyhjaGFydEN0eCk7XG4gICAgICAgICAgICBzZXJpZXMudG9nZ2xlU2VyaWVzT25Ib3ZlcihlLCBlLnRhcmdldC5wYXJlbnROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHRDdHguZml4ZWRUb29sdGlwKSB7XG4gICAgICAgICAgdHRDdHguZHJhd0ZpeGVkVG9vbHRpcFJlY3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuYXhpc0NoYXJ0cykge1xuICAgICAgICAgIHR0Q3R4LmF4aXNDaGFydHNUb29sdGlwcyh7XG4gICAgICAgICAgICBlOiBlLFxuICAgICAgICAgICAgb3B0OiBvcHQsXG4gICAgICAgICAgICB0b29sdGlwUmVjdDogdHRDdHgudG9vbHRpcFJlY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub24tcGxvdCBjaGFydHMgaS5lIHBpZS9kb251dC9jaXJjbGVcbiAgICAgICAgICB0dEN0eC5ub25BeGlzQ2hhcnRzVG9vbHRpcHMoe1xuICAgICAgICAgICAgZTogZSxcbiAgICAgICAgICAgIG9wdDogb3B0LFxuICAgICAgICAgICAgdG9vbHRpcFJlY3Q6IHR0Q3R4LnRvb2x0aXBSZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gdG9vbHRpcCBoYW5kbGluZyBmb3IgbGluZS9hcmVhL2Jhci9jb2x1bW5zL3NjYXR0ZXJcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJheGlzQ2hhcnRzVG9vbHRpcHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBheGlzQ2hhcnRzVG9vbHRpcHMoX3JlZjIpIHtcbiAgICAgICAgdmFyIGUgPSBfcmVmMi5lLFxuICAgICAgICAgICAgb3B0ID0gX3JlZjIub3B0O1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHgsIHk7XG4gICAgICAgIHZhciBzZXJpZXNCb3VuZCA9IG9wdC5lbEdyaWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBjbGllbnRYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYO1xuICAgICAgICB2YXIgY2xpZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTtcbiAgICAgICAgdGhpcy5jbGllbnRZID0gY2xpZW50WTtcbiAgICAgICAgdGhpcy5jbGllbnRYID0gY2xpZW50WDtcbiAgICAgICAgdy5nbG9iYWxzLmNhcHR1cmVkU2VyaWVzSW5kZXggPSAtMTtcbiAgICAgICAgdy5nbG9iYWxzLmNhcHR1cmVkRGF0YVBvaW50SW5kZXggPSAtMTtcblxuICAgICAgICBpZiAoY2xpZW50WSA8IHNlcmllc0JvdW5kLnRvcCB8fCBjbGllbnRZID4gc2VyaWVzQm91bmQudG9wICsgc2VyaWVzQm91bmQuaGVpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU91dChvcHQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudENvbmZpZy5lbmFibGVkT25TZXJpZXMpICYmICF3LmNvbmZpZy50b29sdGlwLnNoYXJlZCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KG9wdC5wYXRocy5nZXRBdHRyaWJ1dGUoJ2luZGV4JyksIDEwKTtcblxuICAgICAgICAgIGlmICh0aGlzLnRDb25maWcuZW5hYmxlZE9uU2VyaWVzLmluZGV4T2YoaW5kZXgpIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU91dChvcHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b29sdGlwRWwgPSB0aGlzLmdldEVsVG9vbHRpcCgpO1xuICAgICAgICB2YXIgeGNyb3NzaGFpcnMgPSB0aGlzLmdldEVsWENyb3NzaGFpcnMoKTtcbiAgICAgICAgdmFyIGlzU3RpY2t5VG9vbHRpcCA9IHcuZ2xvYmFscy54eUNoYXJ0cyB8fCB3LmNvbmZpZy5jaGFydC50eXBlID09PSAnYmFyJyAmJiAhdy5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCAmJiB0aGlzLnRvb2x0aXBVdGlsLmhhc0JhcnMoKSAmJiB0aGlzLnRDb25maWcuc2hhcmVkIHx8IHcuZ2xvYmFscy5jb21ib0NoYXJ0cyAmJiB0aGlzLnRvb2x0aXBVdGlsLmhhc0JhcnMoKTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCAmJiB0aGlzLnRvb2x0aXBVdGlsLmhhc0JhcnMoKSkge1xuICAgICAgICAgIGlzU3RpY2t5VG9vbHRpcCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyB8fCBlLnR5cGUgPT09ICdtb3VzZXVwJykge1xuICAgICAgICAgIGlmICh4Y3Jvc3NoYWlycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgeGNyb3NzaGFpcnMuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy55Y3Jvc3NoYWlycyAhPT0gbnVsbCAmJiB0aGlzLmJseWF4aXNUb29sdGlwKSB7XG4gICAgICAgICAgICB0aGlzLnljcm9zc2hhaXJzLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtYWN0aXZlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzU3RpY2t5VG9vbHRpcCAmJiAhdGhpcy5zaG93T25JbnRlcnNlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RpY2t5VG9vbHRpcChlLCBjbGllbnRYLCBjbGllbnRZLCBvcHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSA9PT0gJ2hlYXRtYXAnKSB7XG4gICAgICAgICAgICAgIHZhciBtYXJrZXJYWSA9IHRoaXMuaW50ZXJzZWN0LmhhbmRsZUhlYXRUb29sdGlwKHtcbiAgICAgICAgICAgICAgICBlOiBlLFxuICAgICAgICAgICAgICAgIG9wdDogb3B0LFxuICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgeTogeVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgeCA9IG1hcmtlclhZLng7XG4gICAgICAgICAgICAgIHkgPSBtYXJrZXJYWS55O1xuICAgICAgICAgICAgICB0b29sdGlwRWwuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICAgICAgICB0b29sdGlwRWwuc3R5bGUudG9wID0geSArICdweCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodGhpcy50b29sdGlwVXRpbC5oYXNCYXJzKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVyc2VjdC5oYW5kbGVCYXJUb29sdGlwKHtcbiAgICAgICAgICAgICAgICAgIGU6IGUsXG4gICAgICAgICAgICAgICAgICBvcHQ6IG9wdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMudG9vbHRpcFV0aWwuaGFzTWFya2VycygpKSB7XG4gICAgICAgICAgICAgICAgLy8gaW50ZXJzZWN0IC0gbGluZS9hcmVhL3NjYXR0ZXIvYnViYmxlXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3QuaGFuZGxlTWFya2VyVG9vbHRpcCh7XG4gICAgICAgICAgICAgICAgICBlOiBlLFxuICAgICAgICAgICAgICAgICAgb3B0OiBvcHQsXG4gICAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgICAgeTogeVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYmx5YXhpc1Rvb2x0aXApIHtcbiAgICAgICAgICAgIGZvciAodmFyIHl0ID0gMDsgeXQgPCB3LmNvbmZpZy55YXhpcy5sZW5ndGg7IHl0KyspIHtcbiAgICAgICAgICAgICAgdGhpcy5heGVzVG9vbHRpcC5kcmF3WWF4aXNUb29sdGlwVGV4dCh5dCwgY2xpZW50WSwgdGhpcy54eVJhdGlvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb3B0LnRvb2x0aXBFbC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLWFjdGl2ZScpO1xuICAgICAgICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0JyB8fCBlLnR5cGUgPT09ICd0b3VjaGVuZCcpIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlT3V0KG9wdCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gdG9vbHRpcCBoYW5kbGluZyBmb3IgcGllL2RvbnV0c1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm5vbkF4aXNDaGFydHNUb29sdGlwc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5vbkF4aXNDaGFydHNUb29sdGlwcyhfcmVmMykge1xuICAgICAgICB2YXIgZSA9IF9yZWYzLmUsXG4gICAgICAgICAgICBvcHQgPSBfcmVmMy5vcHQsXG4gICAgICAgICAgICB0b29sdGlwUmVjdCA9IF9yZWYzLnRvb2x0aXBSZWN0O1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHJlbCA9IG9wdC5wYXRocy5nZXRBdHRyaWJ1dGUoJ3JlbCcpO1xuICAgICAgICB2YXIgdG9vbHRpcEVsID0gdGhpcy5nZXRFbFRvb2x0aXAoKTtcbiAgICAgICAgdmFyIHNlcmllc0JvdW5kID0gdy5nbG9iYWxzLmRvbS5lbFdyYXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJykge1xuICAgICAgICAgIHRvb2x0aXBFbC5jbGFzc0xpc3QuYWRkKCdhcGV4Y2hhcnRzLWFjdGl2ZScpO1xuICAgICAgICAgIHRoaXMudG9vbHRpcExhYmVscy5kcmF3U2VyaWVzVGV4dHMoe1xuICAgICAgICAgICAgdHRJdGVtczogb3B0LnR0SXRlbXMsXG4gICAgICAgICAgICBpOiBwYXJzZUludChyZWwsIDEwKSAtIDEsXG4gICAgICAgICAgICBzaGFyZWQ6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIHggPSB3Lmdsb2JhbHMuY2xpZW50WCAtIHNlcmllc0JvdW5kLmxlZnQgLSB0b29sdGlwUmVjdC50dFdpZHRoIC8gMjtcbiAgICAgICAgICB2YXIgeSA9IHcuZ2xvYmFscy5jbGllbnRZIC0gc2VyaWVzQm91bmQudG9wIC0gdG9vbHRpcFJlY3QudHRIZWlnaHQgLSAxMDtcbiAgICAgICAgICB0b29sdGlwRWwuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICAgIHRvb2x0aXBFbC5zdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcgfHwgZS50eXBlID09PSAndG91Y2hlbmQnKSB7XG4gICAgICAgICAgdG9vbHRpcEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2FwZXhjaGFydHMtYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFuZGxlU3RpY2t5VG9vbHRpcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN0aWNreVRvb2x0aXAoZSwgY2xpZW50WCwgY2xpZW50WSwgb3B0KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgY2FwaiA9IHRoaXMudG9vbHRpcFV0aWwuZ2V0TmVhcmVzdFZhbHVlcyh7XG4gICAgICAgICAgY29udGV4dDogdGhpcyxcbiAgICAgICAgICBob3ZlckFyZWE6IG9wdC5ob3ZlckFyZWEsXG4gICAgICAgICAgZWxHcmlkOiBvcHQuZWxHcmlkLFxuICAgICAgICAgIGNsaWVudFg6IGNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WTogY2xpZW50WVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGogPSBjYXBqLmo7XG4gICAgICAgIHZhciBjYXB0dXJlZFNlcmllcyA9IGNhcGouY2FwdHVyZWRTZXJpZXM7XG5cbiAgICAgICAgaWYgKGNhcGouaG92ZXJYIDwgMCB8fCBjYXBqLmhvdmVyWCA+IHcuZ2xvYmFscy5ncmlkV2lkdGgpIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlT3V0KG9wdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhcHR1cmVkU2VyaWVzICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVTdGlja3lDYXB0dXJlZFNlcmllcyhlLCBjYXB0dXJlZFNlcmllcywgb3B0LCBqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb3VsZG4ndCBjYXB0dXJlIGFueSBzZXJpZXMuIGNoZWNrIGlmIHNoYXJlZCBYIGlzIHNhbWUsXG4gICAgICAgICAgLy8gaWYgeWVzLCBkcmF3IGEgZ3JvdXBlZCB0b29sdGlwXG4gICAgICAgICAgaWYgKHRoaXMudG9vbHRpcFV0aWwuaXNYb3ZlcmxhcChqKSkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGUoZSwgdGhpcywgMCwgaiwgb3B0LnR0SXRlbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVTdGlja3lDYXB0dXJlZFNlcmllc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN0aWNreUNhcHR1cmVkU2VyaWVzKGUsIGNhcHR1cmVkU2VyaWVzLCBvcHQsIGopIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBpZ25vcmVOdWxsID0gdy5nbG9iYWxzLnNlcmllc1tjYXB0dXJlZFNlcmllc11bal0gPT09IG51bGw7XG5cbiAgICAgICAgaWYgKGlnbm9yZU51bGwpIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlT3V0KG9wdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3Lmdsb2JhbHMuc2VyaWVzW2NhcHR1cmVkU2VyaWVzXVtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAodGhpcy50Q29uZmlnLnNoYXJlZCAmJiB0aGlzLnRvb2x0aXBVdGlsLmlzWG92ZXJsYXAoaikgJiYgdGhpcy50b29sdGlwVXRpbC5pc0luaXRpYWxTZXJpZXNTYW1lTGVuKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlKGUsIHRoaXMsIGNhcHR1cmVkU2VyaWVzLCBqLCBvcHQudHRJdGVtcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlKGUsIHRoaXMsIGNhcHR1cmVkU2VyaWVzLCBqLCBvcHQudHRJdGVtcywgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy50b29sdGlwVXRpbC5pc1hvdmVybGFwKGopKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZShlLCB0aGlzLCAwLCBqLCBvcHQudHRJdGVtcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRlYWN0aXZhdGVIb3ZlckZpbHRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlYWN0aXZhdGVIb3ZlckZpbHRlcigpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBhbGxQYXRocyA9IHcuZ2xvYmFscy5kb20uUGFwZXIuc2VsZWN0KFwiLmFwZXhjaGFydHMtYmFyLWFyZWFcIik7XG5cbiAgICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPCBhbGxQYXRocy5sZW5ndGg7IGIrKykge1xuICAgICAgICAgIGdyYXBoaWNzLnBhdGhNb3VzZUxlYXZlKGFsbFBhdGhzW2JdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoYW5kbGVNb3VzZU91dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3V0KG9wdCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHhjcm9zc2hhaXJzID0gdGhpcy5nZXRFbFhDcm9zc2hhaXJzKCk7XG4gICAgICAgIG9wdC50b29sdGlwRWwuY2xhc3NMaXN0LnJlbW92ZSgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlSG92ZXJGaWx0ZXIoKTtcblxuICAgICAgICBpZiAody5jb25maWcuY2hhcnQudHlwZSAhPT0gJ2J1YmJsZScpIHtcbiAgICAgICAgICB0aGlzLm1hcmtlci5yZXNldFBvaW50c1NpemUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4Y3Jvc3NoYWlycyAhPT0gbnVsbCkge1xuICAgICAgICAgIHhjcm9zc2hhaXJzLmNsYXNzTGlzdC5yZW1vdmUoJ2FwZXhjaGFydHMtYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy55Y3Jvc3NoYWlycyAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMueWNyb3NzaGFpcnMuY2xhc3NMaXN0LnJlbW92ZSgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmJseGF4aXNUb29sdGlwKSB7XG4gICAgICAgICAgdGhpcy54YXhpc1Rvb2x0aXAuY2xhc3NMaXN0LnJlbW92ZSgnYXBleGNoYXJ0cy1hY3RpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmJseWF4aXNUb29sdGlwKSB7XG4gICAgICAgICAgaWYgKHRoaXMueWF4aXNUVEVscyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy55YXhpc1RURWxzID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvckFsbCgnLmFwZXhjaGFydHMteWF4aXN0b29sdGlwJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnlheGlzVFRFbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMueWF4aXNUVEVsc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdhcGV4Y2hhcnRzLWFjdGl2ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy5sZWdlbmQudG9vbHRpcEhvdmVyRm9ybWF0dGVyKSB7XG4gICAgICAgICAgdGhpcy5sZWdlbmRMYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRUZXh0ID0gbC5nZXRBdHRyaWJ1dGUoJ2RhdGE6ZGVmYXVsdC10ZXh0Jyk7XG4gICAgICAgICAgICBsLmlubmVySFRNTCA9IGRlY29kZVVSSUNvbXBvbmVudChkZWZhdWx0VGV4dCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWFya2VyQ2xpY2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXJrZXJDbGljayhlLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy5jaGFydC5ldmVudHMubWFya2VyQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB3LmNvbmZpZy5jaGFydC5ldmVudHMubWFya2VyQ2xpY2soZSwgdGhpcy5jdHgsIHtcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiBzZXJpZXNJbmRleCxcbiAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBkYXRhUG9pbnRJbmRleCxcbiAgICAgICAgICAgIHc6IHdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3R4LmV2ZW50cy5maXJlRXZlbnQoJ21hcmtlckNsaWNrJywgW2UsIHRoaXMuY3R4LCB7XG4gICAgICAgICAgc2VyaWVzSW5kZXg6IHNlcmllc0luZGV4LFxuICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBkYXRhUG9pbnRJbmRleCxcbiAgICAgICAgICB3OiB3XG4gICAgICAgIH1dKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKGUsIGNvbnRleHQsIGNhcHR1cmVkU2VyaWVzLCBqLCB0dEl0ZW1zKSB7XG4gICAgICAgIHZhciBzaGFyZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IG51bGw7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgdHRDdHggPSBjb250ZXh0O1xuXG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZXVwJykge1xuICAgICAgICAgIHRoaXMubWFya2VyQ2xpY2soZSwgY2FwdHVyZWRTZXJpZXMsIGopO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXJlZCA9PT0gbnVsbCkgc2hhcmVkID0gdGhpcy50Q29uZmlnLnNoYXJlZDtcbiAgICAgICAgdmFyIGhhc01hcmtlcnMgPSB0aGlzLnRvb2x0aXBVdGlsLmhhc01hcmtlcnMoKTtcbiAgICAgICAgdmFyIGJhcnMgPSB0aGlzLnRvb2x0aXBVdGlsLmdldEVsQmFycygpO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5sZWdlbmQudG9vbHRpcEhvdmVyRm9ybWF0dGVyKSB7XG4gICAgICAgICAgdmFyIGxlZ2VuZEZvcm1hdHRlciA9IHcuY29uZmlnLmxlZ2VuZC50b29sdGlwSG92ZXJGb3JtYXR0ZXI7XG4gICAgICAgICAgdmFyIGVscyA9IEFycmF5LmZyb20odGhpcy5sZWdlbmRMYWJlbHMpOyAvLyByZXNldCBhbGwgbGVnZW5kIHZhbHVlcyBmaXJzdFxuXG4gICAgICAgICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIHZhciBsZWdlbmROYW1lID0gbC5nZXRBdHRyaWJ1dGUoJ2RhdGE6ZGVmYXVsdC10ZXh0Jyk7XG4gICAgICAgICAgICBsLmlubmVySFRNTCA9IGRlY29kZVVSSUNvbXBvbmVudChsZWdlbmROYW1lKTtcbiAgICAgICAgICB9KTsgLy8gZm9yIGlycmVndWxhciB0aW1lIHNlcmllc1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBsID0gZWxzW2ldO1xuICAgICAgICAgICAgdmFyIGxzSW5kZXggPSBwYXJzZUludChsLmdldEF0dHJpYnV0ZSgnaScpLCAxMCk7XG4gICAgICAgICAgICB2YXIgbGVnZW5kTmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChsLmdldEF0dHJpYnV0ZSgnZGF0YTpkZWZhdWx0LXRleHQnKSk7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IGxlZ2VuZEZvcm1hdHRlcihsZWdlbmROYW1lLCB7XG4gICAgICAgICAgICAgIHNlcmllc0luZGV4OiBzaGFyZWQgPyBsc0luZGV4IDogY2FwdHVyZWRTZXJpZXMsXG4gICAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBqLFxuICAgICAgICAgICAgICB3OiB3XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFzaGFyZWQpIHtcbiAgICAgICAgICAgICAgbC5pbm5lckhUTUwgPSBsc0luZGV4ID09PSBjYXB0dXJlZFNlcmllcyA/IHRleHQgOiBsZWdlbmROYW1lO1xuXG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlZFNlcmllcyA9PT0gbHNJbmRleCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsLmlubmVySFRNTCA9IHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXNJbmRpY2VzLmluZGV4T2YobHNJbmRleCkgPCAwID8gdGV4dCA6IGxlZ2VuZE5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXJlZCkge1xuICAgICAgICAgIHR0Q3R4LnRvb2x0aXBMYWJlbHMuZHJhd1Nlcmllc1RleHRzKHtcbiAgICAgICAgICAgIHR0SXRlbXM6IHR0SXRlbXMsXG4gICAgICAgICAgICBpOiBjYXB0dXJlZFNlcmllcyxcbiAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICBzaGFyZWQ6IHRoaXMuc2hvd09uSW50ZXJzZWN0ID8gZmFsc2UgOiB0aGlzLnRDb25maWcuc2hhcmVkXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoaGFzTWFya2Vycykge1xuICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5tYXJrZXJzLmxhcmdlc3RTaXplID4gMCkge1xuICAgICAgICAgICAgICB0dEN0eC5tYXJrZXIuZW5sYXJnZVBvaW50cyhqKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHR0Q3R4LnRvb2x0aXBQb3NpdGlvbi5tb3ZlRHluYW1pY1BvaW50c09uSG92ZXIoaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMudG9vbHRpcFV0aWwuaGFzQmFycygpKSB7XG4gICAgICAgICAgICB0aGlzLmJhclNlcmllc0hlaWdodCA9IHRoaXMudG9vbHRpcFV0aWwuZ2V0QmFyc0hlaWdodChiYXJzKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYmFyU2VyaWVzSGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAvLyBob3ZlciBzdGF0ZSwgYWN0aXZhdGUgc25hcCBmaWx0ZXJcbiAgICAgICAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgICAgICAgdmFyIHBhdGhzID0gdy5nbG9iYWxzLmRvbS5QYXBlci5zZWxlY3QoXCIuYXBleGNoYXJ0cy1iYXItYXJlYVtqPSdcIi5jb25jYXQoaiwgXCInXVwiKSk7IC8vIGRlLWFjdGl2YXRlIGZpcnN0XG5cbiAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlSG92ZXJGaWx0ZXIoKTtcbiAgICAgICAgICAgICAgdGhpcy50b29sdGlwUG9zaXRpb24ubW92ZVN0aWNreVRvb2x0aXBPdmVyQmFycyhqKTtcblxuICAgICAgICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8IHBhdGhzLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICAgICAgZ3JhcGhpY3MucGF0aE1vdXNlRW50ZXIocGF0aHNbYl0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHR0Q3R4LnRvb2x0aXBMYWJlbHMuZHJhd1Nlcmllc1RleHRzKHtcbiAgICAgICAgICAgIHNoYXJlZDogZmFsc2UsXG4gICAgICAgICAgICB0dEl0ZW1zOiB0dEl0ZW1zLFxuICAgICAgICAgICAgaTogY2FwdHVyZWRTZXJpZXMsXG4gICAgICAgICAgICBqOiBqXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodGhpcy50b29sdGlwVXRpbC5oYXNCYXJzKCkpIHtcbiAgICAgICAgICAgIHR0Q3R4LnRvb2x0aXBQb3NpdGlvbi5tb3ZlU3RpY2t5VG9vbHRpcE92ZXJCYXJzKGopO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNNYXJrZXJzKSB7XG4gICAgICAgICAgICB0dEN0eC50b29sdGlwUG9zaXRpb24ubW92ZU1hcmtlcnMoY2FwdHVyZWRTZXJpZXMsIGopO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUb29sdGlwO1xuICB9KCk7XG5cbiAgdmFyIEJhckRhdGFMYWJlbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhckRhdGFMYWJlbHMoYmFyQ3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFyRGF0YUxhYmVscyk7XG5cbiAgICAgIHRoaXMudyA9IGJhckN0eC53O1xuICAgICAgdGhpcy5iYXJDdHggPSBiYXJDdHg7XG4gICAgfVxuICAgIC8qKiBoYW5kbGVCYXJEYXRhTGFiZWxzIGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMgZm9yIHRoZSBkYXRhLWxhYmVsc1xuICAgICAqIEl0IGFsc28gc2V0cyB0aGUgZWxlbWVudCdzIGRhdGEgYXR0ciBmb3IgYmFycyBhbmQgY2FsbHMgZHJhd0NhbGN1bGF0ZWRCYXJEYXRhTGFiZWxzKClcbiAgICAgKiBBZnRlciBjYWxjdWxhdGluZywgaXQgYWxzbyBjYWxscyB0aGUgZnVuY3Rpb24gdG8gZHJhdyBkYXRhIGxhYmVsc1xuICAgICAqIEBtZW1iZXJvZiBCYXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0ge2JhclByb3BzfSBtb3N0IG9mIHRoZSBiYXIgcHJvcGVydGllcyB1c2VkIHRocm91Z2hvdXQgdGhlIGJhclxuICAgICAqIGRyYXdpbmcgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IGRhdGFMYWJlbHMgbm9kZS1lbGVtZW50IHdoaWNoIHlvdSBjYW4gYXBwZW5kIGxhdGVyXG4gICAgICoqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoQmFyRGF0YUxhYmVscywgW3tcbiAgICAgIGtleTogXCJoYW5kbGVCYXJEYXRhTGFiZWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQmFyRGF0YUxhYmVscyhvcHRzKSB7XG4gICAgICAgIHZhciB4ID0gb3B0cy54LFxuICAgICAgICAgICAgeSA9IG9wdHMueSxcbiAgICAgICAgICAgIHkxID0gb3B0cy55MSxcbiAgICAgICAgICAgIHkyID0gb3B0cy55MixcbiAgICAgICAgICAgIGkgPSBvcHRzLmksXG4gICAgICAgICAgICBqID0gb3B0cy5qLFxuICAgICAgICAgICAgcmVhbEluZGV4ID0gb3B0cy5yZWFsSW5kZXgsXG4gICAgICAgICAgICBzZXJpZXMgPSBvcHRzLnNlcmllcyxcbiAgICAgICAgICAgIGJhckhlaWdodCA9IG9wdHMuYmFySGVpZ2h0LFxuICAgICAgICAgICAgYmFyV2lkdGggPSBvcHRzLmJhcldpZHRoLFxuICAgICAgICAgICAgYmFyWVBvc2l0aW9uID0gb3B0cy5iYXJZUG9zaXRpb24sXG4gICAgICAgICAgICB2aXNpYmxlU2VyaWVzID0gb3B0cy52aXNpYmxlU2VyaWVzLFxuICAgICAgICAgICAgcmVuZGVyZWRQYXRoID0gb3B0cy5yZW5kZXJlZFBhdGg7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5iYXJDdHguY3R4KTtcbiAgICAgICAgdmFyIHN0cm9rZVdpZHRoID0gQXJyYXkuaXNBcnJheSh0aGlzLmJhckN0eC5zdHJva2VXaWR0aCkgPyB0aGlzLmJhckN0eC5zdHJva2VXaWR0aFtyZWFsSW5kZXhdIDogdGhpcy5iYXJDdHguc3Ryb2tlV2lkdGg7XG4gICAgICAgIHZhciBiY3ggPSB4ICsgcGFyc2VGbG9hdChiYXJXaWR0aCAqIHZpc2libGVTZXJpZXMpO1xuICAgICAgICB2YXIgYmN5ID0geSArIHBhcnNlRmxvYXQoYmFySGVpZ2h0ICogdmlzaWJsZVNlcmllcyk7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljICYmICF3Lmdsb2JhbHMuaXNCYXJIb3Jpem9udGFsKSB7XG4gICAgICAgICAgYmN4ID0geCArIHBhcnNlRmxvYXQoYmFyV2lkdGggKiAodmlzaWJsZVNlcmllcyArIDEpKTtcbiAgICAgICAgICBiY3kgPSB5ICsgcGFyc2VGbG9hdChiYXJIZWlnaHQgKiAodmlzaWJsZVNlcmllcyArIDEpKSAtIHN0cm9rZVdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGFMYWJlbHMgPSBudWxsO1xuICAgICAgICB2YXIgZGF0YUxhYmVsc1ggPSB4O1xuICAgICAgICB2YXIgZGF0YUxhYmVsc1kgPSB5O1xuICAgICAgICB2YXIgZGF0YUxhYmVsc1BvcyA9IHt9O1xuICAgICAgICB2YXIgZGF0YUxhYmVsc0NvbmZpZyA9IHcuY29uZmlnLmRhdGFMYWJlbHM7XG4gICAgICAgIHZhciBiYXJEYXRhTGFiZWxzQ29uZmlnID0gdGhpcy5iYXJDdHguYmFyT3B0aW9ucy5kYXRhTGFiZWxzO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYmFyWVBvc2l0aW9uICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmJhckN0eC5pc1RpbWVsaW5lQmFyKSB7XG4gICAgICAgICAgYmN5ID0gYmFyWVBvc2l0aW9uO1xuICAgICAgICAgIGRhdGFMYWJlbHNZID0gYmFyWVBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZlggPSBkYXRhTGFiZWxzQ29uZmlnLm9mZnNldFg7XG4gICAgICAgIHZhciBvZmZZID0gZGF0YUxhYmVsc0NvbmZpZy5vZmZzZXRZO1xuICAgICAgICB2YXIgdGV4dFJlY3RzID0ge1xuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5kYXRhTGFiZWxzLmVuYWJsZWQpIHtcbiAgICAgICAgICB0ZXh0UmVjdHMgPSBncmFwaGljcy5nZXRUZXh0UmVjdHMody5nbG9iYWxzLnlMYWJlbEZvcm1hdHRlcnNbMF0ody5nbG9iYWxzLm1heFkpLCBwYXJzZUZsb2F0KGRhdGFMYWJlbHNDb25maWcuc3R5bGUuZm9udFNpemUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5LFxuICAgICAgICAgIGk6IGksXG4gICAgICAgICAgajogaixcbiAgICAgICAgICByZW5kZXJlZFBhdGg6IHJlbmRlcmVkUGF0aCxcbiAgICAgICAgICBiY3g6IGJjeCxcbiAgICAgICAgICBiY3k6IGJjeSxcbiAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodCxcbiAgICAgICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgICAgdGV4dFJlY3RzOiB0ZXh0UmVjdHMsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgIGRhdGFMYWJlbHNYOiBkYXRhTGFiZWxzWCxcbiAgICAgICAgICBkYXRhTGFiZWxzWTogZGF0YUxhYmVsc1ksXG4gICAgICAgICAgYmFyRGF0YUxhYmVsc0NvbmZpZzogYmFyRGF0YUxhYmVsc0NvbmZpZyxcbiAgICAgICAgICBvZmZYOiBvZmZYLFxuICAgICAgICAgIG9mZlk6IG9mZllcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5iYXJDdHguaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgZGF0YUxhYmVsc1BvcyA9IHRoaXMuY2FsY3VsYXRlQmFyc0RhdGFMYWJlbHNQb3NpdGlvbihwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGFMYWJlbHNQb3MgPSB0aGlzLmNhbGN1bGF0ZUNvbHVtbnNEYXRhTGFiZWxzUG9zaXRpb24ocGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcmVkUGF0aC5hdHRyKHtcbiAgICAgICAgICBjeTogZGF0YUxhYmVsc1Bvcy5iY3ksXG4gICAgICAgICAgY3g6IGRhdGFMYWJlbHNQb3MuYmN4LFxuICAgICAgICAgIGo6IGosXG4gICAgICAgICAgdmFsOiBzZXJpZXNbaV1bal0sXG4gICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoXG4gICAgICAgIH0pO1xuICAgICAgICBkYXRhTGFiZWxzID0gdGhpcy5kcmF3Q2FsY3VsYXRlZERhdGFMYWJlbHMoe1xuICAgICAgICAgIHg6IGRhdGFMYWJlbHNQb3MuZGF0YUxhYmVsc1gsXG4gICAgICAgICAgeTogZGF0YUxhYmVsc1Bvcy5kYXRhTGFiZWxzWSxcbiAgICAgICAgICB2YWw6IHRoaXMuYmFyQ3R4LmlzVGltZWxpbmVCYXIgPyBbeTEsIHkyXSA6IHNlcmllc1tpXVtqXSxcbiAgICAgICAgICBpOiByZWFsSW5kZXgsXG4gICAgICAgICAgajogaixcbiAgICAgICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgdGV4dFJlY3RzOiB0ZXh0UmVjdHMsXG4gICAgICAgICAgZGF0YUxhYmVsc0NvbmZpZzogZGF0YUxhYmVsc0NvbmZpZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRhdGFMYWJlbHM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNhbGN1bGF0ZUNvbHVtbnNEYXRhTGFiZWxzUG9zaXRpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVDb2x1bW5zRGF0YUxhYmVsc1Bvc2l0aW9uKG9wdHMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBpID0gb3B0cy5pLFxuICAgICAgICAgICAgaiA9IG9wdHMuaixcbiAgICAgICAgICAgIHkgPSBvcHRzLnksXG4gICAgICAgICAgICBiY3ggPSBvcHRzLmJjeCxcbiAgICAgICAgICAgIGJhcldpZHRoID0gb3B0cy5iYXJXaWR0aCxcbiAgICAgICAgICAgIGJhckhlaWdodCA9IG9wdHMuYmFySGVpZ2h0LFxuICAgICAgICAgICAgdGV4dFJlY3RzID0gb3B0cy50ZXh0UmVjdHMsXG4gICAgICAgICAgICBkYXRhTGFiZWxzWSA9IG9wdHMuZGF0YUxhYmVsc1ksXG4gICAgICAgICAgICBiYXJEYXRhTGFiZWxzQ29uZmlnID0gb3B0cy5iYXJEYXRhTGFiZWxzQ29uZmlnLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgb2ZmWCA9IG9wdHMub2ZmWCxcbiAgICAgICAgICAgIG9mZlkgPSBvcHRzLm9mZlk7XG4gICAgICAgIHZhciBkYXRhTGFiZWxzWDtcbiAgICAgICAgYmFySGVpZ2h0ID0gTWF0aC5hYnMoYmFySGVpZ2h0KTtcbiAgICAgICAgdmFyIHZlcnRpY2FsID0gdy5jb25maWcucGxvdE9wdGlvbnMuYmFyLmRhdGFMYWJlbHMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICAgIGJjeCA9IGJjeCAtIHN0cm9rZVdpZHRoIC8gMjtcbiAgICAgICAgdmFyIGRhdGFQb2ludHNEaXZpZGVkV2lkdGggPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gdy5nbG9iYWxzLmRhdGFQb2ludHM7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgZGF0YUxhYmVsc1ggPSBiY3ggLSBiYXJXaWR0aCAvIDIgKyBvZmZYO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGFMYWJlbHNYID0gYmN4IC0gZGF0YVBvaW50c0RpdmlkZWRXaWR0aCArIGJhcldpZHRoIC8gMiArIG9mZlg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICB2YXIgb2Zmc2V0RExYID0gMjtcbiAgICAgICAgICBkYXRhTGFiZWxzWCA9IGRhdGFMYWJlbHNYICsgdGV4dFJlY3RzLmhlaWdodCAvIDIgLSBzdHJva2VXaWR0aCAvIDIgLSBvZmZzZXRETFg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsSXNOZWdhdGl2ZSA9IHRoaXMuYmFyQ3R4LnNlcmllc1tpXVtqXSA8IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuYmFyQ3R4LmlzUmV2ZXJzZWQpIHtcbiAgICAgICAgICB5ID0geSAtIGJhckhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoYmFyRGF0YUxhYmVsc0NvbmZpZy5wb3NpdGlvbikge1xuICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbElzTmVnYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzWSA9IHkgKyBiYXJIZWlnaHQgLyAyICsgb2ZmWTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzWSA9IHkgKyBiYXJIZWlnaHQgLyAyIC0gb2ZmWTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHZhbElzTmVnYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzWSA9IHkgKyBiYXJIZWlnaHQgLyAyICsgdGV4dFJlY3RzLmhlaWdodCAvIDIgKyBvZmZZO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGFMYWJlbHNZID0geSArIGJhckhlaWdodCAvIDIgKyB0ZXh0UmVjdHMuaGVpZ2h0IC8gMiAtIG9mZlk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgIGlmICh2YWxJc05lZ2F0aXZlKSB7XG4gICAgICAgICAgICAgICAgZGF0YUxhYmVsc1kgPSB5ICsgYmFySGVpZ2h0ICsgb2ZmWTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzWSA9IHkgKyBiYXJIZWlnaHQgLSBvZmZZO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodmFsSXNOZWdhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGRhdGFMYWJlbHNZID0geSArIGJhckhlaWdodCArIHRleHRSZWN0cy5oZWlnaHQgKyBzdHJva2VXaWR0aCArIG9mZlk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YUxhYmVsc1kgPSB5ICsgYmFySGVpZ2h0IC0gdGV4dFJlY3RzLmhlaWdodCAvIDIgKyBzdHJva2VXaWR0aCAtIG9mZlk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgIGlmICh2YWxJc05lZ2F0aXZlKSB7XG4gICAgICAgICAgICAgICAgZGF0YUxhYmVsc1kgPSB5ICsgb2ZmWTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzWSA9IHkgLSBvZmZZO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodmFsSXNOZWdhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGRhdGFMYWJlbHNZID0geSAtIHRleHRSZWN0cy5oZWlnaHQgLyAyIC0gb2ZmWTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzWSA9IHkgKyB0ZXh0UmVjdHMuaGVpZ2h0ICsgb2ZmWTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdy5jb25maWcuY2hhcnQuc3RhY2tlZCkge1xuICAgICAgICAgIGlmIChkYXRhTGFiZWxzWSA8IDApIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbHNZID0gMCArIHN0cm9rZVdpZHRoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YUxhYmVsc1kgKyB0ZXh0UmVjdHMuaGVpZ2h0IC8gMyA+IHcuZ2xvYmFscy5ncmlkSGVpZ2h0KSB7XG4gICAgICAgICAgICBkYXRhTGFiZWxzWSA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC0gc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBiY3g6IGJjeCxcbiAgICAgICAgICBiY3k6IHksXG4gICAgICAgICAgZGF0YUxhYmVsc1g6IGRhdGFMYWJlbHNYLFxuICAgICAgICAgIGRhdGFMYWJlbHNZOiBkYXRhTGFiZWxzWVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjYWxjdWxhdGVCYXJzRGF0YUxhYmVsc1Bvc2l0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlQmFyc0RhdGFMYWJlbHNQb3NpdGlvbihvcHRzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgeCA9IG9wdHMueCxcbiAgICAgICAgICAgIGkgPSBvcHRzLmksXG4gICAgICAgICAgICBqID0gb3B0cy5qLFxuICAgICAgICAgICAgYmN5ID0gb3B0cy5iY3ksXG4gICAgICAgICAgICBiYXJIZWlnaHQgPSBvcHRzLmJhckhlaWdodCxcbiAgICAgICAgICAgIGJhcldpZHRoID0gb3B0cy5iYXJXaWR0aCxcbiAgICAgICAgICAgIHRleHRSZWN0cyA9IG9wdHMudGV4dFJlY3RzLFxuICAgICAgICAgICAgZGF0YUxhYmVsc1ggPSBvcHRzLmRhdGFMYWJlbHNYLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgYmFyRGF0YUxhYmVsc0NvbmZpZyA9IG9wdHMuYmFyRGF0YUxhYmVsc0NvbmZpZyxcbiAgICAgICAgICAgIG9mZlggPSBvcHRzLm9mZlgsXG4gICAgICAgICAgICBvZmZZID0gb3B0cy5vZmZZO1xuICAgICAgICB2YXIgZGF0YVBvaW50c0RpdmlkZWRIZWlnaHQgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIHcuZ2xvYmFscy5kYXRhUG9pbnRzO1xuICAgICAgICBiYXJXaWR0aCA9IE1hdGguYWJzKGJhcldpZHRoKTtcbiAgICAgICAgdmFyIGRhdGFMYWJlbHNZID0gYmN5IC0gKHRoaXMuYmFyQ3R4LmlzVGltZWxpbmVCYXIgPyAwIDogZGF0YVBvaW50c0RpdmlkZWRIZWlnaHQpICsgYmFySGVpZ2h0IC8gMiArIHRleHRSZWN0cy5oZWlnaHQgLyAyICsgb2ZmWSAtIDM7XG4gICAgICAgIHZhciB2YWxJc05lZ2F0aXZlID0gdGhpcy5iYXJDdHguc2VyaWVzW2ldW2pdIDwgMDtcbiAgICAgICAgdmFyIG5ld1ggPSB4O1xuXG4gICAgICAgIGlmICh0aGlzLmJhckN0eC5pc1JldmVyc2VkKSB7XG4gICAgICAgICAgbmV3WCA9IHggKyBiYXJXaWR0aDtcbiAgICAgICAgICB4ID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAtIGJhcldpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChiYXJEYXRhTGFiZWxzQ29uZmlnLnBvc2l0aW9uKSB7XG4gICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgIGlmICh2YWxJc05lZ2F0aXZlKSB7XG4gICAgICAgICAgICAgIGRhdGFMYWJlbHNYID0gbmV3WCAtIGJhcldpZHRoIC8gMiAtIG9mZlg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkYXRhTGFiZWxzWCA9IG5ld1ggLSBiYXJXaWR0aCAvIDIgKyBvZmZYO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICBpZiAodmFsSXNOZWdhdGl2ZSkge1xuICAgICAgICAgICAgICBkYXRhTGFiZWxzWCA9IG5ld1ggKyBiYXJXaWR0aCAtIHN0cm9rZVdpZHRoIC0gTWF0aC5yb3VuZCh0ZXh0UmVjdHMud2lkdGggLyAyKSAtIG9mZlg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkYXRhTGFiZWxzWCA9IG5ld1ggLSBiYXJXaWR0aCArIHN0cm9rZVdpZHRoICsgTWF0aC5yb3VuZCh0ZXh0UmVjdHMud2lkdGggLyAyKSArIG9mZlg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIGlmICh2YWxJc05lZ2F0aXZlKSB7XG4gICAgICAgICAgICAgIGRhdGFMYWJlbHNYID0gbmV3WCAtIHN0cm9rZVdpZHRoICsgTWF0aC5yb3VuZCh0ZXh0UmVjdHMud2lkdGggLyAyKSAtIG9mZlg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkYXRhTGFiZWxzWCA9IG5ld1ggLSBzdHJva2VXaWR0aCAtIE1hdGgucm91bmQodGV4dFJlY3RzLndpZHRoIC8gMikgKyBvZmZYO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdy5jb25maWcuY2hhcnQuc3RhY2tlZCkge1xuICAgICAgICAgIGlmIChkYXRhTGFiZWxzWCA8IDApIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbHNYID0gZGF0YUxhYmVsc1ggKyB0ZXh0UmVjdHMud2lkdGggKyBzdHJva2VXaWR0aDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFMYWJlbHNYICsgdGV4dFJlY3RzLndpZHRoIC8gMiA+IHcuZ2xvYmFscy5ncmlkV2lkdGgpIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbHNYID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAtIHRleHRSZWN0cy53aWR0aCAtIHN0cm9rZVdpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmN4OiB4LFxuICAgICAgICAgIGJjeTogYmN5LFxuICAgICAgICAgIGRhdGFMYWJlbHNYOiBkYXRhTGFiZWxzWCxcbiAgICAgICAgICBkYXRhTGFiZWxzWTogZGF0YUxhYmVsc1lcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd0NhbGN1bGF0ZWREYXRhTGFiZWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0NhbGN1bGF0ZWREYXRhTGFiZWxzKF9yZWYpIHtcbiAgICAgICAgdmFyIHggPSBfcmVmLngsXG4gICAgICAgICAgICB5ID0gX3JlZi55LFxuICAgICAgICAgICAgdmFsID0gX3JlZi52YWwsXG4gICAgICAgICAgICBpID0gX3JlZi5pLFxuICAgICAgICAgICAgaiA9IF9yZWYuaixcbiAgICAgICAgICAgIHRleHRSZWN0cyA9IF9yZWYudGV4dFJlY3RzLFxuICAgICAgICAgICAgYmFySGVpZ2h0ID0gX3JlZi5iYXJIZWlnaHQsXG4gICAgICAgICAgICBiYXJXaWR0aCA9IF9yZWYuYmFyV2lkdGgsXG4gICAgICAgICAgICBkYXRhTGFiZWxzQ29uZmlnID0gX3JlZi5kYXRhTGFiZWxzQ29uZmlnO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHJvdGF0ZSA9ICdyb3RhdGUoMCknO1xuICAgICAgICBpZiAody5jb25maWcucGxvdE9wdGlvbnMuYmFyLmRhdGFMYWJlbHMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHJvdGF0ZSA9IFwicm90YXRlKC05MCwgXCIuY29uY2F0KHgsIFwiLCBcIikuY29uY2F0KHksIFwiKVwiKTtcbiAgICAgICAgdmFyIGRhdGFMYWJlbHMgPSBuZXcgRGF0YUxhYmVscyh0aGlzLmJhckN0eC5jdHgpO1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5iYXJDdHguY3R4KTtcbiAgICAgICAgdmFyIGZvcm1hdHRlciA9IGRhdGFMYWJlbHNDb25maWcuZm9ybWF0dGVyO1xuICAgICAgICB2YXIgZWxEYXRhTGFiZWxzV3JhcCA9IG51bGw7XG4gICAgICAgIHZhciBpc1Nlcmllc05vdENvbGxhcHNlZCA9IHcuZ2xvYmFscy5jb2xsYXBzZWRTZXJpZXNJbmRpY2VzLmluZGV4T2YoaSkgPiAtMTtcblxuICAgICAgICBpZiAoZGF0YUxhYmVsc0NvbmZpZy5lbmFibGVkICYmICFpc1Nlcmllc05vdENvbGxhcHNlZCkge1xuICAgICAgICAgIGVsRGF0YUxhYmVsc1dyYXAgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtZGF0YS1sYWJlbHMnLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgdGV4dCA9ICcnO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0ZXh0ID0gZm9ybWF0dGVyKHZhbCwge1xuICAgICAgICAgICAgICBzZXJpZXNJbmRleDogaSxcbiAgICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGosXG4gICAgICAgICAgICAgIHc6IHdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2YWwgPT09IDAgJiYgdy5jb25maWcuY2hhcnQuc3RhY2tlZCkge1xuICAgICAgICAgICAgLy8gaW4gYSBzdGFja2VkIGJhci9jb2x1bW4gY2hhcnQsIDAgdmFsdWUgc2hvdWxkIGJlIG5lZ2xlY3RlZCBhcyBpdCB3aWxsIG92ZXJsYXAgb24gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB2YWxJc05lZ2F0aXZlID0gdy5nbG9iYWxzLnNlcmllc1tpXVtqXSA8PSAwO1xuICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHcuY29uZmlnLnBsb3RPcHRpb25zLmJhci5kYXRhTGFiZWxzLnBvc2l0aW9uO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLnBsb3RPcHRpb25zLmJhci5kYXRhTGFiZWxzLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgIGlmICh2YWxJc05lZ2F0aXZlKSBkYXRhTGFiZWxzQ29uZmlnLnRleHRBbmNob3IgPSAnZW5kJztlbHNlIGRhdGFMYWJlbHNDb25maWcudGV4dEFuY2hvciA9ICdzdGFydCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgZGF0YUxhYmVsc0NvbmZpZy50ZXh0QW5jaG9yID0gJ21pZGRsZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbElzTmVnYXRpdmUpIGRhdGFMYWJlbHNDb25maWcudGV4dEFuY2hvciA9ICdlbmQnO2Vsc2UgZGF0YUxhYmVsc0NvbmZpZy50ZXh0QW5jaG9yID0gJ3N0YXJ0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5iYXJDdHguaXNUaW1lbGluZUJhciAmJiB0aGlzLmJhckN0eC5iYXJPcHRpb25zLmRhdGFMYWJlbHMuaGlkZU92ZXJmbG93aW5nTGFiZWxzKSB7XG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBkYXRhbGFiZWwgaWYgaXQgY2Fubm90IGZpdCBpbnRvIHRoZSByZWN0XG4gICAgICAgICAgICB2YXIgdHhSZWN0ID0gZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKHRleHQsIHBhcnNlRmxvYXQoZGF0YUxhYmVsc0NvbmZpZy5zdHlsZS5mb250U2l6ZSkpO1xuXG4gICAgICAgICAgICBpZiAoYmFyV2lkdGggPCB0eFJlY3Qud2lkdGgpIHtcbiAgICAgICAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5zdGFja2VkICYmIHRoaXMuYmFyQ3R4LmJhck9wdGlvbnMuZGF0YUxhYmVscy5oaWRlT3ZlcmZsb3dpbmdMYWJlbHMpIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggc3BhY2UgdG8gZHJhdyB0aGUgbGFiZWwgaW4gdGhlIGJhci9jb2x1bW4gcmVjdCwgY2hlY2sgaGlkZU92ZXJmbG93aW5nTGFiZWxzIHByb3BlcnR5IHRvIHByZXZlbnQgb3ZlcmZsb3dpbmcgb24gd3JvbmcgcmVjdFxuICAgICAgICAgICAgLy8gTm90ZTogVGhpcyBpc3N1ZSBpcyBvbmx5IHNlZW4gaW4gc3RhY2tlZCBjaGFydHNcbiAgICAgICAgICAgIGlmICh0aGlzLmJhckN0eC5pc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgYmFyV2lkdGggPSBNYXRoLmFicyh3Lmdsb2JhbHMuc2VyaWVzW2ldW2pdKSAvIHRoaXMuYmFyQ3R4LmludmVydGVkWVJhdGlvW3RoaXMuYmFyQ3R4LnlheGlzSW5kZXhdOyAvLyBGSVhFRDogRG9uJ3QgYWx3YXlzIGhpZGUgdGhlIHN0YWNrZWQgbmVnYXRpdmUgc2lkZSBsYWJlbFxuICAgICAgICAgICAgICAvLyBBIG5lZ2F0aXZlIHZhbHVlIHdpbGwgcmVzdWx0IGluIGEgbmVnYXRpdmUgYmFyIHdpZHRoXG4gICAgICAgICAgICAgIC8vIE9ubHkgaGlkZSB0aGUgdGV4dCB3aGVuIHRoZSB3aWR0aCBpcyBzbWFsbGVyIChhIGhpZ2hlciBuZWdhdGl2ZSBudW1iZXIpIHRoYW4gdGhlIG5lZ2F0aXZlIGJhciB3aWR0aC5cblxuICAgICAgICAgICAgICBpZiAoYmFyV2lkdGggPiAwICYmIHRleHRSZWN0cy53aWR0aCAvIDEuNiA+IGJhcldpZHRoIHx8IGJhcldpZHRoIDwgMCAmJiB0ZXh0UmVjdHMud2lkdGggLyAxLjYgPCBiYXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYmFySGVpZ2h0ID0gTWF0aC5hYnMody5nbG9iYWxzLnNlcmllc1tpXVtqXSkgLyB0aGlzLmJhckN0eC55UmF0aW9bdGhpcy5iYXJDdHgueWF4aXNJbmRleF07XG5cbiAgICAgICAgICAgICAgaWYgKHRleHRSZWN0cy5oZWlnaHQgLyAxLjYgPiBiYXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbW9kaWZpZWREYXRhTGFiZWxzQ29uZmlnID0gX29iamVjdFNwcmVhZDIoe30sIGRhdGFMYWJlbHNDb25maWcpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuYmFyQ3R4LmlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGFMYWJlbHNDb25maWcudGV4dEFuY2hvciA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVkRGF0YUxhYmVsc0NvbmZpZy50ZXh0QW5jaG9yID0gJ2VuZCc7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YUxhYmVsc0NvbmZpZy50ZXh0QW5jaG9yID09PSAnZW5kJykge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVkRGF0YUxhYmVsc0NvbmZpZy50ZXh0QW5jaG9yID0gJ3N0YXJ0JztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFMYWJlbHMucGxvdERhdGFMYWJlbHNUZXh0KHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICBqOiBqLFxuICAgICAgICAgICAgcGFyZW50OiBlbERhdGFMYWJlbHNXcmFwLFxuICAgICAgICAgICAgZGF0YUxhYmVsc0NvbmZpZzogbW9kaWZpZWREYXRhTGFiZWxzQ29uZmlnLFxuICAgICAgICAgICAgYWx3YXlzRHJhd0RhdGFMYWJlbDogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldENvcnJlY3Rpb246IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbERhdGFMYWJlbHNXcmFwO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCYXJEYXRhTGFiZWxzO1xuICB9KCk7XG5cbiAgdmFyIEhlbHBlcnMkMyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGVscGVycyhiYXJDdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWxwZXJzKTtcblxuICAgICAgdGhpcy53ID0gYmFyQ3R4Lnc7XG4gICAgICB0aGlzLmJhckN0eCA9IGJhckN0eDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSGVscGVycywgW3tcbiAgICAgIGtleTogXCJpbml0VmFyaWFibGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFZhcmlhYmxlcyhzZXJpZXMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHRoaXMuYmFyQ3R4LnNlcmllcyA9IHNlcmllcztcbiAgICAgICAgdGhpcy5iYXJDdHgudG90YWxJdGVtcyA9IDA7XG4gICAgICAgIHRoaXMuYmFyQ3R4LnNlcmllc0xlbiA9IDA7XG4gICAgICAgIHRoaXMuYmFyQ3R4LnZpc2libGVJID0gLTE7IC8vIHZpc2libGUgU2VyaWVzXG5cbiAgICAgICAgdGhpcy5iYXJDdHgudmlzaWJsZUl0ZW1zID0gMTsgLy8gbnVtYmVyIG9mIHZpc2libGUgYmFycyBhZnRlciB1c2VyIHpvb21lZCBpbi9vdXRcblxuICAgICAgICBmb3IgKHZhciBzbCA9IDA7IHNsIDwgc2VyaWVzLmxlbmd0aDsgc2wrKykge1xuICAgICAgICAgIGlmIChzZXJpZXNbc2xdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYmFyQ3R4LnNlcmllc0xlbiA9IHRoaXMuYmFyQ3R4LnNlcmllc0xlbiArIDE7XG4gICAgICAgICAgICB0aGlzLmJhckN0eC50b3RhbEl0ZW1zICs9IHNlcmllc1tzbF0ubGVuZ3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgICAgLy8gZ2V0IG1heCB2aXNpYmxlIGl0ZW1zXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlcmllc1tzbF0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5zZXJpZXNYW3NsXVtqXSA+IHcuZ2xvYmFscy5taW5YICYmIHcuZ2xvYmFscy5zZXJpZXNYW3NsXVtqXSA8IHcuZ2xvYmFscy5tYXhYKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXJDdHgudmlzaWJsZUl0ZW1zKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYXJDdHgudmlzaWJsZUl0ZW1zID0gdy5nbG9iYWxzLmRhdGFQb2ludHM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYmFyQ3R4LnNlcmllc0xlbiA9PT0gMCkge1xuICAgICAgICAgIC8vIEEgc21hbGwgYWRqdXN0bWVudCB3aGVuIGNvbWJvIGNoYXJ0cyBhcmUgdXNlZFxuICAgICAgICAgIHRoaXMuYmFyQ3R4LnNlcmllc0xlbiA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW5pdGlhbFBvc2l0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxQb3NpdGlvbnMoKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgeCwgeSwgeURpdmlzaW9uLCB4RGl2aXNpb24sIGJhckhlaWdodCwgYmFyV2lkdGgsIHplcm9ILCB6ZXJvVztcbiAgICAgICAgdmFyIGRhdGFQb2ludHMgPSB3Lmdsb2JhbHMuZGF0YVBvaW50cztcblxuICAgICAgICBpZiAodGhpcy5iYXJDdHguaXNUaW1lbGluZUJhcikge1xuICAgICAgICAgIC8vIHRpbWVsaW5lIHJhbmdlYmFyIGNoYXJ0XG4gICAgICAgICAgZGF0YVBvaW50cyA9IHcuZ2xvYmFscy5sYWJlbHMubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYmFyQ3R4LmlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgIC8vIGhlaWdodCBkaXZpZGVkIGludG8gZXF1YWwgcGFydHNcbiAgICAgICAgICB5RGl2aXNpb24gPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIGRhdGFQb2ludHM7XG4gICAgICAgICAgYmFySGVpZ2h0ID0geURpdmlzaW9uIC8gdGhpcy5iYXJDdHguc2VyaWVzTGVuO1xuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgICB5RGl2aXNpb24gPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIHRoaXMuYmFyQ3R4LnRvdGFsSXRlbXM7XG4gICAgICAgICAgICBiYXJIZWlnaHQgPSB5RGl2aXNpb24gLyB0aGlzLmJhckN0eC5zZXJpZXNMZW47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmFySGVpZ2h0ID0gYmFySGVpZ2h0ICogcGFyc2VJbnQodGhpcy5iYXJDdHguYmFyT3B0aW9ucy5iYXJIZWlnaHQsIDEwKSAvIDEwMDtcbiAgICAgICAgICB6ZXJvVyA9IHRoaXMuYmFyQ3R4LmJhc2VMaW5lSW52ZXJ0ZWRZICsgdy5nbG9iYWxzLnBhZEhvcml6b250YWwgKyAodGhpcy5iYXJDdHguaXNSZXZlcnNlZCA/IHcuZ2xvYmFscy5ncmlkV2lkdGggOiAwKSAtICh0aGlzLmJhckN0eC5pc1JldmVyc2VkID8gdGhpcy5iYXJDdHguYmFzZUxpbmVJbnZlcnRlZFkgKiAyIDogMCk7XG4gICAgICAgICAgeSA9ICh5RGl2aXNpb24gLSBiYXJIZWlnaHQgKiB0aGlzLmJhckN0eC5zZXJpZXNMZW4pIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3aWR0aCBkaXZpZGVkIGludG8gZXF1YWwgcGFydHNcbiAgICAgICAgICB4RGl2aXNpb24gPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gdGhpcy5iYXJDdHgudmlzaWJsZUl0ZW1zO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYykge1xuICAgICAgICAgICAgeERpdmlzaW9uID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAvIHcuZ2xvYmFscy5kYXRhUG9pbnRzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJhcldpZHRoID0geERpdmlzaW9uIC8gdGhpcy5iYXJDdHguc2VyaWVzTGVuICogcGFyc2VJbnQodGhpcy5iYXJDdHguYmFyT3B0aW9ucy5jb2x1bW5XaWR0aCwgMTApIC8gMTAwO1xuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgICAvLyBtYXggYmFyd2lkdGggc2hvdWxkIGJlIGVxdWFsIHRvIG1pblhEaWZmIHRvIGF2b2lkIG92ZXJsYXBcbiAgICAgICAgICAgIHZhciB4UmF0aW8gPSB0aGlzLmJhckN0eC54UmF0aW87XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICAgICAgeFJhdGlvID0gdGhpcy5iYXJDdHguaW5pdGlhbFhSYXRpbztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5taW5YRGlmZiAmJiB3Lmdsb2JhbHMubWluWERpZmYgLyB4UmF0aW8gPiAwKSB7XG4gICAgICAgICAgICAgIHhEaXZpc2lvbiA9IHcuZ2xvYmFscy5taW5YRGlmZiAvIHhSYXRpbztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmFyV2lkdGggPSB4RGl2aXNpb24gLyB0aGlzLmJhckN0eC5zZXJpZXNMZW4gKiBwYXJzZUludCh0aGlzLmJhckN0eC5iYXJPcHRpb25zLmNvbHVtbldpZHRoLCAxMCkgLyAxMDA7XG5cbiAgICAgICAgICAgIGlmIChiYXJXaWR0aCA8IDEpIHtcbiAgICAgICAgICAgICAgYmFyV2lkdGggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHplcm9IID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQgLSB0aGlzLmJhckN0eC5iYXNlTGluZVlbdGhpcy5iYXJDdHgueWF4aXNJbmRleF0gLSAodGhpcy5iYXJDdHguaXNSZXZlcnNlZCA/IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IDogMCkgKyAodGhpcy5iYXJDdHguaXNSZXZlcnNlZCA/IHRoaXMuYmFyQ3R4LmJhc2VMaW5lWVt0aGlzLmJhckN0eC55YXhpc0luZGV4XSAqIDIgOiAwKTtcbiAgICAgICAgICB4ID0gdy5nbG9iYWxzLnBhZEhvcml6b250YWwgKyAoeERpdmlzaW9uIC0gYmFyV2lkdGggKiB0aGlzLmJhckN0eC5zZXJpZXNMZW4pIC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5LFxuICAgICAgICAgIHlEaXZpc2lvbjogeURpdmlzaW9uLFxuICAgICAgICAgIHhEaXZpc2lvbjogeERpdmlzaW9uLFxuICAgICAgICAgIGJhckhlaWdodDogYmFySGVpZ2h0LFxuICAgICAgICAgIGJhcldpZHRoOiBiYXJXaWR0aCxcbiAgICAgICAgICB6ZXJvSDogemVyb0gsXG4gICAgICAgICAgemVyb1c6IHplcm9XXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFBhdGhGaWxsQ29sb3JcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYXRoRmlsbENvbG9yKHNlcmllcywgaSwgaiwgcmVhbEluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZmlsbCA9IG5ldyBGaWxsKHRoaXMuYmFyQ3R4LmN0eCk7XG4gICAgICAgIHZhciBmaWxsQ29sb3IgPSBudWxsO1xuICAgICAgICB2YXIgc2VyaWVzTnVtYmVyID0gdGhpcy5iYXJDdHguYmFyT3B0aW9ucy5kaXN0cmlidXRlZCA/IGogOiBpO1xuXG4gICAgICAgIGlmICh0aGlzLmJhckN0eC5iYXJPcHRpb25zLmNvbG9ycy5yYW5nZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBjb2xvclJhbmdlID0gdGhpcy5iYXJDdHguYmFyT3B0aW9ucy5jb2xvcnMucmFuZ2VzO1xuICAgICAgICAgIGNvbG9yUmFuZ2UubWFwKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICAgICAgaWYgKHNlcmllc1tpXVtqXSA+PSByYW5nZS5mcm9tICYmIHNlcmllc1tpXVtqXSA8PSByYW5nZS50bykge1xuICAgICAgICAgICAgICBmaWxsQ29sb3IgPSByYW5nZS5jb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXSAmJiB3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXS5maWxsQ29sb3IpIHtcbiAgICAgICAgICBmaWxsQ29sb3IgPSB3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXS5maWxsQ29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGF0aEZpbGwgPSBmaWxsLmZpbGxQYXRoKHtcbiAgICAgICAgICBzZXJpZXNOdW1iZXI6IHRoaXMuYmFyQ3R4LmJhck9wdGlvbnMuZGlzdHJpYnV0ZWQgPyBzZXJpZXNOdW1iZXIgOiByZWFsSW5kZXgsXG4gICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGosXG4gICAgICAgICAgY29sb3I6IGZpbGxDb2xvcixcbiAgICAgICAgICB2YWx1ZTogc2VyaWVzW2ldW2pdXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGF0aEZpbGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFN0cm9rZVdpZHRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3Ryb2tlV2lkdGgoaSwgaiwgcmVhbEluZGV4KSB7XG4gICAgICAgIHZhciBzdHJva2VXaWR0aCA9IDA7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5iYXJDdHguc2VyaWVzW2ldW2pdID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmJhckN0eC5zZXJpZXNbaV1bal0gPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmJhckN0eC5pc051bGxWYWx1ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5iYXJDdHguaXNOdWxsVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy5zdHJva2Uuc2hvdykge1xuICAgICAgICAgIGlmICghdGhpcy5iYXJDdHguaXNOdWxsVmFsdWUpIHtcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoID0gQXJyYXkuaXNBcnJheSh0aGlzLmJhckN0eC5zdHJva2VXaWR0aCkgPyB0aGlzLmJhckN0eC5zdHJva2VXaWR0aFtyZWFsSW5kZXhdIDogdGhpcy5iYXJDdHguc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cm9rZVdpZHRoO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJiYXJCYWNrZ3JvdW5kXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYmFyQmFja2dyb3VuZChfcmVmKSB7XG4gICAgICAgIHZhciBiYyA9IF9yZWYuYmMsXG4gICAgICAgICAgICBpID0gX3JlZi5pLFxuICAgICAgICAgICAgeDEgPSBfcmVmLngxLFxuICAgICAgICAgICAgeDIgPSBfcmVmLngyLFxuICAgICAgICAgICAgeTEgPSBfcmVmLnkxLFxuICAgICAgICAgICAgeTIgPSBfcmVmLnkyLFxuICAgICAgICAgICAgZWxTZXJpZXMgPSBfcmVmLmVsU2VyaWVzO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuYmFyQ3R4LmN0eCk7XG4gICAgICAgIHZhciBzciA9IG5ldyBTZXJpZXModGhpcy5iYXJDdHguY3R4KTtcbiAgICAgICAgdmFyIGFjdGl2ZVNlcmllc0luZGV4ID0gc3IuZ2V0QWN0aXZlQ29uZmlnU2VyaWVzSW5kZXgoKTtcblxuICAgICAgICBpZiAodGhpcy5iYXJDdHguYmFyT3B0aW9ucy5jb2xvcnMuYmFja2dyb3VuZEJhckNvbG9ycy5sZW5ndGggPiAwICYmIGFjdGl2ZVNlcmllc0luZGV4ID09PSBpKSB7XG4gICAgICAgICAgaWYgKGJjID49IHRoaXMuYmFyQ3R4LmJhck9wdGlvbnMuY29sb3JzLmJhY2tncm91bmRCYXJDb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBiYyA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGJjb2xvciA9IHRoaXMuYmFyQ3R4LmJhck9wdGlvbnMuY29sb3JzLmJhY2tncm91bmRCYXJDb2xvcnNbYmNdO1xuICAgICAgICAgIHZhciByZWN0ID0gZ3JhcGhpY3MuZHJhd1JlY3QodHlwZW9mIHgxICE9PSAndW5kZWZpbmVkJyA/IHgxIDogMCwgdHlwZW9mIHkxICE9PSAndW5kZWZpbmVkJyA/IHkxIDogMCwgdHlwZW9mIHgyICE9PSAndW5kZWZpbmVkJyA/IHgyIDogdy5nbG9iYWxzLmdyaWRXaWR0aCwgdHlwZW9mIHkyICE9PSAndW5kZWZpbmVkJyA/IHkyIDogdy5nbG9iYWxzLmdyaWRIZWlnaHQsIHRoaXMuYmFyQ3R4LmJhck9wdGlvbnMuY29sb3JzLmJhY2tncm91bmRCYXJSYWRpdXMsIGJjb2xvciwgdGhpcy5iYXJDdHguYmFyT3B0aW9ucy5jb2xvcnMuYmFja2dyb3VuZEJhck9wYWNpdHkpO1xuICAgICAgICAgIGVsU2VyaWVzLmFkZChyZWN0KTtcbiAgICAgICAgICByZWN0Lm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1iYWNrZ3JvdW5kQmFyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0Q29sdW1uUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb2x1bW5QYXRocyhfcmVmMikge1xuICAgICAgICB2YXIgYmFyV2lkdGggPSBfcmVmMi5iYXJXaWR0aCxcbiAgICAgICAgICAgIGJhclhQb3NpdGlvbiA9IF9yZWYyLmJhclhQb3NpdGlvbixcbiAgICAgICAgICAgIHlSYXRpbyA9IF9yZWYyLnlSYXRpbyxcbiAgICAgICAgICAgIHkxID0gX3JlZjIueTEsXG4gICAgICAgICAgICB5MiA9IF9yZWYyLnkyLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBfcmVmMi5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgIHNlcmllcyA9IF9yZWYyLnNlcmllcyxcbiAgICAgICAgICAgIGkgPSBfcmVmMi5pLFxuICAgICAgICAgICAgaiA9IF9yZWYyLmosXG4gICAgICAgICAgICB3ID0gX3JlZjIudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuYmFyQ3R4LmN0eCk7XG4gICAgICAgIHN0cm9rZVdpZHRoID0gQXJyYXkuaXNBcnJheShzdHJva2VXaWR0aCkgPyBzdHJva2VXaWR0aFtpXSA6IHN0cm9rZVdpZHRoO1xuICAgICAgICBpZiAoIXN0cm9rZVdpZHRoKSBzdHJva2VXaWR0aCA9IDA7XG4gICAgICAgIHZhciBzaGFwZU9wdHMgPSB7XG4gICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcbiAgICAgICAgICB5UmF0aW86IHlSYXRpbyxcbiAgICAgICAgICBiYXJYUG9zaXRpb246IGJhclhQb3NpdGlvbixcbiAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgeTI6IHkyXG4gICAgICAgIH07XG4gICAgICAgIHZhciBuZXdQYXRoID0gdGhpcy5nZXRSb3VuZGVkQmFycyh3LCBzaGFwZU9wdHMsIHNlcmllcywgaSwgaik7XG4gICAgICAgIHZhciB4MSA9IGJhclhQb3NpdGlvbjtcbiAgICAgICAgdmFyIHgyID0gYmFyWFBvc2l0aW9uICsgYmFyV2lkdGg7XG4gICAgICAgIHZhciBwYXRoVG8gPSBncmFwaGljcy5tb3ZlKHgxLCBuZXdQYXRoLnkxKTtcbiAgICAgICAgdmFyIHBhdGhGcm9tID0gZ3JhcGhpY3MubW92ZSh4MSwgbmV3UGF0aC55MSk7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBwYXRoRnJvbSA9IHRoaXMuYmFyQ3R4LmdldFByZXZpb3VzUGF0aChpLCBqLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXRoVG8gPSBwYXRoVG8gKyBncmFwaGljcy5saW5lKHgxLCBuZXdQYXRoLnkyKSArIG5ld1BhdGguZW5kaW5nUGF0aCArIGdyYXBoaWNzLmxpbmUoeDIgLSBzdHJva2VXaWR0aCwgbmV3UGF0aC55MikgKyBncmFwaGljcy5saW5lKHgyIC0gc3Ryb2tlV2lkdGgsIG5ld1BhdGgueTEpICsgbmV3UGF0aC5zdGFydGluZ1BhdGggKyAneic7XG4gICAgICAgIHBhdGhGcm9tID0gcGF0aEZyb20gKyBncmFwaGljcy5saW5lKHgxLCB5MSkgKyBncmFwaGljcy5saW5lKHgyIC0gc3Ryb2tlV2lkdGgsIHkxKSArIGdyYXBoaWNzLmxpbmUoeDIgLSBzdHJva2VXaWR0aCwgeTEpICsgZ3JhcGhpY3MubGluZSh4MiAtIHN0cm9rZVdpZHRoLCB5MSkgKyBncmFwaGljcy5saW5lKHgxLCB5MSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aFRvOiBwYXRoVG8sXG4gICAgICAgICAgcGF0aEZyb206IHBhdGhGcm9tXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEJhcnBhdGhzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QmFycGF0aHMoX3JlZjMpIHtcbiAgICAgICAgdmFyIGJhcllQb3NpdGlvbiA9IF9yZWYzLmJhcllQb3NpdGlvbixcbiAgICAgICAgICAgIGJhckhlaWdodCA9IF9yZWYzLmJhckhlaWdodCxcbiAgICAgICAgICAgIHgxID0gX3JlZjMueDEsXG4gICAgICAgICAgICB4MiA9IF9yZWYzLngyLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBfcmVmMy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgIHNlcmllcyA9IF9yZWYzLnNlcmllcyxcbiAgICAgICAgICAgIGkgPSBfcmVmMy5pLFxuICAgICAgICAgICAgaiA9IF9yZWYzLmosXG4gICAgICAgICAgICB3ID0gX3JlZjMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuYmFyQ3R4LmN0eCk7XG4gICAgICAgIHN0cm9rZVdpZHRoID0gQXJyYXkuaXNBcnJheShzdHJva2VXaWR0aCkgPyBzdHJva2VXaWR0aFtpXSA6IHN0cm9rZVdpZHRoO1xuICAgICAgICBpZiAoIXN0cm9rZVdpZHRoKSBzdHJva2VXaWR0aCA9IDA7XG4gICAgICAgIHZhciBzaGFwZU9wdHMgPSB7XG4gICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgIGJhcllQb3NpdGlvbjogYmFyWVBvc2l0aW9uLFxuICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICB4MTogeDFcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG5ld1BhdGggPSB0aGlzLmdldFJvdW5kZWRCYXJzKHcsIHNoYXBlT3B0cywgc2VyaWVzLCBpLCBqKTtcbiAgICAgICAgdmFyIHBhdGhUbyA9IGdyYXBoaWNzLm1vdmUobmV3UGF0aC54MSwgYmFyWVBvc2l0aW9uKTtcbiAgICAgICAgdmFyIHBhdGhGcm9tID0gZ3JhcGhpY3MubW92ZShuZXdQYXRoLngxLCBiYXJZUG9zaXRpb24pO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMucHJldmlvdXNQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcGF0aEZyb20gPSB0aGlzLmJhckN0eC5nZXRQcmV2aW91c1BhdGgoaSwgaiwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHkxID0gYmFyWVBvc2l0aW9uO1xuICAgICAgICB2YXIgeTIgPSBiYXJZUG9zaXRpb24gKyBiYXJIZWlnaHQ7XG4gICAgICAgIHBhdGhUbyA9IHBhdGhUbyArIGdyYXBoaWNzLmxpbmUobmV3UGF0aC54MiwgeTEpICsgbmV3UGF0aC5lbmRpbmdQYXRoICsgZ3JhcGhpY3MubGluZShuZXdQYXRoLngyLCB5MiAtIHN0cm9rZVdpZHRoKSArIGdyYXBoaWNzLmxpbmUobmV3UGF0aC54MSwgeTIgLSBzdHJva2VXaWR0aCkgKyBuZXdQYXRoLnN0YXJ0aW5nUGF0aCArICd6JztcbiAgICAgICAgcGF0aEZyb20gPSBwYXRoRnJvbSArIGdyYXBoaWNzLmxpbmUoeDEsIHkxKSArIGdyYXBoaWNzLmxpbmUoeDEsIHkyIC0gc3Ryb2tlV2lkdGgpICsgZ3JhcGhpY3MubGluZSh4MSwgeTIgLSBzdHJva2VXaWR0aCkgKyBncmFwaGljcy5saW5lKHgxLCB5MiAtIHN0cm9rZVdpZHRoKSArIGdyYXBoaWNzLmxpbmUoeDEsIHkxKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoVG86IHBhdGhUbyxcbiAgICAgICAgICBwYXRoRnJvbTogcGF0aEZyb21cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8qKiBnZXRSb3VuZGVkQmFycyBkcmF3cyBib3JkZXIgcmFkaXVzIGZvciBiYXJzL2NvbHVtbnNcbiAgICAgICAqIEBtZW1iZXJvZiBCYXJcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB3IC0gY2hhcnQgY29udGV4dFxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBjb25zaXN0cyBzZXZlcmFsIHByb3BlcnRpZXMgbGlrZSBiYXJIZWlnaHQvYmFyV2lkdGhcbiAgICAgICAqIEBwYXJhbSB7YXJyYXl9IHNlcmllcyAtIGdsb2JhbCBwcmltYXJ5IHNlcmllc1xuICAgICAgICogQHBhcmFtIHtpbnR9IGkgLSBjdXJyZW50IGl0ZXJhdGluZyBzZXJpZXMncyBpbmRleFxuICAgICAgICogQHBhcmFtIHtpbnR9IGogLSBzZXJpZXMncyBqIG9mIGlcbiAgICAgICAqIEByZXR1cm4ge29iamVjdH0gZW5kaW5nUGF0aCAtIGVuZGluZyBzaGFwZSBwYXRoIHN0cmluZ1xuICAgICAgICogICAgICAgICBzdGFydGluZ1BhdGggLSBzdGFydGluZyBzaGFwZSBwYXRoIHN0cmluZ1xuICAgICAgICogICAgICAgICBuZXdZL25ld1ggLSB3aGljaCBpcyBjYWxjdWxhdGVkIGZyb20gZXhpc3RpbmcgeC95IGJhc2VkIG9uIHJvdW5kZWQgYm9yZGVyXG4gICAgICAgKiovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0Um91bmRlZEJhcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSb3VuZGVkQmFycyh3LCBvcHRzLCBzZXJpZXMsIGksIGopIHtcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuYmFyQ3R4LmN0eCk7XG4gICAgICAgIHZhciBzdHJva2VXaWR0aCA9IEFycmF5LmlzQXJyYXkob3B0cy5zdHJva2VXaWR0aCkgPyBvcHRzLnN0cm9rZVdpZHRoW2ldIDogb3B0cy5zdHJva2VXaWR0aDtcbiAgICAgICAgaWYgKCFzdHJva2VXaWR0aCkgc3Ryb2tlV2lkdGggPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLmJhckN0eC5pc0hvcml6b250YWwpIHtcbiAgICAgICAgICB2YXIgZW5kaW5nU2hhcGUgPSBudWxsO1xuICAgICAgICAgIHZhciBzdGFydGluZ1NoYXBlID0gJyc7XG4gICAgICAgICAgdmFyIHgyID0gb3B0cy54MjtcbiAgICAgICAgICB2YXIgeDEgPSBvcHRzLngxO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzZXJpZXNbaV1bal0gIT09ICd1bmRlZmluZWQnIHx8IHNlcmllc1tpXVtqXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGludmVyc2UgPSBzZXJpZXNbaV1bal0gPCAwO1xuICAgICAgICAgICAgdmFyIGVYID0gb3B0cy5iYXJIZWlnaHQgLyAyIC0gc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICBpZiAoaW52ZXJzZSkgZVggPSAtb3B0cy5iYXJIZWlnaHQgLyAyIC0gc3Ryb2tlV2lkdGg7XG5cbiAgICAgICAgICAgIGlmIChlWCA+IE1hdGguYWJzKHgyIC0geDEpKSB7XG4gICAgICAgICAgICAgIGVYID0gTWF0aC5hYnMoeDIgLSB4MSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmJhckN0eC5iYXJPcHRpb25zLmVuZGluZ1NoYXBlID09PSAncm91bmRlZCcpIHtcbiAgICAgICAgICAgICAgeDIgPSBvcHRzLngyIC0gZVggLyAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5iYXJDdHguYmFyT3B0aW9ucy5zdGFydGluZ1NoYXBlID09PSAncm91bmRlZCcpIHtcbiAgICAgICAgICAgICAgeDEgPSBvcHRzLngxICsgZVggLyAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuYmFyQ3R4LmJhck9wdGlvbnMuZW5kaW5nU2hhcGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAnZmxhdCc6XG4gICAgICAgICAgICAgICAgZW5kaW5nU2hhcGUgPSBncmFwaGljcy5saW5lKHgyLCBvcHRzLmJhcllQb3NpdGlvbiArIG9wdHMuYmFySGVpZ2h0IC0gc3Ryb2tlV2lkdGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgJ3JvdW5kZWQnOlxuICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlID0gZ3JhcGhpY3MucXVhZHJhdGljQ3VydmUoeDIgKyBlWCwgb3B0cy5iYXJZUG9zaXRpb24gKyAob3B0cy5iYXJIZWlnaHQgLSBzdHJva2VXaWR0aCkgLyAyLCB4Miwgb3B0cy5iYXJZUG9zaXRpb24gKyBvcHRzLmJhckhlaWdodCAtIHN0cm9rZVdpZHRoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmJhckN0eC5iYXJPcHRpb25zLnN0YXJ0aW5nU2hhcGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAnZmxhdCc6XG4gICAgICAgICAgICAgICAgc3RhcnRpbmdTaGFwZSA9IGdyYXBoaWNzLmxpbmUoeDEsIG9wdHMuYmFyWVBvc2l0aW9uICsgb3B0cy5iYXJIZWlnaHQgLSBzdHJva2VXaWR0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAncm91bmRlZCc6XG4gICAgICAgICAgICAgICAgc3RhcnRpbmdTaGFwZSA9IGdyYXBoaWNzLnF1YWRyYXRpY0N1cnZlKHgxIC0gZVgsIG9wdHMuYmFyWVBvc2l0aW9uICsgb3B0cy5iYXJIZWlnaHQgLyAyLCB4MSwgb3B0cy5iYXJZUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbmRpbmdQYXRoOiBlbmRpbmdTaGFwZSxcbiAgICAgICAgICAgIHN0YXJ0aW5nUGF0aDogc3RhcnRpbmdTaGFwZSxcbiAgICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICAgIHgxOiB4MVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9lbmRpbmdTaGFwZSA9IG51bGw7XG4gICAgICAgICAgdmFyIF9zdGFydGluZ1NoYXBlID0gJyc7XG4gICAgICAgICAgdmFyIHkyID0gb3B0cy55MjtcbiAgICAgICAgICB2YXIgeTEgPSBvcHRzLnkxO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzZXJpZXNbaV1bal0gIT09ICd1bmRlZmluZWQnIHx8IHNlcmllc1tpXVtqXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIF9pbnZlcnNlID0gc2VyaWVzW2ldW2pdIDwgMDtcblxuICAgICAgICAgICAgdmFyIGVZID0gb3B0cy5iYXJXaWR0aCAvIDIgLSBzdHJva2VXaWR0aDtcbiAgICAgICAgICAgIGlmIChfaW52ZXJzZSkgZVkgPSAtb3B0cy5iYXJXaWR0aCAvIDIgLSBzdHJva2VXaWR0aDtcblxuICAgICAgICAgICAgaWYgKGVZID4gTWF0aC5hYnMoeTIgLSB5MSkpIHtcbiAgICAgICAgICAgICAgZVkgPSBNYXRoLmFicyh5MiAtIHkxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuYmFyQ3R4LmJhck9wdGlvbnMuZW5kaW5nU2hhcGUgPT09ICdyb3VuZGVkJykge1xuICAgICAgICAgICAgICAvLyB0aGUgc2hhcGUgZXhjZWVkcyB0aGUgY2hhcnQgaGVpZ2h0LCBoZW5jZSByZWR1Y2UgeVxuICAgICAgICAgICAgICB5MiA9IHkyICsgZVkgLyAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5iYXJDdHguYmFyT3B0aW9ucy5zdGFydGluZ1NoYXBlID09PSAncm91bmRlZCcpIHtcbiAgICAgICAgICAgICAgeTEgPSB5MSAtIGVZIC8gMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmJhckN0eC5iYXJPcHRpb25zLmVuZGluZ1NoYXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2ZsYXQnOlxuICAgICAgICAgICAgICAgIF9lbmRpbmdTaGFwZSA9IGdyYXBoaWNzLmxpbmUob3B0cy5iYXJYUG9zaXRpb24gKyBvcHRzLmJhcldpZHRoIC0gc3Ryb2tlV2lkdGgsIHkyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICdyb3VuZGVkJzpcbiAgICAgICAgICAgICAgICBfZW5kaW5nU2hhcGUgPSBncmFwaGljcy5xdWFkcmF0aWNDdXJ2ZShvcHRzLmJhclhQb3NpdGlvbiArIChvcHRzLmJhcldpZHRoIC0gc3Ryb2tlV2lkdGgpIC8gMiwgeTIgLSBlWSwgb3B0cy5iYXJYUG9zaXRpb24gKyBvcHRzLmJhcldpZHRoIC0gc3Ryb2tlV2lkdGgsIHkyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmJhckN0eC5iYXJPcHRpb25zLnN0YXJ0aW5nU2hhcGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAnZmxhdCc6XG4gICAgICAgICAgICAgICAgX3N0YXJ0aW5nU2hhcGUgPSBncmFwaGljcy5saW5lKG9wdHMuYmFyWFBvc2l0aW9uICsgb3B0cy5iYXJXaWR0aCAtIHN0cm9rZVdpZHRoLCB5MSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAncm91bmRlZCc6XG4gICAgICAgICAgICAgICAgX3N0YXJ0aW5nU2hhcGUgPSBncmFwaGljcy5xdWFkcmF0aWNDdXJ2ZShvcHRzLmJhclhQb3NpdGlvbiArIChvcHRzLmJhcldpZHRoIC0gc3Ryb2tlV2lkdGgpIC8gMiwgeTEgKyBlWSwgb3B0cy5iYXJYUG9zaXRpb24sIHkxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW5kaW5nUGF0aDogX2VuZGluZ1NoYXBlLFxuICAgICAgICAgICAgc3RhcnRpbmdQYXRoOiBfc3RhcnRpbmdTaGFwZSxcbiAgICAgICAgICAgIHkyOiB5MixcbiAgICAgICAgICAgIHkxOiB5MVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSGVscGVycztcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIEJhciBDbGFzcyByZXNwb25zaWJsZSBmb3IgZHJhd2luZyBib3RoIENvbHVtbnMgYW5kIEJhcnMuXG4gICAqXG4gICAqIEBtb2R1bGUgQmFyXG4gICAqKi9cblxuICB2YXIgQmFyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXIoY3R4LCB4eVJhdGlvcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhcik7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgIHRoaXMuYmFyT3B0aW9ucyA9IHcuY29uZmlnLnBsb3RPcHRpb25zLmJhcjtcbiAgICAgIHRoaXMuaXNIb3Jpem9udGFsID0gdGhpcy5iYXJPcHRpb25zLmhvcml6b250YWw7XG4gICAgICB0aGlzLnN0cm9rZVdpZHRoID0gdy5jb25maWcuc3Ryb2tlLndpZHRoO1xuICAgICAgdGhpcy5pc051bGxWYWx1ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5pc1RpbWVsaW5lQmFyID0gdy5jb25maWcueGF4aXMudHlwZSA9PT0gJ2RhdGV0aW1lJyAmJiB3Lmdsb2JhbHMuc2VyaWVzUmFuZ2VCYXJUaW1lbGluZS5sZW5ndGg7XG4gICAgICB0aGlzLnh5UmF0aW9zID0geHlSYXRpb3M7XG5cbiAgICAgIGlmICh0aGlzLnh5UmF0aW9zICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMueFJhdGlvID0geHlSYXRpb3MueFJhdGlvO1xuICAgICAgICB0aGlzLmluaXRpYWxYUmF0aW8gPSB4eVJhdGlvcy5pbml0aWFsWFJhdGlvO1xuICAgICAgICB0aGlzLnlSYXRpbyA9IHh5UmF0aW9zLnlSYXRpbztcbiAgICAgICAgdGhpcy5pbnZlcnRlZFhSYXRpbyA9IHh5UmF0aW9zLmludmVydGVkWFJhdGlvO1xuICAgICAgICB0aGlzLmludmVydGVkWVJhdGlvID0geHlSYXRpb3MuaW52ZXJ0ZWRZUmF0aW87XG4gICAgICAgIHRoaXMuYmFzZUxpbmVZID0geHlSYXRpb3MuYmFzZUxpbmVZO1xuICAgICAgICB0aGlzLmJhc2VMaW5lSW52ZXJ0ZWRZID0geHlSYXRpb3MuYmFzZUxpbmVJbnZlcnRlZFk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMueWF4aXNJbmRleCA9IDA7XG4gICAgICB0aGlzLnNlcmllc0xlbiA9IDA7XG4gICAgICB0aGlzLmJhckhlbHBlcnMgPSBuZXcgSGVscGVycyQzKHRoaXMpO1xuICAgIH1cbiAgICAvKiogcHJpbWFyeSBkcmF3IG1ldGhvZCB3aGljaCBpcyBjYWxsZWQgb24gYmFyIG9iamVjdFxuICAgICAqIEBtZW1iZXJvZiBCYXJcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBzZXJpZXMgLSB1c2VyIHN1cHBsaWVkIHNlcmllcyB2YWx1ZXNcbiAgICAgKiBAcGFyYW0ge2ludH0gc2VyaWVzSW5kZXggLSB0aGUgaW5kZXggYnkgd2hpY2ggc2VyaWVzIHdpbGwgYmUgZHJhd24gb24gdGhlIHN2Z1xuICAgICAqIEByZXR1cm4ge25vZGV9IGVsZW1lbnQgd2hpY2ggaXMgc3VwcGxpZWQgdG8gcGFyZW50IGNoYXJ0IGRyYXcgbWV0aG9kIGZvciBhcHBlbmRpbmdcbiAgICAgKiovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhCYXIsIFt7XG4gICAgICBrZXk6IFwiZHJhd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoc2VyaWVzLCBzZXJpZXNJbmRleCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGNvcmVVdGlscyA9IG5ldyBDb3JlVXRpbHModGhpcy5jdHgsIHcpO1xuICAgICAgICBzZXJpZXMgPSBjb3JlVXRpbHMuZ2V0TG9nU2VyaWVzKHNlcmllcyk7XG4gICAgICAgIHRoaXMuc2VyaWVzID0gc2VyaWVzO1xuICAgICAgICB0aGlzLnlSYXRpbyA9IGNvcmVVdGlscy5nZXRMb2dZUmF0aW9zKHRoaXMueVJhdGlvKTtcbiAgICAgICAgdGhpcy5iYXJIZWxwZXJzLmluaXRWYXJpYWJsZXMoc2VyaWVzKTtcbiAgICAgICAgdmFyIHJldCA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtYmFyLXNlcmllcyBhcGV4Y2hhcnRzLXBsb3Qtc2VyaWVzJ1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAody5jb25maWcuZGF0YUxhYmVscy5lbmFibGVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudG90YWxJdGVtcyA+IHRoaXMuYmFyT3B0aW9ucy5kYXRhTGFiZWxzLm1heEl0ZW1zKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IERhdGFMYWJlbHMgYXJlIGVuYWJsZWQgYnV0IHRoZXJlIGFyZSB0b28gbWFueSB0byBkaXNwbGF5LiBUaGlzIG1heSBjYXVzZSBwZXJmb3JtYW5jZSBpc3N1ZSB3aGVuIHJlbmRlcmluZy4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgYmMgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrLCBiYysrKSB7XG4gICAgICAgICAgdmFyIHggPSB2b2lkIDAsXG4gICAgICAgICAgICAgIHkgPSB2b2lkIDAsXG4gICAgICAgICAgICAgIHhEaXZpc2lvbiA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgLy8geERpdmlzaW9uIGlzIHRoZSBHUklEV0lEVEggZGl2aWRlZCBieSBudW1iZXIgb2YgZGF0YXBvaW50cyAoY29sdW1ucylcbiAgICAgICAgICB5RGl2aXNpb24gPSB2b2lkIDAsXG4gICAgICAgICAgICAgIC8vIHlEaXZpc2lvbiBpcyB0aGUgR1JJREhFSUdIVCBkaXZpZGVkIGJ5IG51bWJlciBvZiBkYXRhcG9pbnRzIChiYXJzKVxuICAgICAgICAgIHplcm9IID0gdm9pZCAwLFxuICAgICAgICAgICAgICAvLyB6ZXJvSCBpcyB0aGUgYmFzZWxpbmUgd2hlcmUgMCBtZWV0cyB5IGF4aXNcbiAgICAgICAgICB6ZXJvVyA9IHZvaWQgMDsgLy8gemVyb1cgaXMgdGhlIGJhc2VsaW5lIHdoZXJlIDAgbWVldHMgeCBheGlzXG5cbiAgICAgICAgICB2YXIgeUFycmogPSBbXTsgLy8gaG9sZCB5IHZhbHVlcyBvZiBjdXJyZW50IGl0ZXJhdGluZyBzZXJpZXNcblxuICAgICAgICAgIHZhciB4QXJyaiA9IFtdOyAvLyBob2xkIHggdmFsdWVzIG9mIGN1cnJlbnQgaXRlcmF0aW5nIHNlcmllc1xuXG4gICAgICAgICAgdmFyIHJlYWxJbmRleCA9IHcuZ2xvYmFscy5jb21ib0NoYXJ0cyA/IHNlcmllc0luZGV4W2ldIDogaTsgLy8gZWwgdG8gd2hpY2ggc2VyaWVzIHdpbGwgYmUgZHJhd25cblxuICAgICAgICAgIHZhciBlbFNlcmllcyA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiBcImFwZXhjaGFydHMtc2VyaWVzXCIsXG4gICAgICAgICAgICByZWw6IGkgKyAxLFxuICAgICAgICAgICAgc2VyaWVzTmFtZTogVXRpbHMuZXNjYXBlU3RyaW5nKHcuZ2xvYmFscy5zZXJpZXNOYW1lc1tyZWFsSW5kZXhdKSxcbiAgICAgICAgICAgICdkYXRhOnJlYWxJbmRleCc6IHJlYWxJbmRleFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuY3R4LnNlcmllcy5hZGRDb2xsYXBzZWRDbGFzc1RvU2VyaWVzKGVsU2VyaWVzLCByZWFsSW5kZXgpO1xuXG4gICAgICAgICAgaWYgKHNlcmllc1tpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnZpc2libGVJID0gdGhpcy52aXNpYmxlSSArIDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGJhckhlaWdodCA9IDA7XG4gICAgICAgICAgdmFyIGJhcldpZHRoID0gMDtcblxuICAgICAgICAgIGlmICh0aGlzLnlSYXRpby5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLnlheGlzSW5kZXggPSByZWFsSW5kZXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5pc1JldmVyc2VkID0gdy5jb25maWcueWF4aXNbdGhpcy55YXhpc0luZGV4XSAmJiB3LmNvbmZpZy55YXhpc1t0aGlzLnlheGlzSW5kZXhdLnJldmVyc2VkO1xuICAgICAgICAgIHZhciBpbml0UG9zaXRpb25zID0gdGhpcy5iYXJIZWxwZXJzLmluaXRpYWxQb3NpdGlvbnMoKTtcbiAgICAgICAgICB5ID0gaW5pdFBvc2l0aW9ucy55O1xuICAgICAgICAgIGJhckhlaWdodCA9IGluaXRQb3NpdGlvbnMuYmFySGVpZ2h0O1xuICAgICAgICAgIHlEaXZpc2lvbiA9IGluaXRQb3NpdGlvbnMueURpdmlzaW9uO1xuICAgICAgICAgIHplcm9XID0gaW5pdFBvc2l0aW9ucy56ZXJvVztcbiAgICAgICAgICB4ID0gaW5pdFBvc2l0aW9ucy54O1xuICAgICAgICAgIGJhcldpZHRoID0gaW5pdFBvc2l0aW9ucy5iYXJXaWR0aDtcbiAgICAgICAgICB4RGl2aXNpb24gPSBpbml0UG9zaXRpb25zLnhEaXZpc2lvbjtcbiAgICAgICAgICB6ZXJvSCA9IGluaXRQb3NpdGlvbnMuemVyb0g7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgeEFycmoucHVzaCh4ICsgYmFyV2lkdGggLyAyKTtcbiAgICAgICAgICB9IC8vIGVsZGF0YWxhYmVsc1xuXG5cbiAgICAgICAgICB2YXIgZWxEYXRhTGFiZWxzV3JhcCA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1kYXRhbGFiZWxzJyxcbiAgICAgICAgICAgICdkYXRhOnJlYWxJbmRleCc6IHJlYWxJbmRleFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB3Lmdsb2JhbHMuZGF0YVBvaW50czsgaisrKSB7XG4gICAgICAgICAgICB2YXIgc3Ryb2tlV2lkdGggPSB0aGlzLmJhckhlbHBlcnMuZ2V0U3Ryb2tlV2lkdGgoaSwgaiwgcmVhbEluZGV4KTtcbiAgICAgICAgICAgIHZhciBwYXRocyA9IG51bGw7XG4gICAgICAgICAgICB2YXIgcGF0aHNQYXJhbXMgPSB7XG4gICAgICAgICAgICAgIGluZGV4ZXM6IHtcbiAgICAgICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgICAgICAgYmM6IGJjXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcbiAgICAgICAgICAgICAgZWxTZXJpZXM6IGVsU2VyaWVzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgcGF0aHMgPSB0aGlzLmRyYXdCYXJQYXRocyhfb2JqZWN0U3ByZWFkMih7fSwgcGF0aHNQYXJhbXMsIHtcbiAgICAgICAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodCxcbiAgICAgICAgICAgICAgICB6ZXJvVzogemVyb1csXG4gICAgICAgICAgICAgICAgeURpdmlzaW9uOiB5RGl2aXNpb25cbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBiYXJXaWR0aCA9IHRoaXMuc2VyaWVzW2ldW2pdIC8gdGhpcy5pbnZlcnRlZFlSYXRpbztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhdGhzID0gdGhpcy5kcmF3Q29sdW1uUGF0aHMoX29iamVjdFNwcmVhZDIoe30sIHBhdGhzUGFyYW1zLCB7XG4gICAgICAgICAgICAgICAgeERpdmlzaW9uOiB4RGl2aXNpb24sXG4gICAgICAgICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgICAgICAgIHplcm9IOiB6ZXJvSFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIGJhckhlaWdodCA9IHRoaXMuc2VyaWVzW2ldW2pdIC8gdGhpcy55UmF0aW9bdGhpcy55YXhpc0luZGV4XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeSA9IHBhdGhzLnk7XG4gICAgICAgICAgICB4ID0gcGF0aHMueDsgLy8gcHVzaCBjdXJyZW50IFhcblxuICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgIHhBcnJqLnB1c2goeCArIGJhcldpZHRoIC8gMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHlBcnJqLnB1c2goeSk7XG4gICAgICAgICAgICB2YXIgcGF0aEZpbGwgPSB0aGlzLmJhckhlbHBlcnMuZ2V0UGF0aEZpbGxDb2xvcihzZXJpZXMsIGksIGosIHJlYWxJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclNlcmllcyh7XG4gICAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgICAgICBwYXRoRmlsbDogcGF0aEZpbGwsXG4gICAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICAgIHBhdGhGcm9tOiBwYXRocy5wYXRoRnJvbSxcbiAgICAgICAgICAgICAgcGF0aFRvOiBwYXRocy5wYXRoVG8sXG4gICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcbiAgICAgICAgICAgICAgZWxTZXJpZXM6IGVsU2VyaWVzLFxuICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICBzZXJpZXM6IHNlcmllcyxcbiAgICAgICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgICAgIGJhcldpZHRoOiBiYXJXaWR0aCxcbiAgICAgICAgICAgICAgZWxEYXRhTGFiZWxzV3JhcDogZWxEYXRhTGFiZWxzV3JhcCxcbiAgICAgICAgICAgICAgdmlzaWJsZVNlcmllczogdGhpcy52aXNpYmxlSSxcbiAgICAgICAgICAgICAgdHlwZTogJ2JhcidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gLy8gcHVzaCBhbGwgeCB2YWwgYXJyYXlzIGludG8gbWFpbiB4QXJyXG5cblxuICAgICAgICAgIHcuZ2xvYmFscy5zZXJpZXNYdmFsdWVzW3JlYWxJbmRleF0gPSB4QXJyajtcbiAgICAgICAgICB3Lmdsb2JhbHMuc2VyaWVzWXZhbHVlc1tyZWFsSW5kZXhdID0geUFycmo7XG4gICAgICAgICAgcmV0LmFkZChlbFNlcmllcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW5kZXJTZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJTZXJpZXMoX3JlZikge1xuICAgICAgICB2YXIgcmVhbEluZGV4ID0gX3JlZi5yZWFsSW5kZXgsXG4gICAgICAgICAgICBwYXRoRmlsbCA9IF9yZWYucGF0aEZpbGwsXG4gICAgICAgICAgICBsaW5lRmlsbCA9IF9yZWYubGluZUZpbGwsXG4gICAgICAgICAgICBqID0gX3JlZi5qLFxuICAgICAgICAgICAgaSA9IF9yZWYuaSxcbiAgICAgICAgICAgIHBhdGhGcm9tID0gX3JlZi5wYXRoRnJvbSxcbiAgICAgICAgICAgIHBhdGhUbyA9IF9yZWYucGF0aFRvLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBfcmVmLnN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgZWxTZXJpZXMgPSBfcmVmLmVsU2VyaWVzLFxuICAgICAgICAgICAgeCA9IF9yZWYueCxcbiAgICAgICAgICAgIHkgPSBfcmVmLnksXG4gICAgICAgICAgICB5MSA9IF9yZWYueTEsXG4gICAgICAgICAgICB5MiA9IF9yZWYueTIsXG4gICAgICAgICAgICBzZXJpZXMgPSBfcmVmLnNlcmllcyxcbiAgICAgICAgICAgIGJhckhlaWdodCA9IF9yZWYuYmFySGVpZ2h0LFxuICAgICAgICAgICAgYmFyV2lkdGggPSBfcmVmLmJhcldpZHRoLFxuICAgICAgICAgICAgYmFyWVBvc2l0aW9uID0gX3JlZi5iYXJZUG9zaXRpb24sXG4gICAgICAgICAgICBlbERhdGFMYWJlbHNXcmFwID0gX3JlZi5lbERhdGFMYWJlbHNXcmFwLFxuICAgICAgICAgICAgdmlzaWJsZVNlcmllcyA9IF9yZWYudmlzaWJsZVNlcmllcyxcbiAgICAgICAgICAgIHR5cGUgPSBfcmVmLnR5cGU7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuXG4gICAgICAgIGlmICghbGluZUZpbGwpIHtcbiAgICAgICAgICAvKiBmaXggYXBleGNoYXJ0cyMzNDEgKi9cbiAgICAgICAgICBsaW5lRmlsbCA9IHRoaXMuYmFyT3B0aW9ucy5kaXN0cmlidXRlZCA/IHcuZ2xvYmFscy5zdHJva2UuY29sb3JzW2pdIDogdy5nbG9iYWxzLnN0cm9rZS5jb2xvcnNbcmVhbEluZGV4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXSAmJiB3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXS5zdHJva2VDb2xvcikge1xuICAgICAgICAgIGxpbmVGaWxsID0gdy5jb25maWcuc2VyaWVzW2ldLmRhdGFbal0uc3Ryb2tlQ29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc051bGxWYWx1ZSkge1xuICAgICAgICAgIHBhdGhGaWxsID0gJ25vbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlbGF5ID0gaiAvIHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuYW5pbWF0ZUdyYWR1YWxseS5kZWxheSAqICh3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLnNwZWVkIC8gdy5nbG9iYWxzLmRhdGFQb2ludHMpIC8gMi40O1xuICAgICAgICB2YXIgcmVuZGVyZWRQYXRoID0gZ3JhcGhpY3MucmVuZGVyUGF0aHMoe1xuICAgICAgICAgIGk6IGksXG4gICAgICAgICAgajogaixcbiAgICAgICAgICByZWFsSW5kZXg6IHJlYWxJbmRleCxcbiAgICAgICAgICBwYXRoRnJvbTogcGF0aEZyb20sXG4gICAgICAgICAgcGF0aFRvOiBwYXRoVG8sXG4gICAgICAgICAgc3Ryb2tlOiBsaW5lRmlsbCxcbiAgICAgICAgICBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgc3Ryb2tlTGluZUNhcDogdy5jb25maWcuc3Ryb2tlLmxpbmVDYXAsXG4gICAgICAgICAgZmlsbDogcGF0aEZpbGwsXG4gICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGRlbGF5LFxuICAgICAgICAgIGluaXRpYWxTcGVlZDogdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5zcGVlZCxcbiAgICAgICAgICBkYXRhQ2hhbmdlU3BlZWQ6IHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5zcGVlZCxcbiAgICAgICAgICBjbGFzc05hbWU6IFwiYXBleGNoYXJ0cy1cIi5jb25jYXQodHlwZSwgXCItYXJlYVwiKVxuICAgICAgICB9KTtcbiAgICAgICAgcmVuZGVyZWRQYXRoLmF0dHIoJ2NsaXAtcGF0aCcsIFwidXJsKCNncmlkUmVjdE1hc2tcIi5jb25jYXQody5nbG9iYWxzLmN1aWQsIFwiKVwiKSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB5MSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHkyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJlbmRlcmVkUGF0aC5hdHRyKCdkYXRhLXJhbmdlLXkxJywgeTEpO1xuICAgICAgICAgIHJlbmRlcmVkUGF0aC5hdHRyKCdkYXRhLXJhbmdlLXkyJywgeTIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpbHRlcnMgPSBuZXcgRmlsdGVycyh0aGlzLmN0eCk7XG4gICAgICAgIGZpbHRlcnMuc2V0U2VsZWN0aW9uRmlsdGVyKHJlbmRlcmVkUGF0aCwgcmVhbEluZGV4LCBqKTtcbiAgICAgICAgZWxTZXJpZXMuYWRkKHJlbmRlcmVkUGF0aCk7XG4gICAgICAgIHZhciBiYXJEYXRhTGFiZWxzID0gbmV3IEJhckRhdGFMYWJlbHModGhpcyk7XG4gICAgICAgIHZhciBkYXRhTGFiZWxzID0gYmFyRGF0YUxhYmVscy5oYW5kbGVCYXJEYXRhTGFiZWxzKHtcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHksXG4gICAgICAgICAgeTE6IHkxLFxuICAgICAgICAgIHkyOiB5MixcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIGo6IGosXG4gICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgIGJhcllQb3NpdGlvbjogYmFyWVBvc2l0aW9uLFxuICAgICAgICAgIHJlbmRlcmVkUGF0aDogcmVuZGVyZWRQYXRoLFxuICAgICAgICAgIHZpc2libGVTZXJpZXM6IHZpc2libGVTZXJpZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRhdGFMYWJlbHMgIT09IG51bGwpIHtcbiAgICAgICAgICBlbERhdGFMYWJlbHNXcmFwLmFkZChkYXRhTGFiZWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsU2VyaWVzLmFkZChlbERhdGFMYWJlbHNXcmFwKTtcbiAgICAgICAgcmV0dXJuIGVsU2VyaWVzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3QmFyUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3QmFyUGF0aHMoX3JlZjIpIHtcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBfcmVmMi5pbmRleGVzLFxuICAgICAgICAgICAgYmFySGVpZ2h0ID0gX3JlZjIuYmFySGVpZ2h0LFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBfcmVmMi5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgIHplcm9XID0gX3JlZjIuemVyb1csXG4gICAgICAgICAgICB4ID0gX3JlZjIueCxcbiAgICAgICAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgICAgICAgeURpdmlzaW9uID0gX3JlZjIueURpdmlzaW9uLFxuICAgICAgICAgICAgZWxTZXJpZXMgPSBfcmVmMi5lbFNlcmllcztcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBpID0gaW5kZXhlcy5pO1xuICAgICAgICB2YXIgaiA9IGluZGV4ZXMuajtcbiAgICAgICAgdmFyIGJjID0gaW5kZXhlcy5iYztcblxuICAgICAgICBpZiAody5nbG9iYWxzLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICB5ID0gKHcuZ2xvYmFscy5zZXJpZXNYW2ldW2pdIC0gdy5nbG9iYWxzLm1pblgpIC8gdGhpcy5pbnZlcnRlZFhSYXRpbyAtIGJhckhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYXJZUG9zaXRpb24gPSB5ICsgYmFySGVpZ2h0ICogdGhpcy52aXNpYmxlSTtcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2VyaWVzW2ldW2pdID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLnNlcmllc1tpXVtqXSA9PT0gbnVsbCkge1xuICAgICAgICAgIHggPSB6ZXJvVztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4ID0gemVyb1cgKyB0aGlzLnNlcmllc1tpXVtqXSAvIHRoaXMuaW52ZXJ0ZWRZUmF0aW8gLSAodGhpcy5pc1JldmVyc2VkID8gdGhpcy5zZXJpZXNbaV1bal0gLyB0aGlzLmludmVydGVkWVJhdGlvIDogMCkgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhdGhzID0gdGhpcy5iYXJIZWxwZXJzLmdldEJhcnBhdGhzKHtcbiAgICAgICAgICBiYXJZUG9zaXRpb246IGJhcllQb3NpdGlvbixcbiAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodCxcbiAgICAgICAgICB4MTogemVyb1csXG4gICAgICAgICAgeDI6IHgsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXMsXG4gICAgICAgICAgaTogaSxcbiAgICAgICAgICBqOiBqLFxuICAgICAgICAgIHc6IHdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgIHkgPSB5ICsgeURpdmlzaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iYXJIZWxwZXJzLmJhckJhY2tncm91bmQoe1xuICAgICAgICAgIGJjOiBiYyxcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIHkxOiBiYXJZUG9zaXRpb24gLSBiYXJIZWlnaHQgKiB0aGlzLnZpc2libGVJLFxuICAgICAgICAgIHkyOiBiYXJIZWlnaHQgKiB0aGlzLnNlcmllc0xlbixcbiAgICAgICAgICBlbFNlcmllczogZWxTZXJpZXNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aFRvOiBwYXRocy5wYXRoVG8sXG4gICAgICAgICAgcGF0aEZyb206IHBhdGhzLnBhdGhGcm9tLFxuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeSxcbiAgICAgICAgICBiYXJZUG9zaXRpb246IGJhcllQb3NpdGlvblxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3Q29sdW1uUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Q29sdW1uUGF0aHMoX3JlZjMpIHtcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBfcmVmMy5pbmRleGVzLFxuICAgICAgICAgICAgeCA9IF9yZWYzLngsXG4gICAgICAgICAgICB5ID0gX3JlZjMueSxcbiAgICAgICAgICAgIHhEaXZpc2lvbiA9IF9yZWYzLnhEaXZpc2lvbixcbiAgICAgICAgICAgIGJhcldpZHRoID0gX3JlZjMuYmFyV2lkdGgsXG4gICAgICAgICAgICB6ZXJvSCA9IF9yZWYzLnplcm9ILFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBfcmVmMy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgIGVsU2VyaWVzID0gX3JlZjMuZWxTZXJpZXM7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgaSA9IGluZGV4ZXMuaTtcbiAgICAgICAgdmFyIGogPSBpbmRleGVzLmo7XG4gICAgICAgIHZhciBiYyA9IGluZGV4ZXMuYmM7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgdmFyIHN4SSA9IGk7XG5cbiAgICAgICAgICBpZiAoIXcuZ2xvYmFscy5zZXJpZXNYW2ldLmxlbmd0aCkge1xuICAgICAgICAgICAgc3hJID0gdy5nbG9iYWxzLm1heFZhbHNJbkFycmF5SW5kZXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeCA9ICh3Lmdsb2JhbHMuc2VyaWVzWFtzeEldW2pdIC0gdy5nbG9iYWxzLm1pblgpIC8gdGhpcy54UmF0aW8gLSBiYXJXaWR0aCAqIHRoaXMuc2VyaWVzTGVuIC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYXJYUG9zaXRpb24gPSB4ICsgYmFyV2lkdGggKiB0aGlzLnZpc2libGVJO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXJpZXNbaV1bal0gPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuc2VyaWVzW2ldW2pdID09PSBudWxsKSB7XG4gICAgICAgICAgeSA9IHplcm9IO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHkgPSB6ZXJvSCAtIHRoaXMuc2VyaWVzW2ldW2pdIC8gdGhpcy55UmF0aW9bdGhpcy55YXhpc0luZGV4XSArICh0aGlzLmlzUmV2ZXJzZWQgPyB0aGlzLnNlcmllc1tpXVtqXSAvIHRoaXMueVJhdGlvW3RoaXMueWF4aXNJbmRleF0gOiAwKSAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGF0aHMgPSB0aGlzLmJhckhlbHBlcnMuZ2V0Q29sdW1uUGF0aHMoe1xuICAgICAgICAgIGJhclhQb3NpdGlvbjogYmFyWFBvc2l0aW9uLFxuICAgICAgICAgIGJhcldpZHRoOiBiYXJXaWR0aCxcbiAgICAgICAgICB5MTogemVyb0gsXG4gICAgICAgICAgeTI6IHksXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXMsXG4gICAgICAgICAgaTogaSxcbiAgICAgICAgICBqOiBqLFxuICAgICAgICAgIHc6IHdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgIHggPSB4ICsgeERpdmlzaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iYXJIZWxwZXJzLmJhckJhY2tncm91bmQoe1xuICAgICAgICAgIGJjOiBiYyxcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIHgxOiBiYXJYUG9zaXRpb24gLSBzdHJva2VXaWR0aCAvIDIgLSBiYXJXaWR0aCAqIHRoaXMudmlzaWJsZUksXG4gICAgICAgICAgeDI6IGJhcldpZHRoICogdGhpcy5zZXJpZXNMZW4gKyBzdHJva2VXaWR0aCAvIDIsXG4gICAgICAgICAgZWxTZXJpZXM6IGVsU2VyaWVzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGhUbzogcGF0aHMucGF0aFRvLFxuICAgICAgICAgIHBhdGhGcm9tOiBwYXRocy5wYXRoRnJvbSxcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHksXG4gICAgICAgICAgYmFyWFBvc2l0aW9uOiBiYXJYUG9zaXRpb25cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8qKiBnZXRQcmV2aW91c1BhdGggaXMgYSBjb21tb24gZnVuY3Rpb24gZm9yIGJhcnMvY29sdW1ucyB3aGljaCBpcyB1c2VkIHRvIGdldCBwcmV2aW91cyBwYXRocyB3aGVuIGRhdGEgY2hhbmdlcy5cbiAgICAgICAqIEBtZW1iZXJvZiBCYXJcbiAgICAgICAqIEBwYXJhbSB7aW50fSByZWFsSW5kZXggLSBjdXJyZW50IGl0ZXJhdGluZyBpXG4gICAgICAgKiBAcGFyYW0ge2ludH0gaiAtIGN1cnJlbnQgaXRlcmF0aW5nIHNlcmllcydzIGogaW5kZXhcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gcGF0aEZyb20gaXMgdGhlIHN0cmluZyB3aGljaCB3aWxsIGJlIGFwcGVuZGVkIGluIGFuaW1hdGlvbnNcbiAgICAgICAqKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRQcmV2aW91c1BhdGhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcmV2aW91c1BhdGgocmVhbEluZGV4LCBqKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgcGF0aEZyb207XG5cbiAgICAgICAgZm9yICh2YXIgcHAgPSAwOyBwcCA8IHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLmxlbmd0aDsgcHArKykge1xuICAgICAgICAgIHZhciBncHAgPSB3Lmdsb2JhbHMucHJldmlvdXNQYXRoc1twcF07XG5cbiAgICAgICAgICBpZiAoZ3BwLnBhdGhzICYmIGdwcC5wYXRocy5sZW5ndGggPiAwICYmIHBhcnNlSW50KGdwcC5yZWFsSW5kZXgsIDEwKSA9PT0gcGFyc2VJbnQocmVhbEluZGV4LCAxMCkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbcHBdLnBhdGhzW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBwYXRoRnJvbSA9IHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzW3BwXS5wYXRoc1tqXS5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXRoRnJvbTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQmFyO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgQmFyU3RhY2tlZCBDbGFzcyByZXNwb25zaWJsZSBmb3IgZHJhd2luZyBib3RoIFN0YWNrZWQgQ29sdW1ucyBhbmQgQmFycy5cbiAgICpcbiAgICogQG1vZHVsZSBCYXJTdGFja2VkXG4gICAqIFRoZSB3aG9sZSBjYWxjdWxhdGlvbiBmb3Igc3RhY2tlZCBiYXIvY29sdW1uIGlzIGRpZmZlcmVudCBmcm9tIG5vcm1hbCBiYXIvY29sdW1uLFxuICAgKiBoZW5jZSBpdCBtYWtlcyBzZW5zZSB0byBkZXJpdmUgYSBuZXcgY2xhc3MgZm9yIGl0IGV4dGVuZGluZyBtb3N0IG9mIHRoZSBwcm9wcyBvZiBQYXJlbnQgQmFyXG4gICAqKi9cblxuICB2YXIgQmFyU3RhY2tlZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhcikge1xuICAgIF9pbmhlcml0cyhCYXJTdGFja2VkLCBfQmFyKTtcblxuICAgIGZ1bmN0aW9uIEJhclN0YWNrZWQoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFyU3RhY2tlZCk7XG5cbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQmFyU3RhY2tlZCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJhclN0YWNrZWQsIFt7XG4gICAgICBrZXk6IFwiZHJhd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoc2VyaWVzLCBzZXJpZXNJbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB0aGlzLmdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5iYXIgPSBuZXcgQmFyKHRoaXMuY3R4LCB0aGlzLnh5UmF0aW9zKTtcbiAgICAgICAgdmFyIGNvcmVVdGlscyA9IG5ldyBDb3JlVXRpbHModGhpcy5jdHgsIHcpO1xuICAgICAgICBzZXJpZXMgPSBjb3JlVXRpbHMuZ2V0TG9nU2VyaWVzKHNlcmllcyk7XG4gICAgICAgIHRoaXMueVJhdGlvID0gY29yZVV0aWxzLmdldExvZ1lSYXRpb3ModGhpcy55UmF0aW8pO1xuICAgICAgICB0aGlzLmJhckhlbHBlcnMuaW5pdFZhcmlhYmxlcyhzZXJpZXMpO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5zdGFja1R5cGUgPT09ICcxMDAlJykge1xuICAgICAgICAgIHNlcmllcyA9IHcuZ2xvYmFscy5zZXJpZXNQZXJjZW50LnNsaWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlcmllcyA9IHNlcmllcztcbiAgICAgICAgdGhpcy50b3RhbEl0ZW1zID0gMDtcbiAgICAgICAgdGhpcy5wcmV2WSA9IFtdOyAvLyB5IHBvc2l0aW9uIG9uIGNoYXJ0XG5cbiAgICAgICAgdGhpcy5wcmV2WCA9IFtdOyAvLyB4IHBvc2l0aW9uIG9uIGNoYXJ0XG5cbiAgICAgICAgdGhpcy5wcmV2WUYgPSBbXTsgLy8geSBwb3NpdGlvbiBpbmNsdWRpbmcgc2hhcGVzIG9uIGNoYXJ0XG5cbiAgICAgICAgdGhpcy5wcmV2WEYgPSBbXTsgLy8geCBwb3NpdGlvbiBpbmNsdWRpbmcgc2hhcGVzIG9uIGNoYXJ0XG5cbiAgICAgICAgdGhpcy5wcmV2WVZhbCA9IFtdOyAvLyB5IHZhbHVlcyAoc2VyaWVzW2ldW2pdKSBpbiBjb2x1bW5zXG5cbiAgICAgICAgdGhpcy5wcmV2WFZhbCA9IFtdOyAvLyB4IHZhbHVlcyAoc2VyaWVzW2ldW2pdKSBpbiBiYXJzXG5cbiAgICAgICAgdGhpcy54QXJyaiA9IFtdOyAvLyB4aiBpbmRpY2F0ZXMgeCBwb3NpdGlvbiBvbiBncmFwaCBpbiBiYXJzXG5cbiAgICAgICAgdGhpcy54QXJyakYgPSBbXTsgLy8geGpGIGluZGljYXRlcyBiYXIncyB4IHBvc2l0aW9uICsgcm91bmRlZFNoYXBlJ3MgcG9zaXRpb25zIGluIGJhcnNcblxuICAgICAgICB0aGlzLnhBcnJqVmFsID0gW107IC8vIHggdmFsIG1lYW5zIHRoZSBhY3R1YWwgc2VyaWVzJ3MgeSB2YWx1ZXMgaW4gaG9yaXpvbnRhbC9iYXJzXG5cbiAgICAgICAgdGhpcy55QXJyaiA9IFtdOyAvLyB5aiBpbmRpY2F0ZXMgeSBwb3NpdGlvbiBvbiBncmFwaCBpbiBjb2x1bW5zXG5cbiAgICAgICAgdGhpcy55QXJyakYgPSBbXTsgLy8geWpGIGluZGljYXRlcyBiYXIncyB5IHBvc2l0aW9uICsgcm91bmRlZFNoYXBlJ3MgcG9zaXRpb25zIGluIGNvbHVtbnNcblxuICAgICAgICB0aGlzLnlBcnJqVmFsID0gW107IC8vIHkgdmFsIG1lYW5zIHRoZSBhY3R1YWwgc2VyaWVzJ3MgeSB2YWx1ZXMgaW4gY29sdW1uc1xuXG4gICAgICAgIGZvciAodmFyIHNsID0gMDsgc2wgPCBzZXJpZXMubGVuZ3RoOyBzbCsrKSB7XG4gICAgICAgICAgaWYgKHNlcmllc1tzbF0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy50b3RhbEl0ZW1zICs9IHNlcmllc1tzbF0ubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXQgPSB0aGlzLmdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtYmFyLXNlcmllcyBhcGV4Y2hhcnRzLXBsb3Qtc2VyaWVzJ1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHggPSAwO1xuICAgICAgICB2YXIgeSA9IDA7XG5cbiAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSwgYmMpIHtcbiAgICAgICAgICB2YXIgeERpdmlzaW9uID0gdm9pZCAwOyAvLyB4RGl2aXNpb24gaXMgdGhlIEdSSURXSURUSCBkaXZpZGVkIGJ5IG51bWJlciBvZiBkYXRhcG9pbnRzIChjb2x1bW5zKVxuXG4gICAgICAgICAgdmFyIHlEaXZpc2lvbiA9IHZvaWQgMDsgLy8geURpdmlzaW9uIGlzIHRoZSBHUklESEVJR0hUIGRpdmlkZWQgYnkgbnVtYmVyIG9mIGRhdGFwb2ludHMgKGJhcnMpXG5cbiAgICAgICAgICB2YXIgemVyb0ggPSB2b2lkIDA7IC8vIHplcm9IIGlzIHRoZSBiYXNlbGluZSB3aGVyZSAwIG1lZXRzIHkgYXhpc1xuXG4gICAgICAgICAgdmFyIHplcm9XID0gdm9pZCAwOyAvLyB6ZXJvVyBpcyB0aGUgYmFzZWxpbmUgd2hlcmUgMCBtZWV0cyB4IGF4aXNcblxuICAgICAgICAgIHZhciB4QXJyVmFsdWVzID0gW107XG4gICAgICAgICAgdmFyIHlBcnJWYWx1ZXMgPSBbXTtcbiAgICAgICAgICB2YXIgcmVhbEluZGV4ID0gdy5nbG9iYWxzLmNvbWJvQ2hhcnRzID8gc2VyaWVzSW5kZXhbaV0gOiBpO1xuXG4gICAgICAgICAgaWYgKF90aGlzLnlSYXRpby5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBfdGhpcy55YXhpc0luZGV4ID0gcmVhbEluZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLmlzUmV2ZXJzZWQgPSB3LmNvbmZpZy55YXhpc1tfdGhpcy55YXhpc0luZGV4XSAmJiB3LmNvbmZpZy55YXhpc1tfdGhpcy55YXhpc0luZGV4XS5yZXZlcnNlZDsgLy8gZWwgdG8gd2hpY2ggc2VyaWVzIHdpbGwgYmUgZHJhd25cblxuICAgICAgICAgIHZhciBlbFNlcmllcyA9IF90aGlzLmdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiBcImFwZXhjaGFydHMtc2VyaWVzXCIsXG4gICAgICAgICAgICBzZXJpZXNOYW1lOiBVdGlscy5lc2NhcGVTdHJpbmcody5nbG9iYWxzLnNlcmllc05hbWVzW3JlYWxJbmRleF0pLFxuICAgICAgICAgICAgcmVsOiBpICsgMSxcbiAgICAgICAgICAgICdkYXRhOnJlYWxJbmRleCc6IHJlYWxJbmRleFxuICAgICAgICAgIH0pOyAvLyBlbGRhdGFsYWJlbHNcblxuXG4gICAgICAgICAgdmFyIGVsRGF0YUxhYmVsc1dyYXAgPSBfdGhpcy5ncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtZGF0YWxhYmVscycsXG4gICAgICAgICAgICAnZGF0YTpyZWFsSW5kZXgnOiByZWFsSW5kZXhcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBiYXJIZWlnaHQgPSAwO1xuICAgICAgICAgIHZhciBiYXJXaWR0aCA9IDA7XG5cbiAgICAgICAgICB2YXIgaW5pdFBvc2l0aW9ucyA9IF90aGlzLmluaXRpYWxQb3NpdGlvbnMoeCwgeSwgeERpdmlzaW9uLCB5RGl2aXNpb24sIHplcm9ILCB6ZXJvVyk7XG5cbiAgICAgICAgICB5ID0gaW5pdFBvc2l0aW9ucy55O1xuICAgICAgICAgIGJhckhlaWdodCA9IGluaXRQb3NpdGlvbnMuYmFySGVpZ2h0O1xuICAgICAgICAgIHlEaXZpc2lvbiA9IGluaXRQb3NpdGlvbnMueURpdmlzaW9uO1xuICAgICAgICAgIHplcm9XID0gaW5pdFBvc2l0aW9ucy56ZXJvVztcbiAgICAgICAgICB4ID0gaW5pdFBvc2l0aW9ucy54O1xuICAgICAgICAgIGJhcldpZHRoID0gaW5pdFBvc2l0aW9ucy5iYXJXaWR0aDtcbiAgICAgICAgICB4RGl2aXNpb24gPSBpbml0UG9zaXRpb25zLnhEaXZpc2lvbjtcbiAgICAgICAgICB6ZXJvSCA9IGluaXRQb3NpdGlvbnMuemVyb0g7XG4gICAgICAgICAgX3RoaXMueUFycmogPSBbXTtcbiAgICAgICAgICBfdGhpcy55QXJyakYgPSBbXTtcbiAgICAgICAgICBfdGhpcy55QXJyalZhbCA9IFtdO1xuICAgICAgICAgIF90aGlzLnhBcnJqID0gW107XG4gICAgICAgICAgX3RoaXMueEFycmpGID0gW107XG4gICAgICAgICAgX3RoaXMueEFycmpWYWwgPSBbXTsgLy8gaWYgKCF0aGlzLmhvcml6b250YWwpIHtcbiAgICAgICAgICAvLyB0aGlzLnhBcnJqLnB1c2goeCArIGJhcldpZHRoIC8gMilcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgLy8gZml4IGlzc3VlICMxMjE1O1xuICAgICAgICAgIC8vIHdoZXJlIGFsbCBzdGFjayBiYXIgZGlzYXBwZWFyIGFmdGVyIGNvbGxhcHNpbmcgdGhlIGZpcnN0IHNlcmllc1xuICAgICAgICAgIC8vIHNvbDogaWYgb25seSAxIGFyciBpbiB0aGlzLnByZXZZKHRoaXMucHJldlkubGVuZ3RoID09PSAxKSBhbmQgYWxsIGFyZSBOYU5cblxuICAgICAgICAgIGlmIChfdGhpcy5wcmV2WS5sZW5ndGggPT09IDEgJiYgX3RoaXMucHJldllbMF0uZXZlcnkoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHZhbCk7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhpcy5wcmV2WVswXSBhbGwgemVyb0hcbiAgICAgICAgICAgIF90aGlzLnByZXZZWzBdID0gX3RoaXMucHJldllbMF0ubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHplcm9IO1xuICAgICAgICAgICAgfSk7IC8vIG1ha2UgdGhpcy5wcmV2WUZbMF0gYWxsIDBcblxuICAgICAgICAgICAgX3RoaXMucHJldllGWzBdID0gX3RoaXMucHJldllGWzBdLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB3Lmdsb2JhbHMuZGF0YVBvaW50czsgaisrKSB7XG4gICAgICAgICAgICB2YXIgc3Ryb2tlV2lkdGggPSBfdGhpcy5iYXJIZWxwZXJzLmdldFN0cm9rZVdpZHRoKGksIGosIHJlYWxJbmRleCk7XG5cbiAgICAgICAgICAgIHZhciBjb21tb25QYXRoT3B0cyA9IHtcbiAgICAgICAgICAgICAgaW5kZXhlczoge1xuICAgICAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgICAgICByZWFsSW5kZXg6IHJlYWxJbmRleCxcbiAgICAgICAgICAgICAgICBiYzogYmNcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICBlbFNlcmllczogZWxTZXJpZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcGF0aHMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgIHBhdGhzID0gX3RoaXMuZHJhd1N0YWNrZWRCYXJQYXRocyhfb2JqZWN0U3ByZWFkMih7fSwgY29tbW9uUGF0aE9wdHMsIHtcbiAgICAgICAgICAgICAgICB6ZXJvVzogemVyb1csXG4gICAgICAgICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgeURpdmlzaW9uOiB5RGl2aXNpb25cbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBiYXJXaWR0aCA9IF90aGlzLnNlcmllc1tpXVtqXSAvIF90aGlzLmludmVydGVkWVJhdGlvO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGF0aHMgPSBfdGhpcy5kcmF3U3RhY2tlZENvbHVtblBhdGhzKF9vYmplY3RTcHJlYWQyKHt9LCBjb21tb25QYXRoT3B0cywge1xuICAgICAgICAgICAgICAgIHhEaXZpc2lvbjogeERpdmlzaW9uLFxuICAgICAgICAgICAgICAgIGJhcldpZHRoOiBiYXJXaWR0aCxcbiAgICAgICAgICAgICAgICB6ZXJvSDogemVyb0hcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBiYXJIZWlnaHQgPSBfdGhpcy5zZXJpZXNbaV1bal0gLyBfdGhpcy55UmF0aW9bX3RoaXMueWF4aXNJbmRleF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHkgPSBwYXRocy55O1xuICAgICAgICAgICAgeCA9IHBhdGhzLng7XG4gICAgICAgICAgICB4QXJyVmFsdWVzLnB1c2goeCk7XG4gICAgICAgICAgICB5QXJyVmFsdWVzLnB1c2goeSk7XG5cbiAgICAgICAgICAgIHZhciBwYXRoRmlsbCA9IF90aGlzLmJhckhlbHBlcnMuZ2V0UGF0aEZpbGxDb2xvcihzZXJpZXMsIGksIGosIHJlYWxJbmRleCk7XG5cbiAgICAgICAgICAgIGVsU2VyaWVzID0gX3RoaXMucmVuZGVyU2VyaWVzKHtcbiAgICAgICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgICAgIHBhdGhGaWxsOiBwYXRoRmlsbCxcbiAgICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgcGF0aEZyb206IHBhdGhzLnBhdGhGcm9tLFxuICAgICAgICAgICAgICBwYXRoVG86IHBhdGhzLnBhdGhUbyxcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICBlbFNlcmllczogZWxTZXJpZXMsXG4gICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodCxcbiAgICAgICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgICAgICBlbERhdGFMYWJlbHNXcmFwOiBlbERhdGFMYWJlbHNXcmFwLFxuICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgICAgdmlzaWJsZVNlcmllczogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSAvLyBwdXNoIGFsbCB4IHZhbCBhcnJheXMgaW50byBtYWluIHhBcnJcblxuXG4gICAgICAgICAgdy5nbG9iYWxzLnNlcmllc1h2YWx1ZXNbcmVhbEluZGV4XSA9IHhBcnJWYWx1ZXM7XG4gICAgICAgICAgdy5nbG9iYWxzLnNlcmllc1l2YWx1ZXNbcmVhbEluZGV4XSA9IHlBcnJWYWx1ZXM7IC8vIHB1c2ggYWxsIGN1cnJlbnQgeSB2YWx1ZXMgYXJyYXkgdG8gbWFpbiBQcmV2WSBBcnJheVxuXG4gICAgICAgICAgX3RoaXMucHJldlkucHVzaChfdGhpcy55QXJyaik7XG5cbiAgICAgICAgICBfdGhpcy5wcmV2WUYucHVzaChfdGhpcy55QXJyakYpO1xuXG4gICAgICAgICAgX3RoaXMucHJldllWYWwucHVzaChfdGhpcy55QXJyalZhbCk7XG5cbiAgICAgICAgICBfdGhpcy5wcmV2WC5wdXNoKF90aGlzLnhBcnJqKTtcblxuICAgICAgICAgIF90aGlzLnByZXZYRi5wdXNoKF90aGlzLnhBcnJqRik7XG5cbiAgICAgICAgICBfdGhpcy5wcmV2WFZhbC5wdXNoKF90aGlzLnhBcnJqVmFsKTtcblxuICAgICAgICAgIHJldC5hZGQoZWxTZXJpZXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBiYyA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyssIGJjKyspIHtcbiAgICAgICAgICBfbG9vcChpLCBiYyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpbml0aWFsUG9zaXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbFBvc2l0aW9ucyh4LCB5LCB4RGl2aXNpb24sIHlEaXZpc2lvbiwgemVyb0gsIHplcm9XKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgYmFySGVpZ2h0LCBiYXJXaWR0aDtcblxuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwpIHtcbiAgICAgICAgICAvLyBoZWlnaHQgZGl2aWRlZCBpbnRvIGVxdWFsIHBhcnRzXG4gICAgICAgICAgeURpdmlzaW9uID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQgLyB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgICBiYXJIZWlnaHQgPSB5RGl2aXNpb247XG4gICAgICAgICAgYmFySGVpZ2h0ID0gYmFySGVpZ2h0ICogcGFyc2VJbnQody5jb25maWcucGxvdE9wdGlvbnMuYmFyLmJhckhlaWdodCwgMTApIC8gMTAwO1xuICAgICAgICAgIHplcm9XID0gdGhpcy5iYXNlTGluZUludmVydGVkWSArIHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsICsgKHRoaXMuaXNSZXZlcnNlZCA/IHcuZ2xvYmFscy5ncmlkV2lkdGggOiAwKSAtICh0aGlzLmlzUmV2ZXJzZWQgPyB0aGlzLmJhc2VMaW5lSW52ZXJ0ZWRZICogMiA6IDApOyAvLyBpbml0aWFsIHkgcG9zaXRpb24gaXMgaGFsZiBvZiBiYXJIZWlnaHQgKiBoYWxmIG9mIG51bWJlciBvZiBCYXJzXG5cbiAgICAgICAgICB5ID0gKHlEaXZpc2lvbiAtIGJhckhlaWdodCkgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdpZHRoIGRpdmlkZWQgaW50byBlcXVhbCBwYXJ0c1xuICAgICAgICAgIHhEaXZpc2lvbiA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLyB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgICBiYXJXaWR0aCA9IHhEaXZpc2lvbjtcblxuICAgICAgICAgIGlmICh3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgICAgeERpdmlzaW9uID0gdy5nbG9iYWxzLm1pblhEaWZmIC8gdGhpcy54UmF0aW87XG4gICAgICAgICAgICBiYXJXaWR0aCA9IHhEaXZpc2lvbiAqIHBhcnNlSW50KHRoaXMuYmFyT3B0aW9ucy5jb2x1bW5XaWR0aCwgMTApIC8gMTAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXJXaWR0aCA9IGJhcldpZHRoICogcGFyc2VJbnQody5jb25maWcucGxvdE9wdGlvbnMuYmFyLmNvbHVtbldpZHRoLCAxMCkgLyAxMDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgemVyb0ggPSB0aGlzLmJhc2VMaW5lWVt0aGlzLnlheGlzSW5kZXhdICsgKHRoaXMuaXNSZXZlcnNlZCA/IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IDogMCkgLSAodGhpcy5pc1JldmVyc2VkID8gdGhpcy5iYXNlTGluZVlbdGhpcy55YXhpc0luZGV4XSAqIDIgOiAwKTsgLy8gaW5pdGlhbCB4IHBvc2l0aW9uIGlzIG9uZSB0aGlyZCBvZiBiYXJXaWR0aFxuXG4gICAgICAgICAgeCA9IHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsICsgKHhEaXZpc2lvbiAtIGJhcldpZHRoKSAvIDI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeSxcbiAgICAgICAgICB5RGl2aXNpb246IHlEaXZpc2lvbixcbiAgICAgICAgICB4RGl2aXNpb246IHhEaXZpc2lvbixcbiAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodCxcbiAgICAgICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgICAgemVyb0g6IHplcm9ILFxuICAgICAgICAgIHplcm9XOiB6ZXJvV1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3U3RhY2tlZEJhclBhdGhzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1N0YWNrZWRCYXJQYXRocyhfcmVmKSB7XG4gICAgICAgIHZhciBpbmRleGVzID0gX3JlZi5pbmRleGVzLFxuICAgICAgICAgICAgYmFySGVpZ2h0ID0gX3JlZi5iYXJIZWlnaHQsXG4gICAgICAgICAgICBzdHJva2VXaWR0aCA9IF9yZWYuc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICB6ZXJvVyA9IF9yZWYuemVyb1csXG4gICAgICAgICAgICB4ID0gX3JlZi54LFxuICAgICAgICAgICAgeSA9IF9yZWYueSxcbiAgICAgICAgICAgIHlEaXZpc2lvbiA9IF9yZWYueURpdmlzaW9uLFxuICAgICAgICAgICAgZWxTZXJpZXMgPSBfcmVmLmVsU2VyaWVzO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGJhcllQb3NpdGlvbiA9IHk7XG4gICAgICAgIHZhciBiYXJYUG9zaXRpb247XG4gICAgICAgIHZhciBpID0gaW5kZXhlcy5pO1xuICAgICAgICB2YXIgaiA9IGluZGV4ZXMuajtcbiAgICAgICAgdmFyIGJjID0gaW5kZXhlcy5iYztcbiAgICAgICAgdmFyIHByZXZCYXJXID0gMDtcblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMucHJldlhGLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgcHJldkJhclcgPSBwcmV2QmFyVyArIHRoaXMucHJldlhGW2tdW2pdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgdmFyIGJYUCA9IHplcm9XO1xuXG4gICAgICAgICAgaWYgKHRoaXMucHJldlhWYWxbaSAtIDFdW2pdIDwgMCkge1xuICAgICAgICAgICAgYlhQID0gdGhpcy5zZXJpZXNbaV1bal0gPj0gMCA/IHRoaXMucHJldlhbaSAtIDFdW2pdICsgcHJldkJhclcgLSAodGhpcy5pc1JldmVyc2VkID8gcHJldkJhclcgOiAwKSAqIDIgOiB0aGlzLnByZXZYW2kgLSAxXVtqXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldlhWYWxbaSAtIDFdW2pdID49IDApIHtcbiAgICAgICAgICAgIGJYUCA9IHRoaXMuc2VyaWVzW2ldW2pdID49IDAgPyB0aGlzLnByZXZYW2kgLSAxXVtqXSA6IHRoaXMucHJldlhbaSAtIDFdW2pdIC0gcHJldkJhclcgKyAodGhpcy5pc1JldmVyc2VkID8gcHJldkJhclcgOiAwKSAqIDI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmFyWFBvc2l0aW9uID0gYlhQO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRoZSBmaXJzdCBzZXJpZXMgd2lsbCBub3QgaGF2ZSBwcmV2WCB2YWx1ZXNcbiAgICAgICAgICBiYXJYUG9zaXRpb24gPSB6ZXJvVztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNlcmllc1tpXVtqXSA9PT0gbnVsbCkge1xuICAgICAgICAgIHggPSBiYXJYUG9zaXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeCA9IGJhclhQb3NpdGlvbiArIHRoaXMuc2VyaWVzW2ldW2pdIC8gdGhpcy5pbnZlcnRlZFlSYXRpbyAtICh0aGlzLmlzUmV2ZXJzZWQgPyB0aGlzLnNlcmllc1tpXVtqXSAvIHRoaXMuaW52ZXJ0ZWRZUmF0aW8gOiAwKSAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnhBcnJqLnB1c2goeCk7XG4gICAgICAgIHRoaXMueEFycmpGLnB1c2goTWF0aC5hYnMoYmFyWFBvc2l0aW9uIC0geCkpO1xuICAgICAgICB0aGlzLnhBcnJqVmFsLnB1c2godGhpcy5zZXJpZXNbaV1bal0pO1xuICAgICAgICB2YXIgcGF0aHMgPSB0aGlzLmJhckhlbHBlcnMuZ2V0QmFycGF0aHMoe1xuICAgICAgICAgIGJhcllQb3NpdGlvbjogYmFyWVBvc2l0aW9uLFxuICAgICAgICAgIGJhckhlaWdodDogYmFySGVpZ2h0LFxuICAgICAgICAgIHgxOiBiYXJYUG9zaXRpb24sXG4gICAgICAgICAgeDI6IHgsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXMsXG4gICAgICAgICAgaTogaSxcbiAgICAgICAgICBqOiBqLFxuICAgICAgICAgIHc6IHdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmFySGVscGVycy5iYXJCYWNrZ3JvdW5kKHtcbiAgICAgICAgICBiYzogYmMsXG4gICAgICAgICAgaTogaSxcbiAgICAgICAgICB5MTogYmFyWVBvc2l0aW9uLFxuICAgICAgICAgIHkyOiBiYXJIZWlnaHQsXG4gICAgICAgICAgZWxTZXJpZXM6IGVsU2VyaWVzXG4gICAgICAgIH0pO1xuICAgICAgICB5ID0geSArIHlEaXZpc2lvbjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoVG86IHBhdGhzLnBhdGhUbyxcbiAgICAgICAgICBwYXRoRnJvbTogcGF0aHMucGF0aEZyb20sXG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdTdGFja2VkQ29sdW1uUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3U3RhY2tlZENvbHVtblBhdGhzKF9yZWYyKSB7XG4gICAgICAgIHZhciBpbmRleGVzID0gX3JlZjIuaW5kZXhlcyxcbiAgICAgICAgICAgIHggPSBfcmVmMi54LFxuICAgICAgICAgICAgeSA9IF9yZWYyLnksXG4gICAgICAgICAgICB4RGl2aXNpb24gPSBfcmVmMi54RGl2aXNpb24sXG4gICAgICAgICAgICBiYXJXaWR0aCA9IF9yZWYyLmJhcldpZHRoLFxuICAgICAgICAgICAgemVyb0ggPSBfcmVmMi56ZXJvSCxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoID0gX3JlZjIuc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICBlbFNlcmllcyA9IF9yZWYyLmVsU2VyaWVzO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGkgPSBpbmRleGVzLmk7XG4gICAgICAgIHZhciBqID0gaW5kZXhlcy5qO1xuICAgICAgICB2YXIgYmMgPSBpbmRleGVzLmJjO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgIHZhciBzZXJpZXNWYWwgPSB3Lmdsb2JhbHMuc2VyaWVzWFtpXVtqXTtcbiAgICAgICAgICBpZiAoIXNlcmllc1ZhbCkgc2VyaWVzVmFsID0gMDtcbiAgICAgICAgICB4ID0gKHNlcmllc1ZhbCAtIHcuZ2xvYmFscy5taW5YKSAvIHRoaXMueFJhdGlvIC0gYmFyV2lkdGggLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhclhQb3NpdGlvbiA9IHg7XG4gICAgICAgIHZhciBiYXJZUG9zaXRpb247XG4gICAgICAgIHZhciBwcmV2QmFySCA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLnByZXZZRi5sZW5ndGg7IGsrKykge1xuICAgICAgICAgIC8vIGZpeCBpc3N1ZSAjMTIxNVxuICAgICAgICAgIC8vIGluIGNhc2Ugd2hlcmUgdGhpcy5wcmV2WUZba11bal0gaXMgTmFOLCB1c2UgMCBpbnN0ZWFkXG4gICAgICAgICAgcHJldkJhckggPSBwcmV2QmFySCArICghaXNOYU4odGhpcy5wcmV2WUZba11bal0pID8gdGhpcy5wcmV2WUZba11bal0gOiAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpID4gMCAmJiAhdy5nbG9iYWxzLmlzWE51bWVyaWMgfHwgaSA+IDAgJiYgdy5nbG9iYWxzLmlzWE51bWVyaWMgJiYgdy5nbG9iYWxzLnNlcmllc1hbaSAtIDFdW2pdID09PSB3Lmdsb2JhbHMuc2VyaWVzWFtpXVtqXSkge1xuICAgICAgICAgIHZhciBiWVA7XG4gICAgICAgICAgdmFyIHByZXZZVmFsdWU7XG4gICAgICAgICAgdmFyIHAgPSBNYXRoLm1pbih0aGlzLnlSYXRpby5sZW5ndGggKyAxLCBpICsgMSk7XG5cbiAgICAgICAgICBpZiAodGhpcy5wcmV2WVtpIC0gMV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaWkgPSAxOyBpaSA8IHA7IGlpKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFpc05hTih0aGlzLnByZXZZW2kgLSBpaV1bal0pKSB7XG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgcHJldmlvdXMgYXZhaWxhYmxlIHZhbHVlIHRvIGdpdmUgcHJldllWYWx1ZVxuICAgICAgICAgICAgICAgIHByZXZZVmFsdWUgPSB0aGlzLnByZXZZW2kgLSBpaV1bal07IC8vIGlmIGZvdW5kIGl0LCBicmVhayB0aGUgbG9vcFxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciBfaWkgPSAxOyBfaWkgPCBwOyBfaWkrKykge1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgcHJldmlvdXMgYXZhaWxhYmxlIHZhbHVlKG5vbi1OYU4pIHRvIGdpdmUgYllQXG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2WVZhbFtpIC0gX2lpXVtqXSA8IDApIHtcbiAgICAgICAgICAgICAgYllQID0gdGhpcy5zZXJpZXNbaV1bal0gPj0gMCA/IHByZXZZVmFsdWUgLSBwcmV2QmFySCArICh0aGlzLmlzUmV2ZXJzZWQgPyBwcmV2QmFySCA6IDApICogMiA6IHByZXZZVmFsdWU7IC8vIGZvdW5kIGl0PyBicmVhayB0aGUgbG9vcFxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXZZVmFsW2kgLSBfaWldW2pdID49IDApIHtcbiAgICAgICAgICAgICAgYllQID0gdGhpcy5zZXJpZXNbaV1bal0gPj0gMCA/IHByZXZZVmFsdWUgOiBwcmV2WVZhbHVlICsgcHJldkJhckggLSAodGhpcy5pc1JldmVyc2VkID8gcHJldkJhckggOiAwKSAqIDI7IC8vIGZvdW5kIGl0PyBicmVhayB0aGUgbG9vcFxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgYllQID09PSAndW5kZWZpbmVkJykgYllQID0gdy5nbG9iYWxzLmdyaWRIZWlnaHQ7IC8vIGlmIHRoaXMucHJldllGWzBdIGlzIGFsbCAwIHJlc3VsdGVkIGZyb20gbGluZSAjNDg2XG4gICAgICAgICAgLy8gQU5EIGV2ZXJ5IGFyciBzdGFydGluZyBmcm9tIHRoZSBzZWNvbmQgb25seSBjb250YWlucyBOYU5cblxuICAgICAgICAgIGlmICh0aGlzLnByZXZZRlswXS5ldmVyeShmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsID09PSAwO1xuICAgICAgICAgIH0pICYmIHRoaXMucHJldllGLnNsaWNlKDEsIGkpLmV2ZXJ5KGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnIuZXZlcnkoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICByZXR1cm4gaXNOYU4odmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIHNhbWUgY2FsYyB3YXkgYXMgbGluZSAjNDg1XG4gICAgICAgICAgICBiYXJZUG9zaXRpb24gPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAtIHplcm9IO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOb3RoaW5nIHNwZWNpYWxcbiAgICAgICAgICAgIGJhcllQb3NpdGlvbiA9IGJZUDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdGhlIGZpcnN0IHNlcmllcyB3aWxsIG5vdCBoYXZlIHByZXZZIHZhbHVlcywgYWxzbyBpZiB0aGUgcHJldiBpbmRleCdzIHNlcmllcyBYIGRvZXNuJ3QgbWF0Y2hlcyB0aGUgY3VycmVudCBpbmRleCdzIHNlcmllcyBYLCB0aGVuIHN0YXJ0IGZyb20gemVyb1xuICAgICAgICAgIGJhcllQb3NpdGlvbiA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC0gemVyb0g7XG4gICAgICAgIH1cblxuICAgICAgICB5ID0gYmFyWVBvc2l0aW9uIC0gdGhpcy5zZXJpZXNbaV1bal0gLyB0aGlzLnlSYXRpb1t0aGlzLnlheGlzSW5kZXhdICsgKHRoaXMuaXNSZXZlcnNlZCA/IHRoaXMuc2VyaWVzW2ldW2pdIC8gdGhpcy55UmF0aW9bdGhpcy55YXhpc0luZGV4XSA6IDApICogMjtcbiAgICAgICAgdGhpcy55QXJyai5wdXNoKHkpO1xuICAgICAgICB0aGlzLnlBcnJqRi5wdXNoKE1hdGguYWJzKGJhcllQb3NpdGlvbiAtIHkpKTtcbiAgICAgICAgdGhpcy55QXJyalZhbC5wdXNoKHRoaXMuc2VyaWVzW2ldW2pdKTtcbiAgICAgICAgdmFyIHBhdGhzID0gdGhpcy5iYXJIZWxwZXJzLmdldENvbHVtblBhdGhzKHtcbiAgICAgICAgICBiYXJYUG9zaXRpb246IGJhclhQb3NpdGlvbixcbiAgICAgICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgICAgeTE6IGJhcllQb3NpdGlvbixcbiAgICAgICAgICB5MjogeSxcbiAgICAgICAgICB5UmF0aW86IHRoaXMueVJhdGlvW3RoaXMueWF4aXNJbmRleF0sXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaXMuc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgc2VyaWVzOiB0aGlzLnNlcmllcyxcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIGo6IGosXG4gICAgICAgICAgdzogd1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5iYXJIZWxwZXJzLmJhckJhY2tncm91bmQoe1xuICAgICAgICAgIGJjOiBiYyxcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIHgxOiBiYXJYUG9zaXRpb24sXG4gICAgICAgICAgeDI6IGJhcldpZHRoLFxuICAgICAgICAgIGVsU2VyaWVzOiBlbFNlcmllc1xuICAgICAgICB9KTtcbiAgICAgICAgeCA9IHggKyB4RGl2aXNpb247XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aFRvOiBwYXRocy5wYXRoVG8sXG4gICAgICAgICAgcGF0aEZyb206IHBhdGhzLnBhdGhGcm9tLFxuICAgICAgICAgIHg6IHcuZ2xvYmFscy5pc1hOdW1lcmljID8geCAtIHhEaXZpc2lvbiA6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCYXJTdGFja2VkO1xuICB9KEJhcik7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgQ2FuZGxlU3RpY2sgQ2xhc3MgcmVzcG9uc2libGUgZm9yIGRyYXdpbmcgYm90aCBTdGFja2VkIENvbHVtbnMgYW5kIEJhcnMuXG4gICAqXG4gICAqIEBtb2R1bGUgQ2FuZGxlU3RpY2tcbiAgICoqL1xuXG4gIHZhciBDYW5kbGVTdGljayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhcikge1xuICAgIF9pbmhlcml0cyhDYW5kbGVTdGljaywgX0Jhcik7XG5cbiAgICBmdW5jdGlvbiBDYW5kbGVTdGljaygpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYW5kbGVTdGljayk7XG5cbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ2FuZGxlU3RpY2spLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDYW5kbGVTdGljaywgW3tcbiAgICAgIGtleTogXCJkcmF3XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhdyhzZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZmlsbCA9IG5ldyBGaWxsKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jYW5kbGVzdGlja09wdGlvbnMgPSB0aGlzLncuY29uZmlnLnBsb3RPcHRpb25zLmNhbmRsZXN0aWNrO1xuICAgICAgICB2YXIgY29yZVV0aWxzID0gbmV3IENvcmVVdGlscyh0aGlzLmN0eCwgdyk7XG4gICAgICAgIHNlcmllcyA9IGNvcmVVdGlscy5nZXRMb2dTZXJpZXMoc2VyaWVzKTtcbiAgICAgICAgdGhpcy5zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgIHRoaXMueVJhdGlvID0gY29yZVV0aWxzLmdldExvZ1lSYXRpb3ModGhpcy55UmF0aW8pO1xuICAgICAgICB0aGlzLmJhckhlbHBlcnMuaW5pdFZhcmlhYmxlcyhzZXJpZXMpO1xuICAgICAgICB2YXIgcmV0ID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1jYW5kbGVzdGljay1zZXJpZXMgYXBleGNoYXJ0cy1wbG90LXNlcmllcydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgeCA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgeSA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgeERpdmlzaW9uID0gdm9pZCAwLFxuICAgICAgICAgICAgICAvLyB4RGl2aXNpb24gaXMgdGhlIEdSSURXSURUSCBkaXZpZGVkIGJ5IG51bWJlciBvZiBkYXRhcG9pbnRzIChjb2x1bW5zKVxuICAgICAgICAgIHplcm9IID0gdm9pZCAwOyAvLyB6ZXJvSCBpcyB0aGUgYmFzZWxpbmUgd2hlcmUgMCBtZWV0cyB5IGF4aXNcblxuICAgICAgICAgIHZhciB5QXJyaiA9IFtdOyAvLyBob2xkIHkgdmFsdWVzIG9mIGN1cnJlbnQgaXRlcmF0aW5nIHNlcmllc1xuXG4gICAgICAgICAgdmFyIHhBcnJqID0gW107IC8vIGhvbGQgeCB2YWx1ZXMgb2YgY3VycmVudCBpdGVyYXRpbmcgc2VyaWVzXG5cbiAgICAgICAgICB2YXIgcmVhbEluZGV4ID0gdy5nbG9iYWxzLmNvbWJvQ2hhcnRzID8gc2VyaWVzSW5kZXhbaV0gOiBpOyAvLyBlbCB0byB3aGljaCBzZXJpZXMgd2lsbCBiZSBkcmF3blxuXG4gICAgICAgICAgdmFyIGVsU2VyaWVzID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgICAgY2xhc3M6IFwiYXBleGNoYXJ0cy1zZXJpZXNcIixcbiAgICAgICAgICAgIHNlcmllc05hbWU6IFV0aWxzLmVzY2FwZVN0cmluZyh3Lmdsb2JhbHMuc2VyaWVzTmFtZXNbcmVhbEluZGV4XSksXG4gICAgICAgICAgICByZWw6IGkgKyAxLFxuICAgICAgICAgICAgJ2RhdGE6cmVhbEluZGV4JzogcmVhbEluZGV4XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoc2VyaWVzW2ldLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZUkgPSB0aGlzLnZpc2libGVJICsgMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYmFySGVpZ2h0ID0gMDtcbiAgICAgICAgICB2YXIgYmFyV2lkdGggPSAwO1xuXG4gICAgICAgICAgaWYgKHRoaXMueVJhdGlvLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMueWF4aXNJbmRleCA9IHJlYWxJbmRleDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaW5pdFBvc2l0aW9ucyA9IHRoaXMuYmFySGVscGVycy5pbml0aWFsUG9zaXRpb25zKCk7XG4gICAgICAgICAgeSA9IGluaXRQb3NpdGlvbnMueTtcbiAgICAgICAgICBiYXJIZWlnaHQgPSBpbml0UG9zaXRpb25zLmJhckhlaWdodDtcbiAgICAgICAgICB4ID0gaW5pdFBvc2l0aW9ucy54O1xuICAgICAgICAgIGJhcldpZHRoID0gaW5pdFBvc2l0aW9ucy5iYXJXaWR0aDtcbiAgICAgICAgICB4RGl2aXNpb24gPSBpbml0UG9zaXRpb25zLnhEaXZpc2lvbjtcbiAgICAgICAgICB6ZXJvSCA9IGluaXRQb3NpdGlvbnMuemVyb0g7XG4gICAgICAgICAgeEFycmoucHVzaCh4ICsgYmFyV2lkdGggLyAyKTsgLy8gZWxkYXRhbGFiZWxzXG5cbiAgICAgICAgICB2YXIgZWxEYXRhTGFiZWxzV3JhcCA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1kYXRhbGFiZWxzJyxcbiAgICAgICAgICAgICdkYXRhOnJlYWxJbmRleCc6IHJlYWxJbmRleFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB3Lmdsb2JhbHMuZGF0YVBvaW50czsgaisrKSB7XG4gICAgICAgICAgICB2YXIgc3Ryb2tlV2lkdGggPSB0aGlzLmJhckhlbHBlcnMuZ2V0U3Ryb2tlV2lkdGgoaSwgaiwgcmVhbEluZGV4KTtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBwYXRocyA9IHRoaXMuZHJhd0NhbmRsZVN0aWNrUGF0aHMoe1xuICAgICAgICAgICAgICBpbmRleGVzOiB7XG4gICAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgICBqOiBqLFxuICAgICAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgIHhEaXZpc2lvbjogeERpdmlzaW9uLFxuICAgICAgICAgICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgICAgICAgIHplcm9IOiB6ZXJvSCxcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICBlbFNlcmllczogZWxTZXJpZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgeSA9IHBhdGhzLnk7XG4gICAgICAgICAgICB4ID0gcGF0aHMueDtcbiAgICAgICAgICAgIGNvbG9yID0gcGF0aHMuY29sb3I7IC8vIHB1c2ggY3VycmVudCBYXG5cbiAgICAgICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgICB4QXJyai5wdXNoKHggKyBiYXJXaWR0aCAvIDIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB5QXJyai5wdXNoKHkpO1xuICAgICAgICAgICAgdmFyIHBhdGhGaWxsID0gZmlsbC5maWxsUGF0aCh7XG4gICAgICAgICAgICAgIHNlcmllc051bWJlcjogcmVhbEluZGV4LFxuICAgICAgICAgICAgICBkYXRhUG9pbnRJbmRleDogaixcbiAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICB2YWx1ZTogc2VyaWVzW2ldW2pdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBsaW5lRmlsbCA9IHRoaXMuY2FuZGxlc3RpY2tPcHRpb25zLndpY2sudXNlRmlsbENvbG9yID8gY29sb3IgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclNlcmllcyh7XG4gICAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgICAgICBwYXRoRmlsbDogcGF0aEZpbGwsXG4gICAgICAgICAgICAgIGxpbmVGaWxsOiBsaW5lRmlsbCxcbiAgICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgcGF0aEZyb206IHBhdGhzLnBhdGhGcm9tLFxuICAgICAgICAgICAgICBwYXRoVG86IHBhdGhzLnBhdGhUbyxcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICBlbFNlcmllczogZWxTZXJpZXMsXG4gICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodCxcbiAgICAgICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgICAgICBlbERhdGFMYWJlbHNXcmFwOiBlbERhdGFMYWJlbHNXcmFwLFxuICAgICAgICAgICAgICB2aXNpYmxlU2VyaWVzOiB0aGlzLnZpc2libGVJLFxuICAgICAgICAgICAgICB0eXBlOiAnY2FuZGxlc3RpY2snXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IC8vIHB1c2ggYWxsIHggdmFsIGFycmF5cyBpbnRvIG1haW4geEFyclxuXG5cbiAgICAgICAgICB3Lmdsb2JhbHMuc2VyaWVzWHZhbHVlc1tyZWFsSW5kZXhdID0geEFycmo7XG4gICAgICAgICAgdy5nbG9iYWxzLnNlcmllc1l2YWx1ZXNbcmVhbEluZGV4XSA9IHlBcnJqO1xuICAgICAgICAgIHJldC5hZGQoZWxTZXJpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd0NhbmRsZVN0aWNrUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Q2FuZGxlU3RpY2tQYXRocyhfcmVmKSB7XG4gICAgICAgIHZhciBpbmRleGVzID0gX3JlZi5pbmRleGVzLFxuICAgICAgICAgICAgeCA9IF9yZWYueCxcbiAgICAgICAgICAgIHkgPSBfcmVmLnksXG4gICAgICAgICAgICB4RGl2aXNpb24gPSBfcmVmLnhEaXZpc2lvbixcbiAgICAgICAgICAgIGJhcldpZHRoID0gX3JlZi5iYXJXaWR0aCxcbiAgICAgICAgICAgIHplcm9IID0gX3JlZi56ZXJvSCxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoID0gX3JlZi5zdHJva2VXaWR0aDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBpID0gaW5kZXhlcy5pO1xuICAgICAgICB2YXIgaiA9IGluZGV4ZXMuajtcbiAgICAgICAgdmFyIGlzUG9zaXRpdmUgPSB0cnVlO1xuICAgICAgICB2YXIgY29sb3JQb3MgPSB3LmNvbmZpZy5wbG90T3B0aW9ucy5jYW5kbGVzdGljay5jb2xvcnMudXB3YXJkO1xuICAgICAgICB2YXIgY29sb3JOZWcgPSB3LmNvbmZpZy5wbG90T3B0aW9ucy5jYW5kbGVzdGljay5jb2xvcnMuZG93bndhcmQ7XG4gICAgICAgIHZhciB5UmF0aW8gPSB0aGlzLnlSYXRpb1t0aGlzLnlheGlzSW5kZXhdO1xuICAgICAgICB2YXIgcmVhbEluZGV4ID0gaW5kZXhlcy5yZWFsSW5kZXg7XG4gICAgICAgIHZhciBvaGxjID0gdGhpcy5nZXRPSExDVmFsdWUocmVhbEluZGV4LCBqKTtcbiAgICAgICAgdmFyIGwxID0gemVyb0g7XG4gICAgICAgIHZhciBsMiA9IHplcm9IO1xuXG4gICAgICAgIGlmIChvaGxjLm8gPiBvaGxjLmMpIHtcbiAgICAgICAgICBpc1Bvc2l0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgeTEgPSBNYXRoLm1pbihvaGxjLm8sIG9obGMuYyk7XG4gICAgICAgIHZhciB5MiA9IE1hdGgubWF4KG9obGMubywgb2hsYy5jKTtcblxuICAgICAgICBpZiAody5nbG9iYWxzLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICB4ID0gKHcuZ2xvYmFscy5zZXJpZXNYW3JlYWxJbmRleF1bal0gLSB3Lmdsb2JhbHMubWluWCkgLyB0aGlzLnhSYXRpbyAtIGJhcldpZHRoIC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYXJYUG9zaXRpb24gPSB4ICsgYmFyV2lkdGggKiB0aGlzLnZpc2libGVJO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXJpZXNbaV1bal0gPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuc2VyaWVzW2ldW2pdID09PSBudWxsKSB7XG4gICAgICAgICAgeTEgPSB6ZXJvSDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5MSA9IHplcm9IIC0geTEgLyB5UmF0aW87XG4gICAgICAgICAgeTIgPSB6ZXJvSCAtIHkyIC8geVJhdGlvO1xuICAgICAgICAgIGwxID0gemVyb0ggLSBvaGxjLmggLyB5UmF0aW87XG4gICAgICAgICAgbDIgPSB6ZXJvSCAtIG9obGMubCAvIHlSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXRoVG8gPSBncmFwaGljcy5tb3ZlKGJhclhQb3NpdGlvbiwgemVyb0gpO1xuICAgICAgICB2YXIgcGF0aEZyb20gPSBncmFwaGljcy5tb3ZlKGJhclhQb3NpdGlvbiwgeTEpO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMucHJldmlvdXNQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcGF0aEZyb20gPSB0aGlzLmdldFByZXZpb3VzUGF0aChyZWFsSW5kZXgsIGosIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0aFRvID0gZ3JhcGhpY3MubW92ZShiYXJYUG9zaXRpb24sIHkyKSArIGdyYXBoaWNzLmxpbmUoYmFyWFBvc2l0aW9uICsgYmFyV2lkdGggLyAyLCB5MikgKyBncmFwaGljcy5saW5lKGJhclhQb3NpdGlvbiArIGJhcldpZHRoIC8gMiwgbDEpICsgZ3JhcGhpY3MubGluZShiYXJYUG9zaXRpb24gKyBiYXJXaWR0aCAvIDIsIHkyKSArIGdyYXBoaWNzLmxpbmUoYmFyWFBvc2l0aW9uICsgYmFyV2lkdGgsIHkyKSArIGdyYXBoaWNzLmxpbmUoYmFyWFBvc2l0aW9uICsgYmFyV2lkdGgsIHkxKSArIGdyYXBoaWNzLmxpbmUoYmFyWFBvc2l0aW9uICsgYmFyV2lkdGggLyAyLCB5MSkgKyBncmFwaGljcy5saW5lKGJhclhQb3NpdGlvbiArIGJhcldpZHRoIC8gMiwgbDIpICsgZ3JhcGhpY3MubGluZShiYXJYUG9zaXRpb24gKyBiYXJXaWR0aCAvIDIsIHkxKSArIGdyYXBoaWNzLmxpbmUoYmFyWFBvc2l0aW9uLCB5MSkgKyBncmFwaGljcy5saW5lKGJhclhQb3NpdGlvbiwgeTIgLSBzdHJva2VXaWR0aCAvIDIpO1xuICAgICAgICBwYXRoRnJvbSA9IHBhdGhGcm9tICsgZ3JhcGhpY3MubW92ZShiYXJYUG9zaXRpb24sIHkxKTtcblxuICAgICAgICBpZiAoIXcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgeCA9IHggKyB4RGl2aXNpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGhUbzogcGF0aFRvLFxuICAgICAgICAgIHBhdGhGcm9tOiBwYXRoRnJvbSxcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHkyLFxuICAgICAgICAgIGJhclhQb3NpdGlvbjogYmFyWFBvc2l0aW9uLFxuICAgICAgICAgIGNvbG9yOiBpc1Bvc2l0aXZlID8gY29sb3JQb3MgOiBjb2xvck5lZ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRPSExDVmFsdWVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPSExDVmFsdWUoaSwgaikge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvOiB3Lmdsb2JhbHMuc2VyaWVzQ2FuZGxlT1tpXVtqXSxcbiAgICAgICAgICBoOiB3Lmdsb2JhbHMuc2VyaWVzQ2FuZGxlSFtpXVtqXSxcbiAgICAgICAgICBsOiB3Lmdsb2JhbHMuc2VyaWVzQ2FuZGxlTFtpXVtqXSxcbiAgICAgICAgICBjOiB3Lmdsb2JhbHMuc2VyaWVzQ2FuZGxlQ1tpXVtqXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYW5kbGVTdGljaztcbiAgfShCYXIpO1xuXG4gIC8qKlxuICAgKiBBcGV4Q2hhcnRzIEhlYXRNYXAgQ2xhc3MuXG4gICAqIEBtb2R1bGUgSGVhdE1hcFxuICAgKiovXG5cbiAgdmFyIEhlYXRNYXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhlYXRNYXAoY3R4LCB4eVJhdGlvcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYXRNYXApO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdGhpcy54UmF0aW8gPSB4eVJhdGlvcy54UmF0aW87XG4gICAgICB0aGlzLnlSYXRpbyA9IHh5UmF0aW9zLnlSYXRpbztcbiAgICAgIHRoaXMubmVnUmFuZ2UgPSBmYWxzZTtcbiAgICAgIHRoaXMuZHluYW1pY0FuaW0gPSB0aGlzLncuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbjtcbiAgICAgIHRoaXMucmVjdFJhZGl1cyA9IHRoaXMudy5jb25maWcucGxvdE9wdGlvbnMuaGVhdG1hcC5yYWRpdXM7XG4gICAgICB0aGlzLnN0cm9rZVdpZHRoID0gdGhpcy53LmNvbmZpZy5zdHJva2Uuc2hvdyA/IHRoaXMudy5jb25maWcuc3Ryb2tlLndpZHRoIDogMDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSGVhdE1hcCwgW3tcbiAgICAgIGtleTogXCJkcmF3XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhdyhzZXJpZXMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciByZXQgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLWhlYXRtYXAnXG4gICAgICAgIH0pO1xuICAgICAgICByZXQuYXR0cignY2xpcC1wYXRoJywgXCJ1cmwoI2dyaWRSZWN0TWFza1wiLmNvbmNhdCh3Lmdsb2JhbHMuY3VpZCwgXCIpXCIpKTsgLy8gd2lkdGggZGl2aWRlZCBpbnRvIGVxdWFsIHBhcnRzXG5cbiAgICAgICAgdmFyIHhEaXZpc2lvbiA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLyB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgdmFyIHlEaXZpc2lvbiA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC8gdy5nbG9iYWxzLnNlcmllcy5sZW5ndGg7XG4gICAgICAgIHZhciB5MSA9IDA7XG4gICAgICAgIHZhciByZXYgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGVja0NvbG9yUmFuZ2UoKTtcbiAgICAgICAgdmFyIGhlYXRTZXJpZXMgPSBzZXJpZXMuc2xpY2UoKTtcblxuICAgICAgICBpZiAody5jb25maWcueWF4aXNbMF0ucmV2ZXJzZWQpIHtcbiAgICAgICAgICByZXYgPSB0cnVlO1xuICAgICAgICAgIGhlYXRTZXJpZXMucmV2ZXJzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IHJldiA/IDAgOiBoZWF0U2VyaWVzLmxlbmd0aCAtIDE7IHJldiA/IGkgPCBoZWF0U2VyaWVzLmxlbmd0aCA6IGkgPj0gMDsgcmV2ID8gaSsrIDogaS0tKSB7XG4gICAgICAgICAgLy8gZWwgdG8gd2hpY2ggc2VyaWVzIHdpbGwgYmUgZHJhd25cbiAgICAgICAgICB2YXIgZWxTZXJpZXMgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogXCJhcGV4Y2hhcnRzLXNlcmllcyBhcGV4Y2hhcnRzLWhlYXRtYXAtc2VyaWVzXCIsXG4gICAgICAgICAgICBzZXJpZXNOYW1lOiBVdGlscy5lc2NhcGVTdHJpbmcody5nbG9iYWxzLnNlcmllc05hbWVzW2ldKSxcbiAgICAgICAgICAgIHJlbDogaSArIDEsXG4gICAgICAgICAgICAnZGF0YTpyZWFsSW5kZXgnOiBpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICB2YXIgc2hhZG93ID0gdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdztcbiAgICAgICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICAgICAgZmlsdGVycy5kcm9wU2hhZG93KGVsU2VyaWVzLCBzaGFkb3csIGkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB4MSA9IDA7XG5cbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGhlYXRTZXJpZXNbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBjb2xvclNoYWRlUGVyY2VudCA9IDE7XG4gICAgICAgICAgICB2YXIgc2hhZGVJbnRlbnNpdHkgPSB3LmNvbmZpZy5wbG90T3B0aW9ucy5oZWF0bWFwLnNoYWRlSW50ZW5zaXR5O1xuICAgICAgICAgICAgdmFyIGhlYXRDb2xvclByb3BzID0gdGhpcy5kZXRlcm1pbmVIZWF0Q29sb3IoaSwgaik7XG5cbiAgICAgICAgICAgIGlmICh3Lmdsb2JhbHMuaGFzTmVncyB8fCB0aGlzLm5lZ1JhbmdlKSB7XG4gICAgICAgICAgICAgIGlmICh3LmNvbmZpZy5wbG90T3B0aW9ucy5oZWF0bWFwLnJldmVyc2VOZWdhdGl2ZVNoYWRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhlYXRDb2xvclByb3BzLnBlcmNlbnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBjb2xvclNoYWRlUGVyY2VudCA9IGhlYXRDb2xvclByb3BzLnBlcmNlbnQgLyAxMDAgKiAoc2hhZGVJbnRlbnNpdHkgKiAxLjI1KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29sb3JTaGFkZVBlcmNlbnQgPSAoMSAtIGhlYXRDb2xvclByb3BzLnBlcmNlbnQgLyAxMDApICogKHNoYWRlSW50ZW5zaXR5ICogMS4yNSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChoZWF0Q29sb3JQcm9wcy5wZXJjZW50IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yU2hhZGVQZXJjZW50ID0gMSAtICgxICsgaGVhdENvbG9yUHJvcHMucGVyY2VudCAvIDEwMCkgKiBzaGFkZUludGVuc2l0eTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29sb3JTaGFkZVBlcmNlbnQgPSAoMSAtIGhlYXRDb2xvclByb3BzLnBlcmNlbnQgLyAxMDApICogc2hhZGVJbnRlbnNpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb2xvclNoYWRlUGVyY2VudCA9IDEgLSBoZWF0Q29sb3JQcm9wcy5wZXJjZW50IC8gMTAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY29sb3IgPSBoZWF0Q29sb3JQcm9wcy5jb2xvcjtcbiAgICAgICAgICAgIHZhciB1dGlscyA9IG5ldyBVdGlscygpO1xuXG4gICAgICAgICAgICBpZiAody5jb25maWcucGxvdE9wdGlvbnMuaGVhdG1hcC5lbmFibGVTaGFkZXMpIHtcbiAgICAgICAgICAgICAgaWYgKGNvbG9yU2hhZGVQZXJjZW50IDwgMCkgY29sb3JTaGFkZVBlcmNlbnQgPSAwO1xuICAgICAgICAgICAgICBjb2xvciA9IFV0aWxzLmhleFRvUmdiYSh1dGlscy5zaGFkZUNvbG9yKGNvbG9yU2hhZGVQZXJjZW50LCBoZWF0Q29sb3JQcm9wcy5jb2xvciksIHcuY29uZmlnLmZpbGwub3BhY2l0eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy5maWxsLnR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgICAgICAgdmFyIGZpbGwgPSBuZXcgRmlsbCh0aGlzLmN0eCk7XG4gICAgICAgICAgICAgIGNvbG9yID0gZmlsbC5maWxsUGF0aCh7XG4gICAgICAgICAgICAgICAgc2VyaWVzTnVtYmVyOiBpLFxuICAgICAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBqLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IHcuZ2xvYmFscy5oYXNOZWdzID8gaGVhdENvbG9yUHJvcHMucGVyY2VudCA8IDAgPyAxIC0gKDEgKyBoZWF0Q29sb3JQcm9wcy5wZXJjZW50IC8gMTAwKSA6IHNoYWRlSW50ZW5zaXR5ICsgaGVhdENvbG9yUHJvcHMucGVyY2VudCAvIDEwMCA6IGhlYXRDb2xvclByb3BzLnBlcmNlbnQgLyAxMDAsXG4gICAgICAgICAgICAgICAgcGF0dGVybklEOiBVdGlscy5yYW5kb21JZCgpLFxuICAgICAgICAgICAgICAgIHdpZHRoOiB3LmNvbmZpZy5maWxsLmltYWdlLndpZHRoID8gdy5jb25maWcuZmlsbC5pbWFnZS53aWR0aCA6IHhEaXZpc2lvbixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHcuY29uZmlnLmZpbGwuaW1hZ2UuaGVpZ2h0ID8gdy5jb25maWcuZmlsbC5pbWFnZS5oZWlnaHQgOiB5RGl2aXNpb25cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByYWRpdXMgPSB0aGlzLnJlY3RSYWRpdXM7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IGdyYXBoaWNzLmRyYXdSZWN0KHgxLCB5MSwgeERpdmlzaW9uLCB5RGl2aXNpb24sIHJhZGl1cyk7XG4gICAgICAgICAgICByZWN0LmF0dHIoe1xuICAgICAgICAgICAgICBjeDogeDEsXG4gICAgICAgICAgICAgIGN5OiB5MVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWN0Lm5vZGUuY2xhc3NMaXN0LmFkZCgnYXBleGNoYXJ0cy1oZWF0bWFwLXJlY3QnKTtcbiAgICAgICAgICAgIGVsU2VyaWVzLmFkZChyZWN0KTtcbiAgICAgICAgICAgIHJlY3QuYXR0cih7XG4gICAgICAgICAgICAgIGZpbGw6IGNvbG9yLFxuICAgICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgICAgdmFsOiBoZWF0U2VyaWVzW2ldW2pdLFxuICAgICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgICAgc3Ryb2tlOiB3LmNvbmZpZy5wbG90T3B0aW9ucy5oZWF0bWFwLnVzZUZpbGxDb2xvckFzU3Ryb2tlID8gY29sb3IgOiB3Lmdsb2JhbHMuc3Ryb2tlLmNvbG9yc1swXSxcbiAgICAgICAgICAgICAgY29sb3I6IGNvbG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlY3Qubm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZ3JhcGhpY3MucGF0aE1vdXNlRW50ZXIuYmluZCh0aGlzLCByZWN0KSk7XG4gICAgICAgICAgICByZWN0Lm5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGdyYXBoaWNzLnBhdGhNb3VzZUxlYXZlLmJpbmQodGhpcywgcmVjdCkpO1xuICAgICAgICAgICAgcmVjdC5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGdyYXBoaWNzLnBhdGhNb3VzZURvd24uYmluZCh0aGlzLCByZWN0KSk7XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmVuYWJsZWQgJiYgIXcuZ2xvYmFscy5kYXRhQ2hhbmdlZCkge1xuICAgICAgICAgICAgICB2YXIgc3BlZWQgPSAxO1xuXG4gICAgICAgICAgICAgIGlmICghdy5nbG9iYWxzLnJlc2l6ZWQpIHtcbiAgICAgICAgICAgICAgICBzcGVlZCA9IHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuc3BlZWQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVIZWF0TWFwKHJlY3QsIHgxLCB5MSwgeERpdmlzaW9uLCB5RGl2aXNpb24sIHNwZWVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHcuZ2xvYmFscy5kYXRhQ2hhbmdlZCkge1xuICAgICAgICAgICAgICB2YXIgX3NwZWVkID0gMTtcblxuICAgICAgICAgICAgICBpZiAodGhpcy5keW5hbWljQW5pbS5lbmFibGVkICYmIHcuZ2xvYmFscy5zaG91bGRBbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgX3NwZWVkID0gdGhpcy5keW5hbWljQW5pbS5zcGVlZDtcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JGcm9tID0gdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbaV0gJiYgdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbaV1bal0gJiYgdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbaV1bal0uY29sb3I7XG4gICAgICAgICAgICAgICAgaWYgKCFjb2xvckZyb20pIGNvbG9yRnJvbSA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDApJztcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVIZWF0Q29sb3IocmVjdCwgVXRpbHMuaXNDb2xvckhleChjb2xvckZyb20pID8gY29sb3JGcm9tIDogVXRpbHMucmdiMmhleChjb2xvckZyb20pLCBVdGlscy5pc0NvbG9ySGV4KGNvbG9yKSA/IGNvbG9yIDogVXRpbHMucmdiMmhleChjb2xvciksIF9zcGVlZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRhdGFMYWJlbHMgPSB0aGlzLmNhbGN1bGF0ZUhlYXRtYXBEYXRhTGFiZWxzKHtcbiAgICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICAgIHk6IHkxLFxuICAgICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgICBqOiBqLFxuICAgICAgICAgICAgICBoZWF0Q29sb3JQcm9wczogaGVhdENvbG9yUHJvcHMsXG4gICAgICAgICAgICAgIHNlcmllczogaGVhdFNlcmllcyxcbiAgICAgICAgICAgICAgcmVjdEhlaWdodDogeURpdmlzaW9uLFxuICAgICAgICAgICAgICByZWN0V2lkdGg6IHhEaXZpc2lvblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChkYXRhTGFiZWxzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGVsU2VyaWVzLmFkZChkYXRhTGFiZWxzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeDEgPSB4MSArIHhEaXZpc2lvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB5MSA9IHkxICsgeURpdmlzaW9uO1xuICAgICAgICAgIHJldC5hZGQoZWxTZXJpZXMpO1xuICAgICAgICB9IC8vIGFkanVzdCB5YXhpcyBsYWJlbHMgZm9yIGhlYXRtYXBcblxuXG4gICAgICAgIHZhciB5QXhpc1NjYWxlID0gdy5nbG9iYWxzLnlBeGlzU2NhbGVbMF0ucmVzdWx0LnNsaWNlKCk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnlheGlzWzBdLnJldmVyc2VkKSB7XG4gICAgICAgICAgeUF4aXNTY2FsZS51bnNoaWZ0KCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5QXhpc1NjYWxlLnB1c2goJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgdy5nbG9iYWxzLnlBeGlzU2NhbGVbMF0ucmVzdWx0ID0geUF4aXNTY2FsZTtcbiAgICAgICAgdmFyIGRpdmlzb3IgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAvIHcuZ2xvYmFscy5zZXJpZXMubGVuZ3RoO1xuICAgICAgICB3LmNvbmZpZy55YXhpc1swXS5sYWJlbHMub2Zmc2V0WSA9IC0oZGl2aXNvciAvIDIpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjaGVja0NvbG9yUmFuZ2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0NvbG9yUmFuZ2UoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBoZWF0bWFwID0gdy5jb25maWcucGxvdE9wdGlvbnMuaGVhdG1hcDtcblxuICAgICAgICBpZiAoaGVhdG1hcC5jb2xvclNjYWxlLnJhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaGVhdG1hcC5jb2xvclNjYWxlLnJhbmdlcy5tYXAoZnVuY3Rpb24gKHJhbmdlLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHJhbmdlLmZyb20gPD0gMCkge1xuICAgICAgICAgICAgICBfdGhpcy5uZWdSYW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGV0ZXJtaW5lSGVhdENvbG9yXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGV0ZXJtaW5lSGVhdENvbG9yKGksIGopIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB2YWwgPSB3Lmdsb2JhbHMuc2VyaWVzW2ldW2pdO1xuICAgICAgICB2YXIgaGVhdG1hcCA9IHcuY29uZmlnLnBsb3RPcHRpb25zLmhlYXRtYXA7XG4gICAgICAgIHZhciBzZXJpZXNOdW1iZXIgPSBoZWF0bWFwLmNvbG9yU2NhbGUuaW52ZXJzZSA/IGogOiBpO1xuICAgICAgICB2YXIgY29sb3IgPSB3Lmdsb2JhbHMuY29sb3JzW3Nlcmllc051bWJlcl07XG4gICAgICAgIHZhciBmb3JlQ29sb3IgPSBudWxsO1xuICAgICAgICB2YXIgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHcuZ2xvYmFscy5zZXJpZXNbaV0pKTtcbiAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh3Lmdsb2JhbHMuc2VyaWVzW2ldKSk7XG5cbiAgICAgICAgaWYgKCFoZWF0bWFwLmRpc3RyaWJ1dGVkKSB7XG4gICAgICAgICAgbWluID0gdy5nbG9iYWxzLm1pblk7XG4gICAgICAgICAgbWF4ID0gdy5nbG9iYWxzLm1heFk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGhlYXRtYXAuY29sb3JTY2FsZS5taW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbWluID0gaGVhdG1hcC5jb2xvclNjYWxlLm1pbiA8IHcuZ2xvYmFscy5taW5ZID8gaGVhdG1hcC5jb2xvclNjYWxlLm1pbiA6IHcuZ2xvYmFscy5taW5ZO1xuICAgICAgICAgIG1heCA9IGhlYXRtYXAuY29sb3JTY2FsZS5tYXggPiB3Lmdsb2JhbHMubWF4WSA/IGhlYXRtYXAuY29sb3JTY2FsZS5tYXggOiB3Lmdsb2JhbHMubWF4WTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbCA9IE1hdGguYWJzKG1heCkgKyBNYXRoLmFicyhtaW4pO1xuICAgICAgICB2YXIgcGVyY2VudCA9IDEwMCAqIHZhbCAvICh0b3RhbCA9PT0gMCA/IHRvdGFsIC0gMC4wMDAwMDEgOiB0b3RhbCk7XG5cbiAgICAgICAgaWYgKGhlYXRtYXAuY29sb3JTY2FsZS5yYW5nZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBjb2xvclJhbmdlID0gaGVhdG1hcC5jb2xvclNjYWxlLnJhbmdlcztcbiAgICAgICAgICBjb2xvclJhbmdlLm1hcChmdW5jdGlvbiAocmFuZ2UsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAodmFsID49IHJhbmdlLmZyb20gJiYgdmFsIDw9IHJhbmdlLnRvKSB7XG4gICAgICAgICAgICAgIGNvbG9yID0gcmFuZ2UuY29sb3I7XG4gICAgICAgICAgICAgIGZvcmVDb2xvciA9IHJhbmdlLmZvcmVDb2xvciA/IHJhbmdlLmZvcmVDb2xvciA6IG51bGw7XG4gICAgICAgICAgICAgIG1pbiA9IHJhbmdlLmZyb207XG4gICAgICAgICAgICAgIG1heCA9IHJhbmdlLnRvO1xuICAgICAgICAgICAgICB2YXIgclRvdGFsID0gTWF0aC5hYnMobWF4KSArIE1hdGguYWJzKG1pbik7XG4gICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDAgKiB2YWwgLyAoclRvdGFsID09PSAwID8gclRvdGFsIC0gMC4wMDAwMDEgOiByVG90YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgZm9yZUNvbG9yOiBmb3JlQ29sb3IsXG4gICAgICAgICAgcGVyY2VudDogcGVyY2VudFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjYWxjdWxhdGVIZWF0bWFwRGF0YUxhYmVsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZUhlYXRtYXBEYXRhTGFiZWxzKF9yZWYpIHtcbiAgICAgICAgdmFyIHggPSBfcmVmLngsXG4gICAgICAgICAgICB5ID0gX3JlZi55LFxuICAgICAgICAgICAgaSA9IF9yZWYuaSxcbiAgICAgICAgICAgIGogPSBfcmVmLmosXG4gICAgICAgICAgICBoZWF0Q29sb3JQcm9wcyA9IF9yZWYuaGVhdENvbG9yUHJvcHMsXG4gICAgICAgICAgICBzZXJpZXMgPSBfcmVmLnNlcmllcyxcbiAgICAgICAgICAgIHJlY3RIZWlnaHQgPSBfcmVmLnJlY3RIZWlnaHQsXG4gICAgICAgICAgICByZWN0V2lkdGggPSBfcmVmLnJlY3RXaWR0aDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIGxldCBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eClcblxuICAgICAgICB2YXIgZGF0YUxhYmVsc0NvbmZpZyA9IHcuY29uZmlnLmRhdGFMYWJlbHM7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBkYXRhTGFiZWxzID0gbmV3IERhdGFMYWJlbHModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gZGF0YUxhYmVsc0NvbmZpZy5mb3JtYXR0ZXI7XG4gICAgICAgIHZhciBlbERhdGFMYWJlbHNXcmFwID0gbnVsbDtcblxuICAgICAgICBpZiAoZGF0YUxhYmVsc0NvbmZpZy5lbmFibGVkKSB7XG4gICAgICAgICAgZWxEYXRhTGFiZWxzV3JhcCA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1kYXRhLWxhYmVscydcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgb2ZmWCA9IGRhdGFMYWJlbHNDb25maWcub2Zmc2V0WDtcbiAgICAgICAgICB2YXIgb2ZmWSA9IGRhdGFMYWJlbHNDb25maWcub2Zmc2V0WTtcbiAgICAgICAgICB2YXIgZGF0YUxhYmVsc1ggPSB4ICsgcmVjdFdpZHRoIC8gMiArIG9mZlg7XG4gICAgICAgICAgdmFyIGRhdGFMYWJlbHNZID0geSArIHJlY3RIZWlnaHQgLyAyICsgcGFyc2VGbG9hdChkYXRhTGFiZWxzQ29uZmlnLnN0eWxlLmZvbnRTaXplKSAvIDMgKyBvZmZZO1xuICAgICAgICAgIHZhciB0ZXh0ID0gZm9ybWF0dGVyKHcuZ2xvYmFscy5zZXJpZXNbaV1bal0sIHtcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiBpLFxuICAgICAgICAgICAgZGF0YVBvaW50SW5kZXg6IGosXG4gICAgICAgICAgICB3OiB3XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGF0YUxhYmVscy5wbG90RGF0YUxhYmVsc1RleHQoe1xuICAgICAgICAgICAgeDogZGF0YUxhYmVsc1gsXG4gICAgICAgICAgICB5OiBkYXRhTGFiZWxzWSxcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgIGNvbG9yOiBoZWF0Q29sb3JQcm9wcy5mb3JlQ29sb3IsXG4gICAgICAgICAgICBwYXJlbnQ6IGVsRGF0YUxhYmVsc1dyYXAsXG4gICAgICAgICAgICBkYXRhTGFiZWxzQ29uZmlnOiBkYXRhTGFiZWxzQ29uZmlnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxEYXRhTGFiZWxzV3JhcDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYW5pbWF0ZUhlYXRNYXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbmltYXRlSGVhdE1hcChlbCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgc3BlZWQpIHtcbiAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyh0aGlzLmN0eCk7XG4gICAgICAgIGFuaW1hdGlvbnMuYW5pbWF0ZVJlY3QoZWwsIHtcbiAgICAgICAgICB4OiB4ICsgd2lkdGggLyAyLFxuICAgICAgICAgIHk6IHkgKyBoZWlnaHQgLyAyLFxuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9LCB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5LFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9LCBzcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFuaW1hdGlvbnMuYW5pbWF0aW9uQ29tcGxldGVkKGVsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFuaW1hdGVIZWF0Q29sb3JcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbmltYXRlSGVhdENvbG9yKGVsLCBjb2xvckZyb20sIGNvbG9yVG8sIHNwZWVkKSB7XG4gICAgICAgIGVsLmF0dHIoe1xuICAgICAgICAgIGZpbGw6IGNvbG9yRnJvbVxuICAgICAgICB9KS5hbmltYXRlKHNwZWVkKS5hdHRyKHtcbiAgICAgICAgICBmaWxsOiBjb2xvclRvXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBIZWF0TWFwO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgUmFkYXIgQ2xhc3MgZm9yIFNwaWRlci9SYWRhciBDaGFydHMuXG4gICAqIEBtb2R1bGUgUmFkYXJcbiAgICoqL1xuXG4gIHZhciBSYWRhciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmFkYXIoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFkYXIpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdGhpcy5jaGFydFR5cGUgPSB0aGlzLncuY29uZmlnLmNoYXJ0LnR5cGU7XG4gICAgICB0aGlzLmluaXRpYWxBbmltID0gdGhpcy53LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmVuYWJsZWQ7XG4gICAgICB0aGlzLmR5bmFtaWNBbmltID0gdGhpcy5pbml0aWFsQW5pbSAmJiB0aGlzLncuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5lbmFibGVkO1xuICAgICAgdGhpcy5hbmltRHVyID0gMDtcbiAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgdGhpcy5ncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICB0aGlzLmxpbmVDb2xvckFyciA9IHcuZ2xvYmFscy5zdHJva2UuY29sb3JzICE9PSB1bmRlZmluZWQgPyB3Lmdsb2JhbHMuc3Ryb2tlLmNvbG9ycyA6IHcuZ2xvYmFscy5jb2xvcnM7XG4gICAgICB0aGlzLmRlZmF1bHRTaXplID0gdy5nbG9iYWxzLnN2Z0hlaWdodCA8IHcuZ2xvYmFscy5zdmdXaWR0aCA/IHcuZ2xvYmFscy5ncmlkSGVpZ2h0ICsgdy5nbG9iYWxzLmdvbGRlblBhZGRpbmcgKiAxLjUgOiB3Lmdsb2JhbHMuZ3JpZFdpZHRoO1xuICAgICAgdGhpcy5tYXhWYWx1ZSA9IHRoaXMudy5nbG9iYWxzLm1heFk7XG4gICAgICB0aGlzLm1pblZhbHVlID0gdGhpcy53Lmdsb2JhbHMubWluWTtcbiAgICAgIHRoaXMucG9seWdvbnMgPSB3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRhci5wb2x5Z29ucztcbiAgICAgIHZhciBsb25nZXN0WGF4aXNMYWJlbCA9IHcuZ2xvYmFscy5sYWJlbHMuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgfSlbMF07XG4gICAgICB2YXIgbGFiZWxXaWR0aCA9IHRoaXMuZ3JhcGhpY3MuZ2V0VGV4dFJlY3RzKGxvbmdlc3RYYXhpc0xhYmVsLCB3LmNvbmZpZy54YXhpcy5sYWJlbHMuc3R5bGUuZm9udFNpemUpO1xuICAgICAgdGhpcy5zdHJva2VXaWR0aCA9IHcuY29uZmlnLnN0cm9rZS5zaG93ID8gdy5jb25maWcuc3Ryb2tlLndpZHRoIDogMDtcbiAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuZGVmYXVsdFNpemUgLyAyLjEgLSB0aGlzLnN0cm9rZVdpZHRoIC0gdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5ibHVyO1xuXG4gICAgICBpZiAody5jb25maWcueGF4aXMubGFiZWxzLnNob3cpIHtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5zaXplIC0gbGFiZWxXaWR0aC53aWR0aCAvIDEuNzU7XG4gICAgICB9XG5cbiAgICAgIGlmICh3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRhci5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkYXIuc2l6ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kYXRhUmFkaXVzT2ZQZXJjZW50ID0gW107XG4gICAgICB0aGlzLmRhdGFSYWRpdXMgPSBbXTtcbiAgICAgIHRoaXMuYW5nbGVBcnIgPSBbXTtcbiAgICAgIHRoaXMueWF4aXNMYWJlbHNUZXh0c1BvcyA9IFtdO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhSYWRhciwgW3tcbiAgICAgIGtleTogXCJkcmF3XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhdyhzZXJpZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGZpbGwgPSBuZXcgRmlsbCh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBhbGxTZXJpZXMgPSBbXTtcbiAgICAgICAgdmFyIGRhdGFMYWJlbHMgPSBuZXcgRGF0YUxhYmVscyh0aGlzLmN0eCk7XG5cbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmRhdGFQb2ludHNMZW4gPSBzZXJpZXNbdy5nbG9iYWxzLm1heFZhbHNJbkFycmF5SW5kZXhdLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlzQW5nbGUgPSBNYXRoLlBJICogMiAvIHRoaXMuZGF0YVBvaW50c0xlbjtcbiAgICAgICAgdmFyIGhhbGZXID0gdy5nbG9iYWxzLmdyaWRXaWR0aCAvIDI7XG4gICAgICAgIHZhciBoYWxmSCA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0IC8gMjtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZVggPSBoYWxmVyArIHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGFyLm9mZnNldFg7XG4gICAgICAgIHZhciB0cmFuc2xhdGVZID0gaGFsZkggKyB3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRhci5vZmZzZXRZO1xuICAgICAgICB2YXIgcmV0ID0gdGhpcy5ncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXJhZGFyLXNlcmllcyBhcGV4Y2hhcnRzLXBsb3Qtc2VyaWVzJyxcbiAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiLmNvbmNhdCh0cmFuc2xhdGVYIHx8IDAsIFwiLCBcIikuY29uY2F0KHRyYW5zbGF0ZVkgfHwgMCwgXCIpXCIpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZGF0YVBvaW50c1BvcyA9IFtdO1xuICAgICAgICB2YXIgZWxQb2ludHNNYWluID0gbnVsbDtcbiAgICAgICAgdmFyIGVsRGF0YVBvaW50c01haW4gPSBudWxsO1xuICAgICAgICB0aGlzLnlheGlzTGFiZWxzID0gdGhpcy5ncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXlheGlzJ1xuICAgICAgICB9KTtcbiAgICAgICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKHMsIGkpIHtcbiAgICAgICAgICB2YXIgbG9uZ2VzdFNlcmllcyA9IHMubGVuZ3RoID09PSB3Lmdsb2JhbHMuZGF0YVBvaW50czsgLy8gZWwgdG8gd2hpY2ggc2VyaWVzIHdpbGwgYmUgZHJhd25cblxuICAgICAgICAgIHZhciBlbFNlcmllcyA9IF90aGlzLmdyYXBoaWNzLmdyb3VwKCkuYXR0cih7XG4gICAgICAgICAgICBjbGFzczogXCJhcGV4Y2hhcnRzLXNlcmllc1wiLFxuICAgICAgICAgICAgJ2RhdGE6bG9uZ2VzdFNlcmllcyc6IGxvbmdlc3RTZXJpZXMsXG4gICAgICAgICAgICBzZXJpZXNOYW1lOiBVdGlscy5lc2NhcGVTdHJpbmcody5nbG9iYWxzLnNlcmllc05hbWVzW2ldKSxcbiAgICAgICAgICAgIHJlbDogaSArIDEsXG4gICAgICAgICAgICAnZGF0YTpyZWFsSW5kZXgnOiBpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfdGhpcy5kYXRhUmFkaXVzT2ZQZXJjZW50W2ldID0gW107XG4gICAgICAgICAgX3RoaXMuZGF0YVJhZGl1c1tpXSA9IFtdO1xuICAgICAgICAgIF90aGlzLmFuZ2xlQXJyW2ldID0gW107XG4gICAgICAgICAgcy5mb3JFYWNoKGZ1bmN0aW9uIChkdiwgaikge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gTWF0aC5hYnMoX3RoaXMubWF4VmFsdWUgLSBfdGhpcy5taW5WYWx1ZSk7XG4gICAgICAgICAgICBkdiA9IGR2ICsgTWF0aC5hYnMoX3RoaXMubWluVmFsdWUpO1xuICAgICAgICAgICAgX3RoaXMuZGF0YVJhZGl1c09mUGVyY2VudFtpXVtqXSA9IGR2IC8gcmFuZ2U7XG4gICAgICAgICAgICBfdGhpcy5kYXRhUmFkaXVzW2ldW2pdID0gX3RoaXMuZGF0YVJhZGl1c09mUGVyY2VudFtpXVtqXSAqIF90aGlzLnNpemU7XG4gICAgICAgICAgICBfdGhpcy5hbmdsZUFycltpXVtqXSA9IGogKiBfdGhpcy5kaXNBbmdsZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkYXRhUG9pbnRzUG9zID0gX3RoaXMuZ2V0RGF0YVBvaW50c1BvcyhfdGhpcy5kYXRhUmFkaXVzW2ldLCBfdGhpcy5hbmdsZUFycltpXSk7XG5cbiAgICAgICAgICB2YXIgcGF0aHMgPSBfdGhpcy5jcmVhdGVQYXRocyhkYXRhUG9pbnRzUG9zLCB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMFxuICAgICAgICAgIH0pOyAvLyBwb2ludHNcblxuXG4gICAgICAgICAgZWxQb2ludHNNYWluID0gX3RoaXMuZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXNlcmllcy1tYXJrZXJzLXdyYXAgYXBleGNoYXJ0cy1lbGVtZW50LWhpZGRlbidcbiAgICAgICAgICB9KTsgLy8gZGF0YXBvaW50c1xuXG4gICAgICAgICAgZWxEYXRhUG9pbnRzTWFpbiA9IF90aGlzLmdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiBcImFwZXhjaGFydHMtZGF0YWxhYmVsc1wiLFxuICAgICAgICAgICAgJ2RhdGE6cmVhbEluZGV4JzogaVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHcuZ2xvYmFscy5kZWxheWVkRWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICBlbDogZWxQb2ludHNNYWluLm5vZGUsXG4gICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBkZWZhdWx0UmVuZGVyZWRQYXRoT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICByZWFsSW5kZXg6IGksXG4gICAgICAgICAgICBhbmltYXRpb25EZWxheTogaSxcbiAgICAgICAgICAgIGluaXRpYWxTcGVlZDogdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5zcGVlZCxcbiAgICAgICAgICAgIGRhdGFDaGFuZ2VTcGVlZDogdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5keW5hbWljQW5pbWF0aW9uLnNwZWVkLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImFwZXhjaGFydHMtcmFkYXJcIixcbiAgICAgICAgICAgIHNob3VsZENsaXBUb0dyaWQ6IGZhbHNlLFxuICAgICAgICAgICAgYmluZEV2ZW50c09uUGF0aHM6IGZhbHNlLFxuICAgICAgICAgICAgc3Ryb2tlOiB3Lmdsb2JhbHMuc3Ryb2tlLmNvbG9yc1tpXSxcbiAgICAgICAgICAgIHN0cm9rZUxpbmVDYXA6IHcuY29uZmlnLnN0cm9rZS5saW5lQ2FwXG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgcGF0aEZyb20gPSBudWxsO1xuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHBhdGhGcm9tID0gX3RoaXMuZ2V0UHJldmlvdXNQYXRoKGkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgcGF0aHMubGluZVBhdGhzVG8ubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJlZExpbmVQYXRoID0gX3RoaXMuZ3JhcGhpY3MucmVuZGVyUGF0aHMoX29iamVjdFNwcmVhZDIoe30sIGRlZmF1bHRSZW5kZXJlZFBhdGhPcHRpb25zLCB7XG4gICAgICAgICAgICAgIHBhdGhGcm9tOiBwYXRoRnJvbSA9PT0gbnVsbCA/IHBhdGhzLmxpbmVQYXRoc0Zyb21bcF0gOiBwYXRoRnJvbSxcbiAgICAgICAgICAgICAgcGF0aFRvOiBwYXRocy5saW5lUGF0aHNUb1twXSxcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IEFycmF5LmlzQXJyYXkoX3RoaXMuc3Ryb2tlV2lkdGgpID8gX3RoaXMuc3Ryb2tlV2lkdGhbaV0gOiBfdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgICAgICAgICBkcmF3U2hhZG93OiBmYWxzZVxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBlbFNlcmllcy5hZGQocmVuZGVyZWRMaW5lUGF0aCk7XG4gICAgICAgICAgICB2YXIgcGF0aEZpbGwgPSBmaWxsLmZpbGxQYXRoKHtcbiAgICAgICAgICAgICAgc2VyaWVzTnVtYmVyOiBpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHJlbmRlcmVkQXJlYVBhdGggPSBfdGhpcy5ncmFwaGljcy5yZW5kZXJQYXRocyhfb2JqZWN0U3ByZWFkMih7fSwgZGVmYXVsdFJlbmRlcmVkUGF0aE9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgcGF0aEZyb206IHBhdGhGcm9tID09PSBudWxsID8gcGF0aHMuYXJlYVBhdGhzRnJvbVtwXSA6IHBhdGhGcm9tLFxuICAgICAgICAgICAgICBwYXRoVG86IHBhdGhzLmFyZWFQYXRoc1RvW3BdLFxuICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAgICAgZmlsbDogcGF0aEZpbGwsXG4gICAgICAgICAgICAgIGRyYXdTaGFkb3c6IGZhbHNlXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5kcm9wU2hhZG93LmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSBuZXcgRmlsdGVycyhfdGhpcy5jdHgpO1xuICAgICAgICAgICAgICB2YXIgc2hhZG93ID0gdy5jb25maWcuY2hhcnQuZHJvcFNoYWRvdztcbiAgICAgICAgICAgICAgZmlsdGVycy5kcm9wU2hhZG93KHJlbmRlcmVkQXJlYVBhdGgsIE9iamVjdC5hc3NpZ24oe30sIHNoYWRvdywge1xuICAgICAgICAgICAgICAgIG5vVXNlclNwYWNlT25Vc2U6IHRydWVcbiAgICAgICAgICAgICAgfSksIGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbFNlcmllcy5hZGQocmVuZGVyZWRBcmVhUGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcy5mb3JFYWNoKGZ1bmN0aW9uIChzaiwgaikge1xuICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBuZXcgTWFya2VycyhfdGhpcy5jdHgpO1xuICAgICAgICAgICAgdmFyIG9wdHMgPSBtYXJrZXJzLmdldE1hcmtlckNvbmZpZygnYXBleGNoYXJ0cy1tYXJrZXInLCBpLCBqKTtcblxuICAgICAgICAgICAgdmFyIHBvaW50ID0gX3RoaXMuZ3JhcGhpY3MuZHJhd01hcmtlcihkYXRhUG9pbnRzUG9zW2pdLngsIGRhdGFQb2ludHNQb3Nbal0ueSwgb3B0cyk7XG5cbiAgICAgICAgICAgIHBvaW50LmF0dHIoJ3JlbCcsIGopO1xuICAgICAgICAgICAgcG9pbnQuYXR0cignaicsIGopO1xuICAgICAgICAgICAgcG9pbnQuYXR0cignaW5kZXgnLCBpKTtcbiAgICAgICAgICAgIHBvaW50Lm5vZGUuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW1hcmtlci1zaXplJywgb3B0cy5wU2l6ZSk7XG5cbiAgICAgICAgICAgIHZhciBlbFBvaW50c1dyYXAgPSBfdGhpcy5ncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1zZXJpZXMtbWFya2VycydcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoZWxQb2ludHNXcmFwKSB7XG4gICAgICAgICAgICAgIGVsUG9pbnRzV3JhcC5hZGQocG9pbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbFBvaW50c01haW4uYWRkKGVsUG9pbnRzV3JhcCk7XG4gICAgICAgICAgICBlbFNlcmllcy5hZGQoZWxQb2ludHNNYWluKTtcblxuICAgICAgICAgICAgaWYgKHcuY29uZmlnLmRhdGFMYWJlbHMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICB2YXIgZGF0YUxhYmVsc0NvbmZpZyA9IHcuY29uZmlnLmRhdGFMYWJlbHM7XG4gICAgICAgICAgICAgIGRhdGFMYWJlbHMucGxvdERhdGFMYWJlbHNUZXh0KHtcbiAgICAgICAgICAgICAgICB4OiBkYXRhUG9pbnRzUG9zW2pdLngsXG4gICAgICAgICAgICAgICAgeTogZGF0YVBvaW50c1Bvc1tqXS55LFxuICAgICAgICAgICAgICAgIHRleHQ6IHcuZ2xvYmFscy5zZXJpZXNbaV1bal0sXG4gICAgICAgICAgICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG4gICAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgICBqOiBpLFxuICAgICAgICAgICAgICAgIHBhcmVudDogZWxEYXRhUG9pbnRzTWFpbixcbiAgICAgICAgICAgICAgICBvZmZzZXRDb3JyZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhTGFiZWxzQ29uZmlnOiBfb2JqZWN0U3ByZWFkMih7fSwgZGF0YUxhYmVsc0NvbmZpZylcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsU2VyaWVzLmFkZChlbERhdGFQb2ludHNNYWluKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhbGxTZXJpZXMucHVzaChlbFNlcmllcyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRyYXdQb2x5Z29ucyh7XG4gICAgICAgICAgcGFyZW50OiByZXRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmxhYmVscy5zaG93KSB7XG4gICAgICAgICAgdmFyIHhheGlzVGV4dHMgPSB0aGlzLmRyYXdYQXhpc1RleHRzKCk7XG4gICAgICAgICAgcmV0LmFkZCh4YXhpc1RleHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldC5hZGQodGhpcy55YXhpc0xhYmVscyk7XG4gICAgICAgIGFsbFNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbFMpIHtcbiAgICAgICAgICByZXQuYWRkKGVsUyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3UG9seWdvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3UG9seWdvbnMob3B0cykge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHBhcmVudCA9IG9wdHMucGFyZW50O1xuICAgICAgICB2YXIgeWF4aXNUZXh0cyA9IHcuZ2xvYmFscy55QXhpc1NjYWxlWzBdLnJlc3VsdC5yZXZlcnNlKCk7XG4gICAgICAgIHZhciBsYXllcnMgPSB5YXhpc1RleHRzLmxlbmd0aDtcbiAgICAgICAgdmFyIHJhZGl1c1NpemVzID0gW107XG4gICAgICAgIHZhciBsYXllckRpcyA9IHRoaXMuc2l6ZSAvIChsYXllcnMgLSAxKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxheWVyczsgaSsrKSB7XG4gICAgICAgICAgcmFkaXVzU2l6ZXNbaV0gPSBsYXllckRpcyAqIGk7XG4gICAgICAgIH1cblxuICAgICAgICByYWRpdXNTaXplcy5yZXZlcnNlKCk7XG4gICAgICAgIHZhciBwb2x5Z29uU3RyaW5ncyA9IFtdO1xuICAgICAgICB2YXIgbGluZXMgPSBbXTtcbiAgICAgICAgcmFkaXVzU2l6ZXMuZm9yRWFjaChmdW5jdGlvbiAocmFkaXVzU2l6ZSwgcikge1xuICAgICAgICAgIHZhciBwb2x5Z29uID0gX3RoaXMyLmdldFBvbHlnb25Qb3MocmFkaXVzU2l6ZSk7XG5cbiAgICAgICAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgICAgICAgcG9seWdvbi5mb3JFYWNoKGZ1bmN0aW9uIChwLCBpKSB7XG4gICAgICAgICAgICBpZiAociA9PT0gMCkge1xuICAgICAgICAgICAgICB2YXIgbGluZSA9IF90aGlzMi5ncmFwaGljcy5kcmF3TGluZShwLngsIHAueSwgMCwgMCwgQXJyYXkuaXNBcnJheShfdGhpczIucG9seWdvbnMuY29ubmVjdG9yQ29sb3JzKSA/IF90aGlzMi5wb2x5Z29ucy5jb25uZWN0b3JDb2xvcnNbaV0gOiBfdGhpczIucG9seWdvbnMuY29ubmVjdG9yQ29sb3JzKTtcblxuICAgICAgICAgICAgICBsaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICBfdGhpczIueWF4aXNMYWJlbHNUZXh0c1Bvcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBwLngsXG4gICAgICAgICAgICAgICAgeTogcC55XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdHJpbmcgKz0gcC54ICsgJywnICsgcC55ICsgJyAnO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBvbHlnb25TdHJpbmdzLnB1c2goc3RyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBvbHlnb25TdHJpbmdzLmZvckVhY2goZnVuY3Rpb24gKHAsIGkpIHtcbiAgICAgICAgICB2YXIgc3Ryb2tlQ29sb3JzID0gX3RoaXMyLnBvbHlnb25zLnN0cm9rZUNvbG9ycztcblxuICAgICAgICAgIHZhciBwb2x5Z29uID0gX3RoaXMyLmdyYXBoaWNzLmRyYXdQb2x5Z29uKHAsIEFycmF5LmlzQXJyYXkoc3Ryb2tlQ29sb3JzKSA/IHN0cm9rZUNvbG9yc1tpXSA6IHN0cm9rZUNvbG9ycywgdy5nbG9iYWxzLnJhZGFyUG9seWdvbnMuZmlsbC5jb2xvcnNbaV0pO1xuXG4gICAgICAgICAgcGFyZW50LmFkZChwb2x5Z29uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICBwYXJlbnQuYWRkKGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAody5jb25maWcueWF4aXNbMF0uc2hvdykge1xuICAgICAgICAgIHRoaXMueWF4aXNMYWJlbHNUZXh0c1Bvcy5mb3JFYWNoKGZ1bmN0aW9uIChwLCBpKSB7XG4gICAgICAgICAgICB2YXIgeVRleHQgPSBfdGhpczIuZHJhd1lBeGlzVGV4dHMocC54LCBwLnksIGksIHlheGlzVGV4dHNbaV0pO1xuXG4gICAgICAgICAgICBfdGhpczIueWF4aXNMYWJlbHMuYWRkKHlUZXh0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3WUF4aXNUZXh0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdZQXhpc1RleHRzKHgsIHksIGksIHRleHQpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB5YXhpc0NvbmZpZyA9IHcuY29uZmlnLnlheGlzWzBdO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gdy5nbG9iYWxzLnlMYWJlbEZvcm1hdHRlcnNbMF07XG4gICAgICAgIHZhciB5YXhpc0xhYmVsID0gdGhpcy5ncmFwaGljcy5kcmF3VGV4dCh7XG4gICAgICAgICAgeDogeCArIHlheGlzQ29uZmlnLmxhYmVscy5vZmZzZXRYLFxuICAgICAgICAgIHk6IHkgKyB5YXhpc0NvbmZpZy5sYWJlbHMub2Zmc2V0WSxcbiAgICAgICAgICB0ZXh0OiBmb3JtYXR0ZXIodGV4dCwgaSksXG4gICAgICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG4gICAgICAgICAgZm9udFNpemU6IHlheGlzQ29uZmlnLmxhYmVscy5zdHlsZS5mb250U2l6ZSxcbiAgICAgICAgICBmb250RmFtaWx5OiB5YXhpc0NvbmZpZy5sYWJlbHMuc3R5bGUuZm9udEZhbWlseSxcbiAgICAgICAgICBmb3JlQ29sb3I6IHlheGlzQ29uZmlnLmxhYmVscy5zdHlsZS5jb2xvclxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHlheGlzTGFiZWw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRyYXdYQXhpc1RleHRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1hBeGlzVGV4dHMoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgeGF4aXNMYWJlbHNDb25maWcgPSB3LmNvbmZpZy54YXhpcy5sYWJlbHM7XG4gICAgICAgIHZhciBlbFhBeGlzV3JhcCA9IHRoaXMuZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy14YXhpcydcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBwb2x5Z29uUG9zID0gdGhpcy5nZXRQb2x5Z29uUG9zKHRoaXMuc2l6ZSk7XG4gICAgICAgIHcuZ2xvYmFscy5sYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwsIGkpIHtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVyID0gdy5jb25maWcueGF4aXMubGFiZWxzLmZvcm1hdHRlcjtcbiAgICAgICAgICB2YXIgZGF0YUxhYmVscyA9IG5ldyBEYXRhTGFiZWxzKF90aGlzMy5jdHgpO1xuXG4gICAgICAgICAgaWYgKHBvbHlnb25Qb3NbaV0pIHtcbiAgICAgICAgICAgIHZhciB0ZXh0UG9zID0gX3RoaXMzLmdldFRleHRQb3MocG9seWdvblBvc1tpXSwgX3RoaXMzLnNpemUpO1xuXG4gICAgICAgICAgICB2YXIgdGV4dCA9IGZvcm1hdHRlcihsYWJlbCwge1xuICAgICAgICAgICAgICBzZXJpZXNJbmRleDogLTEsXG4gICAgICAgICAgICAgIGRhdGFQb2ludEluZGV4OiBpLFxuICAgICAgICAgICAgICB3OiB3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRhdGFMYWJlbHMucGxvdERhdGFMYWJlbHNUZXh0KHtcbiAgICAgICAgICAgICAgeDogdGV4dFBvcy5uZXdYLFxuICAgICAgICAgICAgICB5OiB0ZXh0UG9zLm5ld1ksXG4gICAgICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgICAgIHRleHRBbmNob3I6IHRleHRQb3MudGV4dEFuY2hvcixcbiAgICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgICAgajogaSxcbiAgICAgICAgICAgICAgcGFyZW50OiBlbFhBeGlzV3JhcCxcbiAgICAgICAgICAgICAgY29sb3I6IHhheGlzTGFiZWxzQ29uZmlnLnN0eWxlLmNvbG9yc1tpXSA/IHhheGlzTGFiZWxzQ29uZmlnLnN0eWxlLmNvbG9yc1tpXSA6ICcjNzU3NTc1JyxcbiAgICAgICAgICAgICAgZGF0YUxhYmVsc0NvbmZpZzogX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgICAgICAgIHRleHRBbmNob3I6IHRleHRQb3MudGV4dEFuY2hvcixcbiAgICAgICAgICAgICAgICBkcm9wU2hhZG93OiB7XG4gICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgeGF4aXNMYWJlbHNDb25maWcpLFxuICAgICAgICAgICAgICBvZmZzZXRDb3JyZWN0aW9uOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVsWEF4aXNXcmFwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjcmVhdGVQYXRoc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVBhdGhzKHBvcywgb3JpZ2luKSB7XG4gICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgIHZhciBsaW5lUGF0aHNUbyA9IFtdO1xuICAgICAgICB2YXIgbGluZVBhdGhzRnJvbSA9IFtdO1xuICAgICAgICB2YXIgYXJlYVBhdGhzVG8gPSBbXTtcbiAgICAgICAgdmFyIGFyZWFQYXRoc0Zyb20gPSBbXTtcblxuICAgICAgICBpZiAocG9zLmxlbmd0aCkge1xuICAgICAgICAgIGxpbmVQYXRoc0Zyb20gPSBbdGhpcy5ncmFwaGljcy5tb3ZlKG9yaWdpbi54LCBvcmlnaW4ueSldO1xuICAgICAgICAgIGFyZWFQYXRoc0Zyb20gPSBbdGhpcy5ncmFwaGljcy5tb3ZlKG9yaWdpbi54LCBvcmlnaW4ueSldO1xuICAgICAgICAgIHZhciBsaW5lUGF0aFRvID0gdGhpcy5ncmFwaGljcy5tb3ZlKHBvc1swXS54LCBwb3NbMF0ueSk7XG4gICAgICAgICAgdmFyIGFyZWFQYXRoVG8gPSB0aGlzLmdyYXBoaWNzLm1vdmUocG9zWzBdLngsIHBvc1swXS55KTtcbiAgICAgICAgICBwb3MuZm9yRWFjaChmdW5jdGlvbiAocCwgaSkge1xuICAgICAgICAgICAgbGluZVBhdGhUbyArPSBfdGhpczQuZ3JhcGhpY3MubGluZShwLngsIHAueSk7XG4gICAgICAgICAgICBhcmVhUGF0aFRvICs9IF90aGlzNC5ncmFwaGljcy5saW5lKHAueCwgcC55KTtcblxuICAgICAgICAgICAgaWYgKGkgPT09IHBvcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGxpbmVQYXRoVG8gKz0gJ1onO1xuICAgICAgICAgICAgICBhcmVhUGF0aFRvICs9ICdaJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsaW5lUGF0aHNUby5wdXNoKGxpbmVQYXRoVG8pO1xuICAgICAgICAgIGFyZWFQYXRoc1RvLnB1c2goYXJlYVBhdGhUbyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxpbmVQYXRoc0Zyb206IGxpbmVQYXRoc0Zyb20sXG4gICAgICAgICAgbGluZVBhdGhzVG86IGxpbmVQYXRoc1RvLFxuICAgICAgICAgIGFyZWFQYXRoc0Zyb206IGFyZWFQYXRoc0Zyb20sXG4gICAgICAgICAgYXJlYVBhdGhzVG86IGFyZWFQYXRoc1RvXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFRleHRQb3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZXh0UG9zKHBvcywgcG9seWdvblNpemUpIHtcbiAgICAgICAgdmFyIGxpbWl0ID0gMTA7XG4gICAgICAgIHZhciB0ZXh0QW5jaG9yID0gJ21pZGRsZSc7XG4gICAgICAgIHZhciBuZXdYID0gcG9zLng7XG4gICAgICAgIHZhciBuZXdZID0gcG9zLnk7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHBvcy54KSA+PSBsaW1pdCkge1xuICAgICAgICAgIGlmIChwb3MueCA+IDApIHtcbiAgICAgICAgICAgIHRleHRBbmNob3IgPSAnc3RhcnQnO1xuICAgICAgICAgICAgbmV3WCArPSAxMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBvcy54IDwgMCkge1xuICAgICAgICAgICAgdGV4dEFuY2hvciA9ICdlbmQnO1xuICAgICAgICAgICAgbmV3WCAtPSAxMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFuY2hvciA9ICdtaWRkbGUnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHBvcy55KSA+PSBwb2x5Z29uU2l6ZSAtIGxpbWl0KSB7XG4gICAgICAgICAgaWYgKHBvcy55IDwgMCkge1xuICAgICAgICAgICAgbmV3WSAtPSAxMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBvcy55ID4gMCkge1xuICAgICAgICAgICAgbmV3WSArPSAxMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRleHRBbmNob3I6IHRleHRBbmNob3IsXG4gICAgICAgICAgbmV3WDogbmV3WCxcbiAgICAgICAgICBuZXdZOiBuZXdZXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFByZXZpb3VzUGF0aFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByZXZpb3VzUGF0aChyZWFsSW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBwYXRoRnJvbSA9IG51bGw7XG5cbiAgICAgICAgZm9yICh2YXIgcHAgPSAwOyBwcCA8IHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLmxlbmd0aDsgcHArKykge1xuICAgICAgICAgIHZhciBncHAgPSB3Lmdsb2JhbHMucHJldmlvdXNQYXRoc1twcF07XG5cbiAgICAgICAgICBpZiAoZ3BwLnBhdGhzLmxlbmd0aCA+IDAgJiYgcGFyc2VJbnQoZ3BwLnJlYWxJbmRleCwgMTApID09PSBwYXJzZUludChyZWFsSW5kZXgsIDEwKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3Lmdsb2JhbHMucHJldmlvdXNQYXRoc1twcF0ucGF0aHNbMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHBhdGhGcm9tID0gdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbcHBdLnBhdGhzWzBdLmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhdGhGcm9tO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXREYXRhUG9pbnRzUG9zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YVBvaW50c1BvcyhkYXRhUmFkaXVzQXJyLCBhbmdsZUFycikge1xuICAgICAgICB2YXIgZGF0YVBvaW50c0xlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdGhpcy5kYXRhUG9pbnRzTGVuO1xuICAgICAgICBkYXRhUmFkaXVzQXJyID0gZGF0YVJhZGl1c0FyciB8fCBbXTtcbiAgICAgICAgYW5nbGVBcnIgPSBhbmdsZUFyciB8fCBbXTtcbiAgICAgICAgdmFyIGRhdGFQb2ludHNQb3NBcnJheSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YVBvaW50c0xlbjsgaisrKSB7XG4gICAgICAgICAgdmFyIGN1clBvaW50UG9zID0ge307XG4gICAgICAgICAgY3VyUG9pbnRQb3MueCA9IGRhdGFSYWRpdXNBcnJbal0gKiBNYXRoLnNpbihhbmdsZUFycltqXSk7XG4gICAgICAgICAgY3VyUG9pbnRQb3MueSA9IC1kYXRhUmFkaXVzQXJyW2pdICogTWF0aC5jb3MoYW5nbGVBcnJbal0pO1xuICAgICAgICAgIGRhdGFQb2ludHNQb3NBcnJheS5wdXNoKGN1clBvaW50UG9zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhUG9pbnRzUG9zQXJyYXk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFBvbHlnb25Qb3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb2x5Z29uUG9zKHNpemUpIHtcbiAgICAgICAgdmFyIGRvdHNBcnJheSA9IFtdO1xuICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJICogMiAvIHRoaXMuZGF0YVBvaW50c0xlbjtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGF0YVBvaW50c0xlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIGN1clBvcyA9IHt9O1xuICAgICAgICAgIGN1clBvcy54ID0gc2l6ZSAqIE1hdGguc2luKGkgKiBhbmdsZSk7XG4gICAgICAgICAgY3VyUG9zLnkgPSAtc2l6ZSAqIE1hdGguY29zKGkgKiBhbmdsZSk7XG4gICAgICAgICAgZG90c0FycmF5LnB1c2goY3VyUG9zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkb3RzQXJyYXk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFJhZGFyO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgUmFkaWFsIENsYXNzIGZvciBkcmF3aW5nIENpcmNsZSAvIFNlbWkgQ2lyY2xlIENoYXJ0cy5cbiAgICogQG1vZHVsZSBSYWRpYWxcbiAgICoqL1xuXG4gIHZhciBSYWRpYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QaWUpIHtcbiAgICBfaW5oZXJpdHMoUmFkaWFsLCBfUGllKTtcblxuICAgIGZ1bmN0aW9uIFJhZGlhbChjdHgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhZGlhbCk7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFJhZGlhbCkuY2FsbCh0aGlzLCBjdHgpKTtcbiAgICAgIF90aGlzLmN0eCA9IGN0eDtcbiAgICAgIF90aGlzLncgPSBjdHgudztcbiAgICAgIF90aGlzLmFuaW1CZWdpbkFyciA9IFswXTtcbiAgICAgIF90aGlzLmFuaW1EdXIgPSAwO1xuICAgICAgdmFyIHcgPSBfdGhpcy53O1xuICAgICAgX3RoaXMuc3RhcnRBbmdsZSA9IHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5zdGFydEFuZ2xlO1xuICAgICAgX3RoaXMuZW5kQW5nbGUgPSB3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRpYWxCYXIuZW5kQW5nbGU7XG4gICAgICBfdGhpcy50b3RhbEFuZ2xlID0gTWF0aC5hYnMody5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLmVuZEFuZ2xlIC0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLnN0YXJ0QW5nbGUpO1xuICAgICAgX3RoaXMudHJhY2tTdGFydEFuZ2xlID0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLnRyYWNrLnN0YXJ0QW5nbGU7XG4gICAgICBfdGhpcy50cmFja0VuZEFuZ2xlID0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLnRyYWNrLmVuZEFuZ2xlO1xuICAgICAgX3RoaXMucmFkaWFsRGF0YUxhYmVscyA9IHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5kYXRhTGFiZWxzO1xuICAgICAgaWYgKCFfdGhpcy50cmFja1N0YXJ0QW5nbGUpIF90aGlzLnRyYWNrU3RhcnRBbmdsZSA9IF90aGlzLnN0YXJ0QW5nbGU7XG4gICAgICBpZiAoIV90aGlzLnRyYWNrRW5kQW5nbGUpIF90aGlzLnRyYWNrRW5kQW5nbGUgPSBfdGhpcy5lbmRBbmdsZTtcbiAgICAgIGlmIChfdGhpcy5lbmRBbmdsZSA9PT0gMzYwKSBfdGhpcy5lbmRBbmdsZSA9IDM1OS45OTtcbiAgICAgIF90aGlzLmZ1bGxBbmdsZSA9IDM2MCAtIHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5lbmRBbmdsZSAtIHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5zdGFydEFuZ2xlO1xuICAgICAgX3RoaXMubWFyZ2luID0gcGFyc2VJbnQody5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLnRyYWNrLm1hcmdpbiwgMTApO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhSYWRpYWwsIFt7XG4gICAgICBrZXk6IFwiZHJhd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoc2VyaWVzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgcmV0ID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1yYWRpYWxiYXInXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAody5nbG9iYWxzLm5vRGF0YSkgcmV0dXJuIHJldDtcbiAgICAgICAgdmFyIGVsU2VyaWVzID0gZ3JhcGhpY3MuZ3JvdXAoKTtcbiAgICAgICAgdmFyIGNlbnRlclkgPSB0aGlzLmRlZmF1bHRTaXplIC8gMjtcbiAgICAgICAgdmFyIGNlbnRlclggPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gMjtcbiAgICAgICAgdmFyIHNpemUgPSB0aGlzLmRlZmF1bHRTaXplIC8gMi4wNTtcblxuICAgICAgICBpZiAoIXcuY29uZmlnLmNoYXJ0LnNwYXJrbGluZS5lbmFibGVkKSB7XG4gICAgICAgICAgc2l6ZSA9IHNpemUgLSB3LmNvbmZpZy5zdHJva2Uud2lkdGggLSB3LmNvbmZpZy5jaGFydC5kcm9wU2hhZG93LmJsdXI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29sb3JBcnIgPSB3Lmdsb2JhbHMuZmlsbC5jb2xvcnM7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci50cmFjay5zaG93KSB7XG4gICAgICAgICAgdmFyIGVsVHJhY2tzID0gdGhpcy5kcmF3VHJhY2tzKHtcbiAgICAgICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgICAgICBjZW50ZXJYOiBjZW50ZXJYLFxuICAgICAgICAgICAgY2VudGVyWTogY2VudGVyWSxcbiAgICAgICAgICAgIGNvbG9yQXJyOiBjb2xvckFycixcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWxTZXJpZXMuYWRkKGVsVHJhY2tzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbEcgPSB0aGlzLmRyYXdBcmNzKHtcbiAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgIGNlbnRlclg6IGNlbnRlclgsXG4gICAgICAgICAgY2VudGVyWTogY2VudGVyWSxcbiAgICAgICAgICBjb2xvckFycjogY29sb3JBcnIsXG4gICAgICAgICAgc2VyaWVzOiBzZXJpZXNcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0b3RhbEFuZ2xlID0gMzYwO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRpYWxCYXIuc3RhcnRBbmdsZSA8IDApIHtcbiAgICAgICAgICB0b3RhbEFuZ2xlID0gdGhpcy50b3RhbEFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFuZ2xlUmF0aW8gPSAoMzYwIC0gdG90YWxBbmdsZSkgLyAzNjA7XG4gICAgICAgIHcuZ2xvYmFscy5yYWRpYWxTaXplID0gc2l6ZSAtIHNpemUgKiBhbmdsZVJhdGlvO1xuXG4gICAgICAgIGlmICh0aGlzLnJhZGlhbERhdGFMYWJlbHMudmFsdWUuc2hvdykge1xuICAgICAgICAgIHZhciBvZmZzZXQgPSBNYXRoLm1heCh0aGlzLnJhZGlhbERhdGFMYWJlbHMudmFsdWUub2Zmc2V0WSwgdGhpcy5yYWRpYWxEYXRhTGFiZWxzLm5hbWUub2Zmc2V0WSk7XG4gICAgICAgICAgdy5nbG9iYWxzLnJhZGlhbFNpemUgKz0gb2Zmc2V0ICogYW5nbGVSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGVsU2VyaWVzLmFkZChlbEcuZyk7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5ob2xsb3cucG9zaXRpb24gPT09ICdmcm9udCcpIHtcbiAgICAgICAgICBlbEcuZy5hZGQoZWxHLmVsSG9sbG93KTtcblxuICAgICAgICAgIGlmIChlbEcuZGF0YUxhYmVscykge1xuICAgICAgICAgICAgZWxHLmcuYWRkKGVsRy5kYXRhTGFiZWxzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXQuYWRkKGVsU2VyaWVzKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1RyYWNrc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUcmFja3Mob3B0cykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGcgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXRyYWNrcydcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBmaWx0ZXJzID0gbmV3IEZpbHRlcnModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZmlsbCA9IG5ldyBGaWxsKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHN0cm9rZVdpZHRoID0gdGhpcy5nZXRTdHJva2VXaWR0aChvcHRzKTtcbiAgICAgICAgb3B0cy5zaXplID0gb3B0cy5zaXplIC0gc3Ryb2tlV2lkdGggLyAyO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5zZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgZWxSYWRpYWxCYXJUcmFjayA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1yYWRpYWxiYXItdHJhY2sgYXBleGNoYXJ0cy10cmFjaydcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnLmFkZChlbFJhZGlhbEJhclRyYWNrKTtcbiAgICAgICAgICBlbFJhZGlhbEJhclRyYWNrLmF0dHIoe1xuICAgICAgICAgICAgcmVsOiBpICsgMVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9wdHMuc2l6ZSA9IG9wdHMuc2l6ZSAtIHN0cm9rZVdpZHRoIC0gdGhpcy5tYXJnaW47XG4gICAgICAgICAgdmFyIHRyYWNrQ29uZmlnID0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLnRyYWNrO1xuICAgICAgICAgIHZhciBwYXRoRmlsbCA9IGZpbGwuZmlsbFBhdGgoe1xuICAgICAgICAgICAgc2VyaWVzTnVtYmVyOiAwLFxuICAgICAgICAgICAgc2l6ZTogb3B0cy5zaXplLFxuICAgICAgICAgICAgZmlsbENvbG9yczogQXJyYXkuaXNBcnJheSh0cmFja0NvbmZpZy5iYWNrZ3JvdW5kKSA/IHRyYWNrQ29uZmlnLmJhY2tncm91bmRbaV0gOiB0cmFja0NvbmZpZy5iYWNrZ3JvdW5kLFxuICAgICAgICAgICAgc29saWQ6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IHRoaXMudHJhY2tTdGFydEFuZ2xlO1xuICAgICAgICAgIHZhciBlbmRBbmdsZSA9IHRoaXMudHJhY2tFbmRBbmdsZTtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZW5kQW5nbGUpICsgTWF0aC5hYnMoc3RhcnRBbmdsZSkgPj0gMzYwKSBlbmRBbmdsZSA9IDM2MCAtIE1hdGguYWJzKHRoaXMuc3RhcnRBbmdsZSkgLSAwLjE7XG4gICAgICAgICAgdmFyIGVsUGF0aCA9IGdyYXBoaWNzLmRyYXdQYXRoKHtcbiAgICAgICAgICAgIGQ6ICcnLFxuICAgICAgICAgICAgc3Ryb2tlOiBwYXRoRmlsbCxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCAqIHBhcnNlSW50KHRyYWNrQ29uZmlnLnN0cm9rZVdpZHRoLCAxMCkgLyAxMDAsXG4gICAgICAgICAgICBmaWxsOiAnbm9uZScsXG4gICAgICAgICAgICBzdHJva2VPcGFjaXR5OiB0cmFja0NvbmZpZy5vcGFjaXR5LFxuICAgICAgICAgICAgY2xhc3NlczogJ2FwZXhjaGFydHMtcmFkaWFsYmFyLWFyZWEnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodHJhY2tDb25maWcuZHJvcFNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICB2YXIgc2hhZG93ID0gdHJhY2tDb25maWcuZHJvcFNoYWRvdztcbiAgICAgICAgICAgIGZpbHRlcnMuZHJvcFNoYWRvdyhlbFBhdGgsIHNoYWRvdyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxSYWRpYWxCYXJUcmFjay5hZGQoZWxQYXRoKTtcbiAgICAgICAgICBlbFBhdGguYXR0cignaWQnLCAnYXBleGNoYXJ0cy1yYWRpYWxiYXJUcmFjay0nICsgaSk7XG4gICAgICAgICAgdGhpcy5hbmltYXRlUGF0aHMoZWxQYXRoLCB7XG4gICAgICAgICAgICBjZW50ZXJYOiBvcHRzLmNlbnRlclgsXG4gICAgICAgICAgICBjZW50ZXJZOiBvcHRzLmNlbnRlclksXG4gICAgICAgICAgICBlbmRBbmdsZTogZW5kQW5nbGUsXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgc2l6ZTogb3B0cy5zaXplLFxuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDIsXG4gICAgICAgICAgICBhbmltQmVnaW5BcnI6IDAsXG4gICAgICAgICAgICBkdXI6IDAsXG4gICAgICAgICAgICBpc1RyYWNrOiB0cnVlLFxuICAgICAgICAgICAgZWFzaW5nOiB3Lmdsb2JhbHMuZWFzaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd0FyY3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3QXJjcyhvcHRzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53OyAvLyBzaXplLCBkb251dFNpemUsIGNlbnRlclgsIGNlbnRlclksIGNvbG9yQXJyLCBsaW5lQ29sb3JBcnIsIHNlY3RvckFuZ2xlQXJyLCBzZXJpZXNcblxuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgZmlsbCA9IG5ldyBGaWxsKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGZpbHRlcnMgPSBuZXcgRmlsdGVycyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBnID0gZ3JhcGhpY3MuZ3JvdXAoKTtcbiAgICAgICAgdmFyIHN0cm9rZVdpZHRoID0gdGhpcy5nZXRTdHJva2VXaWR0aChvcHRzKTtcbiAgICAgICAgb3B0cy5zaXplID0gb3B0cy5zaXplIC0gc3Ryb2tlV2lkdGggLyAyO1xuICAgICAgICB2YXIgaG9sbG93RmlsbElEID0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLmhvbGxvdy5iYWNrZ3JvdW5kO1xuICAgICAgICB2YXIgaG9sbG93U2l6ZSA9IG9wdHMuc2l6ZSAtIHN0cm9rZVdpZHRoICogb3B0cy5zZXJpZXMubGVuZ3RoIC0gdGhpcy5tYXJnaW4gKiBvcHRzLnNlcmllcy5sZW5ndGggLSBzdHJva2VXaWR0aCAqIHBhcnNlSW50KHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci50cmFjay5zdHJva2VXaWR0aCwgMTApIC8gMTAwIC8gMjtcbiAgICAgICAgdmFyIGhvbGxvd1JhZGl1cyA9IGhvbGxvd1NpemUgLSB3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRpYWxCYXIuaG9sbG93Lm1hcmdpbjtcblxuICAgICAgICBpZiAody5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLmhvbGxvdy5pbWFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaG9sbG93RmlsbElEID0gdGhpcy5kcmF3SG9sbG93SW1hZ2Uob3B0cywgZywgaG9sbG93U2l6ZSwgaG9sbG93RmlsbElEKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbEhvbGxvdyA9IHRoaXMuZHJhd0hvbGxvdyh7XG4gICAgICAgICAgc2l6ZTogaG9sbG93UmFkaXVzLFxuICAgICAgICAgIGNlbnRlclg6IG9wdHMuY2VudGVyWCxcbiAgICAgICAgICBjZW50ZXJZOiBvcHRzLmNlbnRlclksXG4gICAgICAgICAgZmlsbDogaG9sbG93RmlsbElEID8gaG9sbG93RmlsbElEIDogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAody5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLmhvbGxvdy5kcm9wU2hhZG93LmVuYWJsZWQpIHtcbiAgICAgICAgICB2YXIgc2hhZG93ID0gdy5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLmhvbGxvdy5kcm9wU2hhZG93O1xuICAgICAgICAgIGZpbHRlcnMuZHJvcFNoYWRvdyhlbEhvbGxvdywgc2hhZG93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG93biA9IDE7XG5cbiAgICAgICAgaWYgKCF0aGlzLnJhZGlhbERhdGFMYWJlbHMudG90YWwuc2hvdyAmJiB3Lmdsb2JhbHMuc2VyaWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBzaG93biA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YUxhYmVscyA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMucmFkaWFsRGF0YUxhYmVscy5zaG93KSB7XG4gICAgICAgICAgZGF0YUxhYmVscyA9IHRoaXMucmVuZGVySW5uZXJEYXRhTGFiZWxzKHRoaXMucmFkaWFsRGF0YUxhYmVscywge1xuICAgICAgICAgICAgaG9sbG93U2l6ZTogaG9sbG93U2l6ZSxcbiAgICAgICAgICAgIGNlbnRlclg6IG9wdHMuY2VudGVyWCxcbiAgICAgICAgICAgIGNlbnRlclk6IG9wdHMuY2VudGVyWSxcbiAgICAgICAgICAgIG9wYWNpdHk6IHNob3duXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLmhvbGxvdy5wb3NpdGlvbiA9PT0gJ2JhY2snKSB7XG4gICAgICAgICAgZy5hZGQoZWxIb2xsb3cpO1xuXG4gICAgICAgICAgaWYgKGRhdGFMYWJlbHMpIHtcbiAgICAgICAgICAgIGcuYWRkKGRhdGFMYWJlbHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXZlcnNlTG9vcCA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRpYWxCYXIuaW52ZXJzZU9yZGVyKSB7XG4gICAgICAgICAgcmV2ZXJzZUxvb3AgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IHJldmVyc2VMb29wID8gb3B0cy5zZXJpZXMubGVuZ3RoIC0gMSA6IDA7IHJldmVyc2VMb29wID8gaSA+PSAwIDogaSA8IG9wdHMuc2VyaWVzLmxlbmd0aDsgcmV2ZXJzZUxvb3AgPyBpLS0gOiBpKyspIHtcbiAgICAgICAgICB2YXIgZWxSYWRpYWxCYXJBcmMgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogXCJhcGV4Y2hhcnRzLXNlcmllcyBhcGV4Y2hhcnRzLXJhZGlhbC1zZXJpZXNcIixcbiAgICAgICAgICAgIHNlcmllc05hbWU6IFV0aWxzLmVzY2FwZVN0cmluZyh3Lmdsb2JhbHMuc2VyaWVzTmFtZXNbaV0pXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZy5hZGQoZWxSYWRpYWxCYXJBcmMpO1xuICAgICAgICAgIGVsUmFkaWFsQmFyQXJjLmF0dHIoe1xuICAgICAgICAgICAgcmVsOiBpICsgMSxcbiAgICAgICAgICAgICdkYXRhOnJlYWxJbmRleCc6IGlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmN0eC5zZXJpZXMuYWRkQ29sbGFwc2VkQ2xhc3NUb1NlcmllcyhlbFJhZGlhbEJhckFyYywgaSk7XG4gICAgICAgICAgb3B0cy5zaXplID0gb3B0cy5zaXplIC0gc3Ryb2tlV2lkdGggLSB0aGlzLm1hcmdpbjtcbiAgICAgICAgICB2YXIgcGF0aEZpbGwgPSBmaWxsLmZpbGxQYXRoKHtcbiAgICAgICAgICAgIHNlcmllc051bWJlcjogaSxcbiAgICAgICAgICAgIHNpemU6IG9wdHMuc2l6ZSxcbiAgICAgICAgICAgIHZhbHVlOiBvcHRzLnNlcmllc1tpXVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBzdGFydEFuZ2xlID0gdGhpcy5zdGFydEFuZ2xlO1xuICAgICAgICAgIHZhciBwcmV2U3RhcnRBbmdsZSA9IHZvaWQgMDsgLy8gaWYgZGF0YSBleGNlZWRzIDEwMCwgbWFrZSBpdCAxMDBcblxuICAgICAgICAgIHZhciBkYXRhVmFsdWUgPSBVdGlscy5uZWdUb1plcm8ob3B0cy5zZXJpZXNbaV0gPiAxMDAgPyAxMDAgOiBvcHRzLnNlcmllc1tpXSkgLyAxMDA7XG4gICAgICAgICAgdmFyIGVuZEFuZ2xlID0gTWF0aC5yb3VuZCh0aGlzLnRvdGFsQW5nbGUgKiBkYXRhVmFsdWUpICsgdGhpcy5zdGFydEFuZ2xlO1xuICAgICAgICAgIHZhciBwcmV2RW5kQW5nbGUgPSB2b2lkIDA7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmRhdGFDaGFuZ2VkKSB7XG4gICAgICAgICAgICBwcmV2U3RhcnRBbmdsZSA9IHRoaXMuc3RhcnRBbmdsZTtcbiAgICAgICAgICAgIHByZXZFbmRBbmdsZSA9IE1hdGgucm91bmQodGhpcy50b3RhbEFuZ2xlICogVXRpbHMubmVnVG9aZXJvKHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzW2ldKSAvIDEwMCkgKyBwcmV2U3RhcnRBbmdsZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY3VyckZ1bGxBbmdsZSA9IE1hdGguYWJzKGVuZEFuZ2xlKSArIE1hdGguYWJzKHN0YXJ0QW5nbGUpO1xuXG4gICAgICAgICAgaWYgKGN1cnJGdWxsQW5nbGUgPj0gMzYwKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IGVuZEFuZ2xlIC0gMC4wMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJldkZ1bGxBbmdsZSA9IE1hdGguYWJzKHByZXZFbmRBbmdsZSkgKyBNYXRoLmFicyhwcmV2U3RhcnRBbmdsZSk7XG5cbiAgICAgICAgICBpZiAocHJldkZ1bGxBbmdsZSA+PSAzNjApIHtcbiAgICAgICAgICAgIHByZXZFbmRBbmdsZSA9IHByZXZFbmRBbmdsZSAtIDAuMDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGFuZ2xlID0gZW5kQW5nbGUgLSBzdGFydEFuZ2xlO1xuICAgICAgICAgIHZhciBkYXNoQXJyYXkgPSBBcnJheS5pc0FycmF5KHcuY29uZmlnLnN0cm9rZS5kYXNoQXJyYXkpID8gdy5jb25maWcuc3Ryb2tlLmRhc2hBcnJheVtpXSA6IHcuY29uZmlnLnN0cm9rZS5kYXNoQXJyYXk7XG4gICAgICAgICAgdmFyIGVsUGF0aCA9IGdyYXBoaWNzLmRyYXdQYXRoKHtcbiAgICAgICAgICAgIGQ6ICcnLFxuICAgICAgICAgICAgc3Ryb2tlOiBwYXRoRmlsbCxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcbiAgICAgICAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgICAgICAgIGZpbGxPcGFjaXR5OiB3LmNvbmZpZy5maWxsLm9wYWNpdHksXG4gICAgICAgICAgICBjbGFzc2VzOiAnYXBleGNoYXJ0cy1yYWRpYWxiYXItYXJlYSBhcGV4Y2hhcnRzLXJhZGlhbGJhci1zbGljZS0nICsgaSxcbiAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogZGFzaEFycmF5XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnMoZWxQYXRoLm5vZGUsIHtcbiAgICAgICAgICAgICdkYXRhOmFuZ2xlJzogYW5nbGUsXG4gICAgICAgICAgICAnZGF0YTp2YWx1ZSc6IG9wdHMuc2VyaWVzW2ldXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuZHJvcFNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICB2YXIgX3NoYWRvdyA9IHcuY29uZmlnLmNoYXJ0LmRyb3BTaGFkb3c7XG4gICAgICAgICAgICBmaWx0ZXJzLmRyb3BTaGFkb3coZWxQYXRoLCBfc2hhZG93LCBpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmFkZExpc3RlbmVycyhlbFBhdGgsIHRoaXMucmFkaWFsRGF0YUxhYmVscyk7XG4gICAgICAgICAgZWxSYWRpYWxCYXJBcmMuYWRkKGVsUGF0aCk7XG4gICAgICAgICAgZWxQYXRoLmF0dHIoe1xuICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICBqOiBpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGR1ciA9IDA7XG5cbiAgICAgICAgICBpZiAodGhpcy5pbml0aWFsQW5pbSAmJiAhdy5nbG9iYWxzLnJlc2l6ZWQgJiYgIXcuZ2xvYmFscy5kYXRhQ2hhbmdlZCkge1xuICAgICAgICAgICAgZHVyID0gKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSkgLyAzNjAgKiB3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLnNwZWVkO1xuICAgICAgICAgICAgdGhpcy5hbmltRHVyID0gZHVyIC8gKG9wdHMuc2VyaWVzLmxlbmd0aCAqIDEuMikgKyB0aGlzLmFuaW1EdXI7XG4gICAgICAgICAgICB0aGlzLmFuaW1CZWdpbkFyci5wdXNoKHRoaXMuYW5pbUR1cik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5kYXRhQ2hhbmdlZCkge1xuICAgICAgICAgICAgZHVyID0gKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSkgLyAzNjAgKiB3LmNvbmZpZy5jaGFydC5hbmltYXRpb25zLmR5bmFtaWNBbmltYXRpb24uc3BlZWQ7XG4gICAgICAgICAgICB0aGlzLmFuaW1EdXIgPSBkdXIgLyAob3B0cy5zZXJpZXMubGVuZ3RoICogMS4yKSArIHRoaXMuYW5pbUR1cjtcbiAgICAgICAgICAgIHRoaXMuYW5pbUJlZ2luQXJyLnB1c2godGhpcy5hbmltRHVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmFuaW1hdGVQYXRocyhlbFBhdGgsIHtcbiAgICAgICAgICAgIGNlbnRlclg6IG9wdHMuY2VudGVyWCxcbiAgICAgICAgICAgIGNlbnRlclk6IG9wdHMuY2VudGVyWSxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBlbmRBbmdsZSxcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBwcmV2RW5kQW5nbGU6IHByZXZFbmRBbmdsZSxcbiAgICAgICAgICAgIHByZXZTdGFydEFuZ2xlOiBwcmV2U3RhcnRBbmdsZSxcbiAgICAgICAgICAgIHNpemU6IG9wdHMuc2l6ZSxcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICB0b3RhbEl0ZW1zOiAyLFxuICAgICAgICAgICAgYW5pbUJlZ2luQXJyOiB0aGlzLmFuaW1CZWdpbkFycixcbiAgICAgICAgICAgIGR1cjogZHVyLFxuICAgICAgICAgICAgc2hvdWxkU2V0UHJldlBhdGhzOiB0cnVlLFxuICAgICAgICAgICAgZWFzaW5nOiB3Lmdsb2JhbHMuZWFzaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGc6IGcsXG4gICAgICAgICAgZWxIb2xsb3c6IGVsSG9sbG93LFxuICAgICAgICAgIGRhdGFMYWJlbHM6IGRhdGFMYWJlbHNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd0hvbGxvd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdIb2xsb3cob3B0cykge1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgY2lyY2xlID0gZ3JhcGhpY3MuZHJhd0NpcmNsZShvcHRzLnNpemUgKiAyKTtcbiAgICAgICAgY2lyY2xlLmF0dHIoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1yYWRpYWxiYXItaG9sbG93JyxcbiAgICAgICAgICBjeDogb3B0cy5jZW50ZXJYLFxuICAgICAgICAgIGN5OiBvcHRzLmNlbnRlclksXG4gICAgICAgICAgcjogb3B0cy5zaXplLFxuICAgICAgICAgIGZpbGw6IG9wdHMuZmlsbFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNpcmNsZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd0hvbGxvd0ltYWdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0hvbGxvd0ltYWdlKG9wdHMsIGcsIGhvbGxvd1NpemUsIGhvbGxvd0ZpbGxJRCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGZpbGwgPSBuZXcgRmlsbCh0aGlzLmN0eCk7XG4gICAgICAgIHZhciByYW5kSUQgPSBVdGlscy5yYW5kb21JZCgpO1xuICAgICAgICB2YXIgaG9sbG93RmlsbEltZyA9IHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5ob2xsb3cuaW1hZ2U7XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5ob2xsb3cuaW1hZ2VDbGlwcGVkKSB7XG4gICAgICAgICAgZmlsbC5jbGlwcGVkSW1nQXJlYSh7XG4gICAgICAgICAgICB3aWR0aDogaG9sbG93U2l6ZSxcbiAgICAgICAgICAgIGhlaWdodDogaG9sbG93U2l6ZSxcbiAgICAgICAgICAgIGltYWdlOiBob2xsb3dGaWxsSW1nLFxuICAgICAgICAgICAgcGF0dGVybklEOiBcInBhdHRlcm5cIi5jb25jYXQody5nbG9iYWxzLmN1aWQpLmNvbmNhdChyYW5kSUQpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaG9sbG93RmlsbElEID0gXCJ1cmwoI3BhdHRlcm5cIi5jb25jYXQody5nbG9iYWxzLmN1aWQpLmNvbmNhdChyYW5kSUQsIFwiKVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW1nV2lkdGggPSB3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRpYWxCYXIuaG9sbG93LmltYWdlV2lkdGg7XG4gICAgICAgICAgdmFyIGltZ0hlaWdodCA9IHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5ob2xsb3cuaW1hZ2VIZWlnaHQ7XG5cbiAgICAgICAgICBpZiAoaW1nV2lkdGggPT09IHVuZGVmaW5lZCAmJiBpbWdIZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gdy5nbG9iYWxzLmRvbS5QYXBlci5pbWFnZShob2xsb3dGaWxsSW1nKS5sb2FkZWQoZnVuY3Rpb24gKGxvYWRlcikge1xuICAgICAgICAgICAgICB0aGlzLm1vdmUob3B0cy5jZW50ZXJYIC0gbG9hZGVyLndpZHRoIC8gMiArIHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5ob2xsb3cuaW1hZ2VPZmZzZXRYLCBvcHRzLmNlbnRlclkgLSBsb2FkZXIuaGVpZ2h0IC8gMiArIHcuY29uZmlnLnBsb3RPcHRpb25zLnJhZGlhbEJhci5ob2xsb3cuaW1hZ2VPZmZzZXRZKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZy5hZGQoaW1hZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgX2ltYWdlID0gdy5nbG9iYWxzLmRvbS5QYXBlci5pbWFnZShob2xsb3dGaWxsSW1nKS5sb2FkZWQoZnVuY3Rpb24gKGxvYWRlcikge1xuICAgICAgICAgICAgICB0aGlzLm1vdmUob3B0cy5jZW50ZXJYIC0gaW1nV2lkdGggLyAyICsgdy5jb25maWcucGxvdE9wdGlvbnMucmFkaWFsQmFyLmhvbGxvdy5pbWFnZU9mZnNldFgsIG9wdHMuY2VudGVyWSAtIGltZ0hlaWdodCAvIDIgKyB3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRpYWxCYXIuaG9sbG93LmltYWdlT2Zmc2V0WSk7XG4gICAgICAgICAgICAgIHRoaXMuc2l6ZShpbWdXaWR0aCwgaW1nSGVpZ2h0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBnLmFkZChfaW1hZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBob2xsb3dGaWxsSUQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFN0cm9rZVdpZHRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3Ryb2tlV2lkdGgob3B0cykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgcmV0dXJuIG9wdHMuc2l6ZSAqICgxMDAgLSBwYXJzZUludCh3LmNvbmZpZy5wbG90T3B0aW9ucy5yYWRpYWxCYXIuaG9sbG93LnNpemUsIDEwKSkgLyAxMDAgLyAob3B0cy5zZXJpZXMubGVuZ3RoICsgMSkgLSB0aGlzLm1hcmdpbjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUmFkaWFsO1xuICB9KFBpZSk7XG5cbiAgLyoqXG4gICAqIEFwZXhDaGFydHMgUmFuZ2VCYXIgQ2xhc3MgcmVzcG9uc2libGUgZm9yIGRyYXdpbmcgUmFuZ2UvVGltZWxpbmUgQmFycy5cbiAgICpcbiAgICogQG1vZHVsZSBSYW5nZUJhclxuICAgKiovXG5cbiAgdmFyIFJhbmdlQmFyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFyKSB7XG4gICAgX2luaGVyaXRzKFJhbmdlQmFyLCBfQmFyKTtcblxuICAgIGZ1bmN0aW9uIFJhbmdlQmFyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhbmdlQmFyKTtcblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihSYW5nZUJhcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFJhbmdlQmFyLCBbe1xuICAgICAga2V5OiBcImRyYXdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3KHNlcmllcywgc2VyaWVzSW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHRoaXMucmFuZ2VCYXJPcHRpb25zID0gdGhpcy53LmNvbmZpZy5wbG90T3B0aW9ucy5yYW5nZUJhcjtcbiAgICAgICAgdGhpcy5zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgIHRoaXMuc2VyaWVzUmFuZ2VTdGFydCA9IHcuZ2xvYmFscy5zZXJpZXNSYW5nZVN0YXJ0O1xuICAgICAgICB0aGlzLnNlcmllc1JhbmdlRW5kID0gdy5nbG9iYWxzLnNlcmllc1JhbmdlRW5kO1xuICAgICAgICB0aGlzLmJhckhlbHBlcnMuaW5pdFZhcmlhYmxlcyhzZXJpZXMpO1xuICAgICAgICB2YXIgcmV0ID0gZ3JhcGhpY3MuZ3JvdXAoe1xuICAgICAgICAgIGNsYXNzOiAnYXBleGNoYXJ0cy1yYW5nZWJhci1zZXJpZXMgYXBleGNoYXJ0cy1wbG90LXNlcmllcydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgeCA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgeSA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgeERpdmlzaW9uID0gdm9pZCAwLFxuICAgICAgICAgICAgICAvLyB4RGl2aXNpb24gaXMgdGhlIEdSSURXSURUSCBkaXZpZGVkIGJ5IG51bWJlciBvZiBkYXRhcG9pbnRzIChjb2x1bW5zKVxuICAgICAgICAgIHlEaXZpc2lvbiA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgLy8geURpdmlzaW9uIGlzIHRoZSBHUklESEVJR0hUIGRpdmlkZWQgYnkgbnVtYmVyIG9mIGRhdGFwb2ludHMgKGJhcnMpXG4gICAgICAgICAgemVyb0ggPSB2b2lkIDAsXG4gICAgICAgICAgICAgIC8vIHplcm9IIGlzIHRoZSBiYXNlbGluZSB3aGVyZSAwIG1lZXRzIHkgYXhpc1xuICAgICAgICAgIHplcm9XID0gdm9pZCAwOyAvLyB6ZXJvVyBpcyB0aGUgYmFzZWxpbmUgd2hlcmUgMCBtZWV0cyB4IGF4aXNcblxuICAgICAgICAgIHZhciByZWFsSW5kZXggPSB3Lmdsb2JhbHMuY29tYm9DaGFydHMgPyBzZXJpZXNJbmRleFtpXSA6IGk7IC8vIGVsIHRvIHdoaWNoIHNlcmllcyB3aWxsIGJlIGRyYXduXG5cbiAgICAgICAgICB2YXIgZWxTZXJpZXMgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogXCJhcGV4Y2hhcnRzLXNlcmllc1wiLFxuICAgICAgICAgICAgc2VyaWVzTmFtZTogVXRpbHMuZXNjYXBlU3RyaW5nKHcuZ2xvYmFscy5zZXJpZXNOYW1lc1tyZWFsSW5kZXhdKSxcbiAgICAgICAgICAgIHJlbDogaSArIDEsXG4gICAgICAgICAgICAnZGF0YTpyZWFsSW5kZXgnOiByZWFsSW5kZXhcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChzZXJpZXNbaV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy52aXNpYmxlSSA9IHRoaXMudmlzaWJsZUkgKyAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBiYXJIZWlnaHQgPSAwO1xuICAgICAgICAgIHZhciBiYXJXaWR0aCA9IDA7XG5cbiAgICAgICAgICBpZiAodGhpcy55UmF0aW8ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy55YXhpc0luZGV4ID0gcmVhbEluZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBpbml0UG9zaXRpb25zID0gdGhpcy5iYXJIZWxwZXJzLmluaXRpYWxQb3NpdGlvbnMoKTtcbiAgICAgICAgICB5ID0gaW5pdFBvc2l0aW9ucy55O1xuICAgICAgICAgIHplcm9XID0gaW5pdFBvc2l0aW9ucy56ZXJvVztcbiAgICAgICAgICB4ID0gaW5pdFBvc2l0aW9ucy54O1xuICAgICAgICAgIGJhcldpZHRoID0gaW5pdFBvc2l0aW9ucy5iYXJXaWR0aDtcbiAgICAgICAgICB4RGl2aXNpb24gPSBpbml0UG9zaXRpb25zLnhEaXZpc2lvbjtcbiAgICAgICAgICB6ZXJvSCA9IGluaXRQb3NpdGlvbnMuemVyb0g7IC8vIGVsZGF0YWxhYmVsc1xuXG4gICAgICAgICAgdmFyIGVsRGF0YUxhYmVsc1dyYXAgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtZGF0YWxhYmVscycsXG4gICAgICAgICAgICAnZGF0YTpyZWFsSW5kZXgnOiByZWFsSW5kZXhcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdy5nbG9iYWxzLmRhdGFQb2ludHM7IGorKykge1xuICAgICAgICAgICAgdmFyIHN0cm9rZVdpZHRoID0gdGhpcy5iYXJIZWxwZXJzLmdldFN0cm9rZVdpZHRoKGksIGosIHJlYWxJbmRleCk7XG4gICAgICAgICAgICB2YXIgeTEgPSB0aGlzLnNlcmllc1JhbmdlU3RhcnRbaV1bal07XG4gICAgICAgICAgICB2YXIgeTIgPSB0aGlzLnNlcmllc1JhbmdlRW5kW2ldW2pdO1xuICAgICAgICAgICAgdmFyIHBhdGhzID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBiYXJZUG9zaXRpb24gPSBudWxsO1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICBlbFNlcmllczogZWxTZXJpZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB5RGl2aXNpb24gPSBpbml0UG9zaXRpb25zLnlEaXZpc2lvbjtcbiAgICAgICAgICAgIGJhckhlaWdodCA9IGluaXRQb3NpdGlvbnMuYmFySGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgYmFyWVBvc2l0aW9uID0geSArIGJhckhlaWdodCAqIHRoaXMudmlzaWJsZUk7XG4gICAgICAgICAgICAgIHZhciBzcnR5ID0gKHlEaXZpc2lvbiAtIGJhckhlaWdodCAqIHRoaXMuc2VyaWVzTGVuKSAvIDI7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAvLyBubyBkYXRhIGV4aXN0cyBmb3IgZnVydGhlciBpbmRleGVzLCBoZW5jZSB3ZSBuZWVkIHRvIGdldCBvdXQgdGhlIGlubnIgbG9vcC5cbiAgICAgICAgICAgICAgICAvLyBBcyB3ZSBhcmUgaXRlcmF0aW5nIG92ZXIgdG90YWwgZGF0YXBvaW50cywgdGhlcmUgaXMgYSBwb3NzaWJsaXR5IHRoZSBzZXJpZXMgbWlnaHQgbm90IGhhdmUgZGF0YSBmb3IgaiBpbmRleFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUaW1lbGluZUJhciAmJiB3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXS54KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9ucyA9IHRoaXMuZGV0ZWN0T3ZlcmxhcHBpbmdCYXJzKHtcbiAgICAgICAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICAgICAgICBqOiBqLFxuICAgICAgICAgICAgICAgICAgYmFyWVBvc2l0aW9uOiBiYXJZUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICBzcnR5OiBzcnR5LFxuICAgICAgICAgICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgICB5RGl2aXNpb246IHlEaXZpc2lvbixcbiAgICAgICAgICAgICAgICAgIGluaXRQb3NpdGlvbnM6IGluaXRQb3NpdGlvbnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBiYXJIZWlnaHQgPSBwb3NpdGlvbnMuYmFySGVpZ2h0O1xuICAgICAgICAgICAgICAgIGJhcllQb3NpdGlvbiA9IHBvc2l0aW9ucy5iYXJZUG9zaXRpb247XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBwYXRocyA9IHRoaXMuZHJhd1JhbmdlQmFyUGF0aHMoX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgICAgICAgIGluZGV4ZXM6IHtcbiAgICAgICAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICAgICAgICBqOiBqLFxuICAgICAgICAgICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJhckhlaWdodDogYmFySGVpZ2h0LFxuICAgICAgICAgICAgICAgIGJhcllQb3NpdGlvbjogYmFyWVBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHplcm9XOiB6ZXJvVyxcbiAgICAgICAgICAgICAgICB5RGl2aXNpb246IHlEaXZpc2lvbixcbiAgICAgICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICAgICAgeTI6IHkyXG4gICAgICAgICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgICBiYXJXaWR0aCA9IHBhdGhzLmJhcldpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGF0aHMgPSB0aGlzLmRyYXdSYW5nZUNvbHVtblBhdGhzKF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgICAgICAgICBpbmRleGVzOiB7XG4gICAgICAgICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6ZXJvSDogemVyb0gsXG4gICAgICAgICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgICAgICAgIHhEaXZpc2lvbjogeERpdmlzaW9uXG4gICAgICAgICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgICBiYXJIZWlnaHQgPSBwYXRocy5iYXJIZWlnaHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHkgPSBwYXRocy55O1xuICAgICAgICAgICAgeCA9IHBhdGhzLng7XG4gICAgICAgICAgICB2YXIgcGF0aEZpbGwgPSB0aGlzLmJhckhlbHBlcnMuZ2V0UGF0aEZpbGxDb2xvcihzZXJpZXMsIGksIGosIHJlYWxJbmRleCk7XG4gICAgICAgICAgICB2YXIgbGluZUZpbGwgPSB3Lmdsb2JhbHMuc3Ryb2tlLmNvbG9yc1tyZWFsSW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXJpZXMoe1xuICAgICAgICAgICAgICByZWFsSW5kZXg6IHJlYWxJbmRleCxcbiAgICAgICAgICAgICAgcGF0aEZpbGw6IHBhdGhGaWxsLFxuICAgICAgICAgICAgICBsaW5lRmlsbDogbGluZUZpbGwsXG4gICAgICAgICAgICAgIGo6IGosXG4gICAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgIHkxOiB5MSxcbiAgICAgICAgICAgICAgeTI6IHkyLFxuICAgICAgICAgICAgICBwYXRoRnJvbTogcGF0aHMucGF0aEZyb20sXG4gICAgICAgICAgICAgIHBhdGhUbzogcGF0aHMucGF0aFRvLFxuICAgICAgICAgICAgICBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICAgIGVsU2VyaWVzOiBlbFNlcmllcyxcbiAgICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICAgIGJhckhlaWdodDogYmFySGVpZ2h0LFxuICAgICAgICAgICAgICBiYXJZUG9zaXRpb246IGJhcllQb3NpdGlvbixcbiAgICAgICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgICAgICBlbERhdGFMYWJlbHNXcmFwOiBlbERhdGFMYWJlbHNXcmFwLFxuICAgICAgICAgICAgICB2aXNpYmxlU2VyaWVzOiB0aGlzLnZpc2libGVJLFxuICAgICAgICAgICAgICB0eXBlOiAncmFuZ2ViYXInXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXQuYWRkKGVsU2VyaWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRldGVjdE92ZXJsYXBwaW5nQmFyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRldGVjdE92ZXJsYXBwaW5nQmFycyhfcmVmKSB7XG4gICAgICAgIHZhciBpID0gX3JlZi5pLFxuICAgICAgICAgICAgaiA9IF9yZWYuaixcbiAgICAgICAgICAgIGJhcllQb3NpdGlvbiA9IF9yZWYuYmFyWVBvc2l0aW9uLFxuICAgICAgICAgICAgc3J0eSA9IF9yZWYuc3J0eSxcbiAgICAgICAgICAgIGJhckhlaWdodCA9IF9yZWYuYmFySGVpZ2h0LFxuICAgICAgICAgICAgeURpdmlzaW9uID0gX3JlZi55RGl2aXNpb24sXG4gICAgICAgICAgICBpbml0UG9zaXRpb25zID0gX3JlZi5pbml0UG9zaXRpb25zO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIG92ZXJsYXBzID0gW107XG4gICAgICAgIHZhciByYW5nZU5hbWUgPSB3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXS5yYW5nZU5hbWU7XG4gICAgICAgIHZhciBsYWJlbFggPSB3LmNvbmZpZy5zZXJpZXNbaV0uZGF0YVtqXS54O1xuICAgICAgICB2YXIgcm93SW5kZXggPSB3Lmdsb2JhbHMubGFiZWxzLmluZGV4T2YobGFiZWxYKTtcbiAgICAgICAgdmFyIG92ZXJsYXBwZWRJbmRleCA9IHcuZ2xvYmFscy5zZXJpZXNSYW5nZUJhclRpbWVsaW5lW2ldLmZpbmRJbmRleChmdW5jdGlvbiAodHgpIHtcbiAgICAgICAgICByZXR1cm4gdHgueCA9PT0gbGFiZWxYICYmIHR4Lm92ZXJsYXBzLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBiYXJZUG9zaXRpb24gPSBzcnR5ICsgYmFySGVpZ2h0ICogdGhpcy52aXNpYmxlSSArIHlEaXZpc2lvbiAqIHJvd0luZGV4O1xuXG4gICAgICAgIGlmIChvdmVybGFwcGVkSW5kZXggPiAtMSkge1xuICAgICAgICAgIG92ZXJsYXBzID0gdy5nbG9iYWxzLnNlcmllc1JhbmdlQmFyVGltZWxpbmVbaV1bb3ZlcmxhcHBlZEluZGV4XS5vdmVybGFwcztcblxuICAgICAgICAgIGlmIChvdmVybGFwcy5pbmRleE9mKHJhbmdlTmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgYmFySGVpZ2h0ID0gaW5pdFBvc2l0aW9ucy5iYXJIZWlnaHQgLyBvdmVybGFwcy5sZW5ndGg7XG4gICAgICAgICAgICBiYXJZUG9zaXRpb24gPSBiYXJIZWlnaHQgKiB0aGlzLnZpc2libGVJICsgeURpdmlzaW9uICogKDEwMCAtIHBhcnNlSW50KHRoaXMuYmFyT3B0aW9ucy5iYXJIZWlnaHQsIDEwKSkgLyAxMDAgLyAyICsgYmFySGVpZ2h0ICogKHRoaXMudmlzaWJsZUkgKyBvdmVybGFwcy5pbmRleE9mKHJhbmdlTmFtZSkpICsgeURpdmlzaW9uICogcm93SW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBiYXJZUG9zaXRpb246IGJhcllQb3NpdGlvbixcbiAgICAgICAgICBiYXJIZWlnaHQ6IGJhckhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkcmF3UmFuZ2VDb2x1bW5QYXRoc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdSYW5nZUNvbHVtblBhdGhzKF9yZWYyKSB7XG4gICAgICAgIHZhciBpbmRleGVzID0gX3JlZjIuaW5kZXhlcyxcbiAgICAgICAgICAgIHggPSBfcmVmMi54LFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBfcmVmMi5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgIHhEaXZpc2lvbiA9IF9yZWYyLnhEaXZpc2lvbixcbiAgICAgICAgICAgIGJhcldpZHRoID0gX3JlZjIuYmFyV2lkdGgsXG4gICAgICAgICAgICB6ZXJvSCA9IF9yZWYyLnplcm9IO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGkgPSBpbmRleGVzLmk7XG4gICAgICAgIHZhciBqID0gaW5kZXhlcy5qO1xuICAgICAgICB2YXIgeVJhdGlvID0gdGhpcy55UmF0aW9bdGhpcy55YXhpc0luZGV4XTtcbiAgICAgICAgdmFyIHJlYWxJbmRleCA9IGluZGV4ZXMucmVhbEluZGV4O1xuICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLmdldFJhbmdlVmFsdWUocmVhbEluZGV4LCBqKTtcbiAgICAgICAgdmFyIHkxID0gTWF0aC5taW4ocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCk7XG4gICAgICAgIHZhciB5MiA9IE1hdGgubWF4KHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQpO1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgIHggPSAody5nbG9iYWxzLnNlcmllc1hbaV1bal0gLSB3Lmdsb2JhbHMubWluWCkgLyB0aGlzLnhSYXRpbyAtIGJhcldpZHRoIC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYXJYUG9zaXRpb24gPSB4ICsgYmFyV2lkdGggKiB0aGlzLnZpc2libGVJO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXJpZXNbaV1bal0gPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuc2VyaWVzW2ldW2pdID09PSBudWxsKSB7XG4gICAgICAgICAgeTEgPSB6ZXJvSDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5MSA9IHplcm9IIC0geTEgLyB5UmF0aW87XG4gICAgICAgICAgeTIgPSB6ZXJvSCAtIHkyIC8geVJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhckhlaWdodCA9IE1hdGguYWJzKHkyIC0geTEpO1xuICAgICAgICB2YXIgcGF0aHMgPSB0aGlzLmJhckhlbHBlcnMuZ2V0Q29sdW1uUGF0aHMoe1xuICAgICAgICAgIGJhclhQb3NpdGlvbjogYmFyWFBvc2l0aW9uLFxuICAgICAgICAgIGJhcldpZHRoOiBiYXJXaWR0aCxcbiAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgeTI6IHkyLFxuICAgICAgICAgIHN0cm9rZVdpZHRoOiB0aGlzLnN0cm9rZVdpZHRoLFxuICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXNSYW5nZUVuZCxcbiAgICAgICAgICBpOiByZWFsSW5kZXgsXG4gICAgICAgICAgajogaixcbiAgICAgICAgICB3OiB3XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdy5nbG9iYWxzLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICB4ID0geCArIHhEaXZpc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aFRvOiBwYXRocy5wYXRoVG8sXG4gICAgICAgICAgcGF0aEZyb206IHBhdGhzLnBhdGhGcm9tLFxuICAgICAgICAgIGJhckhlaWdodDogYmFySGVpZ2h0LFxuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeTIsXG4gICAgICAgICAgYmFyWFBvc2l0aW9uOiBiYXJYUG9zaXRpb25cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZHJhd1JhbmdlQmFyUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3UmFuZ2VCYXJQYXRocyhfcmVmMykge1xuICAgICAgICB2YXIgaW5kZXhlcyA9IF9yZWYzLmluZGV4ZXMsXG4gICAgICAgICAgICB5ID0gX3JlZjMueSxcbiAgICAgICAgICAgIHkxID0gX3JlZjMueTEsXG4gICAgICAgICAgICB5MiA9IF9yZWYzLnkyLFxuICAgICAgICAgICAgeURpdmlzaW9uID0gX3JlZjMueURpdmlzaW9uLFxuICAgICAgICAgICAgYmFySGVpZ2h0ID0gX3JlZjMuYmFySGVpZ2h0LFxuICAgICAgICAgICAgYmFyWVBvc2l0aW9uID0gX3JlZjMuYmFyWVBvc2l0aW9uLFxuICAgICAgICAgICAgemVyb1cgPSBfcmVmMy56ZXJvVztcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciB4MSA9IHplcm9XICsgeTEgLyB0aGlzLmludmVydGVkWVJhdGlvO1xuICAgICAgICB2YXIgeDIgPSB6ZXJvVyArIHkyIC8gdGhpcy5pbnZlcnRlZFlSYXRpbztcbiAgICAgICAgdmFyIGJhcldpZHRoID0gTWF0aC5hYnMoeDIgLSB4MSk7XG4gICAgICAgIHZhciBwYXRocyA9IHRoaXMuYmFySGVscGVycy5nZXRCYXJwYXRocyh7XG4gICAgICAgICAgYmFyWVBvc2l0aW9uOiBiYXJZUG9zaXRpb24sXG4gICAgICAgICAgYmFySGVpZ2h0OiBiYXJIZWlnaHQsXG4gICAgICAgICAgeDE6IHgxLFxuICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICBzdHJva2VXaWR0aDogdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICBzZXJpZXM6IHRoaXMuc2VyaWVzUmFuZ2VFbmQsXG4gICAgICAgICAgaTogaW5kZXhlcy5yZWFsSW5kZXgsXG4gICAgICAgICAgajogaW5kZXhlcy5qLFxuICAgICAgICAgIHc6IHdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF3Lmdsb2JhbHMuaXNYTnVtZXJpYykge1xuICAgICAgICAgIHkgPSB5ICsgeURpdmlzaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoVG86IHBhdGhzLnBhdGhUbyxcbiAgICAgICAgICBwYXRoRnJvbTogcGF0aHMucGF0aEZyb20sXG4gICAgICAgICAgYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgIHg6IHgyLFxuICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UmFuZ2VWYWx1ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhbmdlVmFsdWUoaSwgaikge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGFydDogdy5nbG9iYWxzLnNlcmllc1JhbmdlU3RhcnRbaV1bal0sXG4gICAgICAgICAgZW5kOiB3Lmdsb2JhbHMuc2VyaWVzUmFuZ2VFbmRbaV1bal1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUmFuZ2VCYXI7XG4gIH0oQmFyKTtcblxuICB2YXIgSGVscGVycyQ0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIZWxwZXJzKGxpbmVDdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWxwZXJzKTtcblxuICAgICAgdGhpcy53ID0gbGluZUN0eC53O1xuICAgICAgdGhpcy5saW5lQ3R4ID0gbGluZUN0eDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSGVscGVycywgW3tcbiAgICAgIGtleTogXCJzYW1lVmFsdWVTZXJpZXNGaXhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYW1lVmFsdWVTZXJpZXNGaXgoaSwgc2VyaWVzKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC50eXBlID09PSAnbGluZScgJiYgKHcuY29uZmlnLmZpbGwudHlwZSA9PT0gJ2dyYWRpZW50JyB8fCB3LmNvbmZpZy5maWxsLnR5cGVbaV0gPT09ICdncmFkaWVudCcpKSB7XG4gICAgICAgICAgdmFyIGNvcmVVdGlscyA9IG5ldyBDb3JlVXRpbHModGhpcy5saW5lQ3R4LmN0eCwgdyk7IC8vIGEgc21hbGwgYWRqdXN0bWVudCB0byBhbGxvdyBncmFkaWVudCBsaW5lIHRvIGRyYXcgY29ycmVjdGx5IGZvciBhbGwgc2FtZSB2YWx1ZXNcblxuICAgICAgICAgIC8qICNmaXggaHR0cHM6Ly9naXRodWIuY29tL2FwZXhjaGFydHMvYXBleGNoYXJ0cy5qcy9pc3N1ZXMvMzU4ICovXG5cbiAgICAgICAgICBpZiAoY29yZVV0aWxzLnNlcmllc0hhdmVTYW1lVmFsdWVzKGkpKSB7XG4gICAgICAgICAgICB2YXIgZ1NlcmllcyA9IHNlcmllc1tpXS5zbGljZSgpO1xuICAgICAgICAgICAgZ1Nlcmllc1tnU2VyaWVzLmxlbmd0aCAtIDFdID0gZ1Nlcmllc1tnU2VyaWVzLmxlbmd0aCAtIDFdICsgMC4wMDAwMDE7XG4gICAgICAgICAgICBzZXJpZXNbaV0gPSBnU2VyaWVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXJpZXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNhbGN1bGF0ZVBvaW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZVBvaW50cyhfcmVmKSB7XG4gICAgICAgIHZhciBzZXJpZXMgPSBfcmVmLnNlcmllcyxcbiAgICAgICAgICAgIHJlYWxJbmRleCA9IF9yZWYucmVhbEluZGV4LFxuICAgICAgICAgICAgeCA9IF9yZWYueCxcbiAgICAgICAgICAgIHkgPSBfcmVmLnksXG4gICAgICAgICAgICBpID0gX3JlZi5pLFxuICAgICAgICAgICAgaiA9IF9yZWYuaixcbiAgICAgICAgICAgIHByZXZZID0gX3JlZi5wcmV2WTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBwdFggPSBbXTtcbiAgICAgICAgdmFyIHB0WSA9IFtdO1xuXG4gICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgdmFyIHhQVDFzdCA9IHRoaXMubGluZUN0eC5jYXRlZ29yeUF4aXNDb3JyZWN0aW9uICsgdy5jb25maWcubWFya2Vycy5vZmZzZXRYOyAvLyB0aGUgZmlyc3QgcG9pbnQgZm9yIGxpbmUgc2VyaWVzXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBjaGVjayB3aGV0aGVyIGl0J3Mgbm90IGEgdGltZSBzZXJpZXMsIGJlY2F1c2UgYSB0aW1lIHNlcmllcyBtYXlcbiAgICAgICAgICAvLyBzdGFydCBmcm9tIHRoZSBtaWRkbGUgb2YgdGhlIHggYXhpc1xuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5pc1hOdW1lcmljKSB7XG4gICAgICAgICAgICB4UFQxc3QgPSAody5nbG9iYWxzLnNlcmllc1hbcmVhbEluZGV4XVswXSAtIHcuZ2xvYmFscy5taW5YKSAvIHRoaXMubGluZUN0eC54UmF0aW8gKyB3LmNvbmZpZy5tYXJrZXJzLm9mZnNldFg7XG4gICAgICAgICAgfSAvLyBwdXNoIDIgcG9pbnRzIGZvciB0aGUgZmlyc3QgZGF0YSB2YWx1ZXNcblxuXG4gICAgICAgICAgcHRYLnB1c2goeFBUMXN0KTtcbiAgICAgICAgICBwdFkucHVzaChVdGlscy5pc051bWJlcihzZXJpZXNbaV1bMF0pID8gcHJldlkgKyB3LmNvbmZpZy5tYXJrZXJzLm9mZnNldFkgOiBudWxsKTtcbiAgICAgICAgICBwdFgucHVzaCh4ICsgdy5jb25maWcubWFya2Vycy5vZmZzZXRYKTtcbiAgICAgICAgICBwdFkucHVzaChVdGlscy5pc051bWJlcihzZXJpZXNbaV1baiArIDFdKSA/IHkgKyB3LmNvbmZpZy5tYXJrZXJzLm9mZnNldFkgOiBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdFgucHVzaCh4ICsgdy5jb25maWcubWFya2Vycy5vZmZzZXRYKTtcbiAgICAgICAgICBwdFkucHVzaChVdGlscy5pc051bWJlcihzZXJpZXNbaV1baiArIDFdKSA/IHkgKyB3LmNvbmZpZy5tYXJrZXJzLm9mZnNldFkgOiBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb2ludHNQb3MgPSB7XG4gICAgICAgICAgeDogcHRYLFxuICAgICAgICAgIHk6IHB0WVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcG9pbnRzUG9zO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjaGVja1ByZXZpb3VzUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1ByZXZpb3VzUGF0aHMoX3JlZjIpIHtcbiAgICAgICAgdmFyIHBhdGhGcm9tTGluZSA9IF9yZWYyLnBhdGhGcm9tTGluZSxcbiAgICAgICAgICAgIHBhdGhGcm9tQXJlYSA9IF9yZWYyLnBhdGhGcm9tQXJlYSxcbiAgICAgICAgICAgIHJlYWxJbmRleCA9IF9yZWYyLnJlYWxJbmRleDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgZm9yICh2YXIgcHAgPSAwOyBwcCA8IHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLmxlbmd0aDsgcHArKykge1xuICAgICAgICAgIHZhciBncHAgPSB3Lmdsb2JhbHMucHJldmlvdXNQYXRoc1twcF07XG5cbiAgICAgICAgICBpZiAoKGdwcC50eXBlID09PSAnbGluZScgfHwgZ3BwLnR5cGUgPT09ICdhcmVhJykgJiYgZ3BwLnBhdGhzLmxlbmd0aCA+IDAgJiYgcGFyc2VJbnQoZ3BwLnJlYWxJbmRleCwgMTApID09PSBwYXJzZUludChyZWFsSW5kZXgsIDEwKSkge1xuICAgICAgICAgICAgaWYgKGdwcC50eXBlID09PSAnbGluZScpIHtcbiAgICAgICAgICAgICAgdGhpcy5saW5lQ3R4LmFwcGVuZFBhdGhGcm9tID0gZmFsc2U7XG4gICAgICAgICAgICAgIHBhdGhGcm9tTGluZSA9IHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzW3BwXS5wYXRoc1swXS5kO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChncHAudHlwZSA9PT0gJ2FyZWEnKSB7XG4gICAgICAgICAgICAgIHRoaXMubGluZUN0eC5hcHBlbmRQYXRoRnJvbSA9IGZhbHNlO1xuICAgICAgICAgICAgICBwYXRoRnJvbUFyZWEgPSB3Lmdsb2JhbHMucHJldmlvdXNQYXRoc1twcF0ucGF0aHNbMF0uZDtcblxuICAgICAgICAgICAgICBpZiAody5jb25maWcuc3Ryb2tlLnNob3cgJiYgdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbcHBdLnBhdGhzWzFdKSB7XG4gICAgICAgICAgICAgICAgcGF0aEZyb21MaW5lID0gdy5nbG9iYWxzLnByZXZpb3VzUGF0aHNbcHBdLnBhdGhzWzFdLmQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGhGcm9tTGluZTogcGF0aEZyb21MaW5lLFxuICAgICAgICAgIHBhdGhGcm9tQXJlYTogcGF0aEZyb21BcmVhXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRldGVybWluZUZpcnN0UHJldllcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRlcm1pbmVGaXJzdFByZXZZKF9yZWYzKSB7XG4gICAgICAgIHZhciBpID0gX3JlZjMuaSxcbiAgICAgICAgICAgIHNlcmllcyA9IF9yZWYzLnNlcmllcyxcbiAgICAgICAgICAgIHByZXZZID0gX3JlZjMucHJldlksXG4gICAgICAgICAgICBsaW5lWVBvc2l0aW9uID0gX3JlZjMubGluZVlQb3NpdGlvbjtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzZXJpZXNbaV1bMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnN0YWNrZWQpIHtcbiAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAvLyAxc3QgeSB2YWx1ZSBvZiBwcmV2aW91cyBzZXJpZXNcbiAgICAgICAgICAgICAgbGluZVlQb3NpdGlvbiA9IHRoaXMubGluZUN0eC5wcmV2U2VyaWVzWVtpIC0gMV1bMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyB0aGUgZmlyc3Qgc2VyaWVzIHdpbGwgbm90IGhhdmUgcHJldlkgdmFsdWVzXG4gICAgICAgICAgICAgIGxpbmVZUG9zaXRpb24gPSB0aGlzLmxpbmVDdHguemVyb1k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVZUG9zaXRpb24gPSB0aGlzLmxpbmVDdHguemVyb1k7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJldlkgPSBsaW5lWVBvc2l0aW9uIC0gc2VyaWVzW2ldWzBdIC8gdGhpcy5saW5lQ3R4LnlSYXRpb1t0aGlzLmxpbmVDdHgueWF4aXNJbmRleF0gKyAodGhpcy5saW5lQ3R4LmlzUmV2ZXJzZWQgPyBzZXJpZXNbaV1bMF0gLyB0aGlzLmxpbmVDdHgueVJhdGlvW3RoaXMubGluZUN0eC55YXhpc0luZGV4XSA6IDApICogMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgaW4gdGhlIGN1cnJlbnQgc2VyaWVzIGlzIG51bGxcbiAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuc3RhY2tlZCAmJiBpID4gMCAmJiB0eXBlb2Ygc2VyaWVzW2ldWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHVuZGVmaW5lZCB2YWx1ZSAodW5kZWZpbmVkIHZhbHVlIHdpbGwgb2NjdXIgd2hlbiB3ZSBjbGVhciB0aGUgc2VyaWVzIHdoaWxlIHVzZXIgY2xpY2tzIG9uIGxlZ2VuZCB0byBoaWRlIHNlcmllc2VzKVxuICAgICAgICAgICAgZm9yICh2YXIgcyA9IGkgLSAxOyBzID49IDA7IHMtLSkge1xuICAgICAgICAgICAgICAvLyBmb3IgbG9vcCB0byBnZXQgdG8gMXN0IHByZXZpb3VzIHZhbHVlIHVudGlsIHdlIGdldCBpdFxuICAgICAgICAgICAgICBpZiAoc2VyaWVzW3NdWzBdICE9PSBudWxsICYmIHR5cGVvZiBzZXJpZXNbc11bMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbGluZVlQb3NpdGlvbiA9IHRoaXMubGluZUN0eC5wcmV2U2VyaWVzWVtzXVswXTtcbiAgICAgICAgICAgICAgICBwcmV2WSA9IGxpbmVZUG9zaXRpb247XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByZXZZOiBwcmV2WSxcbiAgICAgICAgICBsaW5lWVBvc2l0aW9uOiBsaW5lWVBvc2l0aW9uXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEhlbHBlcnM7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBMaW5lIENsYXNzIHJlc3BvbnNpYmxlIGZvciBkcmF3aW5nIExpbmUgLyBBcmVhIENoYXJ0cy5cbiAgICogVGhpcyBjbGFzcyBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHZhbHVlcyBmb3IgQnViYmxlL1NjYXR0ZXIgY2hhcnRzLCBzbyBuZWVkIHRvIHJlbmFtZSBpdCB0byBBeGlzIENoYXJ0cyB0byBhdm9pZCBjb25mdXNpb25zXG4gICAqIEBtb2R1bGUgTGluZVxuICAgKiovXG5cbiAgdmFyIExpbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExpbmUoY3R4LCB4eVJhdGlvcywgaXNQb2ludHNDaGFydCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmUpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgICAgdGhpcy54eVJhdGlvcyA9IHh5UmF0aW9zO1xuICAgICAgdGhpcy5wb2ludHNDaGFydCA9ICEodGhpcy53LmNvbmZpZy5jaGFydC50eXBlICE9PSAnYnViYmxlJyAmJiB0aGlzLncuY29uZmlnLmNoYXJ0LnR5cGUgIT09ICdzY2F0dGVyJykgfHwgaXNQb2ludHNDaGFydDtcbiAgICAgIHRoaXMuc2NhdHRlciA9IG5ldyBTY2F0dGVyKHRoaXMuY3R4KTtcbiAgICAgIHRoaXMubm9OZWdhdGl2ZXMgPSB0aGlzLncuZ2xvYmFscy5taW5YID09PSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgdGhpcy5saW5lSGVscGVycyA9IG5ldyBIZWxwZXJzJDQodGhpcyk7XG4gICAgICB0aGlzLm1hcmtlcnMgPSBuZXcgTWFya2Vycyh0aGlzLmN0eCk7XG4gICAgICB0aGlzLnByZXZTZXJpZXNZID0gW107XG4gICAgICB0aGlzLmNhdGVnb3J5QXhpc0NvcnJlY3Rpb24gPSAwO1xuICAgICAgdGhpcy55YXhpc0luZGV4ID0gMDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTGluZSwgW3tcbiAgICAgIGtleTogXCJkcmF3XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhdyhzZXJpZXMsIHB0eXBlLCBzZXJpZXNJbmRleCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHR5cGUgPSB3Lmdsb2JhbHMuY29tYm9DaGFydHMgPyBwdHlwZSA6IHcuY29uZmlnLmNoYXJ0LnR5cGU7XG4gICAgICAgIHZhciByZXQgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6IFwiYXBleGNoYXJ0cy1cIi5jb25jYXQodHlwZSwgXCItc2VyaWVzIGFwZXhjaGFydHMtcGxvdC1zZXJpZXNcIilcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjb3JlVXRpbHMgPSBuZXcgQ29yZVV0aWxzKHRoaXMuY3R4LCB3KTtcbiAgICAgICAgdGhpcy55UmF0aW8gPSB0aGlzLnh5UmF0aW9zLnlSYXRpbztcbiAgICAgICAgdGhpcy56UmF0aW8gPSB0aGlzLnh5UmF0aW9zLnpSYXRpbztcbiAgICAgICAgdGhpcy54UmF0aW8gPSB0aGlzLnh5UmF0aW9zLnhSYXRpbztcbiAgICAgICAgdGhpcy5iYXNlTGluZVkgPSB0aGlzLnh5UmF0aW9zLmJhc2VMaW5lWTtcbiAgICAgICAgc2VyaWVzID0gY29yZVV0aWxzLmdldExvZ1NlcmllcyhzZXJpZXMpO1xuICAgICAgICB0aGlzLnlSYXRpbyA9IGNvcmVVdGlscy5nZXRMb2dZUmF0aW9zKHRoaXMueVJhdGlvKTsgLy8gcHVzaCBhbGwgc2VyaWVzIGluIGFuIGFycmF5LCBzbyB3ZSBjYW4gZHJhdyBpbiByZXZlcnNlIG9yZGVyIChmb3Igc3RhY2tlZCBjaGFydHMpXG5cbiAgICAgICAgdmFyIGFsbFNlcmllcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc2VyaWVzID0gdGhpcy5saW5lSGVscGVycy5zYW1lVmFsdWVTZXJpZXNGaXgoaSwgc2VyaWVzKTtcbiAgICAgICAgICB2YXIgcmVhbEluZGV4ID0gdy5nbG9iYWxzLmNvbWJvQ2hhcnRzID8gc2VyaWVzSW5kZXhbaV0gOiBpO1xuXG4gICAgICAgICAgdGhpcy5faW5pdFNlcmllVmFyaWFibGVzKHNlcmllcywgaSwgcmVhbEluZGV4KTtcblxuICAgICAgICAgIHZhciB5QXJyaiA9IFtdOyAvLyBob2xkIHkgdmFsdWVzIG9mIGN1cnJlbnQgaXRlcmF0aW5nIHNlcmllc1xuXG4gICAgICAgICAgdmFyIHhBcnJqID0gW107IC8vIGhvbGQgeCB2YWx1ZXMgb2YgY3VycmVudCBpdGVyYXRpbmcgc2VyaWVzXG5cbiAgICAgICAgICB2YXIgeCA9IHcuZ2xvYmFscy5wYWRIb3Jpem9udGFsICsgdGhpcy5jYXRlZ29yeUF4aXNDb3JyZWN0aW9uO1xuICAgICAgICAgIHZhciB5ID0gMTtcbiAgICAgICAgICB2YXIgbGluZVBhdGhzID0gW107XG4gICAgICAgICAgdmFyIGFyZWFQYXRocyA9IFtdO1xuICAgICAgICAgIHRoaXMuY3R4LnNlcmllcy5hZGRDb2xsYXBzZWRDbGFzc1RvU2VyaWVzKHRoaXMuZWxTZXJpZXMsIHJlYWxJbmRleCk7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmlzWE51bWVyaWMgJiYgdy5nbG9iYWxzLnNlcmllc1gubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgeCA9ICh3Lmdsb2JhbHMuc2VyaWVzWFtyZWFsSW5kZXhdWzBdIC0gdy5nbG9iYWxzLm1pblgpIC8gdGhpcy54UmF0aW87XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeEFycmoucHVzaCh4KTtcbiAgICAgICAgICB2YXIgcFggPSB4O1xuICAgICAgICAgIHZhciBwWSA9IHZvaWQgMDtcbiAgICAgICAgICB2YXIgcHJldlggPSBwWDtcbiAgICAgICAgICB2YXIgcHJldlkgPSB0aGlzLnplcm9ZO1xuICAgICAgICAgIHZhciBsaW5lWVBvc2l0aW9uID0gMDsgLy8gdGhlIGZpcnN0IHZhbHVlIGluIHRoZSBjdXJyZW50IHNlcmllcyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcblxuICAgICAgICAgIHZhciBmaXJzdFByZXZZID0gdGhpcy5saW5lSGVscGVycy5kZXRlcm1pbmVGaXJzdFByZXZZKHtcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICBzZXJpZXM6IHNlcmllcyxcbiAgICAgICAgICAgIHByZXZZOiBwcmV2WSxcbiAgICAgICAgICAgIGxpbmVZUG9zaXRpb246IGxpbmVZUG9zaXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwcmV2WSA9IGZpcnN0UHJldlkucHJldlk7XG4gICAgICAgICAgeUFycmoucHVzaChwcmV2WSk7XG4gICAgICAgICAgcFkgPSBwcmV2WTtcblxuICAgICAgICAgIHZhciBwYXRoc0Zyb20gPSB0aGlzLl9jYWxjdWxhdGVQYXRoc0Zyb20oe1xuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgICBwcmV2WDogcHJldlgsXG4gICAgICAgICAgICBwcmV2WTogcHJldllcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBwYXRocyA9IHRoaXMuX2l0ZXJhdGVPdmVyRGF0YVBvaW50cyh7XG4gICAgICAgICAgICBzZXJpZXM6IHNlcmllcyxcbiAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgcFg6IHBYLFxuICAgICAgICAgICAgcFk6IHBZLFxuICAgICAgICAgICAgcGF0aHNGcm9tOiBwYXRoc0Zyb20sXG4gICAgICAgICAgICBsaW5lUGF0aHM6IGxpbmVQYXRocyxcbiAgICAgICAgICAgIGFyZWFQYXRoczogYXJlYVBhdGhzLFxuICAgICAgICAgICAgc2VyaWVzSW5kZXg6IHNlcmllc0luZGV4LFxuICAgICAgICAgICAgbGluZVlQb3NpdGlvbjogbGluZVlQb3NpdGlvbixcbiAgICAgICAgICAgIHhBcnJqOiB4QXJyaixcbiAgICAgICAgICAgIHlBcnJqOiB5QXJyalxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy5faGFuZGxlUGF0aHMoe1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIHBhdGhzOiBwYXRoc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy5lbFNlcmllcy5hZGQodGhpcy5lbFBvaW50c01haW4pO1xuICAgICAgICAgIHRoaXMuZWxTZXJpZXMuYWRkKHRoaXMuZWxEYXRhTGFiZWxzV3JhcCk7XG4gICAgICAgICAgYWxsU2VyaWVzLnB1c2godGhpcy5lbFNlcmllcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBzID0gYWxsU2VyaWVzLmxlbmd0aDsgcyA+IDA7IHMtLSkge1xuICAgICAgICAgIHJldC5hZGQoYWxsU2VyaWVzW3MgLSAxXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaW5pdFNlcmllVmFyaWFibGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXRTZXJpZVZhcmlhYmxlcyhzZXJpZXMsIGksIHJlYWxJbmRleCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTsgLy8gd2lkdGggZGl2aWRlZCBpbnRvIGVxdWFsIHBhcnRzXG5cbiAgICAgICAgdGhpcy54RGl2aXNpb24gPSB3Lmdsb2JhbHMuZ3JpZFdpZHRoIC8gKHcuZ2xvYmFscy5kYXRhUG9pbnRzIC0gKHcuY29uZmlnLnhheGlzLnRpY2tQbGFjZW1lbnQgPT09ICdvbicgPyAxIDogMCkpO1xuICAgICAgICB0aGlzLnN0cm9rZVdpZHRoID0gQXJyYXkuaXNBcnJheSh3LmNvbmZpZy5zdHJva2Uud2lkdGgpID8gdy5jb25maWcuc3Ryb2tlLndpZHRoW3JlYWxJbmRleF0gOiB3LmNvbmZpZy5zdHJva2Uud2lkdGg7XG5cbiAgICAgICAgaWYgKHRoaXMueVJhdGlvLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aGlzLnlheGlzSW5kZXggPSByZWFsSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlzUmV2ZXJzZWQgPSB3LmNvbmZpZy55YXhpc1t0aGlzLnlheGlzSW5kZXhdICYmIHcuY29uZmlnLnlheGlzW3RoaXMueWF4aXNJbmRleF0ucmV2ZXJzZWQ7IC8vIHplcm9ZIGlzIHRoZSAwIHZhbHVlIGluIHkgc2VyaWVzIHdoaWNoIGNhbiBiZSB1c2VkIGluIG5lZ2F0aXZlIGNoYXJ0c1xuXG4gICAgICAgIHRoaXMuemVyb1kgPSB3Lmdsb2JhbHMuZ3JpZEhlaWdodCAtIHRoaXMuYmFzZUxpbmVZW3RoaXMueWF4aXNJbmRleF0gLSAodGhpcy5pc1JldmVyc2VkID8gdy5nbG9iYWxzLmdyaWRIZWlnaHQgOiAwKSArICh0aGlzLmlzUmV2ZXJzZWQgPyB0aGlzLmJhc2VMaW5lWVt0aGlzLnlheGlzSW5kZXhdICogMiA6IDApO1xuICAgICAgICB0aGlzLmFyZWFCb3R0b21ZID0gdGhpcy56ZXJvWTtcblxuICAgICAgICBpZiAodGhpcy56ZXJvWSA+IHcuZ2xvYmFscy5ncmlkSGVpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5hcmVhQm90dG9tWSA9IHcuZ2xvYmFscy5ncmlkSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYXRlZ29yeUF4aXNDb3JyZWN0aW9uID0gdGhpcy54RGl2aXNpb24gLyAyOyAvLyBlbCB0byB3aGljaCBzZXJpZXMgd2lsbCBiZSBkcmF3blxuXG4gICAgICAgIHRoaXMuZWxTZXJpZXMgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6IFwiYXBleGNoYXJ0cy1zZXJpZXNcIixcbiAgICAgICAgICBzZXJpZXNOYW1lOiBVdGlscy5lc2NhcGVTdHJpbmcody5nbG9iYWxzLnNlcmllc05hbWVzW3JlYWxJbmRleF0pXG4gICAgICAgIH0pOyAvLyBwb2ludHNcblxuICAgICAgICB0aGlzLmVsUG9pbnRzTWFpbiA9IGdyYXBoaWNzLmdyb3VwKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtc2VyaWVzLW1hcmtlcnMtd3JhcCcsXG4gICAgICAgICAgJ2RhdGE6cmVhbEluZGV4JzogcmVhbEluZGV4XG4gICAgICAgIH0pOyAvLyBlbGRhdGFsYWJlbHNcblxuICAgICAgICB0aGlzLmVsRGF0YUxhYmVsc1dyYXAgPSBncmFwaGljcy5ncm91cCh7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLWRhdGFsYWJlbHMnLFxuICAgICAgICAgICdkYXRhOnJlYWxJbmRleCc6IHJlYWxJbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGxvbmdlc3RTZXJpZXMgPSBzZXJpZXNbaV0ubGVuZ3RoID09PSB3Lmdsb2JhbHMuZGF0YVBvaW50cztcbiAgICAgICAgdGhpcy5lbFNlcmllcy5hdHRyKHtcbiAgICAgICAgICAnZGF0YTpsb25nZXN0U2VyaWVzJzogbG9uZ2VzdFNlcmllcyxcbiAgICAgICAgICByZWw6IGkgKyAxLFxuICAgICAgICAgICdkYXRhOnJlYWxJbmRleCc6IHJlYWxJbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcHBlbmRQYXRoRnJvbSA9IHRydWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9jYWxjdWxhdGVQYXRoc0Zyb21cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2FsY3VsYXRlUGF0aHNGcm9tKF9yZWYpIHtcbiAgICAgICAgdmFyIHNlcmllcyA9IF9yZWYuc2VyaWVzLFxuICAgICAgICAgICAgaSA9IF9yZWYuaSxcbiAgICAgICAgICAgIHJlYWxJbmRleCA9IF9yZWYucmVhbEluZGV4LFxuICAgICAgICAgICAgcHJldlggPSBfcmVmLnByZXZYLFxuICAgICAgICAgICAgcHJldlkgPSBfcmVmLnByZXZZO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIGxpbmVQYXRoLCBhcmVhUGF0aCwgcGF0aEZyb21MaW5lLCBwYXRoRnJvbUFyZWE7XG5cbiAgICAgICAgaWYgKHNlcmllc1tpXVswXSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIHdoZW4gdGhlIGZpcnN0IHZhbHVlIGl0c2VsZiBpcyBudWxsLCB3ZSBuZWVkIHRvIG1vdmUgdGhlIHBvaW50ZXIgdG8gYSBsb2NhdGlvbiB3aGVyZSBhIG51bGwgdmFsdWUgaXMgbm90IGZvdW5kXG4gICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzZXJpZXNbaV0ubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgIGlmIChzZXJpZXNbaV1bc10gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJldlggPSB0aGlzLnhEaXZpc2lvbiAqIHM7XG4gICAgICAgICAgICAgIHByZXZZID0gdGhpcy56ZXJvWSAtIHNlcmllc1tpXVtzXSAvIHRoaXMueVJhdGlvW3RoaXMueWF4aXNJbmRleF07XG4gICAgICAgICAgICAgIGxpbmVQYXRoID0gZ3JhcGhpY3MubW92ZShwcmV2WCwgcHJldlkpO1xuICAgICAgICAgICAgICBhcmVhUGF0aCA9IGdyYXBoaWNzLm1vdmUocHJldlgsIHRoaXMuYXJlYUJvdHRvbVkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGluZVBhdGggPSBncmFwaGljcy5tb3ZlKHByZXZYLCBwcmV2WSk7XG4gICAgICAgICAgYXJlYVBhdGggPSBncmFwaGljcy5tb3ZlKHByZXZYLCB0aGlzLmFyZWFCb3R0b21ZKSArIGdyYXBoaWNzLmxpbmUocHJldlgsIHByZXZZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhdGhGcm9tTGluZSA9IGdyYXBoaWNzLm1vdmUoLTEsIHRoaXMuemVyb1kpICsgZ3JhcGhpY3MubGluZSgtMSwgdGhpcy56ZXJvWSk7XG4gICAgICAgIHBhdGhGcm9tQXJlYSA9IGdyYXBoaWNzLm1vdmUoLTEsIHRoaXMuemVyb1kpICsgZ3JhcGhpY3MubGluZSgtMSwgdGhpcy56ZXJvWSk7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5wcmV2aW91c1BhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgcGF0aEZyb20gPSB0aGlzLmxpbmVIZWxwZXJzLmNoZWNrUHJldmlvdXNQYXRocyh7XG4gICAgICAgICAgICBwYXRoRnJvbUxpbmU6IHBhdGhGcm9tTGluZSxcbiAgICAgICAgICAgIHBhdGhGcm9tQXJlYTogcGF0aEZyb21BcmVhLFxuICAgICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwYXRoRnJvbUxpbmUgPSBwYXRoRnJvbS5wYXRoRnJvbUxpbmU7XG4gICAgICAgICAgcGF0aEZyb21BcmVhID0gcGF0aEZyb20ucGF0aEZyb21BcmVhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcmV2WDogcHJldlgsXG4gICAgICAgICAgcHJldlk6IHByZXZZLFxuICAgICAgICAgIGxpbmVQYXRoOiBsaW5lUGF0aCxcbiAgICAgICAgICBhcmVhUGF0aDogYXJlYVBhdGgsXG4gICAgICAgICAgcGF0aEZyb21MaW5lOiBwYXRoRnJvbUxpbmUsXG4gICAgICAgICAgcGF0aEZyb21BcmVhOiBwYXRoRnJvbUFyZWFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hhbmRsZVBhdGhzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVBhdGhzKF9yZWYyKSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjIudHlwZSxcbiAgICAgICAgICAgIHJlYWxJbmRleCA9IF9yZWYyLnJlYWxJbmRleCxcbiAgICAgICAgICAgIGkgPSBfcmVmMi5pLFxuICAgICAgICAgICAgcGF0aHMgPSBfcmVmMi5wYXRocztcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBmaWxsID0gbmV3IEZpbGwodGhpcy5jdHgpOyAvLyBwdXNoIGFsbCBjdXJyZW50IHkgdmFsdWVzIGFycmF5IHRvIG1haW4gUHJldlkgQXJyYXlcblxuICAgICAgICB0aGlzLnByZXZTZXJpZXNZLnB1c2gocGF0aHMueUFycmopOyAvLyBwdXNoIGFsbCB4IHZhbCBhcnJheXMgaW50byBtYWluIHhBcnJcblxuICAgICAgICB3Lmdsb2JhbHMuc2VyaWVzWHZhbHVlc1tyZWFsSW5kZXhdID0gcGF0aHMueEFycmo7XG4gICAgICAgIHcuZ2xvYmFscy5zZXJpZXNZdmFsdWVzW3JlYWxJbmRleF0gPSBwYXRocy55QXJyajsgLy8gdGhlc2UgZWxlbWVudHMgd2lsbCBiZSBzaG93biBhZnRlciBhcmVhIHBhdGggYW5pbWF0aW9uIGNvbXBsZXRlc1xuXG4gICAgICAgIGlmICghdGhpcy5wb2ludHNDaGFydCkge1xuICAgICAgICAgIHcuZ2xvYmFscy5kZWxheWVkRWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICBlbDogdGhpcy5lbFBvaW50c01haW4ubm9kZSxcbiAgICAgICAgICAgIGluZGV4OiByZWFsSW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZhdWx0UmVuZGVyZWRQYXRoT3B0aW9ucyA9IHtcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBpLFxuICAgICAgICAgIGluaXRpYWxTcGVlZDogdy5jb25maWcuY2hhcnQuYW5pbWF0aW9ucy5zcGVlZCxcbiAgICAgICAgICBkYXRhQ2hhbmdlU3BlZWQ6IHcuY29uZmlnLmNoYXJ0LmFuaW1hdGlvbnMuZHluYW1pY0FuaW1hdGlvbi5zcGVlZCxcbiAgICAgICAgICBjbGFzc05hbWU6IFwiYXBleGNoYXJ0cy1cIi5jb25jYXQodHlwZSlcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ2FyZWEnKSB7XG4gICAgICAgICAgdmFyIHBhdGhGaWxsID0gZmlsbC5maWxsUGF0aCh7XG4gICAgICAgICAgICBzZXJpZXNOdW1iZXI6IHJlYWxJbmRleFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwYXRocy5hcmVhUGF0aHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJlZFBhdGggPSBncmFwaGljcy5yZW5kZXJQYXRocyhfb2JqZWN0U3ByZWFkMih7fSwgZGVmYXVsdFJlbmRlcmVkUGF0aE9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgcGF0aEZyb206IHBhdGhzLnBhdGhGcm9tQXJlYSxcbiAgICAgICAgICAgICAgcGF0aFRvOiBwYXRocy5hcmVhUGF0aHNbcF0sXG4gICAgICAgICAgICAgIHN0cm9rZTogJ25vbmUnLFxuICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAgICAgc3Ryb2tlTGluZUNhcDogbnVsbCxcbiAgICAgICAgICAgICAgZmlsbDogcGF0aEZpbGxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHRoaXMuZWxTZXJpZXMuYWRkKHJlbmRlcmVkUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnN0cm9rZS5zaG93ICYmICF0aGlzLnBvaW50c0NoYXJ0KSB7XG4gICAgICAgICAgdmFyIGxpbmVGaWxsID0gbnVsbDtcblxuICAgICAgICAgIGlmICh0eXBlID09PSAnbGluZScpIHtcbiAgICAgICAgICAgIC8vIGZpbGxhYmxlIGxpbmVzIG9ubHkgZm9yIGxpbmVDaGFydFxuICAgICAgICAgICAgbGluZUZpbGwgPSBmaWxsLmZpbGxQYXRoKHtcbiAgICAgICAgICAgICAgc2VyaWVzTnVtYmVyOiByZWFsSW5kZXgsXG4gICAgICAgICAgICAgIGk6IGlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lRmlsbCA9IHcuZ2xvYmFscy5zdHJva2UuY29sb3JzW3JlYWxJbmRleF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh2YXIgX3AgPSAwOyBfcCA8IHBhdGhzLmxpbmVQYXRocy5sZW5ndGg7IF9wKyspIHtcbiAgICAgICAgICAgIHZhciBfcmVuZGVyZWRQYXRoID0gZ3JhcGhpY3MucmVuZGVyUGF0aHMoX29iamVjdFNwcmVhZDIoe30sIGRlZmF1bHRSZW5kZXJlZFBhdGhPcHRpb25zLCB7XG4gICAgICAgICAgICAgIHBhdGhGcm9tOiBwYXRocy5wYXRoRnJvbUxpbmUsXG4gICAgICAgICAgICAgIHBhdGhUbzogcGF0aHMubGluZVBhdGhzW19wXSxcbiAgICAgICAgICAgICAgc3Ryb2tlOiBsaW5lRmlsbCxcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaXMuc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICAgIHN0cm9rZUxpbmVDYXA6IHcuY29uZmlnLnN0cm9rZS5saW5lQ2FwLFxuICAgICAgICAgICAgICBmaWxsOiAnbm9uZSdcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdGhpcy5lbFNlcmllcy5hZGQoX3JlbmRlcmVkUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9pdGVyYXRlT3ZlckRhdGFQb2ludHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaXRlcmF0ZU92ZXJEYXRhUG9pbnRzKF9yZWYzKSB7XG4gICAgICAgIHZhciBzZXJpZXMgPSBfcmVmMy5zZXJpZXMsXG4gICAgICAgICAgICByZWFsSW5kZXggPSBfcmVmMy5yZWFsSW5kZXgsXG4gICAgICAgICAgICBpID0gX3JlZjMuaSxcbiAgICAgICAgICAgIHggPSBfcmVmMy54LFxuICAgICAgICAgICAgeSA9IF9yZWYzLnksXG4gICAgICAgICAgICBwWCA9IF9yZWYzLnBYLFxuICAgICAgICAgICAgcFkgPSBfcmVmMy5wWSxcbiAgICAgICAgICAgIHBhdGhzRnJvbSA9IF9yZWYzLnBhdGhzRnJvbSxcbiAgICAgICAgICAgIGxpbmVQYXRocyA9IF9yZWYzLmxpbmVQYXRocyxcbiAgICAgICAgICAgIGFyZWFQYXRocyA9IF9yZWYzLmFyZWFQYXRocyxcbiAgICAgICAgICAgIHNlcmllc0luZGV4ID0gX3JlZjMuc2VyaWVzSW5kZXgsXG4gICAgICAgICAgICBsaW5lWVBvc2l0aW9uID0gX3JlZjMubGluZVlQb3NpdGlvbixcbiAgICAgICAgICAgIHhBcnJqID0gX3JlZjMueEFycmosXG4gICAgICAgICAgICB5QXJyaiA9IF9yZWYzLnlBcnJqO1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHlSYXRpbyA9IHRoaXMueVJhdGlvO1xuICAgICAgICB2YXIgcHJldlkgPSBwYXRoc0Zyb20ucHJldlksXG4gICAgICAgICAgICBsaW5lUGF0aCA9IHBhdGhzRnJvbS5saW5lUGF0aCxcbiAgICAgICAgICAgIGFyZWFQYXRoID0gcGF0aHNGcm9tLmFyZWFQYXRoLFxuICAgICAgICAgICAgcGF0aEZyb21MaW5lID0gcGF0aHNGcm9tLnBhdGhGcm9tTGluZSxcbiAgICAgICAgICAgIHBhdGhGcm9tQXJlYSA9IHBhdGhzRnJvbS5wYXRoRnJvbUFyZWE7XG4gICAgICAgIHZhciBtaW5ZID0gVXRpbHMuaXNOdW1iZXIody5nbG9iYWxzLm1pbllBcnJbcmVhbEluZGV4XSkgPyB3Lmdsb2JhbHMubWluWUFycltyZWFsSW5kZXhdIDogdy5nbG9iYWxzLm1pblk7XG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gdy5nbG9iYWxzLmRhdGFQb2ludHMgPiAxID8gdy5nbG9iYWxzLmRhdGFQb2ludHMgLSAxIDogdy5nbG9iYWxzLmRhdGFQb2ludHM7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgICAgICB2YXIgaXNOdWxsID0gdHlwZW9mIHNlcmllc1tpXVtqICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNlcmllc1tpXVtqICsgMV0gPT09IG51bGw7XG5cbiAgICAgICAgICBpZiAody5nbG9iYWxzLmlzWE51bWVyaWMpIHtcbiAgICAgICAgICAgIHZhciBzWCA9IHcuZ2xvYmFscy5zZXJpZXNYW3JlYWxJbmRleF1baiArIDFdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHcuZ2xvYmFscy5zZXJpZXNYW3JlYWxJbmRleF1baiArIDFdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAvKiBmaXggIzM3NCAqL1xuICAgICAgICAgICAgICBzWCA9IHcuZ2xvYmFscy5zZXJpZXNYW3JlYWxJbmRleF1baXRlcmF0aW9ucyAtIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB4ID0gKHNYIC0gdy5nbG9iYWxzLm1pblgpIC8gdGhpcy54UmF0aW87XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSB4ICsgdGhpcy54RGl2aXNpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnN0YWNrZWQpIHtcbiAgICAgICAgICAgIGlmIChpID4gMCAmJiB3Lmdsb2JhbHMuY29sbGFwc2VkU2VyaWVzLmxlbmd0aCA8IHcuY29uZmlnLnNlcmllcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGxpbmVZUG9zaXRpb24gPSB0aGlzLnByZXZTZXJpZXNZW2kgLSAxXVtqICsgMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyB0aGUgZmlyc3Qgc2VyaWVzIHdpbGwgbm90IGhhdmUgcHJldlkgdmFsdWVzXG4gICAgICAgICAgICAgIGxpbmVZUG9zaXRpb24gPSB0aGlzLnplcm9ZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lWVBvc2l0aW9uID0gdGhpcy56ZXJvWTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNOdWxsKSB7XG4gICAgICAgICAgICB5ID0gbGluZVlQb3NpdGlvbiAtIG1pblkgLyB5UmF0aW9bdGhpcy55YXhpc0luZGV4XSArICh0aGlzLmlzUmV2ZXJzZWQgPyBtaW5ZIC8geVJhdGlvW3RoaXMueWF4aXNJbmRleF0gOiAwKSAqIDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkgPSBsaW5lWVBvc2l0aW9uIC0gc2VyaWVzW2ldW2ogKyAxXSAvIHlSYXRpb1t0aGlzLnlheGlzSW5kZXhdICsgKHRoaXMuaXNSZXZlcnNlZCA/IHNlcmllc1tpXVtqICsgMV0gLyB5UmF0aW9bdGhpcy55YXhpc0luZGV4XSA6IDApICogMjtcbiAgICAgICAgICB9IC8vIHB1c2ggY3VycmVudCBYXG5cblxuICAgICAgICAgIHhBcnJqLnB1c2goeCk7IC8vIHB1c2ggY3VycmVudCBZIHRoYXQgd2lsbCBiZSB1c2VkIGFzIG5leHQgc2VyaWVzJ3MgYm90dG9tIHBvc2l0aW9uXG5cbiAgICAgICAgICB5QXJyai5wdXNoKHkpO1xuICAgICAgICAgIHZhciBwb2ludHNQb3MgPSB0aGlzLmxpbmVIZWxwZXJzLmNhbGN1bGF0ZVBvaW50cyh7XG4gICAgICAgICAgICBzZXJpZXM6IHNlcmllcyxcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgIHByZXZZOiBwcmV2WVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYXRocyA9IHRoaXMuX2NyZWF0ZVBhdGhzKHtcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgaTogaSxcbiAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgICAgajogaixcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgcFg6IHBYLFxuICAgICAgICAgICAgcFk6IHBZLFxuICAgICAgICAgICAgbGluZVBhdGg6IGxpbmVQYXRoLFxuICAgICAgICAgICAgYXJlYVBhdGg6IGFyZWFQYXRoLFxuICAgICAgICAgICAgbGluZVBhdGhzOiBsaW5lUGF0aHMsXG4gICAgICAgICAgICBhcmVhUGF0aHM6IGFyZWFQYXRocyxcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiBzZXJpZXNJbmRleFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYXJlYVBhdGhzID0gY2FsY3VsYXRlZFBhdGhzLmFyZWFQYXRocztcbiAgICAgICAgICBsaW5lUGF0aHMgPSBjYWxjdWxhdGVkUGF0aHMubGluZVBhdGhzO1xuICAgICAgICAgIHBYID0gY2FsY3VsYXRlZFBhdGhzLnBYO1xuICAgICAgICAgIHBZID0gY2FsY3VsYXRlZFBhdGhzLnBZO1xuICAgICAgICAgIGFyZWFQYXRoID0gY2FsY3VsYXRlZFBhdGhzLmFyZWFQYXRoO1xuICAgICAgICAgIGxpbmVQYXRoID0gY2FsY3VsYXRlZFBhdGhzLmxpbmVQYXRoO1xuXG4gICAgICAgICAgaWYgKHRoaXMuYXBwZW5kUGF0aEZyb20pIHtcbiAgICAgICAgICAgIHBhdGhGcm9tTGluZSA9IHBhdGhGcm9tTGluZSArIGdyYXBoaWNzLmxpbmUoeCwgdGhpcy56ZXJvWSk7XG4gICAgICAgICAgICBwYXRoRnJvbUFyZWEgPSBwYXRoRnJvbUFyZWEgKyBncmFwaGljcy5saW5lKHgsIHRoaXMuemVyb1kpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuaGFuZGxlTnVsbERhdGFQb2ludHMoc2VyaWVzLCBwb2ludHNQb3MsIGksIGosIHJlYWxJbmRleCk7XG5cbiAgICAgICAgICB0aGlzLl9oYW5kbGVNYXJrZXJzQW5kTGFiZWxzKHtcbiAgICAgICAgICAgIHBvaW50c1BvczogcG9pbnRzUG9zLFxuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgIHByZXZZOiBwcmV2WSxcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICBqOiBqLFxuICAgICAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeUFycmo6IHlBcnJqLFxuICAgICAgICAgIHhBcnJqOiB4QXJyaixcbiAgICAgICAgICBwYXRoRnJvbUFyZWE6IHBhdGhGcm9tQXJlYSxcbiAgICAgICAgICBhcmVhUGF0aHM6IGFyZWFQYXRocyxcbiAgICAgICAgICBwYXRoRnJvbUxpbmU6IHBhdGhGcm9tTGluZSxcbiAgICAgICAgICBsaW5lUGF0aHM6IGxpbmVQYXRoc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaGFuZGxlTWFya2Vyc0FuZExhYmVsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVNYXJrZXJzQW5kTGFiZWxzKF9yZWY0KSB7XG4gICAgICAgIHZhciBwb2ludHNQb3MgPSBfcmVmNC5wb2ludHNQb3MsXG4gICAgICAgICAgICBzZXJpZXMgPSBfcmVmNC5zZXJpZXMsXG4gICAgICAgICAgICB4ID0gX3JlZjQueCxcbiAgICAgICAgICAgIHkgPSBfcmVmNC55LFxuICAgICAgICAgICAgcHJldlkgPSBfcmVmNC5wcmV2WSxcbiAgICAgICAgICAgIGkgPSBfcmVmNC5pLFxuICAgICAgICAgICAgaiA9IF9yZWY0LmosXG4gICAgICAgICAgICByZWFsSW5kZXggPSBfcmVmNC5yZWFsSW5kZXg7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZGF0YUxhYmVscyA9IG5ldyBEYXRhTGFiZWxzKHRoaXMuY3R4KTtcblxuICAgICAgICBpZiAoIXRoaXMucG9pbnRzQ2hhcnQpIHtcbiAgICAgICAgICBpZiAody5nbG9iYWxzLnNlcmllc1tpXS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmVsUG9pbnRzTWFpbi5ub2RlLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtZWxlbWVudC1oaWRkZW4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZWxQb2ludHNXcmFwID0gdGhpcy5tYXJrZXJzLnBsb3RDaGFydE1hcmtlcnMocG9pbnRzUG9zLCByZWFsSW5kZXgsIGogKyAxKTtcblxuICAgICAgICAgIGlmIChlbFBvaW50c1dyYXAgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWxQb2ludHNNYWluLmFkZChlbFBvaW50c1dyYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzY2F0dGVyIC8gYnViYmxlIGNoYXJ0IHBvaW50cyBjcmVhdGlvblxuICAgICAgICAgIHRoaXMuc2NhdHRlci5kcmF3KHRoaXMuZWxTZXJpZXMsIGosIHtcbiAgICAgICAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgICAgICAgcG9pbnRzUG9zOiBwb2ludHNQb3MsXG4gICAgICAgICAgICB6UmF0aW86IHRoaXMuelJhdGlvLFxuICAgICAgICAgICAgZWxQYXJlbnQ6IHRoaXMuZWxQb2ludHNNYWluXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhd25MYWJlbHMgPSBkYXRhTGFiZWxzLmRyYXdEYXRhTGFiZWwocG9pbnRzUG9zLCByZWFsSW5kZXgsIGogKyAxLCBudWxsKTtcblxuICAgICAgICBpZiAoZHJhd25MYWJlbHMgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmVsRGF0YUxhYmVsc1dyYXAuYWRkKGRyYXduTGFiZWxzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfY3JlYXRlUGF0aHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlUGF0aHMoX3JlZjUpIHtcbiAgICAgICAgdmFyIHNlcmllcyA9IF9yZWY1LnNlcmllcyxcbiAgICAgICAgICAgIGkgPSBfcmVmNS5pLFxuICAgICAgICAgICAgcmVhbEluZGV4ID0gX3JlZjUucmVhbEluZGV4LFxuICAgICAgICAgICAgaiA9IF9yZWY1LmosXG4gICAgICAgICAgICB4ID0gX3JlZjUueCxcbiAgICAgICAgICAgIHkgPSBfcmVmNS55LFxuICAgICAgICAgICAgcFggPSBfcmVmNS5wWCxcbiAgICAgICAgICAgIHBZID0gX3JlZjUucFksXG4gICAgICAgICAgICBsaW5lUGF0aCA9IF9yZWY1LmxpbmVQYXRoLFxuICAgICAgICAgICAgYXJlYVBhdGggPSBfcmVmNS5hcmVhUGF0aCxcbiAgICAgICAgICAgIGxpbmVQYXRocyA9IF9yZWY1LmxpbmVQYXRocyxcbiAgICAgICAgICAgIGFyZWFQYXRocyA9IF9yZWY1LmFyZWFQYXRocyxcbiAgICAgICAgICAgIHNlcmllc0luZGV4ID0gX3JlZjUuc2VyaWVzSW5kZXg7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpO1xuICAgICAgICB2YXIgY3VydmUgPSB3LmNvbmZpZy5zdHJva2UuY3VydmU7XG4gICAgICAgIHZhciBhcmVhQm90dG9tWSA9IHRoaXMuYXJlYUJvdHRvbVk7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkody5jb25maWcuc3Ryb2tlLmN1cnZlKSkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlcmllc0luZGV4KSkge1xuICAgICAgICAgICAgY3VydmUgPSB3LmNvbmZpZy5zdHJva2UuY3VydmVbc2VyaWVzSW5kZXhbaV1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJ2ZSA9IHcuY29uZmlnLnN0cm9rZS5jdXJ2ZVtpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gbG9naWMgb2Ygc21vb3RoIGN1cnZlIGRlcml2ZWQgZnJvbSBjaGFydGlzdFxuICAgICAgICAvLyBDUkVESVRTOiBodHRwczovL2dpb25rdW56LmdpdGh1Yi5pby9jaGFydGlzdC1qcy9cblxuXG4gICAgICAgIGlmIChjdXJ2ZSA9PT0gJ3Ntb290aCcpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gKHggLSBwWCkgKiAwLjM1O1xuXG4gICAgICAgICAgaWYgKHcuZ2xvYmFscy5oYXNOdWxsVmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAoc2VyaWVzW2ldW2pdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmIChzZXJpZXNbaV1baiArIDFdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGluZVBhdGggPSBncmFwaGljcy5tb3ZlKHBYLCBwWSkgKyBncmFwaGljcy5jdXJ2ZShwWCArIGxlbmd0aCwgcFksIHggLSBsZW5ndGgsIHksIHggKyAxLCB5KTtcbiAgICAgICAgICAgICAgICBhcmVhUGF0aCA9IGdyYXBoaWNzLm1vdmUocFggKyAxLCBwWSkgKyBncmFwaGljcy5jdXJ2ZShwWCArIGxlbmd0aCwgcFksIHggLSBsZW5ndGgsIHksIHggKyAxLCB5KSArIGdyYXBoaWNzLmxpbmUoeCwgYXJlYUJvdHRvbVkpICsgZ3JhcGhpY3MubGluZShwWCwgYXJlYUJvdHRvbVkpICsgJ3onO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpbmVQYXRoID0gZ3JhcGhpY3MubW92ZShwWCwgcFkpO1xuICAgICAgICAgICAgICAgIGFyZWFQYXRoID0gZ3JhcGhpY3MubW92ZShwWCwgcFkpICsgJ3onO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpbmVQYXRocy5wdXNoKGxpbmVQYXRoKTtcbiAgICAgICAgICAgIGFyZWFQYXRocy5wdXNoKGFyZWFQYXRoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZVBhdGggPSBsaW5lUGF0aCArIGdyYXBoaWNzLmN1cnZlKHBYICsgbGVuZ3RoLCBwWSwgeCAtIGxlbmd0aCwgeSwgeCwgeSk7XG4gICAgICAgICAgICBhcmVhUGF0aCA9IGFyZWFQYXRoICsgZ3JhcGhpY3MuY3VydmUocFggKyBsZW5ndGgsIHBZLCB4IC0gbGVuZ3RoLCB5LCB4LCB5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwWCA9IHg7XG4gICAgICAgICAgcFkgPSB5O1xuXG4gICAgICAgICAgaWYgKGogPT09IHNlcmllc1tpXS5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgICAvLyBsYXN0IGxvb3AsIGNsb3NlIHBhdGhcbiAgICAgICAgICAgIGFyZWFQYXRoID0gYXJlYVBhdGggKyBncmFwaGljcy5jdXJ2ZShwWCwgcFksIHgsIHksIHgsIGFyZWFCb3R0b21ZKSArIGdyYXBoaWNzLm1vdmUoeCwgeSkgKyAneic7XG5cbiAgICAgICAgICAgIGlmICghdy5nbG9iYWxzLmhhc051bGxWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgbGluZVBhdGhzLnB1c2gobGluZVBhdGgpO1xuICAgICAgICAgICAgICBhcmVhUGF0aHMucHVzaChhcmVhUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzZXJpZXNbaV1baiArIDFdID09PSBudWxsKSB7XG4gICAgICAgICAgICBsaW5lUGF0aCA9IGxpbmVQYXRoICsgZ3JhcGhpY3MubW92ZSh4LCB5KTtcbiAgICAgICAgICAgIHZhciBudW1lcmljT3JDYXRYID0gdy5nbG9iYWxzLmlzWE51bWVyaWMgPyAody5nbG9iYWxzLnNlcmllc1hbcmVhbEluZGV4XVtqXSAtIHcuZ2xvYmFscy5taW5YKSAvIHRoaXMueFJhdGlvIDogeCAtIHRoaXMueERpdmlzaW9uO1xuICAgICAgICAgICAgYXJlYVBhdGggPSBhcmVhUGF0aCArIGdyYXBoaWNzLmxpbmUobnVtZXJpY09yQ2F0WCwgYXJlYUJvdHRvbVkpICsgZ3JhcGhpY3MubW92ZSh4LCB5KSArICd6JztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VyaWVzW2ldW2pdID09PSBudWxsKSB7XG4gICAgICAgICAgICBsaW5lUGF0aCA9IGxpbmVQYXRoICsgZ3JhcGhpY3MubW92ZSh4LCB5KTtcbiAgICAgICAgICAgIGFyZWFQYXRoID0gYXJlYVBhdGggKyBncmFwaGljcy5tb3ZlKHgsIGFyZWFCb3R0b21ZKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VydmUgPT09ICdzdGVwbGluZScpIHtcbiAgICAgICAgICAgIGxpbmVQYXRoID0gbGluZVBhdGggKyBncmFwaGljcy5saW5lKHgsIG51bGwsICdIJykgKyBncmFwaGljcy5saW5lKG51bGwsIHksICdWJyk7XG4gICAgICAgICAgICBhcmVhUGF0aCA9IGFyZWFQYXRoICsgZ3JhcGhpY3MubGluZSh4LCBudWxsLCAnSCcpICsgZ3JhcGhpY3MubGluZShudWxsLCB5LCAnVicpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3VydmUgPT09ICdzdHJhaWdodCcpIHtcbiAgICAgICAgICAgIGxpbmVQYXRoID0gbGluZVBhdGggKyBncmFwaGljcy5saW5lKHgsIHkpO1xuICAgICAgICAgICAgYXJlYVBhdGggPSBhcmVhUGF0aCArIGdyYXBoaWNzLmxpbmUoeCwgeSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGogPT09IHNlcmllc1tpXS5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgICAvLyBsYXN0IGxvb3AsIGNsb3NlIHBhdGhcbiAgICAgICAgICAgIGFyZWFQYXRoID0gYXJlYVBhdGggKyBncmFwaGljcy5saW5lKHgsIGFyZWFCb3R0b21ZKSArIGdyYXBoaWNzLm1vdmUoeCwgeSkgKyAneic7XG4gICAgICAgICAgICBsaW5lUGF0aHMucHVzaChsaW5lUGF0aCk7XG4gICAgICAgICAgICBhcmVhUGF0aHMucHVzaChhcmVhUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lUGF0aHM6IGxpbmVQYXRocyxcbiAgICAgICAgICBhcmVhUGF0aHM6IGFyZWFQYXRocyxcbiAgICAgICAgICBwWDogcFgsXG4gICAgICAgICAgcFk6IHBZLFxuICAgICAgICAgIGxpbmVQYXRoOiBsaW5lUGF0aCxcbiAgICAgICAgICBhcmVhUGF0aDogYXJlYVBhdGhcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFuZGxlTnVsbERhdGFQb2ludHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVOdWxsRGF0YVBvaW50cyhzZXJpZXMsIHBvaW50c1BvcywgaSwgaiwgcmVhbEluZGV4KSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmIChzZXJpZXNbaV1bal0gPT09IG51bGwgJiYgdy5jb25maWcubWFya2Vycy5zaG93TnVsbERhdGFQb2ludHMgfHwgc2VyaWVzW2ldLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIC8vIGZpeGVzIGFwZXhjaGFydHMuanMjMTI4MiwgIzEyNTJcbiAgICAgICAgICB2YXIgZWxQb2ludHNXcmFwID0gdGhpcy5tYXJrZXJzLnBsb3RDaGFydE1hcmtlcnMocG9pbnRzUG9zLCByZWFsSW5kZXgsIGogKyAxLCB0aGlzLnN0cm9rZVdpZHRoIC0gdy5jb25maWcubWFya2Vycy5zdHJva2VXaWR0aCAvIDIsIHRydWUpO1xuXG4gICAgICAgICAgaWYgKGVsUG9pbnRzV3JhcCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbFBvaW50c01haW4uYWRkKGVsUG9pbnRzV3JhcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExpbmU7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBUaW1lU2NhbGUgQ2xhc3MgZm9yIGdlbmVyYXRpbmcgdGltZSB0aWNrcyBmb3IgeC1heGlzLlxuICAgKlxuICAgKiBAbW9kdWxlIFRpbWVTY2FsZVxuICAgKiovXG5cbiAgdmFyIFRpbWVTY2FsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZVNjYWxlKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWVTY2FsZSk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgICB0aGlzLnRpbWVTY2FsZUFycmF5ID0gW107XG4gICAgICB0aGlzLnV0YyA9IHRoaXMudy5jb25maWcueGF4aXMubGFiZWxzLmRhdGV0aW1lVVRDO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUaW1lU2NhbGUsIFt7XG4gICAgICBrZXk6IFwiY2FsY3VsYXRlVGltZVNjYWxlVGlja3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVUaW1lU2NhbGVUaWNrcyhtaW5YLCBtYXhYKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7IC8vIG51bGwgY2hlY2sgd2hlbiBubyBzZXJpZXMgdG8gc2hvd1xuXG4gICAgICAgIGlmICh3Lmdsb2JhbHMuYWxsU2VyaWVzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmxhYmVscyA9IFtdO1xuICAgICAgICAgIHcuZ2xvYmFscy50aW1lc2NhbGVMYWJlbHMgPSBbXTtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZVRpbWUodGhpcy5jdHgpO1xuICAgICAgICB2YXIgZGF5c0RpZmYgPSAobWF4WCAtIG1pblgpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpO1xuICAgICAgICB0aGlzLmRldGVybWluZUludGVydmFsKGRheXNEaWZmKTtcbiAgICAgICAgdy5nbG9iYWxzLmRpc2FibGVab29tSW4gPSBmYWxzZTtcbiAgICAgICAgdy5nbG9iYWxzLmRpc2FibGVab29tT3V0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGRheXNEaWZmIDwgMC4wMDUpIHtcbiAgICAgICAgICB3Lmdsb2JhbHMuZGlzYWJsZVpvb21JbiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5c0RpZmYgPiA1MDAwMCkge1xuICAgICAgICAgIHcuZ2xvYmFscy5kaXNhYmxlWm9vbU91dCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGltZUludGVydmFscyA9IGR0LmdldFRpbWVVbml0c2Zyb21UaW1lc3RhbXAobWluWCwgbWF4WCwgdGhpcy51dGMpO1xuICAgICAgICB2YXIgZGF5c1dpZHRoT25YQXhpcyA9IHcuZ2xvYmFscy5ncmlkV2lkdGggLyBkYXlzRGlmZjtcbiAgICAgICAgdmFyIGhvdXJzV2lkdGhPblhBeGlzID0gZGF5c1dpZHRoT25YQXhpcyAvIDI0O1xuICAgICAgICB2YXIgbWludXRlc1dpZHRoT25YQXhpcyA9IGhvdXJzV2lkdGhPblhBeGlzIC8gNjA7XG4gICAgICAgIHZhciBudW1iZXJPZkhvdXJzID0gTWF0aC5mbG9vcihkYXlzRGlmZiAqIDI0KTtcbiAgICAgICAgdmFyIG51bWJlck9mTWludXRlcyA9IE1hdGguZmxvb3IoZGF5c0RpZmYgKiAyNCAqIDYwKTtcbiAgICAgICAgdmFyIG51bWJlck9mRGF5cyA9IE1hdGguZmxvb3IoZGF5c0RpZmYpO1xuICAgICAgICB2YXIgbnVtYmVyT2ZNb250aHMgPSBNYXRoLmZsb29yKGRheXNEaWZmIC8gMzApO1xuICAgICAgICB2YXIgbnVtYmVyT2ZZZWFycyA9IE1hdGguZmxvb3IoZGF5c0RpZmYgLyAzNjUpO1xuICAgICAgICB2YXIgZmlyc3RWYWwgPSB7XG4gICAgICAgICAgbWluTWludXRlOiB0aW1lSW50ZXJ2YWxzLm1pbk1pbnV0ZSxcbiAgICAgICAgICBtaW5Ib3VyOiB0aW1lSW50ZXJ2YWxzLm1pbkhvdXIsXG4gICAgICAgICAgbWluRGF0ZTogdGltZUludGVydmFscy5taW5EYXRlLFxuICAgICAgICAgIG1pbk1vbnRoOiB0aW1lSW50ZXJ2YWxzLm1pbk1vbnRoLFxuICAgICAgICAgIG1pblllYXI6IHRpbWVJbnRlcnZhbHMubWluWWVhclxuICAgICAgICB9O1xuICAgICAgICB2YXIgY3VycmVudE1pbnV0ZSA9IGZpcnN0VmFsLm1pbk1pbnV0ZTtcbiAgICAgICAgdmFyIGN1cnJlbnRIb3VyID0gZmlyc3RWYWwubWluSG91cjtcbiAgICAgICAgdmFyIGN1cnJlbnRNb250aERhdGUgPSBmaXJzdFZhbC5taW5EYXRlO1xuICAgICAgICB2YXIgY3VycmVudERhdGUgPSBmaXJzdFZhbC5taW5EYXRlO1xuICAgICAgICB2YXIgY3VycmVudE1vbnRoID0gZmlyc3RWYWwubWluTW9udGg7XG4gICAgICAgIHZhciBjdXJyZW50WWVhciA9IGZpcnN0VmFsLm1pblllYXI7XG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgZmlyc3RWYWw6IGZpcnN0VmFsLFxuICAgICAgICAgIGN1cnJlbnRNaW51dGU6IGN1cnJlbnRNaW51dGUsXG4gICAgICAgICAgY3VycmVudEhvdXI6IGN1cnJlbnRIb3VyLFxuICAgICAgICAgIGN1cnJlbnRNb250aERhdGU6IGN1cnJlbnRNb250aERhdGUsXG4gICAgICAgICAgY3VycmVudERhdGU6IGN1cnJlbnREYXRlLFxuICAgICAgICAgIGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoLFxuICAgICAgICAgIGN1cnJlbnRZZWFyOiBjdXJyZW50WWVhcixcbiAgICAgICAgICBkYXlzV2lkdGhPblhBeGlzOiBkYXlzV2lkdGhPblhBeGlzLFxuICAgICAgICAgIGhvdXJzV2lkdGhPblhBeGlzOiBob3Vyc1dpZHRoT25YQXhpcyxcbiAgICAgICAgICBtaW51dGVzV2lkdGhPblhBeGlzOiBtaW51dGVzV2lkdGhPblhBeGlzLFxuICAgICAgICAgIG51bWJlck9mTWludXRlczogbnVtYmVyT2ZNaW51dGVzLFxuICAgICAgICAgIG51bWJlck9mSG91cnM6IG51bWJlck9mSG91cnMsXG4gICAgICAgICAgbnVtYmVyT2ZEYXlzOiBudW1iZXJPZkRheXMsXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgICAgIG51bWJlck9mWWVhcnM6IG51bWJlck9mWWVhcnNcbiAgICAgICAgfTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMudGlja0ludGVydmFsKSB7XG4gICAgICAgICAgY2FzZSAneWVhcnMnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlWWVhclNjYWxlKHBhcmFtcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAnbW9udGhzJzpcbiAgICAgICAgICBjYXNlICdoYWxmX3llYXInOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlTW9udGhTY2FsZShwYXJhbXMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ21vbnRoc19kYXlzJzpcbiAgICAgICAgICBjYXNlICdtb250aHNfZm9ydG5pZ2h0JzpcbiAgICAgICAgICBjYXNlICdkYXlzJzpcbiAgICAgICAgICBjYXNlICd3ZWVrX2RheXMnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRGF5U2NhbGUocGFyYW1zKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdob3Vycyc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVIb3VyU2NhbGUocGFyYW1zKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdtaW51dGVzJzpcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNaW51dGVTY2FsZShwYXJhbXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gZmlyc3QsIHdlIHdpbGwgYWRqdXN0IHRoZSBtb250aCB2YWx1ZXMgaW5kZXhcbiAgICAgICAgLy8gYXMgaW4gdGhlIHVwcGVyIGZ1bmN0aW9uLCBpdCBpcyBzdGFydGluZyBmcm9tIDBcbiAgICAgICAgLy8gd2Ugd2lsbCBzdGFydCB0aGVtIGZyb20gMVxuXG5cbiAgICAgICAgdmFyIGFkanVzdGVkTW9udGhJblRpbWVTY2FsZUFycmF5ID0gdGhpcy50aW1lU2NhbGVBcnJheS5tYXAoZnVuY3Rpb24gKHRzKSB7XG4gICAgICAgICAgdmFyIGRlZmF1bHRSZXR1cm4gPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogdHMucG9zaXRpb24sXG4gICAgICAgICAgICB1bml0OiB0cy51bml0LFxuICAgICAgICAgICAgeWVhcjogdHMueWVhcixcbiAgICAgICAgICAgIGRheTogdHMuZGF5ID8gdHMuZGF5IDogMSxcbiAgICAgICAgICAgIGhvdXI6IHRzLmhvdXIgPyB0cy5ob3VyIDogMCxcbiAgICAgICAgICAgIG1vbnRoOiB0cy5tb250aCArIDFcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHRzLnVuaXQgPT09ICdtb250aCcpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgZGVmYXVsdFJldHVybiwge1xuICAgICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICAgIHZhbHVlOiB0cy52YWx1ZSArIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHMudW5pdCA9PT0gJ2RheScgfHwgdHMudW5pdCA9PT0gJ2hvdXInKSB7XG4gICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIGRlZmF1bHRSZXR1cm4sIHtcbiAgICAgICAgICAgICAgdmFsdWU6IHRzLnZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRzLnVuaXQgPT09ICdtaW51dGUnKSB7XG4gICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIGRlZmF1bHRSZXR1cm4sIHtcbiAgICAgICAgICAgICAgdmFsdWU6IHRzLnZhbHVlLFxuICAgICAgICAgICAgICBtaW51dGU6IHRzLnZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHM7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZmlsdGVyZWRUaW1lU2NhbGUgPSBhZGp1c3RlZE1vbnRoSW5UaW1lU2NhbGVBcnJheS5maWx0ZXIoZnVuY3Rpb24gKHRzKSB7XG4gICAgICAgICAgdmFyIG1vZHVsbyA9IDE7XG4gICAgICAgICAgdmFyIHRpY2tzID0gTWF0aC5jZWlsKHcuZ2xvYmFscy5ncmlkV2lkdGggLyAxMjApO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRzLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLnRpY2tBbW91bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGlja3MgPSB3LmNvbmZpZy54YXhpcy50aWNrQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhZGp1c3RlZE1vbnRoSW5UaW1lU2NhbGVBcnJheS5sZW5ndGggPiB0aWNrcykge1xuICAgICAgICAgICAgbW9kdWxvID0gTWF0aC5mbG9vcihhZGp1c3RlZE1vbnRoSW5UaW1lU2NhbGVBcnJheS5sZW5ndGggLyB0aWNrcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNob3VsZE5vdFNraXBVbml0ID0gZmFsc2U7IC8vIHRoZXJlIGlzIGEgYmlnIGNoYW5nZSBpbiB1bml0IGkuZSBkYXlzIHRvIG1vbnRoc1xuXG4gICAgICAgICAgdmFyIHNob3VsZE5vdFByaW50ID0gZmFsc2U7IC8vIHNob3VsZCBza2lwIHRoZXNlIHZhbHVlc1xuXG4gICAgICAgICAgc3dpdGNoIChfdGhpcy50aWNrSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXJzJzpcbiAgICAgICAgICAgICAgLy8gbWFrZSB5ZWFycyBsYWJlbCBkZW5zZXJcbiAgICAgICAgICAgICAgaWYgKHRzLnVuaXQgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgICAgIHNob3VsZE5vdFNraXBVbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdoYWxmX3llYXInOlxuICAgICAgICAgICAgICBtb2R1bG8gPSA3O1xuXG4gICAgICAgICAgICAgIGlmICh0cy51bml0ID09PSAneWVhcicpIHtcbiAgICAgICAgICAgICAgICBzaG91bGROb3RTa2lwVW5pdCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcbiAgICAgICAgICAgICAgbW9kdWxvID0gMTtcblxuICAgICAgICAgICAgICBpZiAodHMudW5pdCA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkTm90U2tpcFVuaXQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ21vbnRoc19mb3J0bmlnaHQnOlxuICAgICAgICAgICAgICBtb2R1bG8gPSAxNTtcblxuICAgICAgICAgICAgICBpZiAodHMudW5pdCA9PT0gJ3llYXInIHx8IHRzLnVuaXQgPT09ICdtb250aCcpIHtcbiAgICAgICAgICAgICAgICBzaG91bGROb3RTa2lwVW5pdCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDMwKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkTm90UHJpbnQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ21vbnRoc19kYXlzJzpcbiAgICAgICAgICAgICAgbW9kdWxvID0gMTA7XG5cbiAgICAgICAgICAgICAgaWYgKHRzLnVuaXQgPT09ICdtb250aCcpIHtcbiAgICAgICAgICAgICAgICBzaG91bGROb3RTa2lwVW5pdCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDMwKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkTm90UHJpbnQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3dlZWtfZGF5cyc6XG4gICAgICAgICAgICAgIG1vZHVsbyA9IDg7XG5cbiAgICAgICAgICAgICAgaWYgKHRzLnVuaXQgPT09ICdtb250aCcpIHtcbiAgICAgICAgICAgICAgICBzaG91bGROb3RTa2lwVW5pdCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZGF5cyc6XG4gICAgICAgICAgICAgIG1vZHVsbyA9IDE7XG5cbiAgICAgICAgICAgICAgaWYgKHRzLnVuaXQgPT09ICdtb250aCcpIHtcbiAgICAgICAgICAgICAgICBzaG91bGROb3RTa2lwVW5pdCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaG91cnMnOlxuICAgICAgICAgICAgICBpZiAodHMudW5pdCA9PT0gJ2RheScpIHtcbiAgICAgICAgICAgICAgICBzaG91bGROb3RTa2lwVW5pdCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbWludXRlcyc6XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSAlIDUgIT09IDApIHtcbiAgICAgICAgICAgICAgICBzaG91bGROb3RQcmludCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3RoaXMudGlja0ludGVydmFsID09PSAnbWludXRlcycgfHwgX3RoaXMudGlja0ludGVydmFsID09PSAnaG91cnMnKSB7XG4gICAgICAgICAgICBpZiAoIXNob3VsZE5vdFByaW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHZhbHVlICUgbW9kdWxvID09PSAwIHx8IHNob3VsZE5vdFNraXBVbml0KSAmJiAhc2hvdWxkTm90UHJpbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkVGltZVNjYWxlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZWNhbGNEaW1lbnNpb25zQmFzZWRPbkZvcm1hdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2FsY0RpbWVuc2lvbnNCYXNlZE9uRm9ybWF0KGZpbHRlcmVkVGltZVNjYWxlLCBpbnZlcnRlZCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIHJlZm9ybWF0dGVkVGltZXNjYWxlQXJyYXkgPSB0aGlzLmZvcm1hdERhdGVzKGZpbHRlcmVkVGltZVNjYWxlKTtcbiAgICAgICAgdmFyIHJlbW92ZWRPdmVybGFwcGluZ1RTID0gdGhpcy5yZW1vdmVPdmVybGFwcGluZ1RTKHJlZm9ybWF0dGVkVGltZXNjYWxlQXJyYXkpO1xuICAgICAgICB3Lmdsb2JhbHMudGltZXNjYWxlTGFiZWxzID0gcmVtb3ZlZE92ZXJsYXBwaW5nVFMuc2xpY2UoKTsgLy8gYXQgdGhpcyBzdGFnZSwgd2UgbmVlZCB0byByZS1jYWxjdWxhdGUgY29vcmRzIG9mIHRoZSBncmlkIGFzIHRpbWVsaW5lIGxhYmVscyBtYXkgaGF2ZSBhbHRlcmVkIHRoZSB4YXhpcyBsYWJlbHMgY29vcmRzXG4gICAgICAgIC8vIFRoZSByZWFzb24gd2UgY2FuJ3QgZG8gdGhpcyBwcmlvciB0byB0aGlzIHN0YWdlIGlzIGJlY2F1c2UgdGltZWxpbmUgbGFiZWxzIGRlcGVuZHMgb24gZ3JpZFdpZHRoLCBhbmQgYXMgdGhlIHRpY2tzIGFyZSBjYWxjdWxhdGVkIGJhc2VkIG9uIGF2YWlsYWJsZSBncmlkV2lkdGgsIHRoZXJlIGNhbiBiZSB1bmtub3duIG51bWJlciBvZiB0aWNrcyBnZW5lcmF0ZWQgZm9yIGRpZmZlcmVudCBtaW5YIGFuZCBtYXhYXG4gICAgICAgIC8vIERlcGVuZGVuY3kgb24gRGltZW5zaW9ucygpLCBuZWVkIHRvIHJlZmFjdG9yIGNvcnJlY3RseVxuICAgICAgICAvLyBUT0RPIC0gZmluZCBhbiBhbHRlcm5hdGUgd2F5IHRvIGF2b2lkIGNhbGxpbmcgdGhpcyBIZWF2eSBtZXRob2QgdHdpY2VcblxuICAgICAgICB2YXIgZGltZW5zaW9ucyA9IG5ldyBEaW1lbnNpb25zKHRoaXMuY3R4KTtcbiAgICAgICAgZGltZW5zaW9ucy5wbG90Q29vcmRzKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRldGVybWluZUludGVydmFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGV0ZXJtaW5lSW50ZXJ2YWwoZGF5c0RpZmYpIHtcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgY2FzZSBkYXlzRGlmZiA+IDE4MjU6XG4gICAgICAgICAgICAvLyBkaWZmZXJlbmNlIGlzIG1vcmUgdGhhbiA1IHllYXJzXG4gICAgICAgICAgICB0aGlzLnRpY2tJbnRlcnZhbCA9ICd5ZWFycyc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgZGF5c0RpZmYgPiA4MDAgJiYgZGF5c0RpZmYgPD0gMTgyNTpcbiAgICAgICAgICAgIHRoaXMudGlja0ludGVydmFsID0gJ2hhbGZfeWVhcic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgZGF5c0RpZmYgPiAxODAgJiYgZGF5c0RpZmYgPD0gODAwOlxuICAgICAgICAgICAgdGhpcy50aWNrSW50ZXJ2YWwgPSAnbW9udGhzJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBkYXlzRGlmZiA+IDkwICYmIGRheXNEaWZmIDw9IDE4MDpcbiAgICAgICAgICAgIHRoaXMudGlja0ludGVydmFsID0gJ21vbnRoc19mb3J0bmlnaHQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIGRheXNEaWZmID4gNjAgJiYgZGF5c0RpZmYgPD0gOTA6XG4gICAgICAgICAgICB0aGlzLnRpY2tJbnRlcnZhbCA9ICdtb250aHNfZGF5cyc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgZGF5c0RpZmYgPiAzMCAmJiBkYXlzRGlmZiA8PSA2MDpcbiAgICAgICAgICAgIHRoaXMudGlja0ludGVydmFsID0gJ3dlZWtfZGF5cyc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgZGF5c0RpZmYgPiAyICYmIGRheXNEaWZmIDw9IDMwOlxuICAgICAgICAgICAgdGhpcy50aWNrSW50ZXJ2YWwgPSAnZGF5cyc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgZGF5c0RpZmYgPiAwLjEgJiYgZGF5c0RpZmYgPD0gMjpcbiAgICAgICAgICAgIC8vIGxlc3MgdGhhbiAgMiBkYXlzXG4gICAgICAgICAgICB0aGlzLnRpY2tJbnRlcnZhbCA9ICdob3Vycyc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgZGF5c0RpZmYgPCAwLjE6XG4gICAgICAgICAgICB0aGlzLnRpY2tJbnRlcnZhbCA9ICdtaW51dGVzJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMudGlja0ludGVydmFsID0gJ2RheXMnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2VuZXJhdGVZZWFyU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVllYXJTY2FsZShfcmVmKSB7XG4gICAgICAgIHZhciBmaXJzdFZhbCA9IF9yZWYuZmlyc3RWYWwsXG4gICAgICAgICAgICBjdXJyZW50TW9udGggPSBfcmVmLmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIGN1cnJlbnRZZWFyID0gX3JlZi5jdXJyZW50WWVhcixcbiAgICAgICAgICAgIGRheXNXaWR0aE9uWEF4aXMgPSBfcmVmLmRheXNXaWR0aE9uWEF4aXMsXG4gICAgICAgICAgICBudW1iZXJPZlllYXJzID0gX3JlZi5udW1iZXJPZlllYXJzO1xuICAgICAgICB2YXIgZmlyc3RUaWNrVmFsdWUgPSBmaXJzdFZhbC5taW5ZZWFyO1xuICAgICAgICB2YXIgZmlyc3RUaWNrUG9zaXRpb24gPSAwO1xuICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZVRpbWUodGhpcy5jdHgpO1xuICAgICAgICB2YXIgdW5pdCA9ICd5ZWFyJztcblxuICAgICAgICBpZiAoZmlyc3RWYWwubWluRGF0ZSA+IDEgJiYgZmlyc3RWYWwubWluTW9udGggPiAwKSB7XG4gICAgICAgICAgdmFyIHJlbWFpbmluZ0RheXMgPSBkdC5kZXRlcm1pbmVSZW1haW5pbmdEYXlzT2ZZZWFyKGZpcnN0VmFsLm1pblllYXIsIGZpcnN0VmFsLm1pbk1vbnRoLCBmaXJzdFZhbC5taW5EYXRlKTsgLy8gcmVtYWluaW5nRGF5c29mRmlyc3RNb250aCBpcyB1c2VkIHRvIHJlYWNodCB0aGUgMm5kIHRpY2sgcG9zaXRpb25cblxuICAgICAgICAgIHZhciByZW1haW5pbmdEYXlzT2ZGaXJzdFllYXIgPSBkdC5kZXRlcm1pbmVEYXlzT2ZZZWFyKGZpcnN0VmFsLm1pblllYXIpIC0gcmVtYWluaW5nRGF5cyArIDE7IC8vIGNhbGN1bGF0ZSB0aGUgZmlyc3QgdGljayBwb3NpdGlvblxuXG4gICAgICAgICAgZmlyc3RUaWNrUG9zaXRpb24gPSByZW1haW5pbmdEYXlzT2ZGaXJzdFllYXIgKiBkYXlzV2lkdGhPblhBeGlzO1xuICAgICAgICAgIGZpcnN0VGlja1ZhbHVlID0gZmlyc3RWYWwubWluWWVhciArIDE7IC8vIHB1c2ggdGhlIGZpcnN0IHRpY2sgaW4gdGhlIGFycmF5XG5cbiAgICAgICAgICB0aGlzLnRpbWVTY2FsZUFycmF5LnB1c2goe1xuICAgICAgICAgICAgcG9zaXRpb246IGZpcnN0VGlja1Bvc2l0aW9uLFxuICAgICAgICAgICAgdmFsdWU6IGZpcnN0VGlja1ZhbHVlLFxuICAgICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICAgIHllYXI6IGZpcnN0VGlja1ZhbHVlLFxuICAgICAgICAgICAgbW9udGg6IFV0aWxzLm1vbnRoTW9kKGN1cnJlbnRNb250aCArIDEpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlyc3RWYWwubWluRGF0ZSA9PT0gMSAmJiBmaXJzdFZhbC5taW5Nb250aCA9PT0gMCkge1xuICAgICAgICAgIC8vIHB1c2ggdGhlIGZpcnN0IHRpY2sgaW4gdGhlIGFycmF5XG4gICAgICAgICAgdGhpcy50aW1lU2NhbGVBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmaXJzdFRpY2tQb3NpdGlvbixcbiAgICAgICAgICAgIHZhbHVlOiBmaXJzdFRpY2tWYWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgICB5ZWFyOiBjdXJyZW50WWVhcixcbiAgICAgICAgICAgIG1vbnRoOiBVdGlscy5tb250aE1vZChjdXJyZW50TW9udGggKyAxKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHllYXIgPSBmaXJzdFRpY2tWYWx1ZTtcbiAgICAgICAgdmFyIHBvcyA9IGZpcnN0VGlja1Bvc2l0aW9uOyAvLyBrZWVwIGRyYXdpbmcgcmVzdCBvZiB0aGUgdGlja3NcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mWWVhcnM7IGkrKykge1xuICAgICAgICAgIHllYXIrKztcbiAgICAgICAgICBwb3MgPSBkdC5kZXRlcm1pbmVEYXlzT2ZZZWFyKHllYXIgLSAxKSAqIGRheXNXaWR0aE9uWEF4aXMgKyBwb3M7XG4gICAgICAgICAgdGhpcy50aW1lU2NhbGVBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3MsXG4gICAgICAgICAgICB2YWx1ZTogeWVhcixcbiAgICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICAgICAgbW9udGg6IDFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZW5lcmF0ZU1vbnRoU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZU1vbnRoU2NhbGUoX3JlZjIpIHtcbiAgICAgICAgdmFyIGZpcnN0VmFsID0gX3JlZjIuZmlyc3RWYWwsXG4gICAgICAgICAgICBjdXJyZW50TW9udGhEYXRlID0gX3JlZjIuY3VycmVudE1vbnRoRGF0ZSxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9yZWYyLmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIGN1cnJlbnRZZWFyID0gX3JlZjIuY3VycmVudFllYXIsXG4gICAgICAgICAgICBkYXlzV2lkdGhPblhBeGlzID0gX3JlZjIuZGF5c1dpZHRoT25YQXhpcyxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gX3JlZjIubnVtYmVyT2ZNb250aHM7XG4gICAgICAgIHZhciBmaXJzdFRpY2tWYWx1ZSA9IGN1cnJlbnRNb250aDtcbiAgICAgICAgdmFyIGZpcnN0VGlja1Bvc2l0aW9uID0gMDtcbiAgICAgICAgdmFyIGR0ID0gbmV3IERhdGVUaW1lKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHVuaXQgPSAnbW9udGgnO1xuICAgICAgICB2YXIgeXJDb3VudGVyID0gMDtcblxuICAgICAgICBpZiAoZmlyc3RWYWwubWluRGF0ZSA+IDEpIHtcbiAgICAgICAgICAvLyByZW1haW5pbmdEYXlzb2ZGaXJzdE1vbnRoIGlzIHVzZWQgdG8gcmVhY2h0IHRoZSAybmQgdGljayBwb3NpdGlvblxuICAgICAgICAgIHZhciByZW1haW5pbmdEYXlzT2ZGaXJzdE1vbnRoID0gZHQuZGV0ZXJtaW5lRGF5c09mTW9udGhzKGN1cnJlbnRNb250aCArIDEsIGZpcnN0VmFsLm1pblllYXIpIC0gY3VycmVudE1vbnRoRGF0ZSArIDE7IC8vIGNhbGN1bGF0ZSB0aGUgZmlyc3QgdGljayBwb3NpdGlvblxuXG4gICAgICAgICAgZmlyc3RUaWNrUG9zaXRpb24gPSByZW1haW5pbmdEYXlzT2ZGaXJzdE1vbnRoICogZGF5c1dpZHRoT25YQXhpcztcbiAgICAgICAgICBmaXJzdFRpY2tWYWx1ZSA9IFV0aWxzLm1vbnRoTW9kKGN1cnJlbnRNb250aCArIDEpO1xuICAgICAgICAgIHZhciB5ZWFyID0gY3VycmVudFllYXIgKyB5ckNvdW50ZXI7XG5cbiAgICAgICAgICB2YXIgX21vbnRoID0gVXRpbHMubW9udGhNb2QoZmlyc3RUaWNrVmFsdWUpO1xuXG4gICAgICAgICAgdmFyIHZhbHVlID0gZmlyc3RUaWNrVmFsdWU7IC8vIGl0J3MgSmFuLCBzbyB1cGRhdGUgdGhlIHllYXJcblxuICAgICAgICAgIGlmIChmaXJzdFRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdW5pdCA9ICd5ZWFyJztcbiAgICAgICAgICAgIHZhbHVlID0geWVhcjtcbiAgICAgICAgICAgIF9tb250aCA9IDE7XG4gICAgICAgICAgICB5ckNvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgIHllYXIgPSB5ZWFyICsgeXJDb3VudGVyO1xuICAgICAgICAgIH0gLy8gcHVzaCB0aGUgZmlyc3QgdGljayBpbiB0aGUgYXJyYXlcblxuXG4gICAgICAgICAgdGhpcy50aW1lU2NhbGVBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmaXJzdFRpY2tQb3NpdGlvbixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICAgICAgbW9udGg6IF9tb250aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHB1c2ggdGhlIGZpcnN0IHRpY2sgaW4gdGhlIGFycmF5XG4gICAgICAgICAgdGhpcy50aW1lU2NhbGVBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmaXJzdFRpY2tQb3NpdGlvbixcbiAgICAgICAgICAgIHZhbHVlOiBmaXJzdFRpY2tWYWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgICB5ZWFyOiBjdXJyZW50WWVhcixcbiAgICAgICAgICAgIG1vbnRoOiBVdGlscy5tb250aE1vZChjdXJyZW50TW9udGgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbW9udGggPSBmaXJzdFRpY2tWYWx1ZSArIDE7XG4gICAgICAgIHZhciBwb3MgPSBmaXJzdFRpY2tQb3NpdGlvbjsgLy8ga2VlcCBkcmF3aW5nIHJlc3Qgb2YgdGhlIHRpY2tzXG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSAxOyBpIDwgbnVtYmVyT2ZNb250aHM7IGkrKywgaisrKSB7XG4gICAgICAgICAgbW9udGggPSBVdGlscy5tb250aE1vZChtb250aCk7XG5cbiAgICAgICAgICBpZiAobW9udGggPT09IDApIHtcbiAgICAgICAgICAgIHVuaXQgPSAneWVhcic7XG4gICAgICAgICAgICB5ckNvdW50ZXIgKz0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdCA9ICdtb250aCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF95ZWFyID0gdGhpcy5fZ2V0WWVhcihjdXJyZW50WWVhciwgbW9udGgsIHlyQ291bnRlcik7XG5cbiAgICAgICAgICBwb3MgPSBkdC5kZXRlcm1pbmVEYXlzT2ZNb250aHMobW9udGgsIF95ZWFyKSAqIGRheXNXaWR0aE9uWEF4aXMgKyBwb3M7XG4gICAgICAgICAgdmFyIG1vbnRoVmFsID0gbW9udGggPT09IDAgPyBfeWVhciA6IG1vbnRoO1xuICAgICAgICAgIHRoaXMudGltZVNjYWxlQXJyYXkucHVzaCh7XG4gICAgICAgICAgICBwb3NpdGlvbjogcG9zLFxuICAgICAgICAgICAgdmFsdWU6IG1vbnRoVmFsLFxuICAgICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICAgIHllYXI6IF95ZWFyLFxuICAgICAgICAgICAgbW9udGg6IG1vbnRoID09PSAwID8gMSA6IG1vbnRoXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbW9udGgrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZW5lcmF0ZURheVNjYWxlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVEYXlTY2FsZShfcmVmMykge1xuICAgICAgICB2YXIgZmlyc3RWYWwgPSBfcmVmMy5maXJzdFZhbCxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9yZWYzLmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIGN1cnJlbnRZZWFyID0gX3JlZjMuY3VycmVudFllYXIsXG4gICAgICAgICAgICBob3Vyc1dpZHRoT25YQXhpcyA9IF9yZWYzLmhvdXJzV2lkdGhPblhBeGlzLFxuICAgICAgICAgICAgbnVtYmVyT2ZEYXlzID0gX3JlZjMubnVtYmVyT2ZEYXlzO1xuICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZVRpbWUodGhpcy5jdHgpO1xuICAgICAgICB2YXIgdW5pdCA9ICdkYXknO1xuICAgICAgICB2YXIgZmlyc3RUaWNrVmFsdWUgPSBmaXJzdFZhbC5taW5EYXRlICsgMTtcbiAgICAgICAgdmFyIGRhdGUgPSBmaXJzdFRpY2tWYWx1ZTtcblxuICAgICAgICB2YXIgY2hhbmdlTW9udGggPSBmdW5jdGlvbiBjaGFuZ2VNb250aChkYXRlVmFsLCBtb250aCwgeWVhcikge1xuICAgICAgICAgIHZhciBtb250aGRheXMgPSBkdC5kZXRlcm1pbmVEYXlzT2ZNb250aHMobW9udGggKyAxLCB5ZWFyKTtcblxuICAgICAgICAgIGlmIChkYXRlVmFsID4gbW9udGhkYXlzKSB7XG4gICAgICAgICAgICBtb250aCA9IG1vbnRoICsgMTtcbiAgICAgICAgICAgIGRhdGUgPSAxO1xuICAgICAgICAgICAgdW5pdCA9ICdtb250aCc7XG4gICAgICAgICAgICB2YWwgPSBtb250aDtcbiAgICAgICAgICAgIHJldHVybiBtb250aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9udGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlbWFpbmluZ0hvdXJzID0gMjQgLSBmaXJzdFZhbC5taW5Ib3VyO1xuICAgICAgICB2YXIgeXJDb3VudGVyID0gMDsgLy8gY2FsY3VsYXRlIHRoZSBmaXJzdCB0aWNrIHBvc2l0aW9uXG5cbiAgICAgICAgdmFyIGZpcnN0VGlja1Bvc2l0aW9uID0gcmVtYWluaW5nSG91cnMgKiBob3Vyc1dpZHRoT25YQXhpcztcbiAgICAgICAgdmFyIHZhbCA9IGZpcnN0VGlja1ZhbHVlO1xuICAgICAgICB2YXIgbW9udGggPSBjaGFuZ2VNb250aChkYXRlLCBjdXJyZW50TW9udGgsIGN1cnJlbnRZZWFyKTtcblxuICAgICAgICBpZiAoZmlyc3RWYWwubWluSG91ciA9PT0gMCAmJiBmaXJzdFZhbC5taW5EYXRlID09PSAxKSB7XG4gICAgICAgICAgLy8gdGhlIGZpcnN0IHZhbHVlIGlzIHRoZSBmaXJzdCBkYXkgb2YgbW9udGhcbiAgICAgICAgICBmaXJzdFRpY2tQb3NpdGlvbiA9IDA7XG4gICAgICAgICAgdmFsID0gVXRpbHMubW9udGhNb2QoZmlyc3RWYWwubWluTW9udGgpO1xuICAgICAgICAgIHVuaXQgPSAnbW9udGgnO1xuICAgICAgICAgIGRhdGUgPSBmaXJzdFZhbC5taW5EYXRlO1xuICAgICAgICAgIG51bWJlck9mRGF5cysrO1xuICAgICAgICB9IC8vIHB1c2ggdGhlIGZpcnN0IHRpY2sgaW4gdGhlIGFycmF5XG5cblxuICAgICAgICB0aGlzLnRpbWVTY2FsZUFycmF5LnB1c2goe1xuICAgICAgICAgIHBvc2l0aW9uOiBmaXJzdFRpY2tQb3NpdGlvbixcbiAgICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgeWVhcjogdGhpcy5fZ2V0WWVhcihjdXJyZW50WWVhciwgbW9udGgsIHlyQ291bnRlciksXG4gICAgICAgICAgbW9udGg6IFV0aWxzLm1vbnRoTW9kKG1vbnRoKSxcbiAgICAgICAgICBkYXk6IGRhdGVcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBwb3MgPSBmaXJzdFRpY2tQb3NpdGlvbjsgLy8ga2VlcCBkcmF3aW5nIHJlc3Qgb2YgdGhlIHRpY2tzXG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkRheXM7IGkrKykge1xuICAgICAgICAgIGRhdGUgKz0gMTtcbiAgICAgICAgICB1bml0ID0gJ2RheSc7XG4gICAgICAgICAgbW9udGggPSBjaGFuZ2VNb250aChkYXRlLCBtb250aCwgdGhpcy5fZ2V0WWVhcihjdXJyZW50WWVhciwgbW9udGgsIHlyQ291bnRlcikpO1xuXG4gICAgICAgICAgdmFyIHllYXIgPSB0aGlzLl9nZXRZZWFyKGN1cnJlbnRZZWFyLCBtb250aCwgeXJDb3VudGVyKTtcblxuICAgICAgICAgIHBvcyA9IDI0ICogaG91cnNXaWR0aE9uWEF4aXMgKyBwb3M7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZGF0ZSA9PT0gMSA/IFV0aWxzLm1vbnRoTW9kKG1vbnRoKSA6IGRhdGU7XG4gICAgICAgICAgdGhpcy50aW1lU2NhbGVBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3MsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgICAgIG1vbnRoOiBVdGlscy5tb250aE1vZChtb250aCksXG4gICAgICAgICAgICBkYXk6IHZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2VuZXJhdGVIb3VyU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUhvdXJTY2FsZShfcmVmNCkge1xuICAgICAgICB2YXIgZmlyc3RWYWwgPSBfcmVmNC5maXJzdFZhbCxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlID0gX3JlZjQuY3VycmVudERhdGUsXG4gICAgICAgICAgICBjdXJyZW50TW9udGggPSBfcmVmNC5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICBjdXJyZW50WWVhciA9IF9yZWY0LmN1cnJlbnRZZWFyLFxuICAgICAgICAgICAgbWludXRlc1dpZHRoT25YQXhpcyA9IF9yZWY0Lm1pbnV0ZXNXaWR0aE9uWEF4aXMsXG4gICAgICAgICAgICBudW1iZXJPZkhvdXJzID0gX3JlZjQubnVtYmVyT2ZIb3VycztcbiAgICAgICAgdmFyIGR0ID0gbmV3IERhdGVUaW1lKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHlyQ291bnRlciA9IDA7XG4gICAgICAgIHZhciB1bml0ID0gJ2hvdXInO1xuXG4gICAgICAgIHZhciBjaGFuZ2VEYXRlID0gZnVuY3Rpb24gY2hhbmdlRGF0ZShkYXRlVmFsLCBtb250aCkge1xuICAgICAgICAgIHZhciBtb250aGRheXMgPSBkdC5kZXRlcm1pbmVEYXlzT2ZNb250aHMobW9udGggKyAxLCBjdXJyZW50WWVhcik7XG5cbiAgICAgICAgICBpZiAoZGF0ZVZhbCA+IG1vbnRoZGF5cykge1xuICAgICAgICAgICAgZGF0ZSA9IDE7XG4gICAgICAgICAgICBtb250aCA9IG1vbnRoICsgMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW9udGg6IG1vbnRoLFxuICAgICAgICAgICAgZGF0ZTogZGF0ZVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYW5nZU1vbnRoID0gZnVuY3Rpb24gY2hhbmdlTW9udGgoZGF0ZVZhbCwgbW9udGgpIHtcbiAgICAgICAgICB2YXIgbW9udGhkYXlzID0gZHQuZGV0ZXJtaW5lRGF5c09mTW9udGhzKG1vbnRoICsgMSwgY3VycmVudFllYXIpO1xuXG4gICAgICAgICAgaWYgKGRhdGVWYWwgPiBtb250aGRheXMpIHtcbiAgICAgICAgICAgIG1vbnRoID0gbW9udGggKyAxO1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtb250aDtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVtYWluaW5nTWlucyA9IDYwIC0gZmlyc3RWYWwubWluTWludXRlO1xuICAgICAgICB2YXIgZmlyc3RUaWNrUG9zaXRpb24gPSByZW1haW5pbmdNaW5zICogbWludXRlc1dpZHRoT25YQXhpcztcbiAgICAgICAgdmFyIGZpcnN0VGlja1ZhbHVlID0gZmlyc3RWYWwubWluSG91ciArIDE7XG4gICAgICAgIHZhciBob3VyID0gZmlyc3RUaWNrVmFsdWUgKyAxO1xuXG4gICAgICAgIGlmIChyZW1haW5pbmdNaW5zID09PSA2MCkge1xuICAgICAgICAgIGZpcnN0VGlja1Bvc2l0aW9uID0gMDtcbiAgICAgICAgICBmaXJzdFRpY2tWYWx1ZSA9IGZpcnN0VmFsLm1pbkhvdXI7XG4gICAgICAgICAgaG91ciA9IGZpcnN0VGlja1ZhbHVlICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRlID0gY3VycmVudERhdGU7XG4gICAgICAgIHZhciBtb250aCA9IGNoYW5nZU1vbnRoKGRhdGUsIGN1cnJlbnRNb250aCk7IC8vIHB1c2ggdGhlIGZpcnN0IHRpY2sgaW4gdGhlIGFycmF5XG5cbiAgICAgICAgdGhpcy50aW1lU2NhbGVBcnJheS5wdXNoKHtcbiAgICAgICAgICBwb3NpdGlvbjogZmlyc3RUaWNrUG9zaXRpb24sXG4gICAgICAgICAgdmFsdWU6IGZpcnN0VGlja1ZhbHVlLFxuICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgZGF5OiBkYXRlLFxuICAgICAgICAgIGhvdXI6IGhvdXIsXG4gICAgICAgICAgeWVhcjogY3VycmVudFllYXIsXG4gICAgICAgICAgbW9udGg6IFV0aWxzLm1vbnRoTW9kKG1vbnRoKVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBvcyA9IGZpcnN0VGlja1Bvc2l0aW9uOyAvLyBrZWVwIGRyYXdpbmcgcmVzdCBvZiB0aGUgdGlja3NcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mSG91cnM7IGkrKykge1xuICAgICAgICAgIHVuaXQgPSAnaG91cic7XG5cbiAgICAgICAgICBpZiAoaG91ciA+PSAyNCkge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICBkYXRlICs9IDE7XG4gICAgICAgICAgICB1bml0ID0gJ2RheSc7XG4gICAgICAgICAgICB2YXIgY2hlY2tOZXh0TW9udGggPSBjaGFuZ2VEYXRlKGRhdGUsIG1vbnRoKTtcbiAgICAgICAgICAgIG1vbnRoID0gY2hlY2tOZXh0TW9udGgubW9udGg7XG4gICAgICAgICAgICBtb250aCA9IGNoYW5nZU1vbnRoKGRhdGUsIG1vbnRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgeWVhciA9IHRoaXMuX2dldFllYXIoY3VycmVudFllYXIsIG1vbnRoLCB5ckNvdW50ZXIpO1xuXG4gICAgICAgICAgcG9zID0gaG91ciA9PT0gMCAmJiBpID09PSAwID8gcmVtYWluaW5nTWlucyAqIG1pbnV0ZXNXaWR0aE9uWEF4aXMgOiA2MCAqIG1pbnV0ZXNXaWR0aE9uWEF4aXMgKyBwb3M7XG4gICAgICAgICAgdmFyIHZhbCA9IGhvdXIgPT09IDAgPyBkYXRlIDogaG91cjtcbiAgICAgICAgICB0aGlzLnRpbWVTY2FsZUFycmF5LnB1c2goe1xuICAgICAgICAgICAgcG9zaXRpb246IHBvcyxcbiAgICAgICAgICAgIHZhbHVlOiB2YWwsXG4gICAgICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICAgICAgaG91cjogaG91cixcbiAgICAgICAgICAgIGRheTogZGF0ZSxcbiAgICAgICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgICAgICBtb250aDogVXRpbHMubW9udGhNb2QobW9udGgpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaG91cisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdlbmVyYXRlTWludXRlU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZU1pbnV0ZVNjYWxlKF9yZWY1KSB7XG4gICAgICAgIHZhciBmaXJzdFZhbCA9IF9yZWY1LmZpcnN0VmFsLFxuICAgICAgICAgICAgY3VycmVudE1pbnV0ZSA9IF9yZWY1LmN1cnJlbnRNaW51dGUsXG4gICAgICAgICAgICBjdXJyZW50SG91ciA9IF9yZWY1LmN1cnJlbnRIb3VyLFxuICAgICAgICAgICAgY3VycmVudERhdGUgPSBfcmVmNS5jdXJyZW50RGF0ZSxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9yZWY1LmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIGN1cnJlbnRZZWFyID0gX3JlZjUuY3VycmVudFllYXIsXG4gICAgICAgICAgICBtaW51dGVzV2lkdGhPblhBeGlzID0gX3JlZjUubWludXRlc1dpZHRoT25YQXhpcyxcbiAgICAgICAgICAgIG51bWJlck9mTWludXRlcyA9IF9yZWY1Lm51bWJlck9mTWludXRlcztcbiAgICAgICAgdmFyIHlyQ291bnRlciA9IDA7XG4gICAgICAgIHZhciB1bml0ID0gJ21pbnV0ZSc7XG4gICAgICAgIHZhciByZW1haW5pbmdNaW5zID0gY3VycmVudE1pbnV0ZSAtIGZpcnN0VmFsLm1pbk1pbnV0ZTtcbiAgICAgICAgdmFyIGZpcnN0VGlja1Bvc2l0aW9uID0gbWludXRlc1dpZHRoT25YQXhpcyAtIHJlbWFpbmluZ01pbnM7XG4gICAgICAgIHZhciBmaXJzdFRpY2tWYWx1ZSA9IGZpcnN0VmFsLm1pbk1pbnV0ZSArIDE7XG4gICAgICAgIHZhciBtaW51dGUgPSBmaXJzdFRpY2tWYWx1ZSArIDE7XG4gICAgICAgIHZhciBkYXRlID0gY3VycmVudERhdGU7XG4gICAgICAgIHZhciBtb250aCA9IGN1cnJlbnRNb250aDtcbiAgICAgICAgdmFyIHllYXIgPSBjdXJyZW50WWVhcjtcbiAgICAgICAgdmFyIGhvdXIgPSBjdXJyZW50SG91cjsgLy8gcHVzaCB0aGUgZmlyc3QgdGljayBpbiB0aGUgYXJyYXlcblxuICAgICAgICB0aGlzLnRpbWVTY2FsZUFycmF5LnB1c2goe1xuICAgICAgICAgIHBvc2l0aW9uOiBmaXJzdFRpY2tQb3NpdGlvbixcbiAgICAgICAgICB2YWx1ZTogZmlyc3RUaWNrVmFsdWUsXG4gICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICBkYXk6IGRhdGUsXG4gICAgICAgICAgaG91cjogaG91cixcbiAgICAgICAgICBtaW51dGU6IG1pbnV0ZSxcbiAgICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICAgIG1vbnRoOiBVdGlscy5tb250aE1vZChtb250aClcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBwb3MgPSBmaXJzdFRpY2tQb3NpdGlvbjsgLy8ga2VlcCBkcmF3aW5nIHJlc3Qgb2YgdGhlIHRpY2tzXG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZk1pbnV0ZXM7IGkrKykge1xuICAgICAgICAgIGlmIChtaW51dGUgPj0gNjApIHtcbiAgICAgICAgICAgIG1pbnV0ZSA9IDA7XG4gICAgICAgICAgICBob3VyICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChob3VyID09PSAyNCkge1xuICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwb3MgPSBtaW51dGVzV2lkdGhPblhBeGlzICsgcG9zO1xuICAgICAgICAgIHRoaXMudGltZVNjYWxlQXJyYXkucHVzaCh7XG4gICAgICAgICAgICBwb3NpdGlvbjogcG9zLFxuICAgICAgICAgICAgdmFsdWU6IG1pbnV0ZSxcbiAgICAgICAgICAgIHVuaXQ6IHVuaXQsXG4gICAgICAgICAgICBob3VyOiBob3VyLFxuICAgICAgICAgICAgbWludXRlOiBtaW51dGUsXG4gICAgICAgICAgICBkYXk6IGRhdGUsXG4gICAgICAgICAgICB5ZWFyOiB0aGlzLl9nZXRZZWFyKGN1cnJlbnRZZWFyLCBtb250aCwgeXJDb3VudGVyKSxcbiAgICAgICAgICAgIG1vbnRoOiBVdGlscy5tb250aE1vZChtb250aClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBtaW51dGUrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjcmVhdGVSYXdEYXRlU3RyaW5nXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmF3RGF0ZVN0cmluZyh0cywgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJhdyA9IHRzLnllYXI7XG4gICAgICAgIHJhdyArPSAnLScgKyAoJzAnICsgdHMubW9udGgudG9TdHJpbmcoKSkuc2xpY2UoLTIpOyAvLyB1bml0IGlzIGRheVxuXG4gICAgICAgIGlmICh0cy51bml0ID09PSAnZGF5Jykge1xuICAgICAgICAgIHJhdyArPSB0cy51bml0ID09PSAnZGF5JyA/ICctJyArICgnMCcgKyB2YWx1ZSkuc2xpY2UoLTIpIDogJy0wMSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmF3ICs9ICctJyArICgnMCcgKyAodHMuZGF5ID8gdHMuZGF5IDogJzEnKSkuc2xpY2UoLTIpO1xuICAgICAgICB9IC8vIHVuaXQgaXMgaG91clxuXG5cbiAgICAgICAgaWYgKHRzLnVuaXQgPT09ICdob3VyJykge1xuICAgICAgICAgIHJhdyArPSB0cy51bml0ID09PSAnaG91cicgPyAnVCcgKyAoJzAnICsgdmFsdWUpLnNsaWNlKC0yKSA6ICdUMDAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhdyArPSAnVCcgKyAoJzAnICsgKHRzLmhvdXIgPyB0cy5ob3VyIDogJzAnKSkuc2xpY2UoLTIpO1xuICAgICAgICB9IC8vIHVuaXQgaXMgbWludXRlXG5cblxuICAgICAgICByYXcgKz0gdHMudW5pdCA9PT0gJ21pbnV0ZScgPyAnOicgKyAoJzAnICsgdmFsdWUpLnNsaWNlKC0yKSArICc6MDAnIDogJzowMDowMCc7XG5cbiAgICAgICAgaWYgKHRoaXMudXRjKSB7XG4gICAgICAgICAgcmF3ICs9ICcuMDAwWic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb3JtYXREYXRlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdERhdGVzKGZpbHRlcmVkVGltZVNjYWxlKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgcmVmb3JtYXR0ZWRUaW1lc2NhbGVBcnJheSA9IGZpbHRlcmVkVGltZVNjYWxlLm1hcChmdW5jdGlvbiAodHMpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0cy52YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgIHZhciBkdCA9IG5ldyBEYXRlVGltZShfdGhpczIuY3R4KTtcblxuICAgICAgICAgIHZhciByYXcgPSBfdGhpczIuY3JlYXRlUmF3RGF0ZVN0cmluZyh0cywgdmFsdWUpO1xuXG4gICAgICAgICAgdmFyIGRhdGVUb0Zvcm1hdCA9IGR0LmdldERhdGUocmF3KTtcblxuICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5sYWJlbHMuZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBjdXN0b21Gb3JtYXQgPSAnZGQgTU1NJztcbiAgICAgICAgICAgIHZhciBkdEZvcm1hdHRlciA9IHcuY29uZmlnLnhheGlzLmxhYmVscy5kYXRldGltZUZvcm1hdHRlcjtcbiAgICAgICAgICAgIGlmICh0cy51bml0ID09PSAneWVhcicpIGN1c3RvbUZvcm1hdCA9IGR0Rm9ybWF0dGVyLnllYXI7XG4gICAgICAgICAgICBpZiAodHMudW5pdCA9PT0gJ21vbnRoJykgY3VzdG9tRm9ybWF0ID0gZHRGb3JtYXR0ZXIubW9udGg7XG4gICAgICAgICAgICBpZiAodHMudW5pdCA9PT0gJ2RheScpIGN1c3RvbUZvcm1hdCA9IGR0Rm9ybWF0dGVyLmRheTtcbiAgICAgICAgICAgIGlmICh0cy51bml0ID09PSAnaG91cicpIGN1c3RvbUZvcm1hdCA9IGR0Rm9ybWF0dGVyLmhvdXI7XG4gICAgICAgICAgICBpZiAodHMudW5pdCA9PT0gJ21pbnV0ZScpIGN1c3RvbUZvcm1hdCA9IGR0Rm9ybWF0dGVyLm1pbnV0ZTtcbiAgICAgICAgICAgIHZhbHVlID0gZHQuZm9ybWF0RGF0ZShkYXRlVG9Gb3JtYXQsIGN1c3RvbUZvcm1hdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gZHQuZm9ybWF0RGF0ZShkYXRlVG9Gb3JtYXQsIHcuY29uZmlnLnhheGlzLmxhYmVscy5mb3JtYXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRlU3RyaW5nOiByYXcsXG4gICAgICAgICAgICBwb3NpdGlvbjogdHMucG9zaXRpb24sXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICB1bml0OiB0cy51bml0LFxuICAgICAgICAgICAgeWVhcjogdHMueWVhcixcbiAgICAgICAgICAgIG1vbnRoOiB0cy5tb250aFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVmb3JtYXR0ZWRUaW1lc2NhbGVBcnJheTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVtb3ZlT3ZlcmxhcHBpbmdUU1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZU92ZXJsYXBwaW5nVFMoYXJyKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHZhciBlcXVhbExhYmVsTGVuZ3RoRmxhZyA9IGZhbHNlOyAvLyBUaGVzZSBsYWJlbHMgZ290IHNhbWUgbGVuZ3RoP1xuXG4gICAgICAgIHZhciBjb25zdGFudExhYmVsV2lkdGg7IC8vIElmIHRydWUsIHdoYXQgaXMgdGhlIGNvbnN0YW50IGxlbmd0aCB0byB1c2VcblxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA+IDAgJiYgLy8gY2hlY2sgYXJyIGxlbmd0aFxuICAgICAgICBhcnJbMF0udmFsdWUgJiYgLy8gY2hlY2sgYXJyWzBdIGNvbnRhaW5zIHZhbHVlXG4gICAgICAgIGFyci5ldmVyeShmdW5jdGlvbiAobGIpIHtcbiAgICAgICAgICByZXR1cm4gbGIudmFsdWUubGVuZ3RoID09PSBhcnJbMF0udmFsdWUubGVuZ3RoO1xuICAgICAgICB9KSAvLyBjaGVjayBldmVyeSBhcnIgbGFiZWwgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIGZpcnN0IG9uZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGVxdWFsTGFiZWxMZW5ndGhGbGFnID0gdHJ1ZTsgLy8gVGhlc2UgbGFiZWxzIGdvdCBzYW1lIGxlbmd0aFxuXG4gICAgICAgICAgICBjb25zdGFudExhYmVsV2lkdGggPSBncmFwaGljcy5nZXRUZXh0UmVjdHMoYXJyWzBdLnZhbHVlKS53aWR0aDsgLy8gVGhlIGNvbnN0YW50IGxhYmVsIHdpZHRoIHRvIHVzZVxuICAgICAgICAgIH1cblxuICAgICAgICB2YXIgbGFzdERyYXduSW5kZXggPSAwO1xuICAgICAgICB2YXIgZmlsdGVyZWRBcnJheSA9IGFyci5tYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCAmJiBfdGhpczMudy5jb25maWcueGF4aXMubGFiZWxzLmhpZGVPdmVybGFwcGluZ0xhYmVscykge1xuICAgICAgICAgICAgdmFyIHByZXZMYWJlbFdpZHRoID0gIWVxdWFsTGFiZWxMZW5ndGhGbGFnIC8vIGlmIHZhcnkgaW4gbGFiZWwgbGVuZ3RoXG4gICAgICAgICAgICA/IGdyYXBoaWNzLmdldFRleHRSZWN0cyhhcnJbbGFzdERyYXduSW5kZXhdLnZhbHVlKS53aWR0aCAvLyBnZXQgaW5kaXZpZHVhbCBsZW5ndGhcbiAgICAgICAgICAgIDogY29uc3RhbnRMYWJlbFdpZHRoOyAvLyBlbHNlOiB1c2UgY29uc3RhbnQgbGVuZ3RoXG5cbiAgICAgICAgICAgIHZhciBwcmV2UG9zID0gYXJyW2xhc3REcmF3bkluZGV4XS5wb3NpdGlvbjtcbiAgICAgICAgICAgIHZhciBwb3MgPSBpdGVtLnBvc2l0aW9uO1xuXG4gICAgICAgICAgICBpZiAocG9zID4gcHJldlBvcyArIHByZXZMYWJlbFdpZHRoICsgMTApIHtcbiAgICAgICAgICAgICAgbGFzdERyYXduSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZmlsdGVyZWRBcnJheSA9IGZpbHRlcmVkQXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIGYgIT09IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRBcnJheTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldFllYXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0WWVhcihjdXJyZW50WWVhciwgbW9udGgsIHlyQ291bnRlcikge1xuICAgICAgICByZXR1cm4gY3VycmVudFllYXIgKyBNYXRoLmZsb29yKG1vbnRoIC8gMTIpICsgeXJDb3VudGVyO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUaW1lU2NhbGU7XG4gIH0oKTtcblxuICAvKipcbiAgICogQXBleENoYXJ0cyBDb3JlIENsYXNzIHJlc3BvbnNpYmxlIGZvciBtYWpvciBjYWxjdWxhdGlvbnMgYW5kIGNyZWF0aW5nIGVsZW1lbnRzLlxuICAgKlxuICAgKiBAbW9kdWxlIENvcmVcbiAgICoqL1xuXG4gIHZhciBDb3JlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb3JlKGVsLCBjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb3JlKTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICB9IC8vIGdldCBkYXRhIGFuZCBzdG9yZSBpbnRvIGFwcHJvcHJpYXRlIHZhcnNcblxuXG4gICAgX2NyZWF0ZUNsYXNzKENvcmUsIFt7XG4gICAgICBrZXk6IFwic2V0dXBFbGVtZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwRWxlbWVudHMoKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMudy5nbG9iYWxzO1xuICAgICAgICB2YXIgY25mID0gdGhpcy53LmNvbmZpZzsgLy8gY29uc3QgZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3ModGhpcy5jdHgpXG5cbiAgICAgICAgdmFyIGN0ID0gY25mLmNoYXJ0LnR5cGU7XG4gICAgICAgIHZhciBheGlzQ2hhcnRzQXJyVHlwZXMgPSBbJ2xpbmUnLCAnYXJlYScsICdiYXInLCAncmFuZ2VCYXInLCAnY2FuZGxlc3RpY2snLCAnc2NhdHRlcicsICdidWJibGUnLCAncmFkYXInLCAnaGVhdG1hcCddO1xuICAgICAgICB2YXIgeHlDaGFydHNBcnJUeXBlcyA9IFsnbGluZScsICdhcmVhJywgJ2JhcicsICdyYW5nZUJhcicsICdjYW5kbGVzdGljaycsICdzY2F0dGVyJywgJ2J1YmJsZSddO1xuICAgICAgICBnbC5heGlzQ2hhcnRzID0gYXhpc0NoYXJ0c0FyclR5cGVzLmluZGV4T2YoY3QpID4gLTE7XG4gICAgICAgIGdsLnh5Q2hhcnRzID0geHlDaGFydHNBcnJUeXBlcy5pbmRleE9mKGN0KSA+IC0xO1xuICAgICAgICBnbC5pc0Jhckhvcml6b250YWwgPSAoY25mLmNoYXJ0LnR5cGUgPT09ICdiYXInIHx8IGNuZi5jaGFydC50eXBlID09PSAncmFuZ2VCYXInKSAmJiBjbmYucGxvdE9wdGlvbnMuYmFyLmhvcml6b250YWw7XG4gICAgICAgIGdsLmNoYXJ0Q2xhc3MgPSAnLmFwZXhjaGFydHMnICsgZ2wuY3VpZDtcbiAgICAgICAgZ2wuZG9tLmJhc2VFbCA9IHRoaXMuZWw7XG4gICAgICAgIGdsLmRvbS5lbFdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnMoZ2wuZG9tLmVsV3JhcCwge1xuICAgICAgICAgIGlkOiBnbC5jaGFydENsYXNzLnN1YnN0cmluZygxKSxcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtY2FudmFzICcgKyBnbC5jaGFydENsYXNzLnN1YnN0cmluZygxKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZChnbC5kb20uZWxXcmFwKTtcbiAgICAgICAgZ2wuZG9tLlBhcGVyID0gbmV3IHdpbmRvdy5TVkcuRG9jKGdsLmRvbS5lbFdyYXApO1xuICAgICAgICBnbC5kb20uUGFwZXIuYXR0cih7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLXN2ZycsXG4gICAgICAgICAgJ3htbG5zOmRhdGEnOiAnQXBleENoYXJ0c05TJyxcbiAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiLmNvbmNhdChjbmYuY2hhcnQub2Zmc2V0WCwgXCIsIFwiKS5jb25jYXQoY25mLmNoYXJ0Lm9mZnNldFksIFwiKVwiKVxuICAgICAgICB9KTtcbiAgICAgICAgZ2wuZG9tLlBhcGVyLm5vZGUuc3R5bGUuYmFja2dyb3VuZCA9IGNuZi5jaGFydC5iYWNrZ3JvdW5kO1xuICAgICAgICB0aGlzLnNldFNWR0RpbWVuc2lvbnMoKTtcbiAgICAgICAgZ2wuZG9tLmVsR3JhcGhpY2FsID0gZ2wuZG9tLlBhcGVyLmdyb3VwKCkuYXR0cih7XG4gICAgICAgICAgY2xhc3M6ICdhcGV4Y2hhcnRzLWlubmVyIGFwZXhjaGFydHMtZ3JhcGhpY2FsJ1xuICAgICAgICB9KTtcbiAgICAgICAgZ2wuZG9tLmVsQW5ub3RhdGlvbnMgPSBnbC5kb20uUGFwZXIuZ3JvdXAoKS5hdHRyKHtcbiAgICAgICAgICBjbGFzczogJ2FwZXhjaGFydHMtYW5ub3RhdGlvbnMnXG4gICAgICAgIH0pO1xuICAgICAgICBnbC5kb20uZWxEZWZzID0gZ2wuZG9tLlBhcGVyLmRlZnMoKTtcbiAgICAgICAgZ2wuZG9tLmVsTGVnZW5kV3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBnbC5kb20uZWxMZWdlbmRXcmFwLmNsYXNzTGlzdC5hZGQoJ2FwZXhjaGFydHMtbGVnZW5kJyk7XG4gICAgICAgIGdsLmRvbS5lbFdyYXAuYXBwZW5kQ2hpbGQoZ2wuZG9tLmVsTGVnZW5kV3JhcCk7XG4gICAgICAgIGdsLmRvbS5QYXBlci5hZGQoZ2wuZG9tLmVsR3JhcGhpY2FsKTtcbiAgICAgICAgZ2wuZG9tLmVsR3JhcGhpY2FsLmFkZChnbC5kb20uZWxEZWZzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGxvdENoYXJ0VHlwZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsb3RDaGFydFR5cGUoc2VyLCB4eVJhdGlvcykge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGNuZiA9IHcuY29uZmlnO1xuICAgICAgICB2YXIgZ2wgPSB3Lmdsb2JhbHM7XG4gICAgICAgIHZhciBsaW5lU2VyaWVzID0ge1xuICAgICAgICAgIHNlcmllczogW10sXG4gICAgICAgICAgaTogW11cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFyZWFTZXJpZXMgPSB7XG4gICAgICAgICAgc2VyaWVzOiBbXSxcbiAgICAgICAgICBpOiBbXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgc2NhdHRlclNlcmllcyA9IHtcbiAgICAgICAgICBzZXJpZXM6IFtdLFxuICAgICAgICAgIGk6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHZhciBidWJibGVTZXJpZXMgPSB7XG4gICAgICAgICAgc2VyaWVzOiBbXSxcbiAgICAgICAgICBpOiBbXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29sdW1uU2VyaWVzID0ge1xuICAgICAgICAgIHNlcmllczogW10sXG4gICAgICAgICAgaTogW11cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNhbmRsZXN0aWNrU2VyaWVzID0ge1xuICAgICAgICAgIHNlcmllczogW10sXG4gICAgICAgICAgaTogW11cbiAgICAgICAgfTtcbiAgICAgICAgZ2wuc2VyaWVzLm1hcChmdW5jdGlvbiAoc2VyaWVzLCBzdCkge1xuICAgICAgICAgIC8vIGlmIHVzZXIgaGFzIHNwZWNpZmllZCBhIHBhcnRpY3VsYXIgdHlwZSBmb3IgcGFydGljdWxhciBzZXJpZXNcbiAgICAgICAgICBpZiAodHlwZW9mIHNlcltzdF0udHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChzZXJbc3RdLnR5cGUgPT09ICdjb2x1bW4nIHx8IHNlcltzdF0udHlwZSA9PT0gJ2JhcicpIHtcbiAgICAgICAgICAgICAgaWYgKGdsLnNlcmllcy5sZW5ndGggPiAxICYmIGNuZi5wbG90T3B0aW9ucy5iYXIuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIC8vIGhvcml6b250YWwgYmFycyBub3Qgc3VwcG9ydGVkIGluIG1peGVkIGNoYXJ0cywgaGVuY2Ugc2hvdyBhIHdhcm5pbmdcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0hvcml6b250YWwgYmFycyBhcmUgbm90IHN1cHBvcnRlZCBpbiBhIG1peGVkL2NvbWJvIGNoYXJ0LiBQbGVhc2UgdHVybiBvZmYgYHBsb3RPcHRpb25zLmJhci5ob3Jpem9udGFsYCcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29sdW1uU2VyaWVzLnNlcmllcy5wdXNoKHNlcmllcyk7XG4gICAgICAgICAgICAgIGNvbHVtblNlcmllcy5pLnB1c2goc3QpO1xuICAgICAgICAgICAgICB3Lmdsb2JhbHMuY29sdW1uU2VyaWVzID0gY29sdW1uU2VyaWVzLnNlcmllcztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VyW3N0XS50eXBlID09PSAnYXJlYScpIHtcbiAgICAgICAgICAgICAgYXJlYVNlcmllcy5zZXJpZXMucHVzaChzZXJpZXMpO1xuICAgICAgICAgICAgICBhcmVhU2VyaWVzLmkucHVzaChzdCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcltzdF0udHlwZSA9PT0gJ2xpbmUnKSB7XG4gICAgICAgICAgICAgIGxpbmVTZXJpZXMuc2VyaWVzLnB1c2goc2VyaWVzKTtcbiAgICAgICAgICAgICAgbGluZVNlcmllcy5pLnB1c2goc3QpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXJbc3RdLnR5cGUgPT09ICdzY2F0dGVyJykge1xuICAgICAgICAgICAgICBzY2F0dGVyU2VyaWVzLnNlcmllcy5wdXNoKHNlcmllcyk7XG4gICAgICAgICAgICAgIHNjYXR0ZXJTZXJpZXMuaS5wdXNoKHN0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VyW3N0XS50eXBlID09PSAnYnViYmxlJykge1xuICAgICAgICAgICAgICBidWJibGVTZXJpZXMuc2VyaWVzLnB1c2goc2VyaWVzKTtcbiAgICAgICAgICAgICAgYnViYmxlU2VyaWVzLmkucHVzaChzdCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcltzdF0udHlwZSA9PT0gJ2NhbmRsZXN0aWNrJykge1xuICAgICAgICAgICAgICBjYW5kbGVzdGlja1Nlcmllcy5zZXJpZXMucHVzaChzZXJpZXMpO1xuICAgICAgICAgICAgICBjYW5kbGVzdGlja1Nlcmllcy5pLnB1c2goc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gdXNlciBoYXMgc3BlY2lmaWVkIHR5cGUsIGJ1dCBpdCBpcyBub3QgdmFsaWQgKG90aGVyIHRoYW4gbGluZS9hcmVhL2NvbHVtbilcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdZb3UgaGF2ZSBzcGVjaWZpZWQgYW4gdW5yZWNvZ25pemVkIGNoYXJ0IHR5cGUuIEF2YWlsYWJsZSB0eXBlcyBmb3IgdGhpcyBwcm9wZXJ5IGFyZSBsaW5lL2FyZWEvY29sdW1uL2Jhci9zY2F0dGVyL2J1YmJsZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbC5jb21ib0NoYXJ0cyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVTZXJpZXMuc2VyaWVzLnB1c2goc2VyaWVzKTtcbiAgICAgICAgICAgIGxpbmVTZXJpZXMuaS5wdXNoKHN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbGluZSA9IG5ldyBMaW5lKHRoaXMuY3R4LCB4eVJhdGlvcyk7XG4gICAgICAgIHZhciBjYW5kbGVzdGljayA9IG5ldyBDYW5kbGVTdGljayh0aGlzLmN0eCwgeHlSYXRpb3MpO1xuICAgICAgICB2YXIgcGllID0gbmV3IFBpZSh0aGlzLmN0eCk7XG4gICAgICAgIHZhciByYWRpYWxCYXIgPSBuZXcgUmFkaWFsKHRoaXMuY3R4KTtcbiAgICAgICAgdmFyIHJhbmdlQmFyID0gbmV3IFJhbmdlQmFyKHRoaXMuY3R4LCB4eVJhdGlvcyk7XG4gICAgICAgIHZhciByYWRhciA9IG5ldyBSYWRhcih0aGlzLmN0eCk7XG4gICAgICAgIHZhciBlbEdyYXBoID0gW107XG5cbiAgICAgICAgaWYgKGdsLmNvbWJvQ2hhcnRzKSB7XG4gICAgICAgICAgaWYgKGFyZWFTZXJpZXMuc2VyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsR3JhcGgucHVzaChsaW5lLmRyYXcoYXJlYVNlcmllcy5zZXJpZXMsICdhcmVhJywgYXJlYVNlcmllcy5pKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvbHVtblNlcmllcy5zZXJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnN0YWNrZWQpIHtcbiAgICAgICAgICAgICAgdmFyIGJhclN0YWNrZWQgPSBuZXcgQmFyU3RhY2tlZCh0aGlzLmN0eCwgeHlSYXRpb3MpO1xuICAgICAgICAgICAgICBlbEdyYXBoLnB1c2goYmFyU3RhY2tlZC5kcmF3KGNvbHVtblNlcmllcy5zZXJpZXMsIGNvbHVtblNlcmllcy5pKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYmFyID0gbmV3IEJhcih0aGlzLmN0eCwgeHlSYXRpb3MpO1xuICAgICAgICAgICAgICBlbEdyYXBoLnB1c2goYmFyLmRyYXcoY29sdW1uU2VyaWVzLnNlcmllcywgY29sdW1uU2VyaWVzLmkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGluZVNlcmllcy5zZXJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZWxHcmFwaC5wdXNoKGxpbmUuZHJhdyhsaW5lU2VyaWVzLnNlcmllcywgJ2xpbmUnLCBsaW5lU2VyaWVzLmkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2FuZGxlc3RpY2tTZXJpZXMuc2VyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsR3JhcGgucHVzaChjYW5kbGVzdGljay5kcmF3KGNhbmRsZXN0aWNrU2VyaWVzLnNlcmllcywgY2FuZGxlc3RpY2tTZXJpZXMuaSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzY2F0dGVyU2VyaWVzLnNlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgc2NhdHRlckxpbmUgPSBuZXcgTGluZSh0aGlzLmN0eCwgeHlSYXRpb3MsIHRydWUpO1xuICAgICAgICAgICAgZWxHcmFwaC5wdXNoKHNjYXR0ZXJMaW5lLmRyYXcoc2NhdHRlclNlcmllcy5zZXJpZXMsICdzY2F0dGVyJywgc2NhdHRlclNlcmllcy5pKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGJ1YmJsZVNlcmllcy5zZXJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGJ1YmJsZUxpbmUgPSBuZXcgTGluZSh0aGlzLmN0eCwgeHlSYXRpb3MsIHRydWUpO1xuICAgICAgICAgICAgZWxHcmFwaC5wdXNoKGJ1YmJsZUxpbmUuZHJhdyhidWJibGVTZXJpZXMuc2VyaWVzLCAnYnViYmxlJywgYnViYmxlU2VyaWVzLmkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpdGNoIChjbmYuY2hhcnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnbGluZSc6XG4gICAgICAgICAgICAgIGVsR3JhcGggPSBsaW5lLmRyYXcoZ2wuc2VyaWVzLCAnbGluZScpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYXJlYSc6XG4gICAgICAgICAgICAgIGVsR3JhcGggPSBsaW5lLmRyYXcoZ2wuc2VyaWVzLCAnYXJlYScpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYmFyJzpcbiAgICAgICAgICAgICAgaWYgKGNuZi5jaGFydC5zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iYXJTdGFja2VkID0gbmV3IEJhclN0YWNrZWQodGhpcy5jdHgsIHh5UmF0aW9zKTtcblxuICAgICAgICAgICAgICAgIGVsR3JhcGggPSBfYmFyU3RhY2tlZC5kcmF3KGdsLnNlcmllcyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iYXIgPSBuZXcgQmFyKHRoaXMuY3R4LCB4eVJhdGlvcyk7XG5cbiAgICAgICAgICAgICAgICBlbEdyYXBoID0gX2Jhci5kcmF3KGdsLnNlcmllcyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnY2FuZGxlc3RpY2snOlxuICAgICAgICAgICAgICB2YXIgY2FuZGxlU3RpY2sgPSBuZXcgQ2FuZGxlU3RpY2sodGhpcy5jdHgsIHh5UmF0aW9zKTtcbiAgICAgICAgICAgICAgZWxHcmFwaCA9IGNhbmRsZVN0aWNrLmRyYXcoZ2wuc2VyaWVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3JhbmdlQmFyJzpcbiAgICAgICAgICAgICAgZWxHcmFwaCA9IHJhbmdlQmFyLmRyYXcoZ2wuc2VyaWVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2hlYXRtYXAnOlxuICAgICAgICAgICAgICB2YXIgaGVhdG1hcCA9IG5ldyBIZWF0TWFwKHRoaXMuY3R4LCB4eVJhdGlvcyk7XG4gICAgICAgICAgICAgIGVsR3JhcGggPSBoZWF0bWFwLmRyYXcoZ2wuc2VyaWVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3BpZSc6XG4gICAgICAgICAgICBjYXNlICdkb251dCc6XG4gICAgICAgICAgICAgIGVsR3JhcGggPSBwaWUuZHJhdyhnbC5zZXJpZXMpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncmFkaWFsQmFyJzpcbiAgICAgICAgICAgICAgZWxHcmFwaCA9IHJhZGlhbEJhci5kcmF3KGdsLnNlcmllcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdyYWRhcic6XG4gICAgICAgICAgICAgIGVsR3JhcGggPSByYWRhci5kcmF3KGdsLnNlcmllcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBlbEdyYXBoID0gbGluZS5kcmF3KGdsLnNlcmllcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsR3JhcGg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFNWR0RpbWVuc2lvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTVkdEaW1lbnNpb25zKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgdmFyIGNuZiA9IHRoaXMudy5jb25maWc7XG4gICAgICAgIGdsLnN2Z1dpZHRoID0gY25mLmNoYXJ0LndpZHRoO1xuICAgICAgICBnbC5zdmdIZWlnaHQgPSBjbmYuY2hhcnQuaGVpZ2h0O1xuICAgICAgICB2YXIgZWxEaW0gPSBVdGlscy5nZXREaW1lbnNpb25zKHRoaXMuZWwpO1xuICAgICAgICB2YXIgd2lkdGhVbml0ID0gY25mLmNoYXJ0LndpZHRoLnRvU3RyaW5nKCkuc3BsaXQoL1swLTldKy9nKS5wb3AoKTtcblxuICAgICAgICBpZiAod2lkdGhVbml0ID09PSAnJScpIHtcbiAgICAgICAgICBpZiAoVXRpbHMuaXNOdW1iZXIoZWxEaW1bMF0pKSB7XG4gICAgICAgICAgICBpZiAoZWxEaW1bMF0ud2lkdGggPT09IDApIHtcbiAgICAgICAgICAgICAgZWxEaW0gPSBVdGlscy5nZXREaW1lbnNpb25zKHRoaXMuZWwucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdsLnN2Z1dpZHRoID0gZWxEaW1bMF0gKiBwYXJzZUludChjbmYuY2hhcnQud2lkdGgsIDEwKSAvIDEwMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAod2lkdGhVbml0ID09PSAncHgnIHx8IHdpZHRoVW5pdCA9PT0gJycpIHtcbiAgICAgICAgICBnbC5zdmdXaWR0aCA9IHBhcnNlSW50KGNuZi5jaGFydC53aWR0aCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsLnN2Z0hlaWdodCAhPT0gJ2F1dG8nICYmIGdsLnN2Z0hlaWdodCAhPT0gJycpIHtcbiAgICAgICAgICB2YXIgaGVpZ2h0VW5pdCA9IGNuZi5jaGFydC5oZWlnaHQudG9TdHJpbmcoKS5zcGxpdCgvWzAtOV0rL2cpLnBvcCgpO1xuXG4gICAgICAgICAgaWYgKGhlaWdodFVuaXQgPT09ICclJykge1xuICAgICAgICAgICAgdmFyIGVsUGFyZW50RGltID0gVXRpbHMuZ2V0RGltZW5zaW9ucyh0aGlzLmVsLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgZ2wuc3ZnSGVpZ2h0ID0gZWxQYXJlbnREaW1bMV0gKiBwYXJzZUludChjbmYuY2hhcnQuaGVpZ2h0LCAxMCkgLyAxMDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsLnN2Z0hlaWdodCA9IHBhcnNlSW50KGNuZi5jaGFydC5oZWlnaHQsIDEwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGdsLmF4aXNDaGFydHMpIHtcbiAgICAgICAgICAgIGdsLnN2Z0hlaWdodCA9IGdsLnN2Z1dpZHRoIC8gMS42MTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2wuc3ZnSGVpZ2h0ID0gZ2wuc3ZnV2lkdGggLyAxLjI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsLnN2Z1dpZHRoIDwgMCkgZ2wuc3ZnV2lkdGggPSAwO1xuICAgICAgICBpZiAoZ2wuc3ZnSGVpZ2h0IDwgMCkgZ2wuc3ZnSGVpZ2h0ID0gMDtcbiAgICAgICAgR3JhcGhpY3Muc2V0QXR0cnMoZ2wuZG9tLlBhcGVyLm5vZGUsIHtcbiAgICAgICAgICB3aWR0aDogZ2wuc3ZnV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBnbC5zdmdIZWlnaHRcbiAgICAgICAgfSk7IC8vIGdsLmRvbS5QYXBlci5ub2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5zdHlsZS5taW5XaWR0aCA9IGdsLnN2Z1dpZHRoICsgXCJweFwiO1xuXG4gICAgICAgIHZhciBvZmZzZXRZID0gY25mLmNoYXJ0LnNwYXJrbGluZS5lbmFibGVkID8gMCA6IGdsLmF4aXNDaGFydHMgPyBjbmYuY2hhcnQucGFyZW50SGVpZ2h0T2Zmc2V0IDogMDtcbiAgICAgICAgZ2wuZG9tLlBhcGVyLm5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnN0eWxlLm1pbkhlaWdodCA9IGdsLnN2Z0hlaWdodCArIG9mZnNldFkgKyAncHgnO1xuICAgICAgICBnbC5kb20uZWxXcmFwLnN0eWxlLndpZHRoID0gZ2wuc3ZnV2lkdGggKyAncHgnO1xuICAgICAgICBnbC5kb20uZWxXcmFwLnN0eWxlLmhlaWdodCA9IGdsLnN2Z0hlaWdodCArICdweCc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNoaWZ0R3JhcGhQb3NpdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0R3JhcGhQb3NpdGlvbigpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy53Lmdsb2JhbHM7XG4gICAgICAgIHZhciB0WSA9IGdsLnRyYW5zbGF0ZVk7XG4gICAgICAgIHZhciB0WCA9IGdsLnRyYW5zbGF0ZVg7XG4gICAgICAgIHZhciBzY2FsaW5nQXR0cnMgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKCcgKyB0WCArICcsICcgKyB0WSArICcpJ1xuICAgICAgICB9O1xuICAgICAgICBHcmFwaGljcy5zZXRBdHRycyhnbC5kb20uZWxHcmFwaGljYWwubm9kZSwgc2NhbGluZ0F0dHJzKTtcbiAgICAgICAgZ2wueDJTcGFjZUF2YWlsYWJsZSA9IGdsLnN2Z1dpZHRoIC0gZ2wuZG9tLmVsR3JhcGhpY2FsLngoKSAtIGdsLmdyaWRXaWR0aDtcbiAgICAgIH0gLy8gVG8gcHJldmVudCBleHRyYSBzcGFjaW5ncyBpbiB0aGUgYm90dG9tIG9mIHRoZSBjaGFydCwgd2UgbmVlZCB0byByZWNhbGN1bGF0ZSB0aGUgaGVpZ2h0IGZvciBwaWUvZG9udXQvcmFkaWFsYmFyIGNoYXJ0c1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInJlc2l6ZU5vbkF4aXNDaGFydHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemVOb25BeGlzQ2hhcnRzKCkge1xuICAgICAgICB2YXIgdyA9IHRoaXMudztcbiAgICAgICAgdmFyIGdsID0gdy5nbG9iYWxzO1xuICAgICAgICB2YXIgbGVnZW5kSGVpZ2h0ID0gMDtcbiAgICAgICAgdmFyIG9mZlkgPSB3LmNvbmZpZy5jaGFydC5zcGFya2xpbmUuZW5hYmxlZCA/IDEgOiAxNTtcbiAgICAgICAgb2ZmWSA9IG9mZlkgKyB3LmNvbmZpZy5ncmlkLnBhZGRpbmcuYm90dG9tO1xuXG4gICAgICAgIGlmICgody5jb25maWcubGVnZW5kLnBvc2l0aW9uID09PSAndG9wJyB8fCB3LmNvbmZpZy5sZWdlbmQucG9zaXRpb24gPT09ICdib3R0b20nKSAmJiB3LmNvbmZpZy5sZWdlbmQuc2hvdyAmJiAhdy5jb25maWcubGVnZW5kLmZsb2F0aW5nKSB7XG4gICAgICAgICAgbGVnZW5kSGVpZ2h0ID0gbmV3IExlZ2VuZCh0aGlzLmN0eCkubGVnZW5kSGVscGVycy5nZXRMZWdlbmRCQm94KCkuY2x3aCArIDEwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJhZGlhbEVsID0gdy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtcmFkaWFsYmFyJyk7XG4gICAgICAgIHZhciBjaGFydElubmVyRGltZW5zaW9ucyA9IHcuZ2xvYmFscy5yYWRpYWxTaXplICogMi4wNTtcblxuICAgICAgICBpZiAocmFkaWFsRWwgJiYgIXcuY29uZmlnLmNoYXJ0LnNwYXJrbGluZS5lbmFibGVkKSB7XG4gICAgICAgICAgdmFyIGVsUmFkaWFsUmVjdCA9IFV0aWxzLmdldEJvdW5kaW5nQ2xpZW50UmVjdChyYWRpYWxFbCk7XG4gICAgICAgICAgY2hhcnRJbm5lckRpbWVuc2lvbnMgPSBlbFJhZGlhbFJlY3QuYm90dG9tO1xuICAgICAgICAgIHZhciBtYXhIZWlnaHQgPSBlbFJhZGlhbFJlY3QuYm90dG9tIC0gZWxSYWRpYWxSZWN0LnRvcDtcbiAgICAgICAgICBjaGFydElubmVyRGltZW5zaW9ucyA9IE1hdGgubWF4KHcuZ2xvYmFscy5yYWRpYWxTaXplICogMi4wNSwgbWF4SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdIZWlnaHQgPSBjaGFydElubmVyRGltZW5zaW9ucyArIGdsLnRyYW5zbGF0ZVkgKyBsZWdlbmRIZWlnaHQgKyBvZmZZO1xuXG4gICAgICAgIGlmIChnbC5kb20uZWxMZWdlbmRGb3JlaWduKSB7XG4gICAgICAgICAgZ2wuZG9tLmVsTGVnZW5kRm9yZWlnbi5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIG5ld0hlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC5kb20uZWxXcmFwLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7XG4gICAgICAgIEdyYXBoaWNzLnNldEF0dHJzKGdsLmRvbS5QYXBlci5ub2RlLCB7XG4gICAgICAgICAgaGVpZ2h0OiBuZXdIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICAgIGdsLmRvbS5QYXBlci5ub2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5zdHlsZS5taW5IZWlnaHQgPSBuZXdIZWlnaHQgKyAncHgnO1xuICAgICAgfVxuICAgICAgLypcbiAgICAgICAqKiBBbGwgdGhlIGNhbGN1bGF0aW9ucyBmb3Igc2V0dGluZyByYW5nZSBpbiBjaGFydHMgd2lsbCBiZSBkb25lIGhlcmVcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImNvcmVDYWxjdWxhdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb3JlQ2FsY3VsYXRpb25zKCkge1xuICAgICAgICB2YXIgcmFuZ2UgPSBuZXcgUmFuZ2UkMSh0aGlzLmN0eCk7XG4gICAgICAgIHJhbmdlLmluaXQoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVzZXRHbG9iYWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRHbG9iYWxzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciByZXNldHh5VmFsdWVzID0gZnVuY3Rpb24gcmVzZXR4eVZhbHVlcygpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudy5jb25maWcuc2VyaWVzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnbG9iYWxPYmogPSBuZXcgR2xvYmFscygpO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLncuZ2xvYmFscztcbiAgICAgICAgZ2xvYmFsT2JqLmluaXRHbG9iYWxWYXJzKGdsKTtcbiAgICAgICAgZ2wuc2VyaWVzWHZhbHVlcyA9IHJlc2V0eHlWYWx1ZXMoKTtcbiAgICAgICAgZ2wuc2VyaWVzWXZhbHVlcyA9IHJlc2V0eHlWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNNdWx0aXBsZVlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc011bHRpcGxlWSgpIHtcbiAgICAgICAgLy8gdXNlciBoYXMgc3VwcGxpZWQgYW4gYXJyYXkgaW4geWF4aXMgcHJvcGVydHkuIFNvLCB0dXJuIG9uIG11bHRpcGxlWUF4aXMgZmxhZ1xuICAgICAgICBpZiAodGhpcy53LmNvbmZpZy55YXhpcy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgJiYgdGhpcy53LmNvbmZpZy55YXhpcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhpcy53Lmdsb2JhbHMuaXNNdWx0aXBsZVlBeGlzID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ4eVNldHRpbmdzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24geHlTZXR0aW5ncygpIHtcbiAgICAgICAgdmFyIHh5UmF0aW9zID0gbnVsbDtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNyb3NzaGFpcnMucG9zaXRpb24gPT09ICdiYWNrJykge1xuICAgICAgICAgICAgdmFyIGNyb3NzaGFpcnMgPSBuZXcgQ3Jvc3NoYWlycyh0aGlzLmN0eCk7XG4gICAgICAgICAgICBjcm9zc2hhaXJzLmRyYXdYQ3Jvc3NoYWlycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1swXS5jcm9zc2hhaXJzLnBvc2l0aW9uID09PSAnYmFjaycpIHtcbiAgICAgICAgICAgIHZhciBfY3Jvc3NoYWlycyA9IG5ldyBDcm9zc2hhaXJzKHRoaXMuY3R4KTtcblxuICAgICAgICAgICAgX2Nyb3NzaGFpcnMuZHJhd1lDcm9zc2hhaXJzKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLnR5cGUgPT09ICdkYXRldGltZScgJiYgdy5jb25maWcueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgdHMgPSBuZXcgVGltZVNjYWxlKHRoaXMuY3R4KTtcbiAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRUaW1lU2NhbGUgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGlzRmluaXRlKHcuZ2xvYmFscy5taW5YKSAmJiBpc0Zpbml0ZSh3Lmdsb2JhbHMubWF4WCkgJiYgIXcuZ2xvYmFscy5pc0Jhckhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgZm9ybWF0dGVkVGltZVNjYWxlID0gdHMuY2FsY3VsYXRlVGltZVNjYWxlVGlja3Mody5nbG9iYWxzLm1pblgsIHcuZ2xvYmFscy5tYXhYKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5nbG9iYWxzLmlzQmFySG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICBmb3JtYXR0ZWRUaW1lU2NhbGUgPSB0cy5jYWxjdWxhdGVUaW1lU2NhbGVUaWNrcyh3Lmdsb2JhbHMubWluWSwgdy5nbG9iYWxzLm1heFkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cy5yZWNhbGNEaW1lbnNpb25zQmFzZWRPbkZvcm1hdChmb3JtYXR0ZWRUaW1lU2NhbGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb3JlVXRpbHMgPSBuZXcgQ29yZVV0aWxzKHRoaXMuY3R4KTtcbiAgICAgICAgICB4eVJhdGlvcyA9IGNvcmVVdGlscy5nZXRDYWxjdWxhdGVkUmF0aW9zKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geHlSYXRpb3M7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldHVwQnJ1c2hIYW5kbGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBCcnVzaEhhbmRsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53OyAvLyBvbmx5IGZvciBicnVzaCBjaGFydHNcblxuICAgICAgICBpZiAoIXcuY29uZmlnLmNoYXJ0LmJydXNoLmVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gaWYgdXNlciBoYXMgbm90IGRlZmluZWQgYSBjdXN0b20gZnVuY3Rpb24gZm9yIHNlbGVjdGlvbiAtIHdlIGhhbmRsZSB0aGUgYnJ1c2ggY2hhcnRcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIGxlYXZlIGl0IHRvIHRoZSB1c2VyIHRvIGRlZmluZSB0aGUgZnVuY3Rpb25hbGl0eSBmb3Igc2VsZWN0aW9uXG5cblxuICAgICAgICBpZiAodHlwZW9mIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5zZWxlY3Rpb24gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0cyA9IHcuY29uZmlnLmNoYXJ0LmJydXNoLnRhcmdldHMgfHwgW3cuY29uZmlnLmNoYXJ0LmJydXNoLnRhcmdldF07IC8vIHJldHJvIGNvbXBhdGliaWxpdHkgd2l0aCBzaW5nbGUgdGFyZ2V0IG9wdGlvblxuXG4gICAgICAgICAgdGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRDaGFydCA9IEFwZXhDaGFydHMuZ2V0Q2hhcnRCeUlEKHRhcmdldCk7XG4gICAgICAgICAgICB0YXJnZXRDaGFydC53Lmdsb2JhbHMuYnJ1c2hTb3VyY2UgPSBfdGhpczIuY3R4O1xuXG4gICAgICAgICAgICB2YXIgdXBkYXRlU291cmNlQ2hhcnQgPSBmdW5jdGlvbiB1cGRhdGVTb3VyY2VDaGFydCgpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmN0eC51cGRhdGVIZWxwZXJzLl91cGRhdGVPcHRpb25zKHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgbWluOiB0YXJnZXRDaGFydC53Lmdsb2JhbHMubWluWCxcbiAgICAgICAgICAgICAgICAgICAgICBtYXg6IHRhcmdldENoYXJ0LncuZ2xvYmFscy5tYXhYXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldENoYXJ0LncuY29uZmlnLmNoYXJ0LmV2ZW50cy56b29tZWQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0Q2hhcnQudy5jb25maWcuY2hhcnQuZXZlbnRzLnpvb21lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVTb3VyY2VDaGFydCgpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldENoYXJ0LncuY29uZmlnLmNoYXJ0LmV2ZW50cy5zY3JvbGxlZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0YXJnZXRDaGFydC53LmNvbmZpZy5jaGFydC5ldmVudHMuc2Nyb2xsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlU291cmNlQ2hhcnQoKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHcuY29uZmlnLmNoYXJ0LmV2ZW50cy5zZWxlY3Rpb24gPSBmdW5jdGlvbiAoY2hhcnQsIGUpIHtcbiAgICAgICAgICAgIHRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHZhciB0YXJnZXRDaGFydCA9IEFwZXhDaGFydHMuZ2V0Q2hhcnRCeUlEKHRhcmdldCk7XG4gICAgICAgICAgICAgIHZhciB5YXhpcyA9IFV0aWxzLmNsb25lKHcuY29uZmlnLnlheGlzKTtcblxuICAgICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQuYnJ1c2guYXV0b1NjYWxlWWF4aXMgJiYgdGFyZ2V0Q2hhcnQudy5nbG9iYWxzLnNlcmllcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSBuZXcgUmFuZ2UodGFyZ2V0Q2hhcnQpO1xuICAgICAgICAgICAgICAgIHlheGlzID0gc2NhbGUuYXV0b1NjYWxlWSh0YXJnZXRDaGFydCwgeWF4aXMsIGUpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGFyZ2V0Q2hhcnQuY3R4LnVwZGF0ZUhlbHBlcnMuX3VwZGF0ZU9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgICBtaW46IGUueGF4aXMubWluLFxuICAgICAgICAgICAgICAgICAgbWF4OiBlLnhheGlzLm1heFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeWF4aXM6IF9vYmplY3RTcHJlYWQyKHt9LCB0YXJnZXRDaGFydC53LmNvbmZpZy55YXhpc1swXSwge1xuICAgICAgICAgICAgICAgICAgbWluOiB5YXhpc1swXS5taW4sXG4gICAgICAgICAgICAgICAgICBtYXg6IHlheGlzWzBdLm1heFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29yZTtcbiAgfSgpO1xuXG4gIHZhciBVcGRhdGVIZWxwZXJzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVcGRhdGVIZWxwZXJzKGN0eCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVwZGF0ZUhlbHBlcnMpO1xuXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgIHRoaXMudyA9IGN0eC53O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBwcml2YXRlIG1ldGhvZCB0byB1cGRhdGUgT3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQSBuZXcgY29uZmlnIG9iamVjdCBjYW4gYmUgcGFzc2VkIHdoaWNoIHdpbGwgYmUgbWVyZ2VkIHdpdGggdGhlIGV4aXN0aW5nIGNvbmZpZyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlZHJhdyAtIHNob3VsZCByZWRyYXcgZnJvbSBiZWdpbm5pbmcgb3Igc2hvdWxkIHVzZSBleGlzdGluZyBwYXRocyBhbmQgcmVkcmF3IGZyb20gdGhlcmVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFuaW1hdGUgLSBzaG91bGQgYW5pbWF0ZSBvciBub3Qgb24gdXBkYXRpbmcgT3B0aW9uc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3ZlcndyaXRlSW5pdGlhbENvbmZpZyAtIHNob3VsZCB1cGRhdGUgdGhlIGluaXRpYWwgY29uZmlnIG9yIG5vdFxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoVXBkYXRlSGVscGVycywgW3tcbiAgICAgIGtleTogXCJfdXBkYXRlT3B0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgcmVkcmF3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgICAgdmFyIGFuaW1hdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gICAgICAgIHZhciB1cGRhdGVTeW5jZWRDaGFydHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHRydWU7XG4gICAgICAgIHZhciBvdmVyd3JpdGVJbml0aWFsQ29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcbiAgICAgICAgdmFyIGNoYXJ0cyA9IFt0aGlzLmN0eF07XG5cbiAgICAgICAgaWYgKHVwZGF0ZVN5bmNlZENoYXJ0cykge1xuICAgICAgICAgIGNoYXJ0cyA9IHRoaXMuY3R4LmdldFN5bmNlZENoYXJ0cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY3R4LncuZ2xvYmFscy5pc0V4ZWNDYWxsZWQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgdXNlciBjYWxsZWQgZXhlYyBtZXRob2QsIHdlIGRvbid0IHdhbnQgdG8gZ2V0IGdyb3VwZWQgY2hhcnRzIGFzIHVzZXIgc3BlY2lmaWNhbGx5IHByb3ZpZGVkIGEgY2hhcnRJRCB0byB1cGRhdGVcbiAgICAgICAgICBjaGFydHMgPSBbdGhpcy5jdHhdO1xuICAgICAgICAgIHRoaXMuY3R4LncuZ2xvYmFscy5pc0V4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChjaCkge1xuICAgICAgICAgIHZhciB3ID0gY2gudztcbiAgICAgICAgICB3Lmdsb2JhbHMuc2hvdWxkQW5pbWF0ZSA9IGFuaW1hdGU7XG5cbiAgICAgICAgICBpZiAoIXJlZHJhdykge1xuICAgICAgICAgICAgdy5nbG9iYWxzLnJlc2l6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdy5nbG9iYWxzLmRhdGFDaGFuZ2VkID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgICAgY2guc2VyaWVzLmdldFByZXZpb3VzUGF0aHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3B0aW9ucyAmJiBfdHlwZW9mKG9wdGlvbnMpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY2guY29uZmlnID0gbmV3IENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBDb3JlVXRpbHMuZXh0ZW5kQXJyYXlQcm9wcyhjaC5jb25maWcsIG9wdGlvbnMpOyAvLyBmaXhlcyAjOTE0LCAjNjIzXG5cbiAgICAgICAgICAgIGlmIChjaC53Lmdsb2JhbHMuY2hhcnRJRCAhPT0gX3RoaXMuY3R4LncuZ2xvYmFscy5jaGFydElEKSB7XG4gICAgICAgICAgICAgIC8vIGRvbid0IG92ZXJ3cml0ZSBzZXJpZXMgb2Ygc3luY2hyb25pemVkIGNoYXJ0c1xuICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5zZXJpZXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHcuY29uZmlnID0gVXRpbHMuZXh0ZW5kKHcuY29uZmlnLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKG92ZXJ3cml0ZUluaXRpYWxDb25maWcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBmb3JnZXQgdGhlIGxhc3RYQXhpcyBhbmQgbGFzdFlBeGlzIGlzIHVzZXIgZm9yY2VmdWxseSBvdmVyd3JpdGVJbml0aWFsQ29uZmlnLiBJZiB3ZSBkbyBub3QgZG8gdGhpcywgYW5kIG5leHQgdGltZSB3aGVuIHVzZXIgem9vbXMgdGhlIGNoYXJ0IGFmdGVyIHNldHRpbmcgeWF4aXMubWluL21heCBvciB4YXhpcy5taW4vbWF4IC0gdGhlIHN0b3JlZCBsYXN0WEF4aXMgd2lsbCBuZXZlciBhbGxvdyB0aGUgY2hhcnQgdG8gdXNlIHRoZSB1cGRhdGVkIG1pbi9tYXggYnkgdXNlci5cbiAgICAgICAgICAgICAgdy5nbG9iYWxzLmxhc3RYQXhpcyA9IFtdO1xuICAgICAgICAgICAgICB3Lmdsb2JhbHMubGFzdFlBeGlzID0gW107IC8vIEFmdGVyIGZvcmdldHRpbmcgbGFzdEF4ZXMsIHdlIG5lZWQgdG8gcmVzdG9yZSB0aGUgbmV3IGNvbmZpZyBpbiBpbml0aWFsQ29uZmlnL2luaXRpYWxTZXJpZXNcblxuICAgICAgICAgICAgICB3Lmdsb2JhbHMuaW5pdGlhbENvbmZpZyA9IFV0aWxzLmV4dGVuZCh7fSwgdy5jb25maWcpO1xuICAgICAgICAgICAgICB3Lmdsb2JhbHMuaW5pdGlhbFNlcmllcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkody5jb25maWcuc2VyaWVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNoLnVwZGF0ZShvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFByaXZhdGUgbWV0aG9kIHRvIHVwZGF0ZSBTZXJpZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHthcnJheX0gc2VyaWVzIC0gTmV3IHNlcmllcyB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBleGlzdGluZ1xuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3VwZGF0ZVNlcmllc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVTZXJpZXMobmV3U2VyaWVzLCBhbmltYXRlKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBvdmVyd3JpdGVJbml0aWFsU2VyaWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHcuZ2xvYmFscy5zaG91bGRBbmltYXRlID0gYW5pbWF0ZTtcbiAgICAgICAgdy5nbG9iYWxzLmRhdGFDaGFuZ2VkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgIHRoaXMuY3R4LnNlcmllcy5nZXRQcmV2aW91c1BhdGhzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXhpc3RpbmdTZXJpZXM7IC8vIGF4aXMgY2hhcnRzXG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgZXhpc3RpbmdTZXJpZXMgPSBuZXdTZXJpZXMubWFwKGZ1bmN0aW9uIChzLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9leHRlbmRTZXJpZXMocywgaSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoZXhpc3RpbmdTZXJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBleGlzdGluZ1NlcmllcyA9IFt7XG4gICAgICAgICAgICAgIGRhdGE6IFtdXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3LmNvbmZpZy5zZXJpZXMgPSBleGlzdGluZ1NlcmllcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub24tYXhpcyBjaGFydCAocGllL3JhZGlhbGJhcilcbiAgICAgICAgICB3LmNvbmZpZy5zZXJpZXMgPSBuZXdTZXJpZXMuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvdmVyd3JpdGVJbml0aWFsU2VyaWVzKSB7XG4gICAgICAgICAgdy5nbG9iYWxzLmluaXRpYWxDb25maWcuc2VyaWVzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh3LmNvbmZpZy5zZXJpZXMpKTtcbiAgICAgICAgICB3Lmdsb2JhbHMuaW5pdGlhbFNlcmllcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkody5jb25maWcuc2VyaWVzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jdHgudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9leHRlbmRTZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZXh0ZW5kU2VyaWVzKHMsIGkpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgdy5jb25maWcuc2VyaWVzW2ldLCB7XG4gICAgICAgICAgbmFtZTogcy5uYW1lID8gcy5uYW1lIDogdy5jb25maWcuc2VyaWVzW2ldICYmIHcuY29uZmlnLnNlcmllc1tpXS5uYW1lLFxuICAgICAgICAgIHR5cGU6IHMudHlwZSA/IHMudHlwZSA6IHcuY29uZmlnLnNlcmllc1tpXSAmJiB3LmNvbmZpZy5zZXJpZXNbaV0udHlwZSxcbiAgICAgICAgICBkYXRhOiBzLmRhdGEgPyBzLmRhdGEgOiB3LmNvbmZpZy5zZXJpZXNbaV0gJiYgdy5jb25maWcuc2VyaWVzW2ldLmRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRvZ2dsZURhdGFQb2ludFNlbGVjdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZURhdGFQb2ludFNlbGVjdGlvbihzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBlbFBhdGggPSBudWxsO1xuICAgICAgICB2YXIgcGFyZW50ID0gXCIuYXBleGNoYXJ0cy1zZXJpZXNbZGF0YVxcXFw6cmVhbEluZGV4PSdcIi5jb25jYXQoc2VyaWVzSW5kZXgsIFwiJ11cIik7XG5cbiAgICAgICAgaWYgKHcuZ2xvYmFscy5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgZWxQYXRoID0gdy5nbG9iYWxzLmRvbS5QYXBlci5zZWxlY3QoXCJcIi5jb25jYXQocGFyZW50LCBcIiBwYXRoW2o9J1wiKS5jb25jYXQoZGF0YVBvaW50SW5kZXgsIFwiJ10sIFwiKS5jb25jYXQocGFyZW50LCBcIiBjaXJjbGVbaj0nXCIpLmNvbmNhdChkYXRhUG9pbnRJbmRleCwgXCInXSwgXCIpLmNvbmNhdChwYXJlbnQsIFwiIHJlY3Rbaj0nXCIpLmNvbmNhdChkYXRhUG9pbnRJbmRleCwgXCInXVwiKSkubWVtYmVyc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkYXRhUG9pbnRJbmRleCB3aWxsIGJlIHVuZGVmaW5lZCBoZXJlLCBoZW5jZSB1c2luZyBzZXJpZXNJbmRleFxuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVBvaW50SW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBlbFBhdGggPSB3Lmdsb2JhbHMuZG9tLlBhcGVyLnNlbGVjdChcIlwiLmNvbmNhdChwYXJlbnQsIFwiIHBhdGhbaj0nXCIpLmNvbmNhdChzZXJpZXNJbmRleCwgXCInXVwiKSkubWVtYmVyc1swXTtcblxuICAgICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdwaWUnIHx8IHcuY29uZmlnLmNoYXJ0LnR5cGUgPT09ICdkb251dCcpIHtcbiAgICAgICAgICAgICAgdmFyIHBpZSA9IG5ldyBQaWUodGhpcy5jdHgpO1xuICAgICAgICAgICAgICBwaWUucGllQ2xpY2tlZChzZXJpZXNJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsUGF0aCkge1xuICAgICAgICAgIHZhciBncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgICAgZ3JhcGhpY3MucGF0aE1vdXNlRG93bihlbFBhdGgsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybigndG9nZ2xlRGF0YVBvaW50U2VsZWN0aW9uOiBFbGVtZW50IG5vdCBmb3VuZCcpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsUGF0aC5ub2RlID8gZWxQYXRoLm5vZGUgOiBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb3JjZVhBeGlzVXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9yY2VYQXhpc1VwZGF0ZShvcHRpb25zKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB2YXIgbWlubWF4ID0gWydtaW4nLCAnbWF4J107XG4gICAgICAgIG1pbm1heC5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnhheGlzW2FdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdy5jb25maWcueGF4aXNbYV0gPSBvcHRpb25zLnhheGlzW2FdO1xuICAgICAgICAgICAgdy5nbG9iYWxzLmxhc3RYQXhpc1thXSA9IG9wdGlvbnMueGF4aXNbYV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3B0aW9ucy54YXhpcy5jYXRlZ29yaWVzICYmIG9wdGlvbnMueGF4aXMuY2F0ZWdvcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICB3LmNvbmZpZy54YXhpcy5jYXRlZ29yaWVzID0gb3B0aW9ucy54YXhpcy5jYXRlZ29yaWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYykge1xuICAgICAgICAgIHZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cyhvcHRpb25zKTtcbiAgICAgICAgICBvcHRpb25zID0gZGVmYXVsdHMuY29udmVydENhdFRvTnVtZXJpY1hheGlzKG9wdGlvbnMsIHRoaXMuY3R4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb3JjZVlBeGlzVXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9yY2VZQXhpc1VwZGF0ZShvcHRpb25zKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy5jaGFydC5zdGFja2VkICYmIHcuY29uZmlnLmNoYXJ0LnN0YWNrVHlwZSA9PT0gJzEwMCUnKSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy55YXhpcykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMueWF4aXMuZm9yRWFjaChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy55YXhpc1tpbmRleF0ubWluID0gMDtcbiAgICAgICAgICAgICAgb3B0aW9ucy55YXhpc1tpbmRleF0ubWF4ID0gMTAwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMueWF4aXMubWluID0gMDtcbiAgICAgICAgICAgIG9wdGlvbnMueWF4aXMubWF4ID0gMTAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldmVydHMgdGhlIHlheGlzIGFuZCB4YXhpcyBtaW4vbWF4IHZhbHVlcyB0byB3aGF0IGl0IHdhcyB3aGVuIHRoZSBjaGFydCB3YXMgZGVmaW5lZC5cbiAgICAgICAqIFRoaXMgZnVuY3Rpb24gZml4ZXMgYW4gaW1wb3J0YW50IGJ1ZyB3aGVyZSBhIHVzZXIgbWlnaHQgbG9hZCBhIG5ldyBzZXJpZXMgYWZ0ZXIgem9vbWluZyBpbi9vdXQgb2YgcHJldmlvdXMgc2VyaWVzIHdoaWNoIHJlc3VsdGVkIGluIHdyb25nIG1pbi9tYXhcbiAgICAgICAqIEFsc28sIHRoaXMgc2hvdWxkIG5ldmVyIGJlIGNhbGxlZCBpbnRlcm5hbGx5IG9uIHpvb20vcGFuIC0gdGhlIHJlc2V0IHNob3VsZCBvbmx5IGhhcHBlbiB3aGVuIHVzZXIgY2FsbHMgdGhlIHVwZGF0ZVNlcmllcygpIGZ1bmN0aW9uIGV4dGVybmFsbHlcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInJldmVydERlZmF1bHRBeGlzTWluTWF4XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmV2ZXJ0RGVmYXVsdEF4aXNNaW5NYXgoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuICAgICAgICB3LmNvbmZpZy54YXhpcy5taW4gPSB3Lmdsb2JhbHMubGFzdFhBeGlzLm1pbjtcbiAgICAgICAgdy5jb25maWcueGF4aXMubWF4ID0gdy5nbG9iYWxzLmxhc3RYQXhpcy5tYXg7XG4gICAgICAgIHcuY29uZmlnLnlheGlzLm1hcChmdW5jdGlvbiAoeWF4ZSwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAody5nbG9iYWxzLnpvb21lZCkge1xuICAgICAgICAgICAgLy8gdXNlciBoYXMgem9vbWVkLCBjaGVjayB0aGUgbGFzdCB5YXhpc1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3Lmdsb2JhbHMubGFzdFlBeGlzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgeWF4ZS5taW4gPSB3Lmdsb2JhbHMubGFzdFlBeGlzW2luZGV4XS5taW47XG4gICAgICAgICAgICAgIHlheGUubWF4ID0gdy5nbG9iYWxzLmxhc3RZQXhpc1tpbmRleF0ubWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VyIGhhc24ndCB6b29tZWQsIGNoZWNrIHRoZSBvcmlnaW5hbCB5YXhpc1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBfdGhpczMuY3R4Lm9wdHMueWF4aXNbaW5kZXhdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB5YXhlLm1pbiA9IF90aGlzMy5jdHgub3B0cy55YXhpc1tpbmRleF0ubWluO1xuICAgICAgICAgICAgICB5YXhlLm1heCA9IF90aGlzMy5jdHgub3B0cy55YXhpc1tpbmRleF0ubWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFVwZGF0ZUhlbHBlcnM7XG4gIH0oKTtcblxuICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KHJvb3QsIHJvb3QuZG9jdW1lbnQpO1xuICAgICAgfSk7XG4gICAgICAvKiBiZWxvdyBjaGVjayBmaXhlcyAjNDEyICovXG4gICAgfSBlbHNlIGlmICgodHlwZW9mIGV4cG9ydHMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJvb3QuZG9jdW1lbnQgPyBmYWN0b3J5KHJvb3QsIHJvb3QuZG9jdW1lbnQpIDogZnVuY3Rpb24gKHcpIHtcbiAgICAgICAgcmV0dXJuIGZhY3Rvcnkodywgdy5kb2N1bWVudCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LlNWRyA9IGZhY3Rvcnkocm9vdCwgcm9vdC5kb2N1bWVudCk7XG4gICAgfVxuICB9KSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZCwgZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQpIHtcbiAgICAvLyBGaW5kIGdsb2JhbCByZWZlcmVuY2UgLSB1c2VzICd0aGlzJyBieSBkZWZhdWx0IHdoZW4gYXZhaWxhYmxlLFxuICAgIC8vIGZhbGxzIGJhY2sgdG8gJ3dpbmRvdycgb3RoZXJ3aXNlIChmb3IgYnVuZGxlcnMgbGlrZSBXZWJwYWNrKVxuICAgIHZhciBnbG9iYWxSZWYgPSB0eXBlb2YgdGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyB0aGlzIDogd2luZG93OyAvLyBUaGUgbWFpbiB3cmFwcGluZyBlbGVtZW50XG5cbiAgICB2YXIgU1ZHID0gZ2xvYmFsUmVmLlNWRyA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoU1ZHLnN1cHBvcnRlZCkge1xuICAgICAgICBlbGVtZW50ID0gbmV3IFNWRy5Eb2MoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKCFTVkcucGFyc2VyLmRyYXcpIHtcbiAgICAgICAgICBTVkcucHJlcGFyZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfTsgLy8gRGVmYXVsdCBuYW1lc3BhY2VzXG5cblxuICAgIFNWRy5ucyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4gICAgU1ZHLnhtbG5zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJztcbiAgICBTVkcueGxpbmsgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG4gICAgU1ZHLnN2Z2pzID0gJ2h0dHA6Ly9zdmdqcy5jb20vc3ZnanMnOyAvLyBTdmcgc3VwcG9ydCB0ZXN0XG5cbiAgICBTVkcuc3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWU7IC8vICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TICYmXG4gICAgICAvLyAgICAgISEgZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWRy5ucywnc3ZnJykuY3JlYXRlU1ZHUmVjdFxuICAgIH0oKTsgLy8gRG9uJ3QgYm90aGVyIHRvIGNvbnRpbnVlIGlmIFNWRyBpcyBub3Qgc3VwcG9ydGVkXG5cblxuICAgIGlmICghU1ZHLnN1cHBvcnRlZCkgcmV0dXJuIGZhbHNlOyAvLyBFbGVtZW50IGlkIHNlcXVlbmNlXG5cbiAgICBTVkcuZGlkID0gMTAwMDsgLy8gR2V0IG5leHQgbmFtZWQgZWxlbWVudCBpZFxuXG4gICAgU1ZHLmVpZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ1N2Z2pzJyArIGNhcGl0YWxpemUobmFtZSkgKyBTVkcuZGlkKys7XG4gICAgfTsgLy8gTWV0aG9kIGZvciBlbGVtZW50IGNyZWF0aW9uXG5cblxuICAgIFNWRy5jcmVhdGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgLy8gY3JlYXRlIGVsZW1lbnRcbiAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHRoaXMubnMsIG5hbWUpOyAvLyBhcHBseSB1bmlxdWUgaWRcblxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5laWQobmFtZSkpO1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTsgLy8gTWV0aG9kIGZvciBleHRlbmRpbmcgb2JqZWN0c1xuXG5cbiAgICBTVkcuZXh0ZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1vZHVsZXMsIG1ldGhvZHM7IC8vIEdldCBsaXN0IG9mIG1vZHVsZXNcblxuICAgICAgbW9kdWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsgLy8gR2V0IG9iamVjdCB3aXRoIGV4dGVuc2lvbnNcblxuICAgICAgbWV0aG9kcyA9IG1vZHVsZXMucG9wKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSBtb2R1bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChtb2R1bGVzW2ldKSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgICAgIG1vZHVsZXNbaV0ucHJvdG90eXBlW2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIE1ha2Ugc3VyZSBTVkcuU2V0IGluaGVyaXRzIGFueSBuZXdseSBhZGRlZCBtZXRob2RzXG5cblxuICAgICAgaWYgKFNWRy5TZXQgJiYgU1ZHLlNldC5pbmhlcml0KSB7XG4gICAgICAgIFNWRy5TZXQuaW5oZXJpdCgpO1xuICAgICAgfVxuICAgIH07IC8vIEludmVudCBuZXcgZWxlbWVudFxuXG5cbiAgICBTVkcuaW52ZW50ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgLy8gQ3JlYXRlIGVsZW1lbnQgaW5pdGlhbGl6ZXJcbiAgICAgIHZhciBpbml0aWFsaXplciA9IHR5cGVvZiBjb25maWcuY3JlYXRlID09PSAnZnVuY3Rpb24nID8gY29uZmlnLmNyZWF0ZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoY29uZmlnLmNyZWF0ZSkpO1xuICAgICAgfTsgLy8gSW5oZXJpdCBwcm90b3R5cGVcblxuICAgICAgaWYgKGNvbmZpZy5pbmhlcml0KSB7XG4gICAgICAgIGluaXRpYWxpemVyLnByb3RvdHlwZSA9IG5ldyBjb25maWcuaW5oZXJpdCgpO1xuICAgICAgfSAvLyBFeHRlbmQgd2l0aCBtZXRob2RzXG5cblxuICAgICAgaWYgKGNvbmZpZy5leHRlbmQpIHtcbiAgICAgICAgU1ZHLmV4dGVuZChpbml0aWFsaXplciwgY29uZmlnLmV4dGVuZCk7XG4gICAgICB9IC8vIEF0dGFjaCBjb25zdHJ1Y3QgbWV0aG9kIHRvIHBhcmVudFxuXG5cbiAgICAgIGlmIChjb25maWcuY29uc3RydWN0KSB7XG4gICAgICAgIFNWRy5leHRlbmQoY29uZmlnLnBhcmVudCB8fCBTVkcuQ29udGFpbmVyLCBjb25maWcuY29uc3RydWN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluaXRpYWxpemVyO1xuICAgIH07IC8vIEFkb3B0IGV4aXN0aW5nIHN2ZyBlbGVtZW50c1xuXG5cbiAgICBTVkcuYWRvcHQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHByZXNlbmNlIG9mIG5vZGVcbiAgICAgIGlmICghbm9kZSkgcmV0dXJuIG51bGw7IC8vIG1ha2Ugc3VyZSBhIG5vZGUgaXNuJ3QgYWxyZWFkeSBhZG9wdGVkXG5cbiAgICAgIGlmIChub2RlLmluc3RhbmNlKSByZXR1cm4gbm9kZS5pbnN0YW5jZTsgLy8gaW5pdGlhbGl6ZSB2YXJpYWJsZXNcblxuICAgICAgdmFyIGVsZW1lbnQ7IC8vIGFkb3B0IHdpdGggZWxlbWVudC1zcGVjaWZpYyBzZXR0aW5nc1xuXG4gICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PSAnc3ZnJykge1xuICAgICAgICBlbGVtZW50ID0gbm9kZS5wYXJlbnROb2RlIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQgPyBuZXcgU1ZHLk5lc3RlZCgpIDogbmV3IFNWRy5Eb2MoKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlTmFtZSA9PSAnbGluZWFyR3JhZGllbnQnKSB7XG4gICAgICAgIGVsZW1lbnQgPSBuZXcgU1ZHLkdyYWRpZW50KCdsaW5lYXInKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlTmFtZSA9PSAncmFkaWFsR3JhZGllbnQnKSB7XG4gICAgICAgIGVsZW1lbnQgPSBuZXcgU1ZHLkdyYWRpZW50KCdyYWRpYWwnKTtcbiAgICAgIH0gZWxzZSBpZiAoU1ZHW2NhcGl0YWxpemUobm9kZS5ub2RlTmFtZSldKSB7XG4gICAgICAgIGVsZW1lbnQgPSBuZXcgU1ZHW2NhcGl0YWxpemUobm9kZS5ub2RlTmFtZSldKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gbmV3IFNWRy5FbGVtZW50KG5vZGUpO1xuICAgICAgfSAvLyBlbnN1cmUgcmVmZXJlbmNlc1xuXG5cbiAgICAgIGVsZW1lbnQudHlwZSA9IG5vZGUubm9kZU5hbWU7XG4gICAgICBlbGVtZW50Lm5vZGUgPSBub2RlO1xuICAgICAgbm9kZS5pbnN0YW5jZSA9IGVsZW1lbnQ7IC8vIFNWRy5DbGFzcyBzcGVjaWZpYyBwcmVwYXJhdGlvbnNcblxuICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBTVkcuRG9jKSB7XG4gICAgICAgIGVsZW1lbnQubmFtZXNwYWNlKCkuZGVmcygpO1xuICAgICAgfSAvLyBwdWxsIHN2Z2pzIGRhdGEgZnJvbSB0aGUgZG9tIChnZXRBdHRyaWJ1dGVOUyBkb2Vzbid0IHdvcmsgaW4gaHRtbDUpXG5cblxuICAgICAgZWxlbWVudC5zZXREYXRhKEpTT04ucGFyc2Uobm9kZS5nZXRBdHRyaWJ1dGUoJ3N2Z2pzOmRhdGEnKSkgfHwge30pO1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTsgLy8gSW5pdGlhbGl6ZSBwYXJzaW5nIGVsZW1lbnRcblxuXG4gICAgU1ZHLnByZXBhcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTZWxlY3QgZG9jdW1lbnQgYm9keSBhbmQgY3JlYXRlIGludmlzaWJsZSBzdmcgZWxlbWVudFxuICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLFxuICAgICAgICAgIGRyYXcgPSAoYm9keSA/IG5ldyBTVkcuRG9jKGJvZHkpIDogU1ZHLmFkb3B0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkubmVzdGVkKCkpLnNpemUoMiwgMCk7IC8vIENyZWF0ZSBwYXJzZXIgb2JqZWN0XG5cbiAgICAgIFNWRy5wYXJzZXIgPSB7XG4gICAgICAgIGJvZHk6IGJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBkcmF3OiBkcmF3LnN0eWxlKCdvcGFjaXR5OjA7cG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTAwJTt0b3A6LTEwMCU7b3ZlcmZsb3c6aGlkZGVuJykubm9kZSxcbiAgICAgICAgcG9seTogZHJhdy5wb2x5bGluZSgpLm5vZGUsXG4gICAgICAgIHBhdGg6IGRyYXcucGF0aCgpLm5vZGUsXG4gICAgICAgIG5hdGl2ZTogU1ZHLmNyZWF0ZSgnc3ZnJylcbiAgICAgIH07XG4gICAgfTtcblxuICAgIFNWRy5wYXJzZXIgPSB7XG4gICAgICBuYXRpdmU6IFNWRy5jcmVhdGUoJ3N2ZycpXG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFTVkcucGFyc2VyLmRyYXcpIHtcbiAgICAgICAgU1ZHLnByZXBhcmUoKTtcbiAgICAgIH1cbiAgICB9LCBmYWxzZSk7IC8vIFN0b3JhZ2UgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuICAgIFNWRy5yZWdleCA9IHtcbiAgICAgIC8vIFBhcnNlIHVuaXQgdmFsdWVcbiAgICAgIG51bWJlckFuZFVuaXQ6IC9eKFsrLV0/KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKGVbKy1dP1xcZCspPykoW2EteiVdKikkL2ksXG4gICAgICAvLyBQYXJzZSBoZXggdmFsdWVcbiAgICAgIGhleDogL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaSxcbiAgICAgIC8vIFBhcnNlIHJnYiB2YWx1ZVxuICAgICAgcmdiOiAvcmdiXFwoKFxcZCspLChcXGQrKSwoXFxkKylcXCkvLFxuICAgICAgLy8gUGFyc2UgcmVmZXJlbmNlIGlkXG4gICAgICByZWZlcmVuY2U6IC8jKFthLXowLTlcXC1fXSspL2ksXG4gICAgICAvLyBzcGxpdHMgYSB0cmFuc2Zvcm1hdGlvbiBjaGFpblxuICAgICAgdHJhbnNmb3JtczogL1xcKVxccyosP1xccyovLFxuICAgICAgLy8gV2hpdGVzcGFjZVxuICAgICAgd2hpdGVzcGFjZTogL1xccy9nLFxuICAgICAgLy8gVGVzdCBoZXggdmFsdWVcbiAgICAgIGlzSGV4OiAvXiNbYS1mMC05XXszLDZ9JC9pLFxuICAgICAgLy8gVGVzdCByZ2IgdmFsdWVcbiAgICAgIGlzUmdiOiAvXnJnYlxcKC8sXG4gICAgICAvLyBUZXN0IGNzcyBkZWNsYXJhdGlvblxuICAgICAgaXNDc3M6IC9bXjpdKzpbXjtdKzs/LyxcbiAgICAgIC8vIFRlc3QgZm9yIGJsYW5rIHN0cmluZ1xuICAgICAgaXNCbGFuazogL14oXFxzKyk/JC8sXG4gICAgICAvLyBUZXN0IGZvciBudW1lcmljIHN0cmluZ1xuICAgICAgaXNOdW1iZXI6IC9eWystXT8oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/JC9pLFxuICAgICAgLy8gVGVzdCBmb3IgcGVyY2VudCB2YWx1ZVxuICAgICAgaXNQZXJjZW50OiAvXi0/W1xcZFxcLl0rJSQvLFxuICAgICAgLy8gVGVzdCBmb3IgaW1hZ2UgdXJsXG4gICAgICBpc0ltYWdlOiAvXFwuKGpwZ3xqcGVnfHBuZ3xnaWZ8c3ZnKShcXD9bXj1dKy4qKT8vaSxcbiAgICAgIC8vIHNwbGl0IGF0IHdoaXRlc3BhY2UgYW5kIGNvbW1hXG4gICAgICBkZWxpbWl0ZXI6IC9bXFxzLF0rLyxcbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgcmVnZXggYXJlIHVzZWQgdG8gcGFyc2UgdGhlIGQgYXR0cmlidXRlIG9mIGEgcGF0aFxuICAgICAgLy8gTWF0Y2hlcyBhbGwgaHlwaGVucyB3aGljaCBhcmUgbm90IGFmdGVyIGFuIGV4cG9uZW50XG4gICAgICBoeXBoZW46IC8oW15lXSlcXC0vZ2ksXG4gICAgICAvLyBSZXBsYWNlcyBhbmQgdGVzdHMgZm9yIGFsbCBwYXRoIGxldHRlcnNcbiAgICAgIHBhdGhMZXR0ZXJzOiAvW01MSFZDU1FUQVpdL2dpLFxuICAgICAgLy8geWVzIHdlIG5lZWQgdGhpcyBvbmUsIHRvb1xuICAgICAgaXNQYXRoTGV0dGVyOiAvW01MSFZDU1FUQVpdL2ksXG4gICAgICAvLyBtYXRjaGVzIDAuMTU0LjIzLjQ1XG4gICAgICBudW1iZXJzV2l0aERvdHM6IC8oKFxcZD9cXC5cXGQrKD86ZVsrLV0/XFxkKyk/KSgoPzpcXC5cXGQrKD86ZVsrLV0/XFxkKyk/KSspKSsvZ2ksXG4gICAgICAvLyBtYXRjaGVzIC5cbiAgICAgIGRvdHM6IC9cXC4vZ1xuICAgIH07XG4gICAgU1ZHLnV0aWxzID0ge1xuICAgICAgLy8gTWFwIGZ1bmN0aW9uXG4gICAgICBtYXA6IGZ1bmN0aW9uIG1hcChhcnJheSwgYmxvY2spIHtcbiAgICAgICAgdmFyIGlsID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goYmxvY2soYXJyYXlbaV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgICAgLy8gRmlsdGVyIGZ1bmN0aW9uXG4gICAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihhcnJheSwgYmxvY2spIHtcbiAgICAgICAgdmFyIGlsID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGJsb2NrKGFycmF5W2ldKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgICAgZmlsdGVyU1ZHRWxlbWVudHM6IGZ1bmN0aW9uIGZpbHRlclNWR0VsZW1lbnRzKG5vZGVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihub2RlcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgcmV0dXJuIGVsIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQ7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgU1ZHLmRlZmF1bHRzID0ge1xuICAgICAgLy8gRGVmYXVsdCBhdHRyaWJ1dGUgdmFsdWVzXG4gICAgICBhdHRyczoge1xuICAgICAgICAvLyBmaWxsIGFuZCBzdHJva2VcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IDEsXG4gICAgICAgICdzdHJva2Utb3BhY2l0eSc6IDEsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiAwLFxuICAgICAgICAnc3Ryb2tlLWxpbmVqb2luJzogJ21pdGVyJyxcbiAgICAgICAgJ3N0cm9rZS1saW5lY2FwJzogJ2J1dHQnLFxuICAgICAgICBmaWxsOiAnIzAwMDAwMCcsXG4gICAgICAgIHN0cm9rZTogJyMwMDAwMDAnLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAvLyBwb3NpdGlvblxuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICBjeDogMCxcbiAgICAgICAgY3k6IDAsXG4gICAgICAgIC8vIHNpemVcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgLy8gcmFkaXVzXG4gICAgICAgIHI6IDAsXG4gICAgICAgIHJ4OiAwLFxuICAgICAgICByeTogMCxcbiAgICAgICAgLy8gZ3JhZGllbnRcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAnc3RvcC1vcGFjaXR5JzogMSxcbiAgICAgICAgJ3N0b3AtY29sb3InOiAnIzAwMDAwMCcsXG4gICAgICAgIC8vIHRleHRcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6IDE2LFxuICAgICAgICAnZm9udC1mYW1pbHknOiAnaW5oZXJpdCcsXG4gICAgICAgICd0ZXh0LWFuY2hvcic6ICdzdGFydCdcbiAgICAgIH1cbiAgICB9OyAvLyBNb2R1bGUgZm9yIGNvbG9yIGNvbnZlcnRpb25zXG5cbiAgICBTVkcuQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgIHZhciBtYXRjaDsgLy8gaW5pdGlhbGl6ZSBkZWZhdWx0c1xuXG4gICAgICB0aGlzLnIgPSAwO1xuICAgICAgdGhpcy5nID0gMDtcbiAgICAgIHRoaXMuYiA9IDA7XG4gICAgICBpZiAoIWNvbG9yKSByZXR1cm47IC8vIHBhcnNlIGNvbG9yXG5cbiAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChTVkcucmVnZXguaXNSZ2IudGVzdChjb2xvcikpIHtcbiAgICAgICAgICAvLyBnZXQgcmdiIHZhbHVlc1xuICAgICAgICAgIG1hdGNoID0gU1ZHLnJlZ2V4LnJnYi5leGVjKGNvbG9yLnJlcGxhY2UoU1ZHLnJlZ2V4LndoaXRlc3BhY2UsICcnKSk7IC8vIHBhcnNlIG51bWVyaWMgdmFsdWVzXG5cbiAgICAgICAgICB0aGlzLnIgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICAgICAgdGhpcy5nID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xuICAgICAgICAgIHRoaXMuYiA9IHBhcnNlSW50KG1hdGNoWzNdKTtcbiAgICAgICAgfSBlbHNlIGlmIChTVkcucmVnZXguaXNIZXgudGVzdChjb2xvcikpIHtcbiAgICAgICAgICAvLyBnZXQgaGV4IHZhbHVlc1xuICAgICAgICAgIG1hdGNoID0gU1ZHLnJlZ2V4LmhleC5leGVjKGZ1bGxIZXgoY29sb3IpKTsgLy8gcGFyc2UgbnVtZXJpYyB2YWx1ZXNcblxuICAgICAgICAgIHRoaXMuciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxNik7XG4gICAgICAgICAgdGhpcy5nID0gcGFyc2VJbnQobWF0Y2hbMl0sIDE2KTtcbiAgICAgICAgICB0aGlzLmIgPSBwYXJzZUludChtYXRjaFszXSwgMTYpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF90eXBlb2YoY29sb3IpID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aGlzLnIgPSBjb2xvci5yO1xuICAgICAgICB0aGlzLmcgPSBjb2xvci5nO1xuICAgICAgICB0aGlzLmIgPSBjb2xvci5iO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTVkcuZXh0ZW5kKFNWRy5Db2xvciwge1xuICAgICAgLy8gRGVmYXVsdCB0byBoZXggY29udmVyc2lvblxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0hleCgpO1xuICAgICAgfSxcbiAgICAgIC8vIEJ1aWxkIGhleCB2YWx1ZVxuICAgICAgdG9IZXg6IGZ1bmN0aW9uIHRvSGV4KCkge1xuICAgICAgICByZXR1cm4gJyMnICsgY29tcFRvSGV4KHRoaXMucikgKyBjb21wVG9IZXgodGhpcy5nKSArIGNvbXBUb0hleCh0aGlzLmIpO1xuICAgICAgfSxcbiAgICAgIC8vIEJ1aWxkIHJnYiB2YWx1ZVxuICAgICAgdG9SZ2I6IGZ1bmN0aW9uIHRvUmdiKCkge1xuICAgICAgICByZXR1cm4gJ3JnYignICsgW3RoaXMuciwgdGhpcy5nLCB0aGlzLmJdLmpvaW4oKSArICcpJztcbiAgICAgIH0sXG4gICAgICAvLyBDYWxjdWxhdGUgdHJ1ZSBicmlnaHRuZXNzXG4gICAgICBicmlnaHRuZXNzOiBmdW5jdGlvbiBicmlnaHRuZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yIC8gMjU1ICogMC4zMCArIHRoaXMuZyAvIDI1NSAqIDAuNTkgKyB0aGlzLmIgLyAyNTUgKiAwLjExO1xuICAgICAgfSxcbiAgICAgIC8vIE1ha2UgY29sb3IgbW9ycGhhYmxlXG4gICAgICBtb3JwaDogZnVuY3Rpb24gbW9ycGgoY29sb3IpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTVkcuQ29sb3IoY29sb3IpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBHZXQgbW9ycGhlZCBjb2xvciBhdCBnaXZlbiBwb3NpdGlvblxuICAgICAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgICAgICAvLyBtYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXG4gICAgICAgIGlmICghdGhpcy5kZXN0aW5hdGlvbikgcmV0dXJuIHRoaXM7IC8vIG5vcm1hbGlzZSBwb3NcblxuICAgICAgICBwb3MgPSBwb3MgPCAwID8gMCA6IHBvcyA+IDEgPyAxIDogcG9zOyAvLyBnZW5lcmF0ZSBtb3JwaGVkIGNvbG9yXG5cbiAgICAgICAgcmV0dXJuIG5ldyBTVkcuQ29sb3Ioe1xuICAgICAgICAgIHI6IH5+KHRoaXMuciArICh0aGlzLmRlc3RpbmF0aW9uLnIgLSB0aGlzLnIpICogcG9zKSxcbiAgICAgICAgICBnOiB+fih0aGlzLmcgKyAodGhpcy5kZXN0aW5hdGlvbi5nIC0gdGhpcy5nKSAqIHBvcyksXG4gICAgICAgICAgYjogfn4odGhpcy5iICsgKHRoaXMuZGVzdGluYXRpb24uYiAtIHRoaXMuYikgKiBwb3MpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pOyAvLyBUZXN0ZXJzXG4gICAgLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIGNvbG9yIHN0cmluZ1xuXG4gICAgU1ZHLkNvbG9yLnRlc3QgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgIGNvbG9yICs9ICcnO1xuICAgICAgcmV0dXJuIFNWRy5yZWdleC5pc0hleC50ZXN0KGNvbG9yKSB8fCBTVkcucmVnZXguaXNSZ2IudGVzdChjb2xvcik7XG4gICAgfTsgLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIHJnYiBvYmplY3RcblxuXG4gICAgU1ZHLkNvbG9yLmlzUmdiID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICByZXR1cm4gY29sb3IgJiYgdHlwZW9mIGNvbG9yLnIgPT09ICdudW1iZXInICYmIHR5cGVvZiBjb2xvci5nID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgY29sb3IuYiA9PT0gJ251bWJlcic7XG4gICAgfTsgLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIGNvbG9yXG5cblxuICAgIFNWRy5Db2xvci5pc0NvbG9yID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICByZXR1cm4gU1ZHLkNvbG9yLmlzUmdiKGNvbG9yKSB8fCBTVkcuQ29sb3IudGVzdChjb2xvcik7XG4gICAgfTsgLy8gTW9kdWxlIGZvciBhcnJheSBjb252ZXJzaW9uXG5cblxuICAgIFNWRy5BcnJheSA9IGZ1bmN0aW9uIChhcnJheSwgZmFsbGJhY2spIHtcbiAgICAgIGFycmF5ID0gKGFycmF5IHx8IFtdKS52YWx1ZU9mKCk7IC8vIGlmIGFycmF5IGlzIGVtcHR5IGFuZCBmYWxsYmFjayBpcyBwcm92aWRlZCwgdXNlIGZhbGxiYWNrXG5cbiAgICAgIGlmIChhcnJheS5sZW5ndGggPT0gMCAmJiBmYWxsYmFjaykge1xuICAgICAgICBhcnJheSA9IGZhbGxiYWNrLnZhbHVlT2YoKTtcbiAgICAgIH0gLy8gcGFyc2UgYXJyYXlcblxuXG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5wYXJzZShhcnJheSk7XG4gICAgfTtcblxuICAgIFNWRy5leHRlbmQoU1ZHLkFycmF5LCB7XG4gICAgICAvLyBDb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5qb2luKCcgJyk7XG4gICAgICB9LFxuICAgICAgLy8gUmVhbCB2YWx1ZVxuICAgICAgdmFsdWVPZjogZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICB9LFxuICAgICAgLy8gUGFyc2Ugd2hpdGVzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoYXJyYXkpIHtcbiAgICAgICAgYXJyYXkgPSBhcnJheS52YWx1ZU9mKCk7IC8vIGlmIGFscmVhZHkgaXMgYW4gYXJyYXksIG5vIG5lZWQgdG8gcGFyc2UgaXRcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJheSkpIHJldHVybiBhcnJheTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXQoYXJyYXkpO1xuICAgICAgfVxuICAgIH0pOyAvLyBQb2x5IHBvaW50cyBhcnJheVxuXG4gICAgU1ZHLlBvaW50QXJyYXkgPSBmdW5jdGlvbiAoYXJyYXksIGZhbGxiYWNrKSB7XG4gICAgICBTVkcuQXJyYXkuY2FsbCh0aGlzLCBhcnJheSwgZmFsbGJhY2sgfHwgW1swLCAwXV0pO1xuICAgIH07IC8vIEluaGVyaXQgZnJvbSBTVkcuQXJyYXlcblxuXG4gICAgU1ZHLlBvaW50QXJyYXkucHJvdG90eXBlID0gbmV3IFNWRy5BcnJheSgpO1xuICAgIFNWRy5Qb2ludEFycmF5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNWRy5Qb2ludEFycmF5O1xuICAgIHZhciBwYXRoSGFuZGxlcnMgPSB7XG4gICAgICBNOiBmdW5jdGlvbiBNKGMsIHAsIHAwKSB7XG4gICAgICAgIHAueCA9IHAwLnggPSBjWzBdO1xuICAgICAgICBwLnkgPSBwMC55ID0gY1sxXTtcbiAgICAgICAgcmV0dXJuIFsnTScsIHAueCwgcC55XTtcbiAgICAgIH0sXG4gICAgICBMOiBmdW5jdGlvbiBMKGMsIHApIHtcbiAgICAgICAgcC54ID0gY1swXTtcbiAgICAgICAgcC55ID0gY1sxXTtcbiAgICAgICAgcmV0dXJuIFsnTCcsIGNbMF0sIGNbMV1dO1xuICAgICAgfSxcbiAgICAgIEg6IGZ1bmN0aW9uIEgoYywgcCkge1xuICAgICAgICBwLnggPSBjWzBdO1xuICAgICAgICByZXR1cm4gWydIJywgY1swXV07XG4gICAgICB9LFxuICAgICAgVjogZnVuY3Rpb24gVihjLCBwKSB7XG4gICAgICAgIHAueSA9IGNbMF07XG4gICAgICAgIHJldHVybiBbJ1YnLCBjWzBdXTtcbiAgICAgIH0sXG4gICAgICBDOiBmdW5jdGlvbiBDKGMsIHApIHtcbiAgICAgICAgcC54ID0gY1s0XTtcbiAgICAgICAgcC55ID0gY1s1XTtcbiAgICAgICAgcmV0dXJuIFsnQycsIGNbMF0sIGNbMV0sIGNbMl0sIGNbM10sIGNbNF0sIGNbNV1dO1xuICAgICAgfSxcbiAgICAgIFE6IGZ1bmN0aW9uIFEoYywgcCkge1xuICAgICAgICBwLnggPSBjWzJdO1xuICAgICAgICBwLnkgPSBjWzNdO1xuICAgICAgICByZXR1cm4gWydRJywgY1swXSwgY1sxXSwgY1syXSwgY1szXV07XG4gICAgICB9LFxuICAgICAgWjogZnVuY3Rpb24gWihjLCBwLCBwMCkge1xuICAgICAgICBwLnggPSBwMC54O1xuICAgICAgICBwLnkgPSBwMC55O1xuICAgICAgICByZXR1cm4gWydaJ107XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgbWxodnF0Y3NhID0gJ21saHZxdGNzYXonLnNwbGl0KCcnKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG1saHZxdGNzYS5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XG4gICAgICBwYXRoSGFuZGxlcnNbbWxodnF0Y3NhW2ldXSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYywgcCwgcDApIHtcbiAgICAgICAgICBpZiAoaSA9PSAnSCcpIGNbMF0gPSBjWzBdICsgcC54O2Vsc2UgaWYgKGkgPT0gJ1YnKSBjWzBdID0gY1swXSArIHAueTtlbHNlIGlmIChpID09ICdBJykge1xuICAgICAgICAgICAgY1s1XSA9IGNbNV0gKyBwLngsIGNbNl0gPSBjWzZdICsgcC55O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSBjLmxlbmd0aDsgaiA8IGpsOyArK2opIHtcbiAgICAgICAgICAgICAgY1tqXSA9IGNbal0gKyAoaiAlIDIgPyBwLnkgOiBwLngpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcGF0aEhhbmRsZXJzW2ldKGMsIHAsIHAwKTtcbiAgICAgICAgfTtcbiAgICAgIH0obWxodnF0Y3NhW2ldLnRvVXBwZXJDYXNlKCkpO1xuICAgIH0gLy8gUGF0aCBwb2ludHMgYXJyYXlcblxuXG4gICAgU1ZHLlBhdGhBcnJheSA9IGZ1bmN0aW9uIChhcnJheSwgZmFsbGJhY2spIHtcbiAgICAgIFNWRy5BcnJheS5jYWxsKHRoaXMsIGFycmF5LCBmYWxsYmFjayB8fCBbWydNJywgMCwgMF1dKTtcbiAgICB9OyAvLyBJbmhlcml0IGZyb20gU1ZHLkFycmF5XG5cblxuICAgIFNWRy5QYXRoQXJyYXkucHJvdG90eXBlID0gbmV3IFNWRy5BcnJheSgpO1xuICAgIFNWRy5QYXRoQXJyYXkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU1ZHLlBhdGhBcnJheTtcbiAgICBTVkcuZXh0ZW5kKFNWRy5QYXRoQXJyYXksIHtcbiAgICAgIC8vIENvbnZlcnQgYXJyYXkgdG8gc3RyaW5nXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBhcnJheVRvU3RyaW5nKHRoaXMudmFsdWUpO1xuICAgICAgfSxcbiAgICAgIC8vIE1vdmUgcGF0aCBzdHJpbmdcbiAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoeCwgeSkge1xuICAgICAgICAvLyBnZXQgYm91bmRpbmcgYm94IG9mIGN1cnJlbnQgc2l0dWF0aW9uXG4gICAgICAgIHZhciBib3ggPSB0aGlzLmJib3goKTsgLy8gZ2V0IHJlbGF0aXZlIG9mZnNldFxuXG4gICAgICAgIHggLT0gYm94Lng7XG4gICAgICAgIHkgLT0gYm94Lnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIC8vIEdldCBtb3JwaGVkIHBhdGggYXJyYXkgYXQgZ2l2ZW4gcG9zaXRpb25cbiAgICAgIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIGEgZGVzdGluYXRpb24gaXMgZGVmaW5lZFxuICAgICAgICBpZiAoIXRoaXMuZGVzdGluYXRpb24pIHJldHVybiB0aGlzO1xuICAgICAgICB2YXIgc291cmNlQXJyYXkgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgZGVzdGluYXRpb25BcnJheSA9IHRoaXMuZGVzdGluYXRpb24udmFsdWUsXG4gICAgICAgICAgICBhcnJheSA9IFtdLFxuICAgICAgICAgICAgcGF0aEFycmF5ID0gbmV3IFNWRy5QYXRoQXJyYXkoKSxcbiAgICAgICAgICAgIGlsLFxuICAgICAgICAgICAgamw7IC8vIEFuaW1hdGUgaGFzIHNwZWNpZmllZCBpbiB0aGUgU1ZHIHNwZWNcbiAgICAgICAgLy8gU2VlOiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHMTEvcGF0aHMuaHRtbCNQYXRoRWxlbWVudFxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHNvdXJjZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICBhcnJheVtpXSA9IFtzb3VyY2VBcnJheVtpXVswXV07XG5cbiAgICAgICAgICBmb3IgKHZhciBqID0gMSwgamwgPSBzb3VyY2VBcnJheVtpXS5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgICAgICBhcnJheVtpXVtqXSA9IHNvdXJjZUFycmF5W2ldW2pdICsgKGRlc3RpbmF0aW9uQXJyYXlbaV1bal0gLSBzb3VyY2VBcnJheVtpXVtqXSkgKiBwb3M7XG4gICAgICAgICAgfSAvLyBGb3IgdGhlIHR3byBmbGFncyBvZiB0aGUgZWxsaXB0aWNhbCBhcmMgY29tbWFuZCwgdGhlIFNWRyBzcGVjIHNheTpcbiAgICAgICAgICAvLyBGbGFncyBhbmQgYm9vbGVhbnMgYXJlIGludGVycG9sYXRlZCBhcyBmcmFjdGlvbnMgYmV0d2VlbiB6ZXJvIGFuZCBvbmUsIHdpdGggYW55IG5vbi16ZXJvIHZhbHVlIGNvbnNpZGVyZWQgdG8gYmUgYSB2YWx1ZSBvZiBvbmUvdHJ1ZVxuICAgICAgICAgIC8vIEVsbGlwdGljYWwgYXJjIGNvbW1hbmQgYXMgYW4gYXJyYXkgZm9sbG93ZWQgYnkgY29ycmVzcG9uZGluZyBpbmRleGVzOlxuICAgICAgICAgIC8vIFsnQScsIHJ4LCByeSwgeC1heGlzLXJvdGF0aW9uLCBsYXJnZS1hcmMtZmxhZywgc3dlZXAtZmxhZywgeCwgeV1cbiAgICAgICAgICAvLyAgIDAgICAgMSAgIDIgICAgICAgIDMgICAgICAgICAgICAgICAgIDQgICAgICAgICAgICAgNSAgICAgIDYgIDdcblxuXG4gICAgICAgICAgaWYgKGFycmF5W2ldWzBdID09PSAnQScpIHtcbiAgICAgICAgICAgIGFycmF5W2ldWzRdID0gKyhhcnJheVtpXVs0XSAhPSAwKTtcbiAgICAgICAgICAgIGFycmF5W2ldWzVdID0gKyhhcnJheVtpXVs1XSAhPSAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gRGlyZWN0bHkgbW9kaWZ5IHRoZSB2YWx1ZSBvZiBhIHBhdGggYXJyYXksIHRoaXMgaXMgZG9uZSB0aGlzIHdheSBmb3IgcGVyZm9ybWFuY2VcblxuXG4gICAgICAgIHBhdGhBcnJheS52YWx1ZSA9IGFycmF5O1xuICAgICAgICByZXR1cm4gcGF0aEFycmF5O1xuICAgICAgfSxcbiAgICAgIC8vIEFic29sdXRpemUgYW5kIHBhcnNlIHBhdGggdG8gYXJyYXlcbiAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShhcnJheSkge1xuICAgICAgICAvLyBpZiBpdCdzIGFscmVhZHkgYSBwYXRoYXJyYXksIG5vIG5lZWQgdG8gcGFyc2UgaXRcbiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgU1ZHLlBhdGhBcnJheSkgcmV0dXJuIGFycmF5LnZhbHVlT2YoKTsgLy8gcHJlcGFyZSBmb3IgcGFyc2luZ1xuXG4gICAgICAgIHZhciBzLFxuICAgICAgICAgICAgYXJyLFxuICAgICAgICAgICAgcGFyYW1DbnQgPSB7XG4gICAgICAgICAgJ00nOiAyLFxuICAgICAgICAgICdMJzogMixcbiAgICAgICAgICAnSCc6IDEsXG4gICAgICAgICAgJ1YnOiAxLFxuICAgICAgICAgICdDJzogNixcbiAgICAgICAgICAnUyc6IDQsXG4gICAgICAgICAgJ1EnOiA0LFxuICAgICAgICAgICdUJzogMixcbiAgICAgICAgICAnQSc6IDcsXG4gICAgICAgICAgJ1onOiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcnJheSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5LnJlcGxhY2UoU1ZHLnJlZ2V4Lm51bWJlcnNXaXRoRG90cywgcGF0aFJlZ1JlcGxhY2UpIC8vIGNvbnZlcnQgNDUuMTIzLjEyMyB0byA0NS4xMjMgLjEyM1xuICAgICAgICAgIC5yZXBsYWNlKFNWRy5yZWdleC5wYXRoTGV0dGVycywgJyAkJiAnKSAvLyBwdXQgc29tZSByb29tIGJldHdlZW4gbGV0dGVycyBhbmQgbnVtYmVyc1xuICAgICAgICAgIC5yZXBsYWNlKFNWRy5yZWdleC5oeXBoZW4sICckMSAtJykgLy8gYWRkIHNwYWNlIGJlZm9yZSBoeXBoZW5cbiAgICAgICAgICAudHJpbSgpIC8vIHRyaW1cbiAgICAgICAgICAuc3BsaXQoU1ZHLnJlZ2V4LmRlbGltaXRlcik7IC8vIHNwbGl0IGludG8gYXJyYXlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5LnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3Vycikge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdC5jYWxsKHByZXYsIGN1cnIpO1xuICAgICAgICAgIH0sIFtdKTtcbiAgICAgICAgfSAvLyBhcnJheSBub3cgaXMgYW4gYXJyYXkgY29udGFpbmluZyBhbGwgcGFydHMgb2YgYSBwYXRoIGUuZy4gWydNJywgJzAnLCAnMCcsICdMJywgJzMwJywgJzMwJyAuLi5dXG5cblxuICAgICAgICB2YXIgYXJyID0gW10sXG4gICAgICAgICAgICBwID0gbmV3IFNWRy5Qb2ludCgpLFxuICAgICAgICAgICAgcDAgPSBuZXcgU1ZHLlBvaW50KCksXG4gICAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgICBsZW4gPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8vIFRlc3QgaWYgd2UgaGF2ZSBhIHBhdGggbGV0dGVyXG4gICAgICAgICAgaWYgKFNWRy5yZWdleC5pc1BhdGhMZXR0ZXIudGVzdChhcnJheVtpbmRleF0pKSB7XG4gICAgICAgICAgICBzID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgKytpbmRleDsgLy8gSWYgbGFzdCBsZXR0ZXIgd2FzIGEgbW92ZSBjb21tYW5kIGFuZCB3ZSBnb3Qgbm8gbmV3LCBpdCBkZWZhdWx0cyB0byBbTF1pbmVcbiAgICAgICAgICB9IGVsc2UgaWYgKHMgPT0gJ00nKSB7XG4gICAgICAgICAgICBzID0gJ0wnO1xuICAgICAgICAgIH0gZWxzZSBpZiAocyA9PSAnbScpIHtcbiAgICAgICAgICAgIHMgPSAnbCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXJyLnB1c2gocGF0aEhhbmRsZXJzW3NdLmNhbGwobnVsbCwgYXJyYXkuc2xpY2UoaW5kZXgsIGluZGV4ID0gaW5kZXggKyBwYXJhbUNudFtzLnRvVXBwZXJDYXNlKCldKS5tYXAocGFyc2VGbG9hdCksIHAsIHAwKSk7XG4gICAgICAgIH0gd2hpbGUgKGxlbiA+IGluZGV4KTtcblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIC8vIEdldCBib3VuZGluZyBib3ggb2YgcGF0aFxuICAgICAgYmJveDogZnVuY3Rpb24gYmJveCgpIHtcbiAgICAgICAgaWYgKCFTVkcucGFyc2VyLmRyYXcpIHtcbiAgICAgICAgICBTVkcucHJlcGFyZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgU1ZHLnBhcnNlci5wYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMudG9TdHJpbmcoKSk7XG4gICAgICAgIHJldHVybiBTVkcucGFyc2VyLnBhdGguZ2V0QkJveCgpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2R1bGUgZm9yIHVuaXQgY29udmVydGlvbnNcblxuICAgIFNWRy5OdW1iZXIgPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemVcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHZhbHVlLCB1bml0KSB7XG4gICAgICAgIC8vIGluaXRpYWxpemUgZGVmYXVsdHNcbiAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgICAgIHRoaXMudW5pdCA9IHVuaXQgfHwgJyc7IC8vIHBhcnNlIHZhbHVlXG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAvLyBlbnN1cmUgYSB2YWxpZCBudW1lcmljIHZhbHVlXG4gICAgICAgICAgdGhpcy52YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IDAgOiAhaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgPCAwID8gLTMuNGUrMzggOiArMy40ZSszOCA6IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB1bml0ID0gdmFsdWUubWF0Y2goU1ZHLnJlZ2V4Lm51bWJlckFuZFVuaXQpO1xuXG4gICAgICAgICAgaWYgKHVuaXQpIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdmFsdWUgbnVtZXJpY1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHBhcnNlRmxvYXQodW5pdFsxXSk7IC8vIG5vcm1hbGl6ZVxuXG4gICAgICAgICAgICBpZiAodW5pdFs1XSA9PSAnJScpIHtcbiAgICAgICAgICAgICAgdGhpcy52YWx1ZSAvPSAxMDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVuaXRbNV0gPT0gJ3MnKSB7XG4gICAgICAgICAgICAgIHRoaXMudmFsdWUgKj0gMTAwMDtcbiAgICAgICAgICAgIH0gLy8gc3RvcmUgdW5pdFxuXG5cbiAgICAgICAgICAgIHRoaXMudW5pdCA9IHVuaXRbNV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNWRy5OdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICB0aGlzLnVuaXQgPSB2YWx1ZS51bml0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFkZCBtZXRob2RzXG4gICAgICBleHRlbmQ6IHtcbiAgICAgICAgLy8gU3RyaW5nYWxpemVcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgIHJldHVybiAodGhpcy51bml0ID09ICclJyA/IH5+KHRoaXMudmFsdWUgKiAxZTgpIC8gMWU2IDogdGhpcy51bml0ID09ICdzJyA/IHRoaXMudmFsdWUgLyAxZTMgOiB0aGlzLnZhbHVlKSArIHRoaXMudW5pdDtcbiAgICAgICAgfSxcbiAgICAgICAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ29udmVydCB0byBwcmltaXRpdmVcbiAgICAgICAgdmFsdWVPZjogZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQWRkIG51bWJlclxuICAgICAgICBwbHVzOiBmdW5jdGlvbiBwbHVzKG51bWJlcikge1xuICAgICAgICAgIG51bWJlciA9IG5ldyBTVkcuTnVtYmVyKG51bWJlcik7XG4gICAgICAgICAgcmV0dXJuIG5ldyBTVkcuTnVtYmVyKHRoaXMgKyBudW1iZXIsIHRoaXMudW5pdCB8fCBudW1iZXIudW5pdCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFN1YnRyYWN0IG51bWJlclxuICAgICAgICBtaW51czogZnVuY3Rpb24gbWludXMobnVtYmVyKSB7XG4gICAgICAgICAgbnVtYmVyID0gbmV3IFNWRy5OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFNWRy5OdW1iZXIodGhpcyAtIG51bWJlciwgdGhpcy51bml0IHx8IG51bWJlci51bml0KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTXVsdGlwbHkgbnVtYmVyXG4gICAgICAgIHRpbWVzOiBmdW5jdGlvbiB0aW1lcyhudW1iZXIpIHtcbiAgICAgICAgICBudW1iZXIgPSBuZXcgU1ZHLk51bWJlcihudW1iZXIpO1xuICAgICAgICAgIHJldHVybiBuZXcgU1ZHLk51bWJlcih0aGlzICogbnVtYmVyLCB0aGlzLnVuaXQgfHwgbnVtYmVyLnVuaXQpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBEaXZpZGUgbnVtYmVyXG4gICAgICAgIGRpdmlkZTogZnVuY3Rpb24gZGl2aWRlKG51bWJlcikge1xuICAgICAgICAgIG51bWJlciA9IG5ldyBTVkcuTnVtYmVyKG51bWJlcik7XG4gICAgICAgICAgcmV0dXJuIG5ldyBTVkcuTnVtYmVyKHRoaXMgLyBudW1iZXIsIHRoaXMudW5pdCB8fCBudW1iZXIudW5pdCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIENvbnZlcnQgdG8gZGlmZmVyZW50IHVuaXRcbiAgICAgICAgdG86IGZ1bmN0aW9uIHRvKHVuaXQpIHtcbiAgICAgICAgICB2YXIgbnVtYmVyID0gbmV3IFNWRy5OdW1iZXIodGhpcyk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHVuaXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBudW1iZXIudW5pdCA9IHVuaXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTWFrZSBudW1iZXIgbW9ycGhhYmxlXG4gICAgICAgIG1vcnBoOiBmdW5jdGlvbiBtb3JwaChudW1iZXIpIHtcbiAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNWRy5OdW1iZXIobnVtYmVyKTtcblxuICAgICAgICAgIGlmIChudW1iZXIucmVsYXRpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24udmFsdWUgKz0gdGhpcy52YWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gR2V0IG1vcnBoZWQgbnVtYmVyIGF0IGdpdmVuIHBvc2l0aW9uXG4gICAgICAgIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXG4gICAgICAgICAgaWYgKCF0aGlzLmRlc3RpbmF0aW9uKSByZXR1cm4gdGhpczsgLy8gR2VuZXJhdGUgbmV3IG1vcnBoZWQgbnVtYmVyXG5cbiAgICAgICAgICByZXR1cm4gbmV3IFNWRy5OdW1iZXIodGhpcy5kZXN0aW5hdGlvbikubWludXModGhpcykudGltZXMocG9zKS5wbHVzKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLkVsZW1lbnQgPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemUgbm9kZVxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUobm9kZSkge1xuICAgICAgICAvLyBtYWtlIHN0cm9rZSB2YWx1ZSBhY2Nlc3NpYmxlIGR5bmFtaWNhbGx5XG4gICAgICAgIHRoaXMuX3N0cm9rZSA9IFNWRy5kZWZhdWx0cy5hdHRycy5zdHJva2U7XG4gICAgICAgIHRoaXMuX2V2ZW50ID0gbnVsbDsgLy8gaW5pdGlhbGl6ZSBkYXRhIG9iamVjdFxuXG4gICAgICAgIHRoaXMuZG9tID0ge307IC8vIGNyZWF0ZSBjaXJjdWxhciByZWZlcmVuY2VcblxuICAgICAgICBpZiAodGhpcy5ub2RlID0gbm9kZSkge1xuICAgICAgICAgIHRoaXMudHlwZSA9IG5vZGUubm9kZU5hbWU7XG4gICAgICAgICAgdGhpcy5ub2RlLmluc3RhbmNlID0gdGhpczsgLy8gc3RvcmUgY3VycmVudCBhdHRyaWJ1dGUgdmFsdWVcblxuICAgICAgICAgIHRoaXMuX3N0cm9rZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzdHJva2UnKSB8fCB0aGlzLl9zdHJva2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuICAgICAgZXh0ZW5kOiB7XG4gICAgICAgIC8vIE1vdmUgb3ZlciB4LWF4aXNcbiAgICAgICAgeDogZnVuY3Rpb24geChfeCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3gnLCBfeCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1vdmUgb3ZlciB5LWF4aXNcbiAgICAgICAgeTogZnVuY3Rpb24geShfeSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3knLCBfeSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeC1heGlzXG4gICAgICAgIGN4OiBmdW5jdGlvbiBjeCh4KSB7XG4gICAgICAgICAgcmV0dXJuIHggPT0gbnVsbCA/IHRoaXMueCgpICsgdGhpcy53aWR0aCgpIC8gMiA6IHRoaXMueCh4IC0gdGhpcy53aWR0aCgpIC8gMik7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeS1heGlzXG4gICAgICAgIGN5OiBmdW5jdGlvbiBjeSh5KSB7XG4gICAgICAgICAgcmV0dXJuIHkgPT0gbnVsbCA/IHRoaXMueSgpICsgdGhpcy5oZWlnaHQoKSAvIDIgOiB0aGlzLnkoeSAtIHRoaXMuaGVpZ2h0KCkgLyAyKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTW92ZSBlbGVtZW50IHRvIGdpdmVuIHggYW5kIHkgdmFsdWVzXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoeCwgeSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLngoeCkueSh5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTW92ZSBlbGVtZW50IGJ5IGl0cyBjZW50ZXJcbiAgICAgICAgY2VudGVyOiBmdW5jdGlvbiBjZW50ZXIoeCwgeSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmN4KHgpLmN5KHkpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTZXQgd2lkdGggb2YgZWxlbWVudFxuICAgICAgICB3aWR0aDogZnVuY3Rpb24gd2lkdGgoX3dpZHRoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignd2lkdGgnLCBfd2lkdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcbiAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbiBoZWlnaHQoX2hlaWdodCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2hlaWdodCcsIF9oZWlnaHQpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTZXQgZWxlbWVudCBzaXplIHRvIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgc2l6ZTogZnVuY3Rpb24gc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgdmFyIHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgIHJldHVybiB0aGlzLndpZHRoKG5ldyBTVkcuTnVtYmVyKHAud2lkdGgpKS5oZWlnaHQobmV3IFNWRy5OdW1iZXIocC5oZWlnaHQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ2xvbmUgZWxlbWVudFxuICAgICAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUocGFyZW50KSB7XG4gICAgICAgICAgLy8gd3JpdGUgZG9tIGRhdGEgdG8gdGhlIGRvbSBzbyB0aGUgY2xvbmUgY2FuIHBpY2t1cCB0aGUgZGF0YVxuICAgICAgICAgIHRoaXMud3JpdGVEYXRhVG9Eb20oKTsgLy8gY2xvbmUgZWxlbWVudCBhbmQgYXNzaWduIG5ldyBpZFxuXG4gICAgICAgICAgdmFyIGNsb25lID0gYXNzaWduTmV3SWQodGhpcy5ub2RlLmNsb25lTm9kZSh0cnVlKSk7IC8vIGluc2VydCB0aGUgY2xvbmUgaW4gdGhlIGdpdmVuIHBhcmVudCBvciBhZnRlciBteXNlbGZcblxuICAgICAgICAgIGlmIChwYXJlbnQpIHBhcmVudC5hZGQoY2xvbmUpO2Vsc2UgdGhpcy5hZnRlcihjbG9uZSk7XG4gICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICB9LFxuICAgICAgICAvLyBSZW1vdmUgZWxlbWVudFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5wYXJlbnQoKSkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQoKS5yZW1vdmVFbGVtZW50KHRoaXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBSZXBsYWNlIGVsZW1lbnRcbiAgICAgICAgcmVwbGFjZTogZnVuY3Rpb24gcmVwbGFjZShlbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5hZnRlcihlbGVtZW50KS5yZW1vdmUoKTtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQWRkIGVsZW1lbnQgdG8gZ2l2ZW4gY29udGFpbmVyIGFuZCByZXR1cm4gc2VsZlxuICAgICAgICBhZGRUbzogZnVuY3Rpb24gYWRkVG8ocGFyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudC5wdXQodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEFkZCBlbGVtZW50IHRvIGdpdmVuIGNvbnRhaW5lciBhbmQgcmV0dXJuIGNvbnRhaW5lclxuICAgICAgICBwdXRJbjogZnVuY3Rpb24gcHV0SW4ocGFyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudC5hZGQodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCAvIHNldCBpZFxuICAgICAgICBpZDogZnVuY3Rpb24gaWQoX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignaWQnLCBfaWQpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTaG93IGVsZW1lbnRcbiAgICAgICAgc2hvdzogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZSgnZGlzcGxheScsICcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSGlkZSBlbGVtZW50XG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBJcyBlbGVtZW50IHZpc2libGU/XG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uIHZpc2libGUoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUoJ2Rpc3BsYXknKSAhPSAnbm9uZSc7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJldHVybiBpZCBvbiBzdHJpbmcgY29udmVyc2lvblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignaWQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmV0dXJuIGFycmF5IG9mIGNsYXNzZXMgb24gdGhlIG5vZGVcbiAgICAgICAgY2xhc3NlczogZnVuY3Rpb24gY2xhc3NlcygpIHtcbiAgICAgICAgICB2YXIgYXR0ciA9IHRoaXMuYXR0cignY2xhc3MnKTtcbiAgICAgICAgICByZXR1cm4gYXR0ciA9PSBudWxsID8gW10gOiBhdHRyLnRyaW0oKS5zcGxpdChTVkcucmVnZXguZGVsaW1pdGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmV0dXJuIHRydWUgaWYgY2xhc3MgZXhpc3RzIG9uIHRoZSBub2RlLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uIGhhc0NsYXNzKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jbGFzc2VzKCkuaW5kZXhPZihuYW1lKSAhPSAtMTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQWRkIGNsYXNzIHRvIHRoZSBub2RlXG4gICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcyhuYW1lKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmhhc0NsYXNzKG5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmNsYXNzZXMoKTtcbiAgICAgICAgICAgIGFycmF5LnB1c2gobmFtZSk7XG4gICAgICAgICAgICB0aGlzLmF0dHIoJ2NsYXNzJywgYXJyYXkuam9pbignICcpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmVtb3ZlIGNsYXNzIGZyb20gdGhlIG5vZGVcbiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKG5hbWUpIHtcbiAgICAgICAgICBpZiAodGhpcy5oYXNDbGFzcyhuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5hdHRyKCdjbGFzcycsIHRoaXMuY2xhc3NlcygpLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICByZXR1cm4gYyAhPSBuYW1lO1xuICAgICAgICAgICAgfSkuam9pbignICcpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gVG9nZ2xlIHRoZSBwcmVzZW5jZSBvZiBhIGNsYXNzIG9uIHRoZSBub2RlXG4gICAgICAgIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiB0b2dnbGVDbGFzcyhuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaGFzQ2xhc3MobmFtZSkgPyB0aGlzLnJlbW92ZUNsYXNzKG5hbWUpIDogdGhpcy5hZGRDbGFzcyhuYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gR2V0IHJlZmVyZW5jZWQgZWxlbWVudCBmb3JtIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgICByZWZlcmVuY2U6IGZ1bmN0aW9uIHJlZmVyZW5jZShhdHRyKSB7XG4gICAgICAgICAgcmV0dXJuIFNWRy5nZXQodGhpcy5hdHRyKGF0dHIpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmV0dXJucyB0aGUgcGFyZW50IGVsZW1lbnQgaW5zdGFuY2VcbiAgICAgICAgcGFyZW50OiBmdW5jdGlvbiBwYXJlbnQodHlwZSkge1xuICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzOyAvLyBjaGVjayBmb3IgcGFyZW50XG5cbiAgICAgICAgICBpZiAoIXBhcmVudC5ub2RlLnBhcmVudE5vZGUpIHJldHVybiBudWxsOyAvLyBnZXQgcGFyZW50IGVsZW1lbnRcblxuICAgICAgICAgIHBhcmVudCA9IFNWRy5hZG9wdChwYXJlbnQubm9kZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICBpZiAoIXR5cGUpIHJldHVybiBwYXJlbnQ7IC8vIGxvb3AgdHJvdWdoIGFuY2VzdG9ycyBpZiB0eXBlIGlzIGdpdmVuXG5cbiAgICAgICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5ub2RlIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnQubWF0Y2hlcyh0eXBlKSA6IHBhcmVudCBpbnN0YW5jZW9mIHR5cGUpIHJldHVybiBwYXJlbnQ7XG4gICAgICAgICAgICBpZiAoIXBhcmVudC5ub2RlLnBhcmVudE5vZGUgfHwgcGFyZW50Lm5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PSAnI2RvY3VtZW50JykgcmV0dXJuIG51bGw7IC8vICM3NTksICM3MjBcblxuICAgICAgICAgICAgcGFyZW50ID0gU1ZHLmFkb3B0KHBhcmVudC5ub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gR2V0IHBhcmVudCBkb2N1bWVudFxuICAgICAgICBkb2M6IGZ1bmN0aW9uIGRvYygpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIFNWRy5Eb2MgPyB0aGlzIDogdGhpcy5wYXJlbnQoU1ZHLkRvYyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHJldHVybiBhcnJheSBvZiBhbGwgYW5jZXN0b3JzIG9mIGdpdmVuIHR5cGUgdXAgdG8gdGhlIHJvb3Qgc3ZnXG4gICAgICAgIHBhcmVudHM6IGZ1bmN0aW9uIHBhcmVudHModHlwZSkge1xuICAgICAgICAgIHZhciBwYXJlbnRzID0gW10sXG4gICAgICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50KHR5cGUpO1xuICAgICAgICAgICAgaWYgKCFwYXJlbnQgfHwgIXBhcmVudC5ub2RlKSBicmVhaztcbiAgICAgICAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgICAgIH0gd2hpbGUgKHBhcmVudC5wYXJlbnQpO1xuXG4gICAgICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIG1hdGNoZXMgdGhlIGVsZW1lbnQgdnMgYSBjc3Mgc2VsZWN0b3JcbiAgICAgICAgbWF0Y2hlczogZnVuY3Rpb24gbWF0Y2hlcyhzZWxlY3Rvcikge1xuICAgICAgICAgIHJldHVybiBfbWF0Y2hlcyh0aGlzLm5vZGUsIHNlbGVjdG9yKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmV0dXJucyB0aGUgc3ZnIG5vZGUgdG8gY2FsbCBuYXRpdmUgc3ZnIG1ldGhvZHMgb24gaXRcbiAgICAgICAgbmF0aXZlOiBmdW5jdGlvbiBuYXRpdmUoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSW1wb3J0IHJhdyBzdmdcbiAgICAgICAgc3ZnOiBmdW5jdGlvbiBzdmcoX3N2Zykge1xuICAgICAgICAgIC8vIGNyZWF0ZSB0ZW1wb3JhcnkgaG9sZGVyXG4gICAgICAgICAgdmFyIHdlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdmcnKTsgLy8gYWN0IGFzIGEgc2V0dGVyIGlmIHN2ZyBpcyBnaXZlblxuXG4gICAgICAgICAgaWYgKF9zdmcgJiYgdGhpcyBpbnN0YW5jZW9mIFNWRy5QYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIGR1bXAgcmF3IHN2Z1xuICAgICAgICAgICAgd2VsbC5pbm5lckhUTUwgPSAnPHN2Zz4nICsgX3N2Zy5yZXBsYWNlKC9cXG4vLCAnJykucmVwbGFjZSgvPChbXFx3Oi1dKykoW148XSs/KVxcLz4vZywgJzwkMSQyPjwvJDE+JykgKyAnPC9zdmc+JzsgLy8gdHJhbnNwbGFudCBub2Rlc1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB3ZWxsLmZpcnN0Q2hpbGQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh3ZWxsLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9IC8vIG90aGVyd2lzZSBhY3QgYXMgYSBnZXR0ZXJcblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgYSB3cmFwcGluZyBzdmcgZWxlbWVudCBpbiBjYXNlIG9mIHBhcnRpYWwgY29udGVudFxuICAgICAgICAgICAgd2VsbC5hcHBlbmRDaGlsZChfc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3ZnJykpOyAvLyB3cml0ZSBzdmdqcyBkYXRhIHRvIHRoZSBkb21cblxuICAgICAgICAgICAgdGhpcy53cml0ZURhdGFUb0RvbSgpOyAvLyBpbnNlcnQgYSBjb3B5IG9mIHRoaXMgbm9kZVxuXG4gICAgICAgICAgICBfc3ZnLmFwcGVuZENoaWxkKHRoaXMubm9kZS5jbG9uZU5vZGUodHJ1ZSkpOyAvLyByZXR1cm4gdGFyZ2V0IGVsZW1lbnRcblxuXG4gICAgICAgICAgICByZXR1cm4gd2VsbC5pbm5lckhUTUwucmVwbGFjZSgvXjxzdmc+LywgJycpLnJlcGxhY2UoLzxcXC9zdmc+JC8sICcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXG4gICAgICAgIHdyaXRlRGF0YVRvRG9tOiBmdW5jdGlvbiB3cml0ZURhdGFUb0RvbSgpIHtcbiAgICAgICAgICAvLyBkdW1wIHZhcmlhYmxlcyByZWN1cnNpdmVseVxuICAgICAgICAgIGlmICh0aGlzLmVhY2ggfHwgdGhpcy5saW5lcykge1xuICAgICAgICAgICAgdmFyIGZuID0gdGhpcy5lYWNoID8gdGhpcyA6IHRoaXMubGluZXMoKTtcbiAgICAgICAgICAgIGZuLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aGlzLndyaXRlRGF0YVRvRG9tKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IC8vIHJlbW92ZSBwcmV2aW91c2x5IHNldCBkYXRhXG5cblxuICAgICAgICAgIHRoaXMubm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3N2Z2pzOmRhdGEnKTtcblxuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmRvbSkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuc2V0QXR0cmlidXRlKCdzdmdqczpkYXRhJywgSlNPTi5zdHJpbmdpZnkodGhpcy5kb20pKTtcbiAgICAgICAgICB9IC8vIHNlZSAjNDI4XG5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBzZXQgZ2l2ZW4gZGF0YSB0byB0aGUgZWxlbWVudHMgZGF0YSBwcm9wZXJ0eVxuICAgICAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKG8pIHtcbiAgICAgICAgICB0aGlzLmRvbSA9IG87XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGlzOiBmdW5jdGlvbiBpcyhvYmopIHtcbiAgICAgICAgICByZXR1cm4gX2lzKHRoaXMsIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuZWFzaW5nID0ge1xuICAgICAgJy0nOiBmdW5jdGlvbiBfKHBvcykge1xuICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgfSxcbiAgICAgICc8Pic6IGZ1bmN0aW9uIF8ocG9zKSB7XG4gICAgICAgIHJldHVybiAtTWF0aC5jb3MocG9zICogTWF0aC5QSSkgLyAyICsgMC41O1xuICAgICAgfSxcbiAgICAgICc+JzogZnVuY3Rpb24gXyhwb3MpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc2luKHBvcyAqIE1hdGguUEkgLyAyKTtcbiAgICAgIH0sXG4gICAgICAnPCc6IGZ1bmN0aW9uIF8ocG9zKSB7XG4gICAgICAgIHJldHVybiAtTWF0aC5jb3MocG9zICogTWF0aC5QSSAvIDIpICsgMTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU1ZHLm1vcnBoID0gZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgICByZXR1cm4gbmV3IFNWRy5Nb3JwaE9iaihmcm9tLCB0bykuYXQocG9zKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIFNWRy5TaXR1YXRpb24gPSBTVkcuaW52ZW50KHtcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKG8pIHtcbiAgICAgICAgdGhpcy5pbml0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmV2ZXJzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXZlcnNpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IG5ldyBTVkcuTnVtYmVyKG8uZHVyYXRpb24pLnZhbHVlT2YoKTtcbiAgICAgICAgdGhpcy5kZWxheSA9IG5ldyBTVkcuTnVtYmVyKG8uZGVsYXkpLnZhbHVlT2YoKTtcbiAgICAgICAgdGhpcy5zdGFydCA9ICtuZXcgRGF0ZSgpICsgdGhpcy5kZWxheTtcbiAgICAgICAgdGhpcy5maW5pc2ggPSB0aGlzLnN0YXJ0ICsgdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgdGhpcy5lYXNlID0gby5lYXNlOyAvLyB0aGlzLmxvb3AgaXMgaW5jcmVtZW50ZWQgZnJvbSAwIHRvIHRoaXMubG9vcHNcbiAgICAgICAgLy8gaXQgaXMgYWxzbyBpbmNyZW1lbnRlZCB3aGVuIGluIGFuIGluZmluaXRlIGxvb3AgKHdoZW4gdGhpcy5sb29wcyBpcyB0cnVlKVxuXG4gICAgICAgIHRoaXMubG9vcCA9IDA7XG4gICAgICAgIHRoaXMubG9vcHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gey8vIGZ1bmN0aW9uVG9DYWxsOiBbbGlzdCBvZiBtb3JwaGFibGUgb2JqZWN0c11cbiAgICAgICAgICAvLyBlLmcuIG1vdmU6IFtTVkcuTnVtYmVyLCBTVkcuTnVtYmVyXVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmF0dHJzID0gey8vIGhvbGRzIGFsbCBhdHRyaWJ1dGVzIHdoaWNoIGFyZSBub3QgcmVwcmVzZW50ZWQgZnJvbSBhIGZ1bmN0aW9uIHN2Zy5qcyBwcm92aWRlc1xuICAgICAgICAgIC8vIGUuZy4gc29tZUF0dHI6IFNWRy5OdW1iZXJcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdHlsZXMgPSB7Ly8gaG9sZHMgYWxsIHN0eWxlcyB3aGljaCBzaG91bGQgYmUgYW5pbWF0ZWRcbiAgICAgICAgICAvLyBlLmcuIGZpbGwtY29sb3I6IFNWRy5Db2xvclxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRyYW5zZm9ybXMgPSBbLy8gaG9sZHMgYWxsIHRyYW5zZm9ybWF0aW9ucyBhcyB0cmFuc2Zvcm1hdGlvbiBvYmplY3RzXG4gICAgICAgICAgLy8gZS5nLiBbU1ZHLlJvdGF0ZSwgU1ZHLlRyYW5zbGF0ZSwgU1ZHLk1hdHJpeF1cbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5vbmNlID0gey8vIGZ1bmN0aW9ucyB0byBmaXJlIGF0IGEgc3BlY2lmaWMgcG9zaXRpb25cbiAgICAgICAgICAvLyBlLmcuIFwiMC41XCI6IGZ1bmN0aW9uIGZvbygpe31cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuRlggPSBTVkcuaW52ZW50KHtcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5zaXR1YXRpb25zID0gW107XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2l0dWF0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXN0UG9zID0gMDtcbiAgICAgICAgdGhpcy5wb3MgPSAwOyAvLyBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgYW4gYW5pbWF0aW9uIGlzIGl0cyBwb3NpdGlvbiBpbiB0aGUgY29udGV4dCBvZiBpdHMgY29tcGxldGUgZHVyYXRpb24gKGluY2x1ZGluZyBkZWxheSBhbmQgbG9vcHMpXG4gICAgICAgIC8vIFdoZW4gcGVyZm9ybWluZyBhIGRlbGF5LCBhYnNQb3MgaXMgYmVsb3cgMCBhbmQgd2hlbiBwZXJmb3JtaW5nIGEgbG9vcCwgaXRzIHZhbHVlIGlzIGFib3ZlIDFcblxuICAgICAgICB0aGlzLmFic1BvcyA9IDA7XG4gICAgICAgIHRoaXMuX3NwZWVkID0gMTtcbiAgICAgIH0sXG4gICAgICBleHRlbmQ6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldHMgb3IgcmV0dXJucyB0aGUgdGFyZ2V0IG9mIHRoaXMgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSBvIG9iamVjdCB8fCBudW1iZXIgSW4gY2FzZSBvZiBPYmplY3QgaXQgaG9sZHMgYWxsIHBhcmFtZXRlcnMuIEluIGNhc2Ugb2YgbnVtYmVyIGl0cyB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvblxuICAgICAgICAgKiBAcGFyYW0gZWFzZSBmdW5jdGlvbiB8fCBzdHJpbmcgRnVuY3Rpb24gd2hpY2ggc2hvdWxkIGJlIHVzZWQgZm9yIGVhc2luZyBvciBlYXNpbmcga2V5d29yZFxuICAgICAgICAgKiBAcGFyYW0gZGVsYXkgTnVtYmVyIGluZGljYXRpbmcgdGhlIGRlbGF5IGJlZm9yZSB0aGUgYW5pbWF0aW9uIHN0YXJ0c1xuICAgICAgICAgKiBAcmV0dXJuIHRhcmdldCB8fCB0aGlzXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKG8sIGVhc2UsIGRlbGF5KSB7XG4gICAgICAgICAgaWYgKF90eXBlb2YobykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBlYXNlID0gby5lYXNlO1xuICAgICAgICAgICAgZGVsYXkgPSBvLmRlbGF5O1xuICAgICAgICAgICAgbyA9IG8uZHVyYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNpdHVhdGlvbiA9IG5ldyBTVkcuU2l0dWF0aW9uKHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBvIHx8IDEwMDAsXG4gICAgICAgICAgICBkZWxheTogZGVsYXkgfHwgMCxcbiAgICAgICAgICAgIGVhc2U6IFNWRy5lYXNpbmdbZWFzZSB8fCAnLSddIHx8IGVhc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnF1ZXVlKHNpdHVhdGlvbik7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogc2V0cyBhIGRlbGF5IGJlZm9yZSB0aGUgbmV4dCBlbGVtZW50IG9mIHRoZSBxdWV1ZSBpcyBjYWxsZWRcbiAgICAgICAgKiBAcGFyYW0gZGVsYXkgRHVyYXRpb24gb2YgZGVsYXkgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICogQHJldHVybiB0aGlzLnRhcmdldCgpXG4gICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogc2V0cyBvciByZXR1cm5zIHRoZSB0YXJnZXQgb2YgdGhpcyBhbmltYXRpb25cbiAgICAgICAgKiBAcGFyYW0gbnVsbCB8fCB0YXJnZXQgU1ZHLkVsZW1lbnQgd2hpY2ggc2hvdWxkIGJlIHNldCBhcyBuZXcgdGFyZ2V0XG4gICAgICAgICogQHJldHVybiB0YXJnZXQgfHwgdGhpc1xuICAgICAgICAqL1xuICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uIHRhcmdldChfdGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKF90YXJnZXQgJiYgX3RhcmdldCBpbnN0YW5jZW9mIFNWRy5FbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXQgPSBfdGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gcmV0dXJucyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gYXQgYSBnaXZlbiB0aW1lXG4gICAgICAgIHRpbWVUb0Fic1BvczogZnVuY3Rpb24gdGltZVRvQWJzUG9zKHRpbWVzdGFtcCkge1xuICAgICAgICAgIHJldHVybiAodGltZXN0YW1wIC0gdGhpcy5zaXR1YXRpb24uc3RhcnQpIC8gKHRoaXMuc2l0dWF0aW9uLmR1cmF0aW9uIC8gdGhpcy5fc3BlZWQpO1xuICAgICAgICB9LFxuICAgICAgICAvLyByZXR1cm5zIHRoZSB0aW1lc3RhbXAgZnJvbSBhIGdpdmVuIGFic29sdXRlIHBvc2l0b25cbiAgICAgICAgYWJzUG9zVG9UaW1lOiBmdW5jdGlvbiBhYnNQb3NUb1RpbWUoYWJzUG9zKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2l0dWF0aW9uLmR1cmF0aW9uIC8gdGhpcy5fc3BlZWQgKiBhYnNQb3MgKyB0aGlzLnNpdHVhdGlvbi5zdGFydDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc3RhcnRzIHRoZSBhbmltYXRpb25sb29wXG4gICAgICAgIHN0YXJ0QW5pbUZyYW1lOiBmdW5jdGlvbiBzdGFydEFuaW1GcmFtZSgpIHtcbiAgICAgICAgICB0aGlzLnN0b3BBbmltRnJhbWUoKTtcbiAgICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBjYW5jZWxzIHRoZSBhbmltYXRpb25mcmFtZVxuICAgICAgICBzdG9wQW5pbUZyYW1lOiBmdW5jdGlvbiBzdG9wQW5pbUZyYW1lKCkge1xuICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8ga2lja3Mgb2ZmIHRoZSBhbmltYXRpb24gLSBvbmx5IGRvZXMgc29tZXRoaW5nIHdoZW4gdGhlIHF1ZXVlIGlzIGN1cnJlbnRseSBub3QgYWN0aXZlIGFuZCBhdCBsZWFzdCBvbmUgc2l0dWF0aW9uIGlzIHNldFxuICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgICAgLy8gZG9udCBzdGFydCBpZiBhbHJlYWR5IHN0YXJ0ZWRcbiAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlICYmIHRoaXMuc2l0dWF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q3VycmVudCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBzdGFydCB0aGUgY3VycmVudCBzaXR1YXRpb25cbiAgICAgICAgc3RhcnRDdXJyZW50OiBmdW5jdGlvbiBzdGFydEN1cnJlbnQoKSB7XG4gICAgICAgICAgdGhpcy5zaXR1YXRpb24uc3RhcnQgPSArbmV3IERhdGUoKSArIHRoaXMuc2l0dWF0aW9uLmRlbGF5IC8gdGhpcy5fc3BlZWQ7XG4gICAgICAgICAgdGhpcy5zaXR1YXRpb24uZmluaXNoID0gdGhpcy5zaXR1YXRpb24uc3RhcnQgKyB0aGlzLnNpdHVhdGlvbi5kdXJhdGlvbiAvIHRoaXMuX3NwZWVkO1xuICAgICAgICAgIHJldHVybiB0aGlzLmluaXRBbmltYXRpb25zKCkuc3RlcCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAqIGFkZHMgYSBmdW5jdGlvbiAvIFNpdHVhdGlvbiB0byB0aGUgYW5pbWF0aW9uIHF1ZXVlXG4gICAgICAgICogQHBhcmFtIGZuIGZ1bmN0aW9uIC8gc2l0dWF0aW9uIHRvIGFkZFxuICAgICAgICAqIEByZXR1cm4gdGhpc1xuICAgICAgICAqL1xuICAgICAgICBxdWV1ZTogZnVuY3Rpb24gcXVldWUoZm4pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nIHx8IGZuIGluc3RhbmNlb2YgU1ZHLlNpdHVhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zaXR1YXRpb25zLnB1c2goZm4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdGhpcy5zaXR1YXRpb24pIHRoaXMuc2l0dWF0aW9uID0gdGhpcy5zaXR1YXRpb25zLnNoaWZ0KCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogcHVsbHMgbmV4dCBlbGVtZW50IGZyb20gdGhlIHF1ZXVlIGFuZCBleGVjdXRlIGl0XG4gICAgICAgICogQHJldHVybiB0aGlzXG4gICAgICAgICovXG4gICAgICAgIGRlcXVldWU6IGZ1bmN0aW9uIGRlcXVldWUoKSB7XG4gICAgICAgICAgLy8gc3RvcCBjdXJyZW50IGFuaW1hdGlvblxuICAgICAgICAgIHRoaXMuc3RvcCgpOyAvLyBnZXQgbmV4dCBhbmltYXRpb24gZnJvbSBxdWV1ZVxuXG4gICAgICAgICAgdGhpcy5zaXR1YXRpb24gPSB0aGlzLnNpdHVhdGlvbnMuc2hpZnQoKTtcblxuICAgICAgICAgIGlmICh0aGlzLnNpdHVhdGlvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2l0dWF0aW9uIGluc3RhbmNlb2YgU1ZHLlNpdHVhdGlvbikge1xuICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBJZiBpdCBpcyBub3QgYSBTVkcuU2l0dWF0aW9uLCB0aGVuIGl0IGlzIGEgZnVuY3Rpb24sIHdlIGV4ZWN1dGUgaXRcbiAgICAgICAgICAgICAgdGhpcy5zaXR1YXRpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gdXBkYXRlcyBhbGwgYW5pbWF0aW9ucyB0byB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZWxlbWVudFxuICAgICAgICAvLyB0aGlzIGlzIGltcG9ydGFudCB3aGVuIG9uZSBwcm9wZXJ0eSBjb3VsZCBiZSBjaGFuZ2VkIGZyb20gYW5vdGhlciBwcm9wZXJ0eVxuICAgICAgICBpbml0QW5pbWF0aW9uczogZnVuY3Rpb24gaW5pdEFuaW1hdGlvbnMoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZTtcbiAgICAgICAgICB2YXIgcyA9IHRoaXMuc2l0dWF0aW9uO1xuICAgICAgICAgIGlmIChzLmluaXQpIHJldHVybiB0aGlzO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSBpbiBzLmFuaW1hdGlvbnMpIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IHRoaXMudGFyZ2V0KClbaV0oKTtcblxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgc291cmNlID0gW3NvdXJjZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzLmFuaW1hdGlvbnNbaV0pKSB7XG4gICAgICAgICAgICAgIHMuYW5pbWF0aW9uc1tpXSA9IFtzLmFuaW1hdGlvbnNbaV1dO1xuICAgICAgICAgICAgfSAvLyBpZihzLmFuaW1hdGlvbnNbaV0ubGVuZ3RoID4gc291cmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gIHNvdXJjZS5jb25jYXQgPSBzb3VyY2UuY29uY2F0KHMuYW5pbWF0aW9uc1tpXS5zbGljZShzb3VyY2UubGVuZ3RoLCBzLmFuaW1hdGlvbnNbaV0ubGVuZ3RoKSlcbiAgICAgICAgICAgIC8vIH1cblxuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gc291cmNlLmxlbmd0aDsgai0tOykge1xuICAgICAgICAgICAgICAvLyBUaGUgY29uZGl0aW9uIGlzIGJlY2F1c2Ugc29tZSBtZXRob2RzIHJldHVybiBhIG5vcm1hbCBudW1iZXIgaW5zdGVhZFxuICAgICAgICAgICAgICAvLyBvZiBhIFNWRy5OdW1iZXJcbiAgICAgICAgICAgICAgaWYgKHMuYW5pbWF0aW9uc1tpXVtqXSBpbnN0YW5jZW9mIFNWRy5OdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2Vbal0gPSBuZXcgU1ZHLk51bWJlcihzb3VyY2Vbal0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcy5hbmltYXRpb25zW2ldW2pdID0gc291cmNlW2pdLm1vcnBoKHMuYW5pbWF0aW9uc1tpXVtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh2YXIgaSBpbiBzLmF0dHJzKSB7XG4gICAgICAgICAgICBzLmF0dHJzW2ldID0gbmV3IFNWRy5Nb3JwaE9iaih0aGlzLnRhcmdldCgpLmF0dHIoaSksIHMuYXR0cnNbaV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIGkgaW4gcy5zdHlsZXMpIHtcbiAgICAgICAgICAgIHMuc3R5bGVzW2ldID0gbmV3IFNWRy5Nb3JwaE9iaih0aGlzLnRhcmdldCgpLnN0eWxlKGkpLCBzLnN0eWxlc1tpXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcy5pbml0aWFsVHJhbnNmb3JtYXRpb24gPSB0aGlzLnRhcmdldCgpLm1hdHJpeGlmeSgpO1xuICAgICAgICAgIHMuaW5pdCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFyUXVldWU6IGZ1bmN0aW9uIGNsZWFyUXVldWUoKSB7XG4gICAgICAgICAgdGhpcy5zaXR1YXRpb25zID0gW107XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFyQ3VycmVudDogZnVuY3Rpb24gY2xlYXJDdXJyZW50KCkge1xuICAgICAgICAgIHRoaXMuc2l0dWF0aW9uID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogc3RvcHMgdGhlIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAqIEBwYXJhbSBqdW1wVG9FbmQgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBjb21wbGV0ZSB0aGUgY3VycmVudCBhbmltYXRpb24gaW1tZWRpYXRlbHkuXG4gICAgICAgICogQHBhcmFtIGNsZWFyUXVldWUgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byByZW1vdmUgcXVldWVkIGFuaW1hdGlvbiBhcyB3ZWxsLlxuICAgICAgICAqIEByZXR1cm4gdGhpc1xuICAgICAgICAqL1xuICAgICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKGp1bXBUb0VuZCwgY2xlYXJRdWV1ZSkge1xuICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmFjdGl2ZTtcbiAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGNsZWFyUXVldWUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChqdW1wVG9FbmQgJiYgdGhpcy5zaXR1YXRpb24pIHtcbiAgICAgICAgICAgIC8vIGluaXRpYWxpemUgdGhlIHNpdHVhdGlvbiBpZiBpdCB3YXMgbm90XG4gICAgICAgICAgICAhYWN0aXZlICYmIHRoaXMuc3RhcnRDdXJyZW50KCk7XG4gICAgICAgICAgICB0aGlzLmF0RW5kKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5zdG9wQW5pbUZyYW1lKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJDdXJyZW50KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFmdGVyOiBmdW5jdGlvbiBhZnRlcihmbikge1xuICAgICAgICAgIHZhciBjID0gdGhpcy5sYXN0KCksXG4gICAgICAgICAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiB3cmFwcGVyKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmRldGFpbC5zaXR1YXRpb24gPT0gYykge1xuICAgICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGMpO1xuICAgICAgICAgICAgICB0aGlzLm9mZignZmluaXNoZWQuZngnLCB3cmFwcGVyKTsgLy8gcHJldmVudCBtZW1vcnkgbGVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB0aGlzLnRhcmdldCgpLm9uKCdmaW5pc2hlZC5meCcsIHdyYXBwZXIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jYWxsU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gYWRkcyBhIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuZXZlciBvbmUgYW5pbWF0aW9uIHN0ZXAgaXMgcGVyZm9ybWVkXG4gICAgICAgIGR1cmluZzogZnVuY3Rpb24gZHVyaW5nKGZuKSB7XG4gICAgICAgICAgdmFyIGMgPSB0aGlzLmxhc3QoKSxcbiAgICAgICAgICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoZSkge1xuICAgICAgICAgICAgaWYgKGUuZGV0YWlsLnNpdHVhdGlvbiA9PSBjKSB7XG4gICAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZS5kZXRhaWwucG9zLCBTVkcubW9ycGgoZS5kZXRhaWwucG9zKSwgZS5kZXRhaWwuZWFzZWQsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07IC8vIHNlZSBhYm92ZVxuXG5cbiAgICAgICAgICB0aGlzLnRhcmdldCgpLm9mZignZHVyaW5nLmZ4Jywgd3JhcHBlcikub24oJ2R1cmluZy5meCcsIHdyYXBwZXIpO1xuICAgICAgICAgIHRoaXMuYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5vZmYoJ2R1cmluZy5meCcsIHdyYXBwZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jYWxsU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gY2FsbHMgYWZ0ZXIgQUxMIGFuaW1hdGlvbnMgaW4gdGhlIHF1ZXVlIGFyZSBmaW5pc2hlZFxuICAgICAgICBhZnRlckFsbDogZnVuY3Rpb24gYWZ0ZXJBbGwoZm4pIHtcbiAgICAgICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoZSkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKCdhbGxmaW5pc2hlZC5meCcsIHdyYXBwZXIpO1xuICAgICAgICAgIH07IC8vIHNlZSBhYm92ZVxuXG5cbiAgICAgICAgICB0aGlzLnRhcmdldCgpLm9mZignYWxsZmluaXNoZWQuZngnLCB3cmFwcGVyKS5vbignYWxsZmluaXNoZWQuZngnLCB3cmFwcGVyKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbFN0YXJ0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3Q6IGZ1bmN0aW9uIGxhc3QoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2l0dWF0aW9ucy5sZW5ndGggPyB0aGlzLnNpdHVhdGlvbnNbdGhpcy5zaXR1YXRpb25zLmxlbmd0aCAtIDFdIDogdGhpcy5zaXR1YXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGFkZHMgb25lIHByb3BlcnR5IHRvIHRoZSBhbmltYXRpb25zXG4gICAgICAgIGFkZDogZnVuY3Rpb24gYWRkKG1ldGhvZCwgYXJncywgdHlwZSkge1xuICAgICAgICAgIHRoaXMubGFzdCgpW3R5cGUgfHwgJ2FuaW1hdGlvbnMnXVttZXRob2RdID0gYXJncztcbiAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbFN0YXJ0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIHBlcmZvcm0gb25lIHN0ZXAgb2YgdGhlIGFuaW1hdGlvblxuICAgICAgICAqICBAcGFyYW0gaWdub3JlVGltZSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBpZ25vcmUgdGltZSBhbmQgdXNlIHBvc2l0aW9uIGRpcmVjdGx5IG9yIHJlY2FsY3VsYXRlIHBvc2l0aW9uIGJhc2VkIG9uIHRpbWVcbiAgICAgICAgKiAgQHJldHVybiB0aGlzXG4gICAgICAgICovXG4gICAgICAgIHN0ZXA6IGZ1bmN0aW9uIHN0ZXAoaWdub3JlVGltZSkge1xuICAgICAgICAgIC8vIGNvbnZlcnQgY3VycmVudCB0aW1lIHRvIGFuIGFic29sdXRlIHBvc2l0aW9uXG4gICAgICAgICAgaWYgKCFpZ25vcmVUaW1lKSB0aGlzLmFic1BvcyA9IHRoaXMudGltZVRvQWJzUG9zKCtuZXcgRGF0ZSgpKTsgLy8gVGhpcyBwYXJ0IGNvbnZlcnQgYW4gYWJzb2x1dGUgcG9zaXRpb24gdG8gYSBwb3NpdGlvblxuXG4gICAgICAgICAgaWYgKHRoaXMuc2l0dWF0aW9uLmxvb3BzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIGFic1BvcywgYWJzUG9zSW50LCBsYXN0TG9vcDsgLy8gSWYgdGhlIGFic29sdXRlIHBvc2l0aW9uIGlzIGJlbG93IDAsIHdlIGp1c3QgdHJlYXQgaXQgYXMgaWYgaXQgd2FzIDBcblxuICAgICAgICAgICAgYWJzUG9zID0gTWF0aC5tYXgodGhpcy5hYnNQb3MsIDApO1xuICAgICAgICAgICAgYWJzUG9zSW50ID0gTWF0aC5mbG9vcihhYnNQb3MpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zaXR1YXRpb24ubG9vcHMgPT09IHRydWUgfHwgYWJzUG9zSW50IDwgdGhpcy5zaXR1YXRpb24ubG9vcHMpIHtcbiAgICAgICAgICAgICAgdGhpcy5wb3MgPSBhYnNQb3MgLSBhYnNQb3NJbnQ7XG4gICAgICAgICAgICAgIGxhc3RMb29wID0gdGhpcy5zaXR1YXRpb24ubG9vcDtcbiAgICAgICAgICAgICAgdGhpcy5zaXR1YXRpb24ubG9vcCA9IGFic1Bvc0ludDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuYWJzUG9zID0gdGhpcy5zaXR1YXRpb24ubG9vcHM7XG4gICAgICAgICAgICAgIHRoaXMucG9zID0gMTsgLy8gVGhlIC0xIGhlcmUgaXMgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIHRvZ2dsZSByZXZlcnNlZCB3aGVuIGFsbCB0aGUgbG9vcHMgaGF2ZSBiZWVuIGNvbXBsZXRlZFxuXG4gICAgICAgICAgICAgIGxhc3RMb29wID0gdGhpcy5zaXR1YXRpb24ubG9vcCAtIDE7XG4gICAgICAgICAgICAgIHRoaXMuc2l0dWF0aW9uLmxvb3AgPSB0aGlzLnNpdHVhdGlvbi5sb29wcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc2l0dWF0aW9uLnJldmVyc2luZykge1xuICAgICAgICAgICAgICAvLyBUb2dnbGUgcmV2ZXJzZWQgaWYgYW4gb2RkIG51bWJlciBvZiBsb29wcyBhcyBvY2N1cmVkIHNpbmNlIHRoZSBsYXN0IGNhbGwgb2Ygc3RlcFxuICAgICAgICAgICAgICB0aGlzLnNpdHVhdGlvbi5yZXZlcnNlZCA9IHRoaXMuc2l0dWF0aW9uLnJldmVyc2VkICE9IEJvb2xlYW4oKHRoaXMuc2l0dWF0aW9uLmxvb3AgLSBsYXN0TG9vcCkgJSAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGxvb3AsIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBtdXN0IG5vdCBiZSBhYm92ZSAxXG4gICAgICAgICAgICB0aGlzLmFic1BvcyA9IE1hdGgubWluKHRoaXMuYWJzUG9zLCAxKTtcbiAgICAgICAgICAgIHRoaXMucG9zID0gdGhpcy5hYnNQb3M7XG4gICAgICAgICAgfSAvLyB3aGlsZSB0aGUgYWJzb2x1dGUgcG9zaXRpb24gY2FuIGJlIGJlbG93IDAsIHRoZSBwb3NpdGlvbiBtdXN0IG5vdCBiZSBiZWxvdyAwXG5cblxuICAgICAgICAgIGlmICh0aGlzLnBvcyA8IDApIHRoaXMucG9zID0gMDtcbiAgICAgICAgICBpZiAodGhpcy5zaXR1YXRpb24ucmV2ZXJzZWQpIHRoaXMucG9zID0gMSAtIHRoaXMucG9zOyAvLyBhcHBseSBlYXNpbmdcblxuICAgICAgICAgIHZhciBlYXNlZCA9IHRoaXMuc2l0dWF0aW9uLmVhc2UodGhpcy5wb3MpOyAvLyBjYWxsIG9uY2UtY2FsbGJhY2tzXG5cbiAgICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuc2l0dWF0aW9uLm9uY2UpIHtcbiAgICAgICAgICAgIGlmIChpID4gdGhpcy5sYXN0UG9zICYmIGkgPD0gZWFzZWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaXR1YXRpb24ub25jZVtpXS5jYWxsKHRoaXMudGFyZ2V0KCksIHRoaXMucG9zLCBlYXNlZCk7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNpdHVhdGlvbi5vbmNlW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gZmlyZSBkdXJpbmcgY2FsbGJhY2sgd2l0aCBwb3NpdGlvbiwgZWFzZWQgcG9zaXRpb24gYW5kIGN1cnJlbnQgc2l0dWF0aW9uIGFzIHBhcmFtZXRlclxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHRoaXMudGFyZ2V0KCkuZmlyZSgnZHVyaW5nJywge1xuICAgICAgICAgICAgcG9zOiB0aGlzLnBvcyxcbiAgICAgICAgICAgIGVhc2VkOiBlYXNlZCxcbiAgICAgICAgICAgIGZ4OiB0aGlzLFxuICAgICAgICAgICAgc2l0dWF0aW9uOiB0aGlzLnNpdHVhdGlvblxuICAgICAgICAgIH0pOyAvLyB0aGUgdXNlciBtYXkgY2FsbCBzdG9wIG9yIGZpbmlzaCBpbiB0aGUgZHVyaW5nIGNhbGxiYWNrXG4gICAgICAgICAgLy8gc28gbWFrZSBzdXJlIHRoYXQgd2Ugc3RpbGwgaGF2ZSBhIHZhbGlkIHNpdHVhdGlvblxuXG4gICAgICAgICAgaWYgKCF0aGlzLnNpdHVhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSAvLyBhcHBseSB0aGUgYWN0dWFsIGFuaW1hdGlvbiB0byBldmVyeSBwcm9wZXJ0eVxuXG5cbiAgICAgICAgICB0aGlzLmVhY2hBdCgpOyAvLyBkbyBmaW5hbCBjb2RlIHdoZW4gc2l0dWF0aW9uIGlzIGZpbmlzaGVkXG5cbiAgICAgICAgICBpZiAodGhpcy5wb3MgPT0gMSAmJiAhdGhpcy5zaXR1YXRpb24ucmV2ZXJzZWQgfHwgdGhpcy5zaXR1YXRpb24ucmV2ZXJzZWQgJiYgdGhpcy5wb3MgPT0gMCkge1xuICAgICAgICAgICAgLy8gc3RvcCBhbmltYXRpb24gY2FsbGJhY2tcbiAgICAgICAgICAgIHRoaXMuc3RvcEFuaW1GcmFtZSgpOyAvLyBmaXJlIGZpbmlzaGVkIGNhbGxiYWNrIHdpdGggY3VycmVudCBzaXR1YXRpb24gYXMgcGFyYW1ldGVyXG5cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0KCkuZmlyZSgnZmluaXNoZWQnLCB7XG4gICAgICAgICAgICAgIGZ4OiB0aGlzLFxuICAgICAgICAgICAgICBzaXR1YXRpb246IHRoaXMuc2l0dWF0aW9uXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnNpdHVhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHRoaXMudGFyZ2V0KCkuZmlyZSgnYWxsZmluaXNoZWQnKTsgLy8gUmVjaGVjayB0aGUgbGVuZ3RoIHNpbmNlIHRoZSB1c2VyIG1heSBjYWxsIGFuaW1hdGUgaW4gdGhlIGFmdGVyQWxsIGNhbGxiYWNrXG5cbiAgICAgICAgICAgICAgaWYgKCF0aGlzLnNpdHVhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQoKS5vZmYoJy5meCcpOyAvLyB0aGVyZSBzaG91bGRudCBiZSBhbnkgYmluZGluZyBsZWZ0LCBidXQgdG8gbWFrZSBzdXJlLi4uXG5cbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIHN0YXJ0IG5leHQgYW5pbWF0aW9uXG5cblxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB0aGlzLmRlcXVldWUoKTtlbHNlIHRoaXMuY2xlYXJDdXJyZW50KCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5wYXVzZWQgJiYgdGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIC8vIHdlIGNvbnRpbnVlIGFuaW1hdGluZyB3aGVuIHdlIGFyZSBub3QgYXQgdGhlIGVuZFxuICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1GcmFtZSgpO1xuICAgICAgICAgIH0gLy8gc2F2ZSBsYXN0IGVhc2VkIHBvc2l0aW9uIGZvciBvbmNlIGNhbGxiYWNrIHRyaWdnZXJpbmdcblxuXG4gICAgICAgICAgdGhpcy5sYXN0UG9zID0gZWFzZWQ7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGNhbGN1bGF0ZXMgdGhlIHN0ZXAgZm9yIGV2ZXJ5IHByb3BlcnR5IGFuZCBjYWxscyBibG9jayB3aXRoIGl0XG4gICAgICAgIGVhY2hBdDogZnVuY3Rpb24gZWFjaEF0KCkge1xuICAgICAgICAgIHZhciBsZW4sXG4gICAgICAgICAgICAgIGF0LFxuICAgICAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQoKSxcbiAgICAgICAgICAgICAgcyA9IHRoaXMuc2l0dWF0aW9uOyAvLyBhcHBseSBhbmltYXRpb25zIHdoaWNoIGNhbiBiZSBjYWxsZWQgdHJvdWdoIGEgbWV0aG9kXG5cbiAgICAgICAgICBmb3IgKHZhciBpIGluIHMuYW5pbWF0aW9ucykge1xuICAgICAgICAgICAgYXQgPSBbXS5jb25jYXQocy5hbmltYXRpb25zW2ldKS5tYXAoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZWwgIT09ICdzdHJpbmcnICYmIGVsLmF0ID8gZWwuYXQocy5lYXNlKHNlbGYucG9zKSwgc2VsZi5wb3MpIDogZWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRhcmdldFtpXS5hcHBseSh0YXJnZXQsIGF0KTtcbiAgICAgICAgICB9IC8vIGFwcGx5IGFuaW1hdGlvbiB3aGljaCBoYXMgdG8gYmUgYXBwbGllZCB3aXRoIGF0dHIoKVxuXG5cbiAgICAgICAgICBmb3IgKHZhciBpIGluIHMuYXR0cnMpIHtcbiAgICAgICAgICAgIGF0ID0gW2ldLmNvbmNhdChzLmF0dHJzW2ldKS5tYXAoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZWwgIT09ICdzdHJpbmcnICYmIGVsLmF0ID8gZWwuYXQocy5lYXNlKHNlbGYucG9zKSwgc2VsZi5wb3MpIDogZWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRhcmdldC5hdHRyLmFwcGx5KHRhcmdldCwgYXQpO1xuICAgICAgICAgIH0gLy8gYXBwbHkgYW5pbWF0aW9uIHdoaWNoIGhhcyB0byBiZSBhcHBsaWVkIHdpdGggc3R5bGUoKVxuXG5cbiAgICAgICAgICBmb3IgKHZhciBpIGluIHMuc3R5bGVzKSB7XG4gICAgICAgICAgICBhdCA9IFtpXS5jb25jYXQocy5zdHlsZXNbaV0pLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBlbCAhPT0gJ3N0cmluZycgJiYgZWwuYXQgPyBlbC5hdChzLmVhc2Uoc2VsZi5wb3MpLCBzZWxmLnBvcykgOiBlbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLmFwcGx5KHRhcmdldCwgYXQpO1xuICAgICAgICAgIH0gLy8gYW5pbWF0ZSBpbml0aWFsVHJhbnNmb3JtYXRpb24gd2hpY2ggaGFzIHRvIGJlIGNoYWluZWRcblxuXG4gICAgICAgICAgaWYgKHMudHJhbnNmb3Jtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGdldCBpbml0aWFsIGluaXRpYWxUcmFuc2Zvcm1hdGlvblxuICAgICAgICAgICAgYXQgPSBzLmluaXRpYWxUcmFuc2Zvcm1hdGlvbjtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHMudHJhbnNmb3Jtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAvLyBnZXQgbmV4dCB0cmFuc2Zvcm1hdGlvbiBpbiBjaGFpblxuICAgICAgICAgICAgICB2YXIgYSA9IHMudHJhbnNmb3Jtc1tpXTsgLy8gbXVsdGlwbHkgbWF0cml4IGRpcmVjdGx5XG5cbiAgICAgICAgICAgICAgaWYgKGEgaW5zdGFuY2VvZiBTVkcuTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGEucmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICAgIGF0ID0gYXQubXVsdGlwbHkobmV3IFNWRy5NYXRyaXgoKS5tb3JwaChhKS5hdChzLmVhc2UodGhpcy5wb3MpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGF0ID0gYXQubW9ycGgoYSkuYXQocy5lYXNlKHRoaXMucG9zKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH0gLy8gd2hlbiB0cmFuc2Zvcm1hdGlvbiBpcyBhYnNvbHV0ZSB3ZSBoYXZlIHRvIHJlc2V0IHRoZSBuZWVkZWQgdHJhbnNmb3JtYXRpb24gZmlyc3RcblxuXG4gICAgICAgICAgICAgIGlmICghYS5yZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGEudW5kbyhhdC5leHRyYWN0KCkpO1xuICAgICAgICAgICAgICB9IC8vIGFuZCByZWFwcGx5IGl0IGFmdGVyXG5cblxuICAgICAgICAgICAgICBhdCA9IGF0Lm11bHRpcGx5KGEuYXQocy5lYXNlKHRoaXMucG9zKSkpO1xuICAgICAgICAgICAgfSAvLyBzZXQgbmV3IG1hdHJpeCBvbiBlbGVtZW50XG5cblxuICAgICAgICAgICAgdGFyZ2V0Lm1hdHJpeChhdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGFkZHMgYW4gb25jZS1jYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYXQgYSBzcGVjaWZpYyBwb3NpdGlvbiBhbmQgbmV2ZXIgYWdhaW5cbiAgICAgICAgb25jZTogZnVuY3Rpb24gb25jZShwb3MsIGZuLCBpc0Vhc2VkKSB7XG4gICAgICAgICAgdmFyIGMgPSB0aGlzLmxhc3QoKTtcbiAgICAgICAgICBpZiAoIWlzRWFzZWQpIHBvcyA9IGMuZWFzZShwb3MpO1xuICAgICAgICAgIGMub25jZVtwb3NdID0gZm47XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9jYWxsU3RhcnQ6IGZ1bmN0aW9uIF9jYWxsU3RhcnQoKSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgfS5iaW5kKHRoaXMpLCAwKTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBhcmVudDogU1ZHLkVsZW1lbnQsXG4gICAgICAvLyBBZGQgbWV0aG9kIHRvIHBhcmVudCBlbGVtZW50c1xuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIEdldCBmeCBtb2R1bGUgb3IgY3JlYXRlIGEgbmV3IG9uZSwgdGhlbiBhbmltYXRlIHdpdGggZ2l2ZW4gZHVyYXRpb24gYW5kIGVhc2VcbiAgICAgICAgYW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZShvLCBlYXNlLCBkZWxheSkge1xuICAgICAgICAgIHJldHVybiAodGhpcy5meCB8fCAodGhpcy5meCA9IG5ldyBTVkcuRlgodGhpcykpKS5hbmltYXRlKG8sIGVhc2UsIGRlbGF5KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVsYXk6IGZ1bmN0aW9uIGRlbGF5KF9kZWxheSkge1xuICAgICAgICAgIHJldHVybiAodGhpcy5meCB8fCAodGhpcy5meCA9IG5ldyBTVkcuRlgodGhpcykpKS5kZWxheShfZGVsYXkpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKGp1bXBUb0VuZCwgY2xlYXJRdWV1ZSkge1xuICAgICAgICAgIGlmICh0aGlzLmZ4KSB7XG4gICAgICAgICAgICB0aGlzLmZ4LnN0b3AoanVtcFRvRW5kLCBjbGVhclF1ZXVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZngpIHtcbiAgICAgICAgICAgIHRoaXMuZnguZmluaXNoKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTsgLy8gTW9ycGhPYmogaXMgdXNlZCB3aGVuZXZlciBubyBtb3JwaGFibGUgb2JqZWN0IGlzIGdpdmVuXG5cbiAgICBTVkcuTW9ycGhPYmogPSBTVkcuaW52ZW50KHtcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGZyb20sIHRvKSB7XG4gICAgICAgIC8vIHByZXBhcmUgY29sb3IgZm9yIG1vcnBoaW5nXG4gICAgICAgIGlmIChTVkcuQ29sb3IuaXNDb2xvcih0bykpIHJldHVybiBuZXcgU1ZHLkNvbG9yKGZyb20pLm1vcnBoKHRvKTsgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhIGxpc3Qgb2YgdmFsdWVzXG5cbiAgICAgICAgaWYgKFNWRy5yZWdleC5kZWxpbWl0ZXIudGVzdChmcm9tKSkge1xuICAgICAgICAgIC8vIHByZXBhcmUgcGF0aCBmb3IgbW9ycGhpbmdcbiAgICAgICAgICBpZiAoU1ZHLnJlZ2V4LnBhdGhMZXR0ZXJzLnRlc3QoZnJvbSkpIHJldHVybiBuZXcgU1ZHLlBhdGhBcnJheShmcm9tKS5tb3JwaCh0byk7IC8vIHByZXBhcmUgdmFsdWUgbGlzdCBmb3IgbW9ycGhpbmdcbiAgICAgICAgICBlbHNlIHJldHVybiBuZXcgU1ZHLkFycmF5KGZyb20pLm1vcnBoKHRvKTtcbiAgICAgICAgfSAvLyBwcmVwYXJlIG51bWJlciBmb3IgbW9ycGhpbmdcblxuXG4gICAgICAgIGlmIChTVkcucmVnZXgubnVtYmVyQW5kVW5pdC50ZXN0KHRvKSkgcmV0dXJuIG5ldyBTVkcuTnVtYmVyKGZyb20pLm1vcnBoKHRvKTsgLy8gcHJlcGFyZSBmb3IgcGxhaW4gbW9ycGhpbmdcblxuICAgICAgICB0aGlzLnZhbHVlID0gZnJvbTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IHRvO1xuICAgICAgfSxcbiAgICAgIGV4dGVuZDoge1xuICAgICAgICBhdDogZnVuY3Rpb24gYXQocG9zLCByZWFsKSB7XG4gICAgICAgICAgcmV0dXJuIHJlYWwgPCAxID8gdGhpcy52YWx1ZSA6IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIHZhbHVlT2Y6IGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuZXh0ZW5kKFNWRy5GWCwge1xuICAgICAgLy8gQWRkIGFuaW1hdGFibGUgYXR0cmlidXRlc1xuICAgICAgYXR0cjogZnVuY3Rpb24gYXR0cihhLCB2LCByZWxhdGl2ZSkge1xuICAgICAgICAvLyBhcHBseSBhdHRyaWJ1dGVzIGluZGl2aWR1YWxseVxuICAgICAgICBpZiAoX3R5cGVvZihhKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICAgICAgdGhpcy5hdHRyKGtleSwgYVtrZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hZGQoYSwgdiwgJ2F0dHJzJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBBZGQgYW5pbWF0YWJsZSBwbG90XG4gICAgICBwbG90OiBmdW5jdGlvbiBwbG90KGEsIGIsIGMsIGQpIHtcbiAgICAgICAgLy8gTGluZXMgY2FuIGJlIHBsb3R0ZWQgd2l0aCA0IGFyZ3VtZW50c1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGxvdChbYSwgYiwgYywgZF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKCdwbG90JywgbmV3ICh0aGlzLnRhcmdldCgpLm1vcnBoQXJyYXkpKGEpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuQm94ID0gU1ZHLmludmVudCh7XG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGlmIChfdHlwZW9mKHgpID09PSAnb2JqZWN0JyAmJiAhKHggaW5zdGFuY2VvZiBTVkcuRWxlbWVudCkpIHtcbiAgICAgICAgICAvLyBjaHJvbWVzIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBoYXMgbm8geCBhbmQgeSBwcm9wZXJ0eVxuICAgICAgICAgIHJldHVybiBTVkcuQm94LmNhbGwodGhpcywgeC5sZWZ0ICE9IG51bGwgPyB4LmxlZnQgOiB4LngsIHgudG9wICE9IG51bGwgPyB4LnRvcCA6IHgueSwgeC53aWR0aCwgeC5oZWlnaHQpO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gNCkge1xuICAgICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIH0gLy8gYWRkIGNlbnRlciwgcmlnaHQsIGJvdHRvbS4uLlxuXG5cbiAgICAgICAgZnVsbEJveCh0aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuQkJveCA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZVxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoZWxlbWVudCkge1xuICAgICAgICBTVkcuQm94LmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7IC8vIGdldCB2YWx1ZXMgaWYgZWxlbWVudCBpcyBnaXZlblxuXG4gICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU1ZHLkVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYm94OyAvLyB5ZXMgdGhpcyBpcyB1Z2x5LCBidXQgRmlyZWZveCBjYW4gYmUgYSBwYWluIHdoZW4gaXQgY29tZXMgdG8gZWxlbWVudHMgdGhhdCBhcmUgbm90IHlldCByZW5kZXJlZFxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgSUUgLSBpdCBkb2VzIG5vdCBzdXBwb3J0IGNvbnRhaW5zKCkgZm9yIHRvcC1sZXZlbCBTVkdzXG4gICAgICAgICAgICAgIHZhciB0b3BQYXJlbnQgPSBlbGVtZW50Lm5vZGU7XG5cbiAgICAgICAgICAgICAgd2hpbGUgKHRvcFBhcmVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgdG9wUGFyZW50ID0gdG9wUGFyZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodG9wUGFyZW50ICE9IGRvY3VtZW50KSB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnQgbm90IGluIHRoZSBkb20nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7fSAvLyB0aGUgZWxlbWVudCBpcyBOT1QgaW4gdGhlIGRvbSwgdGhyb3cgZXJyb3JcbiAgICAgICAgICAgIC8vIGRpc2FibGluZyB0aGUgY2hlY2sgYmVsb3cgd2hpY2ggZml4ZXMgaXNzdWUgIzc2XG4gICAgICAgICAgICAvLyBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhlbGVtZW50Lm5vZGUpKSB0aHJvdyBuZXcgRXhjZXB0aW9uKCdFbGVtZW50IG5vdCBpbiB0aGUgZG9tJylcbiAgICAgICAgICAgIC8vIGZpbmQgbmF0aXZlIGJib3hcblxuXG4gICAgICAgICAgICBib3ggPSBlbGVtZW50Lm5vZGUuZ2V0QkJveCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU1ZHLlNoYXBlKSB7XG4gICAgICAgICAgICAgIGlmICghU1ZHLnBhcnNlci5kcmF3KSB7XG4gICAgICAgICAgICAgICAgLy8gZml4ZXMgYXBleGNoYXJ0cy92dWUtYXBleGNoYXJ0cyAjMTRcbiAgICAgICAgICAgICAgICBTVkcucHJlcGFyZSgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGNsb25lID0gZWxlbWVudC5jbG9uZShTVkcucGFyc2VyLmRyYXcuaW5zdGFuY2UpLnNob3coKTtcbiAgICAgICAgICAgICAgYm94ID0gY2xvbmUubm9kZS5nZXRCQm94KCk7XG4gICAgICAgICAgICAgIGNsb25lLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYm94ID0ge1xuICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubm9kZS5jbGllbnRMZWZ0LFxuICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQubm9kZS5jbGllbnRUb3AsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGVsZW1lbnQubm9kZS5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGVsZW1lbnQubm9kZS5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBTVkcuQm94LmNhbGwodGhpcywgYm94KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIERlZmluZSBhbmNlc3RvclxuICAgICAgaW5oZXJpdDogU1ZHLkJveCxcbiAgICAgIC8vIERlZmluZSBQYXJlbnRcbiAgICAgIHBhcmVudDogU1ZHLkVsZW1lbnQsXG4gICAgICAvLyBDb25zdHJ1Y3RvclxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIEdldCBib3VuZGluZyBib3hcbiAgICAgICAgYmJveDogZnVuY3Rpb24gYmJveCgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFNWRy5CQm94KHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLkJCb3gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU1ZHLkJCb3g7XG4gICAgU1ZHLk1hdHJpeCA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZVxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoc291cmNlKSB7XG4gICAgICAgIHZhciBiYXNlID0gYXJyYXlUb01hdHJpeChbMSwgMCwgMCwgMSwgMCwgMF0pOyAvLyBlbnN1cmUgc291cmNlIGFzIG9iamVjdFxuXG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZSBpbnN0YW5jZW9mIFNWRy5FbGVtZW50ID8gc291cmNlLm1hdHJpeGlmeSgpIDogdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgPyBhcnJheVRvTWF0cml4KHNvdXJjZS5zcGxpdChTVkcucmVnZXguZGVsaW1pdGVyKS5tYXAocGFyc2VGbG9hdCkpIDogYXJndW1lbnRzLmxlbmd0aCA9PSA2ID8gYXJyYXlUb01hdHJpeChbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpIDogQXJyYXkuaXNBcnJheShzb3VyY2UpID8gYXJyYXlUb01hdHJpeChzb3VyY2UpIDogX3R5cGVvZihzb3VyY2UpID09PSAnb2JqZWN0JyA/IHNvdXJjZSA6IGJhc2U7IC8vIG1lcmdlIHNvdXJjZVxuXG4gICAgICAgIGZvciAodmFyIGkgPSBhYmNkZWYubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICB0aGlzW2FiY2RlZltpXV0gPSBzb3VyY2VbYWJjZGVmW2ldXSAhPSBudWxsID8gc291cmNlW2FiY2RlZltpXV0gOiBiYXNlW2FiY2RlZltpXV07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBZGQgbWV0aG9kc1xuICAgICAgZXh0ZW5kOiB7XG4gICAgICAgIC8vIEV4dHJhY3QgaW5kaXZpZHVhbCB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgICAgZXh0cmFjdDogZnVuY3Rpb24gZXh0cmFjdCgpIHtcbiAgICAgICAgICAvLyBmaW5kIGRlbHRhIHRyYW5zZm9ybSBwb2ludHNcbiAgICAgICAgICB2YXIgcHggPSBkZWx0YVRyYW5zZm9ybVBvaW50KHRoaXMsIDAsIDEpLFxuICAgICAgICAgICAgICBweSA9IGRlbHRhVHJhbnNmb3JtUG9pbnQodGhpcywgMSwgMCksXG4gICAgICAgICAgICAgIHNrZXdYID0gMTgwIC8gTWF0aC5QSSAqIE1hdGguYXRhbjIocHgueSwgcHgueCkgLSA5MDtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gdHJhbnNsYXRpb25cbiAgICAgICAgICAgIHg6IHRoaXMuZSxcbiAgICAgICAgICAgIHk6IHRoaXMuZixcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkWDogKHRoaXMuZSAqIE1hdGguY29zKHNrZXdYICogTWF0aC5QSSAvIDE4MCkgKyB0aGlzLmYgKiBNYXRoLnNpbihza2V3WCAqIE1hdGguUEkgLyAxODApKSAvIE1hdGguc3FydCh0aGlzLmEgKiB0aGlzLmEgKyB0aGlzLmIgKiB0aGlzLmIpLFxuICAgICAgICAgICAgdHJhbnNmb3JtZWRZOiAodGhpcy5mICogTWF0aC5jb3Moc2tld1ggKiBNYXRoLlBJIC8gMTgwKSArIHRoaXMuZSAqIE1hdGguc2luKC1za2V3WCAqIE1hdGguUEkgLyAxODApKSAvIE1hdGguc3FydCh0aGlzLmMgKiB0aGlzLmMgKyB0aGlzLmQgKiB0aGlzLmQpLFxuICAgICAgICAgICAgLy8gcm90YXRpb25cbiAgICAgICAgICAgIHJvdGF0aW9uOiBza2V3WCxcbiAgICAgICAgICAgIGE6IHRoaXMuYSxcbiAgICAgICAgICAgIGI6IHRoaXMuYixcbiAgICAgICAgICAgIGM6IHRoaXMuYyxcbiAgICAgICAgICAgIGQ6IHRoaXMuZCxcbiAgICAgICAgICAgIGU6IHRoaXMuZSxcbiAgICAgICAgICAgIGY6IHRoaXMuZixcbiAgICAgICAgICAgIG1hdHJpeDogbmV3IFNWRy5NYXRyaXgodGhpcylcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvLyBDbG9uZSBtYXRyaXhcbiAgICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTW9ycGggb25lIG1hdHJpeCBpbnRvIGFub3RoZXJcbiAgICAgICAgbW9ycGg6IGZ1bmN0aW9uIG1vcnBoKG1hdHJpeCkge1xuICAgICAgICAgIC8vIHN0b3JlIG5ldyBkZXN0aW5hdGlvblxuICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU1ZHLk1hdHJpeChtYXRyaXgpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBNdWx0aXBsaWVzIGJ5IGdpdmVuIG1hdHJpeFxuICAgICAgICBtdWx0aXBseTogZnVuY3Rpb24gbXVsdGlwbHkobWF0cml4KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBTVkcuTWF0cml4KHRoaXMubmF0aXZlKCkubXVsdGlwbHkocGFyc2VNYXRyaXgobWF0cml4KS5uYXRpdmUoKSkpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBJbnZlcnNlcyBtYXRyaXhcbiAgICAgICAgaW52ZXJzZTogZnVuY3Rpb24gaW52ZXJzZSgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFNWRy5NYXRyaXgodGhpcy5uYXRpdmUoKS5pbnZlcnNlKCkpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBUcmFuc2xhdGUgbWF0cml4XG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gdHJhbnNsYXRlKHgsIHkpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFNWRy5NYXRyaXgodGhpcy5uYXRpdmUoKS50cmFuc2xhdGUoeCB8fCAwLCB5IHx8IDApKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ29udmVydCB0byBuYXRpdmUgU1ZHTWF0cml4XG4gICAgICAgIG5hdGl2ZTogZnVuY3Rpb24gbmF0aXZlKCkge1xuICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgbWF0cml4XG4gICAgICAgICAgdmFyIG1hdHJpeCA9IFNWRy5wYXJzZXIubmF0aXZlLmNyZWF0ZVNWR01hdHJpeCgpOyAvLyB1cGRhdGUgd2l0aCBjdXJyZW50IHZhbHVlc1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IGFiY2RlZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbWF0cml4W2FiY2RlZltpXV0gPSB0aGlzW2FiY2RlZltpXV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ29udmVydCBtYXRyaXggdG8gc3RyaW5nXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIG1hdHJpeCBkaXJlY3RseSwgYXZvaWQgdmFsdWVzIHRoYXQgYXJlIHRvbyBzbWFsbFxuICAgICAgICAgIHJldHVybiAnbWF0cml4KCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuYSkgKyAnLCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuYikgKyAnLCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuYykgKyAnLCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuZCkgKyAnLCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuZSkgKyAnLCcgKyBmbG9hdDMyU3RyaW5nKHRoaXMuZikgKyAnKSc7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBEZWZpbmUgcGFyZW50XG4gICAgICBwYXJlbnQ6IFNWRy5FbGVtZW50LFxuICAgICAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiAgICAgIGNvbnN0cnVjdDoge1xuICAgICAgICAvLyBHZXQgY3VycmVudCBtYXRyaXhcbiAgICAgICAgY3RtOiBmdW5jdGlvbiBjdG0oKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBTVkcuTWF0cml4KHRoaXMubm9kZS5nZXRDVE0oKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBjdXJyZW50IHNjcmVlbiBtYXRyaXhcbiAgICAgICAgc2NyZWVuQ1RNOiBmdW5jdGlvbiBzY3JlZW5DVE0oKSB7XG4gICAgICAgICAgLyogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM0NDUzN1xuICAgICAgICAgICAgIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgRkYgZG9lcyBub3QgcmV0dXJuIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICAgICAgICAgICBmb3IgdGhlIGlubmVyIGNvb3JkaW5hdGUgc3lzdGVtIHdoZW4gZ2V0U2NyZWVuQ1RNKCkgaXMgY2FsbGVkIG9uIG5lc3RlZCBzdmdzLlxuICAgICAgICAgICAgIEhvd2V2ZXIgYWxsIG90aGVyIEJyb3dzZXJzIGRvIHRoYXQgKi9cbiAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFNWRy5OZXN0ZWQpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gdGhpcy5yZWN0KDEsIDEpO1xuICAgICAgICAgICAgdmFyIG0gPSByZWN0Lm5vZGUuZ2V0U2NyZWVuQ1RNKCk7XG4gICAgICAgICAgICByZWN0LnJlbW92ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkcuTWF0cml4KG0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzLm5vZGUuZ2V0U2NyZWVuQ1RNKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlBvaW50ID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh4LCB5KSB7XG4gICAgICAgIHZhciBzb3VyY2UsXG4gICAgICAgICAgICBiYXNlID0ge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMFxuICAgICAgICB9OyAvLyBlbnN1cmUgc291cmNlIGFzIG9iamVjdFxuXG4gICAgICAgIHNvdXJjZSA9IEFycmF5LmlzQXJyYXkoeCkgPyB7XG4gICAgICAgICAgeDogeFswXSxcbiAgICAgICAgICB5OiB4WzFdXG4gICAgICAgIH0gOiBfdHlwZW9mKHgpID09PSAnb2JqZWN0JyA/IHtcbiAgICAgICAgICB4OiB4LngsXG4gICAgICAgICAgeTogeC55XG4gICAgICAgIH0gOiB4ICE9IG51bGwgPyB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5ICE9IG51bGwgPyB5IDogeFxuICAgICAgICB9IDogYmFzZTsgLy8gSWYgeSBoYXMgbm8gdmFsdWUsIHRoZW4geCBpcyB1c2VkIGhhcyBpdHMgdmFsdWVcbiAgICAgICAgLy8gbWVyZ2Ugc291cmNlXG5cbiAgICAgICAgdGhpcy54ID0gc291cmNlLng7XG4gICAgICAgIHRoaXMueSA9IHNvdXJjZS55O1xuICAgICAgfSxcbiAgICAgIC8vIEFkZCBtZXRob2RzXG4gICAgICBleHRlbmQ6IHtcbiAgICAgICAgLy8gQ2xvbmUgcG9pbnRcbiAgICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgU1ZHLlBvaW50KHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBNb3JwaCBvbmUgcG9pbnQgaW50byBhbm90aGVyXG4gICAgICAgIG1vcnBoOiBmdW5jdGlvbiBtb3JwaCh4LCB5KSB7XG4gICAgICAgICAgLy8gc3RvcmUgbmV3IGRlc3RpbmF0aW9uXG4gICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTVkcuUG9pbnQoeCwgeSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XG4gICAgICAvLyBHZXQgcG9pbnRcbiAgICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICAgIHJldHVybiBuZXcgU1ZHLlBvaW50KHgsIHkpLnRyYW5zZm9ybSh0aGlzLnNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xuICAgICAgLy8gU2V0IHN2ZyBlbGVtZW50IGF0dHJpYnV0ZVxuICAgICAgYXR0cjogZnVuY3Rpb24gYXR0cihhLCB2LCBuKSB7XG4gICAgICAgIC8vIGFjdCBhcyBmdWxsIGdldHRlclxuICAgICAgICBpZiAoYSA9PSBudWxsKSB7XG4gICAgICAgICAgLy8gZ2V0IGFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzXG4gICAgICAgICAgYSA9IHt9O1xuICAgICAgICAgIHYgPSB0aGlzLm5vZGUuYXR0cmlidXRlcztcblxuICAgICAgICAgIGZvciAodmFyIG4gPSB2Lmxlbmd0aCAtIDE7IG4gPj0gMDsgbi0tKSB7XG4gICAgICAgICAgICBhW3Zbbl0ubm9kZU5hbWVdID0gU1ZHLnJlZ2V4LmlzTnVtYmVyLnRlc3QodltuXS5ub2RlVmFsdWUpID8gcGFyc2VGbG9hdCh2W25dLm5vZGVWYWx1ZSkgOiB2W25dLm5vZGVWYWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKGEpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vIGFwcGx5IGV2ZXJ5IGF0dHJpYnV0ZSBpbmRpdmlkdWFsbHkgaWYgYW4gb2JqZWN0IGlzIHBhc3NlZFxuICAgICAgICAgIGZvciAodmFyIHZfIGluIGEpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cih2XywgYVt2X10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2ID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHZhbHVlXG4gICAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUF0dHJpYnV0ZShhKTtcbiAgICAgICAgfSBlbHNlIGlmICh2ID09IG51bGwpIHtcbiAgICAgICAgICAvLyBhY3QgYXMgYSBnZXR0ZXIgaWYgdGhlIGZpcnN0IGFuZCBvbmx5IGFyZ3VtZW50IGlzIG5vdCBhbiBvYmplY3RcbiAgICAgICAgICB2ID0gdGhpcy5ub2RlLmdldEF0dHJpYnV0ZShhKTtcbiAgICAgICAgICByZXR1cm4gdiA9PSBudWxsID8gU1ZHLmRlZmF1bHRzLmF0dHJzW2FdIDogU1ZHLnJlZ2V4LmlzTnVtYmVyLnRlc3QodikgPyBwYXJzZUZsb2F0KHYpIDogdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBCVUcgRklYOiBzb21lIGJyb3dzZXJzIHdpbGwgcmVuZGVyIGEgc3Ryb2tlIGlmIGEgY29sb3IgaXMgZ2l2ZW4gZXZlbiB0aG91Z2ggc3Ryb2tlIHdpZHRoIGlzIDBcbiAgICAgICAgICBpZiAoYSA9PSAnc3Ryb2tlLXdpZHRoJykge1xuICAgICAgICAgICAgdGhpcy5hdHRyKCdzdHJva2UnLCBwYXJzZUZsb2F0KHYpID4gMCA/IHRoaXMuX3N0cm9rZSA6IG51bGwpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYSA9PSAnc3Ryb2tlJykge1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlID0gdjtcbiAgICAgICAgICB9IC8vIGNvbnZlcnQgaW1hZ2UgZmlsbCBhbmQgc3Ryb2tlIHRvIHBhdHRlcm5zXG5cblxuICAgICAgICAgIGlmIChhID09ICdmaWxsJyB8fCBhID09ICdzdHJva2UnKSB7XG4gICAgICAgICAgICBpZiAoU1ZHLnJlZ2V4LmlzSW1hZ2UudGVzdCh2KSkge1xuICAgICAgICAgICAgICB2ID0gdGhpcy5kb2MoKS5kZWZzKCkuaW1hZ2UodiwgMCwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2IGluc3RhbmNlb2YgU1ZHLkltYWdlKSB7XG4gICAgICAgICAgICAgIHYgPSB0aGlzLmRvYygpLmRlZnMoKS5wYXR0ZXJuKDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCh2KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBlbnN1cmUgY29ycmVjdCBudW1lcmljIHZhbHVlcyAoYWxzbyBhY2NlcHRzIE5hTiBhbmQgSW5maW5pdHkpXG5cblxuICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHYgPSBuZXcgU1ZHLk51bWJlcih2KTtcbiAgICAgICAgICB9IC8vIGVuc3VyZSBmdWxsIGhleCBjb2xvclxuICAgICAgICAgIGVsc2UgaWYgKFNWRy5Db2xvci5pc0NvbG9yKHYpKSB7XG4gICAgICAgICAgICAgIHYgPSBuZXcgU1ZHLkNvbG9yKHYpO1xuICAgICAgICAgICAgfSAvLyBwYXJzZSBhcnJheSB2YWx1ZXNcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgICAgICAgICB2ID0gbmV3IFNWRy5BcnJheSh2KTtcbiAgICAgICAgICAgICAgfSAvLyBpZiB0aGUgcGFzc2VkIGF0dHJpYnV0ZSBpcyBsZWFkaW5nLi4uXG5cblxuICAgICAgICAgIGlmIChhID09ICdsZWFkaW5nJykge1xuICAgICAgICAgICAgLy8gLi4uIGNhbGwgdGhlIGxlYWRpbmcgbWV0aG9kIGluc3RlYWRcbiAgICAgICAgICAgIGlmICh0aGlzLmxlYWRpbmcpIHtcbiAgICAgICAgICAgICAgdGhpcy5sZWFkaW5nKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXQgZ2l2ZW4gYXR0cmlidXRlIG9uIG5vZGVcbiAgICAgICAgICAgIHR5cGVvZiBuID09PSAnc3RyaW5nJyA/IHRoaXMubm9kZS5zZXRBdHRyaWJ1dGVOUyhuLCBhLCB2LnRvU3RyaW5nKCkpIDogdGhpcy5ub2RlLnNldEF0dHJpYnV0ZShhLCB2LnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH0gLy8gcmVidWlsZCBpZiByZXF1aXJlZFxuXG5cbiAgICAgICAgICBpZiAodGhpcy5yZWJ1aWxkICYmIChhID09ICdmb250LXNpemUnIHx8IGEgPT0gJ3gnKSkge1xuICAgICAgICAgICAgdGhpcy5yZWJ1aWxkKGEsIHYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcbiAgICAgIC8vIEFkZCB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKG8sIHJlbGF0aXZlKSB7XG4gICAgICAgIC8vIGdldCB0YXJnZXQgaW4gY2FzZSBvZiB0aGUgZnggbW9kdWxlLCBvdGhlcndpc2UgcmVmZXJlbmNlIHRoaXNcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICBtYXRyaXg7XG4gICAvLyBhY3QgYXMgYSBnZXR0ZXJcblxuICAgICAgICBpZiAoX3R5cGVvZihvKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAvLyBnZXQgY3VycmVudCBtYXRyaXhcbiAgICAgICAgICBtYXRyaXggPSBuZXcgU1ZHLk1hdHJpeCh0YXJnZXQpLmV4dHJhY3QoKTtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdzdHJpbmcnID8gbWF0cml4W29dIDogbWF0cml4O1xuICAgICAgICB9IC8vIGdldCBjdXJyZW50IG1hdHJpeFxuXG5cbiAgICAgICAgbWF0cml4ID0gbmV3IFNWRy5NYXRyaXgodGFyZ2V0KTsgLy8gZW5zdXJlIHJlbGF0aXZlIGZsYWdcblxuICAgICAgICByZWxhdGl2ZSA9ICEhcmVsYXRpdmUgfHwgISFvLnJlbGF0aXZlOyAvLyBhY3Qgb24gbWF0cml4XG5cbiAgICAgICAgaWYgKG8uYSAhPSBudWxsKSB7XG4gICAgICAgICAgbWF0cml4ID0gcmVsYXRpdmUgLy8gcmVsYXRpdmVcbiAgICAgICAgICA/IG1hdHJpeC5tdWx0aXBseShuZXcgU1ZHLk1hdHJpeChvKSkgLy8gYWJzb2x1dGVcbiAgICAgICAgICA6IG5ldyBTVkcuTWF0cml4KG8pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cigndHJhbnNmb3JtJywgbWF0cml4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XG4gICAgICAvLyBSZXNldCBhbGwgdHJhbnNmb3JtYXRpb25zXG4gICAgICB1bnRyYW5zZm9ybTogZnVuY3Rpb24gdW50cmFuc2Zvcm0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsIG51bGwpO1xuICAgICAgfSxcbiAgICAgIC8vIG1lcmdlIHRoZSB3aG9sZSB0cmFuc2Zvcm1hdGlvbiBjaGFpbiBpbnRvIG9uZSBtYXRyaXggYW5kIHJldHVybnMgaXRcbiAgICAgIG1hdHJpeGlmeTogZnVuY3Rpb24gbWF0cml4aWZ5KCkge1xuICAgICAgICB2YXIgbWF0cml4ID0gKHRoaXMuYXR0cigndHJhbnNmb3JtJykgfHwgJycpLiAvLyBzcGxpdCB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgICAgc3BsaXQoU1ZHLnJlZ2V4LnRyYW5zZm9ybXMpLnNsaWNlKDAsIC0xKS5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgIC8vIGdlbmVyYXRlIGtleSA9PiB2YWx1ZSBwYWlyc1xuICAgICAgICAgIHZhciBrdiA9IHN0ci50cmltKCkuc3BsaXQoJygnKTtcbiAgICAgICAgICByZXR1cm4gW2t2WzBdLCBrdlsxXS5zcGxpdChTVkcucmVnZXguZGVsaW1pdGVyKS5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgICAgICAgICB9KV07XG4gICAgICAgIH0pIC8vIG1lcmdlIGV2ZXJ5IHRyYW5zZm9ybWF0aW9uIGludG8gb25lIG1hdHJpeFxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChtYXRyaXgsIHRyYW5zZm9ybSkge1xuICAgICAgICAgIGlmICh0cmFuc2Zvcm1bMF0gPT0gJ21hdHJpeCcpIHJldHVybiBtYXRyaXgubXVsdGlwbHkoYXJyYXlUb01hdHJpeCh0cmFuc2Zvcm1bMV0pKTtcbiAgICAgICAgICByZXR1cm4gbWF0cml4W3RyYW5zZm9ybVswXV0uYXBwbHkobWF0cml4LCB0cmFuc2Zvcm1bMV0pO1xuICAgICAgICB9LCBuZXcgU1ZHLk1hdHJpeCgpKTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICAgIH0sXG4gICAgICAvLyBhZGQgYW4gZWxlbWVudCB0byBhbm90aGVyIHBhcmVudCB3aXRob3V0IGNoYW5naW5nIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb24gdGhlIHNjcmVlblxuICAgICAgdG9QYXJlbnQ6IGZ1bmN0aW9uIHRvUGFyZW50KHBhcmVudCkge1xuICAgICAgICBpZiAodGhpcyA9PSBwYXJlbnQpIHJldHVybiB0aGlzO1xuICAgICAgICB2YXIgY3RtID0gdGhpcy5zY3JlZW5DVE0oKTtcbiAgICAgICAgdmFyIHBDdG0gPSBwYXJlbnQuc2NyZWVuQ1RNKCkuaW52ZXJzZSgpO1xuICAgICAgICB0aGlzLmFkZFRvKHBhcmVudCkudW50cmFuc2Zvcm0oKS50cmFuc2Zvcm0ocEN0bS5tdWx0aXBseShjdG0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgLy8gc2FtZSBhcyBhYm92ZSB3aXRoIHBhcmVudCBlcXVhbHMgcm9vdC1zdmdcbiAgICAgIHRvRG9jOiBmdW5jdGlvbiB0b0RvYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9QYXJlbnQodGhpcy5kb2MoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlRyYW5zZm9ybWF0aW9uID0gU1ZHLmludmVudCh7XG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShzb3VyY2UsIGludmVyc2VkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgaW52ZXJzZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXNbdGhpcy5hcmd1bWVudHNbaV1dID0gc291cmNlW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKHNvdXJjZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICB0aGlzW3RoaXMuYXJndW1lbnRzW2ldXSA9IHNvdXJjZVt0aGlzLmFyZ3VtZW50c1tpXV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnZlcnNlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpbnZlcnNlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuaW52ZXJzZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlRyYW5zbGF0ZSA9IFNWRy5pbnZlbnQoe1xuICAgICAgcGFyZW50OiBTVkcuTWF0cml4LFxuICAgICAgaW5oZXJpdDogU1ZHLlRyYW5zZm9ybWF0aW9uLFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoc291cmNlLCBpbnZlcnNlZCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICB9LFxuICAgICAgZXh0ZW5kOiB7XG4gICAgICAgIGFyZ3VtZW50czogWyd0cmFuc2Zvcm1lZFgnLCAndHJhbnNmb3JtZWRZJ10sXG4gICAgICAgIG1ldGhvZDogJ3RyYW5zbGF0ZSdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XG4gICAgICAvLyBEeW5hbWljIHN0eWxlIGdlbmVyYXRvclxuICAgICAgc3R5bGU6IGZ1bmN0aW9uIHN0eWxlKHMsIHYpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIC8vIGdldCBmdWxsIHN0eWxlXG4gICAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5zdHlsZS5jc3NUZXh0IHx8ICcnO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgLy8gYXBwbHkgZXZlcnkgc3R5bGUgaW5kaXZpZHVhbGx5IGlmIGFuIG9iamVjdCBpcyBwYXNzZWRcbiAgICAgICAgICBpZiAoX3R5cGVvZihzKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHZfIGluIHMpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdHlsZSh2Xywgc1t2X10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoU1ZHLnJlZ2V4LmlzQ3NzLnRlc3QocykpIHtcbiAgICAgICAgICAgIC8vIHBhcnNlIGNzcyBzdHJpbmdcbiAgICAgICAgICAgIHMgPSBzLnNwbGl0KC9cXHMqO1xccyovKSAvLyBmaWx0ZXIgb3V0IHN1ZmZpeCA7IGFuZCBzdHVmZiBsaWtlIDs7XG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIHJldHVybiAhIWU7XG4gICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGUuc3BsaXQoL1xccyo6XFxzKi8pO1xuICAgICAgICAgICAgfSk7IC8vIGFwcGx5IGV2ZXJ5IGRlZmluaXRpb24gaW5kaXZpZHVhbGx5XG5cbiAgICAgICAgICAgIHdoaWxlICh2ID0gcy5wb3AoKSkge1xuICAgICAgICAgICAgICB0aGlzLnN0eWxlKHZbMF0sIHZbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhY3QgYXMgYSBnZXR0ZXIgaWYgdGhlIGZpcnN0IGFuZCBvbmx5IGFyZ3VtZW50IGlzIG5vdCBhbiBvYmplY3RcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGUuc3R5bGVbY2FtZWxDYXNlKHMpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5ub2RlLnN0eWxlW2NhbWVsQ2FzZShzKV0gPSB2ID09PSBudWxsIHx8IFNWRy5yZWdleC5pc0JsYW5rLnRlc3QodikgPyAnJyA6IHY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuUGFyZW50ID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xuICAgICAgfSxcbiAgICAgIC8vIEluaGVyaXQgZnJvbVxuICAgICAgaW5oZXJpdDogU1ZHLkVsZW1lbnQsXG4gICAgICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuICAgICAgZXh0ZW5kOiB7XG4gICAgICAgIC8vIFJldHVybnMgYWxsIGNoaWxkIGVsZW1lbnRzXG4gICAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gU1ZHLnV0aWxzLm1hcChTVkcudXRpbHMuZmlsdGVyU1ZHRWxlbWVudHModGhpcy5ub2RlLmNoaWxkTm9kZXMpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFNWRy5hZG9wdChub2RlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQWRkIGdpdmVuIGVsZW1lbnQgYXQgYSBwb3NpdGlvblxuICAgICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChlbGVtZW50LCBpKSB7XG4gICAgICAgICAgaWYgKGkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGVsZW1lbnQubm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm5vZGUgIT0gdGhpcy5ub2RlLmNoaWxkTm9kZXNbaV0pIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudC5ub2RlLCB0aGlzLm5vZGUuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEJhc2ljYWxseSBkb2VzIHRoZSBzYW1lIGFzIGBhZGQoKWAgYnV0IHJldHVybnMgdGhlIGFkZGVkIGVsZW1lbnQgaW5zdGVhZFxuICAgICAgICBwdXQ6IGZ1bmN0aW9uIHB1dChlbGVtZW50LCBpKSB7XG4gICAgICAgICAgdGhpcy5hZGQoZWxlbWVudCwgaSk7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBhIGNoaWxkXG4gICAgICAgIGhhczogZnVuY3Rpb24gaGFzKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleChlbGVtZW50KSA+PSAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBHZXRzIGluZGV4IG9mIGdpdmVuIGVsZW1lbnRcbiAgICAgICAgaW5kZXg6IGZ1bmN0aW9uIGluZGV4KGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gW10uc2xpY2UuY2FsbCh0aGlzLm5vZGUuY2hpbGROb2RlcykuaW5kZXhPZihlbGVtZW50Lm5vZGUpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBHZXQgYSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChpKSB7XG4gICAgICAgICAgcmV0dXJuIFNWRy5hZG9wdCh0aGlzLm5vZGUuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBmaXJzdCBjaGlsZFxuICAgICAgICBmaXJzdDogZnVuY3Rpb24gZmlyc3QoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApO1xuICAgICAgICB9LFxuICAgICAgICAvLyBHZXQgdGhlIGxhc3QgY2hpbGRcbiAgICAgICAgbGFzdDogZnVuY3Rpb24gbGFzdCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5ub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEl0ZXJhdGVzIG92ZXIgYWxsIGNoaWxkcmVuIGFuZCBpbnZva2VzIGEgZ2l2ZW4gYmxvY2tcbiAgICAgICAgZWFjaDogZnVuY3Rpb24gZWFjaChibG9jaywgZGVlcCkge1xuICAgICAgICAgIHZhciBpbCxcbiAgICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW5baV0gaW5zdGFuY2VvZiBTVkcuRWxlbWVudCkge1xuICAgICAgICAgICAgICBibG9jay5hcHBseShjaGlsZHJlbltpXSwgW2ksIGNoaWxkcmVuXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWVwICYmIGNoaWxkcmVuW2ldIGluc3RhbmNlb2YgU1ZHLkNvbnRhaW5lcikge1xuICAgICAgICAgICAgICBjaGlsZHJlbltpXS5lYWNoKGJsb2NrLCBkZWVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmVtb3ZlIGEgZ2l2ZW4gY2hpbGRcbiAgICAgICAgcmVtb3ZlRWxlbWVudDogZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQubm9kZSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJlbW92ZSBhbGwgZWxlbWVudHMgaW4gdGhpcyBjb250YWluZXJcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlblxuICAgICAgICAgIHdoaWxlICh0aGlzLm5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlLmxhc3RDaGlsZCk7XG4gICAgICAgICAgfSAvLyByZW1vdmUgZGVmcyByZWZlcmVuY2VcblxuXG4gICAgICAgICAgZGVsZXRlIHRoaXMuX2RlZnM7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBkZWZzXG4gICAgICAgIGRlZnM6IGZ1bmN0aW9uIGRlZnMoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZG9jKCkuZGVmcygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLmV4dGVuZChTVkcuUGFyZW50LCB7XG4gICAgICB1bmdyb3VwOiBmdW5jdGlvbiB1bmdyb3VwKHBhcmVudCwgZGVwdGgpIHtcbiAgICAgICAgaWYgKGRlcHRoID09PSAwIHx8IHRoaXMgaW5zdGFuY2VvZiBTVkcuRGVmcyB8fCB0aGlzLm5vZGUgPT0gU1ZHLnBhcnNlci5kcmF3KSByZXR1cm4gdGhpcztcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8ICh0aGlzIGluc3RhbmNlb2YgU1ZHLkRvYyA/IHRoaXMgOiB0aGlzLnBhcmVudChTVkcuUGFyZW50KSk7XG4gICAgICAgIGRlcHRoID0gZGVwdGggfHwgSW5maW5pdHk7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBTVkcuRGVmcykgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBTVkcuUGFyZW50KSByZXR1cm4gdGhpcy51bmdyb3VwKHBhcmVudCwgZGVwdGggLSAxKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b1BhcmVudChwYXJlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ub2RlLmZpcnN0Q2hpbGQgfHwgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbihwYXJlbnQsIGRlcHRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZ3JvdXAocGFyZW50LCBkZXB0aCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLkNvbnRhaW5lciA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbGVtZW50KTtcbiAgICAgIH0sXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5QYXJlbnRcbiAgICB9KTtcbiAgICBTVkcuVmlld0JveCA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gRGVmaW5lIHBhcmVudFxuICAgICAgcGFyZW50OiBTVkcuQ29udGFpbmVyLFxuICAgICAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiAgICAgIGNvbnN0cnVjdDoge31cbiAgICB9KSAvLyBBZGQgZXZlbnRzIHRvIGVsZW1lbnRzXG4gICAgO1xuICAgIFsnY2xpY2snLCAnZGJsY2xpY2snLCAnbW91c2Vkb3duJywgJ21vdXNldXAnLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0JywgJ21vdXNlbW92ZScsIC8vICwgJ21vdXNlZW50ZXInIC0+IG5vdCBzdXBwb3J0ZWQgYnkgSUVcbiAgICAvLyAsICdtb3VzZWxlYXZlJyAtPiBub3Qgc3VwcG9ydGVkIGJ5IElFXG4gICAgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNobGVhdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gYWRkIGV2ZW50IHRvIFNWRy5FbGVtZW50XG4gICAgICBTVkcuRWxlbWVudC5wcm90b3R5cGVbZXZlbnRdID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgLy8gYmluZCBldmVudCB0byBlbGVtZW50IHJhdGhlciB0aGFuIGVsZW1lbnQgbm9kZVxuICAgICAgICBTVkcub24odGhpcy5ub2RlLCBldmVudCwgZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICB9KTsgLy8gSW5pdGlhbGl6ZSBsaXN0ZW5lcnMgc3RhY2tcblxuICAgIFNWRy5saXN0ZW5lcnMgPSBbXTtcbiAgICBTVkcuaGFuZGxlck1hcCA9IFtdO1xuICAgIFNWRy5saXN0ZW5lcklkID0gMDsgLy8gQWRkIGV2ZW50IGJpbmRlciBpbiB0aGUgU1ZHIG5hbWVzcGFjZVxuXG4gICAgU1ZHLm9uID0gZnVuY3Rpb24gKG5vZGUsIGV2ZW50LCBsaXN0ZW5lciwgYmluZGluZywgb3B0aW9ucykge1xuICAgICAgLy8gY3JlYXRlIGxpc3RlbmVyLCBnZXQgb2JqZWN0LWluZGV4XG4gICAgICB2YXIgbCA9IGxpc3RlbmVyLmJpbmQoYmluZGluZyB8fCBub2RlLmluc3RhbmNlIHx8IG5vZGUpLFxuICAgICAgICAgIGluZGV4ID0gKFNWRy5oYW5kbGVyTWFwLmluZGV4T2Yobm9kZSkgKyAxIHx8IFNWRy5oYW5kbGVyTWFwLnB1c2gobm9kZSkpIC0gMSxcbiAgICAgICAgICBldiA9IGV2ZW50LnNwbGl0KCcuJylbMF0sXG4gICAgICAgICAgbnMgPSBldmVudC5zcGxpdCgnLicpWzFdIHx8ICcqJzsgLy8gZW5zdXJlIHZhbGlkIG9iamVjdFxuXG4gICAgICBTVkcubGlzdGVuZXJzW2luZGV4XSA9IFNWRy5saXN0ZW5lcnNbaW5kZXhdIHx8IHt9O1xuICAgICAgU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdID0gU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdIHx8IHt9O1xuICAgICAgU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdW25zXSA9IFNWRy5saXN0ZW5lcnNbaW5kZXhdW2V2XVtuc10gfHwge307XG5cbiAgICAgIGlmICghbGlzdGVuZXIuX3N2Z2pzTGlzdGVuZXJJZCkge1xuICAgICAgICBsaXN0ZW5lci5fc3ZnanNMaXN0ZW5lcklkID0gKytTVkcubGlzdGVuZXJJZDtcbiAgICAgIH0gLy8gcmVmZXJlbmNlIGxpc3RlbmVyXG5cblxuICAgICAgU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdW25zXVtsaXN0ZW5lci5fc3ZnanNMaXN0ZW5lcklkXSA9IGw7IC8vIGFkZCBsaXN0ZW5lclxuXG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXYsIGwsIG9wdGlvbnMgfHwgZmFsc2UpO1xuICAgIH07IC8vIEFkZCBldmVudCB1bmJpbmRlciBpbiB0aGUgU1ZHIG5hbWVzcGFjZVxuXG5cbiAgICBTVkcub2ZmID0gZnVuY3Rpb24gKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGluZGV4ID0gU1ZHLmhhbmRsZXJNYXAuaW5kZXhPZihub2RlKSxcbiAgICAgICAgICBldiA9IGV2ZW50ICYmIGV2ZW50LnNwbGl0KCcuJylbMF0sXG4gICAgICAgICAgbnMgPSBldmVudCAmJiBldmVudC5zcGxpdCgnLicpWzFdLFxuICAgICAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgICAgaWYgKGluZGV4ID09IC0xKSByZXR1cm47XG5cbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSBsaXN0ZW5lciA9IGxpc3RlbmVyLl9zdmdqc0xpc3RlbmVySWQ7XG4gICAgICAgIGlmICghbGlzdGVuZXIpIHJldHVybjsgLy8gcmVtb3ZlIGxpc3RlbmVyIHJlZmVyZW5jZVxuXG4gICAgICAgIGlmIChTVkcubGlzdGVuZXJzW2luZGV4XVtldl0gJiYgU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdW25zIHx8ICcqJ10pIHtcbiAgICAgICAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIFNWRy5saXN0ZW5lcnNbaW5kZXhdW2V2XVtucyB8fCAnKiddW2xpc3RlbmVyXSwgZmFsc2UpO1xuICAgICAgICAgIGRlbGV0ZSBTVkcubGlzdGVuZXJzW2luZGV4XVtldl1bbnMgfHwgJyonXVtsaXN0ZW5lcl07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobnMgJiYgZXYpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIGEgbmFtZXNwYWNlZCBldmVudFxuICAgICAgICBpZiAoU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdICYmIFNWRy5saXN0ZW5lcnNbaW5kZXhdW2V2XVtuc10pIHtcbiAgICAgICAgICBmb3IgKHZhciBsaXN0ZW5lcl8gaW4gU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdW25zXSkge1xuICAgICAgICAgICAgU1ZHLm9mZihub2RlLCBbZXYsIG5zXS5qb2luKCcuJyksIGxpc3RlbmVyXyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVsZXRlIFNWRy5saXN0ZW5lcnNbaW5kZXhdW2V2XVtuc107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobnMpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIGEgc3BlY2lmaWMgbmFtZXNwYWNlXG4gICAgICAgIGZvciAodmFyIGV2ZW50XyBpbiBTVkcubGlzdGVuZXJzW2luZGV4XSkge1xuICAgICAgICAgIGZvciAodmFyIG5hbWVzcGFjZSBpbiBTVkcubGlzdGVuZXJzW2luZGV4XVtldmVudF9dKSB7XG4gICAgICAgICAgICBpZiAobnMgPT09IG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICBTVkcub2ZmKG5vZGUsIFtldmVudF8sIG5zXS5qb2luKCcuJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChldikge1xuICAgICAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50XG4gICAgICAgIGlmIChTVkcubGlzdGVuZXJzW2luZGV4XVtldl0pIHtcbiAgICAgICAgICBmb3IgKHZhciBuYW1lc3BhY2UgaW4gU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdKSB7XG4gICAgICAgICAgICBTVkcub2ZmKG5vZGUsIFtldiwgbmFtZXNwYWNlXS5qb2luKCcuJykpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlbGV0ZSBTVkcubGlzdGVuZXJzW2luZGV4XVtldl07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIGEgZ2l2ZW4gbm9kZVxuICAgICAgICBmb3IgKHZhciBldmVudF8gaW4gU1ZHLmxpc3RlbmVyc1tpbmRleF0pIHtcbiAgICAgICAgICBTVkcub2ZmKG5vZGUsIGV2ZW50Xyk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgU1ZHLmxpc3RlbmVyc1tpbmRleF07XG4gICAgICAgIGRlbGV0ZSBTVkcuaGFuZGxlck1hcFtpbmRleF07XG4gICAgICB9XG4gICAgfTsgLy9cblxuXG4gICAgU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xuICAgICAgLy8gQmluZCBnaXZlbiBldmVudCB0byBsaXN0ZW5lclxuICAgICAgb246IGZ1bmN0aW9uIG9uKGV2ZW50LCBsaXN0ZW5lciwgYmluZGluZywgb3B0aW9ucykge1xuICAgICAgICBTVkcub24odGhpcy5ub2RlLCBldmVudCwgbGlzdGVuZXIsIGJpbmRpbmcsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBVbmJpbmQgZXZlbnQgZnJvbSBsaXN0ZW5lclxuICAgICAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIFNWRy5vZmYodGhpcy5ub2RlLCBldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBGaXJlIGdpdmVuIGV2ZW50XG4gICAgICBmaXJlOiBmdW5jdGlvbiBmaXJlKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIC8vIERpc3BhdGNoIGV2ZW50XG4gICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudCkge1xuICAgICAgICAgIHRoaXMubm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm5vZGUuZGlzcGF0Y2hFdmVudChldmVudCA9IG5ldyBTVkcuQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICAgIGRldGFpbDogZGF0YSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ldmVudCA9IGV2ZW50O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBldmVudDogZnVuY3Rpb24gZXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuRGVmcyA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gICAgICBjcmVhdGU6ICdkZWZzJyxcbiAgICAgIC8vIEluaGVyaXQgZnJvbVxuICAgICAgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxuICAgIH0pO1xuICAgIFNWRy5HID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ2cnLFxuICAgICAgLy8gSW5oZXJpdCBmcm9tXG4gICAgICBpbmhlcml0OiBTVkcuQ29udGFpbmVyLFxuICAgICAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiAgICAgIGV4dGVuZDoge1xuICAgICAgICAvLyBNb3ZlIG92ZXIgeC1heGlzXG4gICAgICAgIHg6IGZ1bmN0aW9uIHgoX3gyKSB7XG4gICAgICAgICAgcmV0dXJuIF94MiA9PSBudWxsID8gdGhpcy50cmFuc2Zvcm0oJ3gnKSA6IHRoaXMudHJhbnNmb3JtKHtcbiAgICAgICAgICAgIHg6IF94MiAtIHRoaXMueCgpXG4gICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgZ3JvdXA6IGZ1bmN0aW9uIGdyb3VwKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkcoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuRG9jID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBlbnN1cmUgdGhlIHByZXNlbmNlIG9mIGEgZG9tIGVsZW1lbnRcbiAgICAgICAgICBlbGVtZW50ID0gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudCkgOiBlbGVtZW50OyAvLyBJZiB0aGUgdGFyZ2V0IGlzIGFuIHN2ZyBlbGVtZW50LCB1c2UgdGhhdCBlbGVtZW50IGFzIHRoZSBtYWluIHdyYXBwZXIuXG4gICAgICAgICAgLy8gVGhpcyBhbGxvd3Mgc3ZnLmpzIHRvIHdvcmsgd2l0aCBzdmcgZG9jdW1lbnRzIGFzIHdlbGwuXG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PSAnc3ZnJykge1xuICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgU1ZHLmNyZWF0ZSgnc3ZnJykpO1xuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgICAgICAgICAgdGhpcy5zaXplKCcxMDAlJywgJzEwMCUnKTtcbiAgICAgICAgICB9IC8vIHNldCBzdmcgZWxlbWVudCBhdHRyaWJ1dGVzIGFuZCBlbnN1cmUgZGVmcyBub2RlXG5cblxuICAgICAgICAgIHRoaXMubmFtZXNwYWNlKCkuZGVmcygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gSW5oZXJpdCBmcm9tXG4gICAgICBpbmhlcml0OiBTVkcuQ29udGFpbmVyLFxuICAgICAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiAgICAgIGV4dGVuZDoge1xuICAgICAgICAvLyBBZGQgbmFtZXNwYWNlc1xuICAgICAgICBuYW1lc3BhY2U6IGZ1bmN0aW9uIG5hbWVzcGFjZSgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyKHtcbiAgICAgICAgICAgIHhtbG5zOiBTVkcubnMsXG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4xJ1xuICAgICAgICAgIH0pLmF0dHIoJ3htbG5zOnhsaW5rJywgU1ZHLnhsaW5rLCBTVkcueG1sbnMpLmF0dHIoJ3htbG5zOnN2Z2pzJywgU1ZHLnN2Z2pzLCBTVkcueG1sbnMpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGRlZnMgZWxlbWVudFxuICAgICAgICBkZWZzOiBmdW5jdGlvbiBkZWZzKCkge1xuICAgICAgICAgIGlmICghdGhpcy5fZGVmcykge1xuICAgICAgICAgICAgdmFyIGRlZnM7IC8vIEZpbmQgb3IgY3JlYXRlIGEgZGVmcyBlbGVtZW50IGluIHRoaXMgaW5zdGFuY2VcblxuICAgICAgICAgICAgaWYgKGRlZnMgPSB0aGlzLm5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RlZnMnKVswXSkge1xuICAgICAgICAgICAgICB0aGlzLl9kZWZzID0gU1ZHLmFkb3B0KGRlZnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fZGVmcyA9IG5ldyBTVkcuRGVmcygpO1xuICAgICAgICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIGRlZnMgbm9kZSBpcyBhdCB0aGUgZW5kIG9mIHRoZSBzdGFja1xuXG5cbiAgICAgICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0aGlzLl9kZWZzLm5vZGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzLl9kZWZzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBjdXN0b20gcGFyZW50IG1ldGhvZFxuICAgICAgICBwYXJlbnQ6IGZ1bmN0aW9uIHBhcmVudCgpIHtcbiAgICAgICAgICBpZiAoIXRoaXMubm9kZS5wYXJlbnROb2RlIHx8IHRoaXMubm9kZS5wYXJlbnROb2RlLm5vZGVOYW1lID09ICcjZG9jdW1lbnQnKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJlbW92ZXMgdGhlIGRvYyBmcm9tIHRoZSBET01cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgaWYgKHRoaXMucGFyZW50KCkpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50KCkucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlblxuICAgICAgICAgIHdoaWxlICh0aGlzLm5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlLmxhc3RDaGlsZCk7XG4gICAgICAgICAgfSAvLyByZW1vdmUgZGVmcyByZWZlcmVuY2VcblxuXG4gICAgICAgICAgZGVsZXRlIHRoaXMuX2RlZnM7IC8vIGFkZCBiYWNrIHBhcnNlclxuXG4gICAgICAgICAgaWYgKFNWRy5wYXJzZXIuZHJhdyAmJiAhU1ZHLnBhcnNlci5kcmF3LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChTVkcucGFyc2VyLmRyYXcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUocGFyZW50KSB7XG4gICAgICAgICAgLy8gd3JpdGUgZG9tIGRhdGEgdG8gdGhlIGRvbSBzbyB0aGUgY2xvbmUgY2FuIHBpY2t1cCB0aGUgZGF0YVxuICAgICAgICAgIHRoaXMud3JpdGVEYXRhVG9Eb20oKTsgLy8gZ2V0IHJlZmVyZW5jZSB0byBub2RlXG5cbiAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZTsgLy8gY2xvbmUgZWxlbWVudCBhbmQgYXNzaWduIG5ldyBpZFxuXG4gICAgICAgICAgdmFyIGNsb25lID0gYXNzaWduTmV3SWQobm9kZS5jbG9uZU5vZGUodHJ1ZSkpOyAvLyBpbnNlcnQgdGhlIGNsb25lIGluIHRoZSBnaXZlbiBwYXJlbnQgb3IgYWZ0ZXIgbXlzZWxmXG5cbiAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAocGFyZW50Lm5vZGUgfHwgcGFyZW50KS5hcHBlbmRDaGlsZChjbG9uZS5ub2RlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjbG9uZS5ub2RlLCBub2RlLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTsgLy8gIyMjIFRoaXMgbW9kdWxlIGFkZHMgYmFja3dhcmQgLyBmb3J3YXJkIGZ1bmN0aW9uYWxpdHkgdG8gZWxlbWVudHMuXG4gICAgLy9cblxuICAgIFNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHsvLyBHZXQgYWxsIHNpYmxpbmdzLCBpbmNsdWRpbmcgbXlzZWxmXG4gICAgfSk7XG4gICAgU1ZHLkdyYWRpZW50ID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHR5cGUpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUodHlwZSArICdHcmFkaWVudCcpKTsgLy8gc3RvcmUgdHlwZVxuXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICB9LFxuICAgICAgLy8gSW5oZXJpdCBmcm9tXG4gICAgICBpbmhlcml0OiBTVkcuQ29udGFpbmVyLFxuICAgICAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiAgICAgIGV4dGVuZDoge1xuICAgICAgICAvLyBBZGQgYSBjb2xvciBzdG9wXG4gICAgICAgIGF0OiBmdW5jdGlvbiBhdChvZmZzZXQsIGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuU3RvcCgpKS51cGRhdGUob2Zmc2V0LCBjb2xvciwgb3BhY2l0eSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFVwZGF0ZSBncmFkaWVudFxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShibG9jaykge1xuICAgICAgICAgIC8vIHJlbW92ZSBhbGwgc3RvcHNcbiAgICAgICAgICB0aGlzLmNsZWFyKCk7IC8vIGludm9rZSBwYXNzZWQgYmxvY2tcblxuICAgICAgICAgIGlmICh0eXBlb2YgYmxvY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJldHVybiB0aGUgZmlsbCBpZFxuICAgICAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKCkge1xuICAgICAgICAgIHJldHVybiAndXJsKCMnICsgdGhpcy5pZCgpICsgJyknO1xuICAgICAgICB9LFxuICAgICAgICAvLyBBbGlhcyBzdHJpbmcgY29udmVydGlvbiB0byBmaWxsXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maWxsKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGN1c3RvbSBhdHRyIHRvIGhhbmRsZSB0cmFuc2Zvcm1cbiAgICAgICAgYXR0cjogZnVuY3Rpb24gYXR0cihhLCBiLCBjKSB7XG4gICAgICAgICAgaWYgKGEgPT0gJ3RyYW5zZm9ybScpIGEgPSAnZ3JhZGllbnRUcmFuc2Zvcm0nO1xuICAgICAgICAgIHJldHVybiBTVkcuQ29udGFpbmVyLnByb3RvdHlwZS5hdHRyLmNhbGwodGhpcywgYSwgYiwgYyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBncmFkaWVudCBlbGVtZW50IGluIGRlZnNcbiAgICAgICAgZ3JhZGllbnQ6IGZ1bmN0aW9uIGdyYWRpZW50KHR5cGUsIGJsb2NrKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLmdyYWRpZW50KHR5cGUsIGJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pOyAvLyBBZGQgYW5pbWF0YWJsZSBtZXRob2RzIHRvIGJvdGggZ3JhZGllbnQgYW5kIGZ4IG1vZHVsZVxuXG4gICAgU1ZHLmV4dGVuZChTVkcuR3JhZGllbnQsIFNWRy5GWCwge1xuICAgICAgLy8gRnJvbSBwb3NpdGlvblxuICAgICAgZnJvbTogZnVuY3Rpb24gZnJvbSh4LCB5KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdGFyZ2V0IHx8IHRoaXMpLnR5cGUgPT0gJ3JhZGlhbCcgPyB0aGlzLmF0dHIoe1xuICAgICAgICAgIGZ4OiBuZXcgU1ZHLk51bWJlcih4KSxcbiAgICAgICAgICBmeTogbmV3IFNWRy5OdW1iZXIoeSlcbiAgICAgICAgfSkgOiB0aGlzLmF0dHIoe1xuICAgICAgICAgIHgxOiBuZXcgU1ZHLk51bWJlcih4KSxcbiAgICAgICAgICB5MTogbmV3IFNWRy5OdW1iZXIoeSlcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgLy8gVG8gcG9zaXRpb25cbiAgICAgIHRvOiBmdW5jdGlvbiB0byh4LCB5KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdGFyZ2V0IHx8IHRoaXMpLnR5cGUgPT0gJ3JhZGlhbCcgPyB0aGlzLmF0dHIoe1xuICAgICAgICAgIGN4OiBuZXcgU1ZHLk51bWJlcih4KSxcbiAgICAgICAgICBjeTogbmV3IFNWRy5OdW1iZXIoeSlcbiAgICAgICAgfSkgOiB0aGlzLmF0dHIoe1xuICAgICAgICAgIHgyOiBuZXcgU1ZHLk51bWJlcih4KSxcbiAgICAgICAgICB5MjogbmV3IFNWRy5OdW1iZXIoeSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7IC8vIEJhc2UgZ3JhZGllbnQgZ2VuZXJhdGlvblxuXG4gICAgU1ZHLmV4dGVuZChTVkcuRGVmcywge1xuICAgICAgLy8gZGVmaW5lIGdyYWRpZW50XG4gICAgICBncmFkaWVudDogZnVuY3Rpb24gZ3JhZGllbnQodHlwZSwgYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuR3JhZGllbnQodHlwZSkpLnVwZGF0ZShibG9jayk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlN0b3AgPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemUgbm9kZVxuICAgICAgY3JlYXRlOiAnc3RvcCcsXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5FbGVtZW50LFxuICAgICAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiAgICAgIGV4dGVuZDoge1xuICAgICAgICAvLyBhZGQgY29sb3Igc3RvcHNcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUobykge1xuICAgICAgICAgIGlmICh0eXBlb2YgbyA9PT0gJ251bWJlcicgfHwgbyBpbnN0YW5jZW9mIFNWRy5OdW1iZXIpIHtcbiAgICAgICAgICAgIG8gPSB7XG4gICAgICAgICAgICAgIG9mZnNldDogYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgICBjb2xvcjogYXJndW1lbnRzWzFdLFxuICAgICAgICAgICAgICBvcGFjaXR5OiBhcmd1bWVudHNbMl1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSAvLyBzZXQgYXR0cmlidXRlc1xuXG5cbiAgICAgICAgICBpZiAoby5vcGFjaXR5ICE9IG51bGwpIHRoaXMuYXR0cignc3RvcC1vcGFjaXR5Jywgby5vcGFjaXR5KTtcbiAgICAgICAgICBpZiAoby5jb2xvciAhPSBudWxsKSB0aGlzLmF0dHIoJ3N0b3AtY29sb3InLCBvLmNvbG9yKTtcbiAgICAgICAgICBpZiAoby5vZmZzZXQgIT0gbnVsbCkgdGhpcy5hdHRyKCdvZmZzZXQnLCBuZXcgU1ZHLk51bWJlcihvLm9mZnNldCkpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlBhdHRlcm4gPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemUgbm9kZVxuICAgICAgY3JlYXRlOiAncGF0dGVybicsXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5Db250YWluZXIsXG4gICAgICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuICAgICAgZXh0ZW5kOiB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgZmlsbCBpZFxuICAgICAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKCkge1xuICAgICAgICAgIHJldHVybiAndXJsKCMnICsgdGhpcy5pZCgpICsgJyknO1xuICAgICAgICB9LFxuICAgICAgICAvLyBVcGRhdGUgcGF0dGVybiBieSByZWJ1aWxkaW5nXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGJsb2NrKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIGNvbnRlbnRcbiAgICAgICAgICB0aGlzLmNsZWFyKCk7IC8vIGludm9rZSBwYXNzZWQgYmxvY2tcblxuICAgICAgICAgIGlmICh0eXBlb2YgYmxvY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEFsaWFzIHN0cmluZyBjb252ZXJ0aW9uIHRvIGZpbGxcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gY3VzdG9tIGF0dHIgdG8gaGFuZGxlIHRyYW5zZm9ybVxuICAgICAgICBhdHRyOiBmdW5jdGlvbiBhdHRyKGEsIGIsIGMpIHtcbiAgICAgICAgICBpZiAoYSA9PSAndHJhbnNmb3JtJykgYSA9ICdwYXR0ZXJuVHJhbnNmb3JtJztcbiAgICAgICAgICByZXR1cm4gU1ZHLkNvbnRhaW5lci5wcm90b3R5cGUuYXR0ci5jYWxsKHRoaXMsIGEsIGIsIGMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiAgICAgIGNvbnN0cnVjdDoge1xuICAgICAgICAvLyBDcmVhdGUgcGF0dGVybiBlbGVtZW50IGluIGRlZnNcbiAgICAgICAgcGF0dGVybjogZnVuY3Rpb24gcGF0dGVybih3aWR0aCwgaGVpZ2h0LCBibG9jaykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRlZnMoKS5wYXR0ZXJuKHdpZHRoLCBoZWlnaHQsIGJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5leHRlbmQoU1ZHLkRlZnMsIHtcbiAgICAgIC8vIERlZmluZSBncmFkaWVudFxuICAgICAgcGF0dGVybjogZnVuY3Rpb24gcGF0dGVybih3aWR0aCwgaGVpZ2h0LCBibG9jaykge1xuICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5QYXR0ZXJuKCkpLnVwZGF0ZShibG9jaykuYXR0cih7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICBwYXR0ZXJuVW5pdHM6ICd1c2VyU3BhY2VPblVzZSdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlNoYXBlID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xuICAgICAgfSxcbiAgICAgIC8vIEluaGVyaXQgZnJvbVxuICAgICAgaW5oZXJpdDogU1ZHLkVsZW1lbnRcbiAgICB9KTtcbiAgICBTVkcuU3ltYm9sID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ3N5bWJvbCcsXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5Db250YWluZXIsXG4gICAgICBjb25zdHJ1Y3Q6IHtcbiAgICAgICAgLy8gY3JlYXRlIHN5bWJvbFxuICAgICAgICBzeW1ib2w6IGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5TeW1ib2woKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuVXNlID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ3VzZScsXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5TaGFwZSxcbiAgICAgIC8vIEFkZCBjbGFzcyBtZXRob2RzXG4gICAgICBleHRlbmQ6IHtcbiAgICAgICAgLy8gVXNlIGVsZW1lbnQgYXMgYSByZWZlcmVuY2VcbiAgICAgICAgZWxlbWVudDogZnVuY3Rpb24gZWxlbWVudChfZWxlbWVudCwgZmlsZSkge1xuICAgICAgICAgIC8vIFNldCBsaW5lZCBlbGVtZW50XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignaHJlZicsIChmaWxlIHx8ICcnKSArICcjJyArIF9lbGVtZW50LCBTVkcueGxpbmspO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiAgICAgIGNvbnN0cnVjdDoge1xuICAgICAgICAvLyBDcmVhdGUgYSB1c2UgZWxlbWVudFxuICAgICAgICB1c2U6IGZ1bmN0aW9uIHVzZShlbGVtZW50LCBmaWxlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuVXNlKCkpLmVsZW1lbnQoZWxlbWVudCwgZmlsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuUmVjdCA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gICAgICBjcmVhdGU6ICdyZWN0JyxcbiAgICAgIC8vIEluaGVyaXQgZnJvbVxuICAgICAgaW5oZXJpdDogU1ZHLlNoYXBlLFxuICAgICAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiAgICAgIGNvbnN0cnVjdDoge1xuICAgICAgICAvLyBDcmVhdGUgYSByZWN0IGVsZW1lbnRcbiAgICAgICAgcmVjdDogZnVuY3Rpb24gcmVjdCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuUmVjdCgpKS5zaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLkNpcmNsZSA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gICAgICBjcmVhdGU6ICdjaXJjbGUnLFxuICAgICAgLy8gSW5oZXJpdCBmcm9tXG4gICAgICBpbmhlcml0OiBTVkcuU2hhcGUsXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBjaXJjbGUgZWxlbWVudCwgYmFzZWQgb24gZWxsaXBzZVxuICAgICAgICBjaXJjbGU6IGZ1bmN0aW9uIGNpcmNsZShzaXplKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuQ2lyY2xlKCkpLnJ4KG5ldyBTVkcuTnVtYmVyKHNpemUpLmRpdmlkZSgyKSkubW92ZSgwLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5leHRlbmQoU1ZHLkNpcmNsZSwgU1ZHLkZYLCB7XG4gICAgICAvLyBSYWRpdXMgeCB2YWx1ZVxuICAgICAgcng6IGZ1bmN0aW9uIHJ4KF9yeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCdyJywgX3J4KTtcbiAgICAgIH0sXG4gICAgICAvLyBBbGlhcyByYWRpdXMgeCB2YWx1ZVxuICAgICAgcnk6IGZ1bmN0aW9uIHJ5KF9yeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yeChfcnkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5FbGxpcHNlID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ2VsbGlwc2UnLFxuICAgICAgLy8gSW5oZXJpdCBmcm9tXG4gICAgICBpbmhlcml0OiBTVkcuU2hhcGUsXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBhbiBlbGxpcHNlXG4gICAgICAgIGVsbGlwc2U6IGZ1bmN0aW9uIGVsbGlwc2Uod2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkVsbGlwc2UoKSkuc2l6ZSh3aWR0aCwgaGVpZ2h0KS5tb3ZlKDAsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLmV4dGVuZChTVkcuRWxsaXBzZSwgU1ZHLlJlY3QsIFNWRy5GWCwge1xuICAgICAgLy8gUmFkaXVzIHggdmFsdWVcbiAgICAgIHJ4OiBmdW5jdGlvbiByeChfcngyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3J4JywgX3J4Mik7XG4gICAgICB9LFxuICAgICAgLy8gUmFkaXVzIHkgdmFsdWVcbiAgICAgIHJ5OiBmdW5jdGlvbiByeShfcnkyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3J5JywgX3J5Mik7XG4gICAgICB9XG4gICAgfSk7IC8vIEFkZCBjb21tb24gbWV0aG9kXG5cbiAgICBTVkcuZXh0ZW5kKFNWRy5DaXJjbGUsIFNWRy5FbGxpcHNlLCB7XG4gICAgICAvLyBNb3ZlIG92ZXIgeC1heGlzXG4gICAgICB4OiBmdW5jdGlvbiB4KF94Mykge1xuICAgICAgICByZXR1cm4gX3gzID09IG51bGwgPyB0aGlzLmN4KCkgLSB0aGlzLnJ4KCkgOiB0aGlzLmN4KF94MyArIHRoaXMucngoKSk7XG4gICAgICB9LFxuICAgICAgLy8gTW92ZSBvdmVyIHktYXhpc1xuICAgICAgeTogZnVuY3Rpb24geShfeTIpIHtcbiAgICAgICAgcmV0dXJuIF95MiA9PSBudWxsID8gdGhpcy5jeSgpIC0gdGhpcy5yeSgpIDogdGhpcy5jeShfeTIgKyB0aGlzLnJ5KCkpO1xuICAgICAgfSxcbiAgICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeC1heGlzXG4gICAgICBjeDogZnVuY3Rpb24gY3goeCkge1xuICAgICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy5hdHRyKCdjeCcpIDogdGhpcy5hdHRyKCdjeCcsIHgpO1xuICAgICAgfSxcbiAgICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeS1heGlzXG4gICAgICBjeTogZnVuY3Rpb24gY3koeSkge1xuICAgICAgICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5hdHRyKCdjeScpIDogdGhpcy5hdHRyKCdjeScsIHkpO1xuICAgICAgfSxcbiAgICAgIC8vIFNldCB3aWR0aCBvZiBlbGVtZW50XG4gICAgICB3aWR0aDogZnVuY3Rpb24gd2lkdGgoX3dpZHRoMikge1xuICAgICAgICByZXR1cm4gX3dpZHRoMiA9PSBudWxsID8gdGhpcy5yeCgpICogMiA6IHRoaXMucngobmV3IFNWRy5OdW1iZXIoX3dpZHRoMikuZGl2aWRlKDIpKTtcbiAgICAgIH0sXG4gICAgICAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcbiAgICAgIGhlaWdodDogZnVuY3Rpb24gaGVpZ2h0KF9oZWlnaHQyKSB7XG4gICAgICAgIHJldHVybiBfaGVpZ2h0MiA9PSBudWxsID8gdGhpcy5yeSgpICogMiA6IHRoaXMucnkobmV3IFNWRy5OdW1iZXIoX2hlaWdodDIpLmRpdmlkZSgyKSk7XG4gICAgICB9LFxuICAgICAgLy8gQ3VzdG9tIHNpemUgZnVuY3Rpb25cbiAgICAgIHNpemU6IGZ1bmN0aW9uIHNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB2YXIgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcywgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJ4KG5ldyBTVkcuTnVtYmVyKHAud2lkdGgpLmRpdmlkZSgyKSkucnkobmV3IFNWRy5OdW1iZXIocC5oZWlnaHQpLmRpdmlkZSgyKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLkxpbmUgPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemUgbm9kZVxuICAgICAgY3JlYXRlOiAnbGluZScsXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5TaGFwZSxcbiAgICAgIC8vIEFkZCBjbGFzcyBtZXRob2RzXG4gICAgICBleHRlbmQ6IHtcbiAgICAgICAgLy8gR2V0IGFycmF5XG4gICAgICAgIGFycmF5OiBmdW5jdGlvbiBhcnJheSgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFNWRy5Qb2ludEFycmF5KFtbdGhpcy5hdHRyKCd4MScpLCB0aGlzLmF0dHIoJ3kxJyldLCBbdGhpcy5hdHRyKCd4MicpLCB0aGlzLmF0dHIoJ3kyJyldXSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE92ZXJ3cml0ZSBuYXRpdmUgcGxvdCgpIG1ldGhvZFxuICAgICAgICBwbG90OiBmdW5jdGlvbiBwbG90KHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgICAgaWYgKHgxID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFycmF5KCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgeTEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB4MSA9IHtcbiAgICAgICAgICAgICAgeDE6IHgxLFxuICAgICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICAgICAgeTI6IHkyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4MSA9IG5ldyBTVkcuUG9pbnRBcnJheSh4MSkudG9MaW5lKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cih4MSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoeCwgeSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIodGhpcy5hcnJheSgpLm1vdmUoeCwgeSkudG9MaW5lKCkpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTZXQgZWxlbWVudCBzaXplIHRvIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgc2l6ZTogZnVuY3Rpb24gc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgdmFyIHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIodGhpcy5hcnJheSgpLnNpemUocC53aWR0aCwgcC5oZWlnaHQpLnRvTGluZSgpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4gICAgICBjb25zdHJ1Y3Q6IHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbGluZSBlbGVtZW50XG4gICAgICAgIGxpbmU6IGZ1bmN0aW9uIGxpbmUoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgcGxvdCBpcyBjYWxsZWQgYXMgYSBzZXR0ZXJcbiAgICAgICAgICAvLyB4MSBpcyBub3QgbmVjZXNzYXJpbHkgYSBudW1iZXIsIGl0IGNhbiBhbHNvIGJlIGFuIGFycmF5LCBhIHN0cmluZyBhbmQgYSBTVkcuUG9pbnRBcnJheVxuICAgICAgICAgIHJldHVybiBTVkcuTGluZS5wcm90b3R5cGUucGxvdC5hcHBseSh0aGlzLnB1dChuZXcgU1ZHLkxpbmUoKSksIHgxICE9IG51bGwgPyBbeDEsIHkxLCB4MiwgeTJdIDogWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5Qb2x5bGluZSA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gICAgICBjcmVhdGU6ICdwb2x5bGluZScsXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5TaGFwZSxcbiAgICAgIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4gICAgICBjb25zdHJ1Y3Q6IHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgd3JhcHBlZCBwb2x5bGluZSBlbGVtZW50XG4gICAgICAgIHBvbHlsaW5lOiBmdW5jdGlvbiBwb2x5bGluZShwKSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHBsb3QgaXMgY2FsbGVkIGFzIGEgc2V0dGVyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuUG9seWxpbmUoKSkucGxvdChwIHx8IG5ldyBTVkcuUG9pbnRBcnJheSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5Qb2x5Z29uID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ3BvbHlnb24nLFxuICAgICAgLy8gSW5oZXJpdCBmcm9tXG4gICAgICBpbmhlcml0OiBTVkcuU2hhcGUsXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBhIHdyYXBwZWQgcG9seWdvbiBlbGVtZW50XG4gICAgICAgIHBvbHlnb246IGZ1bmN0aW9uIHBvbHlnb24ocCkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSBwbG90IGlzIGNhbGxlZCBhcyBhIHNldHRlclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlBvbHlnb24oKSkucGxvdChwIHx8IG5ldyBTVkcuUG9pbnRBcnJheSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pOyAvLyBBZGQgcG9seWdvbi1zcGVjaWZpYyBmdW5jdGlvbnNcblxuICAgIFNWRy5leHRlbmQoU1ZHLlBvbHlsaW5lLCBTVkcuUG9seWdvbiwge1xuICAgICAgLy8gR2V0IGFycmF5XG4gICAgICBhcnJheTogZnVuY3Rpb24gYXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcnJheSB8fCAodGhpcy5fYXJyYXkgPSBuZXcgU1ZHLlBvaW50QXJyYXkodGhpcy5hdHRyKCdwb2ludHMnKSkpO1xuICAgICAgfSxcbiAgICAgIC8vIFBsb3QgbmV3IHBhdGhcbiAgICAgIHBsb3Q6IGZ1bmN0aW9uIHBsb3QocCkge1xuICAgICAgICByZXR1cm4gcCA9PSBudWxsID8gdGhpcy5hcnJheSgpIDogdGhpcy5jbGVhcigpLmF0dHIoJ3BvaW50cycsIHR5cGVvZiBwID09PSAnc3RyaW5nJyA/IHAgOiB0aGlzLl9hcnJheSA9IG5ldyBTVkcuUG9pbnRBcnJheShwKSk7XG4gICAgICB9LFxuICAgICAgLy8gQ2xlYXIgYXJyYXkgY2FjaGVcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2FycmF5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lclxuICAgICAgbW92ZTogZnVuY3Rpb24gbW92ZSh4LCB5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3BvaW50cycsIHRoaXMuYXJyYXkoKS5tb3ZlKHgsIHkpKTtcbiAgICAgIH0sXG4gICAgICAvLyBTZXQgZWxlbWVudCBzaXplIHRvIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgIHNpemU6IGZ1bmN0aW9uIHNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB2YXIgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcywgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3BvaW50cycsIHRoaXMuYXJyYXkoKS5zaXplKHAud2lkdGgsIHAuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgfSk7IC8vIHVuaWZ5IGFsbCBwb2ludCB0byBwb2ludCBlbGVtZW50c1xuXG4gICAgU1ZHLmV4dGVuZChTVkcuTGluZSwgU1ZHLlBvbHlsaW5lLCBTVkcuUG9seWdvbiwge1xuICAgICAgLy8gRGVmaW5lIG1vcnBoYWJsZSBhcnJheVxuICAgICAgbW9ycGhBcnJheTogU1ZHLlBvaW50QXJyYXksXG4gICAgICAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lciBvdmVyIHgtYXhpc1xuICAgICAgeDogZnVuY3Rpb24geChfeDQpIHtcbiAgICAgICAgcmV0dXJuIF94NCA9PSBudWxsID8gdGhpcy5iYm94KCkueCA6IHRoaXMubW92ZShfeDQsIHRoaXMuYmJveCgpLnkpO1xuICAgICAgfSxcbiAgICAgIC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyIG92ZXIgeS1heGlzXG4gICAgICB5OiBmdW5jdGlvbiB5KF95Mykge1xuICAgICAgICByZXR1cm4gX3kzID09IG51bGwgPyB0aGlzLmJib3goKS55IDogdGhpcy5tb3ZlKHRoaXMuYmJveCgpLngsIF95Myk7XG4gICAgICB9LFxuICAgICAgLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcbiAgICAgIHdpZHRoOiBmdW5jdGlvbiB3aWR0aChfd2lkdGgzKSB7XG4gICAgICAgIHZhciBiID0gdGhpcy5iYm94KCk7XG4gICAgICAgIHJldHVybiBfd2lkdGgzID09IG51bGwgPyBiLndpZHRoIDogdGhpcy5zaXplKF93aWR0aDMsIGIuaGVpZ2h0KTtcbiAgICAgIH0sXG4gICAgICAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcbiAgICAgIGhlaWdodDogZnVuY3Rpb24gaGVpZ2h0KF9oZWlnaHQzKSB7XG4gICAgICAgIHZhciBiID0gdGhpcy5iYm94KCk7XG4gICAgICAgIHJldHVybiBfaGVpZ2h0MyA9PSBudWxsID8gYi5oZWlnaHQgOiB0aGlzLnNpemUoYi53aWR0aCwgX2hlaWdodDMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5QYXRoID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ3BhdGgnLFxuICAgICAgLy8gSW5oZXJpdCBmcm9tXG4gICAgICBpbmhlcml0OiBTVkcuU2hhcGUsXG4gICAgICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuICAgICAgZXh0ZW5kOiB7XG4gICAgICAgIC8vIERlZmluZSBtb3JwaGFibGUgYXJyYXlcbiAgICAgICAgbW9ycGhBcnJheTogU1ZHLlBhdGhBcnJheSxcbiAgICAgICAgLy8gR2V0IGFycmF5XG4gICAgICAgIGFycmF5OiBmdW5jdGlvbiBhcnJheSgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYXJyYXkgfHwgKHRoaXMuX2FycmF5ID0gbmV3IFNWRy5QYXRoQXJyYXkodGhpcy5hdHRyKCdkJykpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUGxvdCBuZXcgcGF0aFxuICAgICAgICBwbG90OiBmdW5jdGlvbiBwbG90KGQpIHtcbiAgICAgICAgICByZXR1cm4gZCA9PSBudWxsID8gdGhpcy5hcnJheSgpIDogdGhpcy5jbGVhcigpLmF0dHIoJ2QnLCB0eXBlb2YgZCA9PT0gJ3N0cmluZycgPyBkIDogdGhpcy5fYXJyYXkgPSBuZXcgU1ZHLlBhdGhBcnJheShkKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIENsZWFyIGFycmF5IGNhY2hlXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fYXJyYXk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBhIHdyYXBwZWQgcGF0aCBlbGVtZW50XG4gICAgICAgIHBhdGg6IGZ1bmN0aW9uIHBhdGgoZCkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSBwbG90IGlzIGNhbGxlZCBhcyBhIHNldHRlclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlBhdGgoKSkucGxvdChkIHx8IG5ldyBTVkcuUGF0aEFycmF5KCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLkltYWdlID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ2ltYWdlJyxcbiAgICAgIC8vIEluaGVyaXQgZnJvbVxuICAgICAgaW5oZXJpdDogU1ZHLlNoYXBlLFxuICAgICAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiAgICAgIGV4dGVuZDoge1xuICAgICAgICAvLyAocmUpbG9hZCBpbWFnZVxuICAgICAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgICAgIGlmICghdXJsKSByZXR1cm4gdGhpcztcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgIGltZyA9IG5ldyB3aW5kb3cuSW1hZ2UoKTsgLy8gcHJlbG9hZCBpbWFnZVxuXG4gICAgICAgICAgU1ZHLm9uKGltZywgJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBTVkcub2ZmKGltZyk7XG4gICAgICAgICAgICB2YXIgcCA9IHNlbGYucGFyZW50KFNWRy5QYXR0ZXJuKTtcbiAgICAgICAgICAgIGlmIChwID09PSBudWxsKSByZXR1cm47IC8vIGVuc3VyZSBpbWFnZSBzaXplXG5cbiAgICAgICAgICAgIGlmIChzZWxmLndpZHRoKCkgPT0gMCAmJiBzZWxmLmhlaWdodCgpID09IDApIHtcbiAgICAgICAgICAgICAgc2VsZi5zaXplKGltZy53aWR0aCwgaW1nLmhlaWdodCk7XG4gICAgICAgICAgICB9IC8vIGVuc3VyZSBwYXR0ZXJuIHNpemUgaWYgbm90IHNldFxuXG5cbiAgICAgICAgICAgIGlmIChwICYmIHAud2lkdGgoKSA9PSAwICYmIHAuaGVpZ2h0KCkgPT0gMCkge1xuICAgICAgICAgICAgICBwLnNpemUoc2VsZi53aWR0aCgpLCBzZWxmLmhlaWdodCgpKTtcbiAgICAgICAgICAgIH0gLy8gY2FsbGJhY2tcblxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuX2xvYWRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBzZWxmLl9sb2FkZWQuY2FsbChzZWxmLCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGltZy53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGltZy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmF0aW86IGltZy53aWR0aCAvIGltZy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgU1ZHLm9uKGltZywgJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIFNWRy5vZmYoaW1nKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl9lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBzZWxmLl9lcnJvci5jYWxsKHNlbGYsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2hyZWYnLCBpbWcuc3JjID0gdGhpcy5zcmMgPSB1cmwsIFNWRy54bGluayk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEFkZCBsb2FkZWQgY2FsbGJhY2tcbiAgICAgICAgbG9hZGVkOiBmdW5jdGlvbiBsb2FkZWQoX2xvYWRlZCkge1xuICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IF9sb2FkZWQ7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLl9lcnJvciA9IF9lcnJvcjtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4gICAgICBjb25zdHJ1Y3Q6IHtcbiAgICAgICAgLy8gY3JlYXRlIGltYWdlIGVsZW1lbnQsIGxvYWQgaW1hZ2UgYW5kIHNldCBpdHMgc2l6ZVxuICAgICAgICBpbWFnZTogZnVuY3Rpb24gaW1hZ2Uoc291cmNlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuSW1hZ2UoKSkubG9hZChzb3VyY2UpLnNpemUod2lkdGggfHwgMCwgaGVpZ2h0IHx8IHdpZHRoIHx8IDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlRleHQgPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemUgbm9kZVxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCd0ZXh0JykpO1xuICAgICAgICB0aGlzLmRvbS5sZWFkaW5nID0gbmV3IFNWRy5OdW1iZXIoMS4zKTsgLy8gc3RvcmUgbGVhZGluZyB2YWx1ZSBmb3IgcmVidWlsZGluZ1xuXG4gICAgICAgIHRoaXMuX3JlYnVpbGQgPSB0cnVlOyAvLyBlbmFibGUgYXV0b21hdGljIHVwZGF0aW5nIG9mIGR5IHZhbHVlc1xuXG4gICAgICAgIHRoaXMuX2J1aWxkID0gZmFsc2U7IC8vIGRpc2FibGUgYnVpbGQgbW9kZSBmb3IgYWRkaW5nIG11bHRpcGxlIGxpbmVzXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IGZvbnRcblxuICAgICAgICB0aGlzLmF0dHIoJ2ZvbnQtZmFtaWx5JywgU1ZHLmRlZmF1bHRzLmF0dHJzWydmb250LWZhbWlseSddKTtcbiAgICAgIH0sXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5TaGFwZSxcbiAgICAgIC8vIEFkZCBjbGFzcyBtZXRob2RzXG4gICAgICBleHRlbmQ6IHtcbiAgICAgICAgLy8gTW92ZSBvdmVyIHgtYXhpc1xuICAgICAgICB4OiBmdW5jdGlvbiB4KF94NSkge1xuICAgICAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcbiAgICAgICAgICBpZiAoX3g1ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3gnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCd4JywgX3g1KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gU2V0IHRoZSB0ZXh0IGNvbnRlbnRcbiAgICAgICAgdGV4dDogZnVuY3Rpb24gdGV4dChfdGV4dCkge1xuICAgICAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcbiAgICAgICAgICBpZiAodHlwZW9mIF90ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIF90ZXh0ID0gJyc7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLm5vZGUuY2hpbGROb2RlcztcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgIC8vIGFkZCBuZXdsaW5lIGlmIGl0cyBub3QgdGhlIGZpcnN0IGNoaWxkIGFuZCBuZXdMaW5lZCBpcyBzZXQgdG8gdHJ1ZVxuICAgICAgICAgICAgICBpZiAoaSAhPSAwICYmIGNoaWxkcmVuW2ldLm5vZGVUeXBlICE9IDMgJiYgU1ZHLmFkb3B0KGNoaWxkcmVuW2ldKS5kb20ubmV3TGluZWQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF90ZXh0ICs9ICdcXG4nO1xuICAgICAgICAgICAgICB9IC8vIGFkZCBjb250ZW50IG9mIHRoaXMgbm9kZVxuXG5cbiAgICAgICAgICAgICAgX3RleHQgKz0gY2hpbGRyZW5baV0udGV4dENvbnRlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfdGV4dDtcbiAgICAgICAgICB9IC8vIHJlbW92ZSBleGlzdGluZyBjb250ZW50XG5cblxuICAgICAgICAgIHRoaXMuY2xlYXIoKS5idWlsZCh0cnVlKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgX3RleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIGNhbGwgYmxvY2tcbiAgICAgICAgICAgIF90ZXh0LmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHN0b3JlIHRleHQgYW5kIG1ha2Ugc3VyZSB0ZXh0IGlzIG5vdCBibGFua1xuICAgICAgICAgICAgX3RleHQgPSBfdGV4dC5zcGxpdCgnXFxuJyk7IC8vIGJ1aWxkIG5ldyBsaW5lc1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBfdGV4dC5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgIHRoaXMudHNwYW4oX3RleHRbaV0pLm5ld0xpbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIGRpc2FibGUgYnVpbGQgbW9kZSBhbmQgcmVidWlsZCBsaW5lc1xuXG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZChmYWxzZSkucmVidWlsZCgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTZXQgZm9udCBzaXplXG4gICAgICAgIHNpemU6IGZ1bmN0aW9uIHNpemUoX3NpemUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCdmb250LXNpemUnLCBfc2l6ZSkucmVidWlsZCgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTZXQgLyBnZXQgbGVhZGluZ1xuICAgICAgICBsZWFkaW5nOiBmdW5jdGlvbiBsZWFkaW5nKHZhbHVlKSB7XG4gICAgICAgICAgLy8gYWN0IGFzIGdldHRlclxuICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb20ubGVhZGluZztcbiAgICAgICAgICB9IC8vIGFjdCBhcyBzZXR0ZXJcblxuXG4gICAgICAgICAgdGhpcy5kb20ubGVhZGluZyA9IG5ldyBTVkcuTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWJ1aWxkKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBhbGwgdGhlIGZpcnN0IGxldmVsIGxpbmVzXG4gICAgICAgIGxpbmVzOiBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgICAgICB2YXIgbm9kZSA9ICh0aGlzLnRleHRQYXRoICYmIHRoaXMudGV4dFBhdGgoKSB8fCB0aGlzKS5ub2RlOyAvLyBmaWx0ZXIgdHNwYW5zIGFuZCBtYXAgdGhlbSB0byBTVkcuanMgaW5zdGFuY2VzXG5cbiAgICAgICAgICB2YXIgbGluZXMgPSBTVkcudXRpbHMubWFwKFNWRy51dGlscy5maWx0ZXJTVkdFbGVtZW50cyhub2RlLmNoaWxkTm9kZXMpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBTVkcuYWRvcHQoZWwpO1xuICAgICAgICAgIH0pOyAvLyByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgU1ZHLnNldFxuXG4gICAgICAgICAgcmV0dXJuIG5ldyBTVkcuU2V0KGxpbmVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmVidWlsZCBhcHBlYXJhbmNlIHR5cGVcbiAgICAgICAgcmVidWlsZDogZnVuY3Rpb24gcmVidWlsZChfcmVidWlsZCkge1xuICAgICAgICAgIC8vIHN0b3JlIG5ldyByZWJ1aWxkIGZsYWcgaWYgZ2l2ZW5cbiAgICAgICAgICBpZiAodHlwZW9mIF9yZWJ1aWxkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlYnVpbGQgPSBfcmVidWlsZDtcbiAgICAgICAgICB9IC8vIGRlZmluZSBwb3NpdGlvbiBvZiBhbGwgbGluZXNcblxuXG4gICAgICAgICAgaWYgKHRoaXMuX3JlYnVpbGQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBibGFua0xpbmVPZmZzZXQgPSAwLFxuICAgICAgICAgICAgICAgIGR5ID0gdGhpcy5kb20ubGVhZGluZyAqIG5ldyBTVkcuTnVtYmVyKHRoaXMuYXR0cignZm9udC1zaXplJykpO1xuICAgICAgICAgICAgdGhpcy5saW5lcygpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5kb20ubmV3TGluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYudGV4dFBhdGgoKSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyKCd4Jywgc2VsZi5hdHRyKCd4JykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHQoKSA9PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgYmxhbmtMaW5lT2Zmc2V0ICs9IGR5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmF0dHIoJ2R5JywgZHkgKyBibGFua0xpbmVPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgYmxhbmtMaW5lT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdyZWJ1aWxkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEVuYWJsZSAvIGRpc2FibGUgYnVpbGQgbW9kZVxuICAgICAgICBidWlsZDogZnVuY3Rpb24gYnVpbGQoX2J1aWxkKSB7XG4gICAgICAgICAgdGhpcy5fYnVpbGQgPSAhIV9idWlsZDtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gb3ZlcndyaXRlIG1ldGhvZCBmcm9tIHBhcmVudCB0byBzZXQgZGF0YSBwcm9wZXJseVxuICAgICAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKG8pIHtcbiAgICAgICAgICB0aGlzLmRvbSA9IG87XG4gICAgICAgICAgdGhpcy5kb20ubGVhZGluZyA9IG5ldyBTVkcuTnVtYmVyKG8ubGVhZGluZyB8fCAxLjMpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiAgICAgIGNvbnN0cnVjdDoge1xuICAgICAgICAvLyBDcmVhdGUgdGV4dCBlbGVtZW50XG4gICAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoX3RleHQyKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuVGV4dCgpKS50ZXh0KF90ZXh0Mik7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIENyZWF0ZSBwbGFpbiB0ZXh0IGVsZW1lbnRcbiAgICAgICAgcGxhaW46IGZ1bmN0aW9uIHBsYWluKHRleHQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5UZXh0KCkpLnBsYWluKHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlRzcGFuID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ3RzcGFuJyxcbiAgICAgIC8vIEluaGVyaXQgZnJvbVxuICAgICAgaW5oZXJpdDogU1ZHLlNoYXBlLFxuICAgICAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiAgICAgIGV4dGVuZDoge1xuICAgICAgICAvLyBTZXQgdGV4dCBjb250ZW50XG4gICAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoX3RleHQzKSB7XG4gICAgICAgICAgaWYgKF90ZXh0MyA9PSBudWxsKSByZXR1cm4gdGhpcy5ub2RlLnRleHRDb250ZW50ICsgKHRoaXMuZG9tLm5ld0xpbmVkID8gJ1xcbicgOiAnJyk7XG4gICAgICAgICAgdHlwZW9mIF90ZXh0MyA9PT0gJ2Z1bmN0aW9uJyA/IF90ZXh0My5jYWxsKHRoaXMsIHRoaXMpIDogdGhpcy5wbGFpbihfdGV4dDMpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTaG9ydGN1dCBkeFxuICAgICAgICBkeDogZnVuY3Rpb24gZHgoX2R4KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignZHgnLCBfZHgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBTaG9ydGN1dCBkeVxuICAgICAgICBkeTogZnVuY3Rpb24gZHkoX2R5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignZHknLCBfZHkpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBDcmVhdGUgbmV3IGxpbmVcbiAgICAgICAgbmV3TGluZTogZnVuY3Rpb24gbmV3TGluZSgpIHtcbiAgICAgICAgICAvLyBmZXRjaCB0ZXh0IHBhcmVudFxuICAgICAgICAgIHZhciB0ID0gdGhpcy5wYXJlbnQoU1ZHLlRleHQpOyAvLyBtYXJrIG5ldyBsaW5lXG5cbiAgICAgICAgICB0aGlzLmRvbS5uZXdMaW5lZCA9IHRydWU7IC8vIGFwcGx5IG5ldyBoecKhblxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZHkodC5kb20ubGVhZGluZyAqIHQuYXR0cignZm9udC1zaXplJykpLmF0dHIoJ3gnLCB0LngoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuZXh0ZW5kKFNWRy5UZXh0LCBTVkcuVHNwYW4sIHtcbiAgICAgIC8vIENyZWF0ZSBwbGFpbiB0ZXh0IG5vZGVcbiAgICAgIHBsYWluOiBmdW5jdGlvbiBwbGFpbih0ZXh0KSB7XG4gICAgICAgIC8vIGNsZWFyIGlmIGJ1aWxkIG1vZGUgaXMgZGlzYWJsZWRcbiAgICAgICAgaWYgKHRoaXMuX2J1aWxkID09PSBmYWxzZSkge1xuICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgfSAvLyBjcmVhdGUgdGV4dCBub2RlXG5cblxuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBDcmVhdGUgYSB0c3BhblxuICAgICAgdHNwYW46IGZ1bmN0aW9uIHRzcGFuKHRleHQpIHtcbiAgICAgICAgdmFyIG5vZGUgPSAodGhpcy50ZXh0UGF0aCAmJiB0aGlzLnRleHRQYXRoKCkgfHwgdGhpcykubm9kZSxcbiAgICAgICAgICAgIHRzcGFuID0gbmV3IFNWRy5Uc3BhbigpOyAvLyBjbGVhciBpZiBidWlsZCBtb2RlIGlzIGRpc2FibGVkXG5cbiAgICAgICAgaWYgKHRoaXMuX2J1aWxkID09PSBmYWxzZSkge1xuICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgfSAvLyBhZGQgbmV3IHRzcGFuXG5cblxuICAgICAgICBub2RlLmFwcGVuZENoaWxkKHRzcGFuLm5vZGUpO1xuICAgICAgICByZXR1cm4gdHNwYW4udGV4dCh0ZXh0KTtcbiAgICAgIH0sXG4gICAgICAvLyBDbGVhciBhbGwgbGluZXNcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdmFyIG5vZGUgPSAodGhpcy50ZXh0UGF0aCAmJiB0aGlzLnRleHRQYXRoKCkgfHwgdGhpcykubm9kZTsgLy8gcmVtb3ZlIGV4aXN0aW5nIGNoaWxkIG5vZGVzXG5cbiAgICAgICAgd2hpbGUgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBHZXQgbGVuZ3RoIG9mIHRleHQgZWxlbWVudFxuICAgICAgbGVuZ3RoOiBmdW5jdGlvbiBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlRleHRQYXRoID0gU1ZHLmludmVudCh7XG4gICAgICAvLyBJbml0aWFsaXplIG5vZGVcbiAgICAgIGNyZWF0ZTogJ3RleHRQYXRoJyxcbiAgICAgIC8vIEluaGVyaXQgZnJvbVxuICAgICAgaW5oZXJpdDogU1ZHLlBhcmVudCxcbiAgICAgIC8vIERlZmluZSBwYXJlbnQgY2xhc3NcbiAgICAgIHBhcmVudDogU1ZHLlRleHQsXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIG1vcnBoQXJyYXk6IFNWRy5QYXRoQXJyYXksXG4gICAgICAgIC8vIHJldHVybiB0aGUgYXJyYXkgb2YgdGhlIHBhdGggdHJhY2sgZWxlbWVudFxuICAgICAgICBhcnJheTogZnVuY3Rpb24gYXJyYXkoKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gdGhpcy50cmFjaygpO1xuICAgICAgICAgIHJldHVybiB0cmFjayA/IHRyYWNrLmFycmF5KCkgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICAvLyBQbG90IHBhdGggaWYgYW55XG4gICAgICAgIHBsb3Q6IGZ1bmN0aW9uIHBsb3QoZCkge1xuICAgICAgICAgIHZhciB0cmFjayA9IHRoaXMudHJhY2soKSxcbiAgICAgICAgICAgICAgcGF0aEFycmF5ID0gbnVsbDtcblxuICAgICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgICAgcGF0aEFycmF5ID0gdHJhY2sucGxvdChkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZCA9PSBudWxsID8gcGF0aEFycmF5IDogdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gR2V0IHRoZSBwYXRoIHRyYWNrIGVsZW1lbnRcbiAgICAgICAgdHJhY2s6IGZ1bmN0aW9uIHRyYWNrKCkge1xuICAgICAgICAgIHZhciBwYXRoID0gdGhpcy50ZXh0UGF0aCgpO1xuXG4gICAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnJlZmVyZW5jZSgnaHJlZicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gR2V0IHRoZSB0ZXh0UGF0aCBjaGlsZFxuICAgICAgICB0ZXh0UGF0aDogZnVuY3Rpb24gdGV4dFBhdGgoKSB7XG4gICAgICAgICAgaWYgKHRoaXMubm9kZS5maXJzdENoaWxkICYmIHRoaXMubm9kZS5maXJzdENoaWxkLm5vZGVOYW1lID09ICd0ZXh0UGF0aCcpIHtcbiAgICAgICAgICAgIHJldHVybiBTVkcuYWRvcHQodGhpcy5ub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5OZXN0ZWQgPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemUgbm9kZVxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdzdmcnKSk7XG4gICAgICAgIHRoaXMuc3R5bGUoJ292ZXJmbG93JywgJ3Zpc2libGUnKTtcbiAgICAgIH0sXG4gICAgICAvLyBJbmhlcml0IGZyb21cbiAgICAgIGluaGVyaXQ6IFNWRy5Db250YWluZXIsXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXN0ZWQgc3ZnIGRvY3VtZW50XG4gICAgICAgIG5lc3RlZDogZnVuY3Rpb24gbmVzdGVkKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLk5lc3RlZCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pOyAvLyBEZWZpbmUgbGlzdCBvZiBhdmFpbGFibGUgYXR0cmlidXRlcyBmb3Igc3Ryb2tlIGFuZCBmaWxsXG5cbiAgICB2YXIgc3VnYXIgPSB7XG4gICAgICBzdHJva2U6IFsnY29sb3InLCAnd2lkdGgnLCAnb3BhY2l0eScsICdsaW5lY2FwJywgJ2xpbmVqb2luJywgJ21pdGVybGltaXQnLCAnZGFzaGFycmF5JywgJ2Rhc2hvZmZzZXQnXSxcbiAgICAgIGZpbGw6IFsnY29sb3InLCAnb3BhY2l0eScsICdydWxlJ10sXG4gICAgICBwcmVmaXg6IGZ1bmN0aW9uIHByZWZpeCh0LCBhKSB7XG4gICAgICAgIHJldHVybiBhID09ICdjb2xvcicgPyB0IDogdCArICctJyArIGE7XG4gICAgICB9XG4gICAgfSAvLyBBZGQgc3VnYXIgZm9yIGZpbGwgYW5kIHN0cm9rZVxuICAgIDtcbiAgICBbJ2ZpbGwnLCAnc3Ryb2tlJ10uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIGV4dGVuc2lvbiA9IHt9O1xuXG4gICAgICBleHRlbnNpb25bbV0gPSBmdW5jdGlvbiAobykge1xuICAgICAgICBpZiAodHlwZW9mIG8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG8gPT09ICdzdHJpbmcnIHx8IFNWRy5Db2xvci5pc1JnYihvKSB8fCBvICYmIHR5cGVvZiBvLmZpbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLmF0dHIobSwgbyk7XG4gICAgICAgIH0gZWxzZSAvLyBzZXQgYWxsIGF0dHJpYnV0ZXMgZnJvbSBzdWdhci5maWxsIGFuZCBzdWdhci5zdHJva2UgbGlzdFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdWdhclttXS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICBpZiAob1tzdWdhclttXVtpXV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cihzdWdhci5wcmVmaXgobSwgc3VnYXJbbV1baV0pLCBvW3N1Z2FyW21dW2ldXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuXG4gICAgICBTVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCBTVkcuRlgsIGV4dGVuc2lvbik7XG4gICAgfSk7XG4gICAgU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwgU1ZHLkZYLCB7XG4gICAgICAvLyBNYXAgdHJhbnNsYXRlIHRvIHRyYW5zZm9ybVxuICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiB0cmFuc2xhdGUoeCwgeSkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oe1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICAvLyBNYXAgbWF0cml4IHRvIHRyYW5zZm9ybVxuICAgICAgbWF0cml4OiBmdW5jdGlvbiBtYXRyaXgobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCd0cmFuc2Zvcm0nLCBuZXcgU1ZHLk1hdHJpeChhcmd1bWVudHMubGVuZ3RoID09IDYgPyBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykgOiBtKSk7XG4gICAgICB9LFxuICAgICAgLy8gT3BhY2l0eVxuICAgICAgb3BhY2l0eTogZnVuY3Rpb24gb3BhY2l0eSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCdvcGFjaXR5JywgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIC8vIFJlbGF0aXZlIG1vdmUgb3ZlciB4IGF4aXNcbiAgICAgIGR4OiBmdW5jdGlvbiBkeCh4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLngobmV3IFNWRy5OdW1iZXIoeCkucGx1cyh0aGlzIGluc3RhbmNlb2YgU1ZHLkZYID8gMCA6IHRoaXMueCgpKSwgdHJ1ZSk7XG4gICAgICB9LFxuICAgICAgLy8gUmVsYXRpdmUgbW92ZSBvdmVyIHkgYXhpc1xuICAgICAgZHk6IGZ1bmN0aW9uIGR5KHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueShuZXcgU1ZHLk51bWJlcih5KS5wbHVzKHRoaXMgaW5zdGFuY2VvZiBTVkcuRlggPyAwIDogdGhpcy55KCkpLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBTVkcuZXh0ZW5kKFNWRy5QYXRoLCB7XG4gICAgICAvLyBHZXQgcGF0aCBsZW5ndGhcbiAgICAgIGxlbmd0aDogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmdldFRvdGFsTGVuZ3RoKCk7XG4gICAgICB9LFxuICAgICAgLy8gR2V0IHBvaW50IGF0IGxlbmd0aFxuICAgICAgcG9pbnRBdDogZnVuY3Rpb24gcG9pbnRBdChsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRQb2ludEF0TGVuZ3RoKGxlbmd0aCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgU1ZHLlNldCA9IFNWRy5pbnZlbnQoe1xuICAgICAgLy8gSW5pdGlhbGl6ZVxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUobWVtYmVycykge1xuICAgICAgICAvLyBTZXQgaW5pdGlhbCBzdGF0ZVxuICAgICAgICBBcnJheS5pc0FycmF5KG1lbWJlcnMpID8gdGhpcy5tZW1iZXJzID0gbWVtYmVycyA6IHRoaXMuY2xlYXIoKTtcbiAgICAgIH0sXG4gICAgICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuICAgICAgZXh0ZW5kOiB7XG4gICAgICAgIC8vIEFkZCBlbGVtZW50IHRvIHNldFxuICAgICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICAgICAgICB2YXIgaWwsXG4gICAgICAgICAgICAgIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5tZW1iZXJzLnB1c2goZWxlbWVudHNbaV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBSZW1vdmUgZWxlbWVudCBmcm9tIHNldFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGkgPSB0aGlzLmluZGV4KGVsZW1lbnQpOyAvLyByZW1vdmUgZ2l2ZW4gY2hpbGRcblxuICAgICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMubWVtYmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBhbGwgbWVtYmVyc1xuICAgICAgICBlYWNoOiBmdW5jdGlvbiBlYWNoKGJsb2NrKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy5tZW1iZXJzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgIGJsb2NrLmFwcGx5KHRoaXMubWVtYmVyc1tpXSwgW2ksIHRoaXMubWVtYmVyc10pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBSZXN0b3JlIHRvIGRlZmF1bHRzXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICAvLyBpbml0aWFsaXplIHN0b3JlXG4gICAgICAgICAgdGhpcy5tZW1iZXJzID0gW107XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCB0aGUgbGVuZ3RoIG9mIGEgc2V0XG4gICAgICAgIGxlbmd0aDogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnMubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICAvLyBDaGVja3MgaWYgYSBnaXZlbiBlbGVtZW50IGlzIHByZXNlbnQgaW4gc2V0XG4gICAgICAgIGhhczogZnVuY3Rpb24gaGFzKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleChlbGVtZW50KSA+PSAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyByZXR1bnMgaW5kZXggb2YgZ2l2ZW4gZWxlbWVudCBpbiBzZXRcbiAgICAgICAgaW5kZXg6IGZ1bmN0aW9uIGluZGV4KGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJzLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBtZW1iZXIgYXQgZ2l2ZW4gaW5kZXhcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoaSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnNbaV07XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBmaXJzdCBtZW1iZXJcbiAgICAgICAgZmlyc3Q6IGZ1bmN0aW9uIGZpcnN0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldCgwKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gR2V0IGxhc3QgbWVtYmVyXG4gICAgICAgIGxhc3Q6IGZ1bmN0aW9uIGxhc3QoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMubWVtYmVycy5sZW5ndGggLSAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gRGVmYXVsdCB2YWx1ZVxuICAgICAgICB2YWx1ZU9mOiBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuICAgICAgY29uc3RydWN0OiB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBzZXRcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobWVtYmVycykge1xuICAgICAgICAgIHJldHVybiBuZXcgU1ZHLlNldChtZW1iZXJzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFNWRy5GWC5TZXQgPSBTVkcuaW52ZW50KHtcbiAgICAgIC8vIEluaXRpYWxpemUgbm9kZVxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoc2V0KSB7XG4gICAgICAgIC8vIHN0b3JlIHJlZmVyZW5jZSB0byBzZXRcbiAgICAgICAgdGhpcy5zZXQgPSBzZXQ7XG4gICAgICB9XG4gICAgfSk7IC8vIEFsaWFzIG1ldGhvZHNcblxuICAgIFNWRy5TZXQuaW5oZXJpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtZXRob2RzID0gW107IC8vIGdhdGhlciBzaGFwZSBtZXRob2RzXG5cbiAgICAgIGZvciAodmFyIG0gaW4gU1ZHLlNoYXBlLnByb3RvdHlwZSkge1xuICAgICAgICBpZiAodHlwZW9mIFNWRy5TaGFwZS5wcm90b3R5cGVbbV0gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFNWRy5TZXQucHJvdG90eXBlW21dICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgbWV0aG9kcy5wdXNoKG0pO1xuICAgICAgICB9XG4gICAgICB9IC8vIGFwcGx5IHNoYXBlIGFsaWFzc2VzXG5cblxuICAgICAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgU1ZHLlNldC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB0aGlzLm1lbWJlcnMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMubWVtYmVyc1tpXSAmJiB0eXBlb2YgdGhpcy5tZW1iZXJzW2ldW21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgdGhpcy5tZW1iZXJzW2ldW21ldGhvZF0uYXBwbHkodGhpcy5tZW1iZXJzW2ldLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtZXRob2QgPT0gJ2FuaW1hdGUnID8gdGhpcy5meCB8fCAodGhpcy5meCA9IG5ldyBTVkcuRlguU2V0KHRoaXMpKSA6IHRoaXM7XG4gICAgICAgIH07XG4gICAgICB9KTsgLy8gY2xlYXIgbWV0aG9kcyBmb3IgdGhlIG5leHQgcm91bmRcblxuICAgICAgbWV0aG9kcyA9IFtdOyAvLyBnYXRoZXIgZnggbWV0aG9kc1xuXG4gICAgICBmb3IgKHZhciBtIGluIFNWRy5GWC5wcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBTVkcuRlgucHJvdG90eXBlW21dID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTVkcuRlguU2V0LnByb3RvdHlwZVttXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG1ldGhvZHMucHVzaChtKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBhcHBseSBmeCBhbGlhc3Nlc1xuXG5cbiAgICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIFNWRy5GWC5TZXQucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy5zZXQubWVtYmVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnNldC5tZW1iZXJzW2ldLmZ4W21ldGhvZF0uYXBwbHkodGhpcy5zZXQubWVtYmVyc1tpXS5meCwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7fSk7XG4gICAgU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xuICAgICAgLy8gUmVtZW1iZXIgYXJiaXRyYXJ5IGRhdGFcbiAgICAgIHJlbWVtYmVyOiBmdW5jdGlvbiByZW1lbWJlcihrLCB2KSB7XG4gICAgICAgIC8vIHJlbWVtYmVyIGV2ZXJ5IGl0ZW0gaW4gYW4gb2JqZWN0IGluZGl2aWR1YWxseVxuICAgICAgICBpZiAoX3R5cGVvZihhcmd1bWVudHNbMF0pID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAodmFyIHZfIGluIGspIHtcbiAgICAgICAgICAgIHRoaXMucmVtZW1iZXIodl8sIGtbdl9dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gcmV0cmlldmUgbWVtb3J5XG4gICAgICAgIGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVtb3J5KClba107XG4gICAgICAgICAgfSAvLyBzdG9yZSBtZW1vcnlcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5tZW1vcnkoKVtrXSA9IHY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgLy8gRXJhc2UgYSBnaXZlbiBtZW1vcnlcbiAgICAgIGZvcmdldDogZnVuY3Rpb24gZm9yZ2V0KCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgdGhpcy5fbWVtb3J5ID0ge307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMubWVtb3J5KClbYXJndW1lbnRzW2ldXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBJbml0aWFsaXplIG9yIHJldHVybiBsb2NhbCBtZW1vcnkgb2JqZWN0XG4gICAgICBtZW1vcnk6IGZ1bmN0aW9uIG1lbW9yeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lbW9yeSB8fCAodGhpcy5fbWVtb3J5ID0ge30pO1xuICAgICAgfVxuICAgIH0pOyAvLyBNZXRob2QgZm9yIGdldHRpbmcgYW4gZWxlbWVudCBieSBpZFxuXG4gICAgU1ZHLmdldCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZEZyb21SZWZlcmVuY2UoaWQpIHx8IGlkKTtcbiAgICAgIHJldHVybiBTVkcuYWRvcHQobm9kZSk7XG4gICAgfTsgLy8gU2VsZWN0IGVsZW1lbnRzIGJ5IHF1ZXJ5IHN0cmluZ1xuXG5cbiAgICBTVkcuc2VsZWN0ID0gZnVuY3Rpb24gKHF1ZXJ5LCBwYXJlbnQpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLlNldChTVkcudXRpbHMubWFwKChwYXJlbnQgfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gU1ZHLmFkb3B0KG5vZGUpO1xuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBTVkcuZXh0ZW5kKFNWRy5QYXJlbnQsIHtcbiAgICAgIC8vIFNjb3BlZCBzZWxlY3QgbWV0aG9kXG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChxdWVyeSkge1xuICAgICAgICByZXR1cm4gU1ZHLnNlbGVjdChxdWVyeSwgdGhpcy5ub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHBhdGhSZWdSZXBsYWNlKGEsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiBjICsgZC5yZXBsYWNlKFNWRy5yZWdleC5kb3RzLCAnIC4nKTtcbiAgICB9IC8vIGNyZWF0ZXMgZGVlcCBjbG9uZSBvZiBhcnJheVxuXG5cbiAgICBmdW5jdGlvbiBfaXMoZWwsIG9iaikge1xuICAgICAgcmV0dXJuIGVsIGluc3RhbmNlb2Ygb2JqO1xuICAgIH0gLy8gdGVzdHMgaWYgYSBnaXZlbiBzZWxlY3RvciBtYXRjaGVzIGFuIGVsZW1lbnRcblxuXG4gICAgZnVuY3Rpb24gX21hdGNoZXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gKGVsLm1hdGNoZXMgfHwgZWwubWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm1vek1hdGNoZXNTZWxlY3RvciB8fCBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWwub01hdGNoZXNTZWxlY3RvcikuY2FsbChlbCwgc2VsZWN0b3IpO1xuICAgIH0gLy8gQ29udmVydCBkYXNoLXNlcGFyYXRlZC1zdHJpbmcgdG8gY2FtZWxDYXNlXG5cblxuICAgIGZ1bmN0aW9uIGNhbWVsQ2FzZShzKSB7XG4gICAgICByZXR1cm4gcy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24gKG0sIGcpIHtcbiAgICAgICAgcmV0dXJuIGcudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gQ2FwaXRhbGl6ZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcblxuXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzKSB7XG4gICAgICByZXR1cm4gcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7XG4gICAgfSAvLyBFbnN1cmUgdG8gc2l4LWJhc2VkIGhleFxuXG5cbiAgICBmdW5jdGlvbiBmdWxsSGV4KGhleCkge1xuICAgICAgcmV0dXJuIGhleC5sZW5ndGggPT0gNCA/IFsnIycsIGhleC5zdWJzdHJpbmcoMSwgMiksIGhleC5zdWJzdHJpbmcoMSwgMiksIGhleC5zdWJzdHJpbmcoMiwgMyksIGhleC5zdWJzdHJpbmcoMiwgMyksIGhleC5zdWJzdHJpbmcoMywgNCksIGhleC5zdWJzdHJpbmcoMywgNCldLmpvaW4oJycpIDogaGV4O1xuICAgIH0gLy8gQ29tcG9uZW50IHRvIGhleCB2YWx1ZVxuXG5cbiAgICBmdW5jdGlvbiBjb21wVG9IZXgoY29tcCkge1xuICAgICAgdmFyIGhleCA9IGNvbXAudG9TdHJpbmcoMTYpO1xuICAgICAgcmV0dXJuIGhleC5sZW5ndGggPT0gMSA/ICcwJyArIGhleCA6IGhleDtcbiAgICB9IC8vIENhbGN1bGF0ZSBwcm9wb3J0aW9uYWwgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXMgd2hlbiBuZWNlc3NhcnlcblxuXG4gICAgZnVuY3Rpb24gcHJvcG9ydGlvbmFsU2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICBpZiAod2lkdGggPT0gbnVsbCB8fCBoZWlnaHQgPT0gbnVsbCkge1xuICAgICAgICB2YXIgYm94ID0gZWxlbWVudC5iYm94KCk7XG5cbiAgICAgICAgaWYgKHdpZHRoID09IG51bGwpIHtcbiAgICAgICAgICB3aWR0aCA9IGJveC53aWR0aCAvIGJveC5oZWlnaHQgKiBoZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaGVpZ2h0ID09IG51bGwpIHtcbiAgICAgICAgICBoZWlnaHQgPSBib3guaGVpZ2h0IC8gYm94LndpZHRoICogd2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfTtcbiAgICB9IC8vIERlbHRhIHRyYW5zZm9ybSBwb2ludFxuXG5cbiAgICBmdW5jdGlvbiBkZWx0YVRyYW5zZm9ybVBvaW50KG1hdHJpeCwgeCwgeSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogeCAqIG1hdHJpeC5hICsgeSAqIG1hdHJpeC5jICsgMCxcbiAgICAgICAgeTogeCAqIG1hdHJpeC5iICsgeSAqIG1hdHJpeC5kICsgMFxuICAgICAgfTtcbiAgICB9IC8vIE1hcCBtYXRyaXggYXJyYXkgdG8gb2JqZWN0XG5cblxuICAgIGZ1bmN0aW9uIGFycmF5VG9NYXRyaXgoYSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogYVswXSxcbiAgICAgICAgYjogYVsxXSxcbiAgICAgICAgYzogYVsyXSxcbiAgICAgICAgZDogYVszXSxcbiAgICAgICAgZTogYVs0XSxcbiAgICAgICAgZjogYVs1XVxuICAgICAgfTtcbiAgICB9IC8vIFBhcnNlIG1hdHJpeCBpZiByZXF1aXJlZFxuXG5cbiAgICBmdW5jdGlvbiBwYXJzZU1hdHJpeChtYXRyaXgpIHtcbiAgICAgIGlmICghKG1hdHJpeCBpbnN0YW5jZW9mIFNWRy5NYXRyaXgpKSB7XG4gICAgICAgIG1hdHJpeCA9IG5ldyBTVkcuTWF0cml4KG1hdHJpeCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfSAvLyBBZGQgY2VudHJlIHBvaW50IHRvIHRyYW5zZm9ybSBvYmplY3RcblxuXG4gICAgZnVuY3Rpb24gYXJyYXlUb1N0cmluZyhhKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBhLmxlbmd0aCwgcyA9ICcnOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBzICs9IGFbaV1bMF07XG5cbiAgICAgICAgaWYgKGFbaV1bMV0gIT0gbnVsbCkge1xuICAgICAgICAgIHMgKz0gYVtpXVsxXTtcblxuICAgICAgICAgIGlmIChhW2ldWzJdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHMgKz0gJyAnO1xuICAgICAgICAgICAgcyArPSBhW2ldWzJdO1xuXG4gICAgICAgICAgICBpZiAoYVtpXVszXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHMgKz0gJyAnO1xuICAgICAgICAgICAgICBzICs9IGFbaV1bM107XG4gICAgICAgICAgICAgIHMgKz0gJyAnO1xuICAgICAgICAgICAgICBzICs9IGFbaV1bNF07XG5cbiAgICAgICAgICAgICAgaWYgKGFbaV1bNV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHMgKz0gJyAnO1xuICAgICAgICAgICAgICAgIHMgKz0gYVtpXVs1XTtcbiAgICAgICAgICAgICAgICBzICs9ICcgJztcbiAgICAgICAgICAgICAgICBzICs9IGFbaV1bNl07XG5cbiAgICAgICAgICAgICAgICBpZiAoYVtpXVs3XSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBzICs9ICcgJztcbiAgICAgICAgICAgICAgICAgIHMgKz0gYVtpXVs3XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMgKyAnICc7XG4gICAgfSAvLyBEZWVwIG5ldyBpZCBhc3NpZ25tZW50XG5cblxuICAgIGZ1bmN0aW9uIGFzc2lnbk5ld0lkKG5vZGUpIHtcbiAgICAgIC8vIGRvIHRoZSBzYW1lIGZvciBTVkcgY2hpbGQgbm9kZXMgYXMgd2VsbFxuICAgICAgZm9yICh2YXIgaSA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAobm9kZS5jaGlsZE5vZGVzW2ldIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQpIHtcbiAgICAgICAgICBhc3NpZ25OZXdJZChub2RlLmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBTVkcuYWRvcHQobm9kZSkuaWQoU1ZHLmVpZChub2RlLm5vZGVOYW1lKSk7XG4gICAgfSAvLyBBZGQgbW9yZSBib3VuZGluZyBib3ggcHJvcGVydGllc1xuXG5cbiAgICBmdW5jdGlvbiBmdWxsQm94KGIpIHtcbiAgICAgIGlmIChiLnggPT0gbnVsbCkge1xuICAgICAgICBiLnggPSAwO1xuICAgICAgICBiLnkgPSAwO1xuICAgICAgICBiLndpZHRoID0gMDtcbiAgICAgICAgYi5oZWlnaHQgPSAwO1xuICAgICAgfVxuXG4gICAgICBiLncgPSBiLndpZHRoO1xuICAgICAgYi5oID0gYi5oZWlnaHQ7XG4gICAgICBiLngyID0gYi54ICsgYi53aWR0aDtcbiAgICAgIGIueTIgPSBiLnkgKyBiLmhlaWdodDtcbiAgICAgIGIuY3ggPSBiLnggKyBiLndpZHRoIC8gMjtcbiAgICAgIGIuY3kgPSBiLnkgKyBiLmhlaWdodCAvIDI7XG4gICAgICByZXR1cm4gYjtcbiAgICB9IC8vIEdldCBpZCBmcm9tIHJlZmVyZW5jZSBzdHJpbmdcblxuXG4gICAgZnVuY3Rpb24gaWRGcm9tUmVmZXJlbmNlKHVybCkge1xuICAgICAgdmFyIG0gPSAodXJsIHx8ICcnKS50b1N0cmluZygpLm1hdGNoKFNWRy5yZWdleC5yZWZlcmVuY2UpO1xuICAgICAgaWYgKG0pIHJldHVybiBtWzFdO1xuICAgIH0gLy8gSWYgdmFsdWVzIGxpa2UgMWUtODggYXJlIHBhc3NlZCwgdGhpcyBpcyBub3QgYSB2YWxpZCAzMiBiaXQgZmxvYXQsXG4gICAgLy8gYnV0IGluIHRob3NlIGNhc2VzLCB3ZSBhcmUgc28gY2xvc2UgdG8gMCB0aGF0IDAgd29ya3Mgd2VsbCFcblxuXG4gICAgZnVuY3Rpb24gZmxvYXQzMlN0cmluZyh2KSB7XG4gICAgICByZXR1cm4gTWF0aC5hYnModikgPiAxZS0zNyA/IHYgOiAwO1xuICAgIH0gLy8gQ3JlYXRlIG1hdHJpeCBhcnJheSBmb3IgbG9vcGluZ1xuXG5cbiAgICB2YXIgYWJjZGVmID0gJ2FiY2RlZicuc3BsaXQoJycpOyAvLyBBZGQgQ3VzdG9tRXZlbnQgdG8gSUU5IGFuZCBJRTEwXG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQ29kZSBmcm9tOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnRcbiAgICAgIHZhciBDdXN0b21FdmVudFBvbHkgPSBmdW5jdGlvbiBDdXN0b21FdmVudFBvbHkoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge1xuICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgICAgIGRldGFpbDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICAgIGUuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBvcHRpb25zLmJ1YmJsZXMsIG9wdGlvbnMuY2FuY2VsYWJsZSwgb3B0aW9ucy5kZXRhaWwpO1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH07XG5cbiAgICAgIEN1c3RvbUV2ZW50UG9seS5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgICAgU1ZHLkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnRQb2x5O1xuICAgIH0gZWxzZSB7XG4gICAgICBTVkcuQ3VzdG9tRXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFNWRztcbiAgfSk7XG5cbiAgLyohIHN2Zy5maWx0ZXIuanMgLSB2Mi4wLjIgLSAyMDE2LTAyLTI0XHJcbiAgKiBodHRwczovL2dpdGh1Yi5jb20vd291dC9zdmcuZmlsdGVyLmpzXHJcbiAgKiBDb3B5cmlnaHQgKGMpIDIwMTYgV291dCBGaWVyZW5zOyBMaWNlbnNlZCBNSVQgKi9cclxuICAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgLy8gTWFpbiBmaWx0ZXIgY2xhc3NcclxuICAgIFNWRy5GaWx0ZXIgPSBTVkcuaW52ZW50KHtcclxuICAgICAgY3JlYXRlOiAnZmlsdGVyJyxcclxuICAgICAgaW5oZXJpdDogU1ZHLlBhcmVudCxcclxuICAgICAgZXh0ZW5kOiB7XHJcbiAgICAgICAgLy8gU3RhdGljIHN0cmluZ3NcclxuICAgICAgICBzb3VyY2U6ICAgICAgICAgICAnU291cmNlR3JhcGhpYycsXHJcbiAgICAgICAgc291cmNlQWxwaGE6ICAgICAgJ1NvdXJjZUFscGhhJyxcclxuICAgICAgICBiYWNrZ3JvdW5kOiAgICAgICAnQmFja2dyb3VuZEltYWdlJyxcclxuICAgICAgICBiYWNrZ3JvdW5kQWxwaGE6ICAnQmFja2dyb3VuZEFscGhhJyxcclxuICAgICAgICBmaWxsOiAgICAgICAgICAgICAnRmlsbFBhaW50JyxcclxuICAgICAgICBzdHJva2U6ICAgICAgICAgICAnU3Ryb2tlUGFpbnQnLFxyXG5cclxuICAgICAgICBhdXRvU2V0SW46IHRydWUsXHJcbiAgICAgICAgLy8gQ3VzdG9tIHB1dCBtZXRob2QgZm9yIGxlYW5lciBjb2RlXHJcbiAgICAgICAgcHV0OiBmdW5jdGlvbihlbGVtZW50LCBpKSB7XHJcbiAgICAgICAgICB0aGlzLmFkZChlbGVtZW50LCBpKTtcclxuXHJcbiAgICAgICAgICBpZighZWxlbWVudC5hdHRyKCdpbicpICYmIHRoaXMuYXV0b1NldEluKXtcclxuICAgICAgICAgICAgZWxlbWVudC5hdHRyKCdpbicsdGhpcy5zb3VyY2UpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoIWVsZW1lbnQuYXR0cigncmVzdWx0Jykpe1xyXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ3Jlc3VsdCcsZWxlbWVudCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIEJsZW5kIGVmZmVjdFxyXG4gICAgICAgIGJsZW5kOiBmdW5jdGlvbihpbjEsIGluMiwgbW9kZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuQmxlbmRFZmZlY3QoaW4xLCBpbjIsIG1vZGUpKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gQ29sb3JNYXRyaXggZWZmZWN0XHJcbiAgICAgICAgY29sb3JNYXRyaXg6IGZ1bmN0aW9uKHR5cGUsIHZhbHVlcykge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuQ29sb3JNYXRyaXhFZmZlY3QodHlwZSwgdmFsdWVzKSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIENvbnZvbHZlTWF0cml4IGVmZmVjdFxyXG4gICAgICAgIGNvbnZvbHZlTWF0cml4OiBmdW5jdGlvbihtYXRyaXgpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkNvbnZvbHZlTWF0cml4RWZmZWN0KG1hdHJpeCkpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBDb21wb25lbnRUcmFuc2ZlciBlZmZlY3RcclxuICAgICAgICBjb21wb25lbnRUcmFuc2ZlcjogZnVuY3Rpb24oY29tcG9uZW50cykge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuQ29tcG9uZW50VHJhbnNmZXJFZmZlY3QoY29tcG9uZW50cykpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBDb21wb3NpdGUgZWZmZWN0XHJcbiAgICAgICAgY29tcG9zaXRlOiBmdW5jdGlvbihpbjEsIGluMiwgb3BlcmF0b3IpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkNvbXBvc2l0ZUVmZmVjdChpbjEsIGluMiwgb3BlcmF0b3IpKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gRmxvb2QgZWZmZWN0XHJcbiAgICAgICAgZmxvb2Q6IGZ1bmN0aW9uKGNvbG9yLCBvcGFjaXR5KSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5GbG9vZEVmZmVjdChjb2xvciwgb3BhY2l0eSkpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBPZmZzZXQgZWZmZWN0XHJcbiAgICAgICAgb2Zmc2V0OiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5PZmZzZXRFZmZlY3QoeCx5KSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIEltYWdlIGVmZmVjdFxyXG4gICAgICAgIGltYWdlOiBmdW5jdGlvbihzcmMpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkltYWdlRWZmZWN0KHNyYykpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBNZXJnZSBlZmZlY3RcclxuICAgICAgICBtZXJnZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAvL3Bhc3MgdGhlIGFycmF5IG9mIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgYmVjYXVzZSB3ZSBkb250IGtub3cgaWYgdGhlIHVzZXIgZ2F2ZSB1cyBhbiBhcnJheSBhcyB0aGUgZmlyc3QgYXJndWVtbnQgb3Igd2V0aGVyIHRoZXkgbGlzdGVkIHRoZSBlZmZlY3RzIGluIHRoZSBhcmd1bWVudHNcclxuICAgICAgICAgIHZhciBhcmdzID0gW3VuZGVmaW5lZF07XHJcbiAgICAgICAgICBmb3IodmFyIGkgaW4gYXJndW1lbnRzKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgKFNWRy5NZXJnZUVmZmVjdC5iaW5kLmFwcGx5KFNWRy5NZXJnZUVmZmVjdCxhcmdzKSkpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBHYXVzc2lhbiBCbHVyIGVmZmVjdFxyXG4gICAgICAgIGdhdXNzaWFuQmx1cjogZnVuY3Rpb24oeCx5KSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5HYXVzc2lhbkJsdXJFZmZlY3QoeCx5KSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIE1vcnBob2xvZ3kgZWZmZWN0XHJcbiAgICAgICAgbW9ycGhvbG9neTogZnVuY3Rpb24ob3BlcmF0b3IscmFkaXVzKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLk1vcnBob2xvZ3lFZmZlY3Qob3BlcmF0b3IscmFkaXVzKSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIERpZmZ1c2VMaWdodGluZyBlZmZlY3RcclxuICAgICAgICBkaWZmdXNlTGlnaHRpbmc6IGZ1bmN0aW9uKHN1cmZhY2VTY2FsZSxkaWZmdXNlQ29uc3RhbnQsa2VybmVsVW5pdExlbmd0aCl7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5EaWZmdXNlTGlnaHRpbmdFZmZlY3Qoc3VyZmFjZVNjYWxlLGRpZmZ1c2VDb25zdGFudCxrZXJuZWxVbml0TGVuZ3RoKSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIERpc3BsYWNlbWVudE1hcCBlZmZlY3RcclxuICAgICAgICBkaXNwbGFjZW1lbnRNYXA6IGZ1bmN0aW9uKGluMSxpbjIsc2NhbGUseENoYW5uZWxTZWxlY3Rvcix5Q2hhbm5lbFNlbGVjdG9yKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkRpc3BsYWNlbWVudE1hcEVmZmVjdChpbjEsaW4yLHNjYWxlLHhDaGFubmVsU2VsZWN0b3IseUNoYW5uZWxTZWxlY3RvcikpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBTcGVjdWxhckxpZ2h0aW5nIGVmZmVjdFxyXG4gICAgICAgIHNwZWN1bGFyTGlnaHRpbmc6IGZ1bmN0aW9uKHN1cmZhY2VTY2FsZSxkaWZmdXNlQ29uc3RhbnQsc3BlY3VsYXJFeHBvbmVudCxrZXJuZWxVbml0TGVuZ3RoKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlNwZWN1bGFyTGlnaHRpbmdFZmZlY3Qoc3VyZmFjZVNjYWxlLGRpZmZ1c2VDb25zdGFudCxzcGVjdWxhckV4cG9uZW50LGtlcm5lbFVuaXRMZW5ndGgpKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gVGlsZSBlZmZlY3RcclxuICAgICAgICB0aWxlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuVGlsZUVmZmVjdCgpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIFR1cmJ1bGVuY2UgZWZmZWN0XHJcbiAgICAgICAgdHVyYnVsZW5jZTogZnVuY3Rpb24oYmFzZUZyZXF1ZW5jeSxudW1PY3RhdmVzLHNlZWQsc3RpdGNoVGlsZXMsdHlwZSl7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5UdXJidWxlbmNlRWZmZWN0KGJhc2VGcmVxdWVuY3ksbnVtT2N0YXZlcyxzZWVkLHN0aXRjaFRpbGVzLHR5cGUpKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gRGVmYXVsdCBzdHJpbmcgdmFsdWVcclxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ3VybCgjJyArIHRoaXMuYXR0cignaWQnKSArICcpJ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy9hZGQgLmZpbHRlciBmdW5jdGlvblxyXG4gICAgU1ZHLmV4dGVuZChTVkcuRGVmcywge1xyXG4gICAgICAvLyBEZWZpbmUgZmlsdGVyXHJcbiAgICAgIGZpbHRlcjogZnVuY3Rpb24oYmxvY2spIHtcclxuICAgICAgICB2YXIgZmlsdGVyID0gdGhpcy5wdXQobmV3IFNWRy5GaWx0ZXIpO1xyXG5cclxuICAgICAgICAvKiBpbnZva2UgcGFzc2VkIGJsb2NrICovXHJcbiAgICAgICAgaWYgKHR5cGVvZiBibG9jayA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgIGJsb2NrLmNhbGwoZmlsdGVyLCBmaWx0ZXIpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmlsdGVyXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgU1ZHLmV4dGVuZChTVkcuQ29udGFpbmVyLCB7XHJcbiAgICAgIC8vIERlZmluZSBmaWx0ZXIgb24gZGVmc1xyXG4gICAgICBmaWx0ZXI6IGZ1bmN0aW9uKGJsb2NrKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLmZpbHRlcihibG9jaylcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBTVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCBTVkcuRywgU1ZHLk5lc3RlZCwge1xyXG4gICAgICAvLyBDcmVhdGUgZmlsdGVyIGVsZW1lbnQgaW4gZGVmcyBhbmQgc3RvcmUgcmVmZXJlbmNlXHJcbiAgICAgIGZpbHRlcjogZnVuY3Rpb24oYmxvY2spIHtcclxuICAgICAgICB0aGlzLmZpbHRlcmVyID0gYmxvY2sgaW5zdGFuY2VvZiBTVkcuRWxlbWVudCA/XHJcbiAgICAgICAgICBibG9jayA6IHRoaXMuZG9jKCkuZmlsdGVyKGJsb2NrKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5kb2MoKSAmJiB0aGlzLmZpbHRlcmVyLmRvYygpICE9PSB0aGlzLmRvYygpKXtcclxuICAgICAgICAgIHRoaXMuZG9jKCkuZGVmcygpLmFkZCh0aGlzLmZpbHRlcmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXR0cignZmlsdGVyJywgdGhpcy5maWx0ZXJlcik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcmVyXHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIFJlbW92ZSBmaWx0ZXJcclxuICAgICAgdW5maWx0ZXI6IGZ1bmN0aW9uKHJlbW92ZSkge1xyXG4gICAgICAgIC8qIGFsc28gcmVtb3ZlIHRoZSBmaWx0ZXIgbm9kZSAqL1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcmVyICYmIHJlbW92ZSA9PT0gdHJ1ZSlcclxuICAgICAgICAgIHRoaXMuZmlsdGVyZXIucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIC8qIGRlbGV0ZSByZWZlcmVuY2UgdG8gZmlsdGVyZXIgKi9cclxuICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJlcjtcclxuXHJcbiAgICAgICAgLyogcmVtb3ZlIGZpbHRlciBhdHRyaWJ1dGUgKi9cclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCdmaWx0ZXInLCBudWxsKVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDcmVhdGUgU1ZHLkVmZmVjdCBjbGFzc1xyXG4gICAgU1ZHLkVmZmVjdCA9IFNWRy5pbnZlbnQoe1xyXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xyXG4gICAgICB9LFxyXG4gICAgICBpbmhlcml0OiBTVkcuRWxlbWVudCxcclxuICAgICAgZXh0ZW5kOiB7XHJcbiAgICAgICAgLy8gU2V0IGluIGF0dHJpYnV0ZVxyXG4gICAgICAgIGluOiBmdW5jdGlvbihlZmZlY3QpIHtcclxuICAgICAgICAgIHJldHVybiBlZmZlY3QgPT0gbnVsbD8gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLnNlbGVjdCgnW3Jlc3VsdD1cIicrdGhpcy5hdHRyKCdpbicpKydcIl0nKS5nZXQoMCkgfHwgdGhpcy5hdHRyKCdpbicpIDogdGhpcy5hdHRyKCdpbicsIGVmZmVjdClcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIE5hbWVkIHJlc3VsdFxyXG4gICAgICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ID09IG51bGw/IHRoaXMuYXR0cigncmVzdWx0JykgOiB0aGlzLmF0dHIoJ3Jlc3VsdCcscmVzdWx0KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gU3RyaW5naWZpY2F0aW9uXHJcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0KClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBjbGFzcyBmb3IgcGFyZW50IGVmZmVjdHMgbGlrZSBtZXJnZVxyXG4gICAgLy8gSW5oZXJpdCBmcm9tIFNWRy5QYXJlbnRcclxuICAgIFNWRy5QYXJlbnRFZmZlY3QgPSBTVkcuaW52ZW50KHtcclxuICAgICAgY3JlYXRlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcclxuICAgICAgfSxcclxuICAgICAgaW5oZXJpdDogU1ZHLlBhcmVudCxcclxuICAgICAgZXh0ZW5kOiB7XHJcbiAgICAgICAgLy8gU2V0IGluIGF0dHJpYnV0ZVxyXG4gICAgICAgIGluOiBmdW5jdGlvbihlZmZlY3QpIHtcclxuICAgICAgICAgIHJldHVybiBlZmZlY3QgPT0gbnVsbD8gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLnNlbGVjdCgnW3Jlc3VsdD1cIicrdGhpcy5hdHRyKCdpbicpKydcIl0nKS5nZXQoMCkgfHwgdGhpcy5hdHRyKCdpbicpIDogdGhpcy5hdHRyKCdpbicsIGVmZmVjdClcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIE5hbWVkIHJlc3VsdFxyXG4gICAgICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ID09IG51bGw/IHRoaXMuYXR0cigncmVzdWx0JykgOiB0aGlzLmF0dHIoJ3Jlc3VsdCcscmVzdWx0KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gU3RyaW5naWZpY2F0aW9uXHJcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0KClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vY2hhaW5pbmdcclxuICAgIHZhciBjaGFpbmluZ0VmZmVjdHMgPSB7XHJcbiAgICAgIC8vIEJsZW5kIGVmZmVjdFxyXG4gICAgICBibGVuZDogZnVuY3Rpb24oaW4yLCBtb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50KCkgJiYgdGhpcy5wYXJlbnQoKS5ibGVuZCh0aGlzLCBpbjIsIG1vZGUpIC8vcGFzcyB0aGlzIGFzIHRoZSBmaXJzdCBpbnB1dFxyXG4gICAgICB9LFxyXG4gICAgICAvLyBDb2xvck1hdHJpeCBlZmZlY3RcclxuICAgICAgY29sb3JNYXRyaXg6IGZ1bmN0aW9uKHR5cGUsIHZhbHVlcykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCgpICYmIHRoaXMucGFyZW50KCkuY29sb3JNYXRyaXgodHlwZSwgdmFsdWVzKS5pbih0aGlzKVxyXG4gICAgICB9LFxyXG4gICAgICAvLyBDb252b2x2ZU1hdHJpeCBlZmZlY3RcclxuICAgICAgY29udm9sdmVNYXRyaXg6IGZ1bmN0aW9uKG1hdHJpeCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCgpICYmIHRoaXMucGFyZW50KCkuY29udm9sdmVNYXRyaXgobWF0cml4KS5pbih0aGlzKVxyXG4gICAgICB9LFxyXG4gICAgICAvLyBDb21wb25lbnRUcmFuc2ZlciBlZmZlY3RcclxuICAgICAgY29tcG9uZW50VHJhbnNmZXI6IGZ1bmN0aW9uKGNvbXBvbmVudHMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLmNvbXBvbmVudFRyYW5zZmVyKGNvbXBvbmVudHMpLmluKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIENvbXBvc2l0ZSBlZmZlY3RcclxuICAgICAgY29tcG9zaXRlOiBmdW5jdGlvbihpbjIsIG9wZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50KCkgJiYgdGhpcy5wYXJlbnQoKS5jb21wb3NpdGUodGhpcywgaW4yLCBvcGVyYXRvcikgLy9wYXNzIHRoaXMgYXMgdGhlIGZpcnN0IGlucHV0XHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIEZsb29kIGVmZmVjdFxyXG4gICAgICBmbG9vZDogZnVuY3Rpb24oY29sb3IsIG9wYWNpdHkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLmZsb29kKGNvbG9yLCBvcGFjaXR5KSAvL3RoaXMgZWZmZWN0IGRvbnQgaGF2ZSBpbnB1dHNcclxuICAgICAgfSxcclxuICAgICAgLy8gT2Zmc2V0IGVmZmVjdFxyXG4gICAgICBvZmZzZXQ6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLm9mZnNldCh4LHkpLmluKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIEltYWdlIGVmZmVjdFxyXG4gICAgICBpbWFnZTogZnVuY3Rpb24oc3JjKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50KCkgJiYgdGhpcy5wYXJlbnQoKS5pbWFnZShzcmMpIC8vdGhpcyBlZmZlY3QgZG9udCBoYXZlIGlucHV0c1xyXG4gICAgICB9LFxyXG4gICAgICAvLyBNZXJnZSBlZmZlY3RcclxuICAgICAgbWVyZ2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCgpICYmIHRoaXMucGFyZW50KCkubWVyZ2UuYXBwbHkodGhpcy5wYXJlbnQoKSxbdGhpc10uY29uY2F0KGFyZ3VtZW50cykpIC8vcGFzcyB0aGlzIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxyXG4gICAgICB9LFxyXG4gICAgICAvLyBHYXVzc2lhbiBCbHVyIGVmZmVjdFxyXG4gICAgICBnYXVzc2lhbkJsdXI6IGZ1bmN0aW9uKHgseSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCgpICYmIHRoaXMucGFyZW50KCkuZ2F1c3NpYW5CbHVyKHgseSkuaW4odGhpcylcclxuICAgICAgfSxcclxuICAgICAgLy8gTW9ycGhvbG9neSBlZmZlY3RcclxuICAgICAgbW9ycGhvbG9neTogZnVuY3Rpb24ob3BlcmF0b3IscmFkaXVzKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLm1vcnBob2xvZ3kob3BlcmF0b3IscmFkaXVzKS5pbih0aGlzKVxyXG4gICAgICB9LFxyXG4gICAgICAvLyBEaWZmdXNlTGlnaHRpbmcgZWZmZWN0XHJcbiAgICAgIGRpZmZ1c2VMaWdodGluZzogZnVuY3Rpb24oc3VyZmFjZVNjYWxlLGRpZmZ1c2VDb25zdGFudCxrZXJuZWxVbml0TGVuZ3RoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLmRpZmZ1c2VMaWdodGluZyhzdXJmYWNlU2NhbGUsZGlmZnVzZUNvbnN0YW50LGtlcm5lbFVuaXRMZW5ndGgpLmluKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIERpc3BsYWNlbWVudE1hcCBlZmZlY3RcclxuICAgICAgZGlzcGxhY2VtZW50TWFwOiBmdW5jdGlvbihpbjIsc2NhbGUseENoYW5uZWxTZWxlY3Rvcix5Q2hhbm5lbFNlbGVjdG9yKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKSAmJiB0aGlzLnBhcmVudCgpLmRpc3BsYWNlbWVudE1hcCh0aGlzLGluMixzY2FsZSx4Q2hhbm5lbFNlbGVjdG9yLHlDaGFubmVsU2VsZWN0b3IpIC8vcGFzcyB0aGlzIGFzIHRoZSBmaXJzdCBpbnB1dFxyXG4gICAgICB9LFxyXG4gICAgICAvLyBTcGVjdWxhckxpZ2h0aW5nIGVmZmVjdFxyXG4gICAgICBzcGVjdWxhckxpZ2h0aW5nOiBmdW5jdGlvbihzdXJmYWNlU2NhbGUsZGlmZnVzZUNvbnN0YW50LHNwZWN1bGFyRXhwb25lbnQsa2VybmVsVW5pdExlbmd0aCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50KCkgJiYgdGhpcy5wYXJlbnQoKS5zcGVjdWxhckxpZ2h0aW5nKHN1cmZhY2VTY2FsZSxkaWZmdXNlQ29uc3RhbnQsc3BlY3VsYXJFeHBvbmVudCxrZXJuZWxVbml0TGVuZ3RoKS5pbih0aGlzKVxyXG4gICAgICB9LFxyXG4gICAgICAvLyBUaWxlIGVmZmVjdFxyXG4gICAgICB0aWxlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCgpICYmIHRoaXMucGFyZW50KCkudGlsZSgpLmluKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIFR1cmJ1bGVuY2UgZWZmZWN0XHJcbiAgICAgIHR1cmJ1bGVuY2U6IGZ1bmN0aW9uKGJhc2VGcmVxdWVuY3ksbnVtT2N0YXZlcyxzZWVkLHN0aXRjaFRpbGVzLHR5cGUpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCgpICYmIHRoaXMucGFyZW50KCkudHVyYnVsZW5jZShiYXNlRnJlcXVlbmN5LG51bU9jdGF2ZXMsc2VlZCxzdGl0Y2hUaWxlcyx0eXBlKS5pbih0aGlzKVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgU1ZHLmV4dGVuZChTVkcuRWZmZWN0LGNoYWluaW5nRWZmZWN0cyk7XHJcbiAgICBTVkcuZXh0ZW5kKFNWRy5QYXJlbnRFZmZlY3QsY2hhaW5pbmdFZmZlY3RzKTtcclxuXHJcbiAgICAvL2NyZWEgY2xhc3MgZm9yIGNoaWxkIGVmZmVjdHMsIGxpa2UgTWVyZ2VOb2RlLCBGdW5jUiBhbmQgbGlnaHRzXHJcbiAgICBTVkcuQ2hpbGRFZmZlY3QgPSBTVkcuaW52ZW50KHtcclxuICAgICAgY3JlYXRlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcclxuICAgICAgfSxcclxuICAgICAgaW5oZXJpdDogU1ZHLkVsZW1lbnQsXHJcbiAgICAgIGV4dGVuZDoge1xyXG4gICAgICBpbjogZnVuY3Rpb24oZWZmZWN0KXtcclxuICAgICAgICB0aGlzLmF0dHIoJ2luJyxlZmZlY3QpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vZG9udCBpbmNsdWRlIGFueSBcInJlc3VsdFwiIGZ1bmN0aW9ucyBiZWNhdXNlIHRoZXNlIHR5cGVzIG9mIG5vZGVzIGRvbnQgaGF2ZSB0aGVtXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhbGwgZGlmZmVyZW50IGVmZmVjdHNcclxuICAgIHZhciBlZmZlY3RzID0ge1xyXG4gICAgICBibGVuZDogZnVuY3Rpb24oaW4xLGluMixtb2RlKXtcclxuICAgICAgICB0aGlzLmF0dHIoe1xyXG4gICAgICAgICAgaW46IGluMSxcclxuICAgICAgICAgIGluMjogaW4yLFxyXG4gICAgICAgICAgbW9kZTogbW9kZSB8fCAnbm9ybWFsJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICBjb2xvck1hdHJpeDogZnVuY3Rpb24odHlwZSx2YWx1ZXMpe1xyXG4gICAgICAgIGlmICh0eXBlID09ICdtYXRyaXgnKVxyXG4gICAgICAgICAgdmFsdWVzID0gbm9ybWFsaXNlTWF0cml4KHZhbHVlcyk7XHJcblxyXG4gICAgICAgIHRoaXMuYXR0cih7XHJcbiAgICAgICAgICB0eXBlOiAgIHR5cGVcclxuICAgICAgICAsIHZhbHVlczogdHlwZW9mIHZhbHVlcyA9PSAndW5kZWZpbmVkJyA/IG51bGwgOiB2YWx1ZXNcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgY29udm9sdmVNYXRyaXg6IGZ1bmN0aW9uKG1hdHJpeCl7XHJcbiAgICAgICAgbWF0cml4ID0gbm9ybWFsaXNlTWF0cml4KG1hdHJpeCk7XHJcblxyXG4gICAgICAgIHRoaXMuYXR0cih7XHJcbiAgICAgICAgICBvcmRlcjogICAgICAgIE1hdGguc3FydChtYXRyaXguc3BsaXQoJyAnKS5sZW5ndGgpXHJcbiAgICAgICAgLCBrZXJuZWxNYXRyaXg6IG1hdHJpeFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICBjb21wb3NpdGU6IGZ1bmN0aW9uKGluMSwgaW4yLCBvcGVyYXRvcil7XHJcbiAgICAgICAgdGhpcy5hdHRyKHtcclxuICAgICAgICAgIGluOiBpbjEsXHJcbiAgICAgICAgICBpbjI6IGluMixcclxuICAgICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvclxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICBmbG9vZDogZnVuY3Rpb24oY29sb3Isb3BhY2l0eSl7XHJcbiAgICAgICAgdGhpcy5hdHRyKCdmbG9vZC1jb2xvcicsY29sb3IpO1xyXG4gICAgICAgIGlmKG9wYWNpdHkgIT0gbnVsbCkgdGhpcy5hdHRyKCdmbG9vZC1vcGFjaXR5JyxvcGFjaXR5KTtcclxuICAgICAgfSxcclxuICAgICAgb2Zmc2V0OiBmdW5jdGlvbih4LHkpe1xyXG4gICAgICAgIHRoaXMuYXR0cih7XHJcbiAgICAgICAgICBkeDogeCxcclxuICAgICAgICAgIGR5OiB5XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGltYWdlOiBmdW5jdGlvbihzcmMpe1xyXG4gICAgICAgIHRoaXMuYXR0cignaHJlZicsIHNyYywgU1ZHLnhsaW5rKTtcclxuICAgICAgfSxcclxuICAgICAgZGlzcGxhY2VtZW50TWFwOiBmdW5jdGlvbihpbjEsaW4yLHNjYWxlLHhDaGFubmVsU2VsZWN0b3IseUNoYW5uZWxTZWxlY3Rvcil7XHJcbiAgICAgICAgdGhpcy5hdHRyKHtcclxuICAgICAgICAgIGluOiBpbjEsXHJcbiAgICAgICAgICBpbjI6IGluMixcclxuICAgICAgICAgIHNjYWxlOiBzY2FsZSxcclxuICAgICAgICAgIHhDaGFubmVsU2VsZWN0b3I6IHhDaGFubmVsU2VsZWN0b3IsXHJcbiAgICAgICAgICB5Q2hhbm5lbFNlbGVjdG9yOiB5Q2hhbm5lbFNlbGVjdG9yXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdhdXNzaWFuQmx1cjogZnVuY3Rpb24oeCx5KXtcclxuICAgICAgICBpZih4ICE9IG51bGwgfHwgeSAhPSBudWxsKVxyXG4gICAgICAgICAgdGhpcy5hdHRyKCdzdGREZXZpYXRpb24nLCBsaXN0U3RyaW5nKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICB0aGlzLmF0dHIoJ3N0ZERldmlhdGlvbicsICcwIDAnKTtcclxuICAgICAgfSxcclxuICAgICAgbW9ycGhvbG9neTogZnVuY3Rpb24ob3BlcmF0b3IscmFkaXVzKXtcclxuICAgICAgICB0aGlzLmF0dHIoe1xyXG4gICAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxyXG4gICAgICAgICAgcmFkaXVzOiByYWRpdXNcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgdGlsZTogZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgIH0sXHJcbiAgICAgIHR1cmJ1bGVuY2U6IGZ1bmN0aW9uKGJhc2VGcmVxdWVuY3ksbnVtT2N0YXZlcyxzZWVkLHN0aXRjaFRpbGVzLHR5cGUpe1xyXG4gICAgICAgIHRoaXMuYXR0cih7XHJcbiAgICAgICAgICBudW1PY3RhdmVzOiBudW1PY3RhdmVzLFxyXG4gICAgICAgICAgc2VlZDogc2VlZCxcclxuICAgICAgICAgIHN0aXRjaFRpbGVzOiBzdGl0Y2hUaWxlcyxcclxuICAgICAgICAgIGJhc2VGcmVxdWVuY3k6IGJhc2VGcmVxdWVuY3ksXHJcbiAgICAgICAgICB0eXBlOiB0eXBlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFsbCBwYXJlbnQgZWZmZWN0c1xyXG4gICAgdmFyIHBhcmVudEVmZmVjdHMgPSB7XHJcbiAgICAgIG1lcmdlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBjaGlsZHJlbjtcclxuXHJcbiAgICAgICAgLy90ZXN0IHRvIHNlZSBpZiB3ZSBoYXZlIGEgc2V0XHJcbiAgICAgICAgaWYoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgU1ZHLlNldCl7XHJcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICBhcmd1bWVudHNbMF0uZWFjaChmdW5jdGlvbihpKXtcclxuICAgICAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIFNWRy5NZXJnZU5vZGUpXHJcbiAgICAgICAgICAgICAgdGhhdC5wdXQodGhpcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYodGhpcyBpbnN0YW5jZW9mIFNWRy5FZmZlY3QgfHwgdGhpcyBpbnN0YW5jZW9mIFNWRy5QYXJlbnRFZmZlY3QpXHJcbiAgICAgICAgICAgICAgdGhhdC5wdXQobmV3IFNWRy5NZXJnZU5vZGUodGhpcykpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAvL2lmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhbiBhcnJheSB1c2UgaXRcclxuICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzBdKSlcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBhcmd1bWVudHNbMF07XHJcbiAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gYXJndW1lbnRzO1xyXG5cclxuICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGlmKGNoaWxkcmVuW2ldIGluc3RhbmNlb2YgU1ZHLk1lcmdlTm9kZSl7XHJcbiAgICAgICAgICAgICAgdGhpcy5wdXQoY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgdGhpcy5wdXQobmV3IFNWRy5NZXJnZU5vZGUoY2hpbGRyZW5baV0pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbXBvbmVudFRyYW5zZmVyOiBmdW5jdGlvbihjb21wb250ZW50cyl7XHJcbiAgICAgICAgLyogY3JlYXRlIHJnYiBzZXQgKi9cclxuICAgICAgICB0aGlzLnJnYiA9IG5ldyBTVkcuU2V0XHJcblxyXG4gICAgICAgIC8qIGNyZWF0ZSBjb21wb25lbnRzICovXHJcbiAgICAgICAgOyhbJ3InLCAnZycsICdiJywgJ2EnXSkuZm9yRWFjaChmdW5jdGlvbihjKSB7XHJcbiAgICAgICAgICAvKiBjcmVhdGUgY29tcG9uZW50ICovXHJcbiAgICAgICAgICB0aGlzW2NdID0gbmV3IFNWR1snRnVuYycgKyBjLnRvVXBwZXJDYXNlKCldKCdpZGVudGl0eScpO1xyXG5cclxuICAgICAgICAgIC8qIHN0b3JlIGNvbXBvbmVudCBpbiBzZXQgKi9cclxuICAgICAgICAgIHRoaXMucmdiLmFkZCh0aGlzW2NdKTtcclxuXHJcbiAgICAgICAgICAvKiBhZGQgY29tcG9uZW50IG5vZGUgKi9cclxuICAgICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0aGlzW2NdLm5vZGUpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7IC8vbG9zdCBjb250ZXh0IGluIGZvcmVhY2hcclxuXHJcbiAgICAgICAgLyogc2V0IGNvbXBvbmVudHMgKi9cclxuICAgICAgICBpZiAoY29tcG9udGVudHMpIHtcclxuICAgICAgICAgIGlmIChjb21wb250ZW50cy5yZ2IpIHtcclxuICAoWydyJywgJ2cnLCAnYiddKS5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcclxuICAgICAgICAgICAgICB0aGlzW2NdLmF0dHIoY29tcG9udGVudHMucmdiKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIGRlbGV0ZSBjb21wb250ZW50cy5yZ2I7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLyogc2V0IGluZGl2aWR1YWwgY29tcG9uZW50cyAqL1xyXG4gICAgICAgICAgZm9yICh2YXIgYyBpbiBjb21wb250ZW50cylcclxuICAgICAgICAgICAgdGhpc1tjXS5hdHRyKGNvbXBvbnRlbnRzW2NdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGRpZmZ1c2VMaWdodGluZzogZnVuY3Rpb24oc3VyZmFjZVNjYWxlLGRpZmZ1c2VDb25zdGFudCxrZXJuZWxVbml0TGVuZ3RoKXtcclxuICAgICAgICB0aGlzLmF0dHIoe1xyXG4gICAgICAgICAgc3VyZmFjZVNjYWxlOiBzdXJmYWNlU2NhbGUsXHJcbiAgICAgICAgICBkaWZmdXNlQ29uc3RhbnQ6IGRpZmZ1c2VDb25zdGFudCxcclxuICAgICAgICAgIGtlcm5lbFVuaXRMZW5ndGg6IGtlcm5lbFVuaXRMZW5ndGhcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgc3BlY3VsYXJMaWdodGluZzogZnVuY3Rpb24oc3VyZmFjZVNjYWxlLGRpZmZ1c2VDb25zdGFudCxzcGVjdWxhckV4cG9uZW50LGtlcm5lbFVuaXRMZW5ndGgpe1xyXG4gICAgICAgIHRoaXMuYXR0cih7XHJcbiAgICAgICAgICBzdXJmYWNlU2NhbGU6IHN1cmZhY2VTY2FsZSxcclxuICAgICAgICAgIGRpZmZ1c2VDb25zdGFudDogZGlmZnVzZUNvbnN0YW50LFxyXG4gICAgICAgICAgc3BlY3VsYXJFeHBvbmVudDogc3BlY3VsYXJFeHBvbmVudCxcclxuICAgICAgICAgIGtlcm5lbFVuaXRMZW5ndGg6IGtlcm5lbFVuaXRMZW5ndGhcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIGNoaWxkIGVmZmVjdHMgbGlrZSBQb2ludExpZ2h0IGFuZCBNZXJnZU5vZGVcclxuICAgIHZhciBjaGlsZEVmZmVjdHMgPSB7XHJcbiAgICAgIGRpc3RhbnRMaWdodDogZnVuY3Rpb24oYXppbXV0aCwgZWxldmF0aW9uKXtcclxuICAgICAgICB0aGlzLmF0dHIoe1xyXG4gICAgICAgICAgYXppbXV0aDogYXppbXV0aCxcclxuICAgICAgICAgIGVsZXZhdGlvbjogZWxldmF0aW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHBvaW50TGlnaHQ6IGZ1bmN0aW9uKHgseSx6KXtcclxuICAgICAgICB0aGlzLmF0dHIoe1xyXG4gICAgICAgICAgeDogeCxcclxuICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICB6OiB6XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNwb3RMaWdodDogZnVuY3Rpb24oeCx5LHoscG9pbnRzQXRYLHBvaW50c0F0WSxwb2ludHNBdFope1xyXG4gICAgICAgIHRoaXMuYXR0cih7XHJcbiAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgeTogeSxcclxuICAgICAgICAgIHo6IHosXHJcbiAgICAgICAgICBwb2ludHNBdFg6IHBvaW50c0F0WCxcclxuICAgICAgICAgIHBvaW50c0F0WTogcG9pbnRzQXRZLFxyXG4gICAgICAgICAgcG9pbnRzQXRaOiBwb2ludHNBdFpcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgbWVyZ2VOb2RlOiBmdW5jdGlvbihpbjEpe1xyXG4gICAgICAgIHRoaXMuYXR0cignaW4nLGluMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGUgY29tcG9udGVudCBmdW5jdGlvbnNcclxuICAgIDsoWydyJywgJ2cnLCAnYicsICdhJ10pLmZvckVhY2goZnVuY3Rpb24oYykge1xyXG4gICAgICAvKiBjcmVhdGUgY2xhc3MgKi9cclxuICAgICAgY2hpbGRFZmZlY3RzWydGdW5jJyArIGMudG9VcHBlckNhc2UoKV0gPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5hdHRyKCd0eXBlJyx0eXBlKTtcclxuXHJcbiAgICAgICAgLy8gdGFrZSBkaWZmZW50IGFyZ3VtZW50cyBiYXNlZCBvbiB0aGUgdHlwZVxyXG4gICAgICAgIHN3aXRjaCh0eXBlKXtcclxuICAgICAgICAgIGNhc2UgJ3RhYmxlJzpcclxuICAgICAgICAgICAgdGhpcy5hdHRyKCd0YWJsZVZhbHVlcycsYXJndW1lbnRzWzFdKTtcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIGNhc2UgJ2xpbmVhcic6XHJcbiAgICAgICAgICAgIHRoaXMuYXR0cignc2xvcGUnLGFyZ3VtZW50c1sxXSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0cignaW50ZXJjZXB0Jyxhcmd1bWVudHNbMl0pO1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSAnZ2FtbWEnOlxyXG4gICAgICAgICAgICB0aGlzLmF0dHIoJ2FtcGxpdHVkZScsYXJndW1lbnRzWzFdKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRyKCdleHBvbmVudCcsYXJndW1lbnRzWzJdKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRyKCdvZmZzZXQnLGFyZ3VtZW50c1syXSk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9jcmVhdGUgZWZmZWN0c1xyXG4gICAgZm9yZWFjaChlZmZlY3RzLGZ1bmN0aW9uKGVmZmVjdCxpKXtcclxuXHJcbiAgICAgIC8qIGNhcGl0YWxpemUgbmFtZSAqL1xyXG4gICAgICB2YXIgbmFtZSA9IGkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBpLnNsaWNlKDEpO1xyXG4gICAgICB2YXIgcHJvdG8gPSB7fTtcclxuXHJcbiAgICAgIC8qIGNyZWF0ZSBjbGFzcyAqL1xyXG4gICAgICBTVkdbbmFtZSArICdFZmZlY3QnXSA9IFNWRy5pbnZlbnQoe1xyXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAvL2NhbGwgc3VwZXJcclxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdmZScgKyBuYW1lKSk7XHJcblxyXG4gICAgICAgICAgLy9jYWxsIGNvbnN0cnVjdG9yIGZvciB0aGlzIGVmZmVjdFxyXG4gICAgICAgICAgZWZmZWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtcclxuXHJcbiAgICAgICAgICAvL3NldCB0aGUgcmVzdWx0XHJcbiAgICAgICAgICB0aGlzLnJlc3VsdCh0aGlzLmF0dHIoJ2lkJykgKyAnT3V0Jyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmhlcml0OiBTVkcuRWZmZWN0LFxyXG4gICAgICAgIGV4dGVuZDogcHJvdG9cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL2NyZWF0ZSBwYXJlbnQgZWZmZWN0c1xyXG4gICAgZm9yZWFjaChwYXJlbnRFZmZlY3RzLGZ1bmN0aW9uKGVmZmVjdCxpKXtcclxuXHJcbiAgICAgIC8qIGNhcGl0YWxpemUgbmFtZSAqL1xyXG4gICAgICB2YXIgbmFtZSA9IGkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBpLnNsaWNlKDEpO1xyXG4gICAgICB2YXIgcHJvdG8gPSB7fTtcclxuXHJcbiAgICAgIC8qIGNyZWF0ZSBjbGFzcyAqL1xyXG4gICAgICBTVkdbbmFtZSArICdFZmZlY3QnXSA9IFNWRy5pbnZlbnQoe1xyXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAvL2NhbGwgc3VwZXJcclxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdmZScgKyBuYW1lKSk7XHJcblxyXG4gICAgICAgICAgLy9jYWxsIGNvbnN0cnVjdG9yIGZvciB0aGlzIGVmZmVjdFxyXG4gICAgICAgICAgZWZmZWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtcclxuXHJcbiAgICAgICAgICAvL3NldCB0aGUgcmVzdWx0XHJcbiAgICAgICAgICB0aGlzLnJlc3VsdCh0aGlzLmF0dHIoJ2lkJykgKyAnT3V0Jyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmhlcml0OiBTVkcuUGFyZW50RWZmZWN0LFxyXG4gICAgICAgIGV4dGVuZDogcHJvdG9cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL2NyZWF0ZSBjaGlsZCBlZmZlY3RzXHJcbiAgICBmb3JlYWNoKGNoaWxkRWZmZWN0cyxmdW5jdGlvbihlZmZlY3QsaSl7XHJcblxyXG4gICAgICAvKiBjYXBpdGFsaXplIG5hbWUgKi9cclxuICAgICAgdmFyIG5hbWUgPSBpLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgaS5zbGljZSgxKTtcclxuICAgICAgdmFyIHByb3RvID0ge307XHJcblxyXG4gICAgICAvKiBjcmVhdGUgY2xhc3MgKi9cclxuICAgICAgU1ZHW25hbWVdID0gU1ZHLmludmVudCh7XHJcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vY2FsbCBzdXBlclxyXG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoJ2ZlJyArIG5hbWUpKTtcclxuXHJcbiAgICAgICAgICAvL2NhbGwgY29uc3RydWN0b3IgZm9yIHRoaXMgZWZmZWN0XHJcbiAgICAgICAgICBlZmZlY3QuYXBwbHkodGhpcyxhcmd1bWVudHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5oZXJpdDogU1ZHLkNoaWxkRWZmZWN0LFxyXG4gICAgICAgIGV4dGVuZDogcHJvdG9cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBFZmZlY3Qtc3BlY2lmaWMgZXh0ZW5zaW9uc1xyXG4gICAgU1ZHLmV4dGVuZChTVkcuTWVyZ2VFZmZlY3Qse1xyXG4gICAgICBpbjogZnVuY3Rpb24oZWZmZWN0KXtcclxuICAgICAgICBpZihlZmZlY3QgaW5zdGFuY2VvZiBTVkcuTWVyZ2VOb2RlKVxyXG4gICAgICAgICAgdGhpcy5hZGQoZWZmZWN0LDApO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHRoaXMuYWRkKG5ldyBTVkcuTWVyZ2VOb2RlKGVmZmVjdCksMCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgU1ZHLmV4dGVuZChTVkcuQ29tcG9zaXRlRWZmZWN0LFNWRy5CbGVuZEVmZmVjdCxTVkcuRGlzcGxhY2VtZW50TWFwRWZmZWN0LHtcclxuICAgICAgaW4yOiBmdW5jdGlvbihlZmZlY3Qpe1xyXG4gICAgICAgICAgcmV0dXJuIGVmZmVjdCA9PSBudWxsPyB0aGlzLnBhcmVudCgpICYmIHRoaXMucGFyZW50KCkuc2VsZWN0KCdbcmVzdWx0PVwiJyt0aGlzLmF0dHIoJ2luMicpKydcIl0nKS5nZXQoMCkgfHwgdGhpcy5hdHRyKCdpbjInKSA6IHRoaXMuYXR0cignaW4yJywgZWZmZWN0KVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBQcmVzZXRzXHJcbiAgICBTVkcuZmlsdGVyID0ge1xyXG4gICAgICBzZXBpYXRvbmU6ICBbIC4zNDMsIC42NjksIC4xMTksIDAsIDBcclxuICAgICAgICAgICAgICAgICAgLCAuMjQ5LCAuNjI2LCAuMTMwLCAwLCAwXHJcbiAgICAgICAgICAgICAgICAgICwgLjE3MiwgLjMzNCwgLjExMSwgMCwgMFxyXG4gICAgICAgICAgICAgICAgICAsIC4wMDAsIC4wMDAsIC4wMDAsIDEsIDAgXVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBIZWxwZXJzXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpc2VNYXRyaXgobWF0cml4KSB7XHJcbiAgICAgIC8qIGNvbnZlcnQgcG9zc2libGUgYXJyYXkgdmFsdWUgdG8gc3RyaW5nICovXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hdHJpeCkpXHJcbiAgICAgICAgbWF0cml4ID0gbmV3IFNWRy5BcnJheShtYXRyaXgpO1xyXG5cclxuICAgICAgLyogZW5zdXJlIHRoZXJlIGFyZSBubyBsZWFkaW5nLCB0YWlsaW5nIG9yIGRvdWJsZSBzcGFjZXMgKi9cclxuICAgICAgcmV0dXJuIG1hdHJpeC50b1N0cmluZygpLnJlcGxhY2UoL15cXHMrLywgJycpLnJlcGxhY2UoL1xccyskLywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxpc3RTdHJpbmcobGlzdCkge1xyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpXHJcbiAgICAgICAgcmV0dXJuIGxpc3RcclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGgsIHMgPSBbXTsgaSA8IGw7IGkrKylcclxuICAgICAgICBzLnB1c2gobGlzdFtpXSk7XHJcblxyXG4gICAgICByZXR1cm4gcy5qb2luKCcgJylcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmb3JlYWNoKCl7IC8vbG9vcHMgdGhyb3VnaCBtdXRpcGxlIG9iamVjdHNcclxuICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xyXG4gICAgICBpZih0eXBlb2YgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV0gPT0gJ2Z1bmN0aW9uJyl7XHJcbiAgICAgICAgZm4gPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTtcclxuICAgICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLGFyZ3VtZW50cy5sZW5ndGgtMSwxKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IodmFyIGsgaW4gYXJndW1lbnRzKXtcclxuICAgICAgICBmb3IodmFyIGkgaW4gYXJndW1lbnRzW2tdKXtcclxuICAgICAgICAgIGZuKGFyZ3VtZW50c1trXVtpXSxpLGFyZ3VtZW50c1trXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH0pLmNhbGwodW5kZWZpbmVkKTtcblxuICAoZnVuY3Rpb24oKSB7XHJcblxyXG4gIFNWRy5leHRlbmQoU1ZHLlBhdGhBcnJheSwge1xyXG4gICAgbW9ycGg6IGZ1bmN0aW9uKGFycmF5KSB7XHJcblxyXG4gICAgICB2YXIgc3RhcnRBcnIgPSB0aGlzLnZhbHVlXHJcbiAgICAgICAgLCAgZGVzdEFyciA9IHRoaXMucGFyc2UoYXJyYXkpO1xyXG5cclxuICAgICAgdmFyIHN0YXJ0T2Zmc2V0TSA9IDBcclxuICAgICAgICAsICBkZXN0T2Zmc2V0TSA9IDA7XHJcblxyXG4gICAgICB2YXIgc3RhcnRPZmZzZXROZXh0TSA9IGZhbHNlXHJcbiAgICAgICAgLCAgZGVzdE9mZnNldE5leHRNID0gZmFsc2U7XHJcblxyXG4gICAgICB3aGlsZSh0cnVlKXtcclxuICAgICAgICAvLyBzdG9wIGlmIHRoZXJlIGlzIG5vIE0gYW55bW9yZVxyXG4gICAgICAgIGlmKHN0YXJ0T2Zmc2V0TSA9PT0gZmFsc2UgJiYgZGVzdE9mZnNldE0gPT09IGZhbHNlKSBicmVha1xyXG5cclxuICAgICAgICAvLyBmaW5kIHRoZSBuZXh0IE0gaW4gcGF0aCBhcnJheVxyXG4gICAgICAgIHN0YXJ0T2Zmc2V0TmV4dE0gPSBmaW5kTmV4dE0oc3RhcnRBcnIsIHN0YXJ0T2Zmc2V0TSA9PT0gZmFsc2UgPyBmYWxzZSA6IHN0YXJ0T2Zmc2V0TSsxKTtcclxuICAgICAgICAgZGVzdE9mZnNldE5leHRNID0gZmluZE5leHRNKCBkZXN0QXJyLCAgZGVzdE9mZnNldE0gPT09IGZhbHNlID8gZmFsc2UgOiAgZGVzdE9mZnNldE0rMSk7XHJcblxyXG4gICAgICAgIC8vIFdlIGhhdmUgdG8gYWRkIG9uZSBNIHRvIHRoZSBzdGFydEFycmF5XHJcbiAgICAgICAgaWYoc3RhcnRPZmZzZXRNID09PSBmYWxzZSl7XHJcbiAgICAgICAgICB2YXIgYmJveCA9IG5ldyBTVkcuUGF0aEFycmF5KHJlc3VsdC5zdGFydCkuYmJveCgpO1xyXG5cclxuICAgICAgICAgIC8vIHdoZW4gdGhlIGxhc3QgYmxvY2sgaGFkIG5vIGJvdW5kaW5nIGJveCB3ZSBzaW1wbHkgdGFrZSB0aGUgZmlyc3QgTSB3ZSBnb3RcclxuICAgICAgICAgIGlmKGJib3guaGVpZ2h0ID09IDAgfHwgYmJveC53aWR0aCA9PSAwKXtcclxuICAgICAgICAgICAgc3RhcnRPZmZzZXRNID0gIHN0YXJ0QXJyLnB1c2goc3RhcnRBcnJbMF0pIC0gMTtcclxuICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAvLyB3ZSB0YWtlIHRoZSBtaWRkbGUgb2YgdGhlIGJib3ggaW5zdGVhZCB3aGVuIHdlIGdvdCBvbmVcclxuICAgICAgICAgICAgc3RhcnRPZmZzZXRNID0gc3RhcnRBcnIucHVzaCggWydNJywgYmJveC54ICsgYmJveC53aWR0aC8yLCBiYm94LnkgKyBiYm94LmhlaWdodC8yIF0gKSAtIDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBoYXZlIHRvIGFkZCBvbmUgTSB0byB0aGUgZGVzdEFycmF5XHJcbiAgICAgICAgaWYoIGRlc3RPZmZzZXRNID09PSBmYWxzZSl7XHJcbiAgICAgICAgICB2YXIgYmJveCA9IG5ldyBTVkcuUGF0aEFycmF5KHJlc3VsdC5kZXN0KS5iYm94KCk7XHJcblxyXG4gICAgICAgICAgaWYoYmJveC5oZWlnaHQgPT0gMCB8fCBiYm94LndpZHRoID09IDApe1xyXG4gICAgICAgICAgICBkZXN0T2Zmc2V0TSA9ICBkZXN0QXJyLnB1c2goZGVzdEFyclswXSkgLSAxO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGRlc3RPZmZzZXRNID0gIGRlc3RBcnIucHVzaCggWydNJywgYmJveC54ICsgYmJveC53aWR0aC8yLCBiYm94LnkgKyBiYm94LmhlaWdodC8yIF0gKSAtIDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBoYW5kbGUgYmxvY2sgZnJvbSBNIHRvIG5leHQgTVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBoYW5kbGVCbG9jayhzdGFydEFyciwgc3RhcnRPZmZzZXRNLCBzdGFydE9mZnNldE5leHRNLCBkZXN0QXJyLCBkZXN0T2Zmc2V0TSwgZGVzdE9mZnNldE5leHRNKTtcclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBhcnJheXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xyXG4gICAgICAgIHN0YXJ0QXJyID0gc3RhcnRBcnIuc2xpY2UoMCwgc3RhcnRPZmZzZXRNKS5jb25jYXQocmVzdWx0LnN0YXJ0LCBzdGFydE9mZnNldE5leHRNID09PSBmYWxzZSA/IFtdIDogc3RhcnRBcnIuc2xpY2Uoc3RhcnRPZmZzZXROZXh0TSkpO1xyXG4gICAgICAgICBkZXN0QXJyID0gIGRlc3RBcnIuc2xpY2UoMCwgIGRlc3RPZmZzZXRNKS5jb25jYXQocmVzdWx0LmRlc3QgLCAgZGVzdE9mZnNldE5leHRNID09PSBmYWxzZSA/IFtdIDogIGRlc3RBcnIuc2xpY2UoIGRlc3RPZmZzZXROZXh0TSkpO1xyXG5cclxuICAgICAgICAvLyB1cGRhdGUgb2Zmc2V0c1xyXG4gICAgICAgIHN0YXJ0T2Zmc2V0TSA9IHN0YXJ0T2Zmc2V0TmV4dE0gPT09IGZhbHNlID8gZmFsc2UgOiBzdGFydE9mZnNldE0gKyByZXN1bHQuc3RhcnQubGVuZ3RoO1xyXG4gICAgICAgICBkZXN0T2Zmc2V0TSA9ICBkZXN0T2Zmc2V0TmV4dE0gPT09IGZhbHNlID8gZmFsc2UgOiAgZGVzdE9mZnNldE0gKyByZXN1bHQuZGVzdC5sZW5ndGg7XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBjb3B5IGJhY2sgYXJyYXlzXHJcbiAgICAgIHRoaXMudmFsdWUgPSBzdGFydEFycjtcclxuICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTVkcuUGF0aEFycmF5KCk7XHJcbiAgICAgIHRoaXMuZGVzdGluYXRpb24udmFsdWUgPSBkZXN0QXJyO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICB9KTtcclxuXHJcblxyXG5cclxuICAvLyBzb3JyeSBmb3IgdGhlIGxvbmcgZGVjbGFyYXRpb25cclxuICAvLyBzbGljZXMgb3V0IG9uZSBibG9jayAoZnJvbSBNIHRvIE0pIGFuZCBzeW5jcm9uaXplIGl0IHNvIHRoZSB0eXBlcyBhbmQgbGVuZ3RoIG1hdGNoXHJcbiAgZnVuY3Rpb24gaGFuZGxlQmxvY2soc3RhcnRBcnIsIHN0YXJ0T2Zmc2V0TSwgc3RhcnRPZmZzZXROZXh0TSwgZGVzdEFyciwgZGVzdE9mZnNldE0sIGRlc3RPZmZzZXROZXh0TSwgdW5kZWZpbmVkJDEpe1xyXG5cclxuICAgIC8vIHNsaWNlIG91dCB0aGUgYmxvY2sgd2UgbmVlZFxyXG4gICAgdmFyIHN0YXJ0QXJyVGVtcCA9IHN0YXJ0QXJyLnNsaWNlKHN0YXJ0T2Zmc2V0TSwgc3RhcnRPZmZzZXROZXh0TSB8fCB1bmRlZmluZWQkMSlcclxuICAgICAgLCAgZGVzdEFyclRlbXAgPSAgZGVzdEFyci5zbGljZSggZGVzdE9mZnNldE0sICBkZXN0T2Zmc2V0TmV4dE0gfHwgdW5kZWZpbmVkJDEpO1xyXG5cclxuICAgIHZhciBpID0gMFxyXG4gICAgICAsIHBvc1N0YXJ0ID0ge3BvczpbMCwwXSwgc3RhcnQ6WzAsMF19XHJcbiAgICAgICwgcG9zRGVzdCAgPSB7cG9zOlswLDBdLCBzdGFydDpbMCwwXX07XHJcblxyXG4gICAgZG97XHJcblxyXG4gICAgICAvLyBjb252ZXJ0IHNob3J0aGFuZCB0eXBlcyB0byBsb25nIGZvcm1cclxuICAgICAgc3RhcnRBcnJUZW1wW2ldID0gc2ltcGx5ZnkuY2FsbChwb3NTdGFydCwgc3RhcnRBcnJUZW1wW2ldKTtcclxuICAgICAgIGRlc3RBcnJUZW1wW2ldID0gc2ltcGx5ZnkuY2FsbChwb3NEZXN0ICwgIGRlc3RBcnJUZW1wW2ldKTtcclxuXHJcbiAgICAgIC8vIGNoZWNrIGlmIGJvdGggc2hhcGUgdHlwZXMgbWF0Y2hcclxuICAgICAgLy8gMiBlbGxpcHRpY2FsIGFyYyBjdXJ2ZSBjb21tYW5kcyAoJ0EnKSwgYXJlIGNvbnNpZGVyZWQgZGlmZmVyZW50IGlmIHRoZVxyXG4gICAgICAvLyBmbGFncyAobGFyZ2UtYXJjLWZsYWcsIHN3ZWVwLWZsYWcpIGRvbid0IG1hdGNoXHJcbiAgICAgIGlmKHN0YXJ0QXJyVGVtcFtpXVswXSAhPSBkZXN0QXJyVGVtcFtpXVswXSB8fCBzdGFydEFyclRlbXBbaV1bMF0gPT0gJ00nIHx8XHJcbiAgICAgICAgICAoc3RhcnRBcnJUZW1wW2ldWzBdID09ICdBJyAmJlxyXG4gICAgICAgICAgICAoc3RhcnRBcnJUZW1wW2ldWzRdICE9IGRlc3RBcnJUZW1wW2ldWzRdIHx8IHN0YXJ0QXJyVGVtcFtpXVs1XSAhPSBkZXN0QXJyVGVtcFtpXVs1XSlcclxuICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuXHJcbiAgICAgICAgLy8gaWYgbm90LCBjb252ZXJ0IHNoYXBlcyB0byBiZXppZXJlXHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShzdGFydEFyclRlbXAsIFtpLCAxXS5jb25jYXQodG9CZXppZXJlLmNhbGwocG9zU3RhcnQsIHN0YXJ0QXJyVGVtcFtpXSkpKTtcclxuICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShkZXN0QXJyVGVtcCwgW2ksIDFdLmNvbmNhdCh0b0JlemllcmUuY2FsbChwb3NEZXN0LCBkZXN0QXJyVGVtcFtpXSkpKTtcclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIG9ubHkgdXBkYXRlIHBvc2l0aW9ucyBvdGhlcndpc2VcclxuICAgICAgICBzdGFydEFyclRlbXBbaV0gPSBzZXRQb3NBbmRSZWZsZWN0aW9uLmNhbGwocG9zU3RhcnQsIHN0YXJ0QXJyVGVtcFtpXSk7XHJcbiAgICAgICAgIGRlc3RBcnJUZW1wW2ldID0gc2V0UG9zQW5kUmVmbGVjdGlvbi5jYWxsKHBvc0Rlc3QgLCAgZGVzdEFyclRlbXBbaV0pO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gd2UgYXJlIGF0IHRoZSBlbmQgYXQgYm90aCBhcnJheXMuIHN0b3AgaGVyZVxyXG4gICAgICBpZigrK2kgPT0gc3RhcnRBcnJUZW1wLmxlbmd0aCAmJiBpID09IGRlc3RBcnJUZW1wLmxlbmd0aCkgYnJlYWtcclxuXHJcbiAgICAgIC8vIGRlc3RBcnJheSBpcyBsb25nZXIuIEFkZCBvbmUgZWxlbWVudFxyXG4gICAgICBpZihpID09IHN0YXJ0QXJyVGVtcC5sZW5ndGgpe1xyXG4gICAgICAgIHN0YXJ0QXJyVGVtcC5wdXNoKFtcclxuICAgICAgICAgICdDJyxcclxuICAgICAgICAgIHBvc1N0YXJ0LnBvc1swXSxcclxuICAgICAgICAgIHBvc1N0YXJ0LnBvc1sxXSxcclxuICAgICAgICAgIHBvc1N0YXJ0LnBvc1swXSxcclxuICAgICAgICAgIHBvc1N0YXJ0LnBvc1sxXSxcclxuICAgICAgICAgIHBvc1N0YXJ0LnBvc1swXSxcclxuICAgICAgICAgIHBvc1N0YXJ0LnBvc1sxXSxcclxuICAgICAgICBdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gc3RhcnRBcnIgaXMgbG9uZ2VyLiBBZGQgb25lIGVsZW1lbnRcclxuICAgICAgaWYoaSA9PSBkZXN0QXJyVGVtcC5sZW5ndGgpe1xyXG4gICAgICAgIGRlc3RBcnJUZW1wLnB1c2goW1xyXG4gICAgICAgICAgJ0MnLFxyXG4gICAgICAgICAgcG9zRGVzdC5wb3NbMF0sXHJcbiAgICAgICAgICBwb3NEZXN0LnBvc1sxXSxcclxuICAgICAgICAgIHBvc0Rlc3QucG9zWzBdLFxyXG4gICAgICAgICAgcG9zRGVzdC5wb3NbMV0sXHJcbiAgICAgICAgICBwb3NEZXN0LnBvc1swXSxcclxuICAgICAgICAgIHBvc0Rlc3QucG9zWzFdXHJcbiAgICAgICAgXSk7XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgfXdoaWxlKHRydWUpXHJcblxyXG4gICAgLy8gcmV0dXJuIHRoZSB1cGRhdGVkIGJsb2NrXHJcbiAgICByZXR1cm4ge3N0YXJ0OnN0YXJ0QXJyVGVtcCwgZGVzdDpkZXN0QXJyVGVtcH1cclxuICB9XHJcblxyXG4gIC8vIGNvbnZlcnRzIHNob3J0aGFuZCB0eXBlcyB0byBsb25nIGZvcm1cclxuICBmdW5jdGlvbiBzaW1wbHlmeSh2YWwpe1xyXG5cclxuICAgIHN3aXRjaCh2YWxbMF0pe1xyXG4gICAgICBjYXNlICd6JzogLy8gc2hvcnRoYW5kIGxpbmUgdG8gc3RhcnRcclxuICAgICAgY2FzZSAnWic6XHJcbiAgICAgICAgdmFsWzBdID0gJ0wnO1xyXG4gICAgICAgIHZhbFsxXSA9IHRoaXMuc3RhcnRbMF07XHJcbiAgICAgICAgdmFsWzJdID0gdGhpcy5zdGFydFsxXTtcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdIJzogLy8gc2hvcnRoYW5kIGhvcml6b250YWwgbGluZVxyXG4gICAgICAgIHZhbFswXSA9ICdMJztcclxuICAgICAgICB2YWxbMl0gPSB0aGlzLnBvc1sxXTtcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdWJzogLy8gc2hvcnRoYW5kIHZlcnRpY2FsIGxpbmVcclxuICAgICAgICB2YWxbMF0gPSAnTCc7XHJcbiAgICAgICAgdmFsWzJdID0gdmFsWzFdO1xyXG4gICAgICAgIHZhbFsxXSA9IHRoaXMucG9zWzBdO1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ1QnOiAvLyBzaG9ydGhhbmQgcXVhZHJhdGljIGJlemllcmVcclxuICAgICAgICB2YWxbMF0gPSAnUSc7XHJcbiAgICAgICAgdmFsWzNdID0gdmFsWzFdO1xyXG4gICAgICAgIHZhbFs0XSA9IHZhbFsyXTtcclxuICAgICAgICB2YWxbMV0gPSB0aGlzLnJlZmxlY3Rpb25bMV07XHJcbiAgICAgICAgdmFsWzJdID0gdGhpcy5yZWZsZWN0aW9uWzBdO1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ1MnOiAvLyBzaG9ydGhhbmQgY3ViaWMgYmV6aWVyZVxyXG4gICAgICAgIHZhbFswXSA9ICdDJztcclxuICAgICAgICB2YWxbNl0gPSB2YWxbNF07XHJcbiAgICAgICAgdmFsWzVdID0gdmFsWzNdO1xyXG4gICAgICAgIHZhbFs0XSA9IHZhbFsyXTtcclxuICAgICAgICB2YWxbM10gPSB2YWxbMV07XHJcbiAgICAgICAgdmFsWzJdID0gdGhpcy5yZWZsZWN0aW9uWzFdO1xyXG4gICAgICAgIHZhbFsxXSA9IHRoaXMucmVmbGVjdGlvblswXTtcclxuICAgICAgICBicmVha1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWxcclxuXHJcbiAgfVxyXG5cclxuICAvLyB1cGRhdGVzIHJlZmxlY3Rpb24gcG9pbnQgYW5kIGN1cnJlbnQgcG9zaXRpb25cclxuICBmdW5jdGlvbiBzZXRQb3NBbmRSZWZsZWN0aW9uKHZhbCl7XHJcblxyXG4gICAgdmFyIGxlbiA9IHZhbC5sZW5ndGg7XHJcblxyXG4gICAgdGhpcy5wb3MgPSBbIHZhbFtsZW4tMl0sIHZhbFtsZW4tMV0gXTtcclxuXHJcbiAgICBpZignU0NRVCcuaW5kZXhPZih2YWxbMF0pICE9IC0xKVxyXG4gICAgICB0aGlzLnJlZmxlY3Rpb24gPSBbIDIgKiB0aGlzLnBvc1swXSAtIHZhbFtsZW4tNF0sIDIgKiB0aGlzLnBvc1sxXSAtIHZhbFtsZW4tM10gXTtcclxuXHJcbiAgICByZXR1cm4gdmFsXHJcbiAgfVxyXG5cclxuICAvLyBjb252ZXJ0cyBhbGwgdHlwZXMgdG8gY3ViaWMgYmV6aWVyZVxyXG4gIGZ1bmN0aW9uIHRvQmV6aWVyZSh2YWwpe1xyXG4gICAgdmFyIHJldFZhbCA9IFt2YWxdO1xyXG5cclxuICAgIHN3aXRjaCh2YWxbMF0pe1xyXG4gICAgICBjYXNlICdNJzogLy8gc3BlY2lhbCBoYW5kbGluZyBmb3IgTVxyXG4gICAgICAgIHRoaXMucG9zID0gdGhpcy5zdGFydCA9IFt2YWxbMV0sIHZhbFsyXV07XHJcbiAgICAgICAgcmV0dXJuIHJldFZhbFxyXG4gICAgICBjYXNlICdMJzpcclxuICAgICAgICB2YWxbNV0gPSB2YWxbM10gPSB2YWxbMV07XHJcbiAgICAgICAgdmFsWzZdID0gdmFsWzRdID0gdmFsWzJdO1xyXG4gICAgICAgIHZhbFsxXSA9IHRoaXMucG9zWzBdO1xyXG4gICAgICAgIHZhbFsyXSA9IHRoaXMucG9zWzFdO1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ1EnOlxyXG4gICAgICAgIHZhbFs2XSA9IHZhbFs0XTtcclxuICAgICAgICB2YWxbNV0gPSB2YWxbM107XHJcbiAgICAgICAgdmFsWzRdID0gdmFsWzRdICogMS8zICsgdmFsWzJdICogMi8zO1xyXG4gICAgICAgIHZhbFszXSA9IHZhbFszXSAqIDEvMyArIHZhbFsxXSAqIDIvMztcclxuICAgICAgICB2YWxbMl0gPSB0aGlzLnBvc1sxXSAqIDEvMyArIHZhbFsyXSAqIDIvMztcclxuICAgICAgICB2YWxbMV0gPSB0aGlzLnBvc1swXSAqIDEvMyArIHZhbFsxXSAqIDIvMztcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdBJzpcclxuICAgICAgICByZXRWYWwgPSBhcmNUb0JlemllcmUodGhpcy5wb3MsIHZhbCk7XHJcbiAgICAgICAgdmFsID0gcmV0VmFsWzBdO1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcblxyXG4gICAgdmFsWzBdID0gJ0MnO1xyXG4gICAgdGhpcy5wb3MgPSBbdmFsWzVdLCB2YWxbNl1dO1xyXG4gICAgdGhpcy5yZWZsZWN0aW9uID0gWzIgKiB2YWxbNV0gLSB2YWxbM10sIDIgKiB2YWxbNl0gLSB2YWxbNF1dO1xyXG5cclxuICAgIHJldHVybiByZXRWYWxcclxuXHJcbiAgfVxyXG5cclxuICAvLyBmaW5kcyB0aGUgbmV4dCBwb3NpdGlvbiBvZiB0eXBlIE1cclxuICBmdW5jdGlvbiBmaW5kTmV4dE0oYXJyLCBvZmZzZXQpe1xyXG5cclxuICAgIGlmKG9mZnNldCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxyXG5cclxuICAgIGZvcih2YXIgaSA9IG9mZnNldCwgbGVuID0gYXJyLmxlbmd0aDtpIDwgbGVuOysraSl7XHJcblxyXG4gICAgICBpZihhcnJbaV1bMF0gPT0gJ00nKSByZXR1cm4gaVxyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG5cclxuXHJcbiAgLy8gQ29udmVydCBhbiBhcmMgc2VnbWVudCBpbnRvIGVxdWl2YWxlbnQgY3ViaWMgQmV6aWVyIGN1cnZlc1xyXG4gIC8vIERlcGVuZGluZyBvbiB0aGUgYXJjLCB1cCB0byA0IGN1cnZlcyBtaWdodCBiZSB1c2VkIHRvIHJlcHJlc2VudCBpdCBzaW5jZSBhXHJcbiAgLy8gY3VydmUgZ2l2ZXMgYSBnb29kIGFwcHJveGltYXRpb24gZm9yIG9ubHkgYSBxdWFydGVyIG9mIGFuIGVsbGlwc2VcclxuICAvLyBUaGUgY3VydmVzIGFyZSByZXR1cm5lZCBhcyBhbiBhcnJheSBvZiBTVkcgY3VydmUgY29tbWFuZHM6XHJcbiAgLy8gWyBbJ0MnLCB4MSwgeTEsIHgyLCB5MiwgeCwgeV0gLi4uIF1cclxuICBmdW5jdGlvbiBhcmNUb0JlemllcmUocG9zLCB2YWwpIHtcclxuICAgICAgLy8gUGFyYW1ldGVycyBleHRyYWN0aW9uLCBoYW5kbGUgb3V0LW9mLXJhbmdlIHBhcmFtZXRlcnMgYXMgc3BlY2lmaWVkIGluIHRoZSBTVkcgc3BlY1xyXG4gICAgICAvLyBTZWU6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9pbXBsbm90ZS5odG1sI0FyY091dE9mUmFuZ2VQYXJhbWV0ZXJzXHJcbiAgICAgIHZhciByeCA9IE1hdGguYWJzKHZhbFsxXSksIHJ5ID0gTWF0aC5hYnModmFsWzJdKSwgeEF4aXNSb3RhdGlvbiA9IHZhbFszXSAlIDM2MFxyXG4gICAgICAgICwgbGFyZ2VBcmNGbGFnID0gdmFsWzRdLCBzd2VlcEZsYWcgPSB2YWxbNV0sIHggPSB2YWxbNl0sIHkgPSB2YWxbN11cclxuICAgICAgICAsIEEgPSBuZXcgU1ZHLlBvaW50KHBvcyksIEIgPSBuZXcgU1ZHLlBvaW50KHgsIHkpXHJcbiAgICAgICAgLCBwcmltZWRDb29yZCwgbGFtYmRhLCBtYXQsIGssIGMsIGNTcXVhcmUsIHQsIE8sIE9BLCBPQiwgdGV0YVN0YXJ0LCB0ZXRhRW5kXHJcbiAgICAgICAgLCBkZWx0YVRldGEsIG5iU2VjdG9ycywgZiwgYXJjU2VnUG9pbnRzLCBhbmdsZSwgc2luQW5nbGUsIGNvc0FuZ2xlLCBwdCwgaSwgaWxcclxuICAgICAgICAsIHJldFZhbCA9IFtdLCB4MSwgeTEsIHgyLCB5MjtcclxuXHJcbiAgICAgIC8vIEVuc3VyZSByYWRpaSBhcmUgbm9uLXplcm9cclxuICAgICAgaWYocnggPT09IDAgfHwgcnkgPT09IDAgfHwgKEEueCA9PT0gQi54ICYmIEEueSA9PT0gQi55KSkge1xyXG4gICAgICAgIC8vIHRyZWF0IHRoaXMgYXJjIGFzIGEgc3RyYWlnaHQgbGluZSBzZWdtZW50XHJcbiAgICAgICAgcmV0dXJuIFtbJ0MnLCBBLngsIEEueSwgQi54LCBCLnksIEIueCwgQi55XV1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRW5zdXJlIHJhZGlpIGFyZSBsYXJnZSBlbm91Z2ggdXNpbmcgdGhlIGFsZ29yaXRobSBwcm92aWRlZCBpbiB0aGUgU1ZHIHNwZWNcclxuICAgICAgLy8gU2VlOiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHMTEvaW1wbG5vdGUuaHRtbCNBcmNDb3JyZWN0aW9uT3V0T2ZSYW5nZVJhZGlpXHJcbiAgICAgIHByaW1lZENvb3JkID0gbmV3IFNWRy5Qb2ludCgoQS54LUIueCkvMiwgKEEueS1CLnkpLzIpLnRyYW5zZm9ybShuZXcgU1ZHLk1hdHJpeCgpLnJvdGF0ZSh4QXhpc1JvdGF0aW9uKSk7XHJcbiAgICAgIGxhbWJkYSA9IChwcmltZWRDb29yZC54ICogcHJpbWVkQ29vcmQueCkgLyAocnggKiByeCkgKyAocHJpbWVkQ29vcmQueSAqIHByaW1lZENvb3JkLnkpIC8gKHJ5ICogcnkpO1xyXG4gICAgICBpZihsYW1iZGEgPiAxKSB7XHJcbiAgICAgICAgbGFtYmRhID0gTWF0aC5zcXJ0KGxhbWJkYSk7XHJcbiAgICAgICAgcnggPSBsYW1iZGEqcng7XHJcbiAgICAgICAgcnkgPSBsYW1iZGEqcnk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRvIHNpbXBsaWZ5IGNhbGN1bGF0aW9ucywgd2UgbWFrZSB0aGUgYXJjIHBhcnQgb2YgYSB1bml0IGNpcmNsZSAocmF5b24gaXMgMSkgaW5zdGVhZCBvZiBhbiBlbGxpcHNlXHJcbiAgICAgIG1hdCA9IG5ldyBTVkcuTWF0cml4KCkucm90YXRlKHhBeGlzUm90YXRpb24pLnNjYWxlKDEvcngsIDEvcnkpLnJvdGF0ZSgteEF4aXNSb3RhdGlvbik7XHJcbiAgICAgIEEgPSBBLnRyYW5zZm9ybShtYXQpO1xyXG4gICAgICBCID0gQi50cmFuc2Zvcm0obWF0KTtcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgZGlzdGFuY2UgYmV0d2VlbiB0aGUgaW5pdGlhbCBhbmQgZmluYWwgcG9pbnQgb2YgdGhlIGFyY1xyXG4gICAgICBrID0gW0IueC1BLngsIEIueS1BLnldO1xyXG5cclxuICAgICAgLy8gRmluZCB0aGUgbGVuZ3RoIG9mIHRoZSBjaG9yZCBmb3JtZWQgYnkgQSBhbmQgQlxyXG4gICAgICBjU3F1YXJlID0ga1swXSprWzBdICsga1sxXSprWzFdO1xyXG4gICAgICBjID0gTWF0aC5zcXJ0KGNTcXVhcmUpO1xyXG5cclxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSByYXRpb3Mgb2YgdGhlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGRpc3RhbmNlIG9uIHRoZSBsZW5ndGggb2YgdGhlIGNob3JkXHJcbiAgICAgIGtbMF0gLz0gYztcclxuICAgICAga1sxXSAvPSBjO1xyXG5cclxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBjaXJjbGUgY2VudGVyIGFuZCB0aGUgY2hvcmQgbWlkcG9pbnRcclxuICAgICAgLy8gdXNpbmcgdGhpcyBmb3JtdWxhOiB0ID0gc3FydChyXjIgLSBjXjIgLyA0KVxyXG4gICAgICAvLyB3aGVyZSB0IGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBjaXJsZSBjZW50ZXIgYW5kIHRoZSBjaG9yZCBtaWRwb2ludCxcclxuICAgICAgLy8gICAgICAgciBpcyB0aGUgcmF5b24gb2YgdGhlIGNpcmNsZSBhbmQgYyBpcyB0aGUgY2hvcmQgbGVuZ3RoXHJcbiAgICAgIC8vIEZyb206IGh0dHA6Ly93d3cuYWpkZXNpZ25lci5jb20vcGhwY2lyY2xlL2NpcmNsZV9zZWdtZW50X2Nob3JkX3QucGhwXHJcbiAgICAgIC8vIEJlY2F1c2Ugb2YgdGhlIGltcHJlY2lzaW9uIG9mIGZsb2F0aW5nIHBvaW50IG51bWJlcnMsIGNTcXVhcmUgbWlnaHQgZW5kXHJcbiAgICAgIC8vIHVwIGJlaW5nIHNsaWdodGx5IGFib3ZlIDQgd2hpY2ggd291bGQgcmVzdWx0IGluIGEgbmVnYXRpdmUgcmFkaWNhbmRcclxuICAgICAgLy8gVG8gcHJldmVudCB0aGF0LCBhIHRlc3QgaXMgbWFkZSBiZWZvcmUgY29tcHV0aW5nIHRoZSBzcXVhcmUgcm9vdFxyXG4gICAgICB0ID0gKGNTcXVhcmUgPCA0KSA/IE1hdGguc3FydCgxIC0gY1NxdWFyZS80KSA6IDA7XHJcblxyXG4gICAgICAvLyBGb3IgbW9zdCBzaXR1YXRpb25zLCB0aGVyZSBhcmUgYWN0dWFsbHkgdHdvIGRpZmZlcmVudCBlbGxpcHNlcyB0aGF0XHJcbiAgICAgIC8vIHNhdGlzZnkgdGhlIGNvbnN0cmFpbnRzIGltcG9zZWQgYnkgdGhlIHBvaW50cyBBIGFuZCBCLCB0aGUgcmFkaWkgcnggYW5kIHJ5LFxyXG4gICAgICAvLyBhbmQgdGhlIHhBeGlzUm90YXRpb25cclxuICAgICAgLy8gV2hlbiB0aGUgZmxhZ3MgbGFyZ2VBcmNGbGFnIGFuZCBzd2VlcEZsYWcgYXJlIGVxdWFsLCBpdCBtZWFucyB0aGF0IHRoZVxyXG4gICAgICAvLyBzZWNvbmQgZWxsaXBzZSBpcyB1c2VkIGFzIGEgc29sdXRpb25cclxuICAgICAgLy8gU2VlOiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHL3BhdGhzLmh0bWwjUGF0aERhdGFFbGxpcHRpY2FsQXJjQ29tbWFuZHNcclxuICAgICAgaWYobGFyZ2VBcmNGbGFnID09PSBzd2VlcEZsYWcpIHtcclxuICAgICAgICAgIHQgKj0gLTE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBvZiB0aGUgY2lyY2xlIGZyb20gdGhlIG1pZHBvaW50IG9mIHRoZSBjaG9yZFxyXG4gICAgICAvLyBUaGlzIGlzIGRvbmUgYnkgbXVsdGlwbHlpbmcgdGhlIHJhdGlvcyBjYWxjdWxhdGVkIHByZXZpb3VzbHkgYnkgdGhlIGRpc3RhbmNlIGJldHdlZW5cclxuICAgICAgLy8gdGhlIGNpcmNsZSBjZW50ZXIgYW5kIHRoZSBjaG9yZCBtaWRwb2ludCBhbmQgdXNpbmcgdGhlc2UgdmFsdWVzIHRvIGdvIGZyb20gdGhlIG1pZHBvaW50XHJcbiAgICAgIC8vIHRvIHRoZSBjZW50ZXIgb2YgdGhlIGNpcmNsZVxyXG4gICAgICAvLyBUaGUgbmVnYXRpdmUgb2YgdGhlIHZlcnRpY2FsIGRpc3RhbmNlIHJhdGlvIGlzIHVzZWQgdG8gbW9kaWZ5IHRoZSB4IGNvb3JkaW5hdGUgd2hpbGVcclxuICAgICAgLy8gdGhlIGhvcml6b250YWwgZGlzdGFuY2UgcmF0aW8gaXMgdXNlZCB0byBtb2RpZnkgdGhlIHkgY29vcmRpbmF0ZVxyXG4gICAgICAvLyBUaGF0IGlzIGJlY2F1c2UgdGhlIGNlbnRlciBvZiB0aGUgY2lyY2xlIGlzIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGNob3JkIGFuZCBwZXJwZW5kaWN1bGFyXHJcbiAgICAgIC8vIGxpbmVzIGFyZSBuZWdhdGl2ZSByZWNpcHJvY2Fsc1xyXG4gICAgICBPID0gbmV3IFNWRy5Qb2ludCgoQi54K0EueCkvMiArIHQqLWtbMV0sIChCLnkrQS55KS8yICsgdCprWzBdKTtcclxuICAgICAgLy8gTW92ZSB0aGUgY2VudGVyIG9mIHRoZSBjaXJjbGUgYXQgdGhlIG9yaWdpblxyXG4gICAgICBPQSA9IG5ldyBTVkcuUG9pbnQoQS54LU8ueCwgQS55LU8ueSk7XHJcbiAgICAgIE9CID0gbmV3IFNWRy5Qb2ludChCLngtTy54LCBCLnktTy55KTtcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgc3RhcnQgYW5kIGVuZCBhbmdsZVxyXG4gICAgICB0ZXRhU3RhcnQgPSBNYXRoLmFjb3MoT0EueC9NYXRoLnNxcnQoT0EueCpPQS54ICsgT0EueSpPQS55KSk7XHJcbiAgICAgIGlmIChPQS55IDwgMCkge1xyXG4gICAgICAgIHRldGFTdGFydCAqPSAtMTtcclxuICAgICAgfVxyXG4gICAgICB0ZXRhRW5kID0gTWF0aC5hY29zKE9CLngvTWF0aC5zcXJ0KE9CLngqT0IueCArIE9CLnkqT0IueSkpO1xyXG4gICAgICBpZiAoT0IueSA8IDApIHtcclxuICAgICAgICB0ZXRhRW5kICo9IC0xO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBJZiBzd2VlcC1mbGFnIGlzICcxJywgdGhlbiB0aGUgYXJjIHdpbGwgYmUgZHJhd24gaW4gYSBcInBvc2l0aXZlLWFuZ2xlXCIgZGlyZWN0aW9uLFxyXG4gICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgZW5kIGFuZ2xlIGlzIGFib3ZlIHRoZSBzdGFydCBhbmdsZVxyXG4gICAgICBpZiAoc3dlZXBGbGFnICYmIHRldGFTdGFydCA+IHRldGFFbmQpIHtcclxuICAgICAgICB0ZXRhRW5kICs9IDIqTWF0aC5QSTtcclxuICAgICAgfVxyXG4gICAgICAvLyBJZiBzd2VlcC1mbGFnIGlzICcwJywgdGhlbiB0aGUgYXJjIHdpbGwgYmUgZHJhd24gaW4gYSBcIm5lZ2F0aXZlLWFuZ2xlXCIgZGlyZWN0aW9uLFxyXG4gICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgZW5kIGFuZ2xlIGlzIGJlbG93IHRoZSBzdGFydCBhbmdsZVxyXG4gICAgICBpZiAoIXN3ZWVwRmxhZyAmJiB0ZXRhU3RhcnQgPCB0ZXRhRW5kKSB7XHJcbiAgICAgICAgdGV0YUVuZCAtPSAyKk1hdGguUEk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZpbmQgdGhlIG51bWJlciBvZiBCZXppZXIgY3VydmVzIHRoYXQgYXJlIHJlcXVpcmVkIHRvIHJlcHJlc2VudCB0aGUgYXJjXHJcbiAgICAgIC8vIEEgY3ViaWMgQmV6aWVyIGN1cnZlIGdpdmVzIGEgZ29vZCBlbm91Z2ggYXBwcm94aW1hdGlvbiB3aGVuIHJlcHJlc2VudGluZyBhdCBtb3N0IGEgcXVhcnRlciBvZiBhIGNpcmNsZVxyXG4gICAgICBuYlNlY3RvcnMgPSBNYXRoLmNlaWwoTWF0aC5hYnModGV0YVN0YXJ0LXRldGFFbmQpICogMi9NYXRoLlBJKTtcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50cyBvZiBhbGwgdGhlIEJlemllciBjdXJ2ZXMgcmVxdWlyZWQgdG8gcmVwcmVzZW50IHRoZSBhcmNcclxuICAgICAgLy8gRm9yIGFuIGluLWRlcHRoIGV4cGxhbmF0aW9uIG9mIHRoaXMgcGFydCBzZWU6IGh0dHA6Ly9wb21heC5naXRodWIuaW8vYmV6aWVyaW5mby8jY2lyY2xlc19jdWJpY1xyXG4gICAgICBhcmNTZWdQb2ludHMgPSBbXTtcclxuICAgICAgYW5nbGUgPSB0ZXRhU3RhcnQ7XHJcbiAgICAgIGRlbHRhVGV0YSA9ICh0ZXRhRW5kLXRldGFTdGFydCkvbmJTZWN0b3JzO1xyXG4gICAgICBmID0gNCpNYXRoLnRhbihkZWx0YVRldGEvNCkvMztcclxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuYlNlY3RvcnM7IGkrKykgeyAvLyBUaGUgPD0gaXMgYmVjYXVzZSBhIEJlemllciBjdXJ2ZSBoYXZlIGEgc3RhcnQgYW5kIGEgZW5kcG9pbnRcclxuICAgICAgICBjb3NBbmdsZSA9IE1hdGguY29zKGFuZ2xlKTtcclxuICAgICAgICBzaW5BbmdsZSA9IE1hdGguc2luKGFuZ2xlKTtcclxuXHJcbiAgICAgICAgcHQgPSBuZXcgU1ZHLlBvaW50KE8ueCtjb3NBbmdsZSwgTy55K3NpbkFuZ2xlKTtcclxuICAgICAgICBhcmNTZWdQb2ludHNbaV0gPSBbbmV3IFNWRy5Qb2ludChwdC54K2Yqc2luQW5nbGUsIHB0LnktZipjb3NBbmdsZSksIHB0LCBuZXcgU1ZHLlBvaW50KHB0LngtZipzaW5BbmdsZSwgcHQueStmKmNvc0FuZ2xlKV07XHJcblxyXG4gICAgICAgIGFuZ2xlICs9IGRlbHRhVGV0YTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBjb250cm9sIHBvaW50IG9mIHRoZSBmaXJzdCBzZWdtZW50IHBvaW50IGFuZCByZW1vdmUgdGhlIHNlY29uZCBjb250cm9sIHBvaW50IG9mIHRoZSBsYXN0IHNlZ21lbnQgcG9pbnRcclxuICAgICAgLy8gVGhlc2UgdHdvIGNvbnRyb2wgcG9pbnRzIGFyZSBub3QgdXNlZCBpbiB0aGUgYXBwcm94aW1hdGlvbiBvZiB0aGUgYXJjLCB0aGF0IGlzIHdoeSB0aGV5IGFyZSByZW1vdmVkXHJcbiAgICAgIGFyY1NlZ1BvaW50c1swXVswXSA9IGFyY1NlZ1BvaW50c1swXVsxXS5jbG9uZSgpO1xyXG4gICAgICBhcmNTZWdQb2ludHNbYXJjU2VnUG9pbnRzLmxlbmd0aC0xXVsyXSA9IGFyY1NlZ1BvaW50c1thcmNTZWdQb2ludHMubGVuZ3RoLTFdWzFdLmNsb25lKCk7XHJcblxyXG4gICAgICAvLyBSZXZlcnQgdGhlIHRyYW5zZm9ybWF0aW9uIHRoYXQgd2FzIGFwcGxpZWQgdG8gbWFrZSB0aGUgYXJjIHBhcnQgb2YgYSB1bml0IGNpcmNsZSBpbnN0ZWFkIG9mIGFuIGVsbGlwc2VcclxuICAgICAgbWF0ID0gbmV3IFNWRy5NYXRyaXgoKS5yb3RhdGUoeEF4aXNSb3RhdGlvbikuc2NhbGUocngsIHJ5KS5yb3RhdGUoLXhBeGlzUm90YXRpb24pO1xyXG4gICAgICBmb3IgKGkgPSAwLCBpbCA9IGFyY1NlZ1BvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcbiAgICAgICAgYXJjU2VnUG9pbnRzW2ldWzBdID0gYXJjU2VnUG9pbnRzW2ldWzBdLnRyYW5zZm9ybShtYXQpO1xyXG4gICAgICAgIGFyY1NlZ1BvaW50c1tpXVsxXSA9IGFyY1NlZ1BvaW50c1tpXVsxXS50cmFuc2Zvcm0obWF0KTtcclxuICAgICAgICBhcmNTZWdQb2ludHNbaV1bMl0gPSBhcmNTZWdQb2ludHNbaV1bMl0udHJhbnNmb3JtKG1hdCk7XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICAvLyBDb252ZXJ0IHRoZSBzZWdtZW50cyBwb2ludHMgdG8gU1ZHIGN1cnZlIGNvbW1hbmRzXHJcbiAgICAgIGZvciAoaSA9IDEsIGlsID0gYXJjU2VnUG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuICAgICAgICBwdCA9IGFyY1NlZ1BvaW50c1tpLTFdWzJdO1xyXG4gICAgICAgIHgxID0gcHQueDtcclxuICAgICAgICB5MSA9IHB0Lnk7XHJcblxyXG4gICAgICAgIHB0ID0gYXJjU2VnUG9pbnRzW2ldWzBdO1xyXG4gICAgICAgIHgyID0gcHQueDtcclxuICAgICAgICB5MiA9IHB0Lnk7XHJcblxyXG4gICAgICAgIHB0ID0gYXJjU2VnUG9pbnRzW2ldWzFdO1xyXG4gICAgICAgIHggPSBwdC54O1xyXG4gICAgICAgIHkgPSBwdC55O1xyXG5cclxuICAgICAgICByZXRWYWwucHVzaChbJ0MnLCB4MSwgeTEsIHgyLCB5MiwgeCwgeV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmV0VmFsXHJcbiAgfVxyXG4gIH0oKSk7XG5cbiAgLyohIHN2Zy5kcmFnZ2FibGUuanMgLSB2Mi4yLjIgLSAyMDE5LTAxLTA4XHJcbiAgKiBodHRwczovL2dpdGh1Yi5jb20vc3ZnZG90anMvc3ZnLmRyYWdnYWJsZS5qc1xyXG4gICogQ29weXJpZ2h0IChjKSAyMDE5IFdvdXQgRmllcmVuczsgTGljZW5zZWQgTUlUICovXHJcbiAgKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIC8vIGNyZWF0ZXMgaGFuZGxlciwgc2F2ZXMgaXRcclxuICAgIGZ1bmN0aW9uIERyYWdIYW5kbGVyKGVsKXtcclxuICAgICAgZWwucmVtZW1iZXIoJ19kcmFnZ2FibGUnLCB0aGlzKTtcclxuICAgICAgdGhpcy5lbCA9IGVsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBTZXRzIG5ldyBwYXJhbWV0ZXIsIHN0YXJ0cyBkcmFnZ2luZ1xyXG4gICAgRHJhZ0hhbmRsZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjb25zdHJhaW50LCB2YWwpe1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICB0aGlzLmNvbnN0cmFpbnQgPSBjb25zdHJhaW50O1xyXG4gICAgICB0aGlzLnZhbHVlID0gdmFsO1xyXG4gICAgICB0aGlzLmVsLm9uKCdtb3VzZWRvd24uZHJhZycsIGZ1bmN0aW9uKGUpeyBfdGhpcy5zdGFydChlKTsgfSk7XHJcbiAgICAgIHRoaXMuZWwub24oJ3RvdWNoc3RhcnQuZHJhZycsIGZ1bmN0aW9uKGUpeyBfdGhpcy5zdGFydChlKTsgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHRyYW5zZm9ybXMgb25lIHBvaW50IGZyb20gc2NyZWVuIHRvIHVzZXIgY29vcmRzXHJcbiAgICBEcmFnSGFuZGxlci5wcm90b3R5cGUudHJhbnNmb3JtUG9pbnQgPSBmdW5jdGlvbihldmVudCwgb2Zmc2V0KXtcclxuICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzICYmIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIHx8IGV2ZW50O1xyXG4gICAgICAgIHRoaXMucC54ID0gdG91Y2hlcy5jbGllbnRYIC0gKG9mZnNldCB8fCAwKTtcclxuICAgICAgICB0aGlzLnAueSA9IHRvdWNoZXMuY2xpZW50WTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wLm1hdHJpeFRyYW5zZm9ybSh0aGlzLm0pXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGdldHMgZWxlbWVudHMgYm91bmRpbmcgYm94IHdpdGggc3BlY2lhbCBoYW5kbGluZyBvZiBncm91cHMsIG5lc3RlZCBhbmQgdXNlXHJcbiAgICBEcmFnSGFuZGxlci5wcm90b3R5cGUuZ2V0QkJveCA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICB2YXIgYm94ID0gdGhpcy5lbC5iYm94KCk7XHJcblxyXG4gICAgICBpZih0aGlzLmVsIGluc3RhbmNlb2YgU1ZHLk5lc3RlZCkgYm94ID0gdGhpcy5lbC5yYm94KCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5lbCBpbnN0YW5jZW9mIFNWRy5HIHx8IHRoaXMuZWwgaW5zdGFuY2VvZiBTVkcuVXNlIHx8IHRoaXMuZWwgaW5zdGFuY2VvZiBTVkcuTmVzdGVkKSB7XHJcbiAgICAgICAgYm94LnggPSB0aGlzLmVsLngoKTtcclxuICAgICAgICBib3gueSA9IHRoaXMuZWwueSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYm94XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHN0YXJ0IGRyYWdnaW5nXHJcbiAgICBEcmFnSGFuZGxlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbihlKXtcclxuXHJcbiAgICAgIC8vIGNoZWNrIGZvciBsZWZ0IGJ1dHRvblxyXG4gICAgICBpZihlLnR5cGUgPT0gJ2NsaWNrJ3x8IGUudHlwZSA9PSAnbW91c2Vkb3duJyB8fCBlLnR5cGUgPT0gJ21vdXNlbW92ZScpe1xyXG4gICAgICAgIGlmKChlLndoaWNoIHx8IGUuYnV0dG9ucykgIT0gMSl7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgIC8vIGZpcmUgYmVmb3JlZHJhZyBldmVudFxyXG4gICAgICB0aGlzLmVsLmZpcmUoJ2JlZm9yZWRyYWcnLCB7IGV2ZW50OiBlLCBoYW5kbGVyOiB0aGlzIH0pO1xyXG4gICAgICBpZih0aGlzLmVsLmV2ZW50KCkuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgLy8gcHJldmVudCBicm93c2VyIGRyYWcgYmVoYXZpb3IgYXMgc29vbiBhcyBwb3NzaWJsZVxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAvLyBwcmV2ZW50IHByb3BhZ2F0aW9uIHRvIGEgcGFyZW50IHRoYXQgbWlnaHQgYWxzbyBoYXZlIGRyYWdnaW5nIGVuYWJsZWRcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgIC8vIHNlYXJjaCBmb3IgcGFyZW50IG9uIHRoZSBmbHkgdG8gbWFrZSBzdXJlIHdlIGNhbiBjYWxsXHJcbiAgICAgIC8vIGRyYWdnYWJsZSgpIGV2ZW4gd2hlbiBlbGVtZW50IGlzIG5vdCBpbiB0aGUgZG9tIGN1cnJlbnRseVxyXG4gICAgICB0aGlzLnBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuZWwucGFyZW50KFNWRy5OZXN0ZWQpIHx8IHRoaXMuZWwucGFyZW50KFNWRy5Eb2MpO1xyXG4gICAgICB0aGlzLnAgPSB0aGlzLnBhcmVudC5ub2RlLmNyZWF0ZVNWR1BvaW50KCk7XHJcblxyXG4gICAgICAvLyBzYXZlIGN1cnJlbnQgdHJhbnNmb3JtYXRpb24gbWF0cml4XHJcbiAgICAgIHRoaXMubSA9IHRoaXMuZWwubm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCk7XHJcblxyXG4gICAgICB2YXIgYm94ID0gdGhpcy5nZXRCQm94KCk7XHJcblxyXG4gICAgICB2YXIgYW5jaG9yT2Zmc2V0O1xyXG5cclxuICAgICAgLy8gZml4IHRleHQtYW5jaG9yIGluIHRleHQtZWxlbWVudCAoIzM3KVxyXG4gICAgICBpZih0aGlzLmVsIGluc3RhbmNlb2YgU1ZHLlRleHQpe1xyXG4gICAgICAgIGFuY2hvck9mZnNldCA9IHRoaXMuZWwubm9kZS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKTtcclxuXHJcbiAgICAgICAgc3dpdGNoKHRoaXMuZWwuYXR0cigndGV4dC1hbmNob3InKSl7XHJcbiAgICAgICAgICBjYXNlICdtaWRkbGUnOlxyXG4gICAgICAgICAgICBhbmNob3JPZmZzZXQgLz0gMjtcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcclxuICAgICAgICAgICAgYW5jaG9yT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnN0YXJ0UG9pbnRzID0ge1xyXG4gICAgICAgIC8vIFdlIHRha2UgYWJzb2x1dGUgY29vcmRpbmF0ZXMgc2luY2Ugd2UgYXJlIGp1c3QgdXNpbmcgYSBkZWx0YSBoZXJlXHJcbiAgICAgICAgcG9pbnQ6IHRoaXMudHJhbnNmb3JtUG9pbnQoZSwgYW5jaG9yT2Zmc2V0KSxcclxuICAgICAgICBib3g6ICAgYm94LFxyXG4gICAgICAgIHRyYW5zZm9ybTogdGhpcy5lbC50cmFuc2Zvcm0oKVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gYWRkIGRyYWcgYW5kIGVuZCBldmVudHMgdG8gd2luZG93XHJcbiAgICAgIFNWRy5vbih3aW5kb3csICdtb3VzZW1vdmUuZHJhZycsIGZ1bmN0aW9uKGUpeyBfdGhpcy5kcmFnKGUpOyB9KTtcclxuICAgICAgU1ZHLm9uKHdpbmRvdywgJ3RvdWNobW92ZS5kcmFnJywgZnVuY3Rpb24oZSl7IF90aGlzLmRyYWcoZSk7IH0pO1xyXG4gICAgICBTVkcub24od2luZG93LCAnbW91c2V1cC5kcmFnJywgZnVuY3Rpb24oZSl7IF90aGlzLmVuZChlKTsgfSk7XHJcbiAgICAgIFNWRy5vbih3aW5kb3csICd0b3VjaGVuZC5kcmFnJywgZnVuY3Rpb24oZSl7IF90aGlzLmVuZChlKTsgfSk7XHJcblxyXG4gICAgICAvLyBmaXJlIGRyYWdzdGFydCBldmVudFxyXG4gICAgICB0aGlzLmVsLmZpcmUoJ2RyYWdzdGFydCcsIHtldmVudDogZSwgcDogdGhpcy5zdGFydFBvaW50cy5wb2ludCwgbTogdGhpcy5tLCBoYW5kbGVyOiB0aGlzfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHdoaWxlIGRyYWdnaW5nXHJcbiAgICBEcmFnSGFuZGxlci5wcm90b3R5cGUuZHJhZyA9IGZ1bmN0aW9uKGUpe1xyXG5cclxuICAgICAgdmFyIGJveCA9IHRoaXMuZ2V0QkJveCgpXHJcbiAgICAgICAgLCBwICAgPSB0aGlzLnRyYW5zZm9ybVBvaW50KGUpXHJcbiAgICAgICAgLCB4ICAgPSB0aGlzLnN0YXJ0UG9pbnRzLmJveC54ICsgcC54IC0gdGhpcy5zdGFydFBvaW50cy5wb2ludC54XHJcbiAgICAgICAgLCB5ICAgPSB0aGlzLnN0YXJ0UG9pbnRzLmJveC55ICsgcC55IC0gdGhpcy5zdGFydFBvaW50cy5wb2ludC55XHJcbiAgICAgICAgLCBjICAgPSB0aGlzLmNvbnN0cmFpbnRcclxuICAgICAgICAsIGd4ICA9IHAueCAtIHRoaXMuc3RhcnRQb2ludHMucG9pbnQueFxyXG4gICAgICAgICwgZ3kgID0gcC55IC0gdGhpcy5zdGFydFBvaW50cy5wb2ludC55O1xyXG5cclxuICAgICAgdGhpcy5lbC5maXJlKCdkcmFnbW92ZScsIHtcclxuICAgICAgICAgIGV2ZW50OiBlXHJcbiAgICAgICAgLCBwOiBwXHJcbiAgICAgICAgLCBtOiB0aGlzLm1cclxuICAgICAgICAsIGhhbmRsZXI6IHRoaXNcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZih0aGlzLmVsLmV2ZW50KCkuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuIHBcclxuXHJcbiAgICAgIC8vIG1vdmUgdGhlIGVsZW1lbnQgdG8gaXRzIG5ldyBwb3NpdGlvbiwgaWYgcG9zc2libGUgYnkgY29uc3RyYWludFxyXG4gICAgICBpZiAodHlwZW9mIGMgPT0gJ2Z1bmN0aW9uJykge1xyXG5cclxuICAgICAgICB2YXIgY29vcmQgPSBjLmNhbGwodGhpcy5lbCwgeCwgeSwgdGhpcy5tKTtcclxuXHJcbiAgICAgICAgLy8gYm9vbCwganVzdCBzaG93IHVzIGlmIG1vdmVtZW50IGlzIGFsbG93ZWQgb3Igbm90XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb29yZCA9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgIGNvb3JkID0ge1xyXG4gICAgICAgICAgICB4OiBjb29yZCxcclxuICAgICAgICAgICAgeTogY29vcmRcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiB0cnVlLCB3ZSBqdXN0IG1vdmUuIElmICFmYWxzZSBpdHMgYSBudW1iZXIgYW5kIHdlIG1vdmUgaXQgdGhlcmVcclxuICAgICAgICBpZiAoY29vcmQueCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgdGhpcy5lbC54KHgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29vcmQueCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgIHRoaXMuZWwueChjb29yZC54KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb29yZC55ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICB0aGlzLmVsLnkoeSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb29yZC55ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgdGhpcy5lbC55KGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGMgPT0gJ29iamVjdCcpIHtcclxuXHJcbiAgICAgICAgLy8ga2VlcCBlbGVtZW50IHdpdGhpbiBjb25zdHJhaW5lZCBib3hcclxuICAgICAgICBpZiAoYy5taW5YICE9IG51bGwgJiYgeCA8IGMubWluWCkge1xyXG4gICAgICAgICAgeCA9IGMubWluWDtcclxuICAgICAgICAgIGd4ID0geCAtIHRoaXMuc3RhcnRQb2ludHMuYm94Lng7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjLm1heFggIT0gbnVsbCAmJiB4ID4gYy5tYXhYIC0gYm94LndpZHRoKSB7XHJcbiAgICAgICAgICB4ID0gYy5tYXhYIC0gYm94LndpZHRoO1xyXG4gICAgICAgICAgZ3ggPSB4IC0gdGhpcy5zdGFydFBvaW50cy5ib3gueDtcclxuICAgICAgICB9IGlmIChjLm1pblkgIT0gbnVsbCAmJiB5IDwgYy5taW5ZKSB7XHJcbiAgICAgICAgICB5ID0gYy5taW5ZO1xyXG4gICAgICAgICAgZ3kgPSB5IC0gdGhpcy5zdGFydFBvaW50cy5ib3gueTtcclxuICAgICAgICB9IGVsc2UgaWYgKGMubWF4WSAhPSBudWxsICYmIHkgPiBjLm1heFkgLSBib3guaGVpZ2h0KSB7XHJcbiAgICAgICAgICB5ID0gYy5tYXhZIC0gYm94LmhlaWdodDtcclxuICAgICAgICAgIGd5ID0geSAtIHRoaXMuc3RhcnRQb2ludHMuYm94Lnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYy5zbmFwVG9HcmlkICE9IG51bGwpIHtcclxuICAgICAgICAgIHggPSB4IC0gKHggJSBjLnNuYXBUb0dyaWQpO1xyXG4gICAgICAgICAgeSA9IHkgLSAoeSAlIGMuc25hcFRvR3JpZCk7XHJcbiAgICAgICAgICBneCA9IGd4IC0gKGd4ICUgYy5zbmFwVG9HcmlkKTtcclxuICAgICAgICAgIGd5ID0gZ3kgLSAoZ3kgJSBjLnNuYXBUb0dyaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5lbCBpbnN0YW5jZW9mIFNWRy5HKVxyXG4gICAgICAgICAgdGhpcy5lbC5tYXRyaXgodGhpcy5zdGFydFBvaW50cy50cmFuc2Zvcm0pLnRyYW5zZm9ybSh7eDpneCwgeTogZ3l9LCB0cnVlKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICB0aGlzLmVsLm1vdmUoeCwgeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHNvIHdlIGNhbiB1c2UgaXQgaW4gdGhlIGVuZC1tZXRob2QsIHRvb1xyXG4gICAgICByZXR1cm4gcFxyXG4gICAgfTtcclxuXHJcbiAgICBEcmFnSGFuZGxlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oZSl7XHJcblxyXG4gICAgICAvLyBmaW5hbCBkcmFnXHJcbiAgICAgIHZhciBwID0gdGhpcy5kcmFnKGUpO1xyXG5cclxuICAgICAgLy8gZmlyZSBkcmFnZW5kIGV2ZW50XHJcbiAgICAgIHRoaXMuZWwuZmlyZSgnZHJhZ2VuZCcsIHsgZXZlbnQ6IGUsIHA6IHAsIG06IHRoaXMubSwgaGFuZGxlcjogdGhpcyB9KTtcclxuXHJcbiAgICAgIC8vIHVuYmluZCBldmVudHNcclxuICAgICAgU1ZHLm9mZih3aW5kb3csICdtb3VzZW1vdmUuZHJhZycpO1xyXG4gICAgICBTVkcub2ZmKHdpbmRvdywgJ3RvdWNobW92ZS5kcmFnJyk7XHJcbiAgICAgIFNWRy5vZmYod2luZG93LCAnbW91c2V1cC5kcmFnJyk7XHJcbiAgICAgIFNWRy5vZmYod2luZG93LCAndG91Y2hlbmQuZHJhZycpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xyXG4gICAgICAvLyBNYWtlIGVsZW1lbnQgZHJhZ2dhYmxlXHJcbiAgICAgIC8vIENvbnN0cmFpbnQgbWlnaHQgYmUgYW4gb2JqZWN0IChhcyBkZXNjcmliZWQgaW4gcmVhZG1lLm1kKSBvciBhIGZ1bmN0aW9uIGluIHRoZSBmb3JtIFwiZnVuY3Rpb24gKHgsIHkpXCIgdGhhdCBnZXRzIGNhbGxlZCBiZWZvcmUgZXZlcnkgbW92ZS5cclxuICAgICAgLy8gVGhlIGZ1bmN0aW9uIGNhbiByZXR1cm4gYSBib29sZWFuIG9yIGFuIG9iamVjdCBvZiB0aGUgZm9ybSB7eCwgeX0sIHRvIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgbW92ZWQuIFwiRmFsc2VcIiBza2lwcyBtb3ZpbmcsIHRydWUgbW92ZXMgdG8gcmF3IHgsIHkuXHJcbiAgICAgIGRyYWdnYWJsZTogZnVuY3Rpb24odmFsdWUsIGNvbnN0cmFpbnQpIHtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHBhcmFtZXRlcnMgYW5kIHJlYXNzaWduIGlmIG5lZWRlZFxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIGNvbnN0cmFpbnQgPSB2YWx1ZTtcclxuICAgICAgICAgIHZhbHVlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkcmFnSGFuZGxlciA9IHRoaXMucmVtZW1iZXIoJ19kcmFnZ2FibGUnKSB8fCBuZXcgRHJhZ0hhbmRsZXIodGhpcyk7XHJcblxyXG4gICAgICAgIC8vIFdoZW4gbm8gcGFyYW1ldGVyIGlzIGdpdmVuLCB2YWx1ZSBpcyB0cnVlXHJcbiAgICAgICAgdmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IHZhbHVlO1xyXG5cclxuICAgICAgICBpZih2YWx1ZSkgZHJhZ0hhbmRsZXIuaW5pdChjb25zdHJhaW50IHx8IHt9LCB2YWx1ZSk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLm9mZignbW91c2Vkb3duLmRyYWcnKTtcclxuICAgICAgICAgIHRoaXMub2ZmKCd0b3VjaHN0YXJ0LmRyYWcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfSkuY2FsbCh1bmRlZmluZWQpO1xuXG4gIChmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBTZWxlY3RIYW5kbGVyKGVsKSB7XHJcblxyXG4gICAgICB0aGlzLmVsID0gZWw7XHJcbiAgICAgIGVsLnJlbWVtYmVyKCdfc2VsZWN0SGFuZGxlcicsIHRoaXMpO1xyXG4gICAgICB0aGlzLnBvaW50U2VsZWN0aW9uID0ge2lzU2VsZWN0ZWQ6IGZhbHNlfTtcclxuICAgICAgdGhpcy5yZWN0U2VsZWN0aW9uID0ge2lzU2VsZWN0ZWQ6IGZhbHNlfTtcclxuXHJcbiAgICAgIC8vIGhlbHBlciBsaXN0IHdpdGggcG9zaXRpb24gc2V0dGluZ3Mgb2YgZWFjaCB0eXBlIG9mIHBvaW50XHJcbiAgICAgIHRoaXMucG9pbnRzTGlzdCA9IHtcclxuICAgICAgICBsdDogWyAwLCAwIF0sXHJcbiAgICAgICAgcnQ6IFsgJ3dpZHRoJywgMCBdLFxyXG4gICAgICAgIHJiOiBbICd3aWR0aCcsICdoZWlnaHQnIF0sXHJcbiAgICAgICAgbGI6IFsgMCwgJ2hlaWdodCcgXSxcclxuICAgICAgICB0OiBbICd3aWR0aCcsIDAgXSxcclxuICAgICAgICByOiBbICd3aWR0aCcsICdoZWlnaHQnIF0sXHJcbiAgICAgICAgYjogWyAnd2lkdGgnLCAnaGVpZ2h0JyBdLFxyXG4gICAgICAgIGw6IFsgMCwgJ2hlaWdodCcgXVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdldCBwb2ludCBjb29yZGluYXRlcyBiYXNlZCBvbiBzZXR0aW5ncyBhYm92ZSBhbmQgYW4gb2JqZWN0IChiYm94IGluIG91ciBjYXNlKVxyXG4gICAgICB0aGlzLnBvaW50Q29vcmQgPSBmdW5jdGlvbiAoc2V0dGluZywgb2JqZWN0LCBpc1BvaW50Q2VudGVyZWQpIHtcclxuICAgICAgICB2YXIgY29vcmQgPSB0eXBlb2Ygc2V0dGluZyAhPT0gJ3N0cmluZycgPyBzZXR0aW5nIDogb2JqZWN0W3NldHRpbmddO1xyXG4gICAgICAgIC8vIFRvcCwgYm90dG9tLCByaWdodCBhbmQgbGVmdCBwb2ludHMgYXJlIHBsYWNlZCBpbiB0aGUgY2VudGVyIG9mIGVsZW1lbnQgd2lkdGgvaGVpZ2h0XHJcbiAgICAgICAgcmV0dXJuIGlzUG9pbnRDZW50ZXJlZCA/IGNvb3JkIC8gMiA6IGNvb3JkXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLnBvaW50Q29vcmRzID0gZnVuY3Rpb24gKHBvaW50LCBvYmplY3QpIHtcclxuICAgICAgICB2YXIgc2V0dGluZ3MgPSB0aGlzLnBvaW50c0xpc3RbcG9pbnRdO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgeDogdGhpcy5wb2ludENvb3JkKHNldHRpbmdzWzBdLCBvYmplY3QsIChwb2ludCA9PT0gJ3QnIHx8IHBvaW50ID09PSAnYicpKSxcclxuICAgICAgICAgIHk6IHRoaXMucG9pbnRDb29yZChzZXR0aW5nc1sxXSwgb2JqZWN0LCAocG9pbnQgPT09ICdyJyB8fCBwb2ludCA9PT0gJ2wnKSlcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgfVxyXG5cclxuICBTZWxlY3RIYW5kbGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICB2YXIgYmJveCA9IHRoaXMuZWwuYmJveCgpO1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgIC8vIHN0b3JlIGRlZmF1bHRzIGxpc3Qgb2YgcG9pbnRzIGluIG9yZGVyIHRvIHZlcmlmeSB1c2VycyBjb25maWdcclxuICAgICAgdmFyIHBvaW50cyA9IHRoaXMuZWwuc2VsZWN0aXplLmRlZmF1bHRzLnBvaW50cztcclxuXHJcbiAgICAgIC8vIE1lcmdpbmcgdGhlIGRlZmF1bHRzIGFuZCB0aGUgb3B0aW9ucy1vYmplY3QgdG9nZXRoZXJcclxuICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmVsLnNlbGVjdGl6ZS5kZWZhdWx0cykge1xyXG4gICAgICAgICAgdGhpcy5vcHRpb25zW2ldID0gdGhpcy5lbC5zZWxlY3RpemUuZGVmYXVsdHNbaV07XHJcbiAgICAgICAgICBpZiAob3B0aW9uc1tpXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW2ldID0gb3B0aW9uc1tpXTtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gcHJlcGFyZSAmIHZhbGlkYXRlIGxpc3Qgb2YgcG9pbnRzIHRvIGJlIGFkZGVkIChvciBleGNsdWRlZClcclxuICAgICAgdmFyIHBvaW50c0xpc3RzID0gWydwb2ludHMnLCAncG9pbnRzRXhjbHVkZSddO1xyXG5cclxuICAgICAgZm9yICh2YXIgaSBpbiBwb2ludHNMaXN0cykge1xyXG4gICAgICAgIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnNbcG9pbnRzTGlzdHNbaV1dO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIGlmIChvcHRpb24ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBpZiBzZXQgYXMgY29tbWEgc2VwYXJhdGVkIHN0cmluZyBsaXN0ID0+IGNvbnZlcnQgaXQgaW50byBhbiBhcnJheVxyXG4gICAgICAgICAgICBvcHRpb24gPSBvcHRpb24uc3BsaXQoL1xccyosXFxzKi9pKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9wdGlvbiA9IFtdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ2Jvb2xlYW4nICYmIHBvaW50c0xpc3RzW2ldID09PSAncG9pbnRzJykge1xyXG4gICAgICAgICAgLy8gdGhpcyBpcyBub3QgbmVlZGVkLCBidXQgbGV0J3MgaGF2ZSBpdCBmb3IgbGVnYWN5IHN1cHBvcnRcclxuICAgICAgICAgIG9wdGlvbiA9IG9wdGlvbiA/IHBvaW50cyA6IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zW3BvaW50c0xpc3RzW2ldXSA9IG9wdGlvbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gaW50ZXJzZWN0IGNvcnJlY3QgYWxsIHBvaW50cyBvcHRpb25zIHdpdGggdXNlcnMgY29uZmlnIChleGNsdWRlIHVud2FudGVkIHBvaW50cylcclxuICAgICAgLy8gRVM1IC0+IE5PIGFycm93IGZ1bmN0aW9ucyBub3IgQXJyYXkuaW5jbHVkZXMoKVxyXG4gICAgICB0aGlzLm9wdGlvbnMucG9pbnRzID0gWyBwb2ludHMsIHRoaXMub3B0aW9ucy5wb2ludHMgXS5yZWR1Y2UoXHJcbiAgICAgICAgZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgIHJldHVybiBhLmZpbHRlcihcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gYi5pbmRleE9mKGMpID4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBleGNsdWRlIHBvaW50c0V4Y2x1ZGUsIGlmIHdhbnRlZFxyXG4gICAgICB0aGlzLm9wdGlvbnMucG9pbnRzID0gWyB0aGlzLm9wdGlvbnMucG9pbnRzLCB0aGlzLm9wdGlvbnMucG9pbnRzRXhjbHVkZSBdLnJlZHVjZShcclxuICAgICAgICBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgcmV0dXJuIGEuZmlsdGVyKFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICAgIHJldHVybiBiLmluZGV4T2YoYykgPCAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLmVsLnBhcmVudCgpO1xyXG4gICAgICB0aGlzLm5lc3RlZCA9ICh0aGlzLm5lc3RlZCB8fCB0aGlzLnBhcmVudC5ncm91cCgpKTtcclxuICAgICAgdGhpcy5uZXN0ZWQubWF0cml4KG5ldyBTVkcuTWF0cml4KHRoaXMuZWwpLnRyYW5zbGF0ZShiYm94LngsIGJib3gueSkpO1xyXG5cclxuICAgICAgLy8gV2hlbiBkZWVwU2VsZWN0IGlzIGVuYWJsZWQgYW5kIHRoZSBlbGVtZW50IGlzIGEgbGluZS9wb2x5bGluZS9wb2x5Z29uLCBkcmF3IG9ubHkgcG9pbnRzIGZvciBtb3ZpbmdcclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwU2VsZWN0ICYmIFsnbGluZScsICdwb2x5bGluZScsICdwb2x5Z29uJ10uaW5kZXhPZih0aGlzLmVsLnR5cGUpICE9PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5zZWxlY3RQb2ludHModmFsdWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5zZWxlY3RSZWN0KHZhbHVlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5vYnNlcnZlKCk7XHJcbiAgICAgIHRoaXMuY2xlYW51cCgpO1xyXG5cclxuICB9O1xyXG5cclxuICBTZWxlY3RIYW5kbGVyLnByb3RvdHlwZS5zZWxlY3RQb2ludHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgIHRoaXMucG9pbnRTZWxlY3Rpb24uaXNTZWxlY3RlZCA9IHZhbHVlO1xyXG5cclxuICAgICAgLy8gV2hlbiBzZXQgaXMgYWxyZWFkeSB0aGVyZSB3ZSBkb250IGhhdmUgdG8gY3JlYXRlIG9uZVxyXG4gICAgICBpZiAodGhpcy5wb2ludFNlbGVjdGlvbi5zZXQpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDcmVhdGUgb3VyIHNldCBvZiBlbGVtZW50c1xyXG4gICAgICB0aGlzLnBvaW50U2VsZWN0aW9uLnNldCA9IHRoaXMucGFyZW50LnNldCgpO1xyXG4gICAgICAvLyBkcmF3IHRoZSBwb2ludHMgYW5kIG1hcmsgdGhlIGVsZW1lbnQgYXMgc2VsZWN0ZWRcclxuICAgICAgdGhpcy5kcmF3UG9pbnRzKCk7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgfTtcclxuXHJcbiAgLy8gY3JlYXRlIHRoZSBwb2ludC1hcnJheSB3aGljaCBjb250YWlucyB0aGUgMiBwb2ludHMgb2YgYSBsaW5lIG9yIHNpbXBseSB0aGUgcG9pbnRzLWFycmF5IG9mIHBvbHlsaW5lL3BvbHlnb25cclxuICBTZWxlY3RIYW5kbGVyLnByb3RvdHlwZS5nZXRQb2ludEFycmF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgYmJveCA9IHRoaXMuZWwuYmJveCgpO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuZWwuYXJyYXkoKS52YWx1ZU9mKCkubWFwKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgcmV0dXJuIFtlbFswXSAtIGJib3gueCwgZWxbMV0gLSBiYm94LnldO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBEcmF3cyBhIHBvaW50c1xyXG4gIFNlbGVjdEhhbmRsZXIucHJvdG90eXBlLmRyYXdQb2ludHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLCBhcnJheSA9IHRoaXMuZ2V0UG9pbnRBcnJheSgpO1xyXG5cclxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgb2YgcG9pbnRzXHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG5cclxuICAgICAgICAgIHZhciBjdXJyaWVkRXZlbnQgPSAoZnVuY3Rpb24gKGspIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgICAgICAgIGV2ID0gZXYgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCA/IGV2LnByZXZlbnREZWZhdWx0KCkgOiBldi5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHZhciB4ID0gZXYucGFnZVggfHwgZXYudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgICAgICAgICAgICAgdmFyIHkgPSBldi5wYWdlWSB8fCBldi50b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgICAgICAgICAgICAgICBfdGhpcy5lbC5maXJlKCdwb2ludCcsIHt4OiB4LCB5OiB5LCBpOiBrLCBldmVudDogZXZ9KTtcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSkoaSk7XHJcblxyXG4gICAgICAgICAgLy8gYWRkIGV2ZXJ5IHBvaW50IHRvIHRoZSBzZXRcclxuICAgICAgICAgIC8vIGFkZCBjc3MtY2xhc3NlcyBhbmQgYSB0b3VjaHN0YXJ0LWV2ZW50IHdoaWNoIGZpcmVzIG91ciBldmVudCBmb3IgbW92aW5nIHBvaW50c1xyXG4gICAgICAgICAgdmFyIHBvaW50ID0gdGhpcy5kcmF3UG9pbnQoYXJyYXlbaV1bMF0sIGFycmF5W2ldWzFdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY2xhc3NQb2ludHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKHRoaXMub3B0aW9ucy5jbGFzc1BvaW50cyArICdfcG9pbnQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5vbigndG91Y2hzdGFydCcsIGN1cnJpZWRFdmVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlZG93bicsIGN1cnJpZWRFdmVudCk7XHJcbiAgICAgICAgICB0aGlzLnBvaW50U2VsZWN0aW9uLnNldC5hZGQocG9pbnQpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gVGhlIGZ1bmN0aW9uIHRvIGRyYXcgc2luZ2xlIHBvaW50XHJcbiAgU2VsZWN0SGFuZGxlci5wcm90b3R5cGUuZHJhd1BvaW50ID0gZnVuY3Rpb24gKGN4LCBjeSkge1xyXG4gICAgICB2YXIgcG9pbnRUeXBlID0gdGhpcy5vcHRpb25zLnBvaW50VHlwZTtcclxuXHJcbiAgICAgIHN3aXRjaCAocG9pbnRUeXBlKSB7XHJcbiAgICAgICAgICBjYXNlICdjaXJjbGUnOlxyXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyYXdDaXJjbGUoY3gsIGN5KTtcclxuICAgICAgICAgIGNhc2UgJ3JlY3QnOlxyXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyYXdSZWN0KGN4LCBjeSk7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9pbnRUeXBlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwb2ludFR5cGUuY2FsbCh0aGlzLCBjeCwgY3kpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duICcgKyBwb2ludFR5cGUgKyAnIHBvaW50IHR5cGUhJyk7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBUaGUgZnVuY3Rpb24gdG8gZHJhdyB0aGUgY2lyY2xlIHBvaW50XHJcbiAgU2VsZWN0SGFuZGxlci5wcm90b3R5cGUuZHJhd0NpcmNsZSA9IGZ1bmN0aW9uIChjeCwgY3kpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubmVzdGVkLmNpcmNsZSh0aGlzLm9wdGlvbnMucG9pbnRTaXplKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2VudGVyKGN4LCBjeSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gVGhlIGZ1bmN0aW9uIHRvIGRyYXcgdGhlIHJlY3QgcG9pbnRcclxuICBTZWxlY3RIYW5kbGVyLnByb3RvdHlwZS5kcmF3UmVjdCA9IGZ1bmN0aW9uIChjeCwgY3kpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubmVzdGVkLnJlY3QodGhpcy5vcHRpb25zLnBvaW50U2l6ZSwgdGhpcy5vcHRpb25zLnBvaW50U2l6ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNlbnRlcihjeCwgY3kpO1xyXG4gIH07XHJcblxyXG4gIC8vIGV2ZXJ5IHRpbWUgYSBwb2ludCBpcyBtb3ZlZCwgd2UgaGF2ZSB0byB1cGRhdGUgdGhlIHBvc2l0aW9ucyBvZiBvdXIgcG9pbnRcclxuICBTZWxlY3RIYW5kbGVyLnByb3RvdHlwZS51cGRhdGVQb2ludFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGFycmF5ID0gdGhpcy5nZXRQb2ludEFycmF5KCk7XHJcblxyXG4gICAgICB0aGlzLnBvaW50U2VsZWN0aW9uLnNldC5lYWNoKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5jeCgpID09PSBhcnJheVtpXVswXSAmJiB0aGlzLmN5KCkgPT09IGFycmF5W2ldWzFdKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5jZW50ZXIoYXJyYXlbaV1bMF0sIGFycmF5W2ldWzFdKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0SGFuZGxlci5wcm90b3R5cGUudXBkYXRlUmVjdFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcywgYmJveCA9IHRoaXMuZWwuYmJveCgpO1xyXG5cclxuICAgICAgdGhpcy5yZWN0U2VsZWN0aW9uLnNldC5nZXQoMCkuYXR0cih7XHJcbiAgICAgICAgICB3aWR0aDogYmJveC53aWR0aCxcclxuICAgICAgICAgIGhlaWdodDogYmJveC5oZWlnaHRcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBzZXQuZ2V0KDEpIGlzIGFsd2F5cyBpbiB0aGUgdXBwZXIgbGVmdCBjb3JuZXIuIG5vIG5lZWQgdG8gbW92ZSBpdFxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBvaW50cy5sZW5ndGgpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMucG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICB2YXIgY29vcmRzID0gX3RoaXMucG9pbnRDb29yZHMocG9pbnQsIGJib3gpO1xyXG5cclxuICAgICAgICAgIF90aGlzLnJlY3RTZWxlY3Rpb24uc2V0LmdldChpbmRleCArIDEpLmNlbnRlcihjb29yZHMueCwgY29vcmRzLnkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJvdGF0aW9uUG9pbnQpIHtcclxuICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLnJlY3RTZWxlY3Rpb24uc2V0Lmxlbmd0aCgpO1xyXG5cclxuICAgICAgICAgIHRoaXMucmVjdFNlbGVjdGlvbi5zZXQuZ2V0KGxlbmd0aCAtIDEpLmNlbnRlcihiYm94LndpZHRoIC8gMiwgMjApO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0SGFuZGxlci5wcm90b3R5cGUuc2VsZWN0UmVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgdmFyIF90aGlzID0gdGhpcywgYmJveCA9IHRoaXMuZWwuYmJveCgpO1xyXG5cclxuICAgICAgdGhpcy5yZWN0U2VsZWN0aW9uLmlzU2VsZWN0ZWQgPSB2YWx1ZTtcclxuXHJcbiAgICAgIC8vIHdoZW4gc2V0IGlzIGFscmVhZHkgcFxyXG4gICAgICB0aGlzLnJlY3RTZWxlY3Rpb24uc2V0ID0gdGhpcy5yZWN0U2VsZWN0aW9uLnNldCB8fCB0aGlzLnBhcmVudC5zZXQoKTtcclxuXHJcbiAgICAgIC8vIGhlbHBlckZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG1vdXNlLWRvd24gZnVuY3Rpb24gd2hpY2ggdHJpZ2dlcnMgdGhlIGV2ZW50IHNwZWNpZmllZCBpbiBgZXZlbnROYW1lYFxyXG4gICAgICBmdW5jdGlvbiBnZXRNb3NlRG93bkZ1bmMoZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgICAgZXYgPSBldiB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQgPyBldi5wcmV2ZW50RGVmYXVsdCgpIDogZXYucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHggPSBldi5wYWdlWCB8fCBldi50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICAgIHZhciB5ID0gZXYucGFnZVkgfHwgZXYudG91Y2hlc1swXS5wYWdlWTtcclxuICAgICAgICAgICAgICBfdGhpcy5lbC5maXJlKGV2ZW50TmFtZSwge3g6IHgsIHk6IHksIGV2ZW50OiBldn0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gY3JlYXRlIHRoZSBzZWxlY3Rpb24tcmVjdGFuZ2xlIGFuZCBhZGQgdGhlIGNzcy1jbGFzc1xyXG4gICAgICBpZiAoIXRoaXMucmVjdFNlbGVjdGlvbi5zZXQuZ2V0KDApKSB7XHJcbiAgICAgICAgICB0aGlzLnJlY3RTZWxlY3Rpb24uc2V0LmFkZCh0aGlzLm5lc3RlZC5yZWN0KGJib3gud2lkdGgsIGJib3guaGVpZ2h0KS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY2xhc3NSZWN0KSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIERyYXcgUG9pbnRzIGF0IHRoZSBlZGdlcywgaWYgZW5hYmxlZFxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBvaW50cy5sZW5ndGggJiYgdGhpcy5yZWN0U2VsZWN0aW9uLnNldC5sZW5ndGgoKSA8IDIpIHtcclxuICAgICAgICAgIHZhciBlbmFtZSA9XCJ0b3VjaHN0YXJ0XCIsIG1uYW1lID0gXCJtb3VzZWRvd25cIjtcclxuXHJcbiAgICAgICAgICB0aGlzLm9wdGlvbnMucG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNvb3JkcyA9IF90aGlzLnBvaW50Q29vcmRzKHBvaW50LCBiYm94KTtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHBvaW50RWxlbWVudCA9IF90aGlzLmRyYXdQb2ludChjb29yZHMueCwgY29vcmRzLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgX3RoaXMub3B0aW9ucy5jbGFzc1BvaW50cyArICdfJyArIHBvaW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbihtbmFtZSwgZ2V0TW9zZURvd25GdW5jKHBvaW50KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oZW5hbWUsIGdldE1vc2VEb3duRnVuYyhwb2ludCkpO1xyXG4gICAgICAgICAgICAgIF90aGlzLnJlY3RTZWxlY3Rpb24uc2V0LmFkZChwb2ludEVsZW1lbnQpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5yZWN0U2VsZWN0aW9uLnNldC5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICB0aGlzLmFkZENsYXNzKF90aGlzLm9wdGlvbnMuY2xhc3NQb2ludHMpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGRyYXcgcm90YXRpb25QaW50LCBpZiBlbmFibGVkXHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucm90YXRpb25Qb2ludCAmJiAoKHRoaXMub3B0aW9ucy5wb2ludHMgJiYgIXRoaXMucmVjdFNlbGVjdGlvbi5zZXQuZ2V0KDkpKSB8fCAoIXRoaXMub3B0aW9ucy5wb2ludHMgJiYgIXRoaXMucmVjdFNlbGVjdGlvbi5zZXQuZ2V0KDEpKSkpIHtcclxuXHJcbiAgICAgICAgICB2YXIgY3VycmllZEV2ZW50ID0gZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgICAgZXYgPSBldiB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQgPyBldi5wcmV2ZW50RGVmYXVsdCgpIDogZXYucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHggPSBldi5wYWdlWCB8fCBldi50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICAgIHZhciB5ID0gZXYucGFnZVkgfHwgZXYudG91Y2hlc1swXS5wYWdlWTtcclxuICAgICAgICAgICAgICBfdGhpcy5lbC5maXJlKCdyb3QnLCB7eDogeCwgeTogeSwgZXZlbnQ6IGV2fSk7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHZhciBwb2ludEVsZW1lbnQgPSB0aGlzLmRyYXdQb2ludChiYm94LndpZHRoIC8gMiwgMjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgdGhpcy5vcHRpb25zLmNsYXNzUG9pbnRzICsgJ19yb3QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbihcInRvdWNoc3RhcnRcIiwgY3VycmllZEV2ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlZG93blwiLCBjdXJyaWVkRXZlbnQpO1xyXG4gICAgICAgICAgdGhpcy5yZWN0U2VsZWN0aW9uLnNldC5hZGQocG9pbnRFbGVtZW50KTtcclxuICAgICAgfVxyXG5cclxuICB9O1xyXG5cclxuICBTZWxlY3RIYW5kbGVyLnByb3RvdHlwZS5oYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgdmFyIGJib3ggPSB0aGlzLmVsLmJib3goKTtcclxuICAgICAgdGhpcy5uZXN0ZWQubWF0cml4KG5ldyBTVkcuTWF0cml4KHRoaXMuZWwpLnRyYW5zbGF0ZShiYm94LngsIGJib3gueSkpO1xyXG5cclxuICAgICAgaWYgKHRoaXMucmVjdFNlbGVjdGlvbi5pc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZVJlY3RTZWxlY3Rpb24oKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMucG9pbnRTZWxlY3Rpb24uaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVQb2ludFNlbGVjdGlvbigpO1xyXG4gICAgICB9XHJcblxyXG4gIH07XHJcblxyXG4gIFNlbGVjdEhhbmRsZXIucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoTXV0YXRpb25PYnNlcnZlcikge1xyXG4gICAgICAgICAgaWYgKHRoaXMucmVjdFNlbGVjdGlvbi5pc1NlbGVjdGVkIHx8IHRoaXMucG9pbnRTZWxlY3Rpb24uaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJJbnN0ID0gdGhpcy5vYnNlcnZlckluc3QgfHwgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVyKCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlckluc3Qub2JzZXJ2ZSh0aGlzLmVsLm5vZGUsIHthdHRyaWJ1dGVzOiB0cnVlfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJJbnN0LmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJJbnN0O1xyXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmVsLm9mZignRE9NQXR0ck1vZGlmaWVkLnNlbGVjdCcpO1xyXG5cclxuICAgICAgICAgIGlmICh0aGlzLnJlY3RTZWxlY3Rpb24uaXNTZWxlY3RlZCB8fCB0aGlzLnBvaW50U2VsZWN0aW9uLmlzU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICB0aGlzLmVsLm9uKCdET01BdHRyTW9kaWZpZWQuc2VsZWN0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVyKCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICBTZWxlY3RIYW5kbGVyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgLy92YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKCF0aGlzLnJlY3RTZWxlY3Rpb24uaXNTZWxlY3RlZCAmJiB0aGlzLnJlY3RTZWxlY3Rpb24uc2V0KSB7XHJcbiAgICAgICAgICAvLyBzdG9wIHdhdGNoaW5nIHRoZSBlbGVtZW50LCByZW1vdmUgdGhlIHNlbGVjdGlvblxyXG4gICAgICAgICAgdGhpcy5yZWN0U2VsZWN0aW9uLnNldC5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5yZWN0U2VsZWN0aW9uLnNldC5jbGVhcigpO1xyXG4gICAgICAgICAgZGVsZXRlIHRoaXMucmVjdFNlbGVjdGlvbi5zZXQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5wb2ludFNlbGVjdGlvbi5pc1NlbGVjdGVkICYmIHRoaXMucG9pbnRTZWxlY3Rpb24uc2V0KSB7XHJcbiAgICAgICAgICAvLyBSZW1vdmUgYWxsIHBvaW50cywgY2xlYXIgdGhlIHNldCwgc3RvcCB3YXRjaGluZyB0aGUgZWxlbWVudFxyXG4gICAgICAgICAgdGhpcy5wb2ludFNlbGVjdGlvbi5zZXQuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHRoaXMucG9pbnRTZWxlY3Rpb24uc2V0LmNsZWFyKCk7XHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5wb2ludFNlbGVjdGlvbi5zZXQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5wb2ludFNlbGVjdGlvbi5pc1NlbGVjdGVkICYmICF0aGlzLnJlY3RTZWxlY3Rpb24uaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgdGhpcy5uZXN0ZWQucmVtb3ZlKCk7XHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5uZXN0ZWQ7XHJcblxyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcblxyXG4gIFNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcclxuICAgICAgLy8gU2VsZWN0IGVsZW1lbnQgd2l0aCBtb3VzZVxyXG4gICAgICBzZWxlY3RpemU6IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICAgIC8vIENoZWNrIHRoZSBwYXJhbWV0ZXJzIGFuZCByZWFzc2lnbiBpZiBuZWVkZWRcclxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgb3B0aW9ucyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgIHZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgc2VsZWN0SGFuZGxlciA9IHRoaXMucmVtZW1iZXIoJ19zZWxlY3RIYW5kbGVyJykgfHwgbmV3IFNlbGVjdEhhbmRsZXIodGhpcyk7XHJcblxyXG4gICAgICAgICAgc2VsZWN0SGFuZGxlci5pbml0KHZhbHVlID09PSB1bmRlZmluZWQgPyB0cnVlIDogdmFsdWUsIG9wdGlvbnMgfHwge30pO1xyXG5cclxuICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cclxuICAgICAgfVxyXG4gIH0pO1xyXG5cclxuICBTVkcuRWxlbWVudC5wcm90b3R5cGUuc2VsZWN0aXplLmRlZmF1bHRzID0ge1xyXG4gICAgICBwb2ludHM6IFsnbHQnLCAncnQnLCAncmInLCAnbGInLCAndCcsICdyJywgJ2InLCAnbCddLCAgICAvLyB3aGljaCBwb2ludHMgdG8gZHJhdywgZGVmYXVsdCBhbGxcclxuICAgICAgcG9pbnRzRXhjbHVkZTogW10sICAgICAgICAgICAgICAgICAgICAgICAvLyBlYXNpZXIgb3B0aW9uIGlmIHRvIGV4Y2x1ZGUgZmV3IHRoYW4gcmV3cml0ZSBhbGxcclxuICAgICAgY2xhc3NSZWN0OiAnc3ZnX3NlbGVjdF9ib3VuZGluZ1JlY3QnLCAgICAvLyBDc3MtY2xhc3MgYWRkZWQgdG8gdGhlIHJlY3RcclxuICAgICAgY2xhc3NQb2ludHM6ICdzdmdfc2VsZWN0X3BvaW50cycsICAgICAgICAvLyBDc3MtY2xhc3MgYWRkZWQgdG8gdGhlIHBvaW50c1xyXG4gICAgICBwb2ludFNpemU6IDcsICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpemUgb2YgcG9pbnRcclxuICAgICAgcm90YXRpb25Qb2ludDogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0cnVlLCByb3RhdGlvbiBwb2ludCBpcyBkcmF3bi4gTmVlZGVkIGZvciByb3RhdGlvbiFcclxuICAgICAgZGVlcFNlbGVjdDogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0cnVlLCBtb3Zpbmcgb2Ygc2luZ2xlIHBvaW50cyBpcyBwb3NzaWJsZSAob25seSBsaW5lLCBwb2x5bGluZSwgcG9seW9uKVxyXG4gICAgICBwb2ludFR5cGU6ICdjaXJjbGUnICAgICAgICAgICAgICAgICAgICAgIC8vIFBvaW50IHR5cGU6IGNpcmNsZSBvciByZWN0LCBkZWZhdWx0IGNpcmNsZVxyXG4gIH07XG4gIH0oKSk7XG5cbiAgKGZ1bmN0aW9uKCkge1xuICAoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgZnVuY3Rpb24gUmVzaXplSGFuZGxlcihlbCkge1xyXG5cclxuICAgICAgICAgIGVsLnJlbWVtYmVyKCdfcmVzaXplSGFuZGxlcicsIHRoaXMpO1xyXG5cclxuICAgICAgICAgIHRoaXMuZWwgPSBlbDtcclxuICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xyXG4gICAgICAgICAgdGhpcy5sYXN0VXBkYXRlQ2FsbCA9IG51bGw7XHJcbiAgICAgICAgICB0aGlzLnAgPSBlbC5kb2MoKS5ub2RlLmNyZWF0ZVNWR1BvaW50KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFJlc2l6ZUhhbmRsZXIucHJvdG90eXBlLnRyYW5zZm9ybVBvaW50ID0gZnVuY3Rpb24oeCwgeSwgbSl7XHJcblxyXG4gICAgICAgICAgdGhpcy5wLnggPSB4IC0gKHRoaXMub2Zmc2V0LnggLSB3aW5kb3cucGFnZVhPZmZzZXQpO1xyXG4gICAgICAgICAgdGhpcy5wLnkgPSB5IC0gKHRoaXMub2Zmc2V0LnkgLSB3aW5kb3cucGFnZVlPZmZzZXQpO1xyXG5cclxuICAgICAgICAgIHJldHVybiB0aGlzLnAubWF0cml4VHJhbnNmb3JtKG0gfHwgdGhpcy5tKTtcclxuXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBSZXNpemVIYW5kbGVyLnByb3RvdHlwZS5fZXh0cmFjdFBvc2l0aW9uID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgIC8vIEV4dHJhY3QgYSBwb3NpdGlvbiBmcm9tIGEgbW91c2UvdG91Y2ggZXZlbnQuXHJcbiAgICAgICAgICAvLyBSZXR1cm5zIHsgeDogLi4sIHk6IC4uIH1cclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgeDogZXZlbnQuY2xpZW50WCAhPSBudWxsID8gZXZlbnQuY2xpZW50WCA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCxcclxuICAgICAgICAgICAgICB5OiBldmVudC5jbGllbnRZICE9IG51bGwgPyBldmVudC5jbGllbnRZIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRZXHJcbiAgICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBSZXNpemVIYW5kbGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG5cclxuICAgICAgICAgIGlmIChvcHRpb25zID09PSAnc3RvcCcpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5vcHRpb25zID0ge307XHJcblxyXG4gICAgICAgICAgLy8gTWVyZ2Ugb3B0aW9ucyBhbmQgZGVmYXVsdHNcclxuICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5lbC5yZXNpemUuZGVmYXVsdHMpIHtcclxuICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPSB0aGlzLmVsLnJlc2l6ZS5kZWZhdWx0c1tpXTtcclxuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbaV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1tpXSA9IG9wdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFdlIGxpc3RlbiB0byBhbGwgdGhlc2UgZXZlbnRzIHdoaWNoIGFyZSBzcGVjaWZ5aW5nIGRpZmZlcmVudCBlZGdlc1xyXG4gICAgICAgICAgdGhpcy5lbC5vbignbHQucmVzaXplJywgZnVuY3Rpb24oZSl7IF90aGlzLnJlc2l6ZShlIHx8IHdpbmRvdy5ldmVudCk7IH0pOyAgLy8gTGVmdC1Ub3BcclxuICAgICAgICAgIHRoaXMuZWwub24oJ3J0LnJlc2l6ZScsIGZ1bmN0aW9uKGUpeyBfdGhpcy5yZXNpemUoZSB8fCB3aW5kb3cuZXZlbnQpOyB9KTsgIC8vIFJpZ2h0LVRvcFxyXG4gICAgICAgICAgdGhpcy5lbC5vbigncmIucmVzaXplJywgZnVuY3Rpb24oZSl7IF90aGlzLnJlc2l6ZShlIHx8IHdpbmRvdy5ldmVudCk7IH0pOyAgLy8gUmlnaHQtQm90dG9tXHJcbiAgICAgICAgICB0aGlzLmVsLm9uKCdsYi5yZXNpemUnLCBmdW5jdGlvbihlKXsgX3RoaXMucmVzaXplKGUgfHwgd2luZG93LmV2ZW50KTsgfSk7ICAvLyBMZWZ0LUJvdHRvbVxyXG5cclxuICAgICAgICAgIHRoaXMuZWwub24oJ3QucmVzaXplJywgZnVuY3Rpb24oZSl7IF90aGlzLnJlc2l6ZShlIHx8IHdpbmRvdy5ldmVudCk7IH0pOyAgIC8vIFRvcFxyXG4gICAgICAgICAgdGhpcy5lbC5vbignci5yZXNpemUnLCBmdW5jdGlvbihlKXsgX3RoaXMucmVzaXplKGUgfHwgd2luZG93LmV2ZW50KTsgfSk7ICAgLy8gUmlnaHRcclxuICAgICAgICAgIHRoaXMuZWwub24oJ2IucmVzaXplJywgZnVuY3Rpb24oZSl7IF90aGlzLnJlc2l6ZShlIHx8IHdpbmRvdy5ldmVudCk7IH0pOyAgIC8vIEJvdHRvbVxyXG4gICAgICAgICAgdGhpcy5lbC5vbignbC5yZXNpemUnLCBmdW5jdGlvbihlKXsgX3RoaXMucmVzaXplKGUgfHwgd2luZG93LmV2ZW50KTsgfSk7ICAgLy8gTGVmdFxyXG5cclxuICAgICAgICAgIHRoaXMuZWwub24oJ3JvdC5yZXNpemUnLCBmdW5jdGlvbihlKXsgX3RoaXMucmVzaXplKGUgfHwgd2luZG93LmV2ZW50KTsgfSk7IC8vIFJvdGF0aW9uXHJcblxyXG4gICAgICAgICAgdGhpcy5lbC5vbigncG9pbnQucmVzaXplJywgZnVuY3Rpb24oZSl7IF90aGlzLnJlc2l6ZShlIHx8IHdpbmRvdy5ldmVudCk7IH0pOyAvLyBQb2ludC1Nb3ZpbmdcclxuXHJcbiAgICAgICAgICAvLyBUaGlzIGNhbGwgZW5zdXJlcywgdGhhdCB0aGUgcGx1Z2luIHJlYWN0cyB0byBhIGNoYW5nZSBvZiBzbmFwVG9HcmlkIGltbWVkaWF0ZWx5XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgfTtcclxuXHJcbiAgICAgIFJlc2l6ZUhhbmRsZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgdGhpcy5lbC5vZmYoJ2x0LnJlc2l6ZScpO1xyXG4gICAgICAgICAgdGhpcy5lbC5vZmYoJ3J0LnJlc2l6ZScpO1xyXG4gICAgICAgICAgdGhpcy5lbC5vZmYoJ3JiLnJlc2l6ZScpO1xyXG4gICAgICAgICAgdGhpcy5lbC5vZmYoJ2xiLnJlc2l6ZScpO1xyXG5cclxuICAgICAgICAgIHRoaXMuZWwub2ZmKCd0LnJlc2l6ZScpO1xyXG4gICAgICAgICAgdGhpcy5lbC5vZmYoJ3IucmVzaXplJyk7XHJcbiAgICAgICAgICB0aGlzLmVsLm9mZignYi5yZXNpemUnKTtcclxuICAgICAgICAgIHRoaXMuZWwub2ZmKCdsLnJlc2l6ZScpO1xyXG5cclxuICAgICAgICAgIHRoaXMuZWwub2ZmKCdyb3QucmVzaXplJyk7XHJcblxyXG4gICAgICAgICAgdGhpcy5lbC5vZmYoJ3BvaW50LnJlc2l6ZScpO1xyXG5cclxuICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgUmVzaXplSGFuZGxlci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICB0aGlzLm0gPSB0aGlzLmVsLm5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpO1xyXG4gICAgICAgICAgdGhpcy5vZmZzZXQgPSB7IHg6IHdpbmRvdy5wYWdlWE9mZnNldCwgeTogd2luZG93LnBhZ2VZT2Zmc2V0IH07XHJcblxyXG4gICAgICAgICAgdmFyIHR4UHQgPSB0aGlzLl9leHRyYWN0UG9zaXRpb24oZXZlbnQuZGV0YWlsLmV2ZW50KTtcclxuICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHtcclxuICAgICAgICAgICAgICB0eXBlOiB0aGlzLmVsLnR5cGUsIC8vIHRoZSB0eXBlIG9mIGVsZW1lbnRcclxuICAgICAgICAgICAgICBwOiB0aGlzLnRyYW5zZm9ybVBvaW50KHR4UHQueCwgdHhQdC55KSxcclxuICAgICAgICAgICAgICB4OiBldmVudC5kZXRhaWwueCwgICAgICAvLyB4LXBvc2l0aW9uIG9mIHRoZSBtb3VzZSB3aGVuIHJlc2l6aW5nIHN0YXJ0ZWRcclxuICAgICAgICAgICAgICB5OiBldmVudC5kZXRhaWwueSwgICAgICAvLyB5LXBvc2l0aW9uIG9mIHRoZSBtb3VzZSB3aGVuIHJlc2l6aW5nIHN0YXJ0ZWRcclxuICAgICAgICAgICAgICBib3g6IHRoaXMuZWwuYmJveCgpLCAgICAvLyBUaGUgYm91bmRpbmctYm94IG9mIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICAgICAgcm90YXRpb246IHRoaXMuZWwudHJhbnNmb3JtKCkucm90YXRpb24gIC8vIFRoZSBjdXJyZW50IHJvdGF0aW9uIG9mIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIC8vIEFkZCBmb250LXNpemUgcGFyYW1ldGVyIGlmIHRoZSBlbGVtZW50IHR5cGUgaXMgdGV4dFxyXG4gICAgICAgICAgaWYgKHRoaXMuZWwudHlwZSA9PT0gXCJ0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMuZm9udFNpemUgPSB0aGlzLmVsLmF0dHIoKVtcImZvbnQtc2l6ZVwiXTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyB0aGUgaS1wYXJhbSBpbiB0aGUgZXZlbnQgaG9sZHMgdGhlIGluZGV4IG9mIHRoZSBwb2ludCB3aGljaCBpcyBtb3ZlZCwgd2hlbiB1c2luZyBgZGVlcFNlbGVjdGBcclxuICAgICAgICAgIGlmIChldmVudC5kZXRhaWwuaSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGdldCB0aGUgcG9pbnQgYXJyYXlcclxuICAgICAgICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmVsLmFycmF5KCkudmFsdWVPZigpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBpbmRleCBhbmQgdGhlIHBvaW50IHdoaWNoIGlzIG1vdmVkXHJcbiAgICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLmkgPSBldmVudC5kZXRhaWwuaTtcclxuICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMucG9pbnRDb29yZHMgPSBbYXJyYXlbZXZlbnQuZGV0YWlsLmldWzBdLCBhcnJheVtldmVudC5kZXRhaWwuaV1bMV1dO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIExldHMgY2hlY2sgd2hpY2ggZWRnZSBvZiB0aGUgYm91bmRpbmctYm94IHdhcyBjbGlja2VkIGFuZCByZXNpemUgdGhlIHRoaXMuZWwgYWNjb3JkaW5nIHRvIHRoaXNcclxuICAgICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBMZWZ0LVRvcC1FZGdlXHJcbiAgICAgICAgICAgICAgY2FzZSAnbHQnOlxyXG4gICAgICAgICAgICAgICAgICAvLyBXZSBidWlsZCBhIGNhbGN1bGF0aW5nIGZ1bmN0aW9uIGZvciBldmVyeSBjYXNlIHdoaWNoIGdpdmVzIHVzIHRoZSBuZXcgcG9zaXRpb24gb2YgdGhlIHRoaXMuZWxcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjID0gZnVuY3Rpb24gKGRpZmZYLCBkaWZmWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHByb2NlZHVyZSBpcyBhbHdheXMgdGhlIHNhbWVcclxuICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IHdlIHNuYXAgdGhlIGVkZ2UgdG8gdGhlIGdpdmVuIGdyaWQgKHNuYXBwaW5nIHRvIDFweCBncmlkIGlzIG5vcm1hbCByZXNpemluZylcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzbmFwID0gdGhpcy5zbmFwVG9HcmlkKGRpZmZYLCBkaWZmWSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTm93IHdlIGNoZWNrIGlmIHRoZSBuZXcgaGVpZ2h0IGFuZCB3aWR0aCBzdGlsbCB2YWxpZCAoPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGggLSBzbmFwWzBdID4gMCAmJiB0aGlzLnBhcmFtZXRlcnMuYm94LmhlaWdodCAtIHNuYXBbMV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi4uaWYgdmFsaWQsIHdlIHJlc2l6ZSB0aGUgdGhpcy5lbCAod2hpY2ggY2FuIGluY2x1ZGUgbW92aW5nIGJlY2F1c2UgdGhlIGNvb3JkLXN5c3RlbSBzdGFydHMgYXQgdGhlIGxlZnQtdG9wIGFuZCB0aGlzIGVkZ2UgaXMgbW92aW5nIHNvbWV0aW1lcyB3aGVuIHJlc2l6ZWQpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICogYnV0IGZpcnN0IGNoZWNrIGlmIHRoZSBlbGVtZW50IGlzIHRleHQgYm94LCBzbyB3ZSBjYW4gY2hhbmdlIHRoZSBmb250IHNpemUgaW5zdGVhZCBvZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMudHlwZSA9PT0gXCJ0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5tb3ZlKHRoaXMucGFyYW1ldGVycy5ib3gueCArIHNuYXBbMF0sIHRoaXMucGFyYW1ldGVycy5ib3gueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuYXR0cihcImZvbnQtc2l6ZVwiLCB0aGlzLnBhcmFtZXRlcnMuZm9udFNpemUgLSBzbmFwWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc25hcCA9IHRoaXMuY2hlY2tBc3BlY3RSYXRpbyhzbmFwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5tb3ZlKHRoaXMucGFyYW1ldGVycy5ib3gueCArIHNuYXBbMF0sIHRoaXMucGFyYW1ldGVycy5ib3gueSArIHNuYXBbMV0pLnNpemUodGhpcy5wYXJhbWV0ZXJzLmJveC53aWR0aCAtIHNuYXBbMF0sIHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0IC0gc25hcFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAvLyBSaWdodC1Ub3BcclxuICAgICAgICAgICAgICBjYXNlICdydCc6XHJcbiAgICAgICAgICAgICAgICAgIC8vIHMuYS5cclxuICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjID0gZnVuY3Rpb24gKGRpZmZYLCBkaWZmWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHNuYXAgPSB0aGlzLnNuYXBUb0dyaWQoZGlmZlgsIGRpZmZZLCAxIDw8IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGggKyBzbmFwWzBdID4gMCAmJiB0aGlzLnBhcmFtZXRlcnMuYm94LmhlaWdodCAtIHNuYXBbMV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy50eXBlID09PSBcInRleHRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLm1vdmUodGhpcy5wYXJhbWV0ZXJzLmJveC54IC0gc25hcFswXSwgdGhpcy5wYXJhbWV0ZXJzLmJveC55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5hdHRyKFwiZm9udC1zaXplXCIsIHRoaXMucGFyYW1ldGVycy5mb250U2l6ZSArIHNuYXBbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBzbmFwID0gdGhpcy5jaGVja0FzcGVjdFJhdGlvKHNuYXAsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLm1vdmUodGhpcy5wYXJhbWV0ZXJzLmJveC54LCB0aGlzLnBhcmFtZXRlcnMuYm94LnkgKyBzbmFwWzFdKS5zaXplKHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGggKyBzbmFwWzBdLCB0aGlzLnBhcmFtZXRlcnMuYm94LmhlaWdodCAtIHNuYXBbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgLy8gUmlnaHQtQm90dG9tXHJcbiAgICAgICAgICAgICAgY2FzZSAncmInOlxyXG4gICAgICAgICAgICAgICAgICAvLyBzLmEuXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2FsYyA9IGZ1bmN0aW9uIChkaWZmWCwgZGlmZlkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzbmFwID0gdGhpcy5zbmFwVG9HcmlkKGRpZmZYLCBkaWZmWSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmJveC53aWR0aCArIHNuYXBbMF0gPiAwICYmIHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0ICsgc25hcFsxXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnR5cGUgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubW92ZSh0aGlzLnBhcmFtZXRlcnMuYm94LnggLSBzbmFwWzBdLCB0aGlzLnBhcmFtZXRlcnMuYm94LnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLmF0dHIoXCJmb250LXNpemVcIiwgdGhpcy5wYXJhbWV0ZXJzLmZvbnRTaXplICsgc25hcFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNuYXAgPSB0aGlzLmNoZWNrQXNwZWN0UmF0aW8oc25hcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubW92ZSh0aGlzLnBhcmFtZXRlcnMuYm94LngsIHRoaXMucGFyYW1ldGVycy5ib3gueSkuc2l6ZSh0aGlzLnBhcmFtZXRlcnMuYm94LndpZHRoICsgc25hcFswXSwgdGhpcy5wYXJhbWV0ZXJzLmJveC5oZWlnaHQgKyBzbmFwWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgIC8vIExlZnQtQm90dG9tXHJcbiAgICAgICAgICAgICAgY2FzZSAnbGInOlxyXG4gICAgICAgICAgICAgICAgICAvLyBzLmEuXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2FsYyA9IGZ1bmN0aW9uIChkaWZmWCwgZGlmZlkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzbmFwID0gdGhpcy5zbmFwVG9HcmlkKGRpZmZYLCBkaWZmWSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmJveC53aWR0aCAtIHNuYXBbMF0gPiAwICYmIHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0ICsgc25hcFsxXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnR5cGUgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubW92ZSh0aGlzLnBhcmFtZXRlcnMuYm94LnggKyBzbmFwWzBdLCB0aGlzLnBhcmFtZXRlcnMuYm94LnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLmF0dHIoXCJmb250LXNpemVcIiwgdGhpcy5wYXJhbWV0ZXJzLmZvbnRTaXplIC0gc25hcFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNuYXAgPSB0aGlzLmNoZWNrQXNwZWN0UmF0aW8oc25hcCwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubW92ZSh0aGlzLnBhcmFtZXRlcnMuYm94LnggKyBzbmFwWzBdLCB0aGlzLnBhcmFtZXRlcnMuYm94LnkpLnNpemUodGhpcy5wYXJhbWV0ZXJzLmJveC53aWR0aCAtIHNuYXBbMF0sIHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0ICsgc25hcFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAvLyBUb3BcclxuICAgICAgICAgICAgICBjYXNlICd0JzpcclxuICAgICAgICAgICAgICAgICAgLy8gcy5hLlxyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNhbGMgPSBmdW5jdGlvbiAoZGlmZlgsIGRpZmZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc25hcCA9IHRoaXMuc25hcFRvR3JpZChkaWZmWCwgZGlmZlksIDEgPDwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmJveC5oZWlnaHQgLSBzbmFwWzFdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgdGhlIGZvbnQtcmVzaXppbmcgaWYgaXQgaXMgbm90IGZyb20gdGhlIGNvcm5lciBvZiBib3VuZGluZy1ib3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnR5cGUgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubW92ZSh0aGlzLnBhcmFtZXRlcnMuYm94LngsIHRoaXMucGFyYW1ldGVycy5ib3gueSArIHNuYXBbMV0pLmhlaWdodCh0aGlzLnBhcmFtZXRlcnMuYm94LmhlaWdodCAtIHNuYXBbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgLy8gUmlnaHRcclxuICAgICAgICAgICAgICBjYXNlICdyJzpcclxuICAgICAgICAgICAgICAgICAgLy8gcy5hLlxyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNhbGMgPSBmdW5jdGlvbiAoZGlmZlgsIGRpZmZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc25hcCA9IHRoaXMuc25hcFRvR3JpZChkaWZmWCwgZGlmZlksIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGggKyBzbmFwWzBdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMudHlwZSA9PT0gXCJ0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5tb3ZlKHRoaXMucGFyYW1ldGVycy5ib3gueCwgdGhpcy5wYXJhbWV0ZXJzLmJveC55KS53aWR0aCh0aGlzLnBhcmFtZXRlcnMuYm94LndpZHRoICsgc25hcFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAvLyBCb3R0b21cclxuICAgICAgICAgICAgICBjYXNlICdiJzpcclxuICAgICAgICAgICAgICAgICAgLy8gcy5hLlxyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNhbGMgPSBmdW5jdGlvbiAoZGlmZlgsIGRpZmZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc25hcCA9IHRoaXMuc25hcFRvR3JpZChkaWZmWCwgZGlmZlksIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0ICsgc25hcFsxXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnR5cGUgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubW92ZSh0aGlzLnBhcmFtZXRlcnMuYm94LngsIHRoaXMucGFyYW1ldGVycy5ib3gueSkuaGVpZ2h0KHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0ICsgc25hcFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAvLyBMZWZ0XHJcbiAgICAgICAgICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgICAgICAgICAgIC8vIHMuYS5cclxuICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjID0gZnVuY3Rpb24gKGRpZmZYLCBkaWZmWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHNuYXAgPSB0aGlzLnNuYXBUb0dyaWQoZGlmZlgsIGRpZmZZLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMuYm94LndpZHRoIC0gc25hcFswXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnR5cGUgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubW92ZSh0aGlzLnBhcmFtZXRlcnMuYm94LnggKyBzbmFwWzBdLCB0aGlzLnBhcmFtZXRlcnMuYm94LnkpLndpZHRoKHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGggLSBzbmFwWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgIC8vIFJvdGF0aW9uXHJcbiAgICAgICAgICAgICAgY2FzZSAncm90JzpcclxuICAgICAgICAgICAgICAgICAgLy8gcy5hLlxyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNhbGMgPSBmdW5jdGlvbiAoZGlmZlgsIGRpZmZZKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8geWVzIHRoaXMgaXMga2luZGEgc3R1cGlkIGJ1dCB3ZSBuZWVkIHRoZSBtb3VzZSBjb29yZHMgYmFjay4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB7eDogZGlmZlggKyB0aGlzLnBhcmFtZXRlcnMucC54LCB5OiBkaWZmWSArIHRoaXMucGFyYW1ldGVycy5wLnl9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0IG1pbnVzIG1pZGRsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHNBbmdsZSA9IE1hdGguYXRhbjIoKHRoaXMucGFyYW1ldGVycy5wLnkgLSB0aGlzLnBhcmFtZXRlcnMuYm94LnkgLSB0aGlzLnBhcmFtZXRlcnMuYm94LmhlaWdodCAvIDIpLCAodGhpcy5wYXJhbWV0ZXJzLnAueCAtIHRoaXMucGFyYW1ldGVycy5ib3gueCAtIHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGggLyAyKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZW5kIG1pbnVzIG1pZGRsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHBBbmdsZSA9IE1hdGguYXRhbjIoKGN1cnJlbnQueSAtIHRoaXMucGFyYW1ldGVycy5ib3gueSAtIHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0IC8gMiksIChjdXJyZW50LnggLSB0aGlzLnBhcmFtZXRlcnMuYm94LnggLSB0aGlzLnBhcmFtZXRlcnMuYm94LndpZHRoIC8gMikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmdsZSA9IHRoaXMucGFyYW1ldGVycy5yb3RhdGlvbiArIChwQW5nbGUgLSBzQW5nbGUpICogMTgwIC8gTWF0aC5QSSArIHRoaXMub3B0aW9ucy5zbmFwVG9BbmdsZSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtb3ZlIHRoZSBlbGVtZW50IHRvIHRoZSBjZW50ZXIgb2YgdGhlIGJveCBmaXJzdCBhbmQgY2hhbmdlIHRoZSByb3RhdGlvbiBhZnRlcndhcmRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHJvdGF0aW9uIGFsd2F5cyB3b3JrcyBhcm91bmQgYSByb3RhdGlvbi1jZW50ZXIsIHdoaWNoIGlzIGNoYW5nZWQgd2hlbiBtb3ZpbmcgdGhlIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGFsc28gc2V0IHRoZSBuZXcgcm90YXRpb24gY2VudGVyIHRvIHRoZSBjZW50ZXIgb2YgdGhlIGJveC5cclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuY2VudGVyKHRoaXMucGFyYW1ldGVycy5ib3guY3gsIHRoaXMucGFyYW1ldGVycy5ib3guY3kpLnJvdGF0ZShhbmdsZSAtIChhbmdsZSAlIHRoaXMub3B0aW9ucy5zbmFwVG9BbmdsZSksIHRoaXMucGFyYW1ldGVycy5ib3guY3gsIHRoaXMucGFyYW1ldGVycy5ib3guY3kpO1xyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgLy8gTW92aW5nIG9uZSBzaW5nbGUgUG9pbnQgKG5lZWRlZCB3aGVuIGFuIGVsZW1lbnQgaXMgZGVlcFNlbGVjdGVkIHdoaWNoIG1lYW5zIHlvdSBjYW4gbW92ZSBldmVyeSBzaW5nbGUgcG9pbnQgb2YgdGhlIG9iamVjdClcclxuICAgICAgICAgICAgICBjYXNlICdwb2ludCc6XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2FsYyA9IGZ1bmN0aW9uIChkaWZmWCwgZGlmZlkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBTbmFwcGluZyB0aGUgcG9pbnQgdG8gdGhlIGdyaWRcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzbmFwID0gdGhpcy5zbmFwVG9HcmlkKGRpZmZYLCBkaWZmWSwgdGhpcy5wYXJhbWV0ZXJzLnBvaW50Q29vcmRzWzBdLCB0aGlzLnBhcmFtZXRlcnMucG9pbnRDb29yZHNbMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcG9pbnQgYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHRoaXMuZWwuYXJyYXkoKS52YWx1ZU9mKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gQ2hhbmdpbmcgdGhlIG1vdmVkIHBvaW50IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgICAgICAgICAgICAgYXJyYXlbdGhpcy5wYXJhbWV0ZXJzLmldWzBdID0gdGhpcy5wYXJhbWV0ZXJzLnBvaW50Q29vcmRzWzBdICsgc25hcFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFycmF5W3RoaXMucGFyYW1ldGVycy5pXVsxXSA9IHRoaXMucGFyYW1ldGVycy5wb2ludENvb3Jkc1sxXSArIHNuYXBbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gQW5kIHBsb3QgdGhlIG5ldyB0aGlzLmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLnBsb3QoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuZWwuZmlyZSgncmVzaXplc3RhcnQnLCB7ZHg6IHRoaXMucGFyYW1ldGVycy54LCBkeTogdGhpcy5wYXJhbWV0ZXJzLnksIGV2ZW50OiBldmVudH0pO1xyXG4gICAgICAgICAgLy8gV2hlbiByZXNpemluZyBzdGFydGVkLCB3ZSBoYXZlIHRvIHJlZ2lzdGVyIGV2ZW50cyBmb3IuLi5cclxuICAgICAgICAgIC8vIFRvdWNoZXMuXHJcbiAgICAgICAgICBTVkcub24od2luZG93LCAndG91Y2htb3ZlLnJlc2l6ZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICBfdGhpcy51cGRhdGUoZSB8fCB3aW5kb3cuZXZlbnQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBTVkcub24od2luZG93LCAndG91Y2hlbmQucmVzaXplJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuZG9uZSgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICAvLyBNb3VzZS5cclxuICAgICAgICAgIFNWRy5vbih3aW5kb3csICdtb3VzZW1vdmUucmVzaXplJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICBfdGhpcy51cGRhdGUoZSB8fCB3aW5kb3cuZXZlbnQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBTVkcub24od2luZG93LCAnbW91c2V1cC5yZXNpemUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuZG9uZSgpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gVGhlIHVwZGF0ZS1mdW5jdGlvbiByZWRyYXdzIHRoZSBlbGVtZW50IGV2ZXJ5IHRpbWUgdGhlIG1vdXNlIGlzIG1vdmluZ1xyXG4gICAgICBSZXNpemVIYW5kbGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcbiAgICAgICAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMubGFzdFVwZGF0ZUNhbGwpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjKHRoaXMubGFzdFVwZGF0ZUNhbGxbMF0sIHRoaXMubGFzdFVwZGF0ZUNhbGxbMV0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIG1vdXNlcG9zaXRpb24gYXQgc3RhcnQgYW5kIG5vd1xyXG4gICAgICAgICAgdmFyIHR4UHQgPSB0aGlzLl9leHRyYWN0UG9zaXRpb24oZXZlbnQpO1xyXG4gICAgICAgICAgdmFyIHAgPSB0aGlzLnRyYW5zZm9ybVBvaW50KHR4UHQueCwgdHhQdC55KTtcclxuXHJcbiAgICAgICAgICB2YXIgZGlmZlggPSBwLnggLSB0aGlzLnBhcmFtZXRlcnMucC54LFxyXG4gICAgICAgICAgICAgIGRpZmZZID0gcC55IC0gdGhpcy5wYXJhbWV0ZXJzLnAueTtcclxuXHJcbiAgICAgICAgICB0aGlzLmxhc3RVcGRhdGVDYWxsID0gW2RpZmZYLCBkaWZmWV07XHJcblxyXG4gICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBuZXcgcG9zaXRpb24gYW5kIGhlaWdodCAvIHdpZHRoIG9mIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICB0aGlzLmNhbGMoZGlmZlgsIGRpZmZZKTtcclxuXHJcbiAgICAgICAgIC8vIEVtaXQgYW4gZXZlbnQgdG8gc2F5IHdlIGhhdmUgY2hhbmdlZC5cclxuICAgICAgICAgIHRoaXMuZWwuZmlyZSgncmVzaXppbmcnLCB7ZHg6IGRpZmZYLCBkeTogZGlmZlksIGV2ZW50OiBldmVudH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gSXMgY2FsbGVkIG9uIG1vdXNldXAuXHJcbiAgICAgIC8vIFJlbW92ZXMgdGhlIHVwZGF0ZS1mdW5jdGlvbiBmcm9tIHRoZSBtb3VzZW1vdmUgZXZlbnRcclxuICAgICAgUmVzaXplSGFuZGxlci5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHRoaXMubGFzdFVwZGF0ZUNhbGwgPSBudWxsO1xyXG4gICAgICAgICAgU1ZHLm9mZih3aW5kb3csICdtb3VzZW1vdmUucmVzaXplJyk7XHJcbiAgICAgICAgICBTVkcub2ZmKHdpbmRvdywgJ21vdXNldXAucmVzaXplJyk7XHJcbiAgICAgICAgICBTVkcub2ZmKHdpbmRvdywgJ3RvdWNobW92ZS5yZXNpemUnKTtcclxuICAgICAgICAgIFNWRy5vZmYod2luZG93LCAndG91Y2hlbmQucmVzaXplJyk7XHJcbiAgICAgICAgICB0aGlzLmVsLmZpcmUoJ3Jlc2l6ZWRvbmUnKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIFRoZSBmbGFnIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHJlc2l6aW5nIGlzIHVzZWQgd2l0aCBhIGxlZnQtUG9pbnQgKGZpcnN0IGJpdCkgYW5kIHRvcC1wb2ludCAoc2Vjb25kIGJpdClcclxuICAgICAgLy8gSW4gdGhpcyBjYXNlcyB0aGUgdGVtcC12YWx1ZXMgYXJlIGNhbGN1bGF0ZWQgZGlmZmVyZW50bHlcclxuICAgICAgUmVzaXplSGFuZGxlci5wcm90b3R5cGUuc25hcFRvR3JpZCA9IGZ1bmN0aW9uIChkaWZmWCwgZGlmZlksIGZsYWcsIHBvaW50Q29vcmRzWSkge1xyXG5cclxuICAgICAgICAgIHZhciB0ZW1wO1xyXG5cclxuICAgICAgICAgIC8vIElmIGBwb2ludENvb3Jkc1lgIGlzIGdpdmVuLCBhIHNpbmdsZSBQb2ludCBoYXMgdG8gYmUgc25hcHBlZCAoZGVlcFNlbGVjdCkuIFRoYXQncyB3aHkgd2UgbmVlZCBhIGRpZmZlcmVudCB0ZW1wLXZhbHVlXHJcbiAgICAgICAgICBpZiAodHlwZW9mIHBvaW50Q29vcmRzWSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgZmxhZyA9IHBvaW50Q29vcmRzWCBpbiB0aGlzIGNhc2VcclxuICAgICAgICAgICAgICB0ZW1wID0gWyhmbGFnICsgZGlmZlgpICUgdGhpcy5vcHRpb25zLnNuYXBUb0dyaWQsIChwb2ludENvb3Jkc1kgKyBkaWZmWSkgJSB0aGlzLm9wdGlvbnMuc25hcFRvR3JpZF07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8vIFdlIGNoZWNrIGlmIHRoZSBmbGFnIGlzIHNldCBhbmQgaWYgbm90IHdlIHNldCBhIGRlZmF1bHQtdmFsdWUgKGJvdGggYml0cyBzZXQgLSB3aGljaCBtZWFucyB1cHBlci1sZWZ0LWVkZ2UpXHJcbiAgICAgICAgICAgICAgZmxhZyA9IGZsYWcgPT0gbnVsbCA/IDEgfCAxIDw8IDEgOiBmbGFnO1xyXG4gICAgICAgICAgICAgIHRlbXAgPSBbKHRoaXMucGFyYW1ldGVycy5ib3gueCArIGRpZmZYICsgKGZsYWcgJiAxID8gMCA6IHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGgpKSAlIHRoaXMub3B0aW9ucy5zbmFwVG9HcmlkLCAodGhpcy5wYXJhbWV0ZXJzLmJveC55ICsgZGlmZlkgKyAoZmxhZyAmICgxIDw8IDEpID8gMCA6IHRoaXMucGFyYW1ldGVycy5ib3guaGVpZ2h0KSkgJSB0aGlzLm9wdGlvbnMuc25hcFRvR3JpZF07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYoZGlmZlggPCAwKSB7XHJcbiAgICAgICAgICAgICAgdGVtcFswXSAtPSB0aGlzLm9wdGlvbnMuc25hcFRvR3JpZDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKGRpZmZZIDwgMCkge1xyXG4gICAgICAgICAgICAgIHRlbXBbMV0gLT0gdGhpcy5vcHRpb25zLnNuYXBUb0dyaWQ7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZGlmZlggLT0gKE1hdGguYWJzKHRlbXBbMF0pIDwgdGhpcy5vcHRpb25zLnNuYXBUb0dyaWQgLyAyID9cclxuICAgICAgICAgICAgICAgICAgICB0ZW1wWzBdIDpcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wWzBdIC0gKGRpZmZYIDwgMCA/IC10aGlzLm9wdGlvbnMuc25hcFRvR3JpZCA6IHRoaXMub3B0aW9ucy5zbmFwVG9HcmlkKSk7XHJcbiAgICAgICAgICBkaWZmWSAtPSAoTWF0aC5hYnModGVtcFsxXSkgPCB0aGlzLm9wdGlvbnMuc25hcFRvR3JpZCAvIDIgP1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBbMV0gOlxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBbMV0gLSAoZGlmZlkgPCAwID8gLXRoaXMub3B0aW9ucy5zbmFwVG9HcmlkIDogdGhpcy5vcHRpb25zLnNuYXBUb0dyaWQpKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJhaW50VG9Cb3goZGlmZlgsIGRpZmZZLCBmbGFnLCBwb2ludENvb3Jkc1kpO1xyXG5cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIGtlZXAgZWxlbWVudCB3aXRoaW4gY29uc3RyYWluZWQgYm94XHJcbiAgICAgIFJlc2l6ZUhhbmRsZXIucHJvdG90eXBlLmNvbnN0cmFpbnRUb0JveCA9IGZ1bmN0aW9uIChkaWZmWCwgZGlmZlksIGZsYWcsIHBvaW50Q29vcmRzWSkge1xyXG4gICAgICAgICAgLy9yZXR1cm4gW2RpZmZYLCBkaWZmWV1cclxuICAgICAgICAgIHZhciBjID0gdGhpcy5vcHRpb25zLmNvbnN0cmFpbnQgfHwge307XHJcbiAgICAgICAgICB2YXIgb3JnWCwgb3JnWTtcclxuXHJcbiAgICAgICAgICBpZiAodHlwZW9mIHBvaW50Q29vcmRzWSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgb3JnWCA9IGZsYWc7XHJcbiAgICAgICAgICAgIG9yZ1kgPSBwb2ludENvb3Jkc1k7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvcmdYID0gdGhpcy5wYXJhbWV0ZXJzLmJveC54ICsgKGZsYWcgJiAxID8gMCA6IHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGgpO1xyXG4gICAgICAgICAgICBvcmdZID0gdGhpcy5wYXJhbWV0ZXJzLmJveC55ICsgKGZsYWcgJiAoMTw8MSkgPyAwIDogdGhpcy5wYXJhbWV0ZXJzLmJveC5oZWlnaHQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgYy5taW5YICE9PSAndW5kZWZpbmVkJyAmJiBvcmdYICsgZGlmZlggPCBjLm1pblgpIHtcclxuICAgICAgICAgICAgZGlmZlggPSBjLm1pblggLSBvcmdYO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgYy5tYXhYICE9PSAndW5kZWZpbmVkJyAmJiBvcmdYICsgZGlmZlggPiBjLm1heFgpIHtcclxuICAgICAgICAgICAgZGlmZlggPSBjLm1heFggLSBvcmdYO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgYy5taW5ZICE9PSAndW5kZWZpbmVkJyAmJiBvcmdZICsgZGlmZlkgPCBjLm1pblkpIHtcclxuICAgICAgICAgICAgZGlmZlkgPSBjLm1pblkgLSBvcmdZO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgYy5tYXhZICE9PSAndW5kZWZpbmVkJyAmJiBvcmdZICsgZGlmZlkgPiBjLm1heFkpIHtcclxuICAgICAgICAgICAgZGlmZlkgPSBjLm1heFkgLSBvcmdZO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBbZGlmZlgsIGRpZmZZXTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIFJlc2l6ZUhhbmRsZXIucHJvdG90eXBlLmNoZWNrQXNwZWN0UmF0aW8gPSBmdW5jdGlvbiAoc25hcCwgaXNSZXZlcnNlKSB7XHJcbiAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zYXZlQXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgICAgICByZXR1cm4gc25hcDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgdXBkYXRlZFNuYXAgPSBzbmFwLnNsaWNlKCk7XHJcbiAgICAgICAgICB2YXIgYXNwZWN0UmF0aW8gPSB0aGlzLnBhcmFtZXRlcnMuYm94LndpZHRoIC8gdGhpcy5wYXJhbWV0ZXJzLmJveC5oZWlnaHQ7XHJcbiAgICAgICAgICB2YXIgbmV3VyA9IHRoaXMucGFyYW1ldGVycy5ib3gud2lkdGggKyBzbmFwWzBdO1xyXG4gICAgICAgICAgdmFyIG5ld0ggPSB0aGlzLnBhcmFtZXRlcnMuYm94LmhlaWdodCAtIHNuYXBbMV07XHJcbiAgICAgICAgICB2YXIgbmV3QXNwZWN0UmF0aW8gPSBuZXdXIC8gbmV3SDtcclxuXHJcbiAgICAgICAgICBpZiAobmV3QXNwZWN0UmF0aW8gPCBhc3BlY3RSYXRpbykge1xyXG4gICAgICAgICAgICAgIC8vIEhlaWdodCBpcyB0b28gYmlnLiBBZGFwdCBpdFxyXG4gICAgICAgICAgICAgIHVwZGF0ZWRTbmFwWzFdID0gbmV3VyAvIGFzcGVjdFJhdGlvIC0gdGhpcy5wYXJhbWV0ZXJzLmJveC5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgaXNSZXZlcnNlICYmICh1cGRhdGVkU25hcFsxXSA9IC11cGRhdGVkU25hcFsxXSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKG5ld0FzcGVjdFJhdGlvID4gYXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgICAgICAvLyBXaWR0aCBpcyB0b28gYmlnLiBBZGFwdCBpdFxyXG4gICAgICAgICAgICAgIHVwZGF0ZWRTbmFwWzBdID0gdGhpcy5wYXJhbWV0ZXJzLmJveC53aWR0aCAtIG5ld0ggKiBhc3BlY3RSYXRpbztcclxuICAgICAgICAgICAgICBpc1JldmVyc2UgJiYgKHVwZGF0ZWRTbmFwWzBdID0gLXVwZGF0ZWRTbmFwWzBdKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gdXBkYXRlZFNuYXA7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBTVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XHJcbiAgICAgICAgICAvLyBSZXNpemUgZWxlbWVudCB3aXRoIG1vdXNlXHJcbiAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblxyXG4gICAgICAgICAgICAgICh0aGlzLnJlbWVtYmVyKCdfcmVzaXplSGFuZGxlcicpIHx8IG5ldyBSZXNpemVIYW5kbGVyKHRoaXMpKS5pbml0KG9wdGlvbnMgfHwge30pO1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIFNWRy5FbGVtZW50LnByb3RvdHlwZS5yZXNpemUuZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICBzbmFwVG9BbmdsZTogMC4xLCAgICAgICAvLyBTcGVjaWZpZXMgdGhlIHNwZWVkIHRoZSByb3RhdGlvbiBpcyBoYXBwZW5pbmcgd2hlbiBtb3ZpbmcgdGhlIG1vdXNlXHJcbiAgICAgICAgICBzbmFwVG9HcmlkOiAxLCAgICAgICAgICAvLyBTbmFwcyB0byBhIGdyaWQgb2YgYHNuYXBUb0dyaWRgIFBpeGVsc1xyXG4gICAgICAgICAgY29uc3RyYWludDoge30sICAgICAgICAgLy8ga2VlcCBlbGVtZW50IHdpdGhpbiBjb25zdHJhaW5lZCBib3hcclxuICAgICAgICAgIHNhdmVBc3BlY3RSYXRpbzogZmFsc2UgIC8vIFNhdmUgYXNwZWN0IHJhdGlvIHdoZW4gcmVzaXppbmcgdXNpbmcgbHQsIHJ0LCByYiBvciBsYiBwb2ludHNcclxuICAgICAgfTtcclxuXHJcbiAgfSkuY2FsbCh0aGlzKTtcbiAgfSgpKTtcblxuICBmdW5jdGlvbiBzdHlsZUluamVjdChjc3MsIHJlZikge1xuICAgIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgICB2YXIgaW5zZXJ0QXQgPSByZWYuaW5zZXJ0QXQ7XG5cbiAgICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICAgIGlmIChpbnNlcnRBdCA9PT0gJ3RvcCcpIHtcbiAgICAgIGlmIChoZWFkLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNzcyA9IFwiXCI7XG4gIHN0eWxlSW5qZWN0KGNzcyk7XG5cbiAgLyoqXG4gICAqIERldGVjdCBFbGVtZW50IFJlc2l6ZVxuICAgKlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vc2RlY2ltYS9qYXZhc2NyaXB0LWRldGVjdC1lbGVtZW50LXJlc2l6ZVxuICAgKiBTZWJhc3RpYW4gRGVjaW1hXG4gICAqXG4gICAqIHZlcnNpb246IDAuNS4zXG4gICAqKi9cblxuICAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHJlc2V0VHJpZ2dlcnMoZWxlbWVudCkge1xuICAgICAgdmFyIHRyaWdnZXJzID0gZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18sXG4gICAgICAgICAgZXhwYW5kID0gdHJpZ2dlcnMuZmlyc3RFbGVtZW50Q2hpbGQsXG4gICAgICAgICAgY29udHJhY3QgPSB0cmlnZ2Vycy5sYXN0RWxlbWVudENoaWxkLFxuICAgICAgICAgIGV4cGFuZENoaWxkID0gZXhwYW5kID8gZXhwYW5kLmZpcnN0RWxlbWVudENoaWxkIDogbnVsbDtcblxuICAgICAgaWYgKGNvbnRyYWN0KSB7XG4gICAgICAgIGNvbnRyYWN0LnNjcm9sbExlZnQgPSBjb250cmFjdC5zY3JvbGxXaWR0aDtcbiAgICAgICAgY29udHJhY3Quc2Nyb2xsVG9wID0gY29udHJhY3Quc2Nyb2xsSGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhwYW5kQ2hpbGQpIHtcbiAgICAgICAgZXhwYW5kQ2hpbGQuc3R5bGUud2lkdGggPSBleHBhbmQub2Zmc2V0V2lkdGggKyAxICsgJ3B4JztcbiAgICAgICAgZXhwYW5kQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gZXhwYW5kLm9mZnNldEhlaWdodCArIDEgKyAncHgnO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgIGV4cGFuZC5zY3JvbGxMZWZ0ID0gZXhwYW5kLnNjcm9sbFdpZHRoO1xuICAgICAgICBleHBhbmQuc2Nyb2xsVG9wID0gZXhwYW5kLnNjcm9sbEhlaWdodDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1RyaWdnZXJzKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFdpZHRoICE9IGVsZW1lbnQuX19yZXNpemVMYXN0X18ud2lkdGggfHwgZWxlbWVudC5vZmZzZXRIZWlnaHQgIT0gZWxlbWVudC5fX3Jlc2l6ZUxhc3RfXy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsTGlzdGVuZXIoZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzO1xuICAgICAgcmVzZXRUcmlnZ2Vycyh0aGlzKTtcbiAgICAgIGlmICh0aGlzLl9fcmVzaXplUkFGX18pIGNhbmNlbEZyYW1lKHRoaXMuX19yZXNpemVSQUZfXyk7XG4gICAgICB0aGlzLl9fcmVzaXplUkFGX18gPSByZXF1ZXN0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2hlY2tUcmlnZ2VycyhlbGVtZW50KSkge1xuICAgICAgICAgIGVsZW1lbnQuX19yZXNpemVMYXN0X18ud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICAgIGVsZW1lbnQuX19yZXNpemVMYXN0X18uaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18uZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIGZuLmNhbGwoZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciByZXF1ZXN0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChmbiwgMjApO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gcmFmKGZuKTtcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgdmFyIGNhbmNlbEZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhbmNlbCA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5jbGVhclRpbWVvdXQ7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBjYW5jZWwoaWQpO1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgLyogRGV0ZWN0IENTUyBBbmltYXRpb25zIHN1cHBvcnQgdG8gZGV0ZWN0IGVsZW1lbnQgZGlzcGxheS9yZS1hdHRhY2ggKi9cblxuXG4gICAgdmFyIGFuaW1hdGlvbiA9IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25zdGFydGV2ZW50ID0gJ2FuaW1hdGlvbnN0YXJ0JyxcbiAgICAgICAgZG9tUHJlZml4ZXMgPSAnV2Via2l0IE1veiBPIG1zJy5zcGxpdCgnICcpLFxuICAgICAgICBzdGFydEV2ZW50cyA9ICd3ZWJraXRBbmltYXRpb25TdGFydCBhbmltYXRpb25zdGFydCBvQW5pbWF0aW9uU3RhcnQgTVNBbmltYXRpb25TdGFydCcuc3BsaXQoJyAnKTtcbiAgICB7XG4gICAgICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZmFrZWVsZW1lbnQnKTtcblxuICAgICAgaWYgKGVsbS5zdHlsZS5hbmltYXRpb25OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYW5pbWF0aW9uID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb21QcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlbG0uc3R5bGVbZG9tUHJlZml4ZXNbaV0gKyAnQW5pbWF0aW9uTmFtZSddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnN0YXJ0ZXZlbnQgPSBzdGFydEV2ZW50c1tpXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYW5pbWF0aW9uTmFtZSA9ICdyZXNpemVhbmltJztcblxuICAgIHdpbmRvdy5hZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBmbikge1xuICAgICAgaWYgKCFlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXykge1xuICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PSAnc3RhdGljJykgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIGVsZW1lbnQuX19yZXNpemVMYXN0X18gPSB7fTtcbiAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fID0gW107XG4gICAgICAgIChlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5jbGFzc05hbWUgPSAncmVzaXplLXRyaWdnZXJzJztcbiAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18uaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJleHBhbmQtdHJpZ2dlclwiPjxkaXY+PC9kaXY+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwiY29udHJhY3QtdHJpZ2dlclwiPjwvZGl2Pic7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18pO1xuICAgICAgICByZXNldFRyaWdnZXJzKGVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbExpc3RlbmVyLCB0cnVlKTtcbiAgICAgICAgLyogTGlzdGVuIGZvciBhIGNzcyBhbmltYXRpb24gdG8gZGV0ZWN0IGVsZW1lbnQgZGlzcGxheS9yZS1hdHRhY2ggKi9cblxuICAgICAgICBhbmltYXRpb25zdGFydGV2ZW50ICYmIGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fLmFkZEV2ZW50TGlzdGVuZXIoYW5pbWF0aW9uc3RhcnRldmVudCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoZS5hbmltYXRpb25OYW1lID09IGFuaW1hdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIHJlc2V0VHJpZ2dlcnMoZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLnB1c2goZm4pO1xuICAgIH07XG5cbiAgICB3aW5kb3cucmVtb3ZlUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZm4pIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5zcGxpY2UoZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLmluZGV4T2YoZm4pLCAxKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbExpc3RlbmVyKTtcblxuICAgICAgICAgIGlmIChlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXyA9ICFlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KSgpO1xuXG4gIHdpbmRvdy5BcGV4ID0ge307XG5cbiAgdmFyIEluaXRDdHhWYXJpYWJsZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEluaXRDdHhWYXJpYWJsZXMoY3R4KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5pdEN0eFZhcmlhYmxlcyk7XG5cbiAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgdGhpcy53ID0gY3R4Lnc7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEluaXRDdHhWYXJpYWJsZXMsIFt7XG4gICAgICBrZXk6IFwiaW5pdE1vZHVsZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0TW9kdWxlcygpIHtcbiAgICAgICAgdGhpcy5jdHgucHVibGljTWV0aG9kcyA9IFsndXBkYXRlT3B0aW9ucycsICd1cGRhdGVTZXJpZXMnLCAnYXBwZW5kRGF0YScsICdhcHBlbmRTZXJpZXMnLCAndG9nZ2xlU2VyaWVzJywgJ3Nob3dTZXJpZXMnLCAnaGlkZVNlcmllcycsICdzZXRMb2NhbGUnLCAncmVzZXRTZXJpZXMnLCAndG9nZ2xlRGF0YVBvaW50U2VsZWN0aW9uJywgJ2RhdGFVUkknLCAnYWRkWGF4aXNBbm5vdGF0aW9uJywgJ2FkZFlheGlzQW5ub3RhdGlvbicsICdhZGRQb2ludEFubm90YXRpb24nLCAnY2xlYXJBbm5vdGF0aW9ucycsICdyZW1vdmVBbm5vdGF0aW9uJywgJ3BhcGVyJywgJ2Rlc3Ryb3knXTtcbiAgICAgICAgdGhpcy5jdHguZXZlbnRMaXN0ID0gWydjbGljaycsICdtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ21vdXNldXAnLCAndG91Y2hlbmQnXTtcbiAgICAgICAgdGhpcy5jdHguYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHguYXhlcyA9IG5ldyBBeGVzKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHguY29yZSA9IG5ldyBDb3JlKHRoaXMuY3R4LmVsLCB0aGlzLmN0eCk7XG4gICAgICAgIHRoaXMuY3R4LmNvbmZpZyA9IG5ldyBDb25maWcoe30pO1xuICAgICAgICB0aGlzLmN0eC5kYXRhID0gbmV3IERhdGEodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5ncmlkID0gbmV3IEdyaWQodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5ncmFwaGljcyA9IG5ldyBHcmFwaGljcyh0aGlzLmN0eCk7XG4gICAgICAgIHRoaXMuY3R4LmNvcmVVdGlscyA9IG5ldyBDb3JlVXRpbHModGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5jcm9zc2hhaXJzID0gbmV3IENyb3NzaGFpcnModGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5ldmVudHMgPSBuZXcgRXZlbnRzKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHguZXhwb3J0cyA9IG5ldyBFeHBvcnRzKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHgubG9jYWxpemF0aW9uID0gbmV3IExvY2FsaXphdGlvbih0aGlzLmN0eCk7XG4gICAgICAgIHRoaXMuY3R4Lm9wdGlvbnMgPSBuZXcgT3B0aW9ucygpO1xuICAgICAgICB0aGlzLmN0eC5yZXNwb25zaXZlID0gbmV3IFJlc3BvbnNpdmUodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5zZXJpZXMgPSBuZXcgU2VyaWVzKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHgudGhlbWUgPSBuZXcgVGhlbWUodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5mb3JtYXR0ZXJzID0gbmV3IEZvcm1hdHRlcnModGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC50aXRsZVN1YnRpdGxlID0gbmV3IFRpdGxlU3VidGl0bGUodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5sZWdlbmQgPSBuZXcgTGVnZW5kKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHgudG9vbGJhciA9IG5ldyBUb29sYmFyKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHguZGltZW5zaW9ucyA9IG5ldyBEaW1lbnNpb25zKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHgudXBkYXRlSGVscGVycyA9IG5ldyBVcGRhdGVIZWxwZXJzKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHguem9vbVBhblNlbGVjdGlvbiA9IG5ldyBab29tUGFuU2VsZWN0aW9uKHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdHgudy5nbG9iYWxzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh0aGlzLmN0eCk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEluaXRDdHhWYXJpYWJsZXM7XG4gIH0oKTtcblxuICB2YXIgRGVzdHJveSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVzdHJveShjdHgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXN0cm95KTtcblxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLncgPSBjdHgudztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRGVzdHJveSwgW3tcbiAgICAgIGtleTogXCJjbGVhclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBpZiAodGhpcy5jdHguem9vbVBhblNlbGVjdGlvbikge1xuICAgICAgICAgIHRoaXMuY3R4Lnpvb21QYW5TZWxlY3Rpb24uZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY3R4LnRvb2xiYXIpIHtcbiAgICAgICAgICB0aGlzLmN0eC50b29sYmFyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3R4LmFuaW1hdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLmN0eC5heGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHguYW5ub3RhdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLmN0eC5jb3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHguZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4LmdyaWQgPSBudWxsO1xuICAgICAgICB0aGlzLmN0eC5zZXJpZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmN0eC5yZXNwb25zaXZlID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHgudGhlbWUgPSBudWxsO1xuICAgICAgICB0aGlzLmN0eC5mb3JtYXR0ZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHgudGl0bGVTdWJ0aXRsZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4LmxlZ2VuZCA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4LmRpbWVuc2lvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLmN0eC5vcHRpb25zID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHguY3Jvc3NoYWlycyA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4Lnpvb21QYW5TZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmN0eC51cGRhdGVIZWxwZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHgudG9vbGJhciA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4LmxvY2FsaXphdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4LncuZ2xvYmFscy50b29sdGlwID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbGVhckRvbUVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImtpbGxTVkdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBraWxsU1ZHKGRyYXcpIHtcbiAgICAgICAgZHJhdy5lYWNoKGZ1bmN0aW9uIChpLCBjaGlsZHJlbikge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJyonKTtcbiAgICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgZHJhdy51bmdyb3VwKCk7XG4gICAgICAgIGRyYXcuY2xlYXIoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xlYXJEb21FbGVtZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyRG9tRWxlbWVudHMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgLy8gZGV0YWNoIGRvY3VtZW50IGV2ZW50XG4gICAgICAgIHRoaXMuY3R4LmV2ZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIF90aGlzLmN0eC5ldmVudHMuZG9jdW1lbnRFdmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZG9tRWxzID0gdGhpcy53Lmdsb2JhbHMuZG9tO1xuXG4gICAgICAgIGlmICh0aGlzLmN0eC5lbCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIHJlbW92ZSBhbGwgY2hpbGQgZWxlbWVudHMgLSByZXNldHRpbmcgdGhlIHdob2xlIGNoYXJ0XG4gICAgICAgICAgd2hpbGUgKHRoaXMuY3R4LmVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmVsLnJlbW92ZUNoaWxkKHRoaXMuY3R4LmVsLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMua2lsbFNWRyhkb21FbHMuUGFwZXIpO1xuICAgICAgICBkb21FbHMuUGFwZXIucmVtb3ZlKCk7XG4gICAgICAgIGRvbUVscy5lbFdyYXAgPSBudWxsO1xuICAgICAgICBkb21FbHMuZWxHcmFwaGljYWwgPSBudWxsO1xuICAgICAgICBkb21FbHMuZWxBbm5vdGF0aW9ucyA9IG51bGw7XG4gICAgICAgIGRvbUVscy5lbExlZ2VuZFdyYXAgPSBudWxsO1xuICAgICAgICBkb21FbHMuYmFzZUVsID0gbnVsbDtcbiAgICAgICAgZG9tRWxzLmVsR3JpZFJlY3QgPSBudWxsO1xuICAgICAgICBkb21FbHMuZWxHcmlkUmVjdE1hc2sgPSBudWxsO1xuICAgICAgICBkb21FbHMuZWxHcmlkUmVjdE1hcmtlck1hc2sgPSBudWxsO1xuICAgICAgICBkb21FbHMuZWxEZWZzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGVzdHJveTtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAbW9kdWxlIEFwZXhDaGFydHNcbiAgICoqL1xuXG4gIHZhciBBcGV4Q2hhcnRzJDEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwZXhDaGFydHMoZWwsIG9wdHMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBcGV4Q2hhcnRzKTtcblxuICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgIHRoaXMuY3R4ID0gdGhpczsgLy8gUGFzcyB0aGUgdXNlciBzdXBwbGllZCBvcHRpb25zIHRvIHRoZSBCYXNlIENsYXNzIHdoZXJlIHRoZXNlIG9wdGlvbnMgd2lsbCBiZSBleHRlbmRlZCB3aXRoIGRlZmF1bHRzLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGZyb20gQmFzZSBDbGFzcyB3aWxsIGJlY29tZSB0aGUgY29uZmlnIG9iamVjdCBpbiB0aGUgZW50aXJlIGNvZGViYXNlLlxuXG4gICAgICB0aGlzLncgPSBuZXcgQmFzZShvcHRzKS5pbml0KCk7XG4gICAgICB0aGlzLmVsID0gZWw7XG4gICAgICB0aGlzLncuZ2xvYmFscy5jdWlkID0gVXRpbHMucmFuZG9tSWQoKTtcbiAgICAgIHRoaXMudy5nbG9iYWxzLmNoYXJ0SUQgPSB0aGlzLncuY29uZmlnLmNoYXJ0LmlkID8gdGhpcy53LmNvbmZpZy5jaGFydC5pZCA6IHRoaXMudy5nbG9iYWxzLmN1aWQ7XG4gICAgICB2YXIgaW5pdEN0eCA9IG5ldyBJbml0Q3R4VmFyaWFibGVzKHRoaXMpO1xuICAgICAgaW5pdEN0eC5pbml0TW9kdWxlcygpO1xuICAgICAgdGhpcy5jcmVhdGUgPSBVdGlscy5iaW5kKHRoaXMuY3JlYXRlLCB0aGlzKTtcbiAgICAgIHRoaXMud2luZG93UmVzaXplSGFuZGxlciA9IHRoaXMuX3dpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcHJpbWFyeSBtZXRob2QgdXNlciB3aWxsIGNhbGwgdG8gcmVuZGVyIHRoZSBjaGFydC5cbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKEFwZXhDaGFydHMsIFt7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIC8vIG1haW4gbWV0aG9kXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgLy8gb25seSBkcmF3IGNoYXJ0LCBpZiBlbGVtZW50IGZvdW5kXG4gICAgICAgICAgaWYgKF90aGlzLmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIEFwZXguX2NoYXJ0SW5zdGFuY2VzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBBcGV4Ll9jaGFydEluc3RhbmNlcyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX3RoaXMudy5jb25maWcuY2hhcnQuaWQpIHtcbiAgICAgICAgICAgICAgQXBleC5fY2hhcnRJbnN0YW5jZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IF90aGlzLncuZ2xvYmFscy5jaGFydElELFxuICAgICAgICAgICAgICAgIGdyb3VwOiBfdGhpcy53LmNvbmZpZy5jaGFydC5ncm91cCxcbiAgICAgICAgICAgICAgICBjaGFydDogX3RoaXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IC8vIHNldCB0aGUgbG9jYWxlIGhlcmVcblxuXG4gICAgICAgICAgICBfdGhpcy5zZXRMb2NhbGUoX3RoaXMudy5jb25maWcuY2hhcnQuZGVmYXVsdExvY2FsZSk7XG5cbiAgICAgICAgICAgIHZhciBiZWZvcmVNb3VudCA9IF90aGlzLncuY29uZmlnLmNoYXJ0LmV2ZW50cy5iZWZvcmVNb3VudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWZvcmVNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBiZWZvcmVNb3VudChfdGhpcywgX3RoaXMudyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzLmV2ZW50cy5maXJlRXZlbnQoJ2JlZm9yZU1vdW50JywgW190aGlzLCBfdGhpcy53XSk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBfdGhpcy53aW5kb3dSZXNpemVIYW5kbGVyKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRSZXNpemVMaXN0ZW5lcihfdGhpcy5lbC5wYXJlbnROb2RlLCBfdGhpcy5fcGFyZW50UmVzaXplQ2FsbGJhY2suYmluZChfdGhpcykpO1xuXG4gICAgICAgICAgICB2YXIgZ3JhcGhEYXRhID0gX3RoaXMuY3JlYXRlKF90aGlzLncuY29uZmlnLnNlcmllcywge30pO1xuXG4gICAgICAgICAgICBpZiAoIWdyYXBoRGF0YSkgcmV0dXJuIHJlc29sdmUoX3RoaXMpO1xuXG4gICAgICAgICAgICBfdGhpcy5tb3VudChncmFwaERhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLncuY29uZmlnLmNoYXJ0LmV2ZW50cy5tb3VudGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudy5jb25maWcuY2hhcnQuZXZlbnRzLm1vdW50ZWQoX3RoaXMsIF90aGlzLncpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX3RoaXMuZXZlbnRzLmZpcmVFdmVudCgnbW91bnRlZCcsIFtfdGhpcywgX3RoaXMud10pO1xuXG4gICAgICAgICAgICAgIHJlc29sdmUoZ3JhcGhEYXRhKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIHJlamVjdChlKTsgLy8gaGFuZGxlIGVycm9yIGluIGNhc2Ugbm8gZGF0YSBvciBlbGVtZW50IG5vdCBmb3VuZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0VsZW1lbnQgbm90IGZvdW5kJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNyZWF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShzZXIsIG9wdHMpIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnc7XG4gICAgICAgIHZhciBpbml0Q3R4ID0gbmV3IEluaXRDdHhWYXJpYWJsZXModGhpcyk7XG4gICAgICAgIGluaXRDdHguaW5pdE1vZHVsZXMoKTtcbiAgICAgICAgdmFyIGdsID0gdGhpcy53Lmdsb2JhbHM7XG4gICAgICAgIGdsLm5vRGF0YSA9IGZhbHNlO1xuICAgICAgICBnbC5hbmltYXRpb25FbmRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc3BvbnNpdmUuY2hlY2tSZXNwb25zaXZlQ29uZmlnKG9wdHMpO1xuXG4gICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jb252ZXJ0ZWRDYXRUb051bWVyaWMpIHtcbiAgICAgICAgICB2YXIgZGVmYXVsdHMgPSBuZXcgRGVmYXVsdHMody5jb25maWcpO1xuICAgICAgICAgIGRlZmF1bHRzLmNvbnZlcnRDYXRUb051bWVyaWNYYXhpcyh3LmNvbmZpZywgdGhpcy5jdHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZWwgPT09IG51bGwpIHtcbiAgICAgICAgICBnbC5hbmltYXRpb25FbmRlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvcmUuc2V0dXBFbGVtZW50cygpO1xuXG4gICAgICAgIGlmIChnbC5zdmdXaWR0aCA9PT0gMCkge1xuICAgICAgICAgIC8vIGlmIHRoZSBlbGVtZW50IGlzIGhpZGRlbiwgc2tpcCBkcmF3aW5nXG4gICAgICAgICAgZ2wuYW5pbWF0aW9uRW5kZWQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbWJvID0gQ29yZVV0aWxzLmNoZWNrQ29tYm9TZXJpZXMoc2VyKTtcbiAgICAgICAgZ2wuY29tYm9DaGFydHMgPSBjb21iby5jb21ib0NoYXJ0cztcbiAgICAgICAgZ2wuY29tYm9CYXJDb3VudCA9IGNvbWJvLmNvbWJvQmFyQ291bnQ7XG5cbiAgICAgICAgaWYgKHNlci5sZW5ndGggPT09IDAgfHwgc2VyLmxlbmd0aCA9PT0gMSAmJiBzZXJbMF0uZGF0YSAmJiBzZXJbMF0uZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnNlcmllcy5oYW5kbGVOb0RhdGEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXZlbnRzLnNldHVwRXZlbnRIYW5kbGVycygpOyAvLyBIYW5kbGUgdGhlIGRhdGEgaW5wdXR0ZWQgYnkgdXNlciBhbmQgc2V0IHNvbWUgb2YgdGhlIGdsb2JhbCB2YXJpYWJsZXMgKGZvciBlZywgaWYgZGF0YSBpcyBkYXRldGltZSAvIG51bWVyaWMgLyBjYXRlZ29yeSkuIERvbid0IGNhbGN1bGF0ZSB0aGUgcmFuZ2UgLyBtaW4gLyBtYXggYXQgdGhpcyB0aW1lXG5cbiAgICAgICAgdGhpcy5kYXRhLnBhcnNlRGF0YShzZXIpOyAvLyB0aGlzIGlzIGEgZ29vZCB0aW1lIHRvIHNldCB0aGVtZSBjb2xvcnMgZmlyc3RcblxuICAgICAgICB0aGlzLnRoZW1lLmluaXQoKTsgLy8gYXMgbWFya2VycyBhY2NlcHRzIGFycmF5LCB3ZSBuZWVkIHRvIHNldHVwIGdsb2JhbCBtYXJrZXJzIGZvciBlYXNpZXIgYWNjZXNzXG5cbiAgICAgICAgdmFyIG1hcmtlcnMgPSBuZXcgTWFya2Vycyh0aGlzKTtcbiAgICAgICAgbWFya2Vycy5zZXRHbG9iYWxNYXJrZXJTaXplKCk7IC8vIGxhYmVsRm9ybWF0dGVycyBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBkaW1lbnNpb25zIGFzIGluIGRpbWVuc2lvbnMgd2UgbmVlZCB0ZXh0IGxhYmVscyB3aWR0aFxuXG4gICAgICAgIHRoaXMuZm9ybWF0dGVycy5zZXRMYWJlbEZvcm1hdHRlcnMoKTtcbiAgICAgICAgdGhpcy50aXRsZVN1YnRpdGxlLmRyYXcoKTsgLy8gbGVnZW5kIGlzIGNhbGN1bGF0ZWQgaGVyZSBiZWZvcmUgY29yZUNhbGN1bGF0aW9ucyBiZWNhdXNlIGl0IGFmZmVjdHMgdGhlIHBsb3R0YWJsZSBhcmVhXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIHNvbWUgZGF0YSB0byBzaG93IG9yIHVzZXIgY29sbGFwc2VkIGFsbCBzZXJpZXMsIHRoZW4gcHJvY2VlZCBkcmF3aW5nIGxlZ2VuZFxuXG4gICAgICAgIGlmICghZ2wubm9EYXRhIHx8IGdsLmNvbGxhcHNlZFNlcmllcy5sZW5ndGggPT09IGdsLnNlcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmxlZ2VuZC5pbml0KCk7XG4gICAgICAgIH0gLy8gY2hlY2sgd2hldGhlciBpbiBtdWx0aXBsZSBzZXJpZXMsIGFsbCBzZXJpZXMgc2hhcmUgdGhlIHNhbWUgWFxuXG5cbiAgICAgICAgdGhpcy5zZXJpZXMuaGFzQWxsU2VyaWVzRXF1YWxYKCk7IC8vIGNvcmVDYWxjdWxhdGlvbnMgd2lsbCBnaXZlIHRoZSBtaW4vbWF4IHJhbmdlIGFuZCB5YXhpcy9heGlzIHZhbHVlcy4gSXQgc2hvdWxkIGJlIGNhbGxlZCBoZXJlIHRvIHNldCBzZXJpZXMgdmFyaWFibGUgZnJvbSBjb25maWcgdG8gZ2xvYmFsc1xuXG4gICAgICAgIGlmIChnbC5heGlzQ2hhcnRzKSB7XG4gICAgICAgICAgdGhpcy5jb3JlLmNvcmVDYWxjdWxhdGlvbnMoKTtcblxuICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy50eXBlICE9PSAnY2F0ZWdvcnknKSB7XG4gICAgICAgICAgICAvLyBhcyB3ZSBoYXZlIG1pblggYW5kIG1heFggdmFsdWVzLCBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgRGF0ZVRpbWVGb3JtYXQgZm9yIHRpbWUgc2VyaWVzXG4gICAgICAgICAgICB0aGlzLmZvcm1hdHRlcnMuc2V0TGFiZWxGb3JtYXR0ZXJzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHdlIG5lZWQgdG8gZ2VuZXJhdGUgeWF4aXMgZm9yIGhlYXRtYXAgc2VwYXJhdGVseSBhcyB3ZSBhcmUgbm90IHNob3dpbmcgbnVtZXJpY3MgdGhlcmUsIGJ1dCBzZXJpZXNOYW1lcy4gVGhlcmUgYXJlIHNvbWUgdHdlYWtzIHdoaWNoIGFyZSByZXF1aXJlZCBmb3IgaGVhdG1hcCB0byBhbGlnbiBsYWJlbHMgY29ycmVjdGx5IHdoaWNoIGFyZSBkb25lIGluIGJlbG93IGZ1bmN0aW9uXG4gICAgICAgIC8vIEFsc28gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBjYWxjdXRpbmcgRGltZW50aW9ucyBwbG90Q29vcmRzKCkgbWV0aG9kIG9mIERpbWVuc2lvbnNcblxuXG4gICAgICAgIHRoaXMuZm9ybWF0dGVycy5oZWF0bWFwTGFiZWxGb3JtYXR0ZXJzKCk7IC8vIFdlIGdvdCBwbG90dGFibGUgYXJlYSBoZXJlLCBuZXh0IHRhc2sgd291bGQgYmUgdG8gY2FsY3VsYXRlIGF4aXMgYXJlYXNcblxuICAgICAgICB0aGlzLmRpbWVuc2lvbnMucGxvdENvb3JkcygpO1xuICAgICAgICB2YXIgeHlSYXRpb3MgPSB0aGlzLmNvcmUueHlTZXR0aW5ncygpO1xuICAgICAgICB0aGlzLmdyaWQuY3JlYXRlR3JpZE1hc2soKTtcbiAgICAgICAgdmFyIGVsR3JhcGggPSB0aGlzLmNvcmUucGxvdENoYXJ0VHlwZShzZXIsIHh5UmF0aW9zKTtcbiAgICAgICAgdmFyIGRhdGFMYWJlbHMgPSBuZXcgRGF0YUxhYmVscyh0aGlzKTtcbiAgICAgICAgZGF0YUxhYmVscy5icmluZ0ZvcndhcmQoKTtcblxuICAgICAgICBpZiAody5jb25maWcuZGF0YUxhYmVscy5iYWNrZ3JvdW5kLmVuYWJsZWQpIHtcbiAgICAgICAgICBkYXRhTGFiZWxzLmRhdGFMYWJlbHNCYWNrZ3JvdW5kKCk7XG4gICAgICAgIH0gLy8gYWZ0ZXIgYWxsIHRoZSBkcmF3aW5nIGNhbGN1bGF0aW9ucywgc2hpZnQgdGhlIGdyYXBoaWNhbCBhcmVhIChhY3R1YWwgY2hhcnRzL2JhcnMpIGV4Y2x1ZGluZyBsZWdlbmRzXG5cblxuICAgICAgICB0aGlzLmNvcmUuc2hpZnRHcmFwaFBvc2l0aW9uKCk7XG4gICAgICAgIHZhciBkaW0gPSB7XG4gICAgICAgICAgcGxvdDoge1xuICAgICAgICAgICAgbGVmdDogdy5nbG9iYWxzLnRyYW5zbGF0ZVgsXG4gICAgICAgICAgICB0b3A6IHcuZ2xvYmFscy50cmFuc2xhdGVZLFxuICAgICAgICAgICAgd2lkdGg6IHcuZ2xvYmFscy5ncmlkV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHcuZ2xvYmFscy5ncmlkSGVpZ2h0XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVsR3JhcGg6IGVsR3JhcGgsXG4gICAgICAgICAgeHlSYXRpb3M6IHh5UmF0aW9zLFxuICAgICAgICAgIGVsSW5uZXI6IHcuZ2xvYmFscy5kb20uZWxHcmFwaGljYWwsXG4gICAgICAgICAgZGltZW5zaW9uczogZGltXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBncmFwaERhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHZhciB3ID0gbWUudztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAvLyBubyBkYXRhIHRvIGRpc3BsYXlcbiAgICAgICAgICBpZiAobWUuZWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdOb3QgZW5vdWdoIGRhdGEgdG8gZGlzcGxheSBvciB0YXJnZXQgZWxlbWVudCBub3QgZm91bmQnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChncmFwaERhdGEgPT09IG51bGwgfHwgdy5nbG9iYWxzLmFsbFNlcmllc0NvbGxhcHNlZCkge1xuICAgICAgICAgICAgbWUuc2VyaWVzLmhhbmRsZU5vRGF0YSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lLmF4ZXMuZHJhd0F4aXMody5jb25maWcuY2hhcnQudHlwZSwgZ3JhcGhEYXRhLnh5UmF0aW9zKTtcbiAgICAgICAgICBtZS5ncmlkID0gbmV3IEdyaWQobWUpO1xuICAgICAgICAgIHZhciBlbGdyaWQgPSBtZS5ncmlkLmRyYXdHcmlkKCk7XG4gICAgICAgICAgbWUuYW5ub3RhdGlvbnMgPSBuZXcgQW5ub3RhdGlvbnMobWUpO1xuICAgICAgICAgIG1lLmFubm90YXRpb25zLmRyYXdTaGFwZUFubm9zKCk7XG4gICAgICAgICAgbWUuYW5ub3RhdGlvbnMuZHJhd0ltYWdlQW5ub3MoKTtcbiAgICAgICAgICBtZS5hbm5vdGF0aW9ucy5kcmF3VGV4dEFubm9zKCk7XG5cbiAgICAgICAgICBpZiAody5jb25maWcuZ3JpZC5wb3NpdGlvbiA9PT0gJ2JhY2snICYmIGVsZ3JpZCkge1xuICAgICAgICAgICAgdy5nbG9iYWxzLmRvbS5lbEdyYXBoaWNhbC5hZGQoZWxncmlkLmVsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgeEF4aXMgPSBuZXcgWEF4aXMoX3RoaXMyLmN0eCk7XG4gICAgICAgICAgdmFyIHlheGlzID0gbmV3IFlBeGlzKF90aGlzMi5jdHgpO1xuXG4gICAgICAgICAgaWYgKGVsZ3JpZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgeEF4aXMueEF4aXNMYWJlbENvcnJlY3Rpb25zKGVsZ3JpZC54QXhpc1RpY2tXaWR0aCk7XG4gICAgICAgICAgICB5YXhpcy5zZXRZQXhpc1RleHRBbGlnbm1lbnRzKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmFubm90YXRpb25zLnBvc2l0aW9uID09PSAnYmFjaycpIHtcbiAgICAgICAgICAgIHcuZ2xvYmFscy5kb20uUGFwZXIuYWRkKHcuZ2xvYmFscy5kb20uZWxBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICBtZS5hbm5vdGF0aW9ucy5kcmF3QXhlc0Fubm90YXRpb25zKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGdyYXBoRGF0YS5lbEdyYXBoIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgZ3JhcGhEYXRhLmVsR3JhcGgubGVuZ3RoOyBnKyspIHtcbiAgICAgICAgICAgICAgdy5nbG9iYWxzLmRvbS5lbEdyYXBoaWNhbC5hZGQoZ3JhcGhEYXRhLmVsR3JhcGhbZ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsR3JhcGhpY2FsLmFkZChncmFwaERhdGEuZWxHcmFwaCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHcuY29uZmlnLmdyaWQucG9zaXRpb24gPT09ICdmcm9udCcgJiYgZWxncmlkKSB7XG4gICAgICAgICAgICB3Lmdsb2JhbHMuZG9tLmVsR3JhcGhpY2FsLmFkZChlbGdyaWQuZWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3LmNvbmZpZy54YXhpcy5jcm9zc2hhaXJzLnBvc2l0aW9uID09PSAnZnJvbnQnKSB7XG4gICAgICAgICAgICBtZS5jcm9zc2hhaXJzLmRyYXdYQ3Jvc3NoYWlycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3LmNvbmZpZy55YXhpc1swXS5jcm9zc2hhaXJzLnBvc2l0aW9uID09PSAnZnJvbnQnKSB7XG4gICAgICAgICAgICBtZS5jcm9zc2hhaXJzLmRyYXdZQ3Jvc3NoYWlycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3LmNvbmZpZy5hbm5vdGF0aW9ucy5wb3NpdGlvbiA9PT0gJ2Zyb250Jykge1xuICAgICAgICAgICAgdy5nbG9iYWxzLmRvbS5QYXBlci5hZGQody5nbG9iYWxzLmRvbS5lbEFubm90YXRpb25zKTtcbiAgICAgICAgICAgIG1lLmFubm90YXRpb25zLmRyYXdBeGVzQW5ub3RhdGlvbnMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXcuZ2xvYmFscy5ub0RhdGEpIHtcbiAgICAgICAgICAgIC8vIGRyYXcgdG9vbHRpcHMgYXQgdGhlIGVuZFxuICAgICAgICAgICAgaWYgKHcuY29uZmlnLnRvb2x0aXAuZW5hYmxlZCAmJiAhdy5nbG9iYWxzLm5vRGF0YSkge1xuICAgICAgICAgICAgICBtZS53Lmdsb2JhbHMudG9vbHRpcC5kcmF3VG9vbHRpcChncmFwaERhdGEueHlSYXRpb3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAody5nbG9iYWxzLmF4aXNDaGFydHMgJiYgKHcuZ2xvYmFscy5pc1hOdW1lcmljIHx8IHcuY29uZmlnLnhheGlzLmNvbnZlcnRlZENhdFRvTnVtZXJpYykpIHtcbiAgICAgICAgICAgICAgaWYgKHcuY29uZmlnLmNoYXJ0Lnpvb20uZW5hYmxlZCB8fCB3LmNvbmZpZy5jaGFydC5zZWxlY3Rpb24gJiYgdy5jb25maWcuY2hhcnQuc2VsZWN0aW9uLmVuYWJsZWQgfHwgdy5jb25maWcuY2hhcnQucGFuICYmIHcuY29uZmlnLmNoYXJ0LnBhbi5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgbWUuem9vbVBhblNlbGVjdGlvbi5pbml0KHtcbiAgICAgICAgICAgICAgICAgIHh5UmF0aW9zOiBncmFwaERhdGEueHlSYXRpb3NcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHRvb2xzID0gdy5jb25maWcuY2hhcnQudG9vbGJhci50b29scztcbiAgICAgICAgICAgICAgdmFyIHRvb2xzQXJyID0gWyd6b29tJywgJ3pvb21pbicsICd6b29tb3V0JywgJ3NlbGVjdGlvbicsICdwYW4nLCAncmVzZXQnXTtcbiAgICAgICAgICAgICAgdG9vbHNBcnIuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHRvb2xzW3RdID0gZmFsc2U7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAody5jb25maWcuY2hhcnQudG9vbGJhci5zaG93ICYmICF3Lmdsb2JhbHMuYWxsU2VyaWVzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgIG1lLnRvb2xiYXIuY3JlYXRlVG9vbGJhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3Lmdsb2JhbHMubWVtb3J5Lm1ldGhvZHNUb0V4ZWMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdy5nbG9iYWxzLm1lbW9yeS5tZXRob2RzVG9FeGVjLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgIGZuLm1ldGhvZChmbi5wYXJhbXMsIGZhbHNlLCBmbi5jb250ZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdy5nbG9iYWxzLmF4aXNDaGFydHMgJiYgIXcuZ2xvYmFscy5ub0RhdGEpIHtcbiAgICAgICAgICAgIG1lLmNvcmUucmVzaXplTm9uQXhpc0NoYXJ0cygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUobWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRGVzdHJveSB0aGUgY2hhcnQgaW5zdGFuY2UgYnkgcmVtb3ZpbmcgYWxsIGVsZW1lbnRzIHdoaWNoIGFsc28gY2xlYW4gdXAgZXZlbnQgbGlzdGVuZXJzIG9uIHRob3NlIGVsZW1lbnRzLlxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZUhhbmRsZXIpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlUmVzaXplTGlzdGVuZXIodGhpcy5lbC5wYXJlbnROb2RlLCB0aGlzLl9wYXJlbnRSZXNpemVDYWxsYmFjay5iaW5kKHRoaXMpKTsgLy8gcmVtb3ZlIHRoZSBjaGFydCdzIGluc3RhbmNlIGZyb20gdGhlIGdsb2JhbCBBcGV4Ll9jaGFydEluc3RhbmNlc1xuXG4gICAgICAgIHZhciBjaGFydElEID0gdGhpcy53LmNvbmZpZy5jaGFydC5pZDtcblxuICAgICAgICBpZiAoY2hhcnRJRCkge1xuICAgICAgICAgIEFwZXguX2NoYXJ0SW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgICAgIGlmIChjLmlkID09PSBjaGFydElEKSB7XG4gICAgICAgICAgICAgIEFwZXguX2NoYXJ0SW5zdGFuY2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ldyBEZXN0cm95KHRoaXMuY3R4KS5jbGVhcigpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBBbGxvd3MgdXNlcnMgdG8gdXBkYXRlIE9wdGlvbnMgYWZ0ZXIgdGhlIGNoYXJ0IGhhcyByZW5kZXJlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEEgbmV3IGNvbmZpZyBvYmplY3QgY2FuIGJlIHBhc3NlZCB3aGljaCB3aWxsIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBjb25maWcgb2JqZWN0XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlZHJhdyAtIHNob3VsZCByZWRyYXcgZnJvbSBiZWdpbm5pbmcgb3Igc2hvdWxkIHVzZSBleGlzdGluZyBwYXRocyBhbmQgcmVkcmF3IGZyb20gdGhlcmVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYW5pbWF0ZSAtIHNob3VsZCBhbmltYXRlIG9yIG5vdCBvbiB1cGRhdGluZyBPcHRpb25zXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1cGRhdGVPcHRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciByZWRyYXcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgICAgICB2YXIgYW5pbWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgICAgICAgdmFyIHVwZGF0ZVN5bmNlZENoYXJ0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogdHJ1ZTtcbiAgICAgICAgdmFyIG92ZXJ3cml0ZUluaXRpYWxDb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHRydWU7XG4gICAgICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNlcmllcykge1xuICAgICAgICAgIHRoaXMuc2VyaWVzLnJlc2V0U2VyaWVzKGZhbHNlLCB0cnVlLCBmYWxzZSk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5zZXJpZXMubGVuZ3RoICYmIG9wdGlvbnMuc2VyaWVzWzBdLmRhdGEpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VyaWVzID0gb3B0aW9ucy5zZXJpZXMubWFwKGZ1bmN0aW9uIChzLCBpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczMudXBkYXRlSGVscGVycy5fZXh0ZW5kU2VyaWVzKHMsIGkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSAvLyB1c2VyIHVwZGF0ZWQgdGhlIHNlcmllcyB2aWEgdXBkYXRlT3B0aW9ucygpIGZ1bmN0aW9uLlxuICAgICAgICAgIC8vIEhlbmNlLCB3ZSBuZWVkIHRvIHJlc2V0IGF4aXMgbWluL21heCB0byBhdm9pZCB6b29taW5nIGlzc3Vlc1xuXG5cbiAgICAgICAgICB0aGlzLnVwZGF0ZUhlbHBlcnMucmV2ZXJ0RGVmYXVsdEF4aXNNaW5NYXgoKTtcbiAgICAgICAgfSAvLyB1c2VyIGhhcyBzZXQgeC1heGlzIG1pbi9tYXggZXh0ZXJuYWxseSAtIGhlbmNlIHdlIG5lZWQgdG8gZm9yY2VmdWxseSBzZXQgdGhlIHhheGlzIG1pbi9tYXhcblxuXG4gICAgICAgIGlmIChvcHRpb25zLnhheGlzKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMudXBkYXRlSGVscGVycy5mb3JjZVhBeGlzVXBkYXRlKG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMueWF4aXMpIHtcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy51cGRhdGVIZWxwZXJzLmZvcmNlWUF4aXNVcGRhdGUob3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAody5nbG9iYWxzLmNvbGxhcHNlZFNlcmllc0luZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuc2VyaWVzLmNsZWFyUHJldmlvdXNQYXRocygpO1xuICAgICAgICB9XG4gICAgICAgIC8qIHVwZGF0ZSB0aGVtZSBtb2RlIzQ1OSAqL1xuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMudGhlbWUpIHtcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy50aGVtZS51cGRhdGVUaGVtZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVIZWxwZXJzLl91cGRhdGVPcHRpb25zKG9wdGlvbnMsIHJlZHJhdywgYW5pbWF0ZSwgdXBkYXRlU3luY2VkQ2hhcnRzLCBvdmVyd3JpdGVJbml0aWFsQ29uZmlnKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQWxsb3dzIHVzZXJzIHRvIHVwZGF0ZSBTZXJpZXMgYWZ0ZXIgdGhlIGNoYXJ0IGhhcyByZW5kZXJlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBzZXJpZXMgLSBOZXcgc2VyaWVzIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIGV4aXN0aW5nXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1cGRhdGVTZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTZXJpZXMoKSB7XG4gICAgICAgIHZhciBuZXdTZXJpZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgICAgICB2YXIgYW5pbWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICAgICAgdmFyIG92ZXJ3cml0ZUluaXRpYWxTZXJpZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gICAgICAgIHRoaXMuc2VyaWVzLnJlc2V0U2VyaWVzKGZhbHNlKTtcbiAgICAgICAgdGhpcy51cGRhdGVIZWxwZXJzLnJldmVydERlZmF1bHRBeGlzTWluTWF4KCk7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUhlbHBlcnMuX3VwZGF0ZVNlcmllcyhuZXdTZXJpZXMsIGFuaW1hdGUsIG92ZXJ3cml0ZUluaXRpYWxTZXJpZXMpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBBbGxvd3MgdXNlcnMgdG8gYXBwZW5kIGEgbmV3IHNlcmllcyBhZnRlciB0aGUgY2hhcnQgaGFzIHJlbmRlcmVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7YXJyYXl9IG5ld1NlcmllIC0gTmV3IHNlcmllIHdoaWNoIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGV4aXN0aW5nIHNlcmllc1xuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXBwZW5kU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kU2VyaWVzKG5ld1NlcmllKSB7XG4gICAgICAgIHZhciBhbmltYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgICAgICB2YXIgb3ZlcndyaXRlSW5pdGlhbFNlcmllcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgICAgICAgdmFyIG5ld1NlcmllcyA9IHRoaXMudy5jb25maWcuc2VyaWVzLnNsaWNlKCk7XG4gICAgICAgIG5ld1Nlcmllcy5wdXNoKG5ld1NlcmllKTtcbiAgICAgICAgdGhpcy5zZXJpZXMucmVzZXRTZXJpZXMoZmFsc2UpO1xuICAgICAgICB0aGlzLnVwZGF0ZUhlbHBlcnMucmV2ZXJ0RGVmYXVsdEF4aXNNaW5NYXgoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSGVscGVycy5fdXBkYXRlU2VyaWVzKG5ld1NlcmllcywgYW5pbWF0ZSwgb3ZlcndyaXRlSW5pdGlhbFNlcmllcyk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEFsbG93cyB1c2VycyB0byBhcHBlbmQgRGF0YSB0byBzZXJpZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHthcnJheX0gbmV3RGF0YSAtIE5ldyBkYXRhIGluIHRoZSBzYW1lIGZvcm1hdCBhcyBzZXJpZXNcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImFwcGVuZERhdGFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmREYXRhKG5ld0RhdGEpIHtcbiAgICAgICAgdmFyIG92ZXJ3cml0ZUluaXRpYWxTZXJpZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIG1lLncuZ2xvYmFscy5kYXRhQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIG1lLnNlcmllcy5nZXRQcmV2aW91c1BhdGhzKCk7XG4gICAgICAgIHZhciBuZXdTZXJpZXMgPSBtZS53LmNvbmZpZy5zZXJpZXMuc2xpY2UoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1Nlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgbmV3RGF0YVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3RGF0YVtpXS5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgIG5ld1Nlcmllc1tpXS5kYXRhLnB1c2gobmV3RGF0YVtpXS5kYXRhW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBtZS53LmNvbmZpZy5zZXJpZXMgPSBuZXdTZXJpZXM7XG5cbiAgICAgICAgaWYgKG92ZXJ3cml0ZUluaXRpYWxTZXJpZXMpIHtcbiAgICAgICAgICBtZS53Lmdsb2JhbHMuaW5pdGlhbFNlcmllcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobWUudy5jb25maWcuc2VyaWVzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBuZXcgRGVzdHJveShfdGhpczQuY3R4KS5jbGVhcigpO1xuXG4gICAgICAgICAgdmFyIGdyYXBoRGF0YSA9IF90aGlzNC5jcmVhdGUoX3RoaXM0LncuY29uZmlnLnNlcmllcywgb3B0aW9ucyk7XG5cbiAgICAgICAgICBpZiAoIWdyYXBoRGF0YSkgcmV0dXJuIHJlc29sdmUoX3RoaXM0KTtcblxuICAgICAgICAgIF90aGlzNC5tb3VudChncmFwaERhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBfdGhpczQudy5jb25maWcuY2hhcnQuZXZlbnRzLnVwZGF0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgX3RoaXM0LncuY29uZmlnLmNoYXJ0LmV2ZW50cy51cGRhdGVkKF90aGlzNCwgX3RoaXM0LncpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpczQuZXZlbnRzLmZpcmVFdmVudCgndXBkYXRlZCcsIFtfdGhpczQsIF90aGlzNC53XSk7XG5cbiAgICAgICAgICAgIF90aGlzNC53Lmdsb2JhbHMuaXNEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICByZXNvbHZlKF90aGlzNCk7XG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEdldCBhbGwgY2hhcnRzIGluIHRoZSBzYW1lIFwiZ3JvdXBcIiAoaW5jbHVkaW5nIHRoZSBpbnN0YW5jZSB3aGljaCBpcyBjYWxsZWQgdXBvbikgdG8gc3luYyB0aGVtIHdoZW4gdXNlciB6b29tcyBpbi9vdXQgb3IgcGFuLlxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0U3luY2VkQ2hhcnRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3luY2VkQ2hhcnRzKCkge1xuICAgICAgICB2YXIgY2hhcnRHcm91cHMgPSB0aGlzLmdldEdyb3VwZWRDaGFydHMoKTtcbiAgICAgICAgdmFyIGFsbENoYXJ0cyA9IFt0aGlzXTtcblxuICAgICAgICBpZiAoY2hhcnRHcm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgYWxsQ2hhcnRzID0gW107XG4gICAgICAgICAgY2hhcnRHcm91cHMuZm9yRWFjaChmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgICAgIGFsbENoYXJ0cy5wdXNoKGNoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbGxDaGFydHM7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEdldCBjaGFydHMgaW4gdGhlIHNhbWUgXCJncm91cFwiIChleGNsdWRpbmcgdGhlIGluc3RhbmNlIHdoaWNoIGlzIGNhbGxlZCB1cG9uKSB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gdGhlIG90aGVyIGNoYXJ0cyBvZiB0aGUgc2FtZSBncm91cCAoZWcuLCB0b29sdGlwIGhvdmVyaW5nKVxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0R3JvdXBlZENoYXJ0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdyb3VwZWRDaGFydHMoKSB7XG4gICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBBcGV4Ll9jaGFydEluc3RhbmNlcy5maWx0ZXIoZnVuY3Rpb24gKGNoKSB7XG4gICAgICAgICAgaWYgKGNoLmdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1LncuY29uZmlnLmNoYXJ0Lmdyb3VwID09PSBjaC5ncm91cCA/IGNoLmNoYXJ0IDogX3RoaXM1O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9nZ2xlU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlU2VyaWVzKHNlcmllc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VyaWVzLnRvZ2dsZVNlcmllcyhzZXJpZXNOYW1lKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2hvd1Nlcmllc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dTZXJpZXMoc2VyaWVzTmFtZSkge1xuICAgICAgICB0aGlzLnNlcmllcy5zaG93U2VyaWVzKHNlcmllc05hbWUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJoaWRlU2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZVNlcmllcyhzZXJpZXNOYW1lKSB7XG4gICAgICAgIHRoaXMuc2VyaWVzLmhpZGVTZXJpZXMoc2VyaWVzTmFtZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlc2V0U2VyaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRTZXJpZXMoKSB7XG4gICAgICAgIHZhciBzaG91bGRVcGRhdGVDaGFydCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgICAgICAgdGhpcy5zZXJpZXMucmVzZXRTZXJpZXMoc2hvdWxkVXBkYXRlQ2hhcnQpO1xuICAgICAgfSAvLyBQdWJsaWMgbWV0aG9kIHRvIGFkZCBldmVudCBsaXN0ZW5lciBvbiBjaGFydCBjb250ZXh0XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkRXZlbnRMaXN0ZW5lclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICAgICAgfSAvLyBQdWJsaWMgbWV0aG9kIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lciBvbiBjaGFydCBjb250ZXh0XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRYYXhpc0Fubm90YXRpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRYYXhpc0Fubm90YXRpb24ob3B0cykge1xuICAgICAgICB2YXIgcHVzaFRvTWVtb3J5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgbWUgPSBjb250ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgbWUuYW5ub3RhdGlvbnMuYWRkWGF4aXNBbm5vdGF0aW9uRXh0ZXJuYWwob3B0cywgcHVzaFRvTWVtb3J5LCBtZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFlheGlzQW5ub3RhdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFlheGlzQW5ub3RhdGlvbihvcHRzKSB7XG4gICAgICAgIHZhciBwdXNoVG9NZW1vcnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICBtZSA9IGNvbnRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICBtZS5hbm5vdGF0aW9ucy5hZGRZYXhpc0Fubm90YXRpb25FeHRlcm5hbChvcHRzLCBwdXNoVG9NZW1vcnksIG1lKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkUG9pbnRBbm5vdGF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUG9pbnRBbm5vdGF0aW9uKG9wdHMpIHtcbiAgICAgICAgdmFyIHB1c2hUb01lbW9yeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcblxuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgIG1lID0gY29udGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmFubm90YXRpb25zLmFkZFBvaW50QW5ub3RhdGlvbkV4dGVybmFsKG9wdHMsIHB1c2hUb01lbW9yeSwgbWUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbGVhckFubm90YXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJBbm5vdGF0aW9ucygpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcblxuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgIG1lID0gY29udGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmFubm90YXRpb25zLmNsZWFyQW5ub3RhdGlvbnMobWUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW1vdmVBbm5vdGF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQW5ub3RhdGlvbihpZCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgbWUgPSBjb250ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgbWUuYW5ub3RhdGlvbnMucmVtb3ZlQW5ub3RhdGlvbihtZSwgaWQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRDaGFydEFyZWFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGFydEFyZWEoKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXMudy5nbG9iYWxzLmRvbS5iYXNlRWwucXVlcnlTZWxlY3RvcignLmFwZXhjaGFydHMtaW5uZXInKTtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRTZXJpZXNUb3RhbFhSYW5nZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlcmllc1RvdGFsWFJhbmdlKG1pblgsIG1heFgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29yZVV0aWxzLmdldFNlcmllc1RvdGFsc1hSYW5nZShtaW5YLCBtYXhYKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0SGlnaGVzdFZhbHVlSW5TZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIaWdoZXN0VmFsdWVJblNlcmllcygpIHtcbiAgICAgICAgdmFyIHNlcmllc0luZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgICB2YXIgcmFuZ2UgPSBuZXcgUmFuZ2UkMSh0aGlzLmN0eCk7XG4gICAgICAgIHJldHVybiByYW5nZS5nZXRNaW5ZTWF4WShzZXJpZXNJbmRleCkuaGlnaGVzdFk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldExvd2VzdFZhbHVlSW5TZXJpZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMb3dlc3RWYWx1ZUluU2VyaWVzKCkge1xuICAgICAgICB2YXIgc2VyaWVzSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICAgIHZhciByYW5nZSA9IG5ldyBSYW5nZSQxKHRoaXMuY3R4KTtcbiAgICAgICAgcmV0dXJuIHJhbmdlLmdldE1pbllNYXhZKHNlcmllc0luZGV4KS5sb3dlc3RZO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRTZXJpZXNUb3RhbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlcmllc1RvdGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53Lmdsb2JhbHMuc2VyaWVzVG90YWxzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b2dnbGVEYXRhUG9pbnRTZWxlY3Rpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVEYXRhUG9pbnRTZWxlY3Rpb24oc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUhlbHBlcnMudG9nZ2xlRGF0YVBvaW50U2VsZWN0aW9uKHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldExvY2FsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExvY2FsZShsb2NhbGVOYW1lKSB7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uLnNldEN1cnJlbnRMb2NhbGVWYWx1ZXMobG9jYWxlTmFtZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRhdGFVUklcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkYXRhVVJJKCkge1xuICAgICAgICB2YXIgZXhwID0gbmV3IEV4cG9ydHModGhpcy5jdHgpO1xuICAgICAgICByZXR1cm4gZXhwLmRhdGFVUkkoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFwZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXBlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudy5nbG9iYWxzLmRvbS5QYXBlcjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3BhcmVudFJlc2l6ZUNhbGxiYWNrXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3BhcmVudFJlc2l6ZUNhbGxiYWNrKCkge1xuICAgICAgICBpZiAoIXRoaXMudy5nbG9iYWxzLm5vRGF0YSAmJiB0aGlzLncuZ2xvYmFscy5hbmltYXRpb25FbmRlZCAmJiB0aGlzLncuY29uZmlnLmNoYXJ0LnJlZHJhd09uUGFyZW50UmVzaXplKSB7XG4gICAgICAgICAgdGhpcy5fd2luZG93UmVzaXplKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogSGFuZGxlIHdpbmRvdyByZXNpemUgYW5kIHJlLWRyYXcgdGhlIHdob2xlIGNoYXJ0LlxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3dpbmRvd1Jlc2l6ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF93aW5kb3dSZXNpemUoKSB7XG4gICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLncuZ2xvYmFscy5yZXNpemVUaW1lcik7XG4gICAgICAgIHRoaXMudy5nbG9iYWxzLnJlc2l6ZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNi53Lmdsb2JhbHMucmVzaXplZCA9IHRydWU7XG4gICAgICAgICAgX3RoaXM2LncuZ2xvYmFscy5kYXRhQ2hhbmdlZCA9IGZhbHNlOyAvLyB3ZSBuZWVkIHRvIHJlZHJhdyB0aGUgd2hvbGUgY2hhcnQgb24gd2luZG93IHJlc2l6ZSAod2l0aCBhIHNtYWxsIGRlbGF5KS5cblxuICAgICAgICAgIF90aGlzNi5jdHgudXBkYXRlKCk7XG4gICAgICAgIH0sIDE1MCk7XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiZ2V0Q2hhcnRCeUlEXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hhcnRCeUlEKGNoYXJ0SUQpIHtcbiAgICAgICAgdmFyIGMgPSBBcGV4Ll9jaGFydEluc3RhbmNlcy5maWx0ZXIoZnVuY3Rpb24gKGNoKSB7XG4gICAgICAgICAgcmV0dXJuIGNoLmlkID09PSBjaGFydElEO1xuICAgICAgICB9KVswXTtcblxuICAgICAgICByZXR1cm4gYyAmJiBjLmNoYXJ0O1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gcHJvdmlkZSBkYXRhIGF0dHJzIGluIHRoZSBlbGVtZW50IGFuZCB0aGUgY2hhcnQgd2lsbCByZW5kZXIgYXV0b21hdGljYWxseSB3aGVuIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSBzZWFyY2hpbmcgZm9yIHRoZSBlbGVtZW50cyBjb250YWluaW5nICdkYXRhLWFwZXhjaGFydHMnIGF0dHJpYnV0ZVxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW5pdE9uTG9hZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRPbkxvYWQoKSB7XG4gICAgICAgIHZhciBlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hcGV4Y2hhcnRzXScpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVsID0gZWxzW2ldO1xuICAgICAgICAgIHZhciBvcHRpb25zID0gSlNPTi5wYXJzZShlbHNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW9wdGlvbnMnKSk7XG4gICAgICAgICAgdmFyIGFwZXhDaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsLCBvcHRpb25zKTtcbiAgICAgICAgICBhcGV4Q2hhcnQucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogVGhpcyBzdGF0aWMgbWV0aG9kIGFsbG93cyB1c2VycyB0byBjYWxsIGNoYXJ0IG1ldGhvZHMgd2l0aG91dCBuZWNlc3NhcmlseSBmcm9tIHRoZVxuICAgICAgICogaW5zdGFuY2Ugb2YgdGhlIGNoYXJ0IGluIGNhc2UgdXNlciBoYXMgYXNzaWduZWQgY2hhcnRJRCB0byB0aGUgdGFyZ2V0dGVkIGNoYXJ0LlxuICAgICAgICogVGhlIGNoYXJ0SUQgaXMgdXNlZCBmb3IgbWFwcGluZyB0aGUgaW5zdGFuY2Ugc3RvcmVkIGluIEFwZXguX2NoYXJ0SW5zdGFuY2VzIGdsb2JhbCB2YXJpYWJsZVxuICAgICAgICpcbiAgICAgICAqIFRoaXMgaXMgaGVscGZ1bCBpbiBjYXNlcyB3aGVuIHlvdSBkb24ndCBoYXZlIHJlZmVyZW5jZSBvZiB0aGUgY2hhcnQgaW5zdGFuY2VcbiAgICAgICAqIGVhc2lseSBhbmQgbmVlZCB0byBjYWxsIHRoZSBtZXRob2QgZnJvbSBhbnl3aGVyZS5cbiAgICAgICAqIEZvciBlZywgaW4gUmVhY3QvVnVlIGFwcGxpY2F0aW9ucyB3aGVuIHlvdSBoYXZlIG1hbnkgcGFyZW50L2NoaWxkIGNvbXBvbmVudHMsXG4gICAgICAgKiBhbmQgbmVlZCBlYXN5IHJlZmVyZW5jZSB0byBvdGhlciBjaGFydHMgZm9yIHBlcmZvcm1pbmcgZHluYW1pYyBvcGVyYXRpb25zXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNoYXJ0SUQgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGNhbGwgbWV0aG9kc1xuICAgICAgICogb24gdGhhdCBjaGFydCBpbnN0YW5jZVxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBUaGUgbWV0aG9kIG5hbWUgdG8gY2FsbFxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBUaGUgcGFyYW1ldGVycyB3aGljaCBhcmUgYWNjZXB0ZWQgaW4gdGhlIG9yaWdpbmFsIG1ldGhvZCB3aWxsIGJlIHBhc3NlZCBoZXJlIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZXhlY1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWMoY2hhcnRJRCwgZm4pIHtcbiAgICAgICAgdmFyIGNoYXJ0ID0gdGhpcy5nZXRDaGFydEJ5SUQoY2hhcnRJRCk7XG4gICAgICAgIGlmICghY2hhcnQpIHJldHVybjsgLy8gdHVybiBvbiB0aGUgZ2xvYmFsIGV4ZWMgZmxhZyB0byBpbmRpY2F0ZSB0aGlzIG1ldGhvZCB3YXMgY2FsbGVkXG5cbiAgICAgICAgY2hhcnQudy5nbG9iYWxzLmlzRXhlY0NhbGxlZCA9IHRydWU7XG4gICAgICAgIHZhciByZXQgPSBudWxsO1xuXG4gICAgICAgIGlmIChjaGFydC5wdWJsaWNNZXRob2RzLmluZGV4T2YoZm4pICE9PSAtMSkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBvcHRzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIG9wdHNbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldCA9IGNoYXJ0W2ZuXS5hcHBseShjaGFydCwgb3B0cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtZXJnZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBVdGlscy5leHRlbmQodGFyZ2V0LCBzb3VyY2UpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBcGV4Q2hhcnRzO1xuICB9KCk7XG5cbiAgcmV0dXJuIEFwZXhDaGFydHMkMTtcblxufSkpKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiXG5pbXBvcnQgQXBleENoYXJ0cyBmcm9tIFwiLi9hcGV4Y2hhcnRzXCJcblxud2luZG93LkFwZXhDaGFydHMgPSBBcGV4Q2hhcnRzXG5cbmNsYXNzIENoYXJ0cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG5cbiAgICBpZiAoUmVhY3QuY3JlYXRlUmVmKSB7XG4gICAgICB0aGlzLmNoYXJ0UmVmID0gUmVhY3QuY3JlYXRlUmVmKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRSZWYgPSBlbCA9PiAodGhpcy5jaGFydFJlZiA9IGVsKVxuICAgIH1cbiAgICB0aGlzLmNoYXJ0ID0gbnVsbFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgLi4ucHJvcHMgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICByZWY6IFJlYWN0LmNyZWF0ZVJlZiA/IHRoaXMuY2hhcnRSZWYgOiB0aGlzLnNldFJlZixcbiAgICAgIC4uLnByb3BzXG4gICAgfSlcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBSZWFjdC5jcmVhdGVSZWYgPyB0aGlzLmNoYXJ0UmVmLmN1cnJlbnQgOiB0aGlzLmNoYXJ0UmVmXG4gICAgdGhpcy5jaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGN1cnJlbnQsIHRoaXMuZ2V0Q29uZmlnKCkpXG4gICAgdGhpcy5jaGFydC5yZW5kZXIoKVxuICB9XG5cbiAgZ2V0Q29uZmlnKCkge1xuICAgIGNvbnN0IHsgdHlwZSwgaGVpZ2h0LCB3aWR0aCwgc2VyaWVzLCBvcHRpb25zIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgd2lkdGhcbiAgICAgIH0sXG4gICAgICBzZXJpZXNcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5leHRlbmQob3B0aW9ucywgbmV3T3B0aW9ucylcbiAgfVxuXG4gIGlzT2JqZWN0KGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSAmJiBpdGVtICE9IG51bGxcbiAgfVxuXG4gIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICA7KGZ1bmN0aW9uKCkge1xuICAgICAgICBPYmplY3QuYXNzaWduID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgLy8gV2UgbXVzdCBjaGVjayBhZ2FpbnN0IHRoZXNlIHNwZWNpZmljIGNhc2VzLlxuICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3RcIilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgb3V0cHV0ID0gT2JqZWN0KHRhcmdldClcbiAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgbGV0IHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF1cbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgbmV4dEtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG91dHB1dFxuICAgICAgICB9XG4gICAgICB9KSgpXG4gICAgfVxuXG4gICAgbGV0IG91dHB1dCA9IE9iamVjdC5hc3NpZ24oe30sIHRhcmdldClcbiAgICBpZiAodGhpcy5pc09iamVjdCh0YXJnZXQpICYmIHRoaXMuaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgIGlmICghKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG91dHB1dCwge1xuICAgICAgICAgICAgICBba2V5XTogc291cmNlW2tleV1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gdGhpcy5leHRlbmQodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKG91dHB1dCwge1xuICAgICAgICAgICAgW2tleV06IHNvdXJjZVtrZXldXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuY2hhcnQpO1xuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHRoaXMuY2hhcnQudXBkYXRlT3B0aW9ucyh0aGlzLmdldENvbmZpZygpKVxuICAgICAgdGhpcy5jaGFydC51cGRhdGVTZXJpZXModGhpcy5wcm9wcy5zZXJpZXMpXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuY2hhcnQgJiYgdHlwZW9mIHRoaXMuY2hhcnQuZGVzdHJveSA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmNoYXJ0LmRlc3Ryb3koKVxuICB9XG59XG5cbkNoYXJ0cy5wcm9wVHlwZXMgPSB7XG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgd2lkdGg6IFByb3BUeXBlcy5hbnksXG4gIGhlaWdodDogUHJvcFR5cGVzLmFueSxcbiAgc2VyaWVzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgb3B0aW9uczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59XG5cbkNoYXJ0cy5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6IFwibGluZVwiLFxuICB3aWR0aDogXCIxMDAlXCIsXG4gIGhlaWdodDogXCJhdXRvXCJcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2hhcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9